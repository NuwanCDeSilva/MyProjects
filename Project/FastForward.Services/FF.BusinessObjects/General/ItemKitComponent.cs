using System; 
using System.Data;

namespace FF.BusinessObjects
{

    //===========================================================================================================
    // This code is generated by Code gen V.1 
    // All rights reserved.
    // Suneththaraka02@gmail.com 
    // Computer :- ITPD14  | User :- sahanj On 05-Feb-2016 12:27:45
    //===========================================================================================================

    public class ItemKitComponent
    {
        public String MIKC_ITM_CODE_MAIN { get; set; }
        public String MIKC_ITM_CODE_COMPONENT { get; set; }
        public String MIKC_DESC_COMPONENT { get; set; }
        public Decimal MIKC_NO_OF_UNIT { get; set; }
        public String MIKC_CREATE_BY { get; set; }
        public DateTime MIKC_CREATE_WHEN { get; set; }
        public String MIKC_LAST_MODIFY_BY { get; set; }
        public DateTime MIKC_LAST_MODIFY_WHEN { get; set; }
        public Decimal MIKC_COST { get; set; }
        public Int32 MIKC_SEQ_NO { get; set; }
        public String MIKC_ITM_TYPE { get; set; }
        public Int32 MIKC_ACTIVE { get; set; }
        public String MIKC_ITEM_CATE { get; set; }
        public String MIKC_COST_METHOD { get; set; }
        public Int32 MIKC_CHG_MAIN_SERIAL { get; set; }
        public String MIKC_UOM { get; set; }
        public Int32 MIKC_ISSCAN { get; set; }
        public Int32 MIKC_SCAN_SEQ { get; set; }
        public String MIKC_TP { get; set; }

        //2016-Mar-05 Lakshan
        public String MIKC_STATUS { get; set; }
        public String MIKC_STATUS_CD { get; set; }
        public String MIKC_LOC { get; set; }
        public String MIKC_LOC_DES { get; set; }
        public Int32 MIKC_LINE { get; set; }
        public String MIKC_SERIAL_NO { get; set; }
        public Int32 MIKC_IS_SERIAL { get; set; }

        public String MIKC_DOCNO { get; set; }

        public String ACTIVEDES { get; set; }
        public String ISSCAN { get; set; }
        public String CHANGITEM { get; set; }
        public String TYPE { get; set; }

        public Int32 MIKC_ALLOW_EDIT { get; set; }//Added By Dulaj 2018/Jun/16
        public static ItemKitComponent Converter(DataRow row)
        {
            return new ItemKitComponent
            {
                MIKC_ITM_CODE_MAIN = row["MIKC_ITM_CODE_MAIN"] == DBNull.Value ? string.Empty : row["MIKC_ITM_CODE_MAIN"].ToString(),
                MIKC_ITM_CODE_COMPONENT = row["MIKC_ITM_CODE_COMPONENT"] == DBNull.Value ? string.Empty : row["MIKC_ITM_CODE_COMPONENT"].ToString(),
                MIKC_DESC_COMPONENT = row["MIKC_DESC_COMPONENT"] == DBNull.Value ? string.Empty : row["MIKC_DESC_COMPONENT"].ToString(),
                MIKC_NO_OF_UNIT = row["MIKC_NO_OF_UNIT"] == DBNull.Value ? 0 : Convert.ToDecimal(row["MIKC_NO_OF_UNIT"].ToString()),
                MIKC_CREATE_BY = row["MIKC_CREATE_BY"] == DBNull.Value ? string.Empty : row["MIKC_CREATE_BY"].ToString(),
                MIKC_CREATE_WHEN = row["MIKC_CREATE_WHEN"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(row["MIKC_CREATE_WHEN"].ToString()),
                MIKC_LAST_MODIFY_BY = row["MIKC_LAST_MODIFY_BY"] == DBNull.Value ? string.Empty : row["MIKC_LAST_MODIFY_BY"].ToString(),
                MIKC_LAST_MODIFY_WHEN = row["MIKC_LAST_MODIFY_WHEN"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(row["MIKC_LAST_MODIFY_WHEN"].ToString()),
                MIKC_COST = row["MIKC_COST"] == DBNull.Value ? 0 : Convert.ToDecimal(row["MIKC_COST"].ToString()),
                MIKC_SEQ_NO = row["MIKC_SEQ_NO"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_SEQ_NO"].ToString()),
                MIKC_ITM_TYPE = row["MIKC_ITM_TYPE"] == DBNull.Value ? string.Empty : row["MIKC_ITM_TYPE"].ToString(),
                MIKC_ACTIVE = row["MIKC_ACTIVE"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_ACTIVE"].ToString()),
                MIKC_ITEM_CATE = row["MIKC_ITEM_CATE"] == DBNull.Value ? string.Empty : row["MIKC_ITEM_CATE"].ToString(),
                MIKC_COST_METHOD = row["MIKC_COST_METHOD"] == DBNull.Value ? string.Empty : row["MIKC_COST_METHOD"].ToString(),
                MIKC_CHG_MAIN_SERIAL = row["MIKC_CHG_MAIN_SERIAL"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_CHG_MAIN_SERIAL"].ToString()),
                MIKC_UOM = row["MIKC_UOM"] == DBNull.Value ? string.Empty : row["MIKC_UOM"].ToString(),
                MIKC_ISSCAN = row["MIKC_ISSCAN"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_ISSCAN"].ToString()),
                MIKC_SCAN_SEQ = row["MIKC_SCAN_SEQ"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_SCAN_SEQ"].ToString()),
                MIKC_TP = row["MIKC_TP"] == DBNull.Value ? string.Empty : row["MIKC_TP"].ToString()
            };
        }

        public static ItemKitComponent ConverterSplit(DataRow row)
        {
            return new ItemKitComponent
            {
                MIKC_ITM_CODE_MAIN = row["MIKC_ITM_CODE_MAIN"] == DBNull.Value ? string.Empty : row["MIKC_ITM_CODE_MAIN"].ToString(),
                MIKC_ITM_CODE_COMPONENT = row["MIKC_ITM_CODE_COMPONENT"] == DBNull.Value ? string.Empty : row["MIKC_ITM_CODE_COMPONENT"].ToString(),
                MIKC_DESC_COMPONENT = row["MIKC_DESC_COMPONENT"] == DBNull.Value ? string.Empty : row["MIKC_DESC_COMPONENT"].ToString(),
                MIKC_NO_OF_UNIT = row["MIKC_NO_OF_UNIT"] == DBNull.Value ? 0 : Convert.ToDecimal(row["MIKC_NO_OF_UNIT"].ToString()),
                MIKC_CREATE_BY = row["MIKC_CREATE_BY"] == DBNull.Value ? string.Empty : row["MIKC_CREATE_BY"].ToString(),
                MIKC_CREATE_WHEN = row["MIKC_CREATE_WHEN"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(row["MIKC_CREATE_WHEN"].ToString()),
                MIKC_LAST_MODIFY_BY = row["MIKC_LAST_MODIFY_BY"] == DBNull.Value ? string.Empty : row["MIKC_LAST_MODIFY_BY"].ToString(),
                MIKC_LAST_MODIFY_WHEN = row["MIKC_LAST_MODIFY_WHEN"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(row["MIKC_LAST_MODIFY_WHEN"].ToString()),
                MIKC_COST = row["MIKC_COST"] == DBNull.Value ? 0 : Convert.ToDecimal(row["MIKC_COST"].ToString()),
                MIKC_SEQ_NO = row["MIKC_SEQ_NO"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_SEQ_NO"].ToString()),
                MIKC_ITM_TYPE = row["MIKC_ITM_TYPE"] == DBNull.Value ? string.Empty : row["MIKC_ITM_TYPE"].ToString(),
                MIKC_ACTIVE = row["MIKC_ACTIVE"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_ACTIVE"].ToString()),
                MIKC_ITEM_CATE = row["MIKC_ITEM_CATE"] == DBNull.Value ? string.Empty : row["MIKC_ITEM_CATE"].ToString(),
                MIKC_COST_METHOD = row["MIKC_COST_METHOD"] == DBNull.Value ? string.Empty : row["MIKC_COST_METHOD"].ToString(),
                MIKC_CHG_MAIN_SERIAL = row["MIKC_CHG_MAIN_SERIAL"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_CHG_MAIN_SERIAL"].ToString()),
                MIKC_UOM = row["MIKC_UOM"] == DBNull.Value ? string.Empty : row["MIKC_UOM"].ToString(),
                MIKC_ISSCAN = row["MIKC_ISSCAN"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_ISSCAN"].ToString()),
                MIKC_SCAN_SEQ = row["MIKC_SCAN_SEQ"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_SCAN_SEQ"].ToString()),
                MIKC_TP = row["MIKC_TP"] == DBNull.Value ? string.Empty : row["MIKC_TP"].ToString(),
                MIKC_ALLOW_EDIT = row["MIKC_ALLOW_EDIT"] == DBNull.Value ? 0 : Convert.ToInt32(row["MIKC_ALLOW_EDIT"].ToString())
            };
        }
    }
} 


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;
using FF.BusinessObjects;
using FF.Interfaces;
using System.Linq;
using System.Linq.Expressions;
using FF.WindowsERPClient.Reports.Sales;
using System.Runtime.InteropServices;
using FF.BusinessObjects.Financial;

namespace FF.WindowsERPClient.Finance
{
    public partial class ReceiptEntry : Base
    {
        private List<HpSheduleDetails> _sheduleDetails = new List<HpSheduleDetails>();
        private List<VehicalRegistration> _regList = new List<VehicalRegistration>();
        private List<VehicleInsuarance> _insList = new List<VehicleInsuarance>();
        private HpAccount _HpAccount = new HpAccount();
        private HpSchemeDetails _SchemeDetails = new HpSchemeDetails();
        private List<ReptPickSerials> _ResList = new List<ReptPickSerials>();
        private List<RecieptItem> _list = new List<RecieptItem>();
        private List<GiftVoucherPages> _gvDetails = new List<GiftVoucherPages>();
        private List<ReceiptItemDetails> _tmpRecItem = new List<ReceiptItemDetails>();
        // private List<PriceDefinitionRef> _PriceDefinitionRef = null;
        private List<HpSchemeDefinition> _SchemeDefinition = new List<HpSchemeDefinition>();
        private MasterBusinessEntity _businessEntity = null; private List<MasterItemComponent> _masterItemComponent = null; private PriceBookLevelRef _priceBookLevelRef = null; private List<PriceBookLevelRef> _priceBookLevelRefList = null;
        private bool _isInventoryCombineAdded = false; private Int32 ScanSequanceNo = 0; private List<ReptPickSerials> ScanSerialList = null; private bool IsPriceLevelAllowDoAnyStatus = false; private string WarrantyRemarks = string.Empty; private Int32 WarrantyPeriod = 0; private string ScanSerialNo = string.Empty; private string DefaultItemStatus = string.Empty;
        private Dictionary<decimal, decimal> ManagerDiscount = null; private CashGeneralEntiryDiscountDef GeneralDiscount = null; private string DefaultBook = string.Empty; private string DefaultLevel = string.Empty; private string DefaultInvoiceType = string.Empty; private string DefaultStatus = string.Empty; private string DefaultBin = string.Empty; private MasterItem _itemdetail = null;
        private List<PriceDetailRef> _priceDetailRef = null; private MasterBusinessEntity _masterBusinessCompany = null; private List<PriceSerialRef> _MainPriceSerial = null; private List<PriceSerialRef> _tempPriceSerial = null; private List<PriceCombinedItemRef> _MainPriceCombinItem = null; private List<PriceCombinedItemRef> _tempPriceCombinItem = null;
        private Int32 _lineNo = 0; private bool _isEditPrice = false; private bool _isEditDiscount = false; private decimal GrndSubTotal = 0; private decimal GrndDiscount = 0; private decimal GrndTax = 0; private decimal _toBePayNewAmount = 0; private bool _isCompleteCode = false;
        private bool _isGiftVoucherCheckBoxClick = false; private DataTable MasterChannel = null; private CommonSearch.CommonOutScan _commonOutScan = null; private bool IsToken = false; private bool IsSaleFigureRoundUp = false; private DataTable _tblExecutive = null; private CommonSearch.CommonSearch _commonSearch = null; private bool IsFwdSaleCancelAllowUser = false; private bool IsDlvSaleCancelAllowUser = false; private bool _IsVirtualItem = false; private string technicianCode = string.Empty; private bool _iswhat = false;
        public decimal SSPriceBookPrice = 0; public string SSPriceBookSequance = string.Empty; public string SSPriceBookItemSequance = string.Empty; public string SSIsLevelSerialized = string.Empty; public string SSPromotionCode = string.Empty; public string SSCirculerCode = string.Empty; public Int32 SSPRomotionType = 0; public Int32 SSCombineLine = 0;
        private List<MasterItemTax> MainTaxConstant = null; private List<ReptPickSerials> _promotionSerial = null; private List<ReptPickSerials> _promotionSerialTemp = null;
        private bool _isBackDate = false; private MasterProfitCenter _MasterProfitCenter = null; private List<PriceDefinitionRef> _PriceDefinitionRef = null; private const string InvoiceBackDateName = "SALESENTRY"; private static int VirtualCounter = 1;
        private List<InvoiceSerial> InvoiceSerialList = null; private List<ReptPickSerials> InventoryCombinItemSerialList = null; private List<ReptPickSerials> PriceCombinItemSerialList = null; private List<ReptPickSerials> BuyBackItemList = null;
        private string _proVouInvcItem = string.Empty;
        private bool _serialMatch = true; private PriortyPriceBook _priorityPriceBook = null;
        private Boolean _isProcess = false;
        private decimal _regAmt = 0;
        private string _invType = "";
        private Int32 _invLine = 0;
        private string _accNo = "";
        private DateTime _invDt = Convert.ToDateTime(DateTime.Now).Date;
        private string _invNo = "";
        private Int32 _insuTerm = 0;
        private Int32 _colTerm = 0;
        private decimal _insuAmt = 0;
        private Boolean _IsRecall = false;
        private Boolean _RecStatus = false;
        private Boolean _sunUpload = false;
        private Boolean _isRes = false;
        private decimal _usedAmt = 0;
        private string _selectPromoCode = "";
        private string _selectSerial = "";
        private DateTime _serverDt = DateTime.Now.Date;
        Boolean chkDeliverLater = true;
        Boolean chkDeliverNow = false;
        string lblPromoVouNo = string.Empty;
        string lblPromoVouUsedFlag = string.Empty;
        decimal _minDPRate = 0;
        Int32 _vehRegTimes = 0;
        Int32 _vehRegUsedTimes = 0;
        Int32 _SVRD_SEQ = 0;
        private string _bkNo = "";  //kapila 27/4/2016
        private string _gvPrefix = "";
        private string _gvPage = "";
        private List<InvoiceItem> _invoiceItemList = null;
        private List<InvoiceItem> _invoiceItemListWithDiscount = null; private List<RecieptItem> _recieptItem = null; private List<RecieptItem> _newRecieptItem = null;
        private List<ReceiptAddDetails> _recAddDetList = new List<ReceiptAddDetails>();     //kapila 2/5/2016
        private List<MstRecSubTp> ReceiptSettingList = new List<MstRecSubTp>(); // Add by akila 2016/12/22
        private Boolean _isStrucBaseTax = false;
        private decimal HsMinPayAmount = 0; // by akila
        private string IntrCompanyCode = null;
        private string HSSelectedtItem = null;
        private decimal ActualRegAmount = 0;
        private Boolean _isResser = false;// tharanga
        public ReceiptEntry()
        {
            InitializeComponent();
            SetGridViewAutoColumnGenerate();
            SetPanelSize();

            //MasterCompany _masterComp = null;
            //_masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);

            //add by akila 2017/06/30
            MasterCompany _masterComp = new MasterCompany();
            _masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);
            if(_masterComp != null)
            {
                if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;
        }
            else {_isStrucBaseTax = false;}           
        }

        private void SetGridViewAutoColumnGenerate()
        {
            gvInvoiceItem.AutoGenerateColumns = false;
            //  gvPopSerial.AutoGenerateColumns = false; 
            //   gvGiftVoucher.AutoGenerateColumns = false;
            //  gvDisItem.AutoGenerateColumns = false;
            gvNormalPrice.AutoGenerateColumns = false; gvPopComItem.AutoGenerateColumns = false; gvPopComItemSerial.AutoGenerateColumns = false;
            //  gvPopConsumPricePick.AutoGenerateColumns = false; 
            gvPromotionItem.AutoGenerateColumns = false;
            gvPromotionPrice.AutoGenerateColumns = false;
            gvPromotionSerial.AutoGenerateColumns = false;
            //  gvRePayment.AutoGenerateColumns = false; 
        }

        private class CenterWinDialog : IDisposable
        {
            private int mTries = 0;
            private Form mOwner;

            public CenterWinDialog(Form owner)
            {
                mOwner = owner;
                owner.BeginInvoke(new MethodInvoker(findDialog));
            }

            private void findDialog()
            {
                // Enumerate windows to find the message box
                if (mTries < 0) return;
                EnumThreadWndProc callback = new EnumThreadWndProc(checkWindow);
                if (EnumThreadWindows(GetCurrentThreadId(), callback, IntPtr.Zero))
                {
                    if (++mTries < 10) mOwner.BeginInvoke(new MethodInvoker(findDialog));
                }
            }

            private bool checkWindow(IntPtr hWnd, IntPtr lp)
            {
                // Checks if <hWnd> is a dialog
                StringBuilder sb = new StringBuilder(260);
                GetClassName(hWnd, sb, sb.Capacity);
                if (sb.ToString() != "#32770") return true;
                // Got it
                Rectangle frmRect = new Rectangle(mOwner.Location, mOwner.Size);
                RECT dlgRect;
                GetWindowRect(hWnd, out dlgRect);
                MoveWindow(hWnd,
                    frmRect.Left + (frmRect.Width - dlgRect.Right + dlgRect.Left) / 2,
                    frmRect.Top + (frmRect.Height - dlgRect.Bottom + dlgRect.Top) / 2,
                    dlgRect.Right - dlgRect.Left,
                    dlgRect.Bottom - dlgRect.Top, true);
                return false;
            }




            public void Dispose()
            {
                mTries = -1;
            }

            // P/Invoke declarations
            private delegate bool EnumThreadWndProc(IntPtr hWnd, IntPtr lp);

            [DllImport("user32.dll")]
            private static extern bool EnumThreadWindows(int tid, EnumThreadWndProc callback, IntPtr lp);

            [DllImport("kernel32.dll")]
            private static extern int GetCurrentThreadId();

            [DllImport("user32.dll")]
            private static extern int GetClassName(IntPtr hWnd, StringBuilder buffer, int buflen);

            [DllImport("user32.dll")]
            private static extern bool GetWindowRect(IntPtr hWnd, out RECT rc);

            [DllImport("user32.dll")]
            private static extern bool MoveWindow(IntPtr hWnd, int x, int y, int w, int h, bool repaint);

            private struct RECT { public int Left; public int Top; public int Right; public int Bottom; }
        }


        #region Common Searching Area
        private string SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType _type)
        {
            StringBuilder paramsText = new StringBuilder();
            string seperator = "|";
            paramsText.Append(((int)_type).ToString() + ":");

            switch (_type)
            {
                case CommonUIDefiniton.SearchUserControlType.ServiceJobSearchByCustomer:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefLoca + seperator + "2_11" + seperator + txtCusCode.Text + seperator);
                        //paramsText.Append(BaseCls.GlbUserComCode + seperator + null + seperator + "8,11" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.QuoByCust:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + txtCusCode.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Item:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InsuCom:
                    {
                        paramsText.Append("INS" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InsuPolicy:
                    {
                        paramsText.Append("" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.CustomerCommon:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.ReceiptType:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Division:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.OutstandingInv:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + txtCusCode.Text.Trim() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.OutstandingInvOth:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + txtOthSR.Text + seperator + txtCusCode.Text.Trim() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.SalesInvoice:
                    {

                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + "INV" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceByCus:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + "INV" + seperator + txtCusCode.Text.Trim() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceItems:
                    {
                        paramsText.Append(txtInvoice.Text.Trim() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.DCNItems:
                    {
                        paramsText.Append(txtQuoNo.Text.Trim() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.AvailableSerialWithOth:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefLoca + seperator + txtItem.Text.Trim() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.DeliverdSerials:
                    {
                        if (string.IsNullOrEmpty(txtQuoNo.Text))
                            paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefLoca + seperator + txtInvoice.Text.Trim() + seperator + txtItem.Text.Trim() + seperator);
                        else
                            paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefLoca + seperator + txtQuoNo.Text.Trim() + seperator + txtItem.Text.Trim() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Receipt:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + txtRecType.Text.Trim());
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.GetItmByType:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + "G" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceExecutive:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.ReceiptDate:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.AllProfitCenters:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceItemUnAssable:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PriceBook:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + cmbInvType.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PriceLevel:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + cmbInvType.Text + seperator + cmbBook.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PriceLevelItemStatus:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + cmbBook.Text + seperator + cmbLevel.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.ItemAvailableSerial:
                    {
                        if ((string.IsNullOrEmpty(txtIntrLocation.Text)) && (string.IsNullOrEmpty(txtIntrCompany.Text)))
                        {
                            paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefLoca + seperator);
                        }
                        else { paramsText.Append(txtIntrCompany.Text.ToUpper() + seperator + txtIntrLocation.Text.ToUpper() + seperator); }
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Location:
                    {
                        paramsText.Append(txtIntrCompany.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.ItemByLocation:
                    {
                        paramsText.Append(txtIntrCompany.Text.ToUpper() + seperator + txtIntrLocation.Text.ToUpper() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Company:
                    {
                        paramsText.Append(BaseCls.GlbUserID + seperator + txtIntrCompany.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.SubReceiptTypes:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + txtRecType.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceWithoutReversal:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + "INV" + seperator + txtCusCode.Text);
                        break;
                    }
                //case CommonUIDefiniton.SearchUserControlType.HpAccount:
                //    {
                //        paramsText.Append(BaseCls.GlbUserComCode + seperator + _profitCenter.ToUpper() + seperator + "A" + seperator);
                //        break;
                //    }
                default:
                    break;
            }

            return paramsText.ToString();
        }
        #endregion

        private void ReceiptEntry_Load(object sender, EventArgs e)
        {
            Clear_Data();
            ucPayModes1.MainGrid.Columns[2].Visible = true;
            LoadCachedObjects();
        }

        private void Clear_Data()
        {
            txtSubReceiptTp.Enabled = true;
            cmbSch.DataSource = null;
            btnProcessRefresh_Click(null, null);
            HSSelectedtItem = null;
            pnlInvoice.Visible = true;
            pnlAmount.Visible = true;
            grpSubRecTp.Visible = false;
            txtSubReceiptTp.Text = null;
            pnlIntrCompany.Visible = false;
            txtIntrCompany.Text = null;
            txtIntrCompany.Enabled = false;
            pnlIntrLocation.Visible = false;
            txtIntrLocation.Text = null;
            txtIntrLocation.Enabled = false;
            _lineNo = 0;
            txtAllocQty.Text = "0";
            txtRecQty.Text = "0";
            txtFreeQty.Text = "0";
            pnlItemAlloc.Visible = false;
            dgvAllocation.DataSource = new DataTable();
            _invoiceItemList = new List<InvoiceItem>();
            _invoiceItemList = null;
            gvInvoiceItem.DataSource = null;
            //gvInvoiceItem.DataSource = new List<InvoiceItem>();
            // gvInvoiceItem.DataSource = _invoiceItemList;
            ucPayModes1.Enabled = true;
            _sheduleDetails = new List<HpSheduleDetails>();
            _regList = new List<VehicalRegistration>();
            _insList = new List<VehicleInsuarance>();
            _HpAccount = new HpAccount();
            _SchemeDetails = new HpSchemeDetails();
            _ResList = new List<ReptPickSerials>();
            ucPayModes1.MainGrid.DataSource = new List<RecieptItem>();
            _list = new List<RecieptItem>();
            _gvDetails = new List<GiftVoucherPages>();
            _tmpRecItem = new List<ReceiptItemDetails>();
            _recAddDetList = new List<ReceiptAddDetails>();
            ucPayModes1.PaidAmountLabel.Text = "0.00";
            ucPayModes1.ClearControls();
            //gvInvoiceItem.DataSource = new List<InvoiceItem>();
            //  gvInvoiceItem.DataSource = _invoiceItemList;
            lblSalesType.Text = "";
            lblSchme.Text = "";
            dgvGv.AutoGenerateColumns = false;
            dgvGv.DataSource = new List<GiftVoucherPages>();
            txtUnitAmt.Text = FormatToCurrency("0");
            btn_add_ser.Enabled = true;
            gbInsu.Visible = false;
            gbItem.Visible = false;
            chkDel.Enabled = false;
            chkAnnual.Visible = false;
            lblBackDateInfor.Text = "";
            chklaunchparticipate.Checked = false;
            chklaunchparticipate.Enabled = false;
            chklaunchparticipate.Visible = false;
            lblBalInv.Text = "0.00";
            lblBalInv.Visible = false;
            lblBalLable.Visible = false;
            lblTotInvVal.Text = "0.00";
            //if (BaseCls.GlbUserDefProf == "CREDT" || BaseCls.GlbUserDefProf == "216" || BaseCls.GlbUserDefProf == "26E" || BaseCls.GlbUserDefProf == "205" || BaseCls.GlbUserDefProf == "147" || BaseCls.GlbUserDefProf =="27")
            //{
            //    chklaunchparticipate.Visible = true;
            //    lblBalInv.Visible = true;
            //    lblBalLable.Visible = true;
            //}
            
            _regAmt = 0;
            _invType = "";
            _accNo = "";
            _invDt = Convert.ToDateTime(DateTime.Now).Date;
            _invNo = "";
            _invLine = 0;
            _colTerm = 0;
            _insuTerm = 0;
            _insuAmt = 0;
            _IsRecall = false;
            _RecStatus = false;
            _sunUpload = false;
            _isRes = false;
            _usedAmt = 0;
            chkOth.Enabled = true;
            txtOthSR.Enabled = true;
            chkOth.Checked = false;
            txtOthSR.Text = "";
            txtNote.Text = "";
            txtPayment.Enabled = true;
            chkitmres.Enabled = true;
            chkitmres.Checked = true;
            _isResser = false;

            ClearHP();
            if (BaseCls.GlbUserComCode != "AAL")
            {
                lblSer1.Text = "Serial 1 :";
                lblSer2.Text = "Serial 2 :";
            }

            dgvItem.Rows.Clear();
            dgvIns.Rows.Clear();
            dgvReg.Rows.Clear();
            txtRecType.Text = "";
            txtRecNo.Text = "";
            txtManual.Text = "";
            txtDivision.Text = "";
            radioButtonManual.Checked = false;
            radioButtonManual.Enabled = true;
            radioButtonManual.Checked = false;
            dtpRecDate.Value = Convert.ToDateTime(DateTime.Now).Date;
            txtGVCode.Text = "";
            lblFrompg.Text = "";
            lblPageCount.Text = "";
            _gvPrefix = "";
            _gvPage = "";
            cmbGvBook.DataSource = new DataTable();
            cmbGVPrefix.DataSource = new DataTable();
            cmbTopg.DataSource = new DataTable();
            txtPgAmt.Text = "";
            txtTotGvAmt.Text = "";
            txtTotal.Text = "";
            txtSalesEx.Text = "";

            cmbDistrict.Enabled = true;
            txtCusCode.Enabled = true;
            txtRecType.Enabled = true;
            ClearSettle_Data();
            ClearCus_Data();
            Load_District();
            btnSave.Enabled = true;
            btnCancel.Enabled = false;
            gbGVDet.Enabled = true;
            gbGVDet.Visible = false;
            gbsettle.Visible = true;
            chkAllowPromo.Checked = true;
            chkAllowPromo.Visible = false;
            chkGvFOC.Checked = false;
            chkGvFOC.Visible = false;
            dtGVExp.Value = DateTime.Now.Date;
            dtGVExp.Visible = false;
            lblGVExp.Visible = false;
            bool _allowCurrentTrans = false;
            IsAllowBackDateForModule(BaseCls.GlbUserComCode, string.Empty, BaseCls.GlbUserDefProf, this.GlbModuleName, dtpRecDate, lblBackDateInfor, string.Empty, out _allowCurrentTrans);
            if (BaseCls.GlbUserComCode == "AST")
            {
                txtRecType.Text = "GVISU";
            }
            else
            {
                txtRecType.Text = "ADVAN";
            }
            //kapila 8/4/2015
            ucPayModes1.TransDate.Text = dtpRecDate.Text;

            if (BaseCls.GlbIsManChkLoc == true)
            {
                txtManual.Text = "";
                _bkNo = "";
                // txtManual.Enabled = false;
            }
            else
            {
                txtManual.Text = "";
                _bkNo = "";
                txtManual.Enabled = true;
            }
            cmbBook.SelectedIndex = -1;
            cmbLevel.SelectedIndex = -1;
            cmbStatus.SelectedIndex = -1;
            txtTaxAmt.Text = "0";
            txtQty.Text = "0";
            txtQty.Text = "1";
            txtSerialNo.Text = "";
            txtUnitPrice.Text = "0";
            txtLineTotAmt.Text = "0";
            TxtAdvItem.Text = "";
            txtItem.Text = "";

            gvOth.AutoGenerateColumns = false;
            gvOth.DataSource = new List<ReceiptAddDetails>();
            txtOthRef.Text = "";
            txtOthRem.Text = "";
            txtOthAmt.Text = "0.00";
            cmbSeatTp.SelectedIndex = -1;
            cmbTickTp.SelectedIndex = -1;
            txtNoTick.Text = "";
            dtpRes.Value = DateTime.Now.Date;
            pnlJob.Enabled = true;
            dgvGrade.AutoGenerateColumns = false;
            dgvGrade.DataSource = null;
            txtJobNo.Text = "";
            txtJobItm.Text = "";
            txtComent.Text = "";
            pnlJob.Visible = false;
            grpSubRecTp.Visible = false;
            txtRecType.Focus();
            grpCustomer.Enabled = true;
            ReceiptSettingList = new List<MstRecSubTp>();
            pnlQuo.Visible = true;
            btn_add_ser.Visible = true;
            pnlAdv.Visible = false;
            pnlIntrLocation.Visible = false;
            txtIntrLocation.Enabled = false;

            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0");

            lblGrndSubTotal.Text = "0.00";
            lblGrndDiscount.Text = "0.00";
            lblGrndAfterDiscount.Text = "0.00";
            lblGrndTax.Text = "0.00";
            lblGrndTotalAmount.Text = "0.00";

            txtRecType.Focus();
            txtRecType.Select();
            SSPromotionCode = string.Empty;
            _isInventoryCombineAdded = false;
            _SchemeDefinition = new List<HpSchemeDefinition>();
            lblInvoice.Text = "Invoice #";
            txtInvoice.Text = "";
            lblAmount.Text = "Amount";
            txtBalance.Text = "0.00";

            pnlInvoice.Visible = true;
            pnlAmount.Visible = true;
            ActualRegAmount = 0;
            ucPayModes1.InvoiceNo = string.Empty;
        }

        private void Load_District()
        {
            cmbDistrict.DataSource = new List<DistrictProvince>();
            List<DistrictProvince> _district = CHNLSVC.Sales.GetDistrict("");
            var _final = (from _lst in _district
                          select _lst.Mds_district).ToList();

            cmbDistrict.DataSource = _final.ToList();
        }

        private void txtBalnace_Leave(object sender, EventArgs e)
        {
            decimal _Amt = 0;
            if (!string.IsNullOrEmpty(txtBalance.Text))
            {
                if (!IsNumeric(txtBalance.Text))
                {
                    MessageBox.Show("Amount should be numeric.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtBalance.Text = "0.00";
                    txtBalance.Focus();
                    return;
                }
                _Amt = Convert.ToDecimal(txtBalance.Text);
                txtBalance.Text = _Amt.ToString("n");

            }

            else
            {
                txtBalance.Text = _Amt.ToString("n");

            }
        }

        private void txtRecNo_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                {
                    if (!string.IsNullOrEmpty(txtRecNo.Text))
                    {
                        txtRecNo_Leave(null, null);
                    }
                    txtManual.Focus();
                }
                else if (e.KeyCode == Keys.F2)
                {
                    if (string.IsNullOrEmpty(txtRecType.Text))
                    {
                        MessageBox.Show("Please select receipt type.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtRecType.Focus();
                        return;
                    }

                    CommonSearch.CommonSearchDate _CommonSearch = new CommonSearch.CommonSearchDate();

                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ReceiptDate);

                    DataTable _result = CHNLSVC.CommonSearch.GetReceiptsDate(_CommonSearch.SearchParams, null, null, dtpRecDate.Value.Date.AddMonths(-1), dtpRecDate.Value.Date);
                    _CommonSearch.dtpFrom.Value = dtpRecDate.Value.Date.AddMonths(-1);
                    _CommonSearch.dtpTo.Value = dtpRecDate.Value.Date;
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtRecNo;
                    _CommonSearch.IsSearchEnter = true;
                    _CommonSearch.ShowDialog();
                    txtRecNo.Select();


                    //DataTable _result = CHNLSVC.CommonSearch.GetReceipts(_CommonSearch.SearchParams, null, null);
                    //_CommonSearch.dvResult.DataSource = _result;
                    //_CommonSearch.BindUCtrlDDLData(_result);
                    //_CommonSearch.obj_TragetTextBox = txtRecNo;
                    //_CommonSearch.IsSearchEnter = true;
                    //_CommonSearch.ShowDialog();
                    //txtRecNo.Select();
                }
                else if (e.KeyCode == Keys.F9)
                {
                    if (txtRecType.Text == "GVISU")
                    {
                        clsSalesRep obj = new clsSalesRep();
                        BaseCls.GlbReportDoc = txtRecNo.Text;
                        BaseCls.GlbReportProfit = BaseCls.GlbUserDefProf;
                        BaseCls.GlbReportTp = "REC";

                        obj.POSReceiptDirectPrint();
                    }
                }
            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // saved receipt entry load to screen
        private void txtRecNo_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtRecNo.Text))
            {
                _IsRecall = false;
                _RecStatus = false;
                _sunUpload = false;
                Boolean _isValidRec = false;

                RecieptHeader _ReceiptHeader = null;
                _ReceiptHeader = CHNLSVC.Sales.GetReceiptHeader(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecNo.Text.Trim());

                if (_ReceiptHeader != null)
                {
                    _IsRecall = true;
                    txtRecType.Text = _ReceiptHeader.Sar_receipt_type;
                    //  ucPayModes1.Enabled = false;

                    _isValidRec = CHNLSVC.Sales.IsValidReceiptType(BaseCls.GlbUserComCode, _ReceiptHeader.Sar_receipt_type);

                    if (_isValidRec == false)
                    {
                        MessageBox.Show("Not allowed to view receipt type " + _ReceiptHeader.Sar_receipt_type + " in receipt module.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtRecType.Text = "";
                        Clear_Data();
                        return;
                    }

                    txtRecNo.Text = _ReceiptHeader.Sar_receipt_no;
                    dtpRecDate.Value = Convert.ToDateTime(_ReceiptHeader.Sar_receipt_date).Date;
                    dtpRecDate.Enabled = false;
                    if (_ReceiptHeader.Sar_anal_8 == 1)
                    {
                        radioButtonManual.Checked = true;
                    }
                    else
                    {
                        radioButtonManual.Checked = false;
                    }
                    txtManual.Text = _ReceiptHeader.Sar_manual_ref_no;
                    txtNote.Text = _ReceiptHeader.Sar_remarks;
                    txtTotal.Text = Convert.ToDecimal(_ReceiptHeader.Sar_tot_settle_amt).ToString("n");
                    txtCusCode.Text = _ReceiptHeader.Sar_debtor_cd;
                    txtCusAdd1.Text = _ReceiptHeader.Sar_debtor_add_1;
                    txtCusAdd2.Text = _ReceiptHeader.Sar_debtor_add_2;
                    txtCusName.Text = _ReceiptHeader.Sar_debtor_name;
                    txtMobile.Text = _ReceiptHeader.Sar_mob_no;
                    txtNIC.Text = _ReceiptHeader.Sar_nic_no;
                    txtProvince.Text = _ReceiptHeader.Sar_anal_2;
                    ucPayModes1.PaidAmountLabel.Text = Convert.ToDecimal(_ReceiptHeader.Sar_tot_settle_amt).ToString("n");
                    _usedAmt = _ReceiptHeader.Sar_used_amt;
                    if (_ReceiptHeader.Sar_is_oth_shop == true)
                    {
                        chkOth.Checked = true;
                        txtOthSR.Text = _ReceiptHeader.Sar_oth_sr;
                        chkOth.Enabled = false;
                        txtOthSR.Enabled = false;
                    }


                    if (string.IsNullOrEmpty(_ReceiptHeader.Sar_anal_1))
                    {
                        //  ddlDistrict.SelectedValue = " ";
                    }
                    else
                    {
                        cmbDistrict.Text = _ReceiptHeader.Sar_anal_1;
                    }
                    _RecStatus = _ReceiptHeader.Sar_act;
                    _sunUpload = _ReceiptHeader.Sar_uploaded_to_finance;

                    if (string.IsNullOrEmpty(_ReceiptHeader.Sar_anal_4))
                    {
                        txtSalesEx.Text = "";
                    }
                    else
                    {
                        txtSalesEx.Text = _ReceiptHeader.Sar_anal_4;
                    }
                    txtCusCode.Enabled = false;


                    BindSaveReceiptDetails(_ReceiptHeader.Sar_receipt_no);
                    BindSaveVehicleReg(_ReceiptHeader.Sar_receipt_no);
                    BindSaveVehicleIns(_ReceiptHeader.Sar_receipt_no);

                    _gvDetails = new List<GiftVoucherPages>();
                    _gvDetails = CHNLSVC.Inventory.GetGiftVoucherByOthRef(_ReceiptHeader.Sar_com_cd, _ReceiptHeader.Sar_profit_center_cd, _ReceiptHeader.Sar_receipt_no);

                    dgvGv.AutoGenerateColumns = false;
                    dgvGv.DataSource = new List<GiftVoucherPages>();
                    dgvGv.DataSource = _gvDetails;

                    if (txtRecType.Text == "VHREG")
                    {
                        tbOth.SelectedTab = tpReg;
                    }
                    else if (txtRecType.Text == "VHINS")
                    {
                        tbOth.SelectedTab = tpInsu;
                    }
                    else if (txtRecType.Text == "GVISU")
                    {
                        tbOth.SelectedTab = tbGv;
                    }

                    _tmpRecItem = new List<ReceiptItemDetails>();
                    _tmpRecItem = CHNLSVC.Sales.GetAdvanReceiptItems(_ReceiptHeader.Sar_receipt_no);

                    dgvItem.Rows.Clear();

                    if (_tmpRecItem != null)
                    {
                        foreach (ReceiptItemDetails ser in _tmpRecItem)
                        {
                            dgvItem.Rows.Add();
                            dgvItem["col_itmItem", dgvItem.Rows.Count - 1].Value = ser.Sari_item;
                            dgvItem["col_itmDesc", dgvItem.Rows.Count - 1].Value = ser.Sari_item_desc;
                            dgvItem["col_itmModel", dgvItem.Rows.Count - 1].Value = ser.Sari_model;
                            dgvItem["col_itmStatus", dgvItem.Rows.Count - 1].Value = null;
                            dgvItem["col_itmSerial", dgvItem.Rows.Count - 1].Value = ser.Sari_serial;
                            dgvItem["col_itmOthSerial", dgvItem.Rows.Count - 1].Value = ser.Sari_serial_1;



                            dgvItem["colpb", dgvItem.Rows.Count - 1].Value = ser.Sari_pb;
                            dgvItem["colpblvl", dgvItem.Rows.Count - 1].Value = ser.Sari_pb_lvl;
                            dgvItem["col_itmStatus", dgvItem.Rows.Count - 1].Value = ser.Sari_sts;
                            dgvItem["colQty", dgvItem.Rows.Count - 1].Value = ser.Sari_qty;
                            dgvItem["colTax", dgvItem.Rows.Count - 1].Value = ser.Sari_tax_amt;
                            dgvItem["col_itmModel", dgvItem.Rows.Count - 1].Value = ser.Sari_model;
                            dgvItem["colRate", dgvItem.Rows.Count - 1].Value = ser.Sari_unit_rate;
                            dgvItem["colamt", dgvItem.Rows.Count - 1].Value = ser.Sari_unit_amt;

                        }
                    }

                    btnSave.Enabled = false;
                    btnCancel.Enabled = true;
                    btn_add_ser.Enabled = false;
                }

            }
        }



        private void BindSaveReceiptDetails(string _RecNo)
        {
            RecieptItem _paramRecDetails = new RecieptItem();

            _paramRecDetails.Sard_receipt_no = _RecNo;
            _list = new List<RecieptItem>();
            _list = CHNLSVC.Sales.GetReceiptDetails(_paramRecDetails);
            ucPayModes1.MainGrid.DataSource = _list;

        }

        private void BindSaveVehicleReg(string _RecNo)
        {
            List<VehicalRegistration> _list = CHNLSVC.General.GetVehicalRegistrations(_RecNo);
            _regList = new List<VehicalRegistration>();
            _regList = _list;

            dgvReg.Rows.Clear();

            if (_regList != null)
            {
                foreach (VehicalRegistration reg in _regList)
                {
                    dgvReg.Rows.Add();
                    dgvReg["col_regInv", dgvReg.Rows.Count - 1].Value = reg.P_svrt_inv_no;
                    dgvReg["col_regCus", dgvReg.Rows.Count - 1].Value = reg.P_svrt_full_name;
                    dgvReg["col_regItem", dgvReg.Rows.Count - 1].Value = reg.P_srvt_itm_cd;
                    dgvReg["col_regModel", dgvReg.Rows.Count - 1].Value = reg.P_svrt_model;
                    dgvReg["col_regBrand", dgvReg.Rows.Count - 1].Value = reg.P_svrt_brd;
                    dgvReg["col_regDis", dgvReg.Rows.Count - 1].Value = reg.P_svrt_district;
                    dgvReg["col_regPro", dgvReg.Rows.Count - 1].Value = reg.P_svrt_province;
                    dgvReg["col_regEngine", dgvReg.Rows.Count - 1].Value = reg.P_svrt_engine;
                    dgvReg["col_regChasis", dgvReg.Rows.Count - 1].Value = reg.P_svrt_chassis;
                    dgvReg["col_regVal", dgvReg.Rows.Count - 1].Value = reg.P_svrt_reg_val;
                }
            }
        }


        private void BindSaveVehicleIns(string _RecNo)
        {
            List<VehicleInsuarance> _list = CHNLSVC.General.GetVehicalInsuarance(_RecNo, null);
            _insList = new List<VehicleInsuarance>();
            _insList = _list;

            dgvIns.Rows.Clear();

            if (_insList != null)
            {
                foreach (VehicleInsuarance ins in _insList)
                {
                    dgvIns.Rows.Add();
                    dgvIns["col_insInv", dgvIns.Rows.Count - 1].Value = ins.Svit_inv_no;
                    dgvIns["col_insCus", dgvIns.Rows.Count - 1].Value = ins.Svit_full_name;
                    dgvIns["col_insItem", dgvIns.Rows.Count - 1].Value = ins.Svit_itm_cd;
                    dgvIns["col_insModel", dgvIns.Rows.Count - 1].Value = ins.Svit_model;
                    dgvIns["col_insDistrict", dgvIns.Rows.Count - 1].Value = ins.Svit_district;
                    dgvIns["col_insPro", dgvIns.Rows.Count - 1].Value = ins.Svit_province;
                    dgvIns["col_insCom", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_com;
                    dgvIns["col_insPol", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_polc;
                    dgvIns["col_insEngine", dgvIns.Rows.Count - 1].Value = ins.Svit_engine;
                    dgvIns["col_insChasis", dgvIns.Rows.Count - 1].Value = ins.Svit_chassis;
                    dgvIns["col_insVal", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_val;
                }
            }
        }

        private void txtPayment_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnPayment.Focus();
            }
        }

        private void txtPayment_Leave(object sender, EventArgs e)
        {
            decimal _Amt = 0;
            if (!string.IsNullOrEmpty(txtPayment.Text))
            {
                if (!IsNumeric(txtPayment.Text))
                {
                    MessageBox.Show("Amount should be numeric.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtPayment.Text = "0.00";
                    txtPayment.Focus();
                    return;
                }
                _Amt = Convert.ToDecimal(txtPayment.Text);
                txtPayment.Text = _Amt.ToString("n");
            }
            else
            {
                txtPayment.Text = _Amt.ToString("n");

            }
        }

        protected void GetProvince()
        {
            if (string.IsNullOrEmpty(cmbDistrict.Text)) return;
            DistrictProvince _type = CHNLSVC.Sales.GetDistrict(cmbDistrict.Text.Trim())[0];
            if (_type.Mds_district == null)
            {
                MessageBox.Show("Invalid district selected.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            txtProvince.Text = _type.Mds_province;
        }


        private void txtManual_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS"))
                {
                    txtInvoice.Focus();
                }
                else if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.RVT.ToString()) txtInvoice.Focus();

                    else if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.PRCDF.ToString()) txtCusCode.Focus();
                }
                else
                {
                    txtCusCode.Focus();
                }
            }
        }


        private void txtInvoice_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtInvoice.Text.Trim()))
            {
                if (txtRecType.Text == "DEBT")
                {

                    if (string.IsNullOrEmpty(txtCusCode.Text))
                    {
                        MessageBox.Show("Please select customer first.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtCusCode.Text = "";
                        txtCusCode.Focus();
                        return;
                    }

                    //check valid invoice
                    List<InvoiceHeader> _invHdr = new List<InvoiceHeader>();
                    if (chkOth.Checked == true)
                        _invHdr = CHNLSVC.Sales.GetPendingInvoices(BaseCls.GlbUserComCode, txtOthSR.Text, txtCusCode.Text.Trim(), txtInvoice.Text.Trim(), "C", dtpRecDate.Value.ToString(), dtpRecDate.Value.ToString());
                    else
                        _invHdr = CHNLSVC.Sales.GetPendingInvoices(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text.Trim(), txtInvoice.Text.Trim(), "C", dtpRecDate.Value.ToString(), dtpRecDate.Value.ToString());

                    if (_invHdr == null || _invHdr.Count == 0)
                    {
                        MessageBox.Show("Invalid invoice number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtInvoice.Text = "";
                        txtInvoice.Focus();
                        return;
                    }

                    foreach (InvoiceHeader _tmpInv in _invHdr)
                    {
                        if (_tmpInv.Sah_stus == "C" || _tmpInv.Sah_stus == "R")
                        {
                            MessageBox.Show("Selected invoice is cancelled or reversed.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtInvoice.Text = "";
                            txtInvoice.Focus();
                            return;
                        }
                    }

                    if (chkOth.Checked == true)
                        txtBalance.Text = Convert.ToDecimal(CHNLSVC.Sales.GetOutInvAmt(BaseCls.GlbUserComCode, txtOthSR.Text, txtCusCode.Text, txtInvoice.Text)).ToString("n");
                    else
                        txtBalance.Text = Convert.ToDecimal(CHNLSVC.Sales.GetOutInvAmt(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text, txtInvoice.Text)).ToString("n");

                    if (Convert.ToDecimal(txtBalance.Text) <= 0)
                    {
                        MessageBox.Show("Cannot find outstanding amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtInvoice.Focus();

                    }

                }
                else if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") || (txtRecType.Text == "ADINS") || (txtRecType.Text == "TNSPT"))
                {
                    txtBalance.Text = "0.00";
                    txtItem.Text = "";
                    txtengine.Text = "";
                    txtChasis.Text = "";
                    txtQuoNo.Text = "";
                    txtPayment.Text = "0.00";
                    lblExtraChg.Text = "0.00";
                    //check valid invoice
                    List<InvoiceHeader> _invHdr = new List<InvoiceHeader>();
                    _invHdr = CHNLSVC.Sales.GetPendingInvoices(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text.Trim(), txtInvoice.Text.Trim(), "C", dtpRecDate.Value.ToString(), dtpRecDate.Value.ToString());

                    foreach (InvoiceHeader _tempInv in _invHdr)
                    {
                        if (_tempInv.Sah_inv_no == null)
                        {
                            MessageBox.Show("Invalid invoice number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtInvoice.Text = "";
                            _accNo = "";
                            _invDt = Convert.ToDateTime(DateTime.Now).Date;
                            _invLine = 0;
                            txtInvoice.Focus();
                            return;
                        }

                        if (_tempInv.Sah_stus == "C" || _tempInv.Sah_stus == "R")
                        {
                            MessageBox.Show("Selected invoice is cancelled or reversed.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtInvoice.Text = "";
                            txtInvoice.Focus();
                            return;
                        }


                        if (string.IsNullOrEmpty(txtCusCode.Text))
                        {
                            txtCusCode.Text = _tempInv.Sah_cus_cd;
                            LoadCustomerDetails();

                        }

                        _invType = _tempInv.Sah_inv_tp;
                        _accNo = _tempInv.Sah_anal_2;
                        _invDt = Convert.ToDateTime(_tempInv.Sah_dt).Date;

                    }

                    // Tharanga 
                    if (txtRecType.Text == "TNSPT")
                    {

                        DataTable oDataTable = new DataTable();
                        oDataTable = CHNLSVC.Sales.Get_SVID_VAL(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtRecType.Text.Trim(), dtpRecDate.Value.Date);
                        if (oDataTable.Rows.Count > 0)
                        {
                            txtPayment.Text = oDataTable.Rows[0]["SVID_VAL"].ToString();
                        }
                    }

                }
                else if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString()) // add by akila 2016/12/16
                {
                    if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.RVT.ToString())
                    {
                        LoadHPCustomer(BaseCls.GlbUserComCode, txtInvoice.Text);
                        UpdateBalance(txtRecType.Text.ToUpper(), txtSubReceiptTp.Text);
                    }
                    else if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.PRCDF.ToString())
                    {
                        if (string.IsNullOrEmpty(txtInvoice.Text))
                        {
                            MessageBox.Show("Please enter an invoice number", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            txtInvoice.Focus();
                            return;
                        }

                        InvoiceHeader _invoice = new InvoiceHeader();
                        _invoice = CHNLSVC.Sales.GetInvoiceHeader(txtInvoice.Text);
                        if (_invoice != null)
                        {
                            //validate invoice - invoice should belog to current location
                            if (_invoice.Sah_pc == BaseCls.GlbUserDefLoca)
                            {
                                txtCusCode.Text = _invoice.Sah_cus_cd;
                                LoadCustomerDetails();
                            }
                            else
                            {
                                MessageBox.Show("Invalid invoice number", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                txtInvoice.Focus();
                                return;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Customer information not found for selected invoice. Please select a valid customer", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            txtCusCode.Focus();
                            return;
                        }
                    }
                    else if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.JOB.ToString())
                    {
                        if (!string.IsNullOrEmpty(txtInvoice.Text))
                        {
                            Service_JOB_HDR _JobHdr = new Service_JOB_HDR();
                            _JobHdr = CHNLSVC.CustService.GetServiceJobHeader(txtInvoice.Text, BaseCls.GlbUserComCode);
                            if (_JobHdr != null)
                            {
                                txtCusCode.Text = _JobHdr.SJB_B_CUST_CD;
                                LoadCustomerDetails();
                            }
                            else
                            {
                                MessageBox.Show("Job number not found. Please select a valid job number", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                txtInvoice.Focus();
                                return;
                            }
                        }


                    }
                }
                else
                {
                    txtBalance.Text = "0.00";
                }
            }
        }

        private void txtItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") || (txtRecType.Text == "ADINS") || (txtRecType.Text == "TNSPT"))
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                    _CommonSearch.ReturnIndex = 0;

                    if (string.IsNullOrEmpty(txtQuoNo.Text))    //kapila 16/1/2016
                    {
                        if (string.IsNullOrEmpty(txtInvoice.Text))
                        {
                            MessageBox.Show("Please select related invoice.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtInvoice.Focus();
                            return;
                        }

                        _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceItems);
                        DataTable _result = CHNLSVC.CommonSearch.GetInvoiceItem(_CommonSearch.SearchParams, null, null);
                        _CommonSearch.dvResult.DataSource = _result;
                        _CommonSearch.BindUCtrlDDLData(_result);
                        _CommonSearch.obj_TragetTextBox = txtItem;
                        _CommonSearch.ShowDialog();
                        txtItem.Select();
                    }
                    else
                    {
                        _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DCNItems);
                        DataTable _result = CHNLSVC.CommonSearch.GetDCNItems(_CommonSearch.SearchParams, null, null);
                        _CommonSearch.dvResult.DataSource = _result;
                        _CommonSearch.BindUCtrlDDLData(_result);
                        _CommonSearch.obj_TragetTextBox = txtItem;
                        _CommonSearch.ShowDialog();
                        txtItem.Select();
                    }
                }
                else if (txtRecType.Text == "ADVAN")
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Item);
                    DataTable _result = CHNLSVC.CommonSearch.GetItemSearchData(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtItem;
                    _CommonSearch.ShowDialog();
                    txtItem.Select();
                }
            }
            else if (e.KeyCode == Keys.Enter)
            {


                txtengine.Focus();

            }
        }

        private void txtengine_Leave(object sender, EventArgs e)
        {
            //Add by akila 2017/07/24
            if (string.IsNullOrEmpty(txtengine.Text))
            {
                //MessageBox.Show("Please enter serial / engine number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //txtengine.Text = "";
                //txtengine.Focus();
                return;
            }

            try
            {
            List<InvoiceHeader> _invHdr2 = new List<InvoiceHeader>();
            _invHdr2 = CHNLSVC.Sales.GetPendingInvoices(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text.Trim(), txtInvoice.Text.Trim(), "C", dtpRecDate.Value.ToString(), dtpRecDate.Value.ToString());

                //updated by akila 2017/07/34
                if ((_invHdr2 != null) && (_invHdr2.Count > 0))
                {
            foreach (InvoiceHeader _tempInv in _invHdr2)
            {
                if (_tempInv.Sah_inv_no == null)
                {
                    MessageBox.Show("Invalid invoice number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtInvoice.Text = "";
                    _accNo = "";
                    _invDt = Convert.ToDateTime(DateTime.Now).Date;
                    _invLine = 0;
                    txtInvoice.Focus();
                    return;
                }

                if (_tempInv.Sah_stus == "C" || _tempInv.Sah_stus == "R")
                {
                    MessageBox.Show("Selected invoice is cancelled or reversed.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtInvoice.Text = "";
                    txtInvoice.Focus();
                    return;
                }


                if (string.IsNullOrEmpty(txtCusCode.Text))
                {
                    txtCusCode.Text = _tempInv.Sah_cus_cd;
                    LoadCustomerDetails();

                }

                _invType = _tempInv.Sah_inv_tp;
                _accNo = _tempInv.Sah_anal_2;
                _invDt = Convert.ToDateTime(_tempInv.Sah_dt).Date;

            }
            if (txtRecType.Text == "VHREG")
            {
                #region VHReg
                string _type = "";
                bool _isLease = false;
                string _value = "";
                decimal _invItmVal = 0;
                string _invTp = "";
                string _cusTp = "";
                string _pbook = "";
                string _plvl = "";
                string acc = "";
                string schem = null;
                VehicalRegistrationDefnition _vehDef = new VehicalRegistrationDefnition();
                List<InvoiceHeader> _invHdr = new List<InvoiceHeader>();
                _invHdr = CHNLSVC.Sales.GetPendingInvoices(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text.Trim(), txtInvoice.Text.Trim(), "C", dtpRecDate.Value.ToString(), dtpRecDate.Value.ToString());
                foreach (InvoiceHeader row in _invHdr)
                {
                    acc = row.Sah_acc_no;
                    _invTp = row.Sah_inv_tp;
                    //_regFound = false;
                    //_type = _one.Mpi_cd;
                    //_value = _one.Mpi_val;

                }

                //updated by akila 2018/02/22
                //if (acc != null && acc != "")
                if ((!string.IsNullOrEmpty(acc)) && (_invTp == "HS"))
                {
                    _HpAccount = CHNLSVC.Sales.GetHP_Account_onAccNo(acc);

                            schem = _HpAccount == null? string.Empty : _HpAccount.Hpa_sch_cd;
                            //schem = _HpAccount.Hpa_sch_cd;
                }
                else
                {
                    schem = null;
                }

                VehicalRegistrationDefnition _vehDefnew = new VehicalRegistrationDefnition();

                if (!string.IsNullOrEmpty(txtQuoNo.Text))      //kapila 14/1/2016
                {
                    _isLease = CHNLSVC.Sales.IsCheckLeaseCompany(txtQuoNo.Text.Trim(), BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE");

                }
                else
                {

                    _isLease = CHNLSVC.Sales.IsCheckLeaseCom(txtInvoice.Text.Trim(), BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE");
                }
                DataTable _invItmRegDet = CHNLSVC.Sales.GetRegInvItmDet(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoice.Text.Trim(), _invLine, txtItem.Text.Trim());
                if (_invItmRegDet.Rows.Count > 0)
                {

                    _invItmVal = Convert.ToDecimal(_invItmRegDet.Rows[0]["tot_val"]);
                    _invTp = _invItmRegDet.Rows[0]["sah_inv_tp"].ToString();
                    if (_isLease == true)
                    {
                        _invTp = "LEASE";
                    }
                    _cusTp = _invItmRegDet.Rows[0]["mbe_cate"].ToString();
                    _pbook = _invItmRegDet.Rows[0]["sad_pbook"].ToString();
                    _plvl = _invItmRegDet.Rows[0]["sad_pb_lvl"].ToString();
                }
                List<MasterSalesPriorityHierarchy> _Saleshir1 = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                if (_Saleshir1.Count > 0)
                {
                    foreach (MasterSalesPriorityHierarchy _one in _Saleshir1)
                    {
                        //_regFound = false;
                        _type = _one.Mpi_cd;
                        _value = _one.Mpi_val;
                        _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, _invTp, txtItem.Text.Trim(), _invDt, schem, Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtLineTotAmt.Text), _pbook, _plvl, txtengine.Text.Trim());

                        //updated by akila 2018/02/21
                        if (_vehDef == null || _vehDef.Svrd_pc == null)
                        {
                            _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, _invTp, txtItem.Text.Trim(), _invDt, schem, Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtLineTotAmt.Text), _pbook, _plvl, "N/A");
                        }

                        if (_vehDef.Svrd_pc != null )
                        {
                            goto LL2;
                        }
                    }

                    if (_vehDef == null ||_vehDef.Svrd_pc == null)
                    {
                        Cursor = DefaultCursor;
                        txtPayment.Text = "0.00";
                        MessageBox.Show("Registration definitions are not found. Please contact costing Department", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                else
                {
                    MessageBox.Show("Hierarchy not define.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                //commented by akila 2018/02/22
                //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, _invTp, txtItem.Text.Trim(), _invDt, schem, Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtLineTotAmt.Text), _pbook, _plvl, txtengine.Text.Trim());

            LL2:

                txtPayment.Text = Convert.ToString(_vehDef.Svrd_val);
             txtBalance.Text = Convert.ToString(_vehDef.Svrd_val);
             ActualRegAmount = _vehDef.Svrd_val;

                #endregion
            }

            
            if (!string.IsNullOrEmpty(txtengine.Text))
            {
                    if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") || (txtRecType.Text == "ADINS"))
                {
                    if (txtRecType.Text == "VHREG")
                    {
                        lblExtraChg.Text = "0.00";
                        VehicalRegistration _RegPrvDetails = new VehicalRegistration();
                        _RegPrvDetails = CHNLSVC.Sales.CheckPrvRegDetails(txtengine.Text.Trim(), txtItem.Text.Trim(), BaseCls.GlbUserComCode, 2);
                       
                        if (_RegPrvDetails.P_srvt_ref_no != null)
                        {
                            if (string.IsNullOrEmpty(txtProvince.Text))
                            {
                                MessageBox.Show("Please select the province.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                cmbDistrict.Focus();
                                return;
                            }
                            if (_RegPrvDetails.P_svrt_province != txtProvince.Text)
                            {
                                //kapila 6/7/2015 check whether last inv is reversed or reverted
                                DataTable _dtReg = CHNLSVC.Financial.GetLastRegDetails(txtengine.Text.Trim(), txtItem.Text.Trim(), BaseCls.GlbUserComCode, txtInvoice.Text);
                                if (_dtReg.Rows.Count > 0 || _dtReg != null)
                                {
                                    string _lastInv = _dtReg.Rows[0]["svrt_inv_no"].ToString();
                                    string _invTp1 = _dtReg.Rows[0]["svrt_sales_tp"].ToString();

                                    if (_invTp1 == "HS")
                                    {
                                        //check account is reverted
                                        Boolean _isAccRvt = CHNLSVC.Financial.IsRevertAccount("", "", _lastInv, dtpRecDate.Value.Date);
                                        if (_isAccRvt == true)
                                            calc_revert_charge(_invTp1, _RegPrvDetails.P_svrt_province);
                                    }
                                    else
                                    {
                                        //check inv is reversed

                                    }

                                }
                                else
                                {
                                    MessageBox.Show("Already generated registration for this engine.Invoice # :" + _RegPrvDetails.P_svrt_inv_no, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtengine.Text = "";
                                    txtChasis.Text = "";
                                    txtQuoNo.Text = "";
                                    txtengine.Focus();
                                    return;
                                }
                            }
                            else
                            {
                                MessageBox.Show("Already generated registration for this engine.Invoice # :" + _RegPrvDetails.P_svrt_inv_no, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtengine.Text = "";
                                txtChasis.Text = "";
                                txtQuoNo.Text = "";
                                txtengine.Focus();
                                return;
                            }
                        }

                        if (chk_Freereg.Checked == true)
                        {
                            txtPayment.Text = "0.00";
                        }

                    }
                    else if ((txtRecType.Text == "VHINS") || txtRecType.Text == "ADINS")
                    {
                        VehicleInsuarance _InsPrvDetails = new VehicleInsuarance();
                        _InsPrvDetails = CHNLSVC.Sales.CheckPrvInsDetails(txtengine.Text.Trim(), txtItem.Text.Trim(), BaseCls.GlbUserComCode, 2);

                        if (_InsPrvDetails.Svit_ref_no != null)
                        {
                            MessageBox.Show("Already generated insuarance collection for this engine.Invoice # :" + _InsPrvDetails.Svit_inv_no, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtengine.Text = "";
                            txtChasis.Text = "";
                            txtQuoNo.Text = "";
                            txtengine.Focus();
                            return;
                        }
                    }


                    if (chkDel.Checked == false)
                    {
                        ReptPickSerials _serialList = new ReptPickSerials();
                        _serialList = CHNLSVC.Inventory.GetAvailableSerIDInformation(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), txtengine.Text.Trim(), string.Empty, string.Empty);

                        if (_serialList.Tus_ser_1 != null)
                        {
                            txtengine.Text = _serialList.Tus_ser_1;
                            if (txtChasis.Visible == true)
                            {
                                txtChasis.Text = _serialList.Tus_ser_2;
                            }
                        }
                        else
                        {
                            //ADDED BY SACHITH
                            //2012/11/15

                            if (txtRecType.Text == "VHINS")
                            {
                                DataTable _dt = CHNLSVC.Sales.GetInsuranceOnEngine(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "Reg", txtengine.Text);
                                if (_dt.Rows.Count > 0)
                                {
                                    //get chassis
                                    txtChasis.Text = _dt.Rows[0]["SVRT_CHASSIS"].ToString();
                                }
                                else
                                {
                                    MessageBox.Show("Invalid serial / engine number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtengine.Text = "";
                                    txtengine.Focus();
                                    return;
                                }
                            }
                            else if (txtRecType.Text == "VHREG")
                            {
                                DataTable _dt = CHNLSVC.Sales.GetInsuranceOnEngine(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "Ins", txtengine.Text);
                                if (_dt.Rows.Count > 0)
                                {
                                    //get chassis
                                    txtChasis.Text = _dt.Rows[0]["SVIT_CHASSIS"].ToString();
                                }
                                else
                                {
                                    MessageBox.Show("Invalid serial / engine number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtengine.Text = "";
                                    txtengine.Focus();
                                    return;
                                }

                            }

                            //END
                        }
                    }
                    else
                    {
                        InventorySerialN _delList = new InventorySerialN();
                        if (string.IsNullOrEmpty(txtQuoNo.Text))
                            _delList = CHNLSVC.Inventory.GetDeliveredSerialForItem(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), txtengine.Text.Trim());
                        else
                            _delList = CHNLSVC.Inventory.GetDeliveredSerialForItem(BaseCls.GlbUserComCode, txtQuoNo.Text.Trim(), txtItem.Text.Trim(), txtengine.Text.Trim());

                        if (_delList != null)
                        {
                            txtengine.Text = _delList.Ins_ser_1;
                            if (txtChasis.Visible == true)
                            {
                                txtChasis.Text = _delList.Ins_ser_2;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Invalid serial / engine number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtengine.Text = "";
                            txtengine.Focus();
                            return;
                        }

                    }
                }
                else if (txtRecType.Text == "ADINS")
                {
                    InventorySerialN _delList = new InventorySerialN();
                    _delList = CHNLSVC.Inventory.GetDeliveredSerialForItem(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), txtengine.Text.Trim());

                    if (_delList != null)
                    {
                        txtengine.Text = _delList.Ins_ser_1;
                        if (txtChasis.Visible == true)
                        {
                            txtChasis.Text = _delList.Ins_ser_2;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Invalid serial number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtengine.Text = "";
                        txtengine.Focus();
                        return;
                    }
                }
                else
                {
                    ReptPickSerials _serialList = new ReptPickSerials();
                    _serialList = CHNLSVC.Inventory.GetAvailableSerIDInformation(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), txtengine.Text.Trim(), string.Empty, string.Empty);
                    if (_serialList != null)
                    {
                        if (_serialList.Tus_ser_1 != null)
                        {
                            txtengine.Text = _serialList.Tus_ser_1;
                            if (txtChasis.Visible == true)
                            {
                                txtChasis.Text = _serialList.Tus_ser_2;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Can't find the serial. ", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtengine.Text = "";
                            txtengine.Focus();
                            return;
                        }
                    }
                    else if (txtRecType.Text == "TNSPT") //Add By Tharanga 2017/07/28
                    {
                        InventorySerialN _delList = new InventorySerialN();
                        if (string.IsNullOrEmpty(txtQuoNo.Text))
                            _delList = CHNLSVC.Inventory.GetDeliveredSerialForItem(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), txtengine.Text.Trim());
                        else
                            _delList = CHNLSVC.Inventory.GetDeliveredSerialForItem(BaseCls.GlbUserComCode, txtQuoNo.Text.Trim(), txtItem.Text.Trim(), txtengine.Text.Trim());
                        if (_delList != null)
                        {
                            txtengine.Text = _delList.Ins_ser_1;
                            if (txtChasis.Visible == true)
                            {
                                txtChasis.Text = _delList.Ins_ser_2;
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("Invalid serial / engine number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtengine.Text = "";
                        txtengine.Focus();
                        return;
                    }
                }
            }
                }
                else
                {
                    MessageBox.Show("Serial / engine number not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtengine.Text = "";
                    txtengine.Focus();
                    return;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occured while validating serial / engine details!" + Environment.NewLine + ex.Message, "Receipt Entry - Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                txtengine.Text = "";
                txtengine.Focus();
                return;
        }
        }


        private void calc_revert_charge(string _invTp, string _prevProv)
        {
            List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
            string _Subchannel = "";
            string _typeSubChnl = "SCHNL";

            string _Mainchannel = "";
            string _typeMainChanl = "CHNL";

            string _Pctype = "PC";
            string _typePc = BaseCls.GlbUserDefProf;

            _Subchannel = (from _lst in _Saleshir
                           where _lst.Mpi_cd == "SCHNL"
                           select _lst.Mpi_val).ToList<string>()[0];


            _Mainchannel = (from _lst in _Saleshir
                            where _lst.Mpi_cd == "CHNL"
                            select _lst.Mpi_val).ToList<string>()[0];

            MasterItem _mstItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);
            string _cate1 = _mstItm.Mi_cate_1;
            string _cate2 = _mstItm.Mi_cate_2;
            string _cate3 = _mstItm.Mi_cate_3;
            string _brand = _mstItm.Mi_brand;

            Decimal _rvtChg = 0;


            DataTable _dtChg = new DataTable();
            _dtChg = CHNLSVC.Financial.Getrevertregistrationcharge(BaseCls.GlbUserComCode, _Pctype, _typePc, _invTp, txtItem.Text.Trim(), _cate1, _cate2, _cate3, _brand, _prevProv, txtProvince.Text, Convert.ToDateTime(dtpRecDate.Value).Date);
            if (_dtChg.Rows.Count > 0)
            {
                if (Convert.ToDecimal(_dtChg.Rows[0]["svr_is_rt"]) > 0)
                    _rvtChg = 99999;
                else
                    _rvtChg = Convert.ToDecimal(_dtChg.Rows[0]["svr_val"]);

            }
            _dtChg = CHNLSVC.Financial.Getrevertregistrationcharge(BaseCls.GlbUserComCode, _Subchannel, _typeSubChnl, _invTp, txtItem.Text.Trim(), _cate1, _cate2, _cate3, _brand, _prevProv, txtProvince.Text, Convert.ToDateTime(dtpRecDate.Value).Date);
            if (_dtChg.Rows.Count > 0)
            {
                if (Convert.ToDecimal(_dtChg.Rows[0]["svr_is_rt"]) > 0)
                    _rvtChg = 99999;
                else
                    _rvtChg = Convert.ToDecimal(_dtChg.Rows[0]["svr_val"]);
            }
            _dtChg = CHNLSVC.Financial.Getrevertregistrationcharge(BaseCls.GlbUserComCode, _Mainchannel, _typeMainChanl, _invTp, txtItem.Text.Trim(), _cate1, _cate2, _cate3, _brand, _prevProv, txtProvince.Text, Convert.ToDateTime(dtpRecDate.Value).Date);
            if (_dtChg.Rows.Count > 0)
            {
                if (Convert.ToDecimal(_dtChg.Rows[0]["svr_is_rt"]) > 0)
                    _rvtChg = 99999;
                else
                    _rvtChg = Convert.ToDecimal(_dtChg.Rows[0]["svr_val"]);
            }
            _dtChg = CHNLSVC.Financial.Getrevertregistrationcharge(BaseCls.GlbUserComCode, "COM", BaseCls.GlbUserComCode, _invTp, txtItem.Text.Trim(), _cate1, _cate2, _cate3, _brand, _prevProv, txtProvince.Text, Convert.ToDateTime(dtpRecDate.Value).Date);
            if (_dtChg.Rows.Count > 0)
            {
                if (Convert.ToDecimal(_dtChg.Rows[0]["svr_is_rt"]) > 0)
                    _rvtChg = 99999;
                else
                    _rvtChg = Convert.ToDecimal(_dtChg.Rows[0]["svr_val"]);
            }
            txtPayment.Text = (Convert.ToDecimal(txtPayment.Text) + _rvtChg).ToString();

            if (chk_Freereg.Checked == true) //Sanjeewa 2016-08-14
            {
                txtPayment.Text = "0.00";
            }

            lblExtraChg.Text = _rvtChg.ToString("0.00");
        }

        private void txtengine_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (gbInsu.Visible == true)
                {
                    txtInsCom.Focus();
                }
                else
                {
                    txtPayment.Focus();
                }
            }
            else if (e.KeyCode == Keys.F2)
            {
                if (string.IsNullOrEmpty(txtRecType.Text))
                {
                    MessageBox.Show("Please select receipt type.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtRecType.Focus();
                    return;
                }

                if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS"))
                {
                    if (string.IsNullOrEmpty(txtItem.Text))
                    {
                        MessageBox.Show("Please select invoice item.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtItem.Focus();
                        return;
                    }

                    if (chkDel.Checked == false)
                    {
                        CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                        _CommonSearch.ReturnIndex = 0;
                        _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.AvailableSerialWithOth);
                        DataTable _result = CHNLSVC.CommonSearch.GetAvailableSerialWithOthSerialSearchData(_CommonSearch.SearchParams, null, null);
                        _CommonSearch.dvResult.DataSource = _result;
                        _CommonSearch.BindUCtrlDDLData(_result);
                        _CommonSearch.obj_TragetTextBox = txtengine;
                        _CommonSearch.ShowDialog();
                        txtengine.Select();
                    }
                    else
                    {
                        CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                        _CommonSearch.ReturnIndex = 0;
                        _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DeliverdSerials);
                        DataTable _result = CHNLSVC.CommonSearch.GetDeliverdInvoiceItemSerials(_CommonSearch.SearchParams, null, null);
                        _CommonSearch.dvResult.DataSource = _result;
                        _CommonSearch.BindUCtrlDDLData(_result);
                        _CommonSearch.obj_TragetTextBox = txtengine;
                        _CommonSearch.ShowDialog();
                        txtengine.Select();
                    }
                }
                else if (txtRecType.Text == "ADINS")
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DeliverdSerials);
                    DataTable _result = CHNLSVC.CommonSearch.GetDeliverdInvoiceItemSerials(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtengine;
                    _CommonSearch.ShowDialog();
                    txtengine.Select();
                }
                else if (txtRecType.Text == "TNSPT")
                {
                    
                        CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                        _CommonSearch.ReturnIndex = 0;
                        _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DeliverdSerials);
                        DataTable _result = CHNLSVC.CommonSearch.GetDeliverdInvoiceItemSerials(_CommonSearch.SearchParams, null, null);
                        _CommonSearch.dvResult.DataSource = _result;
                        _CommonSearch.BindUCtrlDDLData(_result);
                        _CommonSearch.obj_TragetTextBox = txtengine;
                        _CommonSearch.ShowDialog();
                        txtengine.Select();
                   
             
                }
                else
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.AvailableSerialWithOth);
                    DataTable _result = CHNLSVC.CommonSearch.GetAvailableSerialWithOthSerialSearchData(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtengine;
                    _CommonSearch.ShowDialog();
                    txtengine.Select();
                }
            }
        }

        private void txtInsCom_Leave(object sender, EventArgs e)
        {
            Int32 _HpTerm = 0;
            Boolean _isInsuFound = false;

            if (!string.IsNullOrEmpty(txtInsCom.Text))
            {
                MasterOutsideParty _OutPartyDetails = new MasterOutsideParty();
                _OutPartyDetails = CHNLSVC.Sales.GetOutSidePartyDetails(txtInsCom.Text.Trim(), "INS");

                if (_OutPartyDetails.Mbi_cd == null)
                {
                    MessageBox.Show("Invalid insuarance company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtInsCom.Text = "";
                    txtInsPol.Text = "";
                    txtInsCom.Focus();
                    return;
                }
                else
                {
                    txtInsCom.Text = _OutPartyDetails.Mbi_cd;

                    if (!string.IsNullOrEmpty(txtInsPol.Text))
                    {
                        InsuarancePolicy _insuPolicy = new InsuarancePolicy();
                        _insuPolicy = CHNLSVC.Sales.GetInusPolicy(txtInsPol.Text.Trim());

                        if (_insuPolicy.Svip_polc_cd == null)
                        {
                            MessageBox.Show("Invalid insuarance policy.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtInsPol.Text = "";
                            return;
                        }

                        if (!string.IsNullOrEmpty(txtItem.Text))
                        {
                            MasterVehicalInsuranceDefinitionNew _vehIns = new MasterVehicalInsuranceDefinitionNew();

                            InvoiceItem _invItm = new InvoiceItem();

                            //Get invoice details
                            string _pBook = "";
                            string _pLvl = "";
                            string _promoCd = "";
                            decimal _itmVal = 0;
                            string _cat1 = "";
                            string _cat2 = "";
                            string _brand = "";
                            _isInsuFound = false;

                            if (string.IsNullOrEmpty(txtQuoNo.Text))        //kapila 16/1/2016
                            {
                                _invItm = CHNLSVC.Sales.GetInvDetByLine(txtInvoice.Text.Trim(), txtItem.Text.Trim(), _invLine);
                                if (_invItm.Sad_itm_cd == null)
                                {
                                    MessageBox.Show("Cannot find invoice item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtItem.Text = "";
                                    txtItem.Focus();
                                    return;
                                }
                                else
                                {
                                    MasterItem _itemList = new MasterItem();
                                    _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());

                                    _pBook = _invItm.Sad_pbook;
                                    _pLvl = _invItm.Sad_pb_lvl;
                                    _promoCd = _invItm.Sad_promo_cd;
                                    _itmVal = _invItm.Sad_tot_amt / _invItm.Sad_qty;

                                    if (_itemList.Mi_cd == null)
                                    {
                                        MessageBox.Show("Cannot find item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        txtItem.Text = "";
                                        txtItem.Focus();
                                        return;
                                    }
                                    else
                                    {
                                        _cat1 = _itemList.Mi_cate_1;
                                        _cat2 = _itemList.Mi_cate_2;
                                        _brand = _itemList.Mi_brand;
                                    }
                                }
                            }

                            if (txtRecType.Text == "VHINS")
                            {
                                List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                                string _Subchannel = "";
                                string _typeSubChnl = "SCHNL";

                                string _Mainchannel = "";
                                string _typeMainChanl = "CHNL";

                                string _Pctype = "PC";
                                string _typePc = BaseCls.GlbUserDefProf;


                                if (_Saleshir.Count > 0)
                                {
                                    _Subchannel = (from _lst in _Saleshir
                                                   where _lst.Mpi_cd == "SCHNL"
                                                   select _lst.Mpi_val).ToList<string>()[0];


                                    _Mainchannel = (from _lst in _Saleshir
                                                    where _lst.Mpi_cd == "CHNL"
                                                    select _lst.Mpi_val).ToList<string>()[0];

                                    if (_accNo != null && _accNo != "")
                                    {

                                        _HpAccount = new HpAccount();
                                        _HpAccount = CHNLSVC.Sales.GetHP_Account_onAccNo(_accNo);

                                        _HpTerm = _HpAccount.Hpa_term;

                                        if (_HpTerm < 12)
                                        {
                                            chkAnnual.Checked = false;
                                            chkAnnual.Visible = true;
                                        }
                                        else
                                        {
                                            chkAnnual.Checked = false;
                                            chkAnnual.Visible = false;
                                        }


                                        if ((_HpTerm + 3) <= 3)
                                        {
                                            _HpTerm = 3;
                                        }
                                        else if ((_HpTerm + 3) <= 6)
                                        {
                                            _HpTerm = 6;
                                        }
                                        else if ((_HpTerm + 3) <= 9)
                                        {
                                            _HpTerm = 9;
                                        }
                                        else
                                        {
                                            _HpTerm = 12;
                                        }


                                        if (!string.IsNullOrEmpty(_promoCd))
                                        {
                                            //check serial + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check pc + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check sub Channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //Check channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                        }
                                        else
                                        {
                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                        }


                                        //_vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _HpTerm);
                                    }

                                    else
                                    {
                                        _HpTerm = 12;
                                        //_vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _HpTerm);
                                        if (!string.IsNullOrEmpty(_promoCd))
                                        {
                                            //check serial + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check pc + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check sub Channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //Check channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                        }
                                        else
                                        {
                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                        }
                                    }

                                }
                                else
                                {
                                    MessageBox.Show("Profit center hirachy not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtBalance.Text = "0.00";
                                    txtPayment.Text = "0.00";
                                    return;
                                }

                                if (_isInsuFound == false)
                                {
                                    MessageBox.Show("Cannot find insuarance definition.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtBalance.Text = "0.00";
                                    txtPayment.Text = "0.00";
                                    txtInsCom.Text = "";
                                    txtInsPol.Text = "";
                                    return;
                                }

                            }
                            else if (txtRecType.Text == "ADINS")
                            {
                                if ((!string.IsNullOrEmpty(txtInsPol.Text)) && (!string.IsNullOrEmpty(txtInsCom.Text)))
                                {

                                    //InsuarancePolicy _insuPolicy = new InsuarancePolicy();
                                    //_insuPolicy = CHNLSVC.Sales.GetInusPolicy(txtInsPol.Text.Trim());

                                    //if (_insuPolicy.Svip_polc_cd == null)
                                    //{
                                    //    MessageBox.Show("Invalid insuarance policy.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    //    txtInsPol.Text = "";
                                    //    txtInsPol.Focus();
                                    //    return;
                                    //}

                                    //MasterOutsideParty _OutPartyDetails = new MasterOutsideParty();
                                    //_OutPartyDetails = CHNLSVC.Sales.GetOutSidePartyDetails(txtInsCom.Text.Trim(), "INS");

                                    //if (_OutPartyDetails.Mbi_cd == null)
                                    //{
                                    //    MessageBox.Show("Invalid insuarance company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    //    txtInsCom.Text = "";
                                    //    txtInsCom.Focus();
                                    //    return;
                                    //}

                                    //txtInsCom.Text = _OutPartyDetails.Mbi_cd;
                                    //txtInsPol.Text = _insuPolicy.Svip_polc_cd;
                                    _vehIns = new MasterVehicalInsuranceDefinitionNew();


                                    ////Get invoice details
                                    //string _pBook = "";
                                    //string _pLvl = "";
                                    //string _promoCd = "";
                                    //decimal _itmVal = 0;
                                    _isInsuFound = false;

                                    //_invItm = CHNLSVC.Sales.GetInvDetByLine(txtInvoice.Text.Trim(), txtItem.Text.Trim(), _invLine);
                                    //if (_invItm.Sad_itm_cd == null)
                                    //{
                                    //    MessageBox.Show("Cannot find invoice item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    //    txtItem.Text = "";
                                    //    txtItem.Focus();
                                    //    return;
                                    //}
                                    //else
                                    //{
                                    //    _pBook = _invItm.Sad_pbook;
                                    //    _pLvl = _invcmbLevel.Text;
                                    //    _promoCd = _invItm.Sad_promo_cd;
                                    //    _itmVal = _invItm.Sad_tot_amt / _invItem.Sad_qty;
                                    //}



                                    List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                                    string _Subchannel = "";
                                    string _typeSubChnl = "SCHNL";

                                    string _Mainchannel = "";
                                    string _typeMainChanl = "CHNL";

                                    string _Pctype = "PC";
                                    string _typePc = BaseCls.GlbUserDefProf;


                                    if (_Saleshir.Count > 0)
                                    {
                                        _Subchannel = (from _lst in _Saleshir
                                                       where _lst.Mpi_cd == "SCHNL"
                                                       select _lst.Mpi_val).ToList<string>()[0];


                                        _Mainchannel = (from _lst in _Saleshir
                                                        where _lst.Mpi_cd == "CHNL"
                                                        select _lst.Mpi_val).ToList<string>()[0];


                                        //---------------
                                        //check pc
                                        // check item + price book + price level
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + brand + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 + brand + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        // check item
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + brand 
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 + brand
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }


                                        //check sub Channel
                                        // check item + price book + price level
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + brand + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 + brand + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        // check item
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + brand 
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 + brand
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }

                                        //Check channel
                                        // check item + price book + price level
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + brand + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 + brand + pb + plvl
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, _pBook, _pLvl);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        // check item
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + brand 
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //check cat1 + cat2 + brand
                                        _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, null, null);

                                        if (_vehIns.Svid_com != null)
                                        {
                                            if (_vehIns.Svid_is_rt == 1)
                                            {
                                                txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }
                                            else
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L59;
                                            }

                                        }
                                        //--------------
                                    }
                                    else
                                    {
                                        MessageBox.Show("Profit center hirachy not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        txtBalance.Text = "0.00";
                                        txtPayment.Text = "0.00";
                                        return;
                                    }

                                    if (_isInsuFound == false)
                                    {
                                        MessageBox.Show("Cannot find insuarance definition.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        txtBalance.Text = "0.00";
                                        txtPayment.Text = "0.00";
                                        txtInsCom.Text = "";
                                        txtInsPol.Text = "";
                                        return;
                                    }
                                }
                            }

                            //if (_isInsuFound == false)
                        //{
                        //    MessageBox.Show("Insuarance amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //    txtBalance.Text = "0.00";
                        //    txtPayment.Text = "0.00";
                        //    txtInsPol.Text = "";
                        //    txtInsCom.Text = "";
                        //    txtInsCom.Focus();
                        //    return;
                        //}

                        L59: int I = 0;
                        }
                    }
                }
            }
        }

        private void txtInsCom_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtInsPol.Focus();
            }
            else if (e.KeyCode == Keys.F2)
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InsuCom);
                DataTable _result = CHNLSVC.CommonSearch.GetInsuCompany(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtInsCom;
                _CommonSearch.ShowDialog();
                txtInsCom.Select();
            }
        }


        private void txtInsPol_Leave(object sender, EventArgs e)
        {
            Int32 _HpTerm = 0;
            Boolean _isInsuFound = false;

            if (!string.IsNullOrEmpty(txtInsPol.Text))
            {
                if (!string.IsNullOrEmpty(txtItem.Text))
                {
                    InsuarancePolicy _insuPolicy = new InsuarancePolicy();
                    _insuPolicy = CHNLSVC.Sales.GetInusPolicy(txtInsPol.Text.Trim());

                    if (_insuPolicy.Svip_polc_cd == null)
                    {
                        MessageBox.Show("Invalid insuarance policy.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtInsPol.Text = "";
                        txtInsPol.Focus();
                        return;
                    }

                    else
                    {
                        txtInsPol.Text = _insuPolicy.Svip_polc_cd;
                        MasterVehicalInsuranceDefinitionNew _vehIns = new MasterVehicalInsuranceDefinitionNew();

                        InvoiceItem _invItm = new InvoiceItem();
                        QoutationDetails _quoItm = new QoutationDetails();

                        //Get invoice details
                        string _pBook = "";
                        string _pLvl = "";
                        string _promoCd = "";
                        decimal _itmVal = 0;
                        string _cat1 = "";
                        string _cat2 = "";
                        string _brand = "";
                        _isInsuFound = false;

                        if (string.IsNullOrEmpty(txtQuoNo.Text))    //kapila 16/1/2016
                        {
                            _invItm = CHNLSVC.Sales.GetInvDetByLine(txtInvoice.Text.Trim(), txtItem.Text.Trim(), _invLine);
                            if (_invItm.Sad_itm_cd == null)
                            {
                                MessageBox.Show("Cannot find invoice item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtItem.Text = "";
                                txtItem.Focus();
                                return;
                            }
                            else
                            {
                                MasterItem _itemList = new MasterItem();
                                _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());

                                _pBook = _invItm.Sad_pbook;
                                _pLvl = _invItm.Sad_pb_lvl;
                                _promoCd = _invItm.Sad_promo_cd;
                                _itmVal = _invItm.Sad_tot_amt / _invItm.Sad_qty;

                                if (_itemList.Mi_cd == null)
                                {
                                    MessageBox.Show("Cannot find item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtItem.Text = "";
                                    txtItem.Focus();
                                    return;
                                }
                                else
                                {
                                    _cat1 = _itemList.Mi_cate_1;
                                    _cat2 = _itemList.Mi_cate_2;
                                    _brand = _itemList.Mi_brand;
                                }
                            }
                        }
                        else
                        {
                            _quoItm = CHNLSVC.Sales.GetQuotDetByItem(txtQuoNo.Text.Trim(), txtItem.Text.Trim());
                            if (_quoItm.Qd_itm_cd == null)
                            {
                                MessageBox.Show("Cannot find quotation item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtItem.Text = "";
                                txtItem.Focus();
                                return;
                            }
                            else
                            {
                                MasterItem _itemList = new MasterItem();
                                _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());

                                _pBook = _quoItm.Qd_pbook;
                                _pLvl = _quoItm.Qd_pb_lvl;
                                //   _promoCd = _invItm.Sad_promo_cd;
                                _itmVal = _quoItm.Qd_tot_amt / _quoItm.Qd_frm_qty;

                                if (_itemList.Mi_cd == null)
                                {
                                    MessageBox.Show("Cannot find item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtItem.Text = "";
                                    txtItem.Focus();
                                    return;
                                }
                                else
                                {
                                    _cat1 = _itemList.Mi_cate_1;
                                    _cat2 = _itemList.Mi_cate_2;
                                    _brand = _itemList.Mi_brand;
                                }
                            }
                        }

                        if (txtRecType.Text == "VHINS")
                        {
                            List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                            string _Subchannel = "";
                            string _typeSubChnl = "SCHNL";

                            string _Mainchannel = "";
                            string _typeMainChanl = "CHNL";

                            string _Pctype = "PC";
                            string _typePc = BaseCls.GlbUserDefProf;


                            if (_Saleshir.Count > 0)
                            {
                                _Subchannel = (from _lst in _Saleshir
                                               where _lst.Mpi_cd == "SCHNL"
                                               select _lst.Mpi_val).ToList<string>()[0];


                                _Mainchannel = (from _lst in _Saleshir
                                                where _lst.Mpi_cd == "CHNL"
                                                select _lst.Mpi_val).ToList<string>()[0];

                                if (_accNo != null && _accNo != "")
                                {

                                    _HpAccount = new HpAccount();
                                    _HpAccount = CHNLSVC.Sales.GetHP_Account_onAccNo(_accNo);

                                    _HpTerm = _HpAccount.Hpa_term;

                                    if (_HpTerm < 12)
                                    {
                                        chkAnnual.Checked = false;
                                        chkAnnual.Visible = true;
                                    }
                                    else
                                    {
                                        chkAnnual.Checked = false;
                                        chkAnnual.Visible = false;
                                    }


                                    if ((_HpTerm + 3) <= 3)
                                    {
                                        _HpTerm = 3;
                                    }
                                    else if ((_HpTerm + 3) <= 6)
                                    {
                                        _HpTerm = 6;
                                    }
                                    else if ((_HpTerm + 3) <= 9)
                                    {
                                        _HpTerm = 9;
                                    }
                                    else
                                    {
                                        _HpTerm = 12;
                                    }


                                    if (!string.IsNullOrEmpty(_promoCd))
                                    {
                                        //check serial + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check pc + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check serial + sub Channel + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check sub Channel + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check serial + channel + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check channel + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check serial
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check pc
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check serial + sub Channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        //check sub Channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check serial + channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                    }
                                    else
                                    {
                                        //check serial
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check pc
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check serial + sub Channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check sub Channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check serial + channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                    }


                                    //_vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _HpTerm);
                                }

                                else
                                {
                                    _HpTerm = 12;
                                    //_vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _HpTerm);
                                    if (!string.IsNullOrEmpty(_promoCd))
                                    {
                                        //check serial + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check pc + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check serial +sub Channel + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check sub Channel + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check serial + channel + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check channel + promo
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check serial
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check pc
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check serial + sub Channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check sub Channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check serial + channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                    }
                                    else
                                    {
                                        //check serial
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //check pc
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        //check serial + sub Channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        //check sub Channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check serial + channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                        //Check channel
                                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                        if (_vehIns.Svid_itm != null)
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                    }
                                }

                                //if (_vehIns.Ins_com_cd != null)
                                //{
                                //    txtBalance.Text = _vehIns.Value.ToString("0.00");
                                //    txtPayment.Text = _vehIns.Value.ToString("0.00");
                                //}
                                //else
                                //{
                                //    MessageBox.Show("Insuarance amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                //    txtBalance.Text = "0.00";
                                //    txtPayment.Text = "0.00";
                                //    txtInsPol.Text = "";
                                //    txtInsPol.Focus();
                                //    return;
                                //}

                            }
                            if (_isInsuFound == false)
                            {
                                MessageBox.Show("Insuarance amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtBalance.Text = "0.00";
                                txtPayment.Text = "0.00";
                                txtInsPol.Text = "";
                                txtInsPol.Focus();
                                return;
                            }
                        }
                        else if (txtRecType.Text == "ADINS")
                        {
                            if ((!string.IsNullOrEmpty(txtInsPol.Text)) && (!string.IsNullOrEmpty(txtInsCom.Text)))
                            {


                                _vehIns = new MasterVehicalInsuranceDefinitionNew();
                                _isInsuFound = false;


                                List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                                string _Subchannel = "";
                                string _typeSubChnl = "SCHNL";

                                string _Mainchannel = "";
                                string _typeMainChanl = "CHNL";

                                string _Pctype = "PC";
                                string _typePc = BaseCls.GlbUserDefProf;


                                if (_Saleshir.Count > 0)
                                {
                                    _Subchannel = (from _lst in _Saleshir
                                                   where _lst.Mpi_cd == "SCHNL"
                                                   select _lst.Mpi_val).ToList<string>()[0];


                                    _Mainchannel = (from _lst in _Saleshir
                                                    where _lst.Mpi_cd == "CHNL"
                                                    select _lst.Mpi_val).ToList<string>()[0];


                                    //check pc
                                    // check item + price book + price level
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + pb + plvl
                                    
                                    
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    // check item
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + brand 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 + brand
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }


                                    //check sub Channel
                                    // check item + price book + price level
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    // check item
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + brand 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 + brand
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }

                                    //Check channel
                                    // check item + price book + price level
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    // check item
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + brand 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, null, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                    //check cat1 + cat2 + brand
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L59;
                                        }

                                    }
                                }
                                else
                                {
                                    MessageBox.Show("Profit center hirachy not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtBalance.Text = "0.00";
                                    txtPayment.Text = "0.00";
                                    return;
                                }

                                if (_isInsuFound == false)
                                {
                                    MessageBox.Show("Cannot find insuarance definition.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtBalance.Text = "0.00";
                                    txtPayment.Text = "0.00";
                                    txtInsCom.Text = "";
                                    txtInsPol.Text = "";
                                    return;
                                }
                            }
                        }
                    }

                L59: int I = 0;
                }
                else
                {
                    MessageBox.Show("Invoice item is missing.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtInsPol.Text = "";
                    txtItem.Focus();
                    return;
                }

            }
        }

        private void txtInsPol_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtPayment.Focus();
            }
            else if (e.KeyCode == Keys.F2)
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InsuPolicy);
                DataTable _result = CHNLSVC.CommonSearch.GetInsuPolicy(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtInsPol;
                _CommonSearch.ShowDialog();
                txtInsPol.Select();
            }
        }


        private void txtItem_Leave(object sender, EventArgs e)
        {
            Boolean _isLease = false;
            Boolean _isAllowEdit = false;
            decimal _invRegAllowQty = 0;
            decimal _invRegAllowVal = 0;
            string _invTp = "";
            string _cusTp = "";
            decimal _invItmQty = 0;
            decimal _invItmVal = 0;
            string _pbook = "";
            string _plvl = "";
            string _sch = "";
            string _type = "";
            string _value = "";
            Boolean _regFound = false;
            Boolean _isInsuFound = false;

            if (!string.IsNullOrEmpty(txtItem.Text))
            {
                MasterItem _itemList = new MasterItem();
                _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                if (_itemList == null)
                {
                    MessageBox.Show("Invalid item selected.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtItem.Text = "";
                    txtItem.Focus();
                    return;
                }
                if (_itemList.Mi_cd == null)
                {
                    MessageBox.Show("Invalid item selected.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtItem.Focus();
                    return;
                }
                txtAllocQty.Text = "0";
                txtRecQty.Text = "0";
                txtFreeQty.Text = "0";

                if (txtRecType.Text == "ADVAN")
                {

                    DataTable _alloc = CHNLSVC.Inventory.GetItemAllocationDet(txtItem.Text.Trim());
                    if (_alloc != null)
                    {
                        if (_alloc.Rows.Count > 0)
                        {
                            pnlItemAlloc.Visible = true;
                            foreach (DataRow r in _alloc.Rows)
                            {
                                txtAllocQty.Text = Convert.ToString(Convert.ToDecimal(r["SSA_QTY"]));
                                txtRecQty.Text = Convert.ToString(Convert.ToDecimal(r["SSA_REC_QTY"]));
                                txtFreeQty.Text = Convert.ToString(Convert.ToDecimal(r["SSA_QTY"]) - Convert.ToDecimal(r["SSA_REC_QTY"]));
                            }

                        }
                        else
                        {
                            pnlItemAlloc.Visible = false;
                        }
                    }

                }


                if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") || (txtRecType.Text == "ADINS") || (txtRecType.Text == "TNSPT"))
                {
                    if (!string.IsNullOrEmpty(txtQuoNo.Text))      //kapila 14/1/2016
                    {
                        if (txtRecType.Text == "VHREG")
                        {
                            if (_itemList.Mi_need_reg == true)
                            {
                                VehicalRegistrationDefnition _vehDef = new VehicalRegistrationDefnition();
                                _isLease = CHNLSVC.Sales.IsCheckLeaseCompany(txtQuoNo.Text.Trim(), BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE");


                                DataTable _invItmRegDet = CHNLSVC.Sales.GetRegDCNItmDet(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtQuoNo.Text.Trim(), txtItem.Text.Trim());

                                if (_invItmRegDet.Rows.Count > 0)
                                {

                                    _invItmQty = Convert.ToDecimal(_invItmRegDet.Rows[0]["tot_qty"]);

                                    if (_invItmQty <= 0)
                                    {
                                        MessageBox.Show("Cannot find valid invoice qty.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }

                                    _invItmVal = Convert.ToDecimal(_invItmRegDet.Rows[0]["tot_val"]);
                                    _invTp = _invItmRegDet.Rows[0]["sah_inv_tp"].ToString();
                                    _cusTp = _invItmRegDet.Rows[0]["mbe_cate"].ToString();
                                    _pbook = _invItmRegDet.Rows[0]["sad_pbook"].ToString();
                                    _plvl = _invItmRegDet.Rows[0]["sad_pb_lvl"].ToString();
                                }

                                if (_isLease == true)
                                {

                                    List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                                    if (_Saleshir.Count > 0)
                                    {
                                        foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                                        {
                                            _regFound = false;
                                            _type = _one.Mpi_cd;
                                            _value = _one.Mpi_val;

                                            //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirect(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE", txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date);
                                            _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, "LEASE", txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, null, _invItmQty, _invItmVal, _pbook, _plvl, "N/A");

                                            if (_vehDef.Svrd_itm != null)
                                            {
                                                txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                                                
                                                txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                                                _regAmt = _vehDef.Svrd_claim_val;
                                                _vehRegTimes = _vehDef.SVRD_NO_OF_TIMES;
                                                _vehRegUsedTimes = _vehDef.SVRD_NO_OF_USED;
                                                _SVRD_SEQ = _vehDef.Svrd_seq;
                                                _regFound = true;
                                                goto L2;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.Show("Hirarchy not define.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }

                                    if (chk_Freereg.Checked == true)
                                    {
                                        txtPayment.Text = "0.00";
                                    }

                                    if (_regFound == false)
                                    {
                                        MessageBox.Show("Registration amount definitions not set for leasing company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        txtItem.Text = "";
                                        txtBalance.Text = "0.00";
                                        txtPayment.Text = "0.00";
                                        lblExtraChg.Text = "0.00";
                                        _regAmt = 0;
                                        txtItem.Focus();
                                        return;
                                    }
                                L2: Int32 i = 1;
                                }
                                else
                                {
                                    List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                                    if (_Saleshir.Count > 0)
                                    {
                                        foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                                        {
                                            _regFound = false;
                                            _type = _one.Mpi_cd;
                                            _value = _one.Mpi_val;

                                            //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirect(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE", txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date);
                                            _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, _invTp, txtItem.Text.Trim(), _invDt, null, _invItmQty, _invItmVal, _pbook, _plvl, "N/A");

                                            if (_vehDef.Svrd_itm != null)
                                            {
                                                txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                                                txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                                                _regAmt = _vehDef.Svrd_claim_val;
                                                _vehRegTimes = _vehDef.SVRD_NO_OF_TIMES;
                                                _vehRegUsedTimes = _vehDef.SVRD_NO_OF_USED;
                                                _SVRD_SEQ = _vehDef.Svrd_seq;
                                                _regFound = true;
                                                goto L2;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.Show("Hirarchy not define.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }
                                    if (_regFound == false)
                                    {
                                        MessageBox.Show("Registration amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        txtItem.Text = "";
                                        txtBalance.Text = "0.00";
                                        txtPayment.Text = "0.00";
                                        lblExtraChg.Text = "0.00";
                                        _regAmt = 0;
                                        txtItem.Focus();
                                        return;
                                    }
                                L2: Int32 i = 1;
                                }

                                //check registartion amount edit profit center
                                _isAllowEdit = CHNLSVC.Sales.IsCheckAllowFunction(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecType.Text.Trim(), "ALWEDIT");
                                if (_isAllowEdit == true)
                                {
                                    txtBalance.ReadOnly = false;
                                    txtBalance.Enabled = true;
                                }
                                else
                                {
                                    txtBalance.ReadOnly = true;
                                    txtBalance.Enabled = false;
                                }
                            }
                            else
                            {
                                MessageBox.Show("This item is not allow to regiration process.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtItem.Text = "";
                                txtItem.Focus();
                                return;
                            }
                        }
                        else if (txtRecType.Text == "VHINS")
                        {
                            if (_itemList.Mi_need_insu == false)
                            {
                                MessageBox.Show("This item is not allow to insuarance process.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtItem.Text = "";
                                txtItem.Focus();
                                return;
                            }

                            Int32 _HpTerm = 0;

                            if ((!string.IsNullOrEmpty(txtInsPol.Text)) && (!string.IsNullOrEmpty(txtInsCom.Text)))
                            {

                                InsuarancePolicy _insuPolicy = new InsuarancePolicy();
                                _insuPolicy = CHNLSVC.Sales.GetInusPolicy(txtInsPol.Text.Trim());

                                if (_insuPolicy.Svip_polc_cd == null)
                                {
                                    MessageBox.Show("Invalid insuarance policy.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtInsPol.Text = "";
                                    txtInsPol.Focus();
                                    return;
                                }

                                MasterOutsideParty _OutPartyDetails = new MasterOutsideParty();
                                _OutPartyDetails = CHNLSVC.Sales.GetOutSidePartyDetails(txtInsCom.Text.Trim(), "INS");

                                if (_OutPartyDetails.Mbi_cd == null)
                                {
                                    MessageBox.Show("Invalid insuarance company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtInsCom.Text = "";
                                    txtInsCom.Focus();
                                    return;
                                }

                                txtInsCom.Text = _OutPartyDetails.Mbi_cd;
                                txtInsPol.Text = _insuPolicy.Svip_polc_cd;
                                MasterVehicalInsuranceDefinitionNew _vehIns = new MasterVehicalInsuranceDefinitionNew();
                                QoutationDetails _invItm = new QoutationDetails();

                                //Get invoice details
                                string _pBook = "";
                                string _pLvl = "";
                                string _promoCd = "";
                                decimal _itmVal = 0;
                                _isInsuFound = false;

                                _invItm = CHNLSVC.Sales.GetQuotDetByItem(txtQuoNo.Text.Trim(), txtItem.Text.Trim());
                                if (_invItm.Qd_itm_cd == null)
                                {
                                    MessageBox.Show("Cannot find invoice item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtItem.Text = "";
                                    txtItem.Focus();
                                    return;
                                }
                                else
                                {
                                    _pBook = _invItm.Qd_pbook;
                                    _pLvl = _invItm.Qd_pb_lvl;
                                    //_promoCd = _invItm.Sad_promo_cd;
                                    _itmVal = _invItm.Qd_tot_amt / _invItm.Qd_frm_qty;
                                }



                                List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                                string _Subchannel = "";
                                string _typeSubChnl = "SCHNL";

                                string _Mainchannel = "";
                                string _typeMainChanl = "CHNL";

                                string _Pctype = "PC";
                                string _typePc = BaseCls.GlbUserDefProf;


                                if (_Saleshir.Count > 0)
                                {
                                    _Subchannel = (from _lst in _Saleshir
                                                   where _lst.Mpi_cd == "SCHNL"
                                                   select _lst.Mpi_val).ToList<string>()[0];


                                    _Mainchannel = (from _lst in _Saleshir
                                                    where _lst.Mpi_cd == "CHNL"
                                                    select _lst.Mpi_val).ToList<string>()[0];



                                    if (_accNo != null && _accNo != "")
                                    {
                                        _HpAccount = new HpAccount();
                                        _HpAccount = CHNLSVC.Sales.GetHP_Account_onAccNo(_accNo);

                                        _HpTerm = _HpAccount.Hpa_term;

                                        if (_HpTerm < 12)
                                        {
                                            chkAnnual.Checked = false;
                                            chkAnnual.Visible = true;
                                        }
                                        else
                                        {
                                            chkAnnual.Checked = false;
                                            chkAnnual.Visible = false;
                                        }


                                        if ((_HpTerm + 3) <= 3)
                                        {
                                            _HpTerm = 3;
                                        }
                                        else if ((_HpTerm + 3) <= 6)
                                        {
                                            _HpTerm = 6;
                                        }
                                        else if ((_HpTerm + 3) <= 9)
                                        {
                                            _HpTerm = 9;
                                        }
                                        else
                                        {
                                            _HpTerm = 12;
                                        }

                                        //_vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _HpTerm);

                                        if (!string.IsNullOrEmpty(_promoCd))
                                        {
                                            //check serial + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                        }
                                        else
                                        {
                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        _HpTerm = 12;
                                        // _vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _HpTerm);
                                        //_vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, null, null, null, null, null, null, 12, null, null, Convert.ToDateTime(dtpRecDate.Value).Date, 25, 25, null);
                                        if (!string.IsNullOrEmpty(_promoCd))
                                        {
                                            //check serial + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                        }
                                        else
                                        {
                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, Convert.ToDateTime(dtpRecDate.Value).Date, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                        }
                                    }

                                }
                                else
                                {
                                    MessageBox.Show("Profit center hirachy not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtBalance.Text = "0.00";
                                    txtPayment.Text = "0.00";
                                    lblExtraChg.Text = "0.00";
                                    return;
                                }
                            }
                        }
                    }
                    else
                    {
                        InvoiceItem _invItem = new InvoiceItem();
                        _invItem = CHNLSVC.Sales.GetPendingInvoiceItemsByItem(txtInvoice.Text.Trim(), txtItem.Text.Trim());

                        if (_invItem != null)
                        {
                            if (_invItem.Sad_inv_no != null)
                            {
                                if (_invItem.Sad_do_qty > 0)
                                {
                                    chkDel.Checked = true;
                                }
                                else
                                {
                                    chkDel.Checked = false;
                                }
                                _invLine = _invItem.Sad_itm_line;
                            }
                            else
                            {
                                MessageBox.Show("Canot find such item in selected invoice.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtItem.Focus();
                                return;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Canot find such item in selected invoice.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtItem.Focus();
                            return;
                        }


                        if (txtRecType.Text == "VHREG")
                        {
                            if (_itemList.Mi_need_reg == true)
                            {
                                VehicalRegistrationDefnition _vehDef = new VehicalRegistrationDefnition();
                                _isLease = CHNLSVC.Sales.IsCheckLeaseCom(txtInvoice.Text.Trim(), BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE");

                                DataTable _invRegDet = CHNLSVC.Sales.GetRegInvDet(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoice.Text.Trim());

                                if (_invRegDet.Rows.Count > 0)
                                {
                                    _invRegAllowQty = Convert.ToDecimal(_invRegDet.Rows[0]["totqty"]);

                                    if (_invRegAllowQty <= 0)
                                    {
                                        MessageBox.Show("Cannot find valid invoice qty.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }

                                    _invRegAllowVal = Convert.ToDecimal(_invRegDet.Rows[0]["totval"]);
                                }
                                else
                                {
                                    MessageBox.Show("Cannot find valid invoice details to proceed.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    return;
                                }

                                DataTable _invItmRegDet = CHNLSVC.Sales.GetRegInvItmDet(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoice.Text.Trim(), _invLine, txtItem.Text.Trim());

                                if (_invItmRegDet.Rows.Count > 0)
                                {

                                    _invItmQty = Convert.ToDecimal(_invItmRegDet.Rows[0]["tot_qty"]);

                                    if (_invItmQty <= 0)
                                    {
                                        MessageBox.Show("Cannot find valid invoice qty.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }

                                    _invItmVal = Convert.ToDecimal(_invItmRegDet.Rows[0]["tot_val"]);
                                    _invTp = _invItmRegDet.Rows[0]["sah_inv_tp"].ToString();
                                    _cusTp = _invItmRegDet.Rows[0]["mbe_cate"].ToString();
                                    _pbook = _invItmRegDet.Rows[0]["sad_pbook"].ToString();
                                    _plvl = _invItmRegDet.Rows[0]["sad_pb_lvl"].ToString();
                                }

                                //check whether all item qty generate registrations
                                List<VehicalRegistration> _preReg = new List<VehicalRegistration>();
                                _preReg = CHNLSVC.General.GetVehiclesByInvoiceNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoice.Text.Trim());

                                if (_preReg != null)
                                {
                                    if (_preReg.Count > 0)
                                    {
                                        decimal _count = _preReg.Where(x => x.P_srvt_itm_cd == txtItem.Text.Trim() && x.P_svrt_prnt_stus != 2).Count();
                                        _count = _count + 1;

                                        if (_count > _invItmQty)
                                        {
                                            MessageBox.Show("Registration receipt already available for selected invoice item.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            txtInvoice.Text = "";
                                            txtItem.Text = "";
                                            txtInvoice.Focus();
                                            return;
                                        }
                                    }
                                }

                                if (_isLease == false)
                                {
                                    if (_invTp == "HS")
                                    {
                                        // hiresale scheme
                                        if (!string.IsNullOrEmpty(_accNo))
                                        {
                                            _HpAccount = new HpAccount();
                                            _HpAccount = CHNLSVC.Sales.GetHP_Account_onAccNo(_accNo);

                                            _sch = _HpAccount.Hpa_sch_cd;
                                        }
                                        else
                                        {
                                            MessageBox.Show("Hire sales invioce cannot get account details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return;
                                        }

                                        List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                                        if (_Saleshir.Count > 0)
                                        {
                                            foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                                            {
                                                _regFound = false;
                                                _type = _one.Mpi_cd;
                                                _value = _one.Mpi_val;

                                                _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, _invTp, txtItem.Text.Trim(), _invDt, _sch, _invItmQty, _invItmVal, _pbook, _plvl, "N/A");

                                                if (_vehDef.Svrd_itm != null)
                                                {
                                                    txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                                                    txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                                                    _regAmt = _vehDef.Svrd_claim_val;
                                                    _vehRegTimes = _vehDef.SVRD_NO_OF_TIMES;
                                                    _vehRegUsedTimes = _vehDef.SVRD_NO_OF_USED;
                                                    _SVRD_SEQ = _vehDef.Svrd_seq;
                                                    _regFound = true;
                                                    goto L1;
                                                }
                                                else
                                                {
                                                    _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, _invTp, txtItem.Text.Trim(), _invDt, null, _invItmQty, _invItmVal, _pbook, _plvl, "N/A");

                                                    if (_vehDef.Svrd_itm != null)
                                                    {
                                                        txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                                                        txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                                                        _regAmt = _vehDef.Svrd_claim_val;
                                                        _vehRegTimes = _vehDef.SVRD_NO_OF_TIMES;
                                                        _vehRegUsedTimes = _vehDef.SVRD_NO_OF_USED;
                                                        _SVRD_SEQ = _vehDef.Svrd_seq;
                                                        _regFound = true;
                                                        goto L1;
                                                    }
                                                    //else
                                                    //{
                                                    //    MessageBox.Show("Registration amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                    //    txtItem.Text = "";
                                                    //    txtBalance.Text = "0.00";
                                                    //    txtPayment.Text = "0.00";
                                                    //    _regAmt = 0;
                                                    //    txtItem.Focus();
                                                    //    return;
                                                    //}
                                                }
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Hirarchy not define.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return;
                                        }


                                        if (_regFound == false)
                                        {
                                            MessageBox.Show("Registration amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            txtItem.Text = "";
                                            txtBalance.Text = "0.00";
                                            txtPayment.Text = "0.00";
                                            lblExtraChg.Text = "0.00";
                                            _regAmt = 0;
                                            txtItem.Focus();
                                            return;
                                        }

                                    L1: Int32 i = 1;
                                    }
                                    else
                                    {

                                        List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                                        if (_Saleshir.Count > 0)
                                        {
                                            foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                                            {
                                                _regFound = false;
                                                _type = _one.Mpi_cd;
                                                _value = _one.Mpi_val;

                                                //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirect(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE", txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date);
                                                _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, _invTp, txtItem.Text.Trim(), _invDt, null, _invItmQty, _invItmVal, _pbook, _plvl, "N/A");

                                                if (_vehDef.Svrd_itm != null)
                                                {
                                                    txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                                                    txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                                                    _regAmt = _vehDef.Svrd_claim_val;
                                                    _vehRegTimes = _vehDef.SVRD_NO_OF_TIMES;
                                                    _vehRegUsedTimes = _vehDef.SVRD_NO_OF_USED;
                                                    _SVRD_SEQ = _vehDef.Svrd_seq;
                                                    _regFound = true;
                                                    goto L3;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Hirarchy not define.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return;
                                        }

                                        if (_regFound == false)
                                        {
                                            MessageBox.Show("Registration amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            txtItem.Text = "";
                                            txtBalance.Text = "0.00";
                                            txtPayment.Text = "0.00";
                                            lblExtraChg.Text = "0.00";
                                            _regAmt = 0;
                                            txtItem.Focus();
                                            return;
                                        }
                                    L3: Int32 i = 1;
                                        //_vehDef = CHNLSVC.Sales.GetVehRegDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date);

                                        //if (_vehDef.Svrd_itm != null)
                                        //{
                                        //    txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                                        //    txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                                        //    _regAmt = _vehDef.Svrd_claim_val;
                                        //}
                                        //else
                                        //{

                                        //    MessageBox.Show("Registration amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        //    txtItem.Text = "";
                                        //    txtBalance.Text = "0.00";
                                        //    txtPayment.Text = "0.00";
                                        //    _regAmt = 0;
                                        //    txtItem.Focus();
                                        //    return;
                                        //}
                                    }
                                }
                                else if (_isLease == true)
                                {

                                    List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                                    if (_Saleshir.Count > 0)
                                    {
                                        foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                                        {
                                            _regFound = false;
                                            _type = _one.Mpi_cd;
                                            _value = _one.Mpi_val;

                                            //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirect(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE", txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date);
                                            _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, "LEASE", txtItem.Text.Trim(), _invDt, null, _invItmQty, _invItmVal, _pbook, _plvl, "N/A");

                                            if (_vehDef.Svrd_itm != null)
                                            {
                                                txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                                                txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                                                _regAmt = _vehDef.Svrd_claim_val;
                                                _vehRegTimes = _vehDef.SVRD_NO_OF_TIMES;
                                                _vehRegUsedTimes = _vehDef.SVRD_NO_OF_USED;
                                                _SVRD_SEQ = _vehDef.Svrd_seq;
                                                _regFound = true;
                                                goto L2;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.Show("Hirarchy not define.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }

                                    if (_regFound == false)
                                    {
                                        MessageBox.Show("Registration amount definitions not set for leasing company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        txtItem.Text = "";
                                        txtBalance.Text = "0.00";
                                        txtPayment.Text = "0.00";
                                        lblExtraChg.Text = "0.00";
                                        _regAmt = 0;
                                        txtItem.Focus();
                                        return;
                                    }
                                L2: Int32 i = 1;
                                }


                                //check registartion amount edit profit center
                                _isAllowEdit = CHNLSVC.Sales.IsCheckAllowFunction(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecType.Text.Trim(), "ALWEDIT");
                                if (_isAllowEdit == true)
                                {
                                    txtBalance.ReadOnly = false;
                                    txtBalance.Enabled = true;
                                }
                                else
                                {
                                    txtBalance.ReadOnly = true;
                                    txtBalance.Enabled = false;
                                }
                            }
                            else
                            {
                                MessageBox.Show("This item is not allow to regiration process.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtItem.Text = "";
                                txtItem.Focus();
                                return;
                            }
                        }
                        else if (txtRecType.Text == "VHINS")
                        {
                            if (_itemList.Mi_need_insu == false)
                            {
                                MessageBox.Show("This item is not allow to insuarance process.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtItem.Text = "";
                                txtItem.Focus();
                                return;
                            }

                            Int32 _HpTerm = 0;

                            if ((!string.IsNullOrEmpty(txtInsPol.Text)) && (!string.IsNullOrEmpty(txtInsCom.Text)))
                            {

                                InsuarancePolicy _insuPolicy = new InsuarancePolicy();
                                _insuPolicy = CHNLSVC.Sales.GetInusPolicy(txtInsPol.Text.Trim());

                                if (_insuPolicy.Svip_polc_cd == null)
                                {
                                    MessageBox.Show("Invalid insuarance policy.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtInsPol.Text = "";
                                    txtInsPol.Focus();
                                    return;
                                }

                                MasterOutsideParty _OutPartyDetails = new MasterOutsideParty();
                                _OutPartyDetails = CHNLSVC.Sales.GetOutSidePartyDetails(txtInsCom.Text.Trim(), "INS");

                                if (_OutPartyDetails.Mbi_cd == null)
                                {
                                    MessageBox.Show("Invalid insuarance company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtInsCom.Text = "";
                                    txtInsCom.Focus();
                                    return;
                                }

                                txtInsCom.Text = _OutPartyDetails.Mbi_cd;
                                txtInsPol.Text = _insuPolicy.Svip_polc_cd;
                                MasterVehicalInsuranceDefinitionNew _vehIns = new MasterVehicalInsuranceDefinitionNew();
                                InvoiceItem _invItm = new InvoiceItem();

                                //Get invoice details
                                string _pBook = "";
                                string _pLvl = "";
                                string _promoCd = "";
                                decimal _itmVal = 0;
                                _isInsuFound = false;

                                _invItm = CHNLSVC.Sales.GetInvDetByLine(txtInvoice.Text.Trim(), txtItem.Text.Trim(), _invLine);
                                if (_invItm.Sad_itm_cd == null)
                                {
                                    MessageBox.Show("Cannot find invoice item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtItem.Text = "";
                                    txtItem.Focus();
                                    return;
                                }
                                else
                                {
                                    _pBook = _invItm.Sad_pbook;
                                    _pLvl = _invItm.Sad_pb_lvl;
                                    _promoCd = _invItm.Sad_promo_cd;
                                    _itmVal = _invItm.Sad_tot_amt / _invItem.Sad_qty;
                                }



                                List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                                string _Subchannel = "";
                                string _typeSubChnl = "SCHNL";

                                string _Mainchannel = "";
                                string _typeMainChanl = "CHNL";

                                string _Pctype = "PC";
                                string _typePc = BaseCls.GlbUserDefProf;


                                if (_Saleshir.Count > 0)
                                {
                                    _Subchannel = (from _lst in _Saleshir
                                                   where _lst.Mpi_cd == "SCHNL"
                                                   select _lst.Mpi_val).ToList<string>()[0];


                                    _Mainchannel = (from _lst in _Saleshir
                                                    where _lst.Mpi_cd == "CHNL"
                                                    select _lst.Mpi_val).ToList<string>()[0];



                                    if (_accNo != null && _accNo != "")
                                    {
                                        _HpAccount = new HpAccount();
                                        _HpAccount = CHNLSVC.Sales.GetHP_Account_onAccNo(_accNo);

                                        _HpTerm = _HpAccount.Hpa_term;

                                        if (_HpTerm < 12)
                                        {
                                            chkAnnual.Checked = false;
                                            chkAnnual.Visible = true;
                                        }
                                        else
                                        {
                                            chkAnnual.Checked = false;
                                            chkAnnual.Visible = false;
                                        }


                                        if ((_HpTerm + 3) <= 3)
                                        {
                                            _HpTerm = 3;
                                        }
                                        else if ((_HpTerm + 3) <= 6)
                                        {
                                            _HpTerm = 6;
                                        }
                                        else if ((_HpTerm + 3) <= 9)
                                        {
                                            _HpTerm = 9;
                                        }
                                        else
                                        {
                                            _HpTerm = 12;
                                        }

                                        //_vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _HpTerm);

                                        if (!string.IsNullOrEmpty(_promoCd))
                                        {
                                            //check serial + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                        }
                                        else
                                        {
                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        _HpTerm = 12;
                                        // _vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _HpTerm);
                                        //_vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, null, null, null, null, null, null, 12, null, null, Convert.ToDateTime(dtpRecDate.Value).Date, 25, 25, null);
                                        if (!string.IsNullOrEmpty(_promoCd))
                                        {
                                            //check serial + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel + promo
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                        }
                                        else
                                        {
                                            //check serial
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                            //check pc
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //check sub Channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }

                                            //Check channel
                                            _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                            if (_vehIns.Svid_itm != null)
                                            {
                                                txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                                txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                                _isInsuFound = true;
                                                goto L55;
                                            }
                                        }
                                    }



                                    //if (_vehIns.Ins_com_cd != null)
                                    //{
                                    //    txtBalance.Text = _vehIns.Value.ToString("0.00");
                                    //    txtPayment.Text = _vehIns.Value.ToString("0.00");
                                    //}
                                    //else
                                    //{
                                    //    MessageBox.Show("Insuarance amount definitions not set for the term " + _HpTerm, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    //    txtBalance.Text = "0.00";
                                    //    txtPayment.Text = "0.00";
                                    //    txtItem.Text = "";
                                    //    txtItem.Focus();
                                    //    return;
                                    //}

                                }
                                else
                                {
                                    MessageBox.Show("Profit center hirachy not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtBalance.Text = "0.00";
                                    txtPayment.Text = "0.00";
                                    lblExtraChg.Text = "0.00";
                                    return;
                                }

                            }

                            if (_isInsuFound == false)
                            {
                                MessageBox.Show("Cannot find insuarance definition for the term " + _HpTerm, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtBalance.Text = "0.00";
                                txtPayment.Text = "0.00";
                                lblExtraChg.Text = "0.00";
                                txtInsCom.Text = "";
                                txtInsPol.Text = "";
                                return;
                            }

                        }
                        else if (txtRecType.Text == "ADINS")
                        {
                            if ((!string.IsNullOrEmpty(txtInsPol.Text)) && (!string.IsNullOrEmpty(txtInsCom.Text)))
                            {

                                InsuarancePolicy _insuPolicy = new InsuarancePolicy();
                                _insuPolicy = CHNLSVC.Sales.GetInusPolicy(txtInsPol.Text.Trim());

                                if (_insuPolicy.Svip_polc_cd == null)
                                {
                                    MessageBox.Show("Invalid insuarance policy.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtInsPol.Text = "";
                                    txtInsPol.Focus();
                                    return;
                                }

                                MasterOutsideParty _OutPartyDetails = new MasterOutsideParty();
                                _OutPartyDetails = CHNLSVC.Sales.GetOutSidePartyDetails(txtInsCom.Text.Trim(), "INS");

                                if (_OutPartyDetails.Mbi_cd == null)
                                {
                                    MessageBox.Show("Invalid insuarance company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtInsCom.Text = "";
                                    txtInsCom.Focus();
                                    return;
                                }

                                txtInsCom.Text = _OutPartyDetails.Mbi_cd;
                                txtInsPol.Text = _insuPolicy.Svip_polc_cd;
                                MasterVehicalInsuranceDefinitionNew _vehIns = new MasterVehicalInsuranceDefinitionNew();
                                InvoiceItem _invItm = new InvoiceItem();

                                //Get invoice details
                                string _pBook = "";
                                string _pLvl = "";
                                string _promoCd = "";
                                decimal _itmVal = 0;
                                string _cat1 = "";
                                string _cat2 = "";
                                string _brand = "";
                                _isInsuFound = false;

                                _invItm = CHNLSVC.Sales.GetInvDetByLine(txtInvoice.Text.Trim(), txtItem.Text.Trim(), _invLine);
                                if (_invItm.Sad_itm_cd == null)
                                {
                                    MessageBox.Show("Cannot find invoice item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtItem.Text = "";
                                    txtItem.Focus();
                                    return;
                                }
                                else
                                {
                                    _itemList = new MasterItem();
                                    _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());

                                    _pBook = _invItm.Sad_pbook;
                                    _pLvl = _invItm.Sad_pb_lvl;
                                    _promoCd = _invItm.Sad_promo_cd;
                                    _itmVal = _invItm.Sad_tot_amt / _invItem.Sad_qty;

                                    if (_itemList.Mi_cd == null)
                                    {
                                        MessageBox.Show("Cannot find item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        txtItem.Text = "";
                                        txtItem.Focus();
                                        return;
                                    }
                                    else
                                    {
                                        _cat1 = _itemList.Mi_cate_1;
                                        _cat2 = _itemList.Mi_cate_2;
                                        _brand = _itemList.Mi_brand;
                                    }
                                }



                                List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                                string _Subchannel = "";
                                string _typeSubChnl = "SCHNL";

                                string _Mainchannel = "";
                                string _typeMainChanl = "CHNL";

                                string _Pctype = "PC";
                                string _typePc = BaseCls.GlbUserDefProf;


                                if (_Saleshir.Count > 0)
                                {
                                    _Subchannel = (from _lst in _Saleshir
                                                   where _lst.Mpi_cd == "SCHNL"
                                                   select _lst.Mpi_val).ToList<string>()[0];


                                    _Mainchannel = (from _lst in _Saleshir
                                                    where _lst.Mpi_cd == "CHNL"
                                                    select _lst.Mpi_val).ToList<string>()[0];


                                    //check pc
                                    // check item + price book + price level
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    // check item
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + brand 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 + brand
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }


                                    //check sub Channel
                                    // check item + price book + price level
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    // check item
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + brand 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 + brand
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }

                                    //Check channel
                                    // check item + price book + price level
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 + brand + pb + plvl
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, _pBook, _pLvl);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    // check item
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, txtItem.Text.Trim(), null, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + brand 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, null, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, null, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                    //check cat1 + cat2 + brand
                                    _vehIns = CHNLSVC.Sales.GetAddInsAmt(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _invType, _invDt, _itmVal, txtRecType.Text, null, _cat1, _cat2, _brand, null, null);

                                    if (_vehIns.Svid_com != null)
                                    {
                                        if (_vehIns.Svid_is_rt == 1)
                                        {
                                            txtBalance.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            txtPayment.Text = (_vehIns.Svid_val * _itmVal / 100).ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }
                                        else
                                        {
                                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                                            _isInsuFound = true;
                                            goto L55;
                                        }

                                    }
                                }
                                else
                                {
                                    MessageBox.Show("Profit center hirachy not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtBalance.Text = "0.00";
                                    txtPayment.Text = "0.00";
                                    lblExtraChg.Text = "0.00";
                                    return;
                                }

                                if (_isInsuFound == false)
                                {
                                    MessageBox.Show("Cannot find insuarance definition.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtBalance.Text = "0.00";
                                    txtPayment.Text = "0.00";
                                    lblExtraChg.Text = "0.00";
                                    txtInsCom.Text = "";
                                    txtInsPol.Text = "";
                                    return;
                                }
                            }
                        }
                    }
                L55: int I = 0;
                }
            }
        }

        private void txtInvoice_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.F2)
                {

                    if (txtRecType.Text == "DEBT")
                    {

                        if (string.IsNullOrEmpty(txtCusCode.Text))
                        {
                            MessageBox.Show("Please select customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtCusCode.Focus();
                            return;
                        }

                        if (string.IsNullOrEmpty(txtOthSR.Text) && chkOth.Checked == true)
                        {
                            MessageBox.Show("Please select other showroom.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtOthSR.Focus();
                            return;
                        }

                        DataTable _result = null;
                        CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                        _CommonSearch.ReturnIndex = 0;
                        if (chkOth.Checked == true)
                        {
                            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.OutstandingInvOth);
                            _result = CHNLSVC.CommonSearch.GetOutstandingInvoice(_CommonSearch.SearchParams, null, null);
                        }
                        else
                        {
                            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.OutstandingInv);
                            _result = CHNLSVC.CommonSearch.GetOutstandingInvoice(_CommonSearch.SearchParams, null, null);
                        }
                        _CommonSearch.dvResult.DataSource = _result;
                        _CommonSearch.BindUCtrlDDLData(_result);
                        _CommonSearch.obj_TragetTextBox = txtInvoice;
                        _CommonSearch.ShowDialog();
                        txtInvoice.Select();
                    }
                    else if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") || (txtRecType.Text == "ADINS") || (txtRecType.Text == "TNSPT"))
                    {
                        if (string.IsNullOrEmpty(txtCusCode.Text))
                        {
                            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                            _CommonSearch.ReturnIndex = 0;
                            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SalesInvoice);
                            DataTable _result = CHNLSVC.CommonSearch.GetAllInvoiceSearchData(_CommonSearch.SearchParams, null, null);
                            _CommonSearch.dvResult.DataSource = _result;
                            _CommonSearch.BindUCtrlDDLData(_result);
                            _CommonSearch.obj_TragetTextBox = txtInvoice;
                            _CommonSearch.ShowDialog();
                            txtInvoice.Select();
                        }
                        else
                        {
                            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                            _CommonSearch.ReturnIndex = 0;
                            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceByCus);
                            DataTable _result = CHNLSVC.CommonSearch.GetInvoicebyCustomer(_CommonSearch.SearchParams, null, null);
                            _CommonSearch.dvResult.DataSource = _result;
                            _CommonSearch.BindUCtrlDDLData(_result);
                            _CommonSearch.obj_TragetTextBox = txtInvoice;
                            _CommonSearch.ShowDialog();
                            txtInvoice.Select();
                        }
                    }
                    else if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                    {
                        if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.RVT.ToString())
                        {
                            txtInvoice.Text = GetHpAccountNo(BaseCls.GlbUserDefProf);
                        }
                        else if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.PRCDF.ToString())
                        {
                            if (string.IsNullOrEmpty(txtCusCode.Text))
                            {
                                MessageBox.Show("Please select customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtCusCode.Focus();
                                return;
                            }
                            else if (txtCusCode.Text == "CASH")
                            {
                                MessageBox.Show("Customer code [CASH] is invalid. Please select a valid customer", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtCusCode.Focus();
                                return;
                            }
                            else GetInvoiceNumber(txtCusCode.Text);
                        }
                        else if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.JOB.ToString())
                        {
                            if (string.IsNullOrEmpty(txtCusCode.Text))
                            {
                                MessageBox.Show("Please select customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtCusCode.Focus();
                                return;
                            }
                            else if (txtCusCode.Text == "CASH")
                            {
                                MessageBox.Show("Customer code [CASH] is invalid. Please select a valid customer", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtCusCode.Focus();
                                return;
                            }

                            txtInvoice_DoubleClick(null, null);
                        }
                    }
                }
                else if (e.KeyCode == Keys.Enter)
                {
                    if (gbItem.Visible == true)
                    {
                        txtItem.Focus();
                    }
                    else
                    {
                        txtPayment.Focus();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.ActiveControl.Focus();
            }
        }

        private void txtManual_Leave(object sender, EventArgs e)
        {
            if (_IsRecall == true)
            {
                return;
            }
            _bkNo = "";
            if (radioButtonManual.Checked == true)
            {
                if (!string.IsNullOrEmpty(txtManual.Text))
                {
                    if (!IsNumeric(txtManual.Text))
                    {
                        MessageBox.Show("Invalid manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtManual.Text = "";
                        txtManual.Focus();
                        return;
                    }
                    if (!string.IsNullOrEmpty(comboBoxPrefix.Text))
                    {

                        Boolean _IsValid = CHNLSVC.Inventory.IsValidManualDocument_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
                        if (_IsValid == false)
                        {
                            MessageBox.Show("Invalid manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtManual.Text = "";
                            txtManual.Focus();
                            return;
                        }
                    }
                    //kapila 25/4/2016

                    DataTable _dtBk = CHNLSVC.Inventory.GetManualDocBookNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
                    if (_dtBk.Rows.Count > 0) _bkNo = _dtBk.Rows[0]["mdd_bk_no"].ToString();
                }
                else
                {
                    //MessageBox.Show("Please enter manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //txtManual.Text = "";
                    //txtManual.Focus();
                }
            }

            if (radioButtonSystem.Checked == true)
            {
                if (!string.IsNullOrEmpty(txtManual.Text))
                {
                    if (!IsNumeric(txtManual.Text))
                    {
                        MessageBox.Show("Invalid manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtManual.Text = "";
                        txtManual.Focus();
                        return;
                    }
                    if (!string.IsNullOrEmpty(comboBoxPrefix.Text))
                    {
                        Boolean _IsValid = CHNLSVC.Inventory.IsValidManualDocument_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "SDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
                        if (_IsValid == false)
                        {
                            MessageBox.Show("Invalid manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtManual.Text = "";
                            txtManual.Focus();
                            return;
                        }
                    }
                    //kapila 25/4/2016

                    DataTable _dtBk = CHNLSVC.Inventory.GetManualDocBookNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
                    if (_dtBk.Rows.Count > 0) _bkNo = _dtBk.Rows[0]["mdd_bk_no"].ToString();
                }
                else
                {
                    //MessageBox.Show("Please enter manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //txtManual.Text = "";
                    //txtManual.Focus();
                }
            }
        }

        private void txtCusCode_Leave(object sender, EventArgs e)
        {
            LoadCustomerDetails();
        }

        private void LoadCustomerDetails()
        {
            MasterBusinessEntity _masterBusinessCompany = new MasterBusinessEntity();
            if (!string.IsNullOrEmpty(txtCusCode.Text))
            {
                _masterBusinessCompany = CHNLSVC.Sales.GetBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCusCode.Text.Trim(), string.Empty, string.Empty, "C");

                DataTable _syspara = CHNLSVC.Inventory.getMstSysPara(BaseCls.GlbUserComCode, "SCHNL", BaseCls.GlbDefChannel, "REGFREE", txtCusCode.Text);
                if (_syspara.Rows.Count > 0)
                {
                    foreach (DataRow drow in _syspara.Rows)
                    {
                        if (Convert.ToInt16(drow["msp_rest_val"]) == 1)
                        {
                            chk_Freereg.Checked = false;
                            chk_Freereg.Visible = true;
                        }
                    }
                }

                if (_masterBusinessCompany.Mbe_cd != null)
                {
                    //kapila 8/1/2016
                    //if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") || (txtRecType.Text == "ADVAN"))
                    if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS"))
                    {
                        _minDPRate = _masterBusinessCompany.Mbe_min_dp_per;
                        if (_masterBusinessCompany.Mbe_ins_man == 1)
                        {

                            pnlQuo.Visible = true;
                            pnlQuo.Enabled = true;
                        }
                        else
                        {
                            pnlQuo.Enabled = false;
                            pnlQuo.Visible = true;
                            //pnlQuo.Visible = false;
                        }

                    }
                    if (_masterBusinessCompany.Mbe_cd == "CASH")
                    {
                        txtCusCode.Text = _masterBusinessCompany.Mbe_cd;
                        txtCusName.Text = "";
                        txtCusAdd1.Text = "";
                        txtCusAdd2.Text = "";
                        txtNIC.Text = "";
                        txtMobile.Text = "";
                        lblCusEmail.Text = "";
                        txtCusCode.ReadOnly = false;
                        txtCusName.ReadOnly = false;
                    }
                    else
                    {
                        txtCusCode.Text = _masterBusinessCompany.Mbe_cd;
                        txtCusName.Text = _masterBusinessCompany.Mbe_name;
                        txtCusAdd1.Text = _masterBusinessCompany.Mbe_add1;
                        txtCusAdd2.Text = _masterBusinessCompany.Mbe_add2;
                        txtNIC.Text = _masterBusinessCompany.Mbe_nic;
                        txtMobile.Text = _masterBusinessCompany.Mbe_mob;
                        lblCusEmail.Text = _masterBusinessCompany.Mbe_email;

                        if (string.IsNullOrEmpty(_masterBusinessCompany.Mbe_distric_cd))
                        {

                        }
                        else
                        {
                            cmbDistrict.Text = _masterBusinessCompany.Mbe_distric_cd;
                        }

                        txtProvince.Text = _masterBusinessCompany.Mbe_province_cd;
                        txtCusName.ReadOnly = true;
                    }
                }
                else
                {
                    MessageBox.Show("Invalid customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtCusCode.Text = "";
                    txtCusName.Text = "";
                    txtCusAdd1.Text = "";
                    txtCusAdd2.Text = "";
                    txtNIC.Text = "";
                    txtMobile.Text = "";
                    txtProvince.Text = "";
                    lblCusEmail.Text = "";
                    txtCusCode.Focus();
                    return;
                }
            }
            else
            {
                txtCusName.Text = "";
                txtCusAdd1.Text = "";
                txtCusAdd2.Text = "";
                txtNIC.Text = "";
                txtMobile.Text = "";
                txtProvince.Text = "";
                lblCusEmail.Text = "";
                chk_Freereg.Checked = false;
                chk_Freereg.Visible = false;
            }
        }

        private void txtCusCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.CustomerCommon);
                DataTable _result = CHNLSVC.CommonSearch.GetCustomerCommon(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtCusCode;
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.ShowDialog();
                txtCusCode.Select();
            }
            else if (e.KeyCode == Keys.Enter)
            {
                txtCusName.Focus();
            }
        }

        private void txtDivision_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Division);
                DataTable _result = CHNLSVC.CommonSearch.GetDivision(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtDivision;
                _CommonSearch.ShowDialog();
                txtDivision.Select();
            }
            else if (e.KeyCode == Keys.Enter)
            {
                txtManual.Focus();
            }
        }

        private void txtDivision_Leave(object sender, EventArgs e)
            {
            if (!string.IsNullOrEmpty(txtDivision.Text))
            {
                if (!CHNLSVC.Sales.IsValidDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtDivision.Text.Trim()))
                {
                    MessageBox.Show("Invalid division.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtDivision.Text = "";
                    txtDivision.Focus();
                    return;
                }
            }

        }

        private void txtCusName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtCusAdd1.Focus();
            }
        }

        private void txtCusAdd1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtCusAdd2.Focus();
            }
        }

        private void txtCusAdd2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtNIC.Focus();
            }
        }

        private void txtNIC_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtNIC.Text))
            {
                if (!IsValidNIC(txtNIC.Text.Trim()))
                {
                    MessageBox.Show("Invalid NIC number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtNIC.Text = "";
                    txtNIC.Focus();
                    return;
                }
            }
        }

        private void txtNIC_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtMobile.Focus();
            }
        }

        private void txtMobile_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtMobile.Text))
            {
                if (!IsValidMobileOrLandNo(txtMobile.Text.Trim()))
                {
                    MessageBox.Show("Invalid mobile number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtMobile.Text = "";
                    txtMobile.Focus();
                    return;
                }
            }
        }

        private void txtMobile_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                cmbDistrict.Focus();
            }
        }

        private void txtcmbDistrict_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (txtInvoice.Enabled == true)
                {
                    txtInvoice.Focus();
                }
                else if (txtItem.Enabled == true)
                {
                    txtItem.Focus();
                }
                else
                {
                    txtPayment.Focus();
                }
            }
        }

        private void txtRecType_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ReceiptType);
                DataTable _result = CHNLSVC.CommonSearch.GetReceiptTypes(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtRecType;
                _CommonSearch.ShowDialog();
                txtRecType.Select();
            }
            else if (e.KeyCode == Keys.Enter)
            {
                if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    grpSubRecTp.Visible = true;
                    txtSubReceiptTp.Focus();
                }
                else
                {
                    txtDivision.Focus();
                }
            }
            //else if (e.KeyCode == Keys.Enter)
            //{
            //    txtDivision.Focus();
            //}
        }

        private void ClearSettle_Data()
        {
            txtInvoice.Text = "";
            txtBalance.Text = "0.00";
            txtItem.Text = "";
            txtengine.Text = "";
            txtChasis.Text = "";
            txtQuoNo.Text = "";
            txtInsCom.Text = "";
            txtInsPol.Text = "";
            txtPayment.Text = "0.00";
            lblExtraChg.Text = "0.00";
            chkDel.Checked = false;
            chkDel.Enabled = true;
            chkAnnual.Checked = false;
        }

        private void ClearCus_Data()
        {
            txtCusCode.Text = "";
            txtCusName.Text = "";
            txtCusAdd1.Text = "";
            txtCusAdd2.Text = "";
            txtNIC.Text = "";
            txtMobile.Text = "";
            txtProvince.Text = "";
            lblCusEmail.Text = "";
            
        }

        private void txtRecType_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtRecType.Text))
            {
                MasterReceiptDivision _RecDiv = new MasterReceiptDivision();
                _RecDiv = CHNLSVC.Sales.GetDefRecDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                if (_RecDiv.Msrd_cd != null)
                {
                    txtDivision.Text = _RecDiv.Msrd_cd;
                }
                else
                {
                    txtDivision.Text = "";
                }

                if (!CHNLSVC.Sales.IsValidReceiptType(BaseCls.GlbUserComCode, txtRecType.Text.Trim()))
                {
                    MessageBox.Show("Invalid receipt type.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtRecType.Text = "";
                    txtRecType.Focus();
                    return;
                }
                else
                {
                    grpSubRecTp.Visible = false;
                    grpCustomer.Enabled = true;
                    chkOth.Visible = false;
                    txtOthSR.Visible = false;
                    btnOthSR.Visible = false;
                    txtengine.Enabled = true;
                    txtChasis.Enabled = true;
                    pnlExtraChg.Visible = false;
                    pnlItemAlloc.Visible = false;
                    pnlQuo.Visible = false;
                    pnlOth.Visible = false;

                    ucPayModes1.InvoiceType = txtRecType.Text.Trim();
                    ucPayModes1.LoadData();

                    //Updated by  akila 2016/12/15
                    if (txtRecType.Text == "DEBT")
                    {
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtPayment.Text = "0.00";
                        txtInvoice.Enabled = true;
                        radioButtonManual.Checked = false;
                        radioButtonManual.Enabled = true;
                        chkDel.Checked = false;
                        chkDel.Enabled = false;
                        gbItem.Visible = false;
                        gbInsu.Visible = false;
                        gbsettle.Visible = true;
                        chkOth.Visible = true;
                        txtOthSR.Visible = true;
                        btnOthSR.Visible = true;
                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbGVDet.Visible = false;
                        ClearCus_Data();
                        ClearSettle_Data();
                    }
                    else if (txtRecType.Text == "VHREG")
                    {
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtPayment.Text = "0.00";
                        lblExtraChg.Text = "0.00";
                        txtInvoice.Enabled = true;
                        radioButtonManual.Checked = false;
                        radioButtonManual.Enabled = true;
                        chkDel.Checked = false;
                        chkDel.Enabled = true;
                        gbItem.Visible = true;
                        gbInsu.Visible = false;
                        gbsettle.Visible = true;
                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbGVDet.Visible = false;
                        pnlExtraChg.Visible = true;
                        pnlQuo.Visible = true;
                        ClearCus_Data();
                        ClearSettle_Data();
                    }
                    else if (txtRecType.Text == "VHINS")
                    {
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtPayment.Text = "0.00";
                        txtInvoice.Enabled = true;
                        radioButtonManual.Checked = false;
                        radioButtonManual.Enabled = true;
                        chkDel.Checked = false;
                        chkDel.Enabled = true;
                        gbItem.Visible = true;
                        gbInsu.Visible = true; 
                        

                        gbsettle.Visible = true;
                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbGVDet.Visible = false;
                        pnlQuo.Visible = true;
                        ClearCus_Data();
                        ClearSettle_Data();
                        MasterOutsideParty _insCom = CHNLSVC.Sales.GetOutSidePartyDetails(null, "INS");
                        if (_insCom.Mbi_cd != null)
                        {
                            txtInsCom.Text = _insCom.Mbi_cd;
                        }
                        else
                        {
                            txtInsCom.Text = "";
                        }

                        InsuarancePolicy _insPol = CHNLSVC.Sales.GetInusPolicy(null);
                        if (_insPol.Svip_polc_cd != null)
                        {
                            txtInsPol.Text = _insPol.Svip_polc_cd;
                        }
                        else
                        {
                            txtInsPol.Text = "";
                        }

                    }
                    else if (txtRecType.Text == "VHREG")
                    {
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtPayment.Text = "0.00";
                        lblExtraChg.Text = "0.00";
                        txtInvoice.Enabled = true;
                        radioButtonManual.Checked = false;
                        radioButtonManual.Enabled = true;
                        chkDel.Checked = false;
                        chkDel.Enabled = true;
                        gbItem.Visible = true;
                        gbInsu.Visible = false;
                        gbsettle.Visible = true;
                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbGVDet.Visible = false;
                        pnlExtraChg.Visible = true;
                        pnlQuo.Visible = true;
                        ClearCus_Data();
                        ClearSettle_Data();
                    }
                        //tharanga 2017/05/08

                    else if (txtRecType.Text == "TNSPT")
                    {
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtPayment.Text = "0.00";
                        txtInvoice.Enabled = true;
                        radioButtonManual.Checked = false;
                        radioButtonManual.Enabled = true;
                        chkDel.Checked = false;
                        chkDel.Enabled = true;
                        gbItem.Visible = true;
                        gbInsu.Visible = false;
                        gbsettle.Visible = true;
                        txtPayment.Enabled = false;
                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbGVDet.Visible = false;
                        pnlQuo.Visible = true;
                        ClearCus_Data();
                        ClearSettle_Data();
                        ucPayModes1.Enabled = true;
                        
                       

                            DataTable oDataTable = new DataTable();
                            oDataTable = CHNLSVC.Sales.Get_SVID_VAL(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecType.Text.Trim(), dtpRecDate.Value.Date);
                            if (oDataTable.Rows.Count > 0)
                            {
                                txtPayment.Text = oDataTable.Rows[0]["SVID_VAL"].ToString();
                            }
                        
                    }

                    else if (txtRecType.Text == "ADINS")
                    {
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtPayment.Text = "0.00";
                        txtInvoice.Enabled = true;
                        radioButtonManual.Checked = false;
                        radioButtonManual.Enabled = true;
                        chkDel.Checked = false;
                        chkDel.Enabled = false;
                        gbItem.Visible = true;
                        gbInsu.Visible = true;
                        gbsettle.Visible = true;
                        txtengine.Enabled = true;
                        txtChasis.Enabled = true;
                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbGVDet.Visible = false;
                        ClearCus_Data();
                        ClearSettle_Data();
                        MasterOutsideParty _insCom = CHNLSVC.Sales.GetOutSidePartyDetails(null, "INS");
                        if (_insCom.Mbi_cd != null)
                        {
                            txtInsCom.Text = _insCom.Mbi_cd;
                        }
                        else
                        {
                            txtInsCom.Text = "";
                        }

                        InsuarancePolicy _insPol = CHNLSVC.Sales.GetInusPolicy(null);
                        if (_insPol.Svip_polc_cd != null)
                        {
                            txtInsPol.Text = _insPol.Svip_polc_cd;
                        }
                        else
                        {
                            txtInsPol.Text = "";
                        }

                    }
                    else if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                    {
                        pnlInvoice.Visible = true;
                        pnlAmount.Visible = true;

                        loadPrifixes();
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtPayment.Text = "0.00";
                        txtInvoice.Enabled = false;
                        gbItem.Visible = false;
                        chkDel.Checked = false;
                        chkDel.Enabled = false;
                        gbInsu.Visible = false;
                        gbsettle.Visible = true;
                        pnlQuo.Visible = true;
                        pnlQuo.Enabled = false;

                        if (BaseCls.GlbUserComCode == "AAL")
                        {
                            if (BaseCls.GlbUserDefProf != "500" && BaseCls.GlbUserDefProf != "800" && BaseCls.GlbUserDefProf != "200" && BaseCls.GlbUserDefProf != "551" && BaseCls.GlbUserDefProf != "502" && BaseCls.GlbUserDefProf != "552")
                            {
                                radioButtonManual.Checked = true;
                                radioButtonManual.Enabled = false;
                            }
                            else
                            {
                                radioButtonManual.Checked = false;
                                radioButtonManual.Enabled = true;
                            }
                        }
                        else
                        {

                            MasterProfitCenter _ctn = CHNLSVC.Sales.GetProfitCenter(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                            if (_ctn != null)
                            {
                                if (_ctn.Mpc_chnl != "MSR" && _ctn.Mpc_chnl != "TOT-SR" && _ctn.Mpc_chnl != "RTOT" && _ctn.Mpc_chnl != "ELITE" && _ctn.Mpc_chnl != "RMSR" && _ctn.Mpc_chnl != "AOA_CH" && _ctn.Mpc_chnl != "CLEARENCE_SALES" && _ctn.Mpc_chnl != "APPLE" && _ctn.Mpc_chnl != "RAPS" && _ctn.Mpc_chnl != "RCLS" && _ctn.Mpc_oth_ref != "SYS" && _ctn.Mpc_chnl != "CLR" && _ctn.Mpc_chnl != "APPIST" && _ctn.Mpc_chnl != "ELES" && _ctn.Mpc_chnl != "TOTO") //CLR added on 2017-12-21 Sanjeewa for 40 PC
                                {
                                    radioButtonManual.Checked = true;
                                    //   radioButtonManual.Enabled = false;
                                    txtManual.Text = "";        //kapila 6/4/2015
                                    _bkNo = "";
                                }

                            }

                        }

                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbGVDet.Visible = false;
                        ClearCus_Data();
                        ClearSettle_Data();
                        //txtCusCode.Text = "CASH";

                        grpSubRecTp.Visible = true;
                        txtSubReceiptTp.Enabled = true;
                        txtSubReceiptTp.ReadOnly = false;

                    }
                    else if (txtRecType.Text == "TICKT")
                    {
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtPayment.Text = "0.00";
                        txtInvoice.Enabled = false;
                        gbItem.Visible = false;
                        chkDel.Checked = false;
                        chkDel.Enabled = false;
                        gbInsu.Visible = false;
                        gbsettle.Visible = false;
                        pnlQuo.Visible = false;
                        pnlOth.Visible = true;
                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbGVDet.Visible = false;
                        ClearCus_Data();
                        ClearSettle_Data();
                        //txtCusCode.Text = "CASH";
                    }
                    else if (txtRecType.Text == "GVISU")
                    {
                        if (BaseCls.GlbUserComCode == "AST")   //28/1/2016
                        {
                            //kapila
                            DataTable _dt = CHNLSVC.Financial.get_SignOn(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, BaseCls.GlbUserID, Convert.ToDateTime(dtpRecDate.Text));
                            if (_dt.Rows.Count == 0)
                            {
                                MessageBox.Show("Process Halted ! You have not sign on", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                txtRecType.Text = "";
                                txtRecType.Focus();
                                return;
                            }
                        }
                        ClearCus_Data();
                        ClearSettle_Data();
                        if (!CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 10061))
                        {
                            chkAllowPromo.Checked = false;
                            chkAllowPromo.Visible = false;
                            chkGvFOC.Checked = false;
                            chkGvFOC.Visible = false;
                            dtGVExp.Visible = false;
                            lblGVExp.Visible = false;
                        }
                        else
                        {
                            chkAllowPromo.Checked = false;
                            chkAllowPromo.Visible = true;
                            chkGvFOC.Checked = false;
                            chkGvFOC.Visible = true;
                            dtGVExp.Visible = true;
                            lblGVExp.Visible = true;

                        }
                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbsettle.Visible = false;
                        gbGVDet.Visible = true;
                        //txtCusCode.Text = "CASH";
                    }
                    else
                    {
                        txtInvoice.Text = "";
                        txtBalance.Text = "0.00";
                        txtPayment.Text = "0.00";
                        txtInvoice.Enabled = false;
                        radioButtonManual.Checked = false;
                        radioButtonManual.Enabled = true;
                        chkDel.Checked = false;
                        chkDel.Enabled = false;
                        gbInsu.Visible = false;
                        gbItem.Visible = false;
                        gbsettle.Visible = true;
                        txtGVCode.Text = "";
                        lblFrompg.Text = "";
                        _gvPrefix = "";
                        _gvPage = "";
                        lblPageCount.Text = "";
                        cmbGvBook.DataSource = new DataTable();
                        cmbGVPrefix.DataSource = new DataTable();
                        cmbTopg.DataSource = new DataTable();
                        txtPgAmt.Text = "";
                        txtTotGvAmt.Text = "";
                        gbGVDet.Visible = false;
                        ClearCus_Data();
                        ClearSettle_Data();
                    }


                    #region OldCode
                    ////Commented by akila 2016/12/15
                    //if (txtRecType.Text == "DEBT")
                    //{
                    //    txtInvoice.Text = "";
                    //    txtBalance.Text = "0.00";
                    //    txtPayment.Text = "0.00";
                    //    txtInvoice.Enabled = true;
                    //    radioButtonManual.Checked = false;
                    //    radioButtonManual.Enabled = true;
                    //    chkDel.Checked = false;
                    //    chkDel.Enabled = false;
                    //    gbItem.Visible = false;
                    //    gbInsu.Visible = false;
                    //    gbsettle.Visible = true;
                    //    chkOth.Visible = true;
                    //    txtOthSR.Visible = true;
                    //    btnOthSR.Visible = true;
                    //    txtGVCode.Text = "";
                    //    lblFrompg.Text = "";
                    //    lblPageCount.Text = "";
                    //    cmbGvBook.DataSource = new DataTable();
                    //    cmbTopg.DataSource = new DataTable();
                    //    txtPgAmt.Text = "";
                    //    txtTotGvAmt.Text = "";
                    //    gbGVDet.Visible = false;
                    //    ClearCus_Data();
                    //    ClearSettle_Data();
                    //}
                    //else if (txtRecType.Text == "VHREG")
                    //{
                    //    txtInvoice.Text = "";
                    //    txtBalance.Text = "0.00";
                    //    txtPayment.Text = "0.00";
                    //    lblExtraChg.Text = "0.00";
                    //    txtInvoice.Enabled = true;
                    //    radioButtonManual.Checked = false;
                    //    radioButtonManual.Enabled = true;
                    //    chkDel.Checked = false;
                    //    chkDel.Enabled = true;
                    //    gbItem.Visible = true;
                    //    gbInsu.Visible = false;
                    //    gbsettle.Visible = true;
                    //    txtGVCode.Text = "";
                    //    lblFrompg.Text = "";
                    //    lblPageCount.Text = "";
                    //    cmbGvBook.DataSource = new DataTable();
                    //    cmbTopg.DataSource = new DataTable();
                    //    txtPgAmt.Text = "";
                    //    txtTotGvAmt.Text = "";
                    //    gbGVDet.Visible = false;
                    //    pnlExtraChg.Visible = true;
                    //    pnlQuo.Visible = true;
                    //    ClearCus_Data();
                    //    ClearSettle_Data();
                    //}
                    //else if (txtRecType.Text == "VHINS")
                    //{
                    //    txtInvoice.Text = "";
                    //    txtBalance.Text = "0.00";
                    //    txtPayment.Text = "0.00";
                    //    txtInvoice.Enabled = true;
                    //    radioButtonManual.Checked = false;
                    //    radioButtonManual.Enabled = true;
                    //    chkDel.Checked = false;
                    //    chkDel.Enabled = true;
                    //    gbItem.Visible = true;
                    //    gbInsu.Visible = true;
                    //    gbsettle.Visible = true;
                    //    txtGVCode.Text = "";
                    //    lblFrompg.Text = "";
                    //    lblPageCount.Text = "";
                    //    cmbGvBook.DataSource = new DataTable();
                    //    cmbTopg.DataSource = new DataTable();
                    //    txtPgAmt.Text = "";
                    //    txtTotGvAmt.Text = "";
                    //    gbGVDet.Visible = false;
                    //    pnlQuo.Visible = true;
                    //    ClearCus_Data();
                    //    ClearSettle_Data();
                    //    MasterOutsideParty _insCom = CHNLSVC.Sales.GetOutSidePartyDetails(null, "INS");
                    //    if (_insCom.Mbi_cd != null)
                    //    {
                    //        txtInsCom.Text = _insCom.Mbi_cd;
                    //    }
                    //    else
                    //    {
                    //        txtInsCom.Text = "";
                    //    }

                    //    InsuarancePolicy _insPol = CHNLSVC.Sales.GetInusPolicy(null);
                    //    if (_insPol.Svip_polc_cd != null)
                    //    {
                    //        txtInsPol.Text = _insPol.Svip_polc_cd;
                    //    }
                    //    else
                    //    {
                    //        txtInsPol.Text = "";
                    //    }

                    //}
                    //else if (txtRecType.Text == "ADINS")
                    //{
                    //    txtInvoice.Text = "";
                    //    txtBalance.Text = "0.00";
                    //    txtPayment.Text = "0.00";
                    //    txtInvoice.Enabled = true;
                    //    radioButtonManual.Checked = false;
                    //    radioButtonManual.Enabled = true;
                    //    chkDel.Checked = false;
                    //    chkDel.Enabled = false;
                    //    gbItem.Visible = true;
                    //    gbInsu.Visible = true;
                    //    gbsettle.Visible = true;
                    //    txtengine.Enabled = true;
                    //    txtChasis.Enabled = true;
                    //    txtGVCode.Text = "";
                    //    lblFrompg.Text = "";
                    //    lblPageCount.Text = "";
                    //    cmbGvBook.DataSource = new DataTable();
                    //    cmbTopg.DataSource = new DataTable();
                    //    txtPgAmt.Text = "";
                    //    txtTotGvAmt.Text = "";
                    //    gbGVDet.Visible = false;
                    //    ClearCus_Data();
                    //    ClearSettle_Data();
                    //    MasterOutsideParty _insCom = CHNLSVC.Sales.GetOutSidePartyDetails(null, "INS");
                    //    if (_insCom.Mbi_cd != null)
                    //    {
                    //        txtInsCom.Text = _insCom.Mbi_cd;
                    //    }
                    //    else
                    //    {
                    //        txtInsCom.Text = "";
                    //    }

                    //    InsuarancePolicy _insPol = CHNLSVC.Sales.GetInusPolicy(null);
                    //    if (_insPol.Svip_polc_cd != null)
                    //    {
                    //        txtInsPol.Text = _insPol.Svip_polc_cd;
                    //    }
                    //    else
                    //    {
                    //        txtInsPol.Text = "";
                    //    }

                    //}
                    //else if (txtRecType.Text == "ADVAN")
                    //{
                    //    loadPrifixes();
                    //    txtInvoice.Text = "";
                    //    txtBalance.Text = "0.00";
                    //    txtPayment.Text = "0.00";
                    //    txtInvoice.Enabled = false;
                    //    gbItem.Visible = true;
                    //    chkDel.Checked = false;
                    //    chkDel.Enabled = false;
                    //    gbInsu.Visible = false;
                    //    gbsettle.Visible = true;
                    //    pnlQuo.Visible = true;

                    //    if (BaseCls.GlbUserComCode == "AAL")
                    //    {
                    //        if (BaseCls.GlbUserDefProf != "500")
                    //        {
                    //            radioButtonManual.Checked = true;
                    //            radioButtonManual.Enabled = false;
                    //        }
                    //        else
                    //        {
                    //            radioButtonManual.Checked = false;
                    //            radioButtonManual.Enabled = true;
                    //        }
                    //    }
                    //    else
                    //    {

                    //        MasterProfitCenter _ctn = CHNLSVC.Sales.GetProfitCenter(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                    //        if (_ctn != null)
                    //        {
                    //            if (_ctn.Mpc_chnl != "MSR" && _ctn.Mpc_chnl != "TOT-SR" && _ctn.Mpc_chnl != "RTOT" && _ctn.Mpc_chnl != "ELITE" && _ctn.Mpc_chnl != "RMSR" && _ctn.Mpc_chnl != "AOA_CH" && _ctn.Mpc_chnl != "CLEARENCE_SALES" && _ctn.Mpc_chnl != "APPLE" && _ctn.Mpc_chnl != "RAPS" && _ctn.Mpc_chnl != "RCLS" && _ctn.Mpc_oth_ref != "SYS")
                    //            {
                    //                radioButtonManual.Checked = true;
                    //                //   radioButtonManual.Enabled = false;
                    //                txtManual.Text = "";        //kapila 6/4/2015
                    //                _bkNo = "";
                    //            }

                    //        }

                    //    }
                    //    txtGVCode.Text = "";
                    //    lblFrompg.Text = "";
                    //    lblPageCount.Text = "";
                    //    cmbGvBook.DataSource = new DataTable();
                    //    cmbTopg.DataSource = new DataTable();
                    //    txtPgAmt.Text = "";
                    //    txtTotGvAmt.Text = "";
                    //    gbGVDet.Visible = false;
                    //    ClearCus_Data();
                    //    ClearSettle_Data();
                    //    txtCusCode.Text = "CASH";
                    //}
                    //else if (txtRecType.Text == "TICKT")
                    //{
                    //    txtInvoice.Text = "";
                    //    txtBalance.Text = "0.00";
                    //    txtPayment.Text = "0.00";
                    //    txtInvoice.Enabled = false;
                    //    gbItem.Visible = false;
                    //    chkDel.Checked = false;
                    //    chkDel.Enabled = false;
                    //    gbInsu.Visible = false;
                    //    gbsettle.Visible = false;
                    //    pnlQuo.Visible = false;
                    //    pnlOth.Visible = true;
                    //    txtGVCode.Text = "";
                    //    lblFrompg.Text = "";
                    //    lblPageCount.Text = "";
                    //    cmbGvBook.DataSource = new DataTable();
                    //    cmbTopg.DataSource = new DataTable();
                    //    txtPgAmt.Text = "";
                    //    txtTotGvAmt.Text = "";
                    //    gbGVDet.Visible = false;
                    //    ClearCus_Data();
                    //    ClearSettle_Data();
                    //    txtCusCode.Text = "CASH";
                    //}
                    //else if (txtRecType.Text == "GVISU")
                    //{
                    //    if (BaseCls.GlbUserComCode == "AST")   //28/1/2016
                    //    {
                    //        //kapila
                    //        DataTable _dt = CHNLSVC.Financial.get_SignOn(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, BaseCls.GlbUserID, Convert.ToDateTime(dtpRecDate.Text));
                    //        if (_dt.Rows.Count == 0)
                    //        {
                    //            MessageBox.Show("Process Halted ! You have not sign on", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //            txtRecType.Text = "";
                    //            txtRecType.Focus();
                    //            return;
                    //        }
                    //    }
                    //    ClearCus_Data();
                    //    ClearSettle_Data();
                    //    if (!CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 10061))
                    //    {
                    //        chkAllowPromo.Checked = false;
                    //        chkAllowPromo.Visible = false;
                    //        chkGvFOC.Checked = false;
                    //        chkGvFOC.Visible = false;
                    //        dtGVExp.Visible = false;
                    //        lblGVExp.Visible = false;
                    //    }
                    //    else
                    //    {
                    //        chkAllowPromo.Checked = false;
                    //        chkAllowPromo.Visible = true;
                    //        chkGvFOC.Checked = false;
                    //        chkGvFOC.Visible = true;
                    //        dtGVExp.Visible = true;
                    //        lblGVExp.Visible = true;

                    //    }
                    //    txtGVCode.Text = "";
                    //    lblFrompg.Text = "";
                    //    lblPageCount.Text = "";
                    //    cmbGvBook.DataSource = new DataTable();
                    //    cmbTopg.DataSource = new DataTable();
                    //    txtPgAmt.Text = "";
                    //    txtTotGvAmt.Text = "";
                    //    gbsettle.Visible = false;
                    //    gbGVDet.Visible = true;
                    //    txtCusCode.Text = "CASH";
                    //}

                    //else
                    //{
                    //    txtInvoice.Text = "";
                    //    txtBalance.Text = "0.00";
                    //    txtPayment.Text = "0.00";
                    //    txtInvoice.Enabled = false;
                    //    radioButtonManual.Checked = false;
                    //    radioButtonManual.Enabled = true;
                    //    chkDel.Checked = false;
                    //    chkDel.Enabled = false;
                    //    gbInsu.Visible = false;
                    //    gbItem.Visible = false;
                    //    gbsettle.Visible = true;
                    //    txtGVCode.Text = "";
                    //    lblFrompg.Text = "";
                    //    lblPageCount.Text = "";
                    //    cmbGvBook.DataSource = new DataTable();
                    //    cmbTopg.DataSource = new DataTable();
                    //    txtPgAmt.Text = "";
                    //    txtTotGvAmt.Text = "";
                    //    gbGVDet.Visible = false;
                    //    ClearCus_Data();
                    //    ClearSettle_Data();
                    //}
                    #endregion

                    //ucPayModes1.InvoiceType = txtRecType.Text.Trim();
                    //ucPayModes1.LoadData();
                }

                //MasterReceiptDivision _RecDiv = new MasterReceiptDivision();
                //_RecDiv = CHNLSVC.Sales.GetDefRecDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                //if (_RecDiv.Msrd_cd != null)
                //{
                //    txtDivision.Text = _RecDiv.Msrd_cd;
                //}
                //else
                //{
                //    txtDivision.Text = "";
                //}
            }
        }

        private void cmbDistrict_SelectedIndexChanged(object sender, EventArgs e)
        {
            GetProvince();
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                #region validation1

                //Add by akila 2017/01/04
                if (string.IsNullOrEmpty(txtRecType.Text))
                {
                    MessageBox.Show("Receipt type cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtRecType.Focus();
                    return;
                }


                if (CheckServerDateTime() == false) return;

                if (MessageBox.Show("Do you want to save this Receipt ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
                { return; }

                if (string.IsNullOrEmpty(txtCusCode.Text))
                {
                    MessageBox.Show("Please select customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtCusCode.Text = "";
                    txtCusCode.Focus();
                    return;
                }

                if (ucPayModes1.Balance != 0)
                {
                    MessageBox.Show("Payment not completed.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if (string.IsNullOrEmpty(txtRecType.Text))
                {
                    MessageBox.Show("Receipt type is missing.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtRecType.Focus();
                    return;
                }

                if (string.IsNullOrEmpty(txtDivision.Text))
                {
                    MessageBox.Show("Receipt division is missing.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtDivision.Focus();
                    return;
                }

                if (!CHNLSVC.Sales.IsValidDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtDivision.Text.Trim()))
                {
                    MessageBox.Show("Invalid division.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtDivision.Text = "";
                    txtDivision.Focus();
                    return;
                }

                if (radioButtonManual.Checked == true)
                {
                    if (string.IsNullOrEmpty(txtManual.Text))
                    {
                        MessageBox.Show("Please enter manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtManual.Text = "";
                        txtManual.Focus();
                        return;
                    }

                    Boolean _IsValid = CHNLSVC.Inventory.IsValidManualDocument_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
                    if (_IsValid == false)
                    {
                        MessageBox.Show("Invalid manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtManual.Text = "";
                        txtManual.Focus();
                        return;
                    }

                    RecieptHeader rh = new RecieptHeader();
                    rh = CHNLSVC.Sales.Check_ManRef_Rec_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecType.Text.Trim(), txtManual.Text.Trim(), comboBoxPrefix.Text);
                    if (rh != null)
                    {
                        MessageBox.Show("Receipt number : " + txtManual.Text + " already used.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtManual.Text = "";
                        txtManual.Focus();
                        return;
                    }

                    //kapila 25/4/2016
                    _bkNo = "";
                    DataTable _dtBk = CHNLSVC.Inventory.GetManualDocBookNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
                    if (_dtBk.Rows.Count > 0) _bkNo = _dtBk.Rows[0]["mdd_bk_no"].ToString();
                }

                if (dgvItem.Rows.Count > 0)
                {
                    if (MessageBox.Show("Confirm the items which you select is correct.?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No)
                    {
                        return;
                    }
                }


                if (ucPayModes1.MainGrid.Rows.Count == 0)
                {
                    MessageBox.Show("Payments are not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                decimal _wkNo = 0;
                int _weekNo = CHNLSVC.General.GetWeek(Convert.ToDateTime(dtpRecDate.Value).Date, out _wkNo, BaseCls.GlbUserComCode);
                if (_weekNo == 0)
                {
                    MessageBox.Show("Week Definition is still not setup for current date.Please contact retail accounts dept.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                bool _allowCurrentTrans = false;
                if (IsAllowBackDateForModule(BaseCls.GlbUserComCode, string.Empty, BaseCls.GlbUserDefProf, this.GlbModuleName, dtpRecDate, lblBackDateInfor, dtpRecDate.Value.Date.ToString(), out _allowCurrentTrans) == false)
                {
                    if (_allowCurrentTrans == true)
                    {
                        if (dtpRecDate.Value.Date != DateTime.Now.Date)
                        {
                            dtpRecDate.Enabled = true;
                            MessageBox.Show("Back date not allow for selected date!", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            dtpRecDate.Focus();
                            return;
                        }
                    }
                    else
                    {
                        dtpRecDate.Enabled = true;
                        MessageBox.Show("Back date not allow for selected date!", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        dtpRecDate.Focus();
                        return;
                    }
                }

                if (_isRes == true)
                {
                    if ((txtRecType.Text == "ADVAN") || (txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS"))
                    {
                        foreach (ReptPickSerials line in _ResList)
                        {
                            ReptPickSerials _tempItem = new ReptPickSerials();
                            _tempItem = CHNLSVC.Inventory.GetAvailableSerIDInformation(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, line.Tus_itm_cd, line.Tus_ser_1, string.Empty, string.Empty);

                            if (_tempItem.Tus_itm_cd == null)
                            {
                                MessageBox.Show("Selected serial not available in inventory.Please check.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                        }
                    }
                }
                #endregion

                
                #region validation2

                if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if (!string.IsNullOrEmpty(TxtAdvItem.Text))
                    {
                        decimal _shouldPay = 0;
                        for (int i = 0; i < dgvItem.Rows.Count; i++)
                        {

                            if (dgvItem.Rows[i].Cells[11].Value.ToString() == TxtAdvItem.Text)
                            {
                                _shouldPay = _shouldPay + Convert.ToDecimal(dgvItem.Rows[i].Cells[11].Value.ToString());
                            }

                            if (Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text) < _shouldPay)
                            {
                                MessageBox.Show("Amount should not be lesser than the item value.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                txtPayment.Text = _shouldPay.ToString("n"); ;
                                txtPayment.Focus();
                                return;
                            }
                        }
                    }

                    if (string.IsNullOrEmpty(comboBoxPrefix.Text))
                    {
                        MessageBox.Show("Please enter prefix.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        comboBoxPrefix.Focus();
                        return;
                    }

                    //Commented by Akila 2017/01/04
                    //if (_minDPRate > 0)
                    //{
                    //    if (string.IsNullOrEmpty(txtQuoNo.Text))
                    //    {
                    //        MessageBox.Show("Please select the quotation number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //        return;
                    //    }
                    //    else
                    //    {
                    //        decimal _val = 0;
                    //        Int32 _a = CHNLSVC.Financial.GetQuotationTotal(txtQuoNo.Text, out _val);
                    //        if (Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text) < (_val / 100 * _minDPRate))
                    //        {
                    //            MessageBox.Show("Receipt values must be greater than minimum D/P Amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //            return;
                    //        }

                    //    }
                    //}

                    if (txtCusCode.Text == "CASH")
                    {
                        MessageBox.Show("Customer Code cannot be CASH", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtCusCode.Text = "";
                        txtCusCode.Focus();
                        return;
                    }

                    if (radioButtonSystem.Checked == true)
                    {
                        if (string.IsNullOrEmpty(txtManual.Text))
                        {
                            MessageBox.Show("Please enter manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtManual.Text = "";
                            txtManual.Focus();
                            return;
                        }

                        Boolean _IsValid = CHNLSVC.Inventory.IsValidManualDocument_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "SDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
                        if (_IsValid == false)
                        {
                            MessageBox.Show("Invalid manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtManual.Text = "";
                            txtManual.Focus();
                            return;
                        }

                        RecieptHeader rh = new RecieptHeader();
                        rh = CHNLSVC.Sales.Check_ManRef_Rec_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecType.Text.Trim(), txtManual.Text.Trim(), comboBoxPrefix.Text);

                        if (rh != null)
                        {
                            MessageBox.Show("Receipt number : " + txtManual.Text + " already used.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtManual.Text = "";
                            txtManual.Focus();
                            return;
                        }

                        _bkNo = "";
                        DataTable _dtBk = CHNLSVC.Inventory.GetManualDocBookNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "SDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
                        if (_dtBk.Rows.Count > 0) _bkNo = _dtBk.Rows[0]["mdd_bk_no"].ToString();
                    }

                    if (!string.IsNullOrEmpty(txtItem.Text))
                    {
                        MessageBox.Show("Please add item before save receipt.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtItem.Focus();
                        return;
                    }

                }
                else if (txtRecType.Text == "VHREG")
                {
                    if (dgvReg.Rows.Count <= 0)
                    {
                        MessageBox.Show("Registration details are not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    if (chk_Freereg.Checked == true) _vehRegUsedTimes = 0;
                    if (_vehRegTimes == _vehRegUsedTimes)
                    {
                        MessageBox.Show("Registration details are reached the maximum limit.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                }
                else if (txtRecType.Text == "VHINS")
                {
                    if (dgvIns.Rows.Count <= 0)
                    {
                        MessageBox.Show("insuarance details are not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                }
                else if (txtRecType.Text == "ADINS")
                {
                    if (dgvIns.Rows.Count <= 0)
                    {
                        MessageBox.Show("insuarance details are not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                }
                else if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") || (txtRecType.Text == "TNSPT"))
                {
                    MasterBusinessEntity _busEntity = new MasterBusinessEntity();
                    _busEntity = CHNLSVC.Sales.GetBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCusCode.Text.Trim(), string.Empty, string.Empty, "C");
                    if (_busEntity.Mbe_cd != null)
                    {
                        if (_busEntity.Mbe_ins_man == 1)
                        {
                            if (string.IsNullOrEmpty(txtQuoNo.Text))
                            {
                                MessageBox.Show("Please select the customer quotation.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                        }
                    }
                }
                else if (txtRecType.Text == "DEBT")
                {
                    Decimal _Balance = 0;
                    Decimal _minCommAllow = 0;
                    Decimal _maxDaysAllow = 0;
                    HpSystemParameters _getSystemParameter = new HpSystemParameters();

                    _getSystemParameter = CHNLSVC.Sales.GetSystemParameter("COM", BaseCls.GlbUserComCode, "COMIGNORE", Convert.ToDateTime(dtpRecDate.Text).Date);

                    if (_getSystemParameter.Hsy_cd != null)
                        _maxDaysAllow = _getSystemParameter.Hsy_val;
                    else
                        _maxDaysAllow = -1;

                    if (_maxDaysAllow != -1)    //record found in hpr_sys_para table
                    {
                        if (chkOth.Checked == true)
                            _Balance = CHNLSVC.Sales.GetOutInvAmt(BaseCls.GlbUserComCode, txtOthSR.Text, txtCusCode.Text.Trim(), _invNo);
                        else
                            _Balance = CHNLSVC.Sales.GetOutInvAmt(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text.Trim(), _invNo);

                        _getSystemParameter = CHNLSVC.Sales.GetSystemParameter("COM", BaseCls.GlbUserComCode, "CRCOMMINAW", Convert.ToDateTime(dtpRecDate.Text).Date);

                        if (_getSystemParameter.Hsy_cd != null)
                            _minCommAllow = _getSystemParameter.Hsy_val;
                        else
                            _minCommAllow = 0;

                        if ((_Balance - Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text)) <= _minCommAllow)
                        {
                            //check whether registration is done
                            List<VehicalRegistration> _preReg = new List<VehicalRegistration>();
                            _preReg = CHNLSVC.General.GetVehiclesByInvoiceNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _invNo);

                            if (_preReg != null)
                            {
                                decimal _count = _preReg.Where(x => x.P_svrt_prnt_stus != 2).Count();
                                if (_count == 0)
                                {
                                    if (MessageBox.Show("Commission is not calculated \n Reason: Registration is not available. \n Are you sure ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
                                    { return; }
                                }
                                else
                                {
                                    DataTable _dtInvDt = CHNLSVC.Sales.GetSalesHdr(_invNo);
                                    Int32 _days = Convert.ToInt32((Convert.ToDateTime(_dtInvDt.Rows[0]["sah_dt"]) - _preReg[0].P_svrt_reg_dt).TotalDays);
                                    if (_days > _maxDaysAllow)
                                    {
                                        if (MessageBox.Show("Commission is not calculated \n Reason: Registration is done after the allow period. \n Are you sure ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
                                        { return; }
                                    }
                                }
                            }
                            else
                            {
                                if (MessageBox.Show("Commission is not calculated \n Reason: Registration is not available. \n Are you sure ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
                                { return; }
                            }
                        }
                    }
                }
                #endregion

                #region validation3
                if (chklaunchparticipate.Checked == true)
                {
                    Boolean _isValid = IsValidMobileOrLandNo(txtMobile.Text.Trim());

                    if (_isValid == false)
                    {
                        MessageBox.Show("Invalid mobile number.", "Receipt entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        chklaunchparticipate.Checked = false;
                        return;
                    }

                    Boolean _isValidEmail = IsValidEmail(lblCusEmail.Text.Trim());

                    if (_isValidEmail == false)
                    {
                        MessageBox.Show("Invalid email address.", "Customer Creation", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        chklaunchparticipate.Checked = false;
                        return;
                    }
                }
                #endregion


                //add by akila 2017/01/04
                if ((_minDPRate > 0) && (txtRecType.Text != MstRecSubTp.ReceiptTypes.ADVAN.ToString()))
                {
                    if (string.IsNullOrEmpty(txtQuoNo.Text))
                    {
                        MessageBox.Show("Please select the quotation number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    else
                    {
                        decimal _val = 0;
                        Int32 _a = CHNLSVC.Financial.GetQuotationTotal(txtQuoNo.Text, out _val);
                        if (Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text) < (_val / 100 * _minDPRate))
                        {
                            MessageBox.Show("Receipt values must be greater than minimum D/P Amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }

                    }
                }

                if (txtRecType.Text.ToUpper() == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if (string.IsNullOrEmpty(txtSubReceiptTp.Text))
                    {
                        MessageBox.Show("Sub receipt type cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtSubReceiptTp.Focus();
                        return;
                    }

                    if (!IsValidReceiptDetails(txtSubReceiptTp.Text))
                    {
                        return;
                    }

                }

                btnSave.Enabled = false;
                SaveReceiptHeader();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Process Terminated", MessageBoxButtons.OK, MessageBoxIcon.Information);
                CHNLSVC.CloseChannel();
                return;
            }

            ////Commented by akila 2016/12/20
            #region oldCode
            //try
            //{
            //    if (CheckServerDateTime() == false) return;


            //    if (MessageBox.Show("Do you want to save this Receipt ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
            //    { return; }



            //    if (string.IsNullOrEmpty(txtCusCode.Text))
            //    {
            //        MessageBox.Show("Please select customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //        txtCusCode.Text = "";
            //        txtCusCode.Focus();
            //        return;
            //    }

            //    if (ucPayModes1.Balance != 0)
            //    {
            //        MessageBox.Show("Payment not completed.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //        return;
            //    }

            //    if (string.IsNullOrEmpty(txtRecType.Text))
            //    {
            //        MessageBox.Show("Receipt type is missing.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //        txtRecType.Focus();
            //        return;
            //    }

            //    if (string.IsNullOrEmpty(txtDivision.Text))
            //    {
            //        MessageBox.Show("Receipt division is missing.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //        txtDivision.Focus();
            //        return;
            //    }

            //    if (!CHNLSVC.Sales.IsValidDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtDivision.Text.Trim()))
            //    {
            //        MessageBox.Show("Invalid division.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //        txtDivision.Text = "";
            //        txtDivision.Focus();
            //        return;
            //    }


            //    decimal _shouldPay = 0;
            //    if (txtRecType.Text == "ADVAN")
            //    {
            //        if (!string.IsNullOrEmpty(TxtAdvItem.Text))
            //        {
            //            for (int i = 0; i < dgvItem.Rows.Count; i++)
            //            {

            //                if (dgvItem.Rows[i].Cells[11].Value.ToString() == TxtAdvItem.Text)
            //                {
            //                    _shouldPay = _shouldPay + Convert.ToDecimal(dgvItem.Rows[i].Cells[11].Value.ToString());
            //                }

            //                if (Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text) < _shouldPay)
            //                {
            //                    MessageBox.Show("Amount should not be lesser than the item value.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //                    txtPayment.Text = _shouldPay.ToString("n"); ;
            //                    txtPayment.Focus();
            //                    return;
            //                }
            //            }
            //        }

            //        if (string.IsNullOrEmpty(comboBoxPrefix.Text))
            //        {
            //            MessageBox.Show("Please enter prefix.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //            comboBoxPrefix.Focus();
            //            return;
            //        }
            //        if (_minDPRate > 0)
            //        {
            //            if (string.IsNullOrEmpty(txtQuoNo.Text))
            //            {
            //                MessageBox.Show("Please select the quotation number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //                return;
            //            }
            //            else
            //            {
            //                decimal _val = 0;
            //                Int32 _a = CHNLSVC.Financial.GetQuotationTotal(txtQuoNo.Text, out _val);
            //                if (Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text) < (_val / 100 * _minDPRate))
            //                {
            //                    MessageBox.Show("Receipt values must be greater than minimum D/P Amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //                    return;
            //                }

            //            }
            //        }
            //    }

            //    if (radioButtonManual.Checked == true)
            //    {
            //        if (string.IsNullOrEmpty(txtManual.Text))
            //        {
            //            MessageBox.Show("Please enter manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //            txtManual.Text = "";
            //            txtManual.Focus();
            //            return;
            //        }

            //        Boolean _IsValid = CHNLSVC.Inventory.IsValidManualDocument_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
            //        if (_IsValid == false)
            //        {
            //            MessageBox.Show("Invalid manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //            txtManual.Text = "";
            //            txtManual.Focus();
            //            return;
            //        }

            //        RecieptHeader rh = new RecieptHeader();
            //        rh = CHNLSVC.Sales.Check_ManRef_Rec_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecType.Text.Trim(), txtManual.Text.Trim(), comboBoxPrefix.Text);

            //        if (rh != null)
            //        {
            //            MessageBox.Show("Receipt number : " + txtManual.Text + " already used.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //            txtManual.Text = "";
            //            txtManual.Focus();
            //            return;
            //        }

            //        //kapila 25/4/2016
            //        _bkNo = "";
            //        DataTable _dtBk = CHNLSVC.Inventory.GetManualDocBookNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
            //        if (_dtBk.Rows.Count > 0) _bkNo = _dtBk.Rows[0]["mdd_bk_no"].ToString();
            //    }

            //    if (txtRecType.Text == "ADVAN")
            //    {
            //        //kapila 2/11/2016
            //        if (txtCusCode.Text == "CASH")
            //        {
            //            MessageBox.Show("Customer Code cannot be CASH", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //            txtCusCode.Text = "";
            //            txtCusCode.Focus();
            //            return;
            //        }
            //        if (radioButtonSystem.Checked == true)
            //        {
            //            if (string.IsNullOrEmpty(txtManual.Text))
            //            {
            //                MessageBox.Show("Please enter manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                txtManual.Text = "";
            //                txtManual.Focus();
            //                return;
            //            }

            //            Boolean _IsValid = CHNLSVC.Inventory.IsValidManualDocument_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "SDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
            //            if (_IsValid == false)
            //            {
            //                MessageBox.Show("Invalid manual document number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                txtManual.Text = "";
            //                txtManual.Focus();
            //                return;
            //            }

            //            RecieptHeader rh = new RecieptHeader();
            //            rh = CHNLSVC.Sales.Check_ManRef_Rec_prefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecType.Text.Trim(), txtManual.Text.Trim(), comboBoxPrefix.Text);

            //            if (rh != null)
            //            {
            //                MessageBox.Show("Receipt number : " + txtManual.Text + " already used.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                txtManual.Text = "";
            //                txtManual.Focus();
            //                return;
            //            }
            //            //kapila 25/4/2016
            //            _bkNo = "";
            //            DataTable _dtBk = CHNLSVC.Inventory.GetManualDocBookNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "SDOC_AVREC", Convert.ToInt32(txtManual.Text), comboBoxPrefix.Text);
            //            if (_dtBk.Rows.Count > 0) _bkNo = _dtBk.Rows[0]["mdd_bk_no"].ToString();
            //        }

            //        //if (txtRecType.Text == "ADVAN")
            //        //  {

            //        //if (string.IsNullOrEmpty(comboBoxPrefix.Text))
            //        //{
            //        //    MessageBox.Show("Please enter prefix.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //        //    comboBoxPrefix.Focus();
            //        //    return;
            //        //}

            //        if (!string.IsNullOrEmpty(txtItem.Text))
            //        {
            //            MessageBox.Show("Please add item before save receipt.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //            txtItem.Focus();
            //            return;
            //        }

            //        List<Hpr_SysParameter> para = CHNLSVC.Sales.GetAll_hpr_Para("ADREFMAXDT", "COM", BaseCls.GlbUserComCode);

            //        if (para.Count <= 0)
            //        {
            //            MessageBox.Show("system parameter not setup for Advance receipt valid period.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //            return;
            //        }


            //    }

            //    if (dgvItem.Rows.Count > 0)
            //    {
            //        if (MessageBox.Show("Confirm the items which you select is correct.?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No)
            //        {
            //            return;
            //        }
            //    }


            //    if (ucPayModes1.MainGrid.Rows.Count == 0)
            //    {
            //        MessageBox.Show("Payments are not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //        return;
            //    }

            //    if (txtRecType.Text == "VHREG")
            //    {
            //        if (dgvReg.Rows.Count <= 0)
            //        {
            //            MessageBox.Show("Registration details are not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //            return;
            //        }
            //        if (chk_Freereg.Checked == true) _vehRegUsedTimes = 0;
            //        if (_vehRegTimes == _vehRegUsedTimes)
            //        {
            //            MessageBox.Show("Registration details are reached the maximum limit.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //            return;
            //        }
            //    }
            //    else if (txtRecType.Text == "VHINS")
            //    {
            //        if (dgvIns.Rows.Count <= 0)
            //        {
            //            MessageBox.Show("insuarance details are not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //            return;
            //        }
            //    }
            //    else if (txtRecType.Text == "ADINS")
            //    {
            //        if (dgvIns.Rows.Count <= 0)
            //        {
            //            MessageBox.Show("insuarance details are not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //            return;
            //        }
            //    }
            //    //KAPILA  8/1/2016
            //    else if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS"))
            //    {
            //        MasterBusinessEntity _busEntity = new MasterBusinessEntity();
            //        _busEntity = CHNLSVC.Sales.GetBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCusCode.Text.Trim(), string.Empty, string.Empty, "C");
            //        if (_busEntity.Mbe_cd != null)
            //        {
            //            if (_busEntity.Mbe_ins_man == 1)
            //            {
            //                if (string.IsNullOrEmpty(txtQuoNo.Text))
            //                {
            //                    MessageBox.Show("Please select the customer quotation.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //                    return;
            //                }
            //            }
            //        }
            //    }
            //    //kapila 28/7/2015
            //    else if (txtRecType.Text == "DEBT")
            //    {
            //        Decimal _Balance = 0;
            //        Decimal _minCommAllow = 0;
            //        Decimal _maxDaysAllow = 0;
            //        HpSystemParameters _getSystemParameter = new HpSystemParameters();

            //        _getSystemParameter = CHNLSVC.Sales.GetSystemParameter("COM", BaseCls.GlbUserComCode, "COMIGNORE", Convert.ToDateTime(dtpRecDate.Text).Date);

            //        if (_getSystemParameter.Hsy_cd != null)
            //            _maxDaysAllow = _getSystemParameter.Hsy_val;
            //        else
            //            _maxDaysAllow = -1;

            //        if (_maxDaysAllow != -1)    //record found in hpr_sys_para table
            //        {
            //            if (chkOth.Checked == true)
            //                _Balance = CHNLSVC.Sales.GetOutInvAmt(BaseCls.GlbUserComCode, txtOthSR.Text, txtCusCode.Text.Trim(), _invNo);
            //            else
            //                _Balance = CHNLSVC.Sales.GetOutInvAmt(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text.Trim(), _invNo);

            //            _getSystemParameter = CHNLSVC.Sales.GetSystemParameter("COM", BaseCls.GlbUserComCode, "CRCOMMINAW", Convert.ToDateTime(dtpRecDate.Text).Date);

            //            if (_getSystemParameter.Hsy_cd != null)
            //                _minCommAllow = _getSystemParameter.Hsy_val;
            //            else
            //                _minCommAllow = 0;

            //            if ((_Balance - Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text)) <= _minCommAllow)
            //            {
            //                //check whether registration is done
            //                List<VehicalRegistration> _preReg = new List<VehicalRegistration>();
            //                _preReg = CHNLSVC.General.GetVehiclesByInvoiceNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _invNo);

            //                if (_preReg != null)
            //                {
            //                    decimal _count = _preReg.Where(x => x.P_svrt_prnt_stus != 2).Count();
            //                    if (_count == 0)
            //                    {
            //                        if (MessageBox.Show("Commission is not calculated \n Reason: Registration is not available. \n Are you sure ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
            //                        { return; }
            //                    }
            //                    else
            //                    {
            //                        DataTable _dtInvDt = CHNLSVC.Sales.GetSalesHdr(_invNo);
            //                        Int32 _days = Convert.ToInt32((Convert.ToDateTime(_dtInvDt.Rows[0]["sah_dt"]) - _preReg[0].P_svrt_reg_dt).TotalDays);
            //                        if (_days > _maxDaysAllow)
            //                        {
            //                            if (MessageBox.Show("Commission is not calculated \n Reason: Registration is done after the allow period. \n Are you sure ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
            //                            { return; }
            //                        }
            //                    }
            //                }
            //                else
            //                {
            //                    if (MessageBox.Show("Commission is not calculated \n Reason: Registration is not available. \n Are you sure ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
            //                    { return; }
            //                }
            //            }
            //        }
            //    }

            //    decimal _wkNo = 0;
            //    int _weekNo = CHNLSVC.General.GetWeek(Convert.ToDateTime(dtpRecDate.Value).Date, out _wkNo, BaseCls.GlbUserComCode);

            //    if (_weekNo == 0)
            //    {
            //        MessageBox.Show("Week Definition is still not setup for current date.Please contact retail accounts dept.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //        return;
            //    }
            //    bool _allowCurrentTrans = false;
            //    if (IsAllowBackDateForModule(BaseCls.GlbUserComCode, string.Empty, BaseCls.GlbUserDefProf, this.GlbModuleName, dtpRecDate, lblBackDateInfor, dtpRecDate.Value.Date.ToString(), out _allowCurrentTrans) == false)
            //    {
            //        if (_allowCurrentTrans == true)
            //        {
            //            if (dtpRecDate.Value.Date != DateTime.Now.Date)
            //            {
            //                dtpRecDate.Enabled = true;
            //                MessageBox.Show("Back date not allow for selected date!", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                dtpRecDate.Focus();
            //                return;
            //            }
            //        }
            //        else
            //        {
            //            dtpRecDate.Enabled = true;
            //            MessageBox.Show("Back date not allow for selected date!", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //            dtpRecDate.Focus();
            //            return;
            //        }
            //    }

            //    if (_isRes == true)
            //    {
            //        if ((txtRecType.Text == "ADVAN") || (txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS"))
            //        {
            //            foreach (ReptPickSerials line in _ResList)
            //            {
            //                ReptPickSerials _tempItem = new ReptPickSerials();
            //                _tempItem = CHNLSVC.Inventory.GetAvailableSerIDInformation(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, line.Tus_itm_cd, line.Tus_ser_1, string.Empty, string.Empty);

            //                if (_tempItem.Tus_itm_cd == null)
            //                {
            //                    MessageBox.Show("Selected serial not available in inventory.Please check.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //                    return;
            //                }
            //            }
            //        }
            //    }

            //    Decimal _needItem = 0;
            //    if (txtRecType.Text == "ADVAN")// Nadeeka 11-11-2015
            //    {
            //        List<Hpr_SysParameter> para = CHNLSVC.Sales.GetAll_hpr_Para("RECITMNEED", "CHNL", BaseCls.GlbDefChannel);
            //        if (para.Count > 0)
            //        {
            //            _needItem = para[0].Hsy_val;
            //        }


            //        if (_needItem > 0 && dgvItem.Rows.Count == 0)
            //        {
            //            MessageBox.Show("Items must be entered for this advance receipt.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //            return;
            //        }
            //    }

            //    btnSave.Enabled = false;
            //    SaveReceiptHeader();
            //}

            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.Message, "Process Terminated", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //    CHNLSVC.CloseChannel();
            //    return;
            //}
            #endregion
        }

        private void SaveReceiptHeader()
        {
            Int32 row_aff = 0;
            string _msg = string.Empty;
            //decimal _valPd = 0;

            //Add by Akila 2016/12/23
            string _subReceiptType = string.Empty;
            decimal _receiptValidPeriod = 0;
            decimal _refundValidPeriod = 0;
            decimal _priceValidPeriod = 0;

            ReptPickHeader _SerHeader = new ReptPickHeader();
            List<ReptPickSerials> _tempSerialSave = new List<ReptPickSerials>();
            List<VehicalRegistration> _tempRegSave = new List<VehicalRegistration>();
            List<VehicleInsuarance> _tempInsSave = new List<VehicleInsuarance>();
            RecieptHeader _ReceiptHeader = new RecieptHeader();

            try
            {
                if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if (ReceiptSettingList.Count > 0)
                    {
                        foreach (MstRecSubTp _setting in ReceiptSettingList)
                        {
                            _subReceiptType = _setting.SubReceiptCode;
                            _receiptValidPeriod = _setting.SettelmentPeriod;
                            _refundValidPeriod = _setting.RefundablePeriod;
                            _priceValidPeriod = _setting.PriceValidPeriod;
                        }
                    }
                }

                if (txtRecType.Text == "ADINS")
                {
                    List<Hpr_SysParameter> para = CHNLSVC.Sales.GetAll_hpr_Para("ADINREMXDT", "COM", BaseCls.GlbUserComCode);
                    if (para.Count > 0) { _receiptValidPeriod = para[0].Hsy_val; }
                }

                _ReceiptHeader.Sar_seq_no = CHNLSVC.Inventory.GetSerialID(); //CHNLSVC.Inventory.Generate_new_seq_num(GlbUserName, "RECEIPT", 1, BaseCls.GlbUserComCode);
                _ReceiptHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                _ReceiptHeader.Sar_receipt_type = txtRecType.Text.Trim();
                _ReceiptHeader.Sar_receipt_no = _ReceiptHeader.Sar_seq_no.ToString();// txtRecNo.Text.Trim();
                _ReceiptHeader.Sar_subrec_tp = _subReceiptType;

                if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    _ReceiptHeader.Sar_prefix = comboBoxPrefix.SelectedValue.ToString();
                    _ReceiptHeader.Sar_acc_no = txtInvoice.Text;
                }
                else
                {
                    _ReceiptHeader.Sar_prefix = txtDivision.Text.Trim();
                    _ReceiptHeader.Sar_acc_no = "";
                }

                if (string.IsNullOrEmpty(txtManual.Text)) { txtManual.Text = "0"; }
                else { _ReceiptHeader.Sar_manual_ref_no = txtManual.Text.Trim(); _ReceiptHeader.SAR_BK_NO = _bkNo; }

                //kapila 15/12/2016
                if (txtRecType.Text == "GVISU") { _ReceiptHeader.Sar_manual_ref_no = _gvPage; _ReceiptHeader.Sar_prefix = _gvPrefix; }

                _ReceiptHeader.Sar_receipt_date = Convert.ToDateTime(dtpRecDate.Text).Date;
                _ReceiptHeader.Sar_direct = true;



                if (chkOth.Checked == true)
                {
                    _ReceiptHeader.Sar_is_oth_shop = true;
                    _ReceiptHeader.Sar_oth_sr = txtOthSR.Text;
                }
                else
                {
                    _ReceiptHeader.Sar_is_oth_shop = false;
                    _ReceiptHeader.Sar_oth_sr = "";
                }

                _ReceiptHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                _ReceiptHeader.Sar_debtor_cd = txtCusCode.Text.Trim();
                _ReceiptHeader.Sar_debtor_name = txtCusName.Text.Trim();
                _ReceiptHeader.Sar_debtor_add_1 = txtCusAdd1.Text.Trim();
                _ReceiptHeader.Sar_debtor_add_2 = txtCusAdd2.Text.Trim();
                _ReceiptHeader.Sar_tel_no = "";
                _ReceiptHeader.Sar_mob_no = txtMobile.Text.Trim();
                _ReceiptHeader.Sar_nic_no = txtNIC.Text.Trim();
                _ReceiptHeader.Sar_tot_settle_amt = Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text);
                _ReceiptHeader.Sar_comm_amt = 0;
                _ReceiptHeader.Sar_is_mgr_iss = false;
                _ReceiptHeader.Sar_esd_rate = 0;
                _ReceiptHeader.Sar_wht_rate = 0;
                _ReceiptHeader.Sar_epf_rate = 0;
                _ReceiptHeader.Sar_currency_cd = "LKR";
                _ReceiptHeader.Sar_uploaded_to_finance = false;
                _ReceiptHeader.Sar_act = true;
                _ReceiptHeader.Sar_direct_deposit_bank_cd = "";
                _ReceiptHeader.Sar_direct_deposit_branch = "";
                _ReceiptHeader.Sar_remarks = txtNote.Text.Trim();
                _ReceiptHeader.Sar_is_used = false;
                _ReceiptHeader.Sar_loc = BaseCls.GlbUserDefLoca;
                if (txtRecType.Text == "ADVAN") { _ReceiptHeader.Sar_ref_doc = txtDivision.Text.Trim(); }
                else { _ReceiptHeader.Sar_ref_doc = ""; }

                //kapila 11/1/2016
                if (_minDPRate > 0)
                    _ReceiptHeader.Sar_ser_job_no = txtQuoNo.Text;
                else
                    _ReceiptHeader.Sar_ser_job_no = "";

                _ReceiptHeader.Sar_used_amt = 0;
                _ReceiptHeader.Sar_create_by = BaseCls.GlbUserID;
                _ReceiptHeader.Sar_mod_by = BaseCls.GlbUserID;
                _ReceiptHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                _ReceiptHeader.Sar_anal_1 = cmbDistrict.Text;
                _ReceiptHeader.Sar_anal_2 = txtProvince.Text.Trim();

                if (chk_Freereg.Checked == true)//Sanjeewa 2016-08-14
                {
                    _ReceiptHeader.SAR_FREE_REG = 1;
                    _ReceiptHeader.Sar_ser_job_no = txtCusCode.Text.Trim();
                }

                //kapila 10/11/2016
                if (!string.IsNullOrEmpty(txtJobNo.Text)) { _ReceiptHeader.Sar_ser_job_no = txtJobNo.Text; }

                if (radioButtonManual.Checked == true)
                {
                    _ReceiptHeader.Sar_anal_3 = "MANUAL";
                    _ReceiptHeader.Sar_anal_8 = 1;
                }
                else
                {
                    _ReceiptHeader.Sar_anal_3 = "SYSTEM";
                    _ReceiptHeader.Sar_anal_8 = 0;
                }

                _ReceiptHeader.Sar_anal_4 = txtSalesEx.Text;
                _ReceiptHeader.Sar_anal_5 = 0;
                _ReceiptHeader.Sar_anal_6 = 0;
                _ReceiptHeader.Sar_anal_7 = 0;
                _ReceiptHeader.Sar_anal_9 = 0;
                _ReceiptHeader.SAR_VALID_TO = _ReceiptHeader.Sar_receipt_date.AddDays(Convert.ToDouble(_receiptValidPeriod));

                if (_refundValidPeriod > 0) _ReceiptHeader.Sar_refund_validto = _ReceiptHeader.Sar_receipt_date.AddDays(Convert.ToDouble(_refundValidPeriod)); else _ReceiptHeader.Sar_refund_validto = null;

                if (_priceValidPeriod > 0) _ReceiptHeader.Sar_itmpr_validto = _ReceiptHeader.Sar_receipt_date.AddDays(Convert.ToDouble(_priceValidPeriod)); else _ReceiptHeader.Sar_itmpr_validto = null;

                //_ReceiptHeader.Sar_refund_validto = _ReceiptHeader.Sar_receipt_date.AddDays(Convert.ToDouble(_refundValidPeriod));
                //_ReceiptHeader.Sar_itmpr_validto = _ReceiptHeader.Sar_receipt_date.AddDays(Convert.ToDouble(_priceValidPeriod));

                _ReceiptHeader.Sar_scheme = lblSchme.Text;
                _ReceiptHeader.Sar_inv_type = lblSalesType.Text;

                if (chklaunchparticipate.Checked)
                {
                    _ReceiptHeader.Sar_anal_5 = 1;
                }

                List<RecieptItem> _ReceiptDetailsSave = new List<RecieptItem>();
                Int32 _line = 0;
                foreach (RecieptItem line in ucPayModes1.RecieptItemList)
                {
                    line.Sard_seq_no = _ReceiptHeader.Sar_seq_no;
                    _line = _line + 1;
                    line.Sard_line_no = _line;
                    line.Sard_receipt_no = _ReceiptHeader.Sar_receipt_no;
                    line.Sard_anal_5 = line.Sard_anal_5;//add by tharanga 2018/01/19
                    _ReceiptDetailsSave.Add(line);
                }
              
                MasterAutoNumber masterAuto = new MasterAutoNumber();
                masterAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                masterAuto.Aut_cate_tp = "PC";
                masterAuto.Aut_direction = null;
                masterAuto.Aut_modify_dt = null;
                masterAuto.Aut_moduleid = "RECEIPT";
                masterAuto.Aut_number = 5;//what is Aut_number
                masterAuto.Aut_start_char = txtDivision.Text.Trim();
                masterAuto.Aut_year = null;

                DataTable _pcInfo = new DataTable();
                _pcInfo = CHNLSVC.Sales.GetProfitCenterTable(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);


                MasterAutoNumber masterAutoRecTp = new MasterAutoNumber();
                masterAutoRecTp.Aut_cate_cd = BaseCls.GlbUserDefProf;
                masterAutoRecTp.Aut_cate_tp = "PC";
                masterAutoRecTp.Aut_direction = null;
                masterAutoRecTp.Aut_modify_dt = null;

                if (_pcInfo.Rows[0]["mpc_ope_cd"].ToString() == "INV_LRP" && BaseCls.GlbUserComCode == "LRP") { masterAutoRecTp.Aut_moduleid = "REC_LRP"; }
                else { masterAutoRecTp.Aut_moduleid = "RECEIPT"; }

                masterAutoRecTp.Aut_number = 5;//what is Aut_number
                masterAutoRecTp.Aut_start_char = txtRecType.Text.Trim();
                masterAutoRecTp.Aut_year = null;

                if (dgvItem.Rows.Count > 0)
                {
                    _SerHeader.Tuh_usrseq_no = CHNLSVC.Inventory.GetSerialID();  //CHNLSVC.Inventory.Generate_new_seq_num(BaseCls.GlbUserID, "RECEIPT", 0, BaseCls.GlbUserComCode);
                    _SerHeader.Tuh_usr_id = BaseCls.GlbUserID;
                    _SerHeader.Tuh_usr_com = BaseCls.GlbUserComCode;
                    _SerHeader.Tuh_session_id = BaseCls.GlbUserSessionID;
                    _SerHeader.Tuh_cre_dt = Convert.ToDateTime(dtpRecDate.Text).Date;

                    if (_invType == "HS") { _SerHeader.Tuh_doc_tp = "RECEIPT"; }
                    else { _SerHeader.Tuh_doc_tp = "DO"; }

                    _SerHeader.Tuh_direct = false;
                    _SerHeader.Tuh_ischek_simitm = true;
                    _SerHeader.Tuh_ischek_reqqty = true;

                    if (txtRecType.Text == "VHREG" || txtRecType.Text == "VHINS" || txtRecType.Text == "TNSPT") { _SerHeader.Tuh_doc_no = _invNo; }
                    else { _SerHeader.Tuh_doc_no = "na"; }

                    //Reserv serial items
                    if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                    {
                        if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString())
                        {
                            _tempSerialSave = GetReservedSerials(txtIntrCompany.Text.ToUpper(), txtIntrLocation.Text.ToUpper());
                        }
                        else
                        {
                            _tempSerialSave = GetReservedSerials(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                        }
                        foreach (ReptPickSerials ser in _tempSerialSave)
                        {
                            if (ser.Tus_ser_1==null)
                            {
                                _SerHeader.Tuh_ischek_itmstus = false; 
                            }
                            
                        }
                    }
                    else
                    {
                        foreach (ReptPickSerials line in _ResList)
                        {
                            line.Tus_usrseq_no = _SerHeader.Tuh_usrseq_no;
                            line.Tus_cre_by = BaseCls.GlbUserID;
                            _tempSerialSave.Add(line);
                        }
                    }

                    //Commented by akila 2017/01/17
                    //foreach (ReptPickSerials line in _ResList)
                    //{
                    //    line.Tus_usrseq_no = _SerHeader.Tuh_usrseq_no;
                    //    line.Tus_cre_by = BaseCls.GlbUserID;
                    //    _tempSerialSave.Add(line);
                    //}

                    int count = _tempSerialSave.Where(x => x.Tus_ser_1 != null).Select(x => x.Tus_ser_1).Count();
                  
                  
                    if (count > 0)
                    {
                        _isRes = true;
                    } 
                    else
                    {
                        _isRes = false;
                    }

                    if (_isRes == false)
                    {
                        _SerHeader.Tuh_ischek_itmstus = false; 
                    }
                    else 
                    {
                        _SerHeader.Tuh_ischek_itmstus = true;
                    }                    
                }

                if (txtRecType.Text == "VHREG")
                {
                    foreach (VehicalRegistration _reg in _regList)
                    {
                        Int32 _vehSeq = CHNLSVC.Inventory.GetSerialID(); //CHNLSVC.Inventory.Generate_new_seq_num(BaseCls.GlbUserID, "VHREG", 1, BaseCls.GlbUserComCode);
                        _reg.P_seq = _vehSeq;
                        _tempRegSave.Add(_reg);
                    }
                }

                if (txtRecType.Text == "VHINS")
                {
                    foreach (VehicleInsuarance _ins in _insList)
                    {
                        Int32 _insSeq = CHNLSVC.Inventory.GetSerialID(); //CHNLSVC.Inventory.Generate_new_seq_num(BaseCls.GlbUserID, "VHINS", 1, BaseCls.GlbUserComCode);
                        _ins.Svit_seq = _insSeq;
                        _ins.Svit_rec_tp = txtRecType.Text.Trim();
                        _tempInsSave.Add(_ins);
                    }
                }

                if (txtRecType.Text == "TNSPT")
                {
                    foreach (VehicleInsuarance _ins in _insList)
                    {
                        Int32 _insSeq = CHNLSVC.Inventory.GetSerialID(); //CHNLSVC.Inventory.Generate_new_seq_num(BaseCls.GlbUserID, "VHINS", 1, BaseCls.GlbUserComCode);
                        _ins.Svit_seq = _insSeq;
                        _ins.Svit_rec_tp = txtRecType.Text.Trim();
                        _tempInsSave.Add(_ins);
                    }
                }

                if (txtRecType.Text == "ADINS")
                {
                    foreach (VehicleInsuarance _ins in _insList)
                    {
                        Int32 _insSeq = CHNLSVC.Inventory.GetSerialID(); //CHNLSVC.Inventory.Generate_new_seq_num(BaseCls.GlbUserID, "VHINS", 1, BaseCls.GlbUserComCode);
                        _ins.Svit_seq = _insSeq;
                        _ins.Svit_rec_tp = txtRecType.Text.Trim();
                        _tempInsSave.Add(_ins);
                    }
                }

                string QTNum;
                bool isres = false;
                if (chkitmres.Checked == true)
                {
                    isres = true;
                    _SerHeader.Tuh_ischek_itmstus = true;
                }
                foreach (DataGridViewRow _row in dgvItem.Rows)//add by tharanga 2018/05/02 update cost advance recept
                {
                    //item.Tus_base_doc_no = _intBatchSavedSerialised.Where(r => r.Inb_base_itmline == item.Tus_itm_line).FirstOrDefault().Inb_doc_no;
                    _tempSerialSave.Where(r => r.Tus_itm_cd == _row.Cells["col_itmItem"].Value.ToString()).ToList()
                            .ForEach(i =>
                                {
                                    i.Tus_unit_cost = Convert.ToDecimal(_row.Cells["colRate"].Value);
                                    i.Tus_unit_price = Convert.ToDecimal(_row.Cells["colamt"].Value);
                                   // i.Tus_unit_price = Convert.ToDecimal(_row.Cells["itri_unit_price"].Value);
                                });//itm_Lineno
                    //_tempSerialSave.Where ( r => r.Tus_itm_cd ==  _row.Cells["col_a_Pc"].Value.ToString()).for
                }
                //updated by akila 2017/01/17
                row_aff = (Int32)CHNLSVC.Sales.SaveNewReceipt(_ReceiptHeader, _ReceiptDetailsSave, masterAuto, _SerHeader, _tempSerialSave, _tempRegSave, _tempInsSave, _sheduleDetails, _recAddDetList, masterAutoRecTp, _gvDetails, out QTNum, BaseCls.GlbUserComCode, BaseCls.GlbUserID, chk_Freereg.Checked, ActualRegAmount, isres, _isResser);
                //row_aff = (Int32)CHNLSVC.Sales.SaveNewReceipt(_ReceiptHeader, _ReceiptDetailsSave, masterAuto, _SerHeader, _tempSerialSave, _tempRegSave, _tempInsSave, _sheduleDetails, _recAddDetList, masterAutoRecTp, _gvDetails, out QTNum);


                //add by akila 2017/08/19 generate debit note
                //string _debitNoteNo = null;
                //if (!string.IsNullOrEmpty(QTNum))
                //{
                //    List<string> _outParaList = new List<string>();
                //    _outParaList = QTNum.Split(new string[] { ":" }, StringSplitOptions.None).ToList();
                //    if (_outParaList != null && _outParaList.Count > 1)
                //    {
                //        _debitNoteNo = _outParaList[1];
                //        //add by akila 2017/08/19 generate debit note
                //        if (!string.IsNullOrEmpty(_debitNoteNo))
                //        {
                //            DialogResult _result = MessageBox.Show("Debit note - " + _debitNoteNo + " generated for this transaction. Do you want to print it ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                //            if (_result == System.Windows.Forms.DialogResult.Yes)
                //            {
                //                BaseCls.GlbReportTp = "INV";
                //                ReportViewer _view = new ReportViewer();
                //                BaseCls.GlbReportName = string.Empty;
                //                GlbReportName = string.Empty;
                //                _view.GlbReportName = string.Empty;
                //                _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt";
                //                _view.GlbReportDoc = _debitNoteNo;
                //                _view.Show();
                //                _view = null;
                //            }
                //        }
                //    }
                //    QTNum = _outParaList[0];
                //}
                    

                if (radioButtonManual.Checked == true)
                {
                    if (BaseCls.GlbUserDefLoca != BaseCls.GlbUserDefProf)
                    {
                        CHNLSVC.Inventory.UpdateManualDocNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC", Convert.ToInt32(txtManual.Text), QTNum);
                    }
                }

                if (radioButtonSystem.Checked == true)
                {
                    if (BaseCls.GlbUserDefLoca != BaseCls.GlbUserDefProf)
                    {
                        CHNLSVC.Inventory.UpdateManualDocNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "SDOC_AVREC", Convert.ToInt32(txtManual.Text), QTNum);
                    }
                }

                if (row_aff == 1)
                {
                    //kapila 25/1/2016 - update veh reg no of times
                    if (txtRecType.Text == "VHREG")
                    {
                        int _efVR = CHNLSVC.Financial.UpdateVehRegDefin(_SVRD_SEQ);
                    }

                    if (radioButtonManual.Checked == true)
                    {
                        MessageBox.Show("Successfully created.Receipt No: " + QTNum, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        Clear_Data();
                        btnSave.Enabled = true;

                        return;
                    }
                    else
                    {
                        if (MessageBox.Show("Successfully created.Receipt No: " + QTNum + " Do you want to get the print Now ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
                        {
                            Clear_Data();
                            btnSave.Enabled = true;
                            return;
                        }
                        else
                        {
                            string _cusCode = "";
                            _cusCode = txtCusCode.Text.Trim();
                            MasterBusinessEntity _itm = CHNLSVC.Sales.GetBusinessCompanyDetail(BaseCls.GlbUserComCode, _cusCode, string.Empty, string.Empty, "C");

                            if (_itm.Mbe_sub_tp == "C.")
                            {
                                if (BaseCls.GlbDefChannel == "AUTO_DEL")
                                {
                                    ReportViewer _view = new ReportViewer();
                                    BaseCls.GlbReportName = string.Empty;
                                    _view.GlbReportName = string.Empty;
                                    GlbReportName = string.Empty;
                                    _view.GlbReportName = "ReceiptPrints.rpt";
                                    _view.GlbReportDoc = QTNum;
                                    _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                                    _view.Show();
                                    _view = null;

                                }
                                else
                                {
                                    ReportViewer _view = new ReportViewer();
                                    BaseCls.GlbReportName = string.Empty;
                                    _view.GlbReportName = string.Empty;
                                    GlbReportName = string.Empty;
                                    _view.GlbReportName = "ReceiptPrints.rpt";
                                    _view.GlbReportDoc = QTNum;
                                    _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                                    _view.Show();
                                    _view = null;
                                }
                            }
                            else
                            {
                                if (radioButtonManual.Checked == false)
                                {
                                    if (BaseCls.GlbDefChannel == "AUTO_DEL")
                                    {
                                        ReportViewer _view = new ReportViewer();
                                        BaseCls.GlbReportName = string.Empty;
                                        _view.GlbReportName = string.Empty;
                                        GlbReportName = string.Empty;
                                        _view.GlbReportName = "ReceiptPrints.rpt";
                                        _view.GlbReportDoc = QTNum;
                                        _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                                        _view.Show();
                                        _view = null;

                                    }
                                    else
                                    {
                                        if (txtRecType.Text == "ADVAN")
                                        {
                                            if (radioButtonSystem.Checked == true)
                                            {
                                                if (BaseCls.GlbUserComCode == "AST")        //kapila 3/11/2015
                                                {
                                                    clsSalesRep obj = new clsSalesRep();
                                                    BaseCls.GlbReportDoc = QTNum;
                                                    BaseCls.GlbReportProfit = BaseCls.GlbUserDefProf;
                                                    BaseCls.GlbReportTp = "ADVREC";

                                                    obj.POSReceiptDirectPrint();
                                                }
                                                else
                                                {
                                                    ReportViewer _view = new ReportViewer();
                                                    BaseCls.GlbReportName = string.Empty;
                                                    _view.GlbReportName = string.Empty;
                                                    GlbReportName = string.Empty;
                                                    BaseCls.GlbReportTp = "ADVREC";
                                                    _view.GlbReportName = "ReceiptPrints_n.rpt";
                                                    _view.GlbReportDoc = QTNum;
                                                    _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                                                    _view.Show();
                                                    _view = null;
                                                }
                                            }
                                            else     //kapila 18/11/2016
                                            {
                                                if (BaseCls.GlbDefChannel == "MSR")
                                                {
                                                    ReportViewer _view = new ReportViewer();
                                                    BaseCls.GlbReportName = string.Empty;
                                                    _view.GlbReportName = string.Empty;
                                                    GlbReportName = string.Empty;
                                                    BaseCls.GlbReportTp = "ADVREC";
                                                    _view.GlbReportName = "ReceiptPrints_n.rpt";
                                                    _view.GlbReportDoc = QTNum;
                                                    _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                                                    _view.Show();
                                                    _view = null;
                                                }
                                                if (BaseCls.GlbDefChannel == "ELITE")
                                                {
                                                    ReportViewer _view = new ReportViewer();
                                                    BaseCls.GlbReportName = string.Empty;
                                                    _view.GlbReportName = string.Empty;
                                                    GlbReportName = string.Empty;
                                                    BaseCls.GlbReportTp = "ADVREC";
                                                    _view.GlbReportName = "ReceiptPrints_n.rpt";
                                                    _view.GlbReportDoc = QTNum;
                                                    _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                                                    _view.Show();
                                                    _view = null;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            if (BaseCls.GlbUserComCode == "AST")        //kapila 3/11/2015
                                            {
                                                clsSalesRep obj = new clsSalesRep();
                                                BaseCls.GlbReportDoc = QTNum;
                                                BaseCls.GlbReportProfit = BaseCls.GlbUserDefProf;

                                                if (txtRecType.Text == "TICKT")
                                                    BaseCls.GlbReportTp = "TICKT";
                                                else
                                                    BaseCls.GlbReportTp = "REC";

                                                obj.POSReceiptDirectPrint();
                                            }
                                            else
                                            {
                                                ReportViewer _view = new ReportViewer();
                                                BaseCls.GlbReportName = string.Empty;
                                                _view.GlbReportName = string.Empty;
                                                GlbReportName = string.Empty;
                                                BaseCls.GlbReportTp = "REC";
                                                _view.GlbReportName = "ReceiptPrints.rpt";
                                                _view.GlbReportDoc = QTNum;
                                                _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                                                _view.Show();
                                                _view = null;
                                                Clear_Data();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }                   

                }
                else
                {
                    if (!string.IsNullOrEmpty(QTNum))
                    {
                        MessageBox.Show(QTNum, "Terminated", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        btnSave.Enabled = true;
                    }
                    else
                    {
                        MessageBox.Show("Creation Fail.", "Terminated", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        btnSave.Enabled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                btnSave.Enabled = true;
                CHNLSVC.CloseChannel();
                MessageBox.Show("An errorr occurred while saving receipt details !" + Environment.NewLine + ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
            }
            Clear_Data();
            InitializeComponent();
            #region OldCode
            ////Commented by Akila 2016/12/23
            //if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            //{
            //    if (ReceiptSettingList.Count > 0)
            //    {
            //        foreach (MstRecSubTp _setting in ReceiptSettingList)
            //        {
            //            _subReceiptType = _setting.SubReceiptCode;
            //            _receiptValidPeriod = _setting.SettelmentPeriod;
            //            _refundValidPeriod = _setting.RefundablePeriod;
            //            _priceValidPeriod = _setting.PriceValidPeriod;
            //        }
            //    }
            //    //Commented by akila 2016/12/23
            //    //List<Hpr_SysParameter> para = CHNLSVC.Sales.GetAll_hpr_Para("ADREFMAXDT", "COM", BaseCls.GlbUserComCode);
            //    //if (para.Count > 0)
            //    //{
            //    //    _valPd = para[0].Hsy_val;
            //    //}
            //}

            //if (txtRecType.Text == "ADINS")
            //{
            //    List<Hpr_SysParameter> para = CHNLSVC.Sales.GetAll_hpr_Para("ADINREMXDT", "COM", BaseCls.GlbUserComCode);
            //    if (para.Count > 0)
            //    {
            //        _receiptValidPeriod = para[0].Hsy_val;
            //    }
            //}


            //RecieptHeader _ReceiptHeader = new RecieptHeader();
            //_ReceiptHeader.Sar_seq_no = CHNLSVC.Inventory.GetSerialID(); //CHNLSVC.Inventory.Generate_new_seq_num(GlbUserName, "RECEIPT", 1, BaseCls.GlbUserComCode);
            //_ReceiptHeader.Sar_com_cd = BaseCls.GlbUserComCode;
            //_ReceiptHeader.Sar_receipt_type = txtRecType.Text.Trim();
            //_ReceiptHeader.Sar_receipt_no = _ReceiptHeader.Sar_seq_no.ToString();// txtRecNo.Text.Trim();

            //if (txtRecType.Text == "ADVAN")
            //{
            //    _ReceiptHeader.Sar_prefix = comboBoxPrefix.SelectedValue.ToString();
            //}
            //else
            //{
            //    _ReceiptHeader.Sar_prefix = txtDivision.Text.Trim();
            //}
            //if (string.IsNullOrEmpty(txtManual.Text))
            //{
            //    txtManual.Text = "0";
            //}
            //else
            //{
            //    _ReceiptHeader.Sar_manual_ref_no = txtManual.Text.Trim();
            //    _ReceiptHeader.SAR_BK_NO = _bkNo;    //kapila 25/4/2016
            //}
            ////kapila 15/12/2016
            //if (txtRecType.Text == "GVISU")
            //{
            //    _ReceiptHeader.Sar_manual_ref_no = _gvPage;
            //    _ReceiptHeader.Sar_prefix = _gvPrefix;
            //}

            //_ReceiptHeader.Sar_receipt_date = Convert.ToDateTime(dtpRecDate.Text).Date;
            //_ReceiptHeader.Sar_direct = true;
            //_ReceiptHeader.Sar_acc_no = "";
            //if (chkOth.Checked == true)
            //{
            //    _ReceiptHeader.Sar_is_oth_shop = true;
            //    _ReceiptHeader.Sar_oth_sr = txtOthSR.Text;
            //}
            //else
            //{
            //    _ReceiptHeader.Sar_is_oth_shop = false;
            //    _ReceiptHeader.Sar_oth_sr = "";
            //}
            //_ReceiptHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
            //_ReceiptHeader.Sar_debtor_cd = txtCusCode.Text.Trim();
            //_ReceiptHeader.Sar_debtor_name = txtCusName.Text.Trim();
            //_ReceiptHeader.Sar_debtor_add_1 = txtCusAdd1.Text.Trim();
            //_ReceiptHeader.Sar_debtor_add_2 = txtCusAdd2.Text.Trim();
            //_ReceiptHeader.Sar_tel_no = "";
            //_ReceiptHeader.Sar_mob_no = txtMobile.Text.Trim();
            //_ReceiptHeader.Sar_nic_no = txtNIC.Text.Trim();
            //_ReceiptHeader.Sar_tot_settle_amt = Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text);
            //_ReceiptHeader.Sar_comm_amt = 0;
            //_ReceiptHeader.Sar_is_mgr_iss = false;
            //_ReceiptHeader.Sar_esd_rate = 0;
            //_ReceiptHeader.Sar_wht_rate = 0;
            //_ReceiptHeader.Sar_epf_rate = 0;
            //_ReceiptHeader.Sar_currency_cd = "LKR";
            //_ReceiptHeader.Sar_uploaded_to_finance = false;
            //_ReceiptHeader.Sar_act = true;
            //_ReceiptHeader.Sar_direct_deposit_bank_cd = "";
            //_ReceiptHeader.Sar_direct_deposit_branch = "";
            //_ReceiptHeader.Sar_remarks = txtNote.Text.Trim();
            //_ReceiptHeader.Sar_is_used = false;

            //if (txtRecType.Text == "ADVAN")
            //{
            //    _ReceiptHeader.Sar_ref_doc = txtDivision.Text.Trim();
            //}
            //else
            //{
            //    _ReceiptHeader.Sar_ref_doc = "";
            //}
            ////kapila 11/1/2016
            //if (_minDPRate > 0)
            //    _ReceiptHeader.Sar_ser_job_no = txtQuoNo.Text;
            //else
            //    _ReceiptHeader.Sar_ser_job_no = "";

            //_ReceiptHeader.Sar_used_amt = 0;
            //_ReceiptHeader.Sar_create_by = BaseCls.GlbUserID;
            //_ReceiptHeader.Sar_mod_by = BaseCls.GlbUserID;
            //_ReceiptHeader.Sar_session_id = BaseCls.GlbUserSessionID;
            //_ReceiptHeader.Sar_anal_1 = cmbDistrict.Text;
            //_ReceiptHeader.Sar_anal_2 = txtProvince.Text.Trim();
            //if (chk_Freereg.Checked == true)//Sanjeewa 2016-08-14
            //{
            //    _ReceiptHeader.SAR_FREE_REG = 1;
            //    _ReceiptHeader.Sar_ser_job_no = txtCusCode.Text.Trim();
            //}
            //if(!string.IsNullOrEmpty(txtJobNo.Text))    //kapila 10/11/2016
            //        _ReceiptHeader.Sar_ser_job_no = txtJobNo.Text;

            //if (radioButtonManual.Checked == true)
            //{
            //    _ReceiptHeader.Sar_anal_3 = "MANUAL";
            //    _ReceiptHeader.Sar_anal_8 = 1;
            //}
            //else
            //{
            //    _ReceiptHeader.Sar_anal_3 = "SYSTEM";
            //    _ReceiptHeader.Sar_anal_8 = 0;
            //}

            //_ReceiptHeader.Sar_anal_4 = txtSalesEx.Text;
            //_ReceiptHeader.Sar_anal_5 = 0;
            //_ReceiptHeader.Sar_anal_6 = 0;
            //_ReceiptHeader.Sar_anal_7 = 0;
            //_ReceiptHeader.Sar_anal_9 = 0;
            //_ReceiptHeader.SAR_VALID_TO = _ReceiptHeader.Sar_receipt_date.AddDays(Convert.ToDouble(_valPd));
            //_ReceiptHeader.Sar_scheme = lblSchme.Text;
            //_ReceiptHeader.Sar_inv_type = lblSalesType.Text;

            //List<RecieptItem> _ReceiptDetailsSave = new List<RecieptItem>();
            //Int32 _line = 0;
            //foreach (RecieptItem line in ucPayModes1.RecieptItemList)
            //{
            //    line.Sard_seq_no = _ReceiptHeader.Sar_seq_no;
            //    _line = _line + 1;
            //    line.Sard_line_no = _line;
            //    _ReceiptDetailsSave.Add(line);
            //}

            //MasterAutoNumber masterAuto = new MasterAutoNumber();
            //masterAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
            //masterAuto.Aut_cate_tp = "PC";
            //masterAuto.Aut_direction = null;
            //masterAuto.Aut_modify_dt = null;
            //masterAuto.Aut_moduleid = "RECEIPT";
            //masterAuto.Aut_number = 5;//what is Aut_number
            //masterAuto.Aut_start_char = txtDivision.Text.Trim();
            //masterAuto.Aut_year = null;

            //DataTable _pcInfo = new DataTable();
            //_pcInfo = CHNLSVC.Sales.GetProfitCenterTable(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);


            //MasterAutoNumber masterAutoRecTp = new MasterAutoNumber();
            //masterAutoRecTp.Aut_cate_cd = BaseCls.GlbUserDefProf;
            //masterAutoRecTp.Aut_cate_tp = "PC";
            //masterAutoRecTp.Aut_direction = null;
            //masterAutoRecTp.Aut_modify_dt = null;

            //if (_pcInfo.Rows[0]["mpc_ope_cd"].ToString() == "INV_LRP" && BaseCls.GlbUserComCode == "LRP")
            //{
            //    masterAutoRecTp.Aut_moduleid = "REC_LRP";
            //}
            //else
            //{
            //    masterAutoRecTp.Aut_moduleid = "RECEIPT";
            //}
            //masterAutoRecTp.Aut_number = 5;//what is Aut_number
            //masterAutoRecTp.Aut_start_char = txtRecType.Text.Trim();
            //masterAutoRecTp.Aut_year = null;

            //if (dgvItem.Rows.Count > 0)
            //{
            //    _SerHeader.Tuh_usrseq_no = CHNLSVC.Inventory.GetSerialID();  //CHNLSVC.Inventory.Generate_new_seq_num(BaseCls.GlbUserID, "RECEIPT", 0, BaseCls.GlbUserComCode);
            //    _SerHeader.Tuh_usr_id = BaseCls.GlbUserID;
            //    _SerHeader.Tuh_usr_com = BaseCls.GlbUserComCode;
            //    _SerHeader.Tuh_session_id = BaseCls.GlbUserSessionID;
            //    _SerHeader.Tuh_cre_dt = Convert.ToDateTime(dtpRecDate.Text).Date;
            //    if (_invType == "HS")
            //    {
            //        _SerHeader.Tuh_doc_tp = "RECEIPT";
            //    }
            //    else
            //    {
            //        _SerHeader.Tuh_doc_tp = "DO";
            //    }
            //    _SerHeader.Tuh_direct = false;
            //    if (_isRes == false)
            //    {
            //        _SerHeader.Tuh_ischek_itmstus = false;
            //    }
            //    else
            //    {
            //        _SerHeader.Tuh_ischek_itmstus = true;
            //    }
            //    _SerHeader.Tuh_ischek_simitm = true;
            //    _SerHeader.Tuh_ischek_reqqty = true;


            //    if (txtRecType.Text == "VHREG" || txtRecType.Text == "VHINS")
            //    {
            //        _SerHeader.Tuh_doc_no = _invNo;
            //    }
            //    else
            //    {
            //        _SerHeader.Tuh_doc_no = "na";
            //    }


            //    foreach (ReptPickSerials line in _ResList)
            //    {
            //        line.Tus_usrseq_no = _SerHeader.Tuh_usrseq_no;
            //        line.Tus_cre_by = BaseCls.GlbUserID;
            //        _tempSerialSave.Add(line);
            //    }
            //}

            //if (txtRecType.Text == "VHREG")
            //{
            //    foreach (VehicalRegistration _reg in _regList)
            //    {
            //        Int32 _vehSeq = CHNLSVC.Inventory.GetSerialID(); //CHNLSVC.Inventory.Generate_new_seq_num(BaseCls.GlbUserID, "VHREG", 1, BaseCls.GlbUserComCode);
            //        _reg.P_seq = _vehSeq;
            //        _tempRegSave.Add(_reg);
            //    }
            //}

            //if (txtRecType.Text == "VHINS")
            //{
            //    foreach (VehicleInsuarance _ins in _insList)
            //    {
            //        Int32 _insSeq = CHNLSVC.Inventory.GetSerialID(); //CHNLSVC.Inventory.Generate_new_seq_num(BaseCls.GlbUserID, "VHINS", 1, BaseCls.GlbUserComCode);
            //        _ins.Svit_seq = _insSeq;
            //        _ins.Svit_rec_tp = txtRecType.Text.Trim();
            //        _tempInsSave.Add(_ins);
            //    }
            //}

            //if (txtRecType.Text == "ADINS")
            //{
            //    foreach (VehicleInsuarance _ins in _insList)
            //    {
            //        Int32 _insSeq = CHNLSVC.Inventory.GetSerialID(); //CHNLSVC.Inventory.Generate_new_seq_num(BaseCls.GlbUserID, "VHINS", 1, BaseCls.GlbUserComCode);
            //        _ins.Svit_seq = _insSeq;
            //        _ins.Svit_rec_tp = txtRecType.Text.Trim();
            //        _tempInsSave.Add(_ins);
            //    }
            //}

            //string QTNum;

            //row_aff = (Int32)CHNLSVC.Sales.SaveNewReceipt(_ReceiptHeader, _ReceiptDetailsSave, masterAuto, _SerHeader, _tempSerialSave, _tempRegSave, _tempInsSave, _sheduleDetails, _recAddDetList, masterAutoRecTp, _gvDetails, out QTNum);

            //if (radioButtonManual.Checked == true)
            //{
            //    if (BaseCls.GlbUserDefLoca != BaseCls.GlbUserDefProf)
            //    {
            //        CHNLSVC.Inventory.UpdateManualDocNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC", Convert.ToInt32(txtManual.Text), QTNum);
            //    }
            //}

            //if (radioButtonSystem.Checked == true)
            //{
            //    if (BaseCls.GlbUserDefLoca != BaseCls.GlbUserDefProf)
            //    {
            //        CHNLSVC.Inventory.UpdateManualDocNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "SDOC_AVREC", Convert.ToInt32(txtManual.Text), QTNum);
            //    }
            //}

            //if (row_aff == 1)
            //{
            //    //kapila 25/1/2016 - update veh reg no of times
            //    if (txtRecType.Text == "VHREG")
            //    {
            //        int _efVR = CHNLSVC.Financial.UpdateVehRegDefin(_SVRD_SEQ);
            //    }

            //    if (radioButtonManual.Checked == true)
            //    {
            //        MessageBox.Show("Successfully created.Receipt No: " + QTNum, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //        Clear_Data();
            //        btnSave.Enabled = true;
            //        return;
            //    }
            //    else
            //    {
            //        if (MessageBox.Show("Successfully created.Receipt No: " + QTNum + " Do you want to get the print Now ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No)
            //        {
            //            Clear_Data();
            //            btnSave.Enabled = true;
            //            return;
            //        }
            //        else
            //        {
            //            string _cusCode = "";
            //            _cusCode = txtCusCode.Text.Trim();
            //            MasterBusinessEntity _itm = CHNLSVC.Sales.GetBusinessCompanyDetail(BaseCls.GlbUserComCode, _cusCode, string.Empty, string.Empty, "C");

            //            if (_itm.Mbe_sub_tp == "C.")
            //            {
            //                if (BaseCls.GlbDefChannel == "AUTO_DEL")
            //                {
            //                    ReportViewer _view = new ReportViewer();
            //                    BaseCls.GlbReportName = string.Empty;
            //                    _view.GlbReportName = string.Empty;
            //                    //27-mar-2014 added by Nadeeka
            //                    GlbReportName = string.Empty;
            //                    //get permission
            //                    //bool _permission = CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 11055);
            //                    //if (!_permission)
            //                    //{// Done By Nadeeka 19-mar-2014
            //                    //    _view.GlbReportName = "ConsignmentReceiptPrint.rpt";
            //                    //}
            //                    //else
            //                    //{
            //                    //    _view.GlbReportName = "DealerReceiptPrint.rpt";
            //                    //}

            //                    //Commented by Nadeeka 21-05-2015 (Requested by Isuru)

            //                    _view.GlbReportName = "ReceiptPrints.rpt";
            //                    _view.GlbReportDoc = QTNum;
            //                    _view.GlbReportProfit = BaseCls.GlbUserDefProf;
            //                    _view.Show();
            //                    _view = null;

            //                }
            //                else
            //                {
            //                    ReportViewer _view = new ReportViewer();
            //                    BaseCls.GlbReportName = string.Empty;
            //                    _view.GlbReportName = string.Empty;
            //                    GlbReportName = string.Empty;
            //                    _view.GlbReportName = "ReceiptPrints.rpt";
            //                    _view.GlbReportDoc = QTNum;
            //                    _view.GlbReportProfit = BaseCls.GlbUserDefProf;
            //                    _view.Show();
            //                    _view = null;
            //                }
            //            }
            //            else
            //            {
            //                if (radioButtonManual.Checked == false)
            //                {
            //                    if (BaseCls.GlbDefChannel == "AUTO_DEL")
            //                    {
            //                        ReportViewer _view = new ReportViewer();
            //                        BaseCls.GlbReportName = string.Empty;
            //                        _view.GlbReportName = string.Empty;
            //                        GlbReportName = string.Empty;
            //                        _view.GlbReportName = "ReceiptPrints.rpt";
            //                        _view.GlbReportDoc = QTNum;
            //                        _view.GlbReportProfit = BaseCls.GlbUserDefProf;
            //                        _view.Show();
            //                        _view = null;

            //                    }
            //                    else
            //                    {
            //                        if (txtRecType.Text == "ADVAN")
            //                        {
            //                            if (radioButtonSystem.Checked == true)
            //                            {
            //                                if (BaseCls.GlbUserComCode == "AST")        //kapila 3/11/2015
            //                                {
            //                                    clsSalesRep obj = new clsSalesRep();
            //                                    BaseCls.GlbReportDoc = QTNum;
            //                                    BaseCls.GlbReportProfit = BaseCls.GlbUserDefProf;
            //                                    BaseCls.GlbReportTp = "ADVREC";

            //                                    obj.POSReceiptDirectPrint();
            //                                }
            //                                else
            //                                {
            //                                    ReportViewer _view = new ReportViewer();
            //                                    BaseCls.GlbReportName = string.Empty;
            //                                    _view.GlbReportName = string.Empty;
            //                                    GlbReportName = string.Empty;
            //                                    BaseCls.GlbReportTp = "ADVREC";
            //                                    _view.GlbReportName = "ReceiptPrints_n.rpt";
            //                                    _view.GlbReportDoc = QTNum;
            //                                    _view.GlbReportProfit = BaseCls.GlbUserDefProf;
            //                                    _view.Show();
            //                                    _view = null;
            //                                }
            //                            }
            //                            else     //kapila 18/11/2016
            //                            {
            //                                if(BaseCls.GlbDefChannel=="MSR")
            //                                {
            //                                    ReportViewer _view = new ReportViewer();
            //                                    BaseCls.GlbReportName = string.Empty;
            //                                    _view.GlbReportName = string.Empty;
            //                                    GlbReportName = string.Empty;
            //                                    BaseCls.GlbReportTp = "ADVREC";
            //                                    _view.GlbReportName = "ReceiptPrints_n.rpt";
            //                                    _view.GlbReportDoc = QTNum;
            //                                    _view.GlbReportProfit = BaseCls.GlbUserDefProf;
            //                                    _view.Show();
            //                                    _view = null;
            //                                }
            //                            }
            //                        }
            //                        else
            //                        {
            //                            if (BaseCls.GlbUserComCode == "AST")        //kapila 3/11/2015
            //                            {
            //                                clsSalesRep obj = new clsSalesRep();
            //                                BaseCls.GlbReportDoc = QTNum;
            //                                BaseCls.GlbReportProfit = BaseCls.GlbUserDefProf;

            //                                if (txtRecType.Text == "TICKT")
            //                                    BaseCls.GlbReportTp = "TICKT";
            //                                else
            //                                    BaseCls.GlbReportTp = "REC";

            //                                obj.POSReceiptDirectPrint();
            //                            }
            //                            else
            //                            {
            //                                ReportViewer _view = new ReportViewer();
            //                                BaseCls.GlbReportName = string.Empty;
            //                                _view.GlbReportName = string.Empty;
            //                                GlbReportName = string.Empty;
            //                                BaseCls.GlbReportTp = "REC";
            //                                _view.GlbReportName = "ReceiptPrints.rpt";
            //                                _view.GlbReportDoc = QTNum;
            //                                _view.GlbReportProfit = BaseCls.GlbUserDefProf;
            //                                _view.Show();
            //                                _view = null;
            //                            }
            //                        }
            //                    }
            //                }
            //            }
            //            // Clear_Data();
            //            // btnSave.Enabled = true;
            //        }
            //    }


            //}
            //else
            //{
            //    if (!string.IsNullOrEmpty(QTNum))
            //    {
            //        MessageBox.Show(QTNum, "Terminated", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //        btnSave.Enabled = true;
            //    }
            //    else
            //    {
            //        MessageBox.Show("Creation Fail.", "Terminated", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //        btnSave.Enabled = true;
            //    }
            //}

            #endregion
        }

        private void btnPayment_Click(object sender, EventArgs e)
        {
            decimal _Amt = 0;
            string _Htype = "";
            string _Hvalue = "";
            Int32 I = 0;

            if (string.IsNullOrEmpty(txtPayment.Text))
            {
                MessageBox.Show("Please enter amount which customer is going to pay.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtPayment.Focus();
                return;
            }

            if (!IsNumeric(txtPayment.Text))
            {
                MessageBox.Show("Payment amount should be numeric.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtPayment.Focus();
                return;
            }

            if (string.IsNullOrEmpty(txtCusCode.Text))
            {
                MessageBox.Show("Please select payment customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtCusCode.Focus();
                return;
            }

            if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            {
                if (ucPayModes1.MainGrid.Rows.Count > 0)
                {
                    MessageBox.Show("Payments are already added. Now you cannot add more details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                //foreach (ReptPickSerials _list in _ResList)
                //{
                //}

                decimal _qtyTotal = _ResList.Where(x => x.Tus_itm_cd == txtItem.Text).Count();
                // _qtyTotal =_qtyTotal+1;
                if (Convert.ToDecimal(txtAllocQty.Text) > 0)
                {
                    if (Convert.ToDecimal(txtFreeQty.Text) < _qtyTotal + 1)
                    {
                        MessageBox.Show("Allocated Qty exceeded. Now you cannot add more items.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.RVT.ToString())
                {
                    double _accountBalance = Convert.ToDouble(txtBalance.Text);
                    double _paidAmount = Convert.ToDouble(txtPayment.Text) + Convert.ToDouble(ucPayModes1.TotalAmount);

                    if (_paidAmount > _accountBalance)
                    {
                        MessageBox.Show("Payment amount cannot be exceeded the balance amount ", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtPayment.Focus();
                        return;
                    }
                }
                else if ((txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.NOR.ToString()) || (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.TRAV.ToString()) || (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString()))
                {
                    if (gvInvoiceItem.Rows.Count == 0)
                    {
                        MessageBox.Show("Please select an item", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        btn_add_ser.Focus();
                        return;
                    }

                    if (cmbInvType.Items.Count > 0)
                    {
                        if (string.IsNullOrEmpty(cmbInvType.SelectedValue.ToString()))
                        {
                            MessageBox.Show("Please select a invoice type", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        else if (cmbInvType.SelectedValue.ToString() != "HS")
                        {
                            double _minPayableAmt = CalculateMiniPayableAmt();
                            //if (_minPayableAmt == 0)
                            //{
                            //    double _minItemPracentage = ReceiptSettingList.Select(x => x.MinimunItemPrice).First();
                            //    if (_minItemPracentage == 0)
                            //    {
                            //        MessageBox.Show("Minimum payable amount cannot be zero or negative. Please check the receipt definition", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                            //        txtPayment.Focus();
                            //        return;
                            //    }
                            //}

                            double _paidAmt = double.Parse(txtPayment.Text);
                            if (_minPayableAmt > _paidAmt)
                            {
                                MessageBox.Show("Payment  didn't reach it minimum. Minimum payment amount is " + FormatToCurrency(_minPayableAmt.ToString("N2")), "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                txtPayment.Focus();
                                return;
                            }
                        }
                        else if (cmbInvType.SelectedValue.ToString() == "HS")
                        {
                            double _minPayableAmt = Convert.ToDouble(HsMinPayAmount);
                            double _paidAmt = double.Parse(txtPayment.Text);
                            if (_minPayableAmt > _paidAmt)
                            {
                                MessageBox.Show("Payment  didn't reach it minimum. Minimum payment amount is " + FormatToCurrency(_minPayableAmt.ToString("N2")), "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                txtPayment.Focus();
                                return;
                            }
                        }

                    }
                    else { MessageBox.Show("Invoice types not found", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return; }
                }

            }

            if (txtRecType.Text == "DEBT")
            {

                //Add by Tharanga 2017/07/31
                HpSystemParameters _SystemPara = new HpSystemParameters();
                if (string.IsNullOrEmpty(txtInvoice.Text.Trim()))
                {
                    MessageBox.Show("Please enter invoice number", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        
                        txtInvoice.Focus();
                       
                        return; 
                }
                _SystemPara = CHNLSVC.Sales.GetSystemParameter("PC", BaseCls.GlbUserDefProf, "DEBTALAMT", DateTime.Now.Date);
                if (_SystemPara.Hsy_cd != null)
                {
                    Decimal balance = Convert.ToDecimal(txtPayment.Text) - Convert.ToDecimal(txtBalance.Text);


                    if (balance > _SystemPara.Hsy_val)
                    {
                        MessageBox.Show("Payment exceed the outstanding amount by Rs.'" + balance + "'", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        
                        txtPayment.Focus();
                        txtPayment.SelectAll();
                        return;
                    }
                    else
                    {
                        if (balance > 0)
                        {

                            DialogResult dialogResult = MessageBox.Show("Payment amount exceed the outstanding by Rs. '" + balance + "'. Please confirm to continue? ", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                            if (dialogResult == DialogResult.No)
                            {
                                txtPayment.Focus();
                                txtPayment.SelectAll();
                                return;
                            }
                         }
                    }
                 } //end 
                else
                {

                    if (Convert.ToDecimal(txtPayment.Text) > Convert.ToDecimal(txtBalance.Text))
                    {
                        MessageBox.Show("Payment cannot exceed outstanding amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtPayment.Focus();
                        txtPayment.SelectAll();
                        return;
                    }
                }

                if (Convert.ToDecimal(txtPayment.Text) <= 0)
                {
                    MessageBox.Show("Settle amount cannot be zero.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtPayment.Text = "";
                    txtPayment.Focus();
                    return;
                }

                foreach (RecieptItem line in ucPayModes1.RecieptItemList)
                {
                    if (line.Sard_inv_no == txtInvoice.Text.Trim())
                    {
                        MessageBox.Show("Already add this invoice.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtPayment.Text = "";
                        txtPayment.Focus();
                        return;
                    }
                }


                if (ucPayModes1.InvoiceNo == txtInvoice.Text.Trim())
                {
                    MessageBox.Show("Already add this invoice.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtPayment.Text = "";
                    txtPayment.Focus();
                    return;
                }
            }
            else if (txtRecType.Text == "VHREG" || txtRecType.Text == "VHINS")
            {

                if (string.IsNullOrEmpty(txtProvince.Text))
                {
                    MessageBox.Show("Please select district & province.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    cmbDistrict.Focus();
                    return;
                }


                if (string.IsNullOrEmpty(txtengine.Text))
                {
                    MessageBox.Show("Please select engine #.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtengine.Focus();
                    return;
                }

                if (string.IsNullOrEmpty(txtChasis.Text))
                {
                    MessageBox.Show("Please select chassis #.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtChasis.Focus();
                    return;
                }

                if (string.IsNullOrEmpty(txtItem.Text))
                {
                    MessageBox.Show("Please select item.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtItem.Focus();
                    return;
                }

                if (chk_Freereg.Checked == true) txtBalance.Text = "0.00";

                if (Convert.ToDecimal(txtPayment.Text) != Convert.ToDecimal(txtBalance.Text))
                {
                    MessageBox.Show("Payment amount not match with define amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtPayment.Focus();
                    txtPayment.SelectAll();
                    return;
                }

                if (txtRecType.Text == "VHINS")
                {
                    if (string.IsNullOrEmpty(txtInsCom.Text))
                    {
                        MessageBox.Show("Please select insuarance company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtInsCom.Focus();
                        return;
                    }

                    if (string.IsNullOrEmpty(txtInsPol.Text))
                    {
                        MessageBox.Show("Please select insuarance policy.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtInsPol.Focus();
                        return;
                    }
                }

                if (MessageBox.Show("Is this select province and district is correct ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No)
                {
                    cmbDistrict.Enabled = true;
                    cmbDistrict.Focus();
                    return;
                }

                // cmbDistrict.Enabled = false;
            }
            else if (txtRecType.Text == "ADINS")
            {
                if (Convert.ToDecimal(txtPayment.Text) != Convert.ToDecimal(txtBalance.Text))
                {
                    MessageBox.Show("Payment amount not match with define amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtPayment.Focus();
                    txtPayment.SelectAll();
                    return;
                }



                if (string.IsNullOrEmpty(txtItem.Text))
                {
                    MessageBox.Show("Please select item.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtItem.Focus();
                    return;
                }

                if (string.IsNullOrEmpty(txtengine.Text))
                {
                    MessageBox.Show("Please select engine #.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtengine.Focus();
                    return;
                }

                if (string.IsNullOrEmpty(txtInsCom.Text))
                {
                    MessageBox.Show("Please select insuarance company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtInsCom.Focus();
                    return;
                }

                if (string.IsNullOrEmpty(txtInsPol.Text))
                {
                    MessageBox.Show("Please select insuarance policy.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtInsPol.Focus();
                    return;
                }


                // cmbDistrict.Enabled = false;
            }
            else
            {
                if (Convert.ToDecimal(txtPayment.Text) <= 0)
                {
                    MessageBox.Show("Settle amount cannot be zero.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtPayment.Text = "";
                    txtPayment.Focus();
                    return;
                }
            }

            if (!string.IsNullOrEmpty(ucPayModes1.InvoiceNo))
            {
                if (ucPayModes1.InvoiceNo != txtInvoice.Text.Trim())
                {
                    if (ucPayModes1.Balance > 0)
                    {
                        MessageBox.Show("Not allowed to go another payment with out complete selected payment.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
            }

            if (txtRecType.Text == "VHREG")
            {
                DataTable odt = CHNLSVC.Financial.chk_vreg_available(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoice.Text.Trim(), null, txtItem.Text, txtengine.Text, txtChasis.Text);
                if (odt != null && odt.Rows.Count > 0)
                {
                    string svrt_ref_no = Convert.ToString( odt.Rows[0]["svrt_ref_no"]);
                    MessageBox.Show("Already exsist. " + svrt_ref_no, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }


                foreach (VehicalRegistration temp in _regList)
                {
                    if (temp.P_srvt_itm_cd == txtItem.Text.Trim() && temp.P_svrt_engine == txtengine.Text.Trim())
                    {
                        MessageBox.Show("Already exsist.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                foreach (ReptPickSerials _serial in _ResList)
                {
                    if (_serial.Tus_itm_cd == txtItem.Text.Trim() && _serial.Tus_ser_1 == txtengine.Text.Trim())
                    {
                        MessageBox.Show("Selected serial is already exsist.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtengine.Focus();
                        return;
                    }
                }


                _regList.Add(AssingRegDetails());

                dgvReg.Rows.Clear();

                foreach (VehicalRegistration reg in _regList)
                {
                    dgvReg.Rows.Add();
                    dgvReg["col_regInv", dgvReg.Rows.Count - 1].Value = reg.P_svrt_inv_no;
                    dgvReg["col_regCus", dgvReg.Rows.Count - 1].Value = reg.P_svrt_full_name;
                    dgvReg["col_regItem", dgvReg.Rows.Count - 1].Value = reg.P_srvt_itm_cd;
                    dgvReg["col_regModel", dgvReg.Rows.Count - 1].Value = reg.P_svrt_model;
                    dgvReg["col_regBrand", dgvReg.Rows.Count - 1].Value = reg.P_svrt_brd;
                    dgvReg["col_regDis", dgvReg.Rows.Count - 1].Value = reg.P_svrt_district;
                    dgvReg["col_regPro", dgvReg.Rows.Count - 1].Value = reg.P_svrt_province;
                    dgvReg["col_regEngine", dgvReg.Rows.Count - 1].Value = reg.P_svrt_engine;
                    dgvReg["col_regChasis", dgvReg.Rows.Count - 1].Value = reg.P_svrt_chassis;
                    dgvReg["col_regVal", dgvReg.Rows.Count - 1].Value = reg.P_svrt_reg_val;
                }

                tbOth.SelectedTab = tpReg;
                //dgvReg.DataSource = _regList;

            }
            else if (txtRecType.Text == "ADINS")
            {
                foreach (VehicleInsuarance temp in _insList)
                {
                    if (temp.Svit_itm_cd == txtItem.Text.Trim())
                    {
                        MessageBox.Show("Selected item already exsist.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                _insList.Add(AssingInsDetails());
                dgvIns.Rows.Clear();

                foreach (VehicleInsuarance ins in _insList)
                {
                    dgvIns.Rows.Add();
                    dgvIns["col_insInv", dgvIns.Rows.Count - 1].Value = ins.Svit_inv_no;
                    dgvIns["col_insCus", dgvIns.Rows.Count - 1].Value = ins.Svit_full_name;
                    dgvIns["col_insItem", dgvIns.Rows.Count - 1].Value = ins.Svit_itm_cd;
                    dgvIns["col_insModel", dgvIns.Rows.Count - 1].Value = ins.Svit_model;
                    dgvIns["col_insDistrict", dgvIns.Rows.Count - 1].Value = ins.Svit_district;
                    dgvIns["col_insPro", dgvIns.Rows.Count - 1].Value = ins.Svit_province;
                    dgvIns["col_insCom", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_com;
                    dgvIns["col_insPol", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_polc;
                    dgvIns["col_insEngine", dgvIns.Rows.Count - 1].Value = ins.Svit_engine;
                    dgvIns["col_insChasis", dgvIns.Rows.Count - 1].Value = ins.Svit_chassis;
                    dgvIns["col_insVal", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_val;
                }

                tbOth.SelectedTab = tpInsu;

            }
            else if (txtRecType.Text == "TNSPT")
            {
                foreach (VehicleInsuarance temp in _insList)
                {
                    if (temp.Svit_itm_cd == txtItem.Text.Trim())
                    {
                        MessageBox.Show("Selected item already exsist.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                _insList.Add(AssingInsDetails());
                dgvIns.Rows.Clear();

                foreach (VehicleInsuarance ins in _insList)
                {
                    dgvIns.Rows.Add();
                    dgvIns["col_insInv", dgvIns.Rows.Count - 1].Value = ins.Svit_inv_no;
                    dgvIns["col_insCus", dgvIns.Rows.Count - 1].Value = ins.Svit_full_name;
                    dgvIns["col_insItem", dgvIns.Rows.Count - 1].Value = ins.Svit_itm_cd;
                    dgvIns["col_insModel", dgvIns.Rows.Count - 1].Value = ins.Svit_model;
                    dgvIns["col_insDistrict", dgvIns.Rows.Count - 1].Value = ins.Svit_district;
                    dgvIns["col_insPro", dgvIns.Rows.Count - 1].Value = ins.Svit_province;
                    dgvIns["col_insCom", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_com;
                    dgvIns["col_insPol", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_polc;
                    dgvIns["col_insEngine", dgvIns.Rows.Count - 1].Value = ins.Svit_engine;
                    dgvIns["col_insChasis", dgvIns.Rows.Count - 1].Value = ins.Svit_chassis;
                    dgvIns["col_insVal", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_val;
                }

                tbOth.SelectedTab = tpInsu;

            }
            else if (txtRecType.Text == "VHINS")
            {
                Boolean _isInsuFound = false;

                InvoiceItem _invItm = new InvoiceItem();
                QoutationDetails _quodet = new QoutationDetails();

                //Get invoice details
                string _pBook = "";
                string _pLvl = "";
                string _promoCd = "";
                decimal _itmVal = 0;
                _isInsuFound = false;
                _invItm = CHNLSVC.Sales.GetInvDetByLine(txtInvoice.Text.Trim(), txtItem.Text.Trim(), _invLine);
                if (string.IsNullOrEmpty(txtQuoNo.Text))        //kapila 16/1/2016
                {
                    _invItm = CHNLSVC.Sales.GetInvDetByLine(txtInvoice.Text.Trim(), txtItem.Text.Trim(), _invLine);
                    if (_invItm.Sad_itm_cd == null)
                    {
                        MessageBox.Show("Cannot find invoice item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtItem.Text = "";
                        txtItem.Focus();
                        return;
                    }
                    else
                    {
                        _pBook = _invItm.Sad_pbook;
                        _pLvl = _invItm.Sad_pb_lvl;
                        _promoCd = _invItm.Sad_promo_cd;
                        _itmVal = _invItm.Sad_tot_amt / _invItm.Sad_qty;
                    }
                }
                else
                {
                    _quodet = CHNLSVC.Sales.GetQuotDetByItem(txtQuoNo.Text.Trim(), txtItem.Text.Trim());
                    if (_quodet.Qd_itm_cd == null)
                    {
                        MessageBox.Show("Cannot find quotation item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtItem.Text = "";
                        txtItem.Focus();
                        return;
                    }
                    else
                    {
                        _pBook = _quodet.Qd_pbook;
                        _pLvl = _quodet.Qd_pb_lvl;
                        //   _promoCd = _invItm.Sad_promo_cd;
                        _itmVal = _quodet.Qd_tot_amt / _quodet.Qd_frm_qty;
                    }
                }
                foreach (VehicleInsuarance temp in _insList)
                {
                    if (temp.Svit_itm_cd == txtItem.Text.Trim() && temp.Svit_engine == txtengine.Text.Trim())
                    {
                        MessageBox.Show("Selected engine # already exsist.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

                foreach (ReptPickSerials _serial in _ResList)
                {
                    if (_serial.Tus_itm_cd == txtItem.Text.Trim() && _serial.Tus_ser_1 == txtengine.Text.Trim())
                    {
                        MessageBox.Show("Selected serial is already exsist.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtengine.Focus();
                        return;
                    }
                }

                _insList.Add(AssingInsDetails());
                dgvIns.Rows.Clear();

                foreach (VehicleInsuarance ins in _insList)
                {
                    dgvIns.Rows.Add();
                    dgvIns["col_insInv", dgvIns.Rows.Count - 1].Value = ins.Svit_inv_no;
                    dgvIns["col_insCus", dgvIns.Rows.Count - 1].Value = ins.Svit_full_name;
                    dgvIns["col_insItem", dgvIns.Rows.Count - 1].Value = ins.Svit_itm_cd;
                    dgvIns["col_insModel", dgvIns.Rows.Count - 1].Value = ins.Svit_model;
                    dgvIns["col_insDistrict", dgvIns.Rows.Count - 1].Value = ins.Svit_district;
                    dgvIns["col_insPro", dgvIns.Rows.Count - 1].Value = ins.Svit_province;
                    dgvIns["col_insCom", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_com;
                    dgvIns["col_insPol", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_polc;
                    dgvIns["col_insEngine", dgvIns.Rows.Count - 1].Value = ins.Svit_engine;
                    dgvIns["col_insChasis", dgvIns.Rows.Count - 1].Value = ins.Svit_chassis;
                    dgvIns["col_insVal", dgvIns.Rows.Count - 1].Value = ins.Svit_ins_val;
                }

                tbOth.SelectedTab = tpInsu;
                //calculate insurarance future rental
                if (_accNo != null && _accNo != "")
                {
                    Int32 _MainInsTerm = 0;
                    Int32 _SubInsTerm = 0;
                    _HpAccount = new HpAccount();
                    _HpAccount = CHNLSVC.Sales.GetHP_Account_onAccNo(_accNo);
                    List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                    if (_Saleshir.Count > 0)
                    {
                        foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                        {
                            _Htype = _one.Mpi_cd;
                            _Hvalue = _one.Mpi_val;

                            _SchemeDetails = CHNLSVC.Sales.getSchemeDetails(_Htype, _Hvalue, 1, _HpAccount.Hpa_sch_cd);

                            if (_SchemeDetails.Hsd_cd != null)
                            {
                                if (_SchemeDetails.Hsd_veh_insu_term != null)
                                {

                                    _insuTerm = _SchemeDetails.Hsd_veh_insu_term;

                                    if (_SchemeDetails.Hsd_veh_insu_col_term != null)
                                    {
                                        _colTerm = _SchemeDetails.Hsd_veh_insu_col_term;
                                    }
                                    else
                                    {
                                        _colTerm = _insuTerm;
                                    }


                                    _MainInsTerm = _insuTerm / 12;

                                    if (_MainInsTerm > 0)
                                    {

                                        List<MasterSalesPriorityHierarchy> _Saleshir1 = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                                        string _Subchannel = "";
                                        string _typeSubChnl = "SCHNL";

                                        string _Mainchannel = "";
                                        string _typeMainChanl = "CHNL";

                                        string _Pctype = "PC";
                                        string _typePc = BaseCls.GlbUserDefProf;

                                        if (_Saleshir1.Count > 0)
                                        {
                                            _Subchannel = (from _lst in _Saleshir1
                                                           where _lst.Mpi_cd == "SCHNL"
                                                           select _lst.Mpi_val).ToList<string>()[0];


                                            _Mainchannel = (from _lst in _Saleshir1
                                                            where _lst.Mpi_cd == "CHNL"
                                                            select _lst.Mpi_val).ToList<string>()[0];

                                            MasterVehicalInsuranceDefinitionNew _vehIns = new MasterVehicalInsuranceDefinitionNew();
                                            //_vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), 12);
                                            Int32 _HpTerm = 12;

                                            if (!string.IsNullOrEmpty(_promoCd))
                                            {

                                                //check serial + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }
                                                //check pc + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }

                                                //check sub Channel + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }

                                                //Check channel + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }

                                                //check serial
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }
                                                //check pc
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }

                                                //check sub Channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }

                                                //Check channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }


                                                //if (_vehIns.Ins_com_cd != null)
                                                //{
                                                //    _insuAmt = _vehIns.Value * _MainInsTerm;
                                                //}
                                                //else
                                                //{
                                                //    MessageBox.Show("Insuarance definition not found for term 12.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                //    return;
                                                //}
                                            }
                                            else
                                            {
                                                //check serial
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }
                                                //check pc
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }

                                                //check sub Channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }

                                                //Check channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _vehIns.Svid_val * _MainInsTerm;
                                                    _isInsuFound = true;
                                                    goto L56;
                                                }
                                            }

                                            if (_isInsuFound == false)
                                            {
                                                MessageBox.Show("Insuarance definition not found for term 12.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Hirachy not define.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return;
                                        }
                                    }
                                L56:

                                    _SubInsTerm = _insuTerm % 12;

                                    if (_SubInsTerm > 0)
                                    {
                                        _isInsuFound = false;

                                        if ((_SubInsTerm) <= 3)
                                        {
                                            _SubInsTerm = 3;
                                        }
                                        else if ((_SubInsTerm) <= 6)
                                        {
                                            _SubInsTerm = 6;
                                        }
                                        else if ((_SubInsTerm) <= 9)
                                        {
                                            _SubInsTerm = 9;
                                        }
                                        else
                                        {
                                            _SubInsTerm = 12;
                                        }

                                        List<MasterSalesPriorityHierarchy> _Saleshir2 = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                                        string _Subchannel = "";
                                        string _typeSubChnl = "SCHNL";

                                        string _Mainchannel = "";
                                        string _typeMainChanl = "CHNL";

                                        string _Pctype = "PC";
                                        string _typePc = BaseCls.GlbUserDefProf;

                                        if (_Saleshir2.Count > 0)
                                        {
                                            _Subchannel = (from _lst in _Saleshir2
                                                           where _lst.Mpi_cd == "SCHNL"
                                                           select _lst.Mpi_val).ToList<string>()[0];


                                            _Mainchannel = (from _lst in _Saleshir2
                                                            where _lst.Mpi_cd == "CHNL"
                                                            select _lst.Mpi_val).ToList<string>()[0];


                                            MasterVehicalInsuranceDefinitionNew _vehIns = new MasterVehicalInsuranceDefinitionNew();
                                            //_vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _SubInsTerm);

                                            if (!string.IsNullOrEmpty(_promoCd))
                                            {
                                                //check serial + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check pc + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check serial + sub Channel + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check sub Channel + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //Check serial + channel + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //Check channel + promo
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check serial
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check pc
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check serial + sub Channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check sub Channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //Check serial + channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //Check channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }


                                                //if (_vehIns.Ins_com_cd != null)
                                                //{
                                                //    _insuAmt = _vehIns.Value * _MainInsTerm;
                                                //}
                                                //else
                                                //{
                                                //    MessageBox.Show("Insuarance definition not found for term 12.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                //    return;
                                                //}
                                            }
                                            else
                                            {
                                                //check serial
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check pc
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check serial + sub Channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //check sub Channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //Check serial + channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                                //Check channel
                                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _SubInsTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                                if (_vehIns.Svid_itm != null)
                                                {
                                                    _insuAmt = _insuAmt + _vehIns.Svid_val;
                                                    _isInsuFound = true;
                                                    goto L57;
                                                }
                                            }


                                            //if (_vehIns.Ins_com_cd != null)
                                            //{
                                            //    _insuAmt = _insuAmt + _vehIns.Value;
                                            //}
                                            //else
                                            //{
                                            //    MessageBox.Show("Insuarance definition not found for term." + _SubInsTerm, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            //    return;
                                            //}

                                            if (_isInsuFound == false)
                                            {
                                                MessageBox.Show("Insuarance definition not found for term." + _SubInsTerm, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return;
                                            }
                                        }

                                    }


                                L57:

                                    for (int x = 1; x <= _colTerm; x++)
                                    {

                                        HpSheduleDetails _tempShedule = new HpSheduleDetails();
                                        _tempShedule.Hts_seq = 0;
                                        _tempShedule.Hts_acc_no = _accNo;
                                        _tempShedule.Hts_rnt_no = x;
                                        _tempShedule.Hts_due_dt = DateTime.Today.Date;
                                        _tempShedule.Hts_rnt_val = 0;
                                        _tempShedule.Hts_intr = 0; //double.Parse(number.ToString("####0.00"));
                                        _tempShedule.Hts_vat = 0;
                                        _tempShedule.Hts_ser = 0;
                                        _tempShedule.Hts_ins = 0;
                                        _tempShedule.Hts_sdt = 0;
                                        _tempShedule.Hts_cre_by = BaseCls.GlbUserID;
                                        _tempShedule.Hts_cre_dt = DateTime.Today.Date;
                                        _tempShedule.Hts_mod_by = BaseCls.GlbUserID;
                                        _tempShedule.Hts_mod_dt = DateTime.Today.Date;
                                        _tempShedule.Hts_upload = false;
                                        _tempShedule.Hts_veh_insu = _insuAmt / _colTerm;
                                        _tempShedule.Hts_tot_val = _insuAmt / _colTerm;
                                        _sheduleDetails.Add(_tempShedule);
                                    }

                                    goto L6;
                                }
                                else
                                {

                                    goto L6;
                                }

                            }
                        }
                    L6: I = 2;
                    }
                }

            }

            if (!string.IsNullOrEmpty(txtItem.Text))
            {

                if ((txtRecType.Text == "ADVAN") || (txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS"))
                {
                    ReptPickSerials _tempItem = new ReptPickSerials();
                    _tempItem = CHNLSVC.Inventory.GetAvailableSerIDInformation(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), txtengine.Text.Trim(), string.Empty, string.Empty);

                    if (_tempItem != null)
                    {
                        MasterItem _itemList = new MasterItem();
                        _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());

                        _isRes = true;
                        _tempItem.Tus_itm_desc = _itemList.Mi_shortdesc;
                        _tempItem.Tus_itm_model = _itemList.Mi_model;
                        _tempItem.Tus_itm_brand = _itemList.Mi_brand;
                        if (!string.IsNullOrEmpty(txtQuoNo.Text)) //kapila 8/1/2016
                            _tempItem.Tus_base_doc_no = txtQuoNo.Text;
                        else
                            _tempItem.Tus_base_doc_no = txtInvoice.Text.Trim();

                        _tempItem.Tus_base_itm_line = _invLine;
                        if (_invType == "HS")
                        {
                            _tempItem.Tus_isapp = 0;
                            _tempItem.Tus_iscovernote = 0;
                        }
                        else
                        {
                            _tempItem.Tus_isapp = 1;
                            _tempItem.Tus_iscovernote = 1;
                        }

                        //2012/12/24
                        //if no serial
                        _tempItem.Tus_com = BaseCls.GlbUserComCode;
                        _tempItem.Tus_loc = BaseCls.GlbUserDefLoca;
                        if (_tempItem.Tus_itm_cd == "" || _tempItem.Tus_itm_cd == null)
                        {
                            _isRes = false;
                            _tempItem.Tus_itm_cd = txtItem.Text;
                        }

                        //END
                        if (_tempItem.Tus_itm_cd != "" || _tempItem.Tus_itm_cd != null)
                        {
                            _ResList.Add(_tempItem);
                        }

                        dgvItem.Rows.Clear();

                        if (_ResList != null)
                        {
                            foreach (ReptPickSerials ser in _ResList)
                            {
                                dgvItem.Rows.Add();
                                dgvItem["col_itmItem", dgvItem.Rows.Count - 1].Value = ser.Tus_itm_cd;
                                dgvItem["col_itmDesc", dgvItem.Rows.Count - 1].Value = ser.Tus_itm_desc;
                                dgvItem["col_itmModel", dgvItem.Rows.Count - 1].Value = ser.Tus_itm_model;
                                dgvItem["col_itmStatus", dgvItem.Rows.Count - 1].Value = ser.Tus_itm_stus;
                                dgvItem["col_itmSerial", dgvItem.Rows.Count - 1].Value = ser.Tus_ser_1;
                                dgvItem["col_itmOthSerial", dgvItem.Rows.Count - 1].Value = ser.Tus_ser_2;
                            }
                        }
                    }
                    else
                    {
                        if (txtRecType.Text == "ADVAN")
                        {
                            MasterItem _itemList = new MasterItem();
                            _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());

                            _isRes = false;
                            _tempItem.Tus_itm_desc = _itemList.Mi_shortdesc;
                            _tempItem.Tus_itm_model = _itemList.Mi_model;
                            _tempItem.Tus_itm_brand = _itemList.Mi_brand;
                            _tempItem.Tus_base_doc_no = null;
                            _tempItem.Tus_base_itm_line = 0;
                            _tempItem.Tus_isapp = 1;
                            _tempItem.Tus_iscovernote = 1;



                            //2012/12/24
                            //if no serial
                            _tempItem.Tus_com = BaseCls.GlbUserComCode;
                            _tempItem.Tus_loc = BaseCls.GlbUserDefLoca;
                            if (_tempItem.Tus_itm_cd == "" || _tempItem.Tus_itm_cd == null)
                            {
                                _isRes = false;
                                _tempItem.Tus_itm_cd = txtItem.Text;
                            }

                            //END
                            if (_tempItem.Tus_itm_cd != "" || _tempItem.Tus_itm_cd != null)
                            {
                                _ResList.Add(_tempItem);
                            }

                            dgvItem.Rows.Clear();

                            if (_ResList != null)
                            {
                                foreach (ReptPickSerials ser in _ResList)
                                {
                                    dgvItem.Rows.Add();
                                    dgvItem["col_itmItem", dgvItem.Rows.Count - 1].Value = ser.Tus_itm_cd;
                                    dgvItem["col_itmDesc", dgvItem.Rows.Count - 1].Value = ser.Tus_itm_desc;
                                    dgvItem["col_itmModel", dgvItem.Rows.Count - 1].Value = ser.Tus_itm_model;
                                    dgvItem["col_itmStatus", dgvItem.Rows.Count - 1].Value = ser.Tus_itm_stus;
                                    dgvItem["col_itmSerial", dgvItem.Rows.Count - 1].Value = ser.Tus_ser_1;
                                    dgvItem["col_itmOthSerial", dgvItem.Rows.Count - 1].Value = ser.Tus_ser_2;
                                }
                            }
                        }
                    }
                }
            }

            _Amt = Convert.ToDecimal(txtPayment.Text);
            ucPayModes1.TotalAmount = ucPayModes1.TotalAmount + _Amt;
            ucPayModes1.Amount.Text = Convert.ToString(ucPayModes1.TotalAmount + _Amt - Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text));
            ucPayModes1.Date = Convert.ToDateTime(dtpRecDate.Value.Date);

            if (txtRecType.Text == "DEBT" || txtRecType.Text == "VHREG" || txtRecType.Text == "VHINS" || txtRecType.Text == "TNSPT")
            {
                if (!string.IsNullOrEmpty(txtQuoNo.Text))  //kapila 8/1/2016
                    ucPayModes1.InvoiceNo = txtQuoNo.Text;
                else
                    ucPayModes1.InvoiceNo = txtInvoice.Text.Trim();
                ucPayModes1.Customer_Code = txtCusCode.Text;
                ucPayModes1.IsZeroAllow = true;
                _invNo = txtInvoice.Text.Trim();

            }
            ucPayModes1.LoadData();
            txtTotal.Text = Convert.ToDecimal(ucPayModes1.TotalAmount).ToString();
            txtRecType.Enabled = false;

            if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            {
                txtInvoice.Enabled = false;
                txtBalance.ReadOnly = true;
            }
            else
            {
                txtInvoice.Text = "";
                txtBalance.Text = "0.00";
            }

            txtItem.Text = "";
            txtengine.Text = "";
            txtChasis.Text = "";
            txtQuoNo.Text = "";
            chkDel.Checked = false;
            chkDel.Enabled = true;
            txtInsCom.Text = "";
            txtInsPol.Text = "";
            txtPayment.Text = "0.00";
            lblExtraChg.Text = "0.00";
            chkAnnual.Checked = false;

            chkOth.Enabled = false;
            txtOthSR.Enabled = false;
            btnOthSR.Enabled = false;

            if (txtRecType.Text == "ADVAN")
            {
                tbOth.SelectedTab = tpItem;
                Boolean _isAlw = false;
                if (BaseCls.GlbUserDefProf == "CREDT")
                {
                    BindingSource _bind = (BindingSource)gvInvoiceItem.DataSource;
                    List<InvoiceItem> _tmpList = new List<InvoiceItem>();
                    _tmpList = _bind.DataSource as List<InvoiceItem>;
                    _invoiceItemList = _tmpList;

                    foreach (InvoiceItem itm in _invoiceItemList)
                    {
                        _isAlw = false;
                        DataTable _alwitm = CHNLSVC.Sales.GetAlwItm(itm.Sad_itm_cd);
                         if (_alwitm != null && _alwitm.Rows.Count > 0)
                         {
                             _isAlw = true;
                         }

                        if (_isAlw == false)
                        {
                            goto L555;
                        }
                    }

                L555:
                    if (_isAlw == true)
                    {
                        if (ucPayModes1.TotalAmount == Convert.ToDecimal(lblGrndTotalAmount.Text))
                        {
                            chklaunchparticipate.Visible = true;
                            lblBalInv.Visible = true;
                            lblBalLable.Visible = true;
                            chklaunchparticipate.Enabled = true;

                            DataTable _curInv = CHNLSVC.Sales.GetCurInvt();
                            Int32 _balanceInt =0;
                            if (_curInv != null && _curInv.Rows.Count > 0)
                                _balanceInt = Convert.ToInt32(_curInv.Rows[0].Field<Int32>("sai_tot")) - Convert.ToInt32(_curInv.Rows[0].Field<Int32>("sai_cur"));
                            lblBalInv.Text = Convert.ToString(_balanceInt);
                        }
                        else
                        {
                            chklaunchparticipate.Enabled = false;
                        }
                    }
                }
            }
        }

        private VehicleInsuarance AssingInsDetails()
        {
            VehicleInsuarance _tempIns = new VehicleInsuarance();
            MasterItem _itemList = new MasterItem();
            _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);

            _tempIns.Svit_seq = 1;
            _tempIns.Svit_ref_no = "na";
            _tempIns.Svit_com = BaseCls.GlbUserComCode;
            _tempIns.Svit_pc = BaseCls.GlbUserDefProf;
            _tempIns.Svit_dt = Convert.ToDateTime(dtpRecDate.Value).Date;
            if (!string.IsNullOrEmpty(txtQuoNo.Text))  //kapila 8/1/2016
                _tempIns.Svit_inv_no = txtQuoNo.Text;
            else
                _tempIns.Svit_inv_no = txtInvoice.Text.Trim();

            _tempIns.Svit_sales_tp = _invType;
            _tempIns.Svit_ins_com = txtInsCom.Text.Trim();
            _tempIns.Svit_ins_polc = txtInsPol.Text.Trim();
            _tempIns.Svit_ins_val = Convert.ToDecimal(txtPayment.Text);
            _tempIns.Svit_cust_cd = txtCusCode.Text.Trim();
            _tempIns.Svit_cust_title = "Mr.";
            _tempIns.Svit_last_name = txtCusName.Text.Trim();
            _tempIns.Svit_full_name = txtCusName.Text.Trim();
            _tempIns.Svit_initial = "";
            _tempIns.Svit_add01 = txtCusAdd1.Text.Trim();
            _tempIns.Svit_add02 = txtCusAdd2.Text.Trim();
            _tempIns.Svit_city = "";
            _tempIns.Svit_district = cmbDistrict.Text;
            _tempIns.Svit_province = txtProvince.Text.Trim();
            _tempIns.Svit_contact = txtMobile.Text.Trim();
            _tempIns.Svit_model = _itemList.Mi_model;
            _tempIns.Svit_brd = _itemList.Mi_brand;
            _tempIns.Svit_chassis = txtChasis.Text.Trim();
            _tempIns.Svit_engine = txtengine.Text.Trim();
            _tempIns.Svit_capacity = "0";
            _tempIns.Svit_cre_by = BaseCls.GlbUserID;
            _tempIns.Svit_cre_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_mod_by = BaseCls.GlbUserID;
            _tempIns.Svit_mod_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_cvnt_issue = 0;
            _tempIns.Svit_cvnt_no = "";
            _tempIns.Svit_cvnt_days = 0;
            _tempIns.Svit_cvnt_from_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_cvnt_to_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_cvnt_by = "";
            _tempIns.Svit_cvnt_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_ext_issue = false;
            _tempIns.Svit_ext_no = "";
            _tempIns.Svit_ext_days = 0;
            _tempIns.Svit_ext_from_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_ext_to_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_ext_by = "";
            _tempIns.Svit_ext_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_veh_reg_no = "";
            _tempIns.Svit_reg_by = "";
            _tempIns.Svit_reg_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_polc_stus = false;
            _tempIns.Svit_polc_no = "";
            _tempIns.Svit_eff_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_expi_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_net_prem = 0;
            _tempIns.Svit_srcc_prem = 0;
            _tempIns.Svit_oth_val = 0;
            _tempIns.Svit_tot_val = 0;
            _tempIns.Svit_polc_by = "";
            _tempIns.Svit_polc_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_dbt_no = "";
            _tempIns.Svit_dbt_set_stus = false;
            _tempIns.Svit_dbt_by = "";
            _tempIns.Svit_dbt_dt = Convert.ToDateTime("31/Dec/2999");
            _tempIns.Svit_veg_ref = "";
            _tempIns.Svit_itm_cd = txtItem.Text.Trim();
            return _tempIns;

        }

        private VehicalRegistration AssingRegDetails()
        {
            VehicalRegistration _tempReg = new VehicalRegistration();
            MasterItem _itemList = new MasterItem();
            _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);

            _tempReg.P_seq = 1;
            _tempReg.P_srvt_ref_no = "na";
            _tempReg.P_svrt_com = BaseCls.GlbUserComCode;
            _tempReg.P_svrt_pc = BaseCls.GlbUserDefProf;
            _tempReg.P_svrt_dt = Convert.ToDateTime(dtpRecDate.Value).Date;
            if (!string.IsNullOrEmpty(txtQuoNo.Text))  //kapila 8/1/2016
                _tempReg.P_svrt_inv_no = txtQuoNo.Text;
            else
                _tempReg.P_svrt_inv_no = txtInvoice.Text.Trim();
            _tempReg.P_svrt_sales_tp = _invType;
            _tempReg.P_svrt_reg_val = Convert.ToDecimal(txtPayment.Text);
            _tempReg.P_svrt_claim_val = _regAmt;
            _tempReg.P_svrt_id_tp = "NIC";
            _tempReg.P_svrt_id_ref = txtNIC.Text.Trim();
            _tempReg.P_svrt_cust_cd = txtCusCode.Text.Trim();
            _tempReg.P_svrt_cust_title = "Mr.";
            _tempReg.P_svrt_last_name = txtCusName.Text.Trim();
            _tempReg.P_svrt_full_name = txtCusName.Text.Trim();
            _tempReg.P_svrt_initial = "";
            _tempReg.P_svrt_add01 = txtCusAdd1.Text.Trim();
            _tempReg.P_svrt_add02 = txtCusAdd2.Text.Trim();
            _tempReg.P_svrt_city = "";
            _tempReg.P_svrt_district = cmbDistrict.Text;
            _tempReg.P_svrt_province = txtProvince.Text.Trim();
            _tempReg.P_svrt_contact = txtMobile.Text.Trim();
            _tempReg.P_svrt_model = _itemList.Mi_model;
            _tempReg.P_svrt_brd = _itemList.Mi_brand;
            _tempReg.P_svrt_chassis = txtChasis.Text.Trim();
            _tempReg.P_svrt_engine = txtengine.Text.Trim();
            _tempReg.P_svrt_color = _itemList.Mi_color_ext;
            _tempReg.P_svrt_fuel = "";
            _tempReg.P_svrt_capacity = 0;
            _tempReg.P_svrt_unit = "";
            _tempReg.P_svrt_horse_power = 0;
            _tempReg.P_svrt_wheel_base = 0;
            _tempReg.P_svrt_tire_front = "";
            _tempReg.P_svrt_tire_rear = "";
            _tempReg.P_svrt_weight = 0;
            _tempReg.P_svrt_man_year = 0;
            _tempReg.P_svrt_import = "";
            _tempReg.P_svrt_authority = "";
            _tempReg.P_svrt_country = _itemList.Mi_country_cd;
            _tempReg.P_svrt_custom_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_clear_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_declear_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_importer = "";
            _tempReg.P_svrt_importer_add01 = "";
            _tempReg.P_svrt_importer_add02 = "";
            _tempReg.P_svrt_cre_bt = BaseCls.GlbUserID;
            _tempReg.P_svrt_cre_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_prnt_stus = 0;
            _tempReg.P_svrt_prnt_by = "";
            _tempReg.P_svrt_prnt_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_srvt_rmv_stus = 0;
            _tempReg.P_srvt_rmv_by = "";
            _tempReg.P_srvt_rmv_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_veh_reg_no = "";
            _tempReg.P_svrt_reg_by = "";
            _tempReg.P_svrt_reg_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_image = "";
            _tempReg.P_srvt_cust_stus = 0;
            _tempReg.P_srvt_cust_by = "";
            _tempReg.P_srvt_cust_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_srvt_cls_stus = 0;
            _tempReg.P_srvt_cls_by = "";
            _tempReg.P_srvt_cls_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_srvt_insu_ref = "";
            _tempReg.P_srvt_itm_cd = txtItem.Text.Trim();
            return _tempReg;

        }


        private void chkAnnual_CheckedChanged(object sender, EventArgs e)
        {
            Int32 _HpTerm = 0;
            Boolean _isInsuFound = false;
            MasterVehicalInsuranceDefinitionNew _vehIns = new MasterVehicalInsuranceDefinitionNew();

            if (_accNo != null && _accNo != "")
            {
                _HpAccount = new HpAccount();
                _HpAccount = CHNLSVC.Sales.GetHP_Account_onAccNo(_accNo);

                _HpTerm = _HpAccount.Hpa_term;

                if (_HpTerm < 12)
                {
                    _HpTerm = 12;
                }
                else
                {
                    MessageBox.Show("This option is only valid for under 12 months accounts.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtBalance.Text = "0.00";
                    txtPayment.Text = "0.00";
                    lblExtraChg.Text = "0.00";
                    return;
                }

                InvoiceItem _invItm = new InvoiceItem();

                //Get invoice details
                string _pBook = "";
                string _pLvl = "";
                string _promoCd = "";
                decimal _itmVal = 0;
                _isInsuFound = false;

                _invItm = CHNLSVC.Sales.GetInvDetByLine(txtInvoice.Text.Trim(), txtItem.Text.Trim(), _invLine);
                if (_invItm.Sad_itm_cd == null)
                {
                    MessageBox.Show("Cannot find invoice item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtItem.Text = "";
                    txtItem.Focus();
                    return;
                }
                else
                {
                    _pBook = _invItm.Sad_pbook;
                    _pLvl = _invItm.Sad_pb_lvl;
                    _promoCd = _invItm.Sad_promo_cd;
                    _itmVal = _invItm.Sad_tot_amt / _invItm.Sad_qty;
                }

                List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                string _Subchannel = "";
                string _typeSubChnl = "SCHNL";

                string _Mainchannel = "";
                string _typeMainChanl = "CHNL";

                string _Pctype = "PC";
                string _typePc = BaseCls.GlbUserDefProf;

                if (_Saleshir.Count > 0)
                {
                    _Subchannel = (from _lst in _Saleshir
                                   where _lst.Mpi_cd == "SCHNL"
                                   select _lst.Mpi_val).ToList<string>()[0];


                    _Mainchannel = (from _lst in _Saleshir
                                    where _lst.Mpi_cd == "CHNL"
                                    select _lst.Mpi_val).ToList<string>()[0];

                    if (!string.IsNullOrEmpty(_promoCd))
                    {
                        //check serial + promo
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //check pc + promo
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }

                        //check serial + sub Channel + promo
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }

                        //check sub Channel + promo
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //Check serial + channel + promo
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, txtengine.Text);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //Check channel + promo
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, _promoCd, null);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //check serial + pc
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //check pc
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //check serial + sub Channel
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //check sub Channel
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //Check serial + channel
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //Check channel
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                    }
                    else
                    {
                        //check serial + pc
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //check pc
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //check serial + sub Channel
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //check sub Channel
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //Check serial + channel
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, txtengine.Text);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                        //Check channel
                        _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), "HS", txtItem.Text.Trim(), _HpTerm, _pBook, _pLvl, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                        if (_vehIns.Svid_itm != null)
                        {
                            txtBalance.Text = _vehIns.Svid_val.ToString("0.00");
                            txtPayment.Text = _vehIns.Svid_val.ToString("0.00");
                            _isInsuFound = true;
                            goto L58;
                        }
                    }
                    //_vehIns = CHNLSVC.Sales.GetVehInsDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, BaseCls.GlbUserDefProf, txtInsCom.Text.Trim(), txtInsPol.Text.Trim(), _HpTerm);
                }

                if (_isInsuFound == false)
                {
                    MessageBox.Show("Insuarance amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtBalance.Text = "0.00";
                    txtPayment.Text = "0.00";
                    lblExtraChg.Text = "0.00";
                    txtInsPol.Text = "";
                    txtInsPol.Focus();
                    return;
                }
            }
        L58: Int32 i = 0;

            //if (_vehIns.Ins_com_cd != null)
            //{
            //    txtBalance.Text = _vehIns.Value.ToString("0.00");
            //    txtPayment.Text = _vehIns.Value.ToString("0.00");
            //}
            //else
            //{
            //    MessageBox.Show("Insuarance amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //    txtBalance.Text = "0.00";
            //    txtPayment.Text = "0.00";
            //    txtInsPol.Text = "";
            //    txtInsPol.Focus();
            //    return;
            //}
        }

        //private void radioButtonManual_CheckedChanged(object sender, EventArgs e)
        //{
        //    if (radioButtonManual.Checked == true)
        //    {
        //        txtManual.Enabled = true;
        //        Int32 _NextNo = CHNLSVC.Inventory.GetNextManualDocNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC");
        //        if (_NextNo != 0)
        //        {
        //            txtManual.Text = _NextNo.ToString();
        //        }
        //        else
        //        {
        //            txtManual.Text = "";
        //        }
        //    }

        //    else
        //    {
        //        if (BaseCls.GlbIsManChkLoc == true)
        //        {
        //            txtManual.Text = "";
        //            txtManual.Enabled = false;
        //        }
        //        else
        //        {
        //            txtManual.Text = "";
        //            txtManual.Enabled = true;
        //        }


        //    }
        //}

        private void btnClear_Click(object sender, EventArgs e)
        {
            Clear_Data();
        }


        private void dgvIns_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (ucPayModes1.MainGrid.Rows.Count > 0)
            {
                MessageBox.Show("Cannot remove,due to payments are already added.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            return;

            if (MessageBox.Show("Do you want to remove selected engine # ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.Yes)
            {
                if (_insList == null || _insList.Count == 0) return;

                int row_id = e.RowIndex;
                string _serial = dgvIns.Rows[e.RowIndex].Cells["col_insEngine"].Value.ToString();
                string _item = dgvIns.Rows[e.RowIndex].Cells["col_insItem"].Value.ToString();

                List<VehicleInsuarance> _temp = new List<VehicleInsuarance>();
                _temp = _insList;


                _temp.RemoveAll(x => x.Svit_itm_cd == _item && x.Svit_engine == _serial);
                _insList = _temp;

                Int32 I = e.RowIndex;
                dgvIns.Rows.RemoveAt(I);

            }
        }

        private void dgvReg_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (ucPayModes1.MainGrid.Rows.Count > 0)
            {
                MessageBox.Show("Cannot remove,due to payments are already added.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (MessageBox.Show("Do you want to remove selected engine # ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.Yes)
            {
                if (_regList == null || _regList.Count == 0) return;

                int row_id = e.RowIndex;
                string _serial = dgvReg.Rows[e.RowIndex].Cells["col_regEngine"].Value.ToString();
                string _item = dgvReg.Rows[e.RowIndex].Cells["col_regItem"].Value.ToString();


               decimal _Amt = Convert.ToDecimal( dgvReg.Rows[e.RowIndex].Cells["col_regVal"].Value.ToString());
                
                ucPayModes1.TotalAmount = ucPayModes1.TotalAmount - _Amt;
                ucPayModes1.Amount.Text = Convert.ToString(ucPayModes1.TotalAmount  );
                ucPayModes1.Date = Convert.ToDateTime(dtpRecDate.Value.Date);
                ucPayModes1.LoadData();
                txtTotal.Text = Convert.ToDecimal(ucPayModes1.TotalAmount).ToString();

                //ucPayModes1.Balance =  ucPayModes1.TotalAmount;
                //txtTotal.Text = Convert.ToDecimal(ucPayModes1.TotalAmount).ToString();
                //ucPayModes1.lblbalance 
                List<VehicalRegistration> _temp = new List<VehicalRegistration>();
                _temp = _regList;


                _temp.RemoveAll(x => x.P_srvt_itm_cd == _item && x.P_svrt_engine == _serial);
                _regList = _temp;

                Int32 I = e.RowIndex;
                dgvReg.Rows.RemoveAt(I);

            }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtRecNo.Text))
            {
                MessageBox.Show("Please select receipt number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtRecNo.Focus();
                return;
            }

            if (_RecStatus == false)
            {
                MessageBox.Show("This receipt is already cancelled.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (_sunUpload == true)
            {
                MessageBox.Show("Cannot cancel.Already uploaded to accounts.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (txtRecType.Text == "ADVAN")
            {
                DataTable _adv = CHNLSVC.Sales.CheckAdvanForIntr(BaseCls.GlbUserComCode, txtRecNo.Text.Trim());
                if (_adv != null && _adv.Rows.Count > 0)
                {
                    MessageBox.Show("This advance receipt is already picked for a inter-transfer. You are not allow to cancel.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtRecNo.Text = "";
                    txtRecNo.Focus();
                    return;
                }

                if (_usedAmt > 0)
                {
                    MessageBox.Show("This advance recipet is already utilized. You are not allow to cancel.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtRecNo.Text = "";
                    txtRecNo.Focus();
                    return;
                }

            }



            if (txtRecType.Text == "VHREG")
            {
                List<VehicalRegistration> _tempList = new List<VehicalRegistration>();
                _tempList = CHNLSVC.Sales.GetVehicalRegByRefNo(txtRecNo.Text.Trim());

                foreach (VehicalRegistration temp in _tempList)
                {
                    if (temp.P_srvt_rmv_stus == 1)
                    {
                        MessageBox.Show("Cannot cancel Receipt.Documents are already send to the RMV. Engine # : " + temp.P_svrt_engine, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    else if (temp.P_svrt_prnt_stus == 2)
                    {
                        MessageBox.Show("Cannot cancel Receipt. Engine # : " + temp.P_svrt_engine + " already cancel.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }

            }

            if (txtRecType.Text == "VHINS")
            {
                List<VehicleInsuarance> _tempInsuList = new List<VehicleInsuarance>();
                _tempInsuList = CHNLSVC.Sales.GetVehicalInsByRefNo(txtRecNo.Text.Trim());

                foreach (VehicleInsuarance temp in _tempInsuList)
                {
                    if (temp.Svit_polc_stus == true)
                    {
                        MessageBox.Show("Cannot cancel Receipt.Policy is already issued. Engine # : " + temp.Svit_engine, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    else if (temp.Svit_cvnt_issue == 2)
                    {
                        MessageBox.Show("Cannot cancel Receipt. Engine # : " + temp.Svit_engine + " already cancel.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                }
            }
            bool _allowCurrentTrans = false;
            if (IsAllowBackDateForModule(BaseCls.GlbUserComCode, string.Empty, BaseCls.GlbUserDefProf, this.GlbModuleName, dtpRecDate, lblBackDateInfor, dtpRecDate.Value.Date.ToString(), out _allowCurrentTrans) == false)
            {
                if (_allowCurrentTrans == true)
                {
                    if (dtpRecDate.Value.Date != DateTime.Now.Date)
                    {
                        //dtpRecDate.Enabled = true;
                        MessageBox.Show("Back date not allow for selected date!", "Process Terminated", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //dtpRecDate.Focus();
                        return;
                    }
                }
                else
                {
                    //dtpRecDate.Enabled = true;
                    MessageBox.Show("Back date not allow for selected date!", "Process Terminated", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //dtpRecDate.Focus();
                    return;
                }
            }

            //if (Convert.ToDateTime(dtpRecDate.Value).Date != (DateTime.Now.Date))
            //{
            //    MessageBox.Show("Cannot cancel previous receipt.Please get a backdate.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //    return;
            //}

            if (MessageBox.Show("Are you sure ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No) return;

            this.Cursor = Cursors.WaitCursor;
            UpdateRecStatus(false);
            this.Cursor = Cursors.Default;
        }

        private void UpdateRecStatus(Boolean _RecUpdateStatus)
        {
            Int32 row_aff = 0;
            string _msg = string.Empty;

            RecieptHeader _UpdateReceipt = new RecieptHeader();
            _UpdateReceipt.Sar_receipt_no = txtRecNo.Text.Trim();
            _UpdateReceipt.Sar_act = _RecUpdateStatus;
            _UpdateReceipt.Sar_com_cd = BaseCls.GlbUserComCode;
            _UpdateReceipt.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
            _UpdateReceipt.Sar_mod_by = BaseCls.GlbUserID;
            _UpdateReceipt.Sar_receipt_type = txtRecType.Text.Trim();
            _UpdateReceipt.Sar_debtor_cd = txtCusCode.Text.Trim();
            _UpdateReceipt.Sar_debtor_name = txtCusName.Text.Trim();
            _UpdateReceipt.Sar_debtor_add_1 = txtCusAdd1.Text.Trim();
            _UpdateReceipt.Sar_debtor_add_2 = txtCusAdd2.Text.Trim();
            _UpdateReceipt.Sar_mob_no = txtMobile.Text.Trim();
            _UpdateReceipt.Sar_anal_1 = cmbDistrict.Text.Trim();
            _UpdateReceipt.Sar_anal_2 = txtProvince.Text.Trim();
            _UpdateReceipt.Sar_receipt_date = Convert.ToDateTime(dtpRecDate.Text).Date;
            _UpdateReceipt.Sar_tot_settle_amt = Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text);
            if (chkOth.Checked == true)
            {
                _UpdateReceipt.Sar_is_oth_shop = true;
                _UpdateReceipt.Sar_oth_sr = txtOthSR.Text;
            }

            row_aff = (Int32)CHNLSVC.Sales.ReceiptCancelProcess(_UpdateReceipt, _list, _regList, _insList, _gvDetails, _tmpRecItem);

            if (row_aff == 1)
            {
                MessageBox.Show("Receipt cancelled successfully.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                if (txtRecType.Text == "VHREG" || txtRecType.Text == "VHINS")
                {
                    row_aff = (Int32)CHNLSVC.Sales.ReceiptCancelInfo(_UpdateReceipt, _regList, _insList);
                }
                Clear_Data();
            }
            else
            {
                if (!string.IsNullOrEmpty(_msg))
                {
                    MessageBox.Show(_msg, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.Cursor = Cursors.Default;
                }
                else
                {
                    MessageBox.Show("Fail", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.Cursor = Cursors.Default;
                }
            }
        }

        private void txtRecType_DoubleClick(object sender, EventArgs e)
        {
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ReceiptType);
            DataTable _result = CHNLSVC.CommonSearch.GetReceiptTypes(_CommonSearch.SearchParams, null, null);
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtRecType;
            _CommonSearch.ShowDialog();
            txtRecType.Select();
        }

        private void txtDivision_DoubleClick(object sender, EventArgs e)
        {
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Division);
            DataTable _result = CHNLSVC.CommonSearch.GetDivision(_CommonSearch.SearchParams, null, null);
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtDivision;
            _CommonSearch.ShowDialog();
            txtDivision.Select();
        }

        private void txtRecNo_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(txtRecType.Text))
                {
                    MessageBox.Show("Please select receipt type.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtRecType.Focus();
                    return;
                }

                CommonSearch.CommonSearchDate _CommonSearch = new CommonSearch.CommonSearchDate();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ReceiptDate);

                DataTable _result = CHNLSVC.CommonSearch.GetReceiptsDate(_CommonSearch.SearchParams, null, null, dtpRecDate.Value.Date.AddMonths(-1), dtpRecDate.Value.Date);
                _CommonSearch.dtpFrom.Value = dtpRecDate.Value.Date.AddMonths(-1);
                _CommonSearch.dtpTo.Value = dtpRecDate.Value.Date;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtRecNo;
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.ShowDialog();
                txtRecNo.Select();

                //CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                //_CommonSearch.ReturnIndex = 0;
                //_CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Receipt);
                //DataTable _result = CHNLSVC.CommonSearch.GetReceipts(_CommonSearch.SearchParams, null, null);
                //_CommonSearch.dvResult.DataSource = _result;
                //_CommonSearch.BindUCtrlDDLData(_result);
                //_CommonSearch.obj_TragetTextBox = txtRecNo;
                //_CommonSearch.IsSearchEnter = true;
                //_CommonSearch.ShowDialog();
                //txtRecNo.Select();
            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtCusCode_DoubleClick(object sender, EventArgs e)
        {
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.CustomerCommon);
            DataTable _result = CHNLSVC.CommonSearch.GetCustomerCommon(_CommonSearch.SearchParams, null, null);
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtCusCode;
            _CommonSearch.IsSearchEnter = true;
            _CommonSearch.ShowDialog();
            txtCusCode.Select();
        }

        private void txtInvoice_DoubleClick(object sender, EventArgs e)
        {
            if (txtRecType.Text == "DEBT")
            {

                if (string.IsNullOrEmpty(txtCusCode.Text))
                {
                    MessageBox.Show("Please select customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtCusCode.Focus();
                    return;
                }

                DataTable _result = null;
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                if (chkOth.Checked == true)
                {
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.OutstandingInvOth);
                    _result = CHNLSVC.CommonSearch.GetOutstandingInvoice(_CommonSearch.SearchParams, null, null);
                }
                else
                {
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.OutstandingInv);
                    _result = CHNLSVC.CommonSearch.GetOutstandingInvoice(_CommonSearch.SearchParams, null, null);
                }
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtInvoice;
                _CommonSearch.ShowDialog();
                txtInvoice.Select();
            }
            else if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") || (txtRecType.Text == "ADINS") || (txtRecType.Text == "TNSPT"))
            {
                if (string.IsNullOrEmpty(txtCusCode.Text))
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SalesInvoice);
                    DataTable _result = CHNLSVC.CommonSearch.GetAllInvoiceSearchData(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtInvoice;
                    _CommonSearch.ShowDialog();
                    txtInvoice.Select();
                }
                else
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceByCus);
                    DataTable _result = CHNLSVC.CommonSearch.GetInvoicebyCustomer(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtInvoice;
                    _CommonSearch.ShowDialog();
                    txtInvoice.Select();
                }
            }
            else if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            {
                if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.RVT.ToString())
                {
                    txtInvoice.Text = GetHpAccountNo(BaseCls.GlbUserDefProf);
                }
                else if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.PRCDF.ToString())
                {
                    if (string.IsNullOrEmpty(txtInvoice.Text))
                    {
                        GetInvoiceNumber(txtCusCode.Text);
                    }
                    else
                    {
                        if (string.IsNullOrEmpty(txtCusCode.Text))
                        {
                            MessageBox.Show("Please select a customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtCusCode.Focus();
                            return;
                        }
                    }

                }
                else if (txtSubReceiptTp.Text.ToUpper() == MstRecSubTp.ReceiptTypes.JOB.ToString())
                {
                    SearchJobNo();
                }
            }
        }

        private void txtItem_DoubleClick(object sender, EventArgs e)
        {
            if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") || (txtRecType.Text == "ADINS") || (txtRecType.Text == "TNSPT"))
            {
                DataTable _result = null;
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;

                if (!string.IsNullOrEmpty(txtQuoNo.Text)) //kapila 8/1/2016
                {
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DCNItems);
                    _result = CHNLSVC.CommonSearch.GetDCNItems(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtItem;
                    _CommonSearch.ShowDialog();
                    txtItem.Select();
                }
                else
                {
                    if (string.IsNullOrEmpty(txtInvoice.Text))
                    {
                        MessageBox.Show("Please select related invoice.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtInvoice.Focus();
                        return;
                    }

                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceItems);
                    _result = CHNLSVC.CommonSearch.GetInvoiceItem(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtItem;
                    _CommonSearch.ShowDialog();
                    txtItem.Select();
                }
            }
            else if (txtRecType.Text == "ADVAN")
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Item);
                DataTable _result = CHNLSVC.CommonSearch.GetItemSearchData(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtItem;
                _CommonSearch.ShowDialog();
                txtItem.Select();
            }
        }

        private void txtengine_DoubleClick(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtRecType.Text))
            {
                MessageBox.Show("Please select receipt type.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtRecType.Focus();
                return;
            }

            if ((txtRecType.Text == "VHREG") || (txtRecType.Text == "VHINS") )
            {
                if (string.IsNullOrEmpty(txtItem.Text))
                {
                    MessageBox.Show("Please select invoice item.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtItem.Focus();
                    return;
                }

                if (chkDel.Checked == false)
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.AvailableSerialWithOth);
                    DataTable _result = CHNLSVC.CommonSearch.GetAvailableSerialWithOthSerialSearchData(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtengine;
                    _CommonSearch.ShowDialog();
                    txtengine.Select();
                }
                else
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DeliverdSerials);
                    DataTable _result = CHNLSVC.CommonSearch.GetDeliverdInvoiceItemSerials(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtengine;
                    _CommonSearch.ShowDialog();
                    txtengine.Select();
                }
            }
            else if (txtRecType.Text == "ADINS")
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DeliverdSerials);
                DataTable _result = CHNLSVC.CommonSearch.GetDeliverdInvoiceItemSerials(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtengine;
                _CommonSearch.ShowDialog();
                txtengine.Select();
            }
            else if  (txtRecType.Text == "TNSPT")
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.DeliverdSerials);
                DataTable _result = CHNLSVC.CommonSearch.GetDeliverdInvoiceItemSerials(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtengine;
                _CommonSearch.ShowDialog();
                txtengine.Select();
            }
            else
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.AvailableSerialWithOth);
                DataTable _result = CHNLSVC.CommonSearch.GetAvailableSerialWithOthSerialSearchData(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtengine;
                _CommonSearch.ShowDialog();
                txtengine.Select();
            }
        }

        private void txtInsCom_DoubleClick(object sender, EventArgs e)
        {
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InsuCom);
            DataTable _result = CHNLSVC.CommonSearch.GetInsuCompany(_CommonSearch.SearchParams, null, null);
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtInsCom;
            _CommonSearch.ShowDialog();
            txtInsCom.Select();
        }

        private void txtInsPol_DoubleClick(object sender, EventArgs e)
        {
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InsuPolicy);
            DataTable _result = CHNLSVC.CommonSearch.GetInsuPolicy(_CommonSearch.SearchParams, null, null);
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtInsPol;
            _CommonSearch.ShowDialog();
            txtInsPol.Select();
        }

        private void btnSearchGV_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.GetItmByType);
                DataTable _result = CHNLSVC.CommonSearch.GetItemByType(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtGVCode;
                _CommonSearch.ShowDialog();
                txtGVCode.Select();
            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtGVCode_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.GetItmByType);
                DataTable _result = CHNLSVC.CommonSearch.GetItemByType(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtGVCode;
                _CommonSearch.ShowDialog();
                txtGVCode.Select();
            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtGVCode_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.F2)
                {
                    CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                    _CommonSearch.ReturnIndex = 0;
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.GetItmByType);
                    DataTable _result = CHNLSVC.CommonSearch.GetItemByType(_CommonSearch.SearchParams, null, null);
                    _CommonSearch.dvResult.DataSource = _result;
                    _CommonSearch.BindUCtrlDDLData(_result);
                    _CommonSearch.obj_TragetTextBox = txtGVCode;
                    _CommonSearch.ShowDialog();
                    txtGVCode.Select();
                }
                else if (e.KeyCode == Keys.Enter)
                {
                    cmbGvBook.Focus();
                }
            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtGVCode_Leave(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(txtGVCode.Text)) return;

                //updated by akila 2017/11/30
                MasterItem _gvItems = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtGVCode.Text.Trim());

                //string SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.GetItmByType);
               // DataTable _result = CHNLSVC.CommonSearch.GetItemByType(SearchParams, null, null);
                //var _validate = _result.AsEnumerable().Where(x => x.Field<string>("ITEM") == txtGVCode.Text.Trim()).ToList();

                bool Valid = (_gvItems == null || string.IsNullOrEmpty(_gvItems.Mi_cd)) ? false : (_gvItems.Mi_itm_tp == "G") ? true : false;

                //if (_validate == null || _validate.Count <= 0)
                if (!Valid)
                {
                    MessageBox.Show("Please select the valid Gift voucher code", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtGVCode.Clear();
                    txtGVCode.Focus();
                    return;
                }

                MasterItem _itemList = new MasterItem();
                _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtGVCode.Text.Trim());

                if (_itemList.Mi_cd == null)
                {
                    MessageBox.Show("Invalid item selected.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtGVCode.Clear();
                    txtGVCode.Focus();
                    return;
                }

                if (_itemList.Mi_cate_3 != "N/A")
                {
                    MessageBox.Show("Selected Gift voucher is not allowed to sales.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtGVCode.Clear();
                    txtGVCode.Focus();
                    return;
                }

                //cmbGvBook.DataSource = new DataTable();
                //DataTable _book = CHNLSVC.Inventory.GetAvailableGvBooks(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "VALUE", "P", txtGVCode.Text.Trim());

                //if (_book != null)
                //{
                //    //var _final = (from _lst in _book
                //    //select _lst.Gvp_book).ToList();
                //    cmbGvBook.DataSource = _book;
                //    cmbGvBook.ValueMember = "GVP_BOOK";
                //    cmbGvBook.DisplayMember = "GVP_BOOK";

                //    // cmbGvBook.DataSource = _final;
                //}
                cmbGVPrefix.DataSource = new DataTable();
                DataTable _prefix = CHNLSVC.Inventory.GetAvailableGvPrefixes(txtGVCode.Text.Trim());

                if (_prefix != null)
                {
                    cmbGVPrefix.DataSource = _prefix;
                    cmbGVPrefix.ValueMember = "GVP_GV_PREFIX";
                    cmbGVPrefix.DisplayMember = "GVP_GV_PREFIX";
                }

            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void cmbGvBook_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {

                List<GiftVoucherPages> _tmpList = new List<GiftVoucherPages>();
                cmbTopg.DataSource = _tmpList;

                if (!IsNumeric(cmbGvBook.Text))
                {
                    return;
                }

                _tmpList = CHNLSVC.Inventory.GetAvailableGvPages(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "VALUE", "P", Convert.ToInt32(cmbGvBook.Text), txtGVCode.Text.Trim());


                if (_tmpList != null)
                {
                    cmbTopg.DataSource = _tmpList;
                    cmbTopg.ValueMember = "gvp_page";
                    cmbTopg.DisplayMember = "gvp_page";

                    foreach (GiftVoucherPages tmp in _tmpList)
                    {
                        lblFrompg.Text = tmp.Gvp_page.ToString();
                        txtPgAmt.Text = tmp.Gvp_amt.ToString();
                        if (Convert.ToDecimal(txtPgAmt.Text) > 0)
                        {
                            txtPgAmt.Enabled = false;
                        }
                        else
                        {
                            txtPgAmt.Enabled = true;
                        }
                        goto L1;
                    }
                }
            L1: Int16 i = 0;
            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void cmbGvBook_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                cmbTopg.Focus();
            }
        }

        private void cmbTopg_SelectedIndexChanged(object sender, EventArgs e)
        {
            List<GiftVoucherPages> _tmpList = new List<GiftVoucherPages>();

            if (!IsNumeric(cmbGvBook.Text) || !IsNumeric(cmbTopg.Text) || !IsNumeric(lblFrompg.Text))
            {
                return;
            }

            _tmpList = CHNLSVC.Inventory.GetAvailableGvPagesRange(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "VALUE", "P", Convert.ToInt32(cmbGvBook.Text), txtGVCode.Text.Trim(), Convert.ToInt32(lblFrompg.Text), Convert.ToInt32(cmbTopg.Text));

            if (_tmpList != null && _tmpList.Count > 0)
            {
                lblPageCount.Text = _tmpList.Count.ToString();
            }

            if (Convert.ToDecimal(txtPgAmt.Text) > 0)
            {
                txtPgAmt.Text = Convert.ToDecimal(txtPgAmt.Text).ToString("n");
                txtTotGvAmt.Text = Convert.ToDecimal(Convert.ToDecimal(txtPgAmt.Text) * Convert.ToInt32(lblPageCount.Text)).ToString("n");
            }
        }

        private void txtPgAmt_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtPgAmt.Text))
                {
                    if (string.IsNullOrEmpty(lblPageCount.Text))
                    {
                        MessageBox.Show("Pages not select properly", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        cmbGvBook.Focus();
                        return;
                    }

                    if (!IsNumeric(lblPageCount.Text))
                    {
                        MessageBox.Show("Pages not select properly", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        cmbGvBook.Focus();
                        return;
                    }

                    if (Convert.ToInt32(lblPageCount.Text) <= 0)
                    {
                        MessageBox.Show("Pages not select properly", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        cmbGvBook.Focus();
                        return;
                    }

                    if (!IsNumeric(txtPgAmt.Text))
                    {
                        MessageBox.Show("Invalid amount", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtPgAmt.Text = "";
                        txtPgAmt.Focus();
                        return;
                    }

                    if (Convert.ToDecimal(txtPgAmt.Text) < 0)
                    {
                        MessageBox.Show("Invalid amount", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtPgAmt.Text = "";
                        txtPgAmt.Focus();
                        return;
                    }

                    txtPgAmt.Text = Convert.ToDecimal(txtPgAmt.Text).ToString("n");
                    txtTotGvAmt.Text = Convert.ToDecimal(Convert.ToDecimal(txtPgAmt.Text) * Convert.ToInt32(lblPageCount.Text)).ToString("n");
                }


            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnAddGv_Click(object sender, EventArgs e)
        {
            try
            {
                decimal _Amt = 0;

                if (string.IsNullOrEmpty(txtTotGvAmt.Text))
                {
                    MessageBox.Show("Invalid amount", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtPgAmt.Text = "";
                    txtPgAmt.Focus();
                    return;
                }

                if (string.IsNullOrEmpty(txtCusCode.Text))
                {
                    MessageBox.Show("Please select customer.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtCusCode.Text = "";
                    txtCusCode.Focus();
                    return;
                }

                if (BaseCls.GlbUserComCode != "AST") //kapila 28/1/2016
                    if (string.IsNullOrEmpty(txtCusAdd1.Text))
                    {
                        MessageBox.Show("Please enter customer address.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtCusAdd1.Text = "";
                        txtCusAdd1.Focus();
                        return;
                    }

                if (BaseCls.GlbUserComCode != "AST")    //kapila 5/2/2016
                    _gvDetails = new List<GiftVoucherPages>();

                List<GiftVoucherPages> _tmpList = new List<GiftVoucherPages>();

                _tmpList = CHNLSVC.Inventory.GetAvailableGvPagesRange(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "VALUE", "P", Convert.ToInt32(cmbGvBook.Text), txtGVCode.Text.Trim(), Convert.ToInt32(lblFrompg.Text), Convert.ToInt32(cmbTopg.Text));

                if (_tmpList == null)
                {
                    MessageBox.Show("Cannot find details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }


                foreach (GiftVoucherPages _lst in _tmpList)
                {
                    GiftVoucherPages _newTmp = new GiftVoucherPages();
                    _newTmp.Gvp_amt = Convert.ToDecimal(txtPgAmt.Text);
                    _newTmp.Gvp_app_by = null;
                    _newTmp.Gvp_bal_amt = Convert.ToDecimal(txtPgAmt.Text);
                    _newTmp.Gvp_book = _lst.Gvp_book;
                    _newTmp.Gvp_can_by = null;
                    _newTmp.Gvp_can_dt = Convert.ToDateTime(DateTime.Today);
                    _newTmp.Gvp_com = _lst.Gvp_com;
                    _newTmp.Gvp_cre_by = BaseCls.GlbUserID;
                    _newTmp.Gvp_cre_dt = Convert.ToDateTime(DateTime.Today);
                    _newTmp.Gvp_cus_add1 = txtCusAdd1.Text;
                    _newTmp.Gvp_cus_add2 = txtCusAdd2.Text;
                    _newTmp.Gvp_cus_cd = txtCusCode.Text;
                    _newTmp.Gvp_cus_mob = txtMobile.Text;
                    _newTmp.Gvp_cus_name = txtCusName.Text;
                    _newTmp.Gvp_gv_cd = _lst.Gvp_gv_cd;
                    _newTmp.Gvp_gv_prefix = _lst.Gvp_gv_prefix;
                    _newTmp.Gvp_gv_tp = _lst.Gvp_gv_tp;
                    _newTmp.Gvp_issue_by = BaseCls.GlbUserID;
                    _newTmp.Gvp_issue_dt = Convert.ToDateTime(dtpRecDate.Value).Date;
                    _newTmp.Gvp_line = _lst.Gvp_line;
                    _newTmp.Gvp_mod_by = BaseCls.GlbUserID;
                    _newTmp.Gvp_mod_dt = Convert.ToDateTime(DateTime.Today);
                    _newTmp.Gvp_oth_ref = null;
                    _newTmp.Gvp_page = _lst.Gvp_page;
                    _newTmp.Gvp_pc = _lst.Gvp_pc;
                    _newTmp.Gvp_ref = _lst.Gvp_ref;
                    _newTmp.Gvp_stus = "A";
                    _newTmp.Gvp_valid_from = Convert.ToDateTime(dtpRecDate.Value).Date;
                    _newTmp.Gvp_is_allow_promo = chkAllowPromo.Checked;
                    MasterItemWarrantyPeriod _period = CHNLSVC.Inventory.GetItemWarrantyDetail(_lst.Gvp_gv_cd, "GOD");
                    if (_period == null)
                    {
                        MessageBox.Show("Voucher valid period not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    //kapila 24/2/2015
                    if (dtGVExp.Value.Date > DateTime.Now.Date)
                        _newTmp.Gvp_valid_to = dtGVExp.Value.Date;
                    else
                        _newTmp.Gvp_valid_to = dtpRecDate.Value.Date.AddMonths(_period.Mwp_val).Date;

                    _gvDetails.Add(_newTmp);

                    _gvPrefix = cmbGVPrefix.Text;
                    _gvPage = lblFrompg.Text;

                }


                dgvGv.AutoGenerateColumns = false;
                dgvGv.DataSource = new List<GiftVoucherPages>();
                dgvGv.DataSource = _gvDetails;


                _Amt = Convert.ToDecimal(txtTotGvAmt.Text);
                ucPayModes1.TotalAmount = ucPayModes1.TotalAmount + _Amt;
                ucPayModes1.Amount.Text = Convert.ToString(ucPayModes1.TotalAmount + _Amt - Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text));
                ucPayModes1.IsZeroAllow = true;
                ucPayModes1.Customer_Code = txtCusCode.Text.Trim();
                ucPayModes1.LoadData();

                tbOth.SelectedTab = tbGv;
                txtGVCode.Text = "";
                lblFrompg.Text = "";
                lblPageCount.Text = "";
                cmbGvBook.DataSource = new DataTable();
                cmbTopg.DataSource = new DataTable();
                txtPgAmt.Text = "";
                txtTotGvAmt.Text = "";

                pnlJob.Enabled = false;
                if (BaseCls.GlbUserComCode != "AST")   //kapila 3/2/2016
                    gbGVDet.Enabled = false;
            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txtPgAmt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnAddGv.Focus();
            }
        }

        private void btnSearch_Executive_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceExecutive);
                DataTable _result = CHNLSVC.CommonSearch.SearchEmployeeAssignToProfitCenter(_CommonSearch.SearchParams, null, null);
                if (_result == null || _result.Rows.Count <= 0)
                {
                    //_CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Employee_Executive);
                    //_result = CHNLSVC.CommonSearch.GetEmployeeData(_CommonSearch.SearchParams, null, null);
                }
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtSalesEx;
                _CommonSearch.ShowDialog();
                txtSalesEx.Select();
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void txtSalesEx_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                btnSearch_Executive_Click(null, null);

            }

        }

        private void txtSalesEx_Leave(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtSalesEx.Text))
                {
                    string SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceExecutive);
                    DataTable _result = CHNLSVC.CommonSearch.SearchEmployeeAssignToProfitCenter(SearchParams, null, null);

                    var _validate = _result.AsEnumerable().Where(x => x.Field<string>("EPF") == txtSalesEx.Text.Trim()).ToList();
                    if (_validate == null || _validate.Count <= 0)
                    {
                        MessageBox.Show("Invalid sales executive.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtSalesEx.Text = "";
                        txtSalesEx.Focus();
                        return;
                    }

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void chkGvFOC_CheckedChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtPgAmt.Text))
            {
                if (chkGvFOC.Checked == true)
                {
                    txtTotGvAmt.Text = "0.00";
                }
                else
                {
                    txtTotGvAmt.Text = Convert.ToDecimal(Convert.ToDecimal(txtPgAmt.Text) * Convert.ToInt32(lblPageCount.Text)).ToString("n");
                }
            }
        }

        private void chkOth_CheckedChanged(object sender, EventArgs e)
        {
            if (chkOth.Checked == true)
            {
                txtOthSR.Enabled = true;
                btnOthSR.Enabled = true;
            }
            else
            {
                txtOthSR.Enabled = false;
                btnOthSR.Enabled = false;
            }
        }

        private void btnOthSR_Click(object sender, EventArgs e)
        {
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.AllProfitCenters);
            DataTable _result = CHNLSVC.CommonSearch.GetPC_SearchData(_CommonSearch.SearchParams, null, null);
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtOthSR;
            _CommonSearch.ShowDialog();
            txtInvoice.Select();
        }

        private void txtOthSR_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtOthSR.Text))
            {
                if (BaseCls.GlbUserDefProf == txtOthSR.Text)
                {
                    MessageBox.Show("Same profit center cannot be selected.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    txtOthSR.Focus();
                    return;
                }
                Boolean _IsValid = CHNLSVC.Sales.IsvalidPC(BaseCls.GlbUserComCode, txtOthSR.Text);
                if (_IsValid == false)
                {
                    MessageBox.Show("Invalid Profit Center.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    txtOthSR.Focus();
                    return;
                }
            }
        }

        //kapila 8/4/2015
        private void dtpRecDate_ValueChanged(object sender, EventArgs e)
        {
            ucPayModes1.TransDate.Text = dtpRecDate.Text;
            ucPayModes1.LoadData();
        }
        #region Advance Receipt
        private bool LoadInvoiceType()
        {
            bool _isAvailable = false;
            if (_PriceDefinitionRef != null)
                if (_PriceDefinitionRef.Count > 0)
                {
                    _isAvailable = true;
                    var _types = _PriceDefinitionRef.Select(x => x.Sadd_doc_tp).Distinct().ToList();
                    _types.Add("");
                    cmbInvType.DataSource = _types;
                    cmbInvType.SelectedIndex = cmbInvType.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultInvoiceType)) cmbInvType.Text = DefaultInvoiceType;

                    //var _val = (from _p in _type.AsEnumerable()
                    //            select new
                    //            {
                    //                Code = _p.Field<string>(0),
                    //                Description = _p.Field<string>(1)

                    //            }).ToList();

                    //multiColumnCombo1._queryObject = _val;
                    //multiColumnCombo1.DataSource = _type;
                }
                else
                    cmbInvType.DataSource = null;
            else
                cmbInvType.DataSource = null;

            return _isAvailable;
        }
        private DataTable _levelStatus = null;
        private void LoadPriceLevelMessage()
        {
            DataTable _msg = CHNLSVC.Sales.GetPriceLevelMessage(BaseCls.GlbUserComCode, cmbBook.Text, cmbLevel.Text);
            if (_msg != null && _msg.Rows.Count > 0) lblLvlMsg.Text = _msg.Rows[0].Field<string>("Sapl_spmsg");
            else lblLvlMsg.Text = string.Empty;
        }

        private bool LoadPriceBook(string _invoiceType)
        {
            bool _isAvailable = false;
            if (_PriceDefinitionRef != null)
                if (_PriceDefinitionRef.Count > 0)
                {
                    _isAvailable = true;
                    var _books = _PriceDefinitionRef.Where(x => x.Sadd_doc_tp == cmbInvType.Text).Select(x => x.Sadd_pb).Distinct().ToList();
                    _books.Add("");
                    cmbBook.DataSource = _books;
                    cmbBook.SelectedIndex = cmbBook.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultBook)) cmbBook.Text = DefaultBook;
                }
                else
                    cmbBook.DataSource = null;
            else
                cmbBook.DataSource = null;

            return _isAvailable;
        }

        private void LoadPriceDefaultValue()
        {
            if (_PriceDefinitionRef != null)
            {
                if (_PriceDefinitionRef.Count > 0)
                {
                    var _defaultValue = _PriceDefinitionRef.Where(x => x.Sadd_def == true).ToList();
                    if (_defaultValue != null)
                    {
                        if (_defaultValue.Count > 0)
                        {
                            DefaultInvoiceType = _defaultValue[0].Sadd_doc_tp;
                            DefaultBook = _defaultValue[0].Sadd_pb;
                            DefaultLevel = _defaultValue[0].Sadd_p_lvl;
                            DefaultStatus = _defaultValue[0].Sadd_def_stus;
                            DefaultItemStatus = _defaultValue[0].Sadd_def_stus;
                            LoadInvoiceType(); LoadPriceBook(cmbInvType.Text);
                            LoadPriceLevel(cmbInvType.Text, cmbBook.Text.Trim());
                            LoadLevelStatus(cmbInvType.Text, cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                            CheckPriceLevelStatusForDoAllow(cmbLevel.Text.Trim(), cmbBook.Text.Trim());
                        }
                    }
                }
            }
        }
        private void CheckPriceLevelStatusForDoAllow(string _level, string _book)
        {
            if (!string.IsNullOrEmpty(_level.Trim()) && !string.IsNullOrEmpty(_book.Trim()))
            {
                List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
                if (_lvl != null)
                    if (_lvl.Count > 0)
                    {
                        var _bool = (from _l in _lvl where _l.Sapl_chk_st_tp == true select _l.Sapl_chk_st_tp).ToList();
                        if (_bool != null && _bool.Count() > 0) IsPriceLevelAllowDoAnyStatus = false; else IsPriceLevelAllowDoAnyStatus = true;
                    }
            }
            else
                IsPriceLevelAllowDoAnyStatus = true;
        }

        private bool LoadLevelStatus(string _invType, string _book, string _level)
        {
            _levelStatus = null;
            bool _isAvailable = false;
            string _initPara = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.PriceLevelItemStatus);
            _levelStatus = CHNLSVC.CommonSearch.GetPriceLevelItemStatusData(_initPara, null, null);
            if (_levelStatus != null)
                if (_levelStatus.Rows.Count > 0)
                {
                    _isAvailable = true;
                    var _types = _levelStatus.AsEnumerable().Select(x => x.Field<string>("Code")).Distinct().ToList();
                    _types.Add("");
                    cmbStatus.DataSource = _types;
                    cmbStatus.SelectedIndex = cmbStatus.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultInvoiceType)) cmbStatus.Text = DefaultStatus;
                    //Load Level definition
                    _priceBookLevelRef = CHNLSVC.Sales.GetPriceLevel(BaseCls.GlbUserComCode, cmbBook.Text, cmbLevel.Text);
                    LoadPriceLevelMessage();
                }
                else
                    cmbStatus.DataSource = null;
            else
                cmbStatus.DataSource = null;
            return _isAvailable;
        }
        private bool LoadPriceLevel(string _invoiceType, string _book)
        {
            bool _isAvailable = false;
            if (_PriceDefinitionRef != null)
                if (_PriceDefinitionRef.Count > 0)
                {
                    _isAvailable = true;
                    var _levels = _PriceDefinitionRef.Where(x => x.Sadd_doc_tp == cmbInvType.Text && x.Sadd_pb == _book).Select(y => y.Sadd_p_lvl).Distinct().ToList();
                    _levels.Add("");
                    cmbLevel.DataSource = _levels;
                    cmbLevel.SelectedIndex = cmbLevel.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultLevel) && !string.IsNullOrEmpty(cmbBook.Text)) cmbLevel.Text = DefaultLevel;
                    _priceBookLevelRefList = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _book.Trim(), cmbLevel.Text.Trim());
                    LoadPriceLevelMessage();
                }
                else
                    cmbLevel.DataSource = null;
            else cmbLevel.DataSource = null;

            return _isAvailable;
        }
        private bool BindItemComponent(string _item)
        {
            _masterItemComponent = CHNLSVC.Inventory.GetItemComponents(_item);
            if (_masterItemComponent != null)
            {
                if (_masterItemComponent.Count > 0)
                {
                    _masterItemComponent.ForEach(X => X.Micp_must_scan = false);
                    if (_masterItemComponent != null)
                    {
                        if (_masterItemComponent.Count > 0)
                            return true;
                        else
                            return false;
                    }
                    else
                        return false;
                }
                else return false;
            }
            else return false;
        }
        private bool CheckInventoryCombine()
        {
            bool _IsTerminate = false;
            _isCompleteCode = false;

            if (!string.IsNullOrEmpty(TxtAdvItem.Text))
            {
                MasterItem _itemDet = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, TxtAdvItem.Text.Trim());
                if (_itemDet.Mi_itm_tp == "V" && _itemDet.Mi_is_subitem == true)
                    _isCompleteCode = BindItemComponent(TxtAdvItem.Text.Trim());

                if (_isCompleteCode)
                {
                    if (_masterItemComponent != null)
                    {
                        if (_masterItemComponent.Count > 0)
                        {
                            _isInventoryCombineAdded = false;
                            _isCompleteCode = true;
                            _IsTerminate = false;
                            return _IsTerminate;
                        }
                        else
                        {
                            _isCompleteCode = false;
                            _IsTerminate = true;
                        }
                    }
                    else
                    {
                        _isCompleteCode = false;
                        _IsTerminate = true;
                    }
                }
            }
            else
            {
                _isCompleteCode = false;
                _IsTerminate = true;
            }

            return _IsTerminate;
        }
        private void CalculateItem()
        {
            if (!string.IsNullOrEmpty(txtQty.Text) && !string.IsNullOrEmpty(txtUnitPrice.Text))
            {
                txtUnitAmt.Text = FormatToCurrency(Convert.ToString(FigureRoundUp(Convert.ToDecimal(txtUnitPrice.Text.Trim()) * Convert.ToDecimal(txtQty.Text.Trim()), true)));

                decimal _vatPortion = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString().Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true), true);
                txtTaxAmt.Text = FormatToCurrency(Convert.ToString(_vatPortion));

                decimal _totalAmount = Convert.ToDecimal(txtQty.Text) * Convert.ToDecimal(txtUnitPrice.Text);
                decimal _disAmt = 0;

                if (!string.IsNullOrEmpty(txtDisRate.Text))
                {
                    bool _isVATInvoice = false;
                    if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
                    else _isVATInvoice = false;

                    if (_isVATInvoice)
                        _disAmt = FigureRoundUp(_totalAmount * (Convert.ToDecimal(txtDisRate.Text) / 100), true);
                    else
                    {
                        _disAmt = FigureRoundUp((_totalAmount + _vatPortion) * (Convert.ToDecimal(txtDisRate.Text) / 100), true);
                        if (Convert.ToDecimal(txtDisRate.Text) > 0)
                        {
                            List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty);
                            if (_tax != null && _tax.Count > 0)
                            {
                                decimal _vatval = ((_totalAmount + _vatPortion - _disAmt) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                                txtTaxAmt.Text = Convert.ToString(FigureRoundUp(_vatval, true));
                            }
                        }
                    }

                    txtDisAmt.Text = FormatToCurrency(Convert.ToString(_disAmt));
                }

                if (!string.IsNullOrEmpty(txtTaxAmt.Text))
                {
                    if (Convert.ToDecimal(txtDisRate.Text) > 0)
                        _totalAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true);
                    else
                        _totalAmount = FigureRoundUp(_totalAmount + Convert.ToDecimal(txtTaxAmt.Text) - _disAmt, true);
                }

                txtLineTotAmt.Text = FormatToCurrency(Convert.ToString(_totalAmount));
                if (cmbInvType.Text == "HS")
                {
                    if (_totalAmount > 0)
                    {
                        // LoadScheme();
                    }
                }
            }
        }
        private bool CheckQtyPriliminaryRequirements()
        {
            bool _IsTerminate = false;
            if (string.IsNullOrEmpty(TxtAdvItem.Text))
            {
                _IsTerminate = true; return _IsTerminate;
            }
            if (IsNumeric(txtQty.Text) == false)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Invalid Character", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                txtQty.Focus();
                return _IsTerminate; ;
            }
            if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) { _IsTerminate = true; return _IsTerminate; };

            if (_itemdetail != null)
            {
                if (_itemdetail.Mi_is_ser1 == 1 && !string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                    txtQty.Text = FormatToQty("1");
            }

            _MainPriceCombinItem = new List<PriceCombinedItemRef>();
            if (string.IsNullOrEmpty(txtQty.Text)) { CalculateItem(); SSPriceBookItemSequance = "0"; SSPriceBookPrice = 0; SSPriceBookSequance = "0"; WarrantyPeriod = 0; WarrantyRemarks = string.Empty; _IsTerminate = true; return _IsTerminate; }
            if (Convert.ToDecimal(txtQty.Text) <= 0) { CalculateItem(); SSPriceBookItemSequance = "0"; SSPriceBookPrice = 0; SSPriceBookSequance = "0"; WarrantyPeriod = 0; WarrantyRemarks = string.Empty; _IsTerminate = true; return _IsTerminate; }
            if (string.IsNullOrEmpty(cmbInvType.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invalid Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                cmbInvType.Focus();
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(txtCusCode.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Invalid Customer Code", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                txtCusCode.Focus();
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(TxtAdvItem.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                txtItem.Focus();
                return _IsTerminate;
            }

            if (string.IsNullOrEmpty(cmbBook.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Price book not select.", "Invalid Book", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(cmbLevel.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Invalid Level", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                cmbLevel.Focus();
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(cmbStatus.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item status", "Invalid Status", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                cmbStatus.Focus();
                return _IsTerminate;
            }
            return _IsTerminate;
        }
        private bool CheckTaxAvailability()
        {
            bool _IsTerminate = false;
            //Check for tax setup  - under Darshana confirmation on 02/06/2012
            if (!_isCompleteCode)
            {
                if (dtpRecDate.Value.Date == _serverDt)
                {
                    List<MasterItemTax> _tax = new List<MasterItemTax>();
                    if (_isStrucBaseTax == true)       //kapila  7/7/2017
                    {
                        MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, TxtAdvItem.Text.Trim());
                        _tax = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty, _mstItem.Mi_anal1);
                    }
                    else
                        _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty);

                    if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                        _IsTerminate = true;
                    if (_tax.Count <= 0)
                        _IsTerminate = true;
                }
                else
                {
                    List<MasterItemTax> _taxEff = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty, dtpRecDate.Value.Date);
                    if (_taxEff.Count <= 0)
                    {
                        List<LogMasterItemTax> _tax = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty, dtpRecDate.Value.Date);
                        if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                            _IsTerminate = true;
                        if (_tax.Count <= 0)
                            _IsTerminate = true;
                    }
                }
            }
            return _IsTerminate;
        }

        private void CheckItemTax(string _item)
        {
            MainTaxConstant = new List<MasterItemTax>();
            if (_priceBookLevelRef.Sapl_vat_calc == true)
            {
                MainTaxConstant = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim());
            }
        }
        private void SetDecimalTextBoxForZero(bool _isUnit, bool _isAccBal, bool _isQty)
        {
            txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0"); if (_isQty) txtQty.Text = FormatToQty("1"); txtTaxAmt.Text = FormatToCurrency("0"); if (_isUnit) txtUnitPrice.Text = FormatToCurrency("0"); txtUnitAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0"); if (_isAccBal)
            {
                //lblAccountBalance.Text = FormatToCurrency("0"); 
                //lblAvailableCredit.Text = FormatToCurrency("0");
            }
        }
        //private void LoadCachedObjects()
        //{ _MasterProfitCenter = CacheLayer.Get<MasterProfitCenter>(CacheLayer.Key.ProfitCenter.ToString()); _PriceDefinitionRef = CacheLayer.Get<List<PriceDefinitionRef>>(CacheLayer.Key.PriceDefinition.ToString()); MasterChannel = CacheLayer.Get<DataTable>(CacheLayer.Key.ChannelDefinition.ToString()); IsSaleFigureRoundUp = CacheLayer.Get(CacheLayer.Key.IsSaleValueRoundUp.ToString()); }

        private bool CheckProfitCenterAllowForWithoutPrice()
        {
            bool _isAvailable = false;
            if (_MasterProfitCenter.Mpc_without_price && _priceBookLevelRef.Sapl_is_without_p)
            {
                SetDecimalTextBoxForZero(false, false, false);
                _isAvailable = true;
                return _isAvailable;
            }
            return _isAvailable;
        }
        private decimal CheckSubItemTax(string _item)
        {

            //update by akila 2017/08/11
            decimal _fraction = 1;
            List<MasterItemTax> TaxConstant = new List<MasterItemTax>();
            if (_priceBookLevelRef.Sapl_vat_calc == true)
            {
                if (_isStrucBaseTax == true)
                {
                    _fraction = 1;
                }
                else
                {
                    TaxConstant = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim());

                    if (TaxConstant != null)
                        if (TaxConstant.Count > 0)
                            _fraction = TaxConstant[0].Mict_tax_rate;
                }
            }
            return _fraction;

            //decimal _fraction = 1;
            //List<MasterItemTax> TaxConstant = new List<MasterItemTax>();
            //if (_priceBookLevelRef.Sapl_vat_calc == true)
            //{
            //    TaxConstant = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim());
            //    if (TaxConstant != null)
            //        if (TaxConstant.Count > 0)
            //            _fraction = TaxConstant[0].Mict_tax_rate;
            //}
            //return _fraction;
        }

        private bool ConsumerItemProduct()
        {
            bool _isAvailable = false;
            bool _isMRP = _itemdetail.Mi_anal3;
            ////   if (_isMRP && chkDeliverLater == false && chkDeliverNow == false)
            {
                List<InventoryBatchRefN> _batchRef = new List<InventoryBatchRefN>();
                if (_priceBookLevelRef.Sapl_chk_st_tp) _batchRef = CHNLSVC.Sales.GetConsumerProductPriceList(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim()); else _batchRef = CHNLSVC.Sales.GetConsumerProductPriceList(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty);
                if (_batchRef.Count > 0)
                    if (_batchRef.Count > 1)
                    {
                        //pnlMain.Enabled = false;
                        //pnlConsumerPrice.Visible = true;
                        //BindConsumableItem(_batchRef);
                    }
                    else if (_batchRef.Count == 1)
                    {
                        if (_batchRef[0].Inb_free_qty < Convert.ToDecimal(txtQty.Text.Trim()))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty is " + txtQty.Text + " and inventory available qty having only " + _batchRef[0].Inb_free_qty.ToString(), "No Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            _isAvailable = true;
                            return _isAvailable;
                        }
                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(_batchRef[0].Inb_unit_price * CheckSubItemTax(_batchRef[0].Inb_itm_cd))));
                        txtUnitPrice.Focus();
                        _isAvailable = false;
                    }
                _isEditPrice = false;
                _isEditDiscount = false;
                if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
                decimal val = Convert.ToDecimal(txtQty.Text);
                txtQty.Text = FormatToQty(Convert.ToString(val));
                CalculateItem();
                _isAvailable = true;
            }
            return _isAvailable;
        }



        private bool _isNewPromotionProcess = false;
        private List<PriceDetailRef> _PriceDetailRefPromo = null;
        private List<PriceSerialRef> _PriceSerialRefPromo = null;
        private List<PriceSerialRef> _PriceSerialRefNormal = null;

        private bool CheckSerializedPriceLevelAndLoadSerials(bool _isSerialized)
        {
            bool _isAvailable = false;
            if (_isSerialized)
            {
                if (string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You are selected a serialized price level, hence you have not select the serial no. Please select the serial no.", "Serialized Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    _isAvailable = true;
                    return _isAvailable;
                }
                List<PriceSerialRef> _list = null;
                if (_isNewPromotionProcess == false)
                    _list = CHNLSVC.Sales.GetAllPriceSerialFromSerial(cmbBook.Text, cmbLevel.Text, TxtAdvItem.Text, Convert.ToDateTime(dtpRecDate.Value), txtCusCode.Text, BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtSerialNo.Text.Trim());
                else if (_PriceSerialRefNormal != null && _PriceSerialRefNormal.Count > 0)
                    _list = _PriceSerialRefNormal;
                else if (_PriceSerialRefPromo != null && _PriceSerialRefPromo.Count > 0)
                    _list = _PriceSerialRefPromo;
                _tempPriceSerial = new List<PriceSerialRef>();
                _tempPriceSerial = _list;
                if (_list != null)
                {
                    if (_list.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("There are no serials available for the selected item", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        txtQty.Text = FormatToQty("0");
                        _isAvailable = true;
                        txtQty.Focus();
                        return _isAvailable;
                    }
                    var _oneSerial = _list.Where(x => x.Sars_ser_no == txtSerialNo.Text.Trim()).ToList();
                    _list = _oneSerial;
                    if (_list.Count < Convert.ToDecimal(txtQty.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Selected qty is exceeds available serials at the price definition!", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        txtQty.Text = FormatToQty("0");
                        // IsNoPriceDefinition = true;
                        _isAvailable = true;
                        txtQty.Focus();
                        return _isAvailable;
                    }
                    if (_list.Count == 1)
                    {
                        string _book = _list[0].Sars_pbook;
                        string _level = _list[0].Sars_price_lvl;
                        cmbBook.Text = _book;
                        cmbLevel.Text = _level;
                        if (!_isSerialized)
                            cmbLevel_Leave(null, null);

                        int _priceType = 0;
                        _priceType = _list[0].Sars_price_type;
                        PriceTypeRef _promotion = TakePromotion(_priceType);

                        decimal UnitPrice = _list[0].Sars_itm_price;
                        //decimal UnitPrice = TaxCalculation(TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _list[0].Sars_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text),true);
                        //decimal UnitPrice = TaxCalculation(TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _list[0].Sars_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false);

                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                        WarrantyRemarks = _list[0].Sars_warr_remarks;
                        SetSSPriceDetailVariable(_list[0].Sars_circular_no, "0", Convert.ToString(_list[0].Sars_pb_seq), Convert.ToString(_list[0].Sars_itm_price), _list[0].Sars_promo_cd, Convert.ToString(_list[0].Sars_price_type));

                        Int32 _pbSq = _list[0].Sars_pb_seq;
                        string _mItem = _list[0].Sars_itm_cd;
                        _isAvailable = true;
                        //if (_promotion.Sarpt_is_com)
                        //{
                        //SetColumnForPriceDetailNPromotion(true);
                        //BindSerializedPrice(_list);

                        //if (gvPromotionPrice.RowCount > 0)
                        //{
                        //    gvPromotionPrice_CellDoubleClick(0, false, _isSerialized);
                        //    pnlPriceNPromotion.Visible = true;
                        //    pnlMain.Enabled = false;
                        //    return _isAvailable;
                        //}
                        //else
                        //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                        ////}
                        ////else
                        ////    if (_isCombineAdding == false) txtUnitPrice.Focus();
                        //return _isAvailable;
                    }
                    if (_list.Count > 1)
                    {
                        //SetColumnForPriceDetailNPromotion(true);
                        //BindPriceAndPromotion(_list);
                        //DisplayAvailableQty(txtItem.Text, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, cmbStatus.Text);
                        //pnlMain.Enabled = false;
                        //pnlPriceNPromotion.Visible = true;
                        _isAvailable = true;
                        return _isAvailable;
                    }
                }
                else
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("There are no serials available for the selected item", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    txtQty.Text = FormatToQty("0");
                    _isAvailable = true;
                    txtQty.Focus();
                    return _isAvailable;
                }
            }
            return _isAvailable;
        }
        private bool _isCombineAdding = false;
        private int _combineCounter = 0;
        private string _paymodedef = string.Empty;
        private bool _isCheckedPriceCombine = false;
        private bool _isFirstPriceComItem = false;
        private string _serial2 = string.Empty;
        private string _prefix = string.Empty;

        private bool CheckItemPromotion()
        {
            _isNewPromotionProcess = false;
            SSPromotionCode = string.Empty;

            if (string.IsNullOrEmpty(txtItem.Text))
            { using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return false; }
            _PriceDetailRefPromo = null;
            _PriceSerialRefPromo = null;
            _PriceSerialRefNormal = null;
            CHNLSVC.Sales.GetPromotion(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, TxtAdvItem.Text.Trim(), dtpRecDate.Value.Date, txtCusCode.Text.Trim(), out _PriceDetailRefPromo, out _PriceSerialRefPromo, out _PriceSerialRefNormal);
            if (_PriceDetailRefPromo == null && _PriceSerialRefPromo == null && _PriceSerialRefNormal == null) return false;
            if (_PriceSerialRefNormal != null && _PriceSerialRefNormal.Count > 0 && !string.IsNullOrEmpty(txtSerialNo.Text))
            {
                var _isSerialAvailable = _PriceSerialRefNormal.Where(x => x.Sars_ser_no == txtSerialNo.Text.Trim()).ToList();
                if (_isSerialAvailable != null && _isSerialAvailable.Count > 0)
                {
                    DialogResult _normalSerialized = new DialogResult();
                    using (new CenterWinDialog(this)) { _normalSerialized = MessageBox.Show("This item is having normal serialized price.\nDo you need to select normal serialized price?", "Normal Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_normalSerialized == System.Windows.Forms.DialogResult.Yes)
                    {
                        _isNewPromotionProcess = true;
                        CheckSerializedPriceLevelAndLoadSerials(true);
                        return true;
                    }
                }
                else
                {
                    _isNewPromotionProcess = false;
                    _PriceSerialRefNormal = null;
                }
            }
            else if (_PriceSerialRefNormal != null && _PriceSerialRefNormal.Count > 0 && string.IsNullOrEmpty(txtSerialNo.Text))
            {
                DialogResult _normalSerialized = new System.Windows.Forms.DialogResult();
                using (new CenterWinDialog(this)) { _normalSerialized = MessageBox.Show("This item having normal serialized price. Do you need to continue with normal serialized price?", "Normal Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                if (_normalSerialized == System.Windows.Forms.DialogResult.Yes)
                {
                    _isNewPromotionProcess = true;
                    CheckSerializedPriceLevelAndLoadSerials(true);
                    return true;
                }
                else
                {
                    _isNewPromotionProcess = false;
                    _PriceSerialRefNormal = null;
                }
            }
            if (_PriceSerialRefPromo != null && _PriceSerialRefPromo.Count > 0 && !string.IsNullOrEmpty(txtSerialNo.Text))
            {
                var _isSerialPromoAvailable = _PriceSerialRefPromo.Where(x => x.Sars_ser_no == txtSerialNo.Text.Trim()).ToList();
                if (_isSerialPromoAvailable != null && _isSerialPromoAvailable.Count > 0)
                {
                    DialogResult _promoSerialized = new System.Windows.Forms.DialogResult();
                    using (new CenterWinDialog(this)) { _promoSerialized = MessageBox.Show("This item is having promotional serialized price.\nDo you need to select promotional serialized price?", "Promotional Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_promoSerialized == System.Windows.Forms.DialogResult.Yes)
                    {
                        _isNewPromotionProcess = true;
                        CheckSerializedPriceLevelAndLoadSerials(true);
                        return true;
                    }
                    else
                    {
                        _isNewPromotionProcess = false;
                        _PriceSerialRefPromo = null;
                    }
                }
                else if (_PriceSerialRefPromo != null && _PriceSerialRefPromo.Count > 0 && string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    DialogResult _promoSerialized = new System.Windows.Forms.DialogResult();
                    using (new CenterWinDialog(this)) { _promoSerialized = MessageBox.Show("This item is having promotional serialized price.\nDo you need to select promotional serialized price?", "Promotional Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_promoSerialized == System.Windows.Forms.DialogResult.Yes)
                    {
                        _isNewPromotionProcess = true;
                        CheckSerializedPriceLevelAndLoadSerials(true);
                        return true;
                    }
                    else
                    {
                        _isNewPromotionProcess = false;
                        _PriceSerialRefPromo = null;
                    }
                }
            }
            if (_PriceDetailRefPromo != null && _PriceDetailRefPromo.Count > 0)
            {
                DialogResult _promo = new System.Windows.Forms.DialogResult();
                using (new CenterWinDialog(this)) { _promo = MessageBox.Show("This item is having promotions. Do you need to continue with the available promotions?", "Promotion", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                if (_promo == System.Windows.Forms.DialogResult.Yes)
                {
                    SetColumnForPriceDetailNPromotion(false);
                    gvNormalPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                    gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                    BindNonSerializedPrice(_PriceDetailRefPromo);
                    pnlPriceNPromotion.Visible = true;
                    //  pnlMain.Enabled = false;
                    _isNewPromotionProcess = true;
                    return true;
                }
                else
                {
                    _isNewPromotionProcess = false;
                    return false;
                }
            }
            else
                return false;
        }

        private bool IsGiftVoucher(string _type)
        {
            if (_type == "G")
                return true;
            else
                return false;
        }

        private void SetColumnForPriceDetailNPromotion(bool _isSerializedPriceLevel)
        {
            if (_isSerializedPriceLevel)
            {
                NorPrice_Select.Visible = true;

                NorPrice_Serial.DataPropertyName = "sars_ser_no";
                NorPrice_Serial.Visible = true;
                NorPrice_Item.DataPropertyName = "Sars_itm_cd";
                NorPrice_Item.Visible = true;
                NorPrice_UnitPrice.DataPropertyName = "sars_itm_price";
                NorPrice_UnitPrice.Visible = true;
                NorPrice_Circuler.DataPropertyName = "sars_circular_no";
                NorPrice_PriceType.DataPropertyName = "sars_price_type";
                NorPrice_PriceTypeDescription.DataPropertyName = "sars_price_type_desc";
                NorPrice_ValidTill.DataPropertyName = "sars_val_to";
                NorPrice_ValidTill.Visible = true;
                NorPrice_Pb_Seq.DataPropertyName = "sars_pb_seq";
                NorPrice_PbLineSeq.DataPropertyName = "1";
                NorPrice_PromotionCD.DataPropertyName = "sars_promo_cd";
                NorPrice_IsFixQty.DataPropertyName = "sars_is_fix_qty";
                NorPrice_BkpUPrice.DataPropertyName = "sars_cre_by";
                NorPrice_WarrantyRmk.DataPropertyName = "sars_warr_remarks";
                NorPrice_Book.DataPropertyName = "sars_pbook";
                NorPrice_Level.DataPropertyName = "sars_price_lvl";

                PromPrice_Select.Visible = true;

                PromPrice_Serial.DataPropertyName = "sars_ser_no";
                PromPrice_Serial.Visible = true;
                PromPrice_Item.DataPropertyName = "Sars_itm_cd";
                PromPrice_Item.Visible = true;
                PromPrice_UnitPrice.DataPropertyName = "sars_itm_price";
                PromPrice_UnitPrice.Visible = true;
                PromPrice_Circuler.DataPropertyName = "sars_circular_no";
                PromPrice_PriceType.DataPropertyName = "sars_price_type";
                PromPrice_PriceTypeDescription.DataPropertyName = "sars_price_type_desc";
                PromPrice_ValidTill.DataPropertyName = "sars_val_to";
                PromPrice_ValidTill.Visible = true;
                PromPrice_Pb_Seq.DataPropertyName = "sars_pb_seq";
                //PromPrice_PbLineSeq.DataPropertyName = "1";
                PromPrice_PromotionCD.DataPropertyName = "sars_promo_cd";
                PromPrice_IsFixQty.DataPropertyName = "sars_is_fix_qty";
                PromPrice_BkpUPrice.DataPropertyName = "sars_cre_by";
                PromPrice_WarrantyRmk.DataPropertyName = "sars_warr_remarks";
                PromPrice_Book.DataPropertyName = "sars_pbook";
                PromPrice_Level.DataPropertyName = "sars_price_lvl";
            }
            else
            {
                NorPrice_Select.Visible = false;

                NorPrice_Serial.Visible = false;
                NorPrice_Item.DataPropertyName = "sapd_itm_cd";
                NorPrice_Item.Visible = true;
                NorPrice_UnitPrice.DataPropertyName = "Sapd_itm_price";
                NorPrice_UnitPrice.Visible = true;
                NorPrice_Circuler.DataPropertyName = "Sapd_circular_no";
                NorPrice_Circuler.Visible = true;
                NorPrice_PriceType.DataPropertyName = "Sarpt_cd";
                NorPrice_PriceTypeDescription.DataPropertyName = "SARPT_CD";
                NorPrice_ValidTill.DataPropertyName = "Sapd_to_date";
                NorPrice_ValidTill.Visible = true;
                NorPrice_Pb_Seq.DataPropertyName = "sapd_pb_seq";
                NorPrice_PbLineSeq.DataPropertyName = "sapd_seq_no";
                NorPrice_PromotionCD.DataPropertyName = "sapd_promo_cd";
                NorPrice_IsFixQty.DataPropertyName = "sapd_is_fix_qty";
                NorPrice_BkpUPrice.DataPropertyName = "sapd_cre_by";
                NorPrice_WarrantyRmk.DataPropertyName = "sapd_warr_remarks";
                NorPrice_Book.DataPropertyName = "sapd_pb_tp_cd";
                NorPrice_Level.DataPropertyName = "sapd_pbk_lvl_cd";

                PromPrice_Select.Visible = true;

                PromPrice_Serial.Visible = false;
                PromPrice_Item.DataPropertyName = "sapd_itm_cd";
                PromPrice_Item.Visible = true;
                PromPrice_UnitPrice.DataPropertyName = "Sapd_itm_price";
                PromPrice_UnitPrice.Visible = true;
                PromPrice_Circuler.DataPropertyName = "Sapd_circular_no";
                PromPrice_Circuler.Visible = true;
                PromPrice_PriceType.DataPropertyName = "sapd_price_type"; //"Sarpt_cd";
                PromPrice_PriceTypeDescription.DataPropertyName = "Sarpt_cd";
                PromPrice_ValidTill.DataPropertyName = "Sapd_to_date";
                PromPrice_ValidTill.Visible = true;
                PromPrice_Pb_Seq.DataPropertyName = "sapd_pb_seq";
                PromPrice_PbLineSeq.DataPropertyName = "sapd_seq_no";
                PromPrice_PromotionCD.DataPropertyName = "sapd_promo_cd";
                PromPrice_IsFixQty.DataPropertyName = "sapd_is_fix_qty";
                PromPrice_BkpUPrice.DataPropertyName = "sapd_cre_by";
                PromPrice_WarrantyRmk.DataPropertyName = "sapd_warr_remarks";
                PromPrice_Book.DataPropertyName = "sapd_pb_tp_cd";
                PromPrice_Level.DataPropertyName = "sapd_pbk_lvl_cd";
            }
        }

        protected void BindNonSerializedPrice(List<PriceDetailRef> _list)
        {
            _list.ForEach(x => x.Sapd_cre_by = Convert.ToString(x.Sapd_itm_price));
            _list.ForEach(x => x.Sapd_itm_price = CheckSubItemTax(x.Sapd_itm_cd) * x.Sapd_itm_price);

            var _normal = _list.Where(x => x.Sapd_price_type == 0).ToList();
            var _promotion = _list.Where(x => x.Sapd_price_type != 0).ToList();

            gvNormalPrice.DataSource = _normal;
            gvPromotionPrice.DataSource = _promotion;
        }
        private bool IsVirtual(string _type)
        { if (_type == "V") { _IsVirtualItem = true; return true; } else { _IsVirtualItem = false; return false; } }
        protected bool CheckQty(bool _isSearchPromotion)
        {
            if (pnlPriceNPromotion.Visible == true) return true;
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            WarrantyPeriod = 0;
            WarrantyRemarks = string.Empty;
            bool _IsTerminate = false;
            ManagerDiscount = new Dictionary<decimal, decimal>();
            SSPriceBookSequance = "0";
            SSPriceBookItemSequance = "0";
            SSPriceBookPrice = 0;
            if (_isCompleteCode == false)
                if (CheckInventoryCombine())
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("This compete code does not having a collection. Please contact inventory", "Inventory Combine", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (CheckQtyPriliminaryRequirements()) return true;

            if (_isCombineAdding == false)
                if (CheckTaxAvailability())
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Tax rates not setup for selected item code and item status.Please contact Inventory Department.", "Item Tax", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    _IsTerminate = true;
                    return _IsTerminate;
                }

            if (_isCombineAdding == false) CheckItemTax(txtItem.Text.Trim());
            if (_isCombineAdding == false)
                if (CheckProfitCenterAllowForWithoutPrice())
                {
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (_isCombineAdding == false)
                if (ConsumerItemProduct())
                {
                    //_IsTerminate = true;
                    //return _IsTerminate;
                }
            if (_isSearchPromotion) if (CheckItemPromotion()) { _IsTerminate = true; return _IsTerminate; }

            if (_isCombineAdding == false && _priceBookLevelRef.Sapl_is_serialized)
                if (CheckSerializedPriceLevelAndLoadSerials(true))
                {
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (IsGiftVoucher(_itemdetail.Mi_itm_tp)) return true;
            if (IsVirtual(_itemdetail.Mi_itm_tp) && _isCompleteCode == false)
            {
                txtUnitPrice.ReadOnly = false;
                txtDisRate.ReadOnly = false;
                txtDisAmt.ReadOnly = false;
                txtUnitAmt.ReadOnly = true;
                txtTaxAmt.ReadOnly = true;
                txtLineTotAmt.ReadOnly = true;
                return true;
            }
            else
            {
                txtUnitPrice.ReadOnly = true;
                txtUnitAmt.ReadOnly = true;
                txtTaxAmt.ReadOnly = true;
                txtLineTotAmt.ReadOnly = true;
                if (_itemdetail.Mi_itm_tp == "V")
                {
                    txtDisRate.ReadOnly = true;
                    txtDisAmt.ReadOnly = true;
                }
                else
                {
                    txtDisRate.ReadOnly = false;
                    txtDisAmt.ReadOnly = false;
                }
            }
            _priceDetailRef = new List<PriceDetailRef>();

            _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCusCode.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(dtpRecDate.Text));
            if (_priceDetailRef.Count <= 0)
            {
                if (!_isCompleteCode)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no price for the selected item", "No Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    SetDecimalTextBoxForZero(true, false, true);
                    _IsTerminate = true;
                    return _IsTerminate;
                }
                else
                {
                    txtUnitPrice.Text = FormatToCurrency("0");
                }
            }
            else
            {
                if (_isCompleteCode)
                {
                    List<PriceDetailRef> _new = _priceDetailRef;
                    _priceDetailRef = new List<PriceDetailRef>();
                    var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
                    if (_p != null)
                        if (_p.Count > 0)
                        {
                            if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
                            _priceDetailRef.Add(_p[0]);
                        }
                }
                if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                {
                    var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
                    if (_isSuspend > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Price has been suspended. Please contact IT dept.", "Suspended Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        _IsTerminate = true;
                        // pnlMain.Enabled = true;
                        return _IsTerminate;
                    }
                }
                if (_priceDetailRef.Count > 1)
                {
                    SetColumnForPriceDetailNPromotion(false);
                    gvNormalPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                    gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                    BindNonSerializedPrice(_priceDetailRef);
                    pnlPriceNPromotion.Visible = true;
                    _IsTerminate = true;
                    // pnlMain.Enabled = false;

                    return _IsTerminate;
                }
                else if (_priceDetailRef.Count == 1)
                {
                    var _one = from _itm in _priceDetailRef
                               select _itm;
                    int _priceType = 0;
                    foreach (var _single in _one)
                    {
                        _priceType = _single.Sapd_price_type;
                        PriceTypeRef _promotion = TakePromotion(_priceType);
                        decimal UnitPrice = FigureRoundUp( _single.Sapd_itm_price, true);
                        //decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true), true);
                        //decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);

                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                        //txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                        WarrantyRemarks = _single.Sapd_warr_remarks;

                        SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));

                        Int32 _pbSq = _single.Sapd_pb_seq;
                        Int32 _pbiSq = _single.Sapd_seq_no;
                        string _mItem = _single.Sapd_itm_cd;
                        //if (_promotion.Sarpt_is_com)
                        //{
                        SetColumnForPriceDetailNPromotion(false);
                        gvNormalPrice.DataSource = new List<PriceDetailRef>();
                        gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                        gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                        gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                        BindNonSerializedPrice(_priceDetailRef);

                        if (gvPromotionPrice.RowCount > 0)
                        {
                            // gvPromotionPrice_CellDoubleClick(0, false, false);
                            // pnlPriceNPromotion.Visible = true;
                            //// pnlMain.Enabled = false;
                            // _IsTerminate = true;
                            // return _IsTerminate;
                        }
                        else
                        {
                            if (_isCombineAdding == false) txtUnitPrice.Focus();
                        }

                        //}
                        //else
                        //{
                        //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                        //}
                    }
                }
            }
            _isEditPrice = false;
            _isEditDiscount = false;
            if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
            decimal vals = Convert.ToDecimal(txtQty.Text);
            txtQty.Text = FormatToQty(Convert.ToString(vals));
            CalculateItem();

            //get price for priority pb
            if (_priorityPriceBook != null && cmbBook.SelectedValue != _priorityPriceBook.Sppb_pb && cmbBook.SelectedValue != _priorityPriceBook.Sppb_pb_lvl)
            {
                decimal normalPrice = Convert.ToDecimal(txtLineTotAmt.Text);

                _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _priorityPriceBook.Sppb_pb, _priorityPriceBook.Sppb_pb_lvl, txtCusCode.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(dtpRecDate.Text));
                string _unitPrice = "";
                if (_priceDetailRef.Count <= 0)
                {
                    return false;
                }

                if (_priceDetailRef.Count <= 0)
                {
                    if (!_isCompleteCode)
                    {
                        //this.Cursor = Cursors.Default;
                        //using (new CenterWinDialog(this)) { MessageBox.Show("There is no price for the selected item", "No Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        //SetDecimalTextBoxForZero(true, false, true);
                        return false;
                    }
                    else
                    {
                        _unitPrice = FormatToCurrency("0");
                    }
                }
                else
                {
                    if (_isCompleteCode)
                    {
                        List<PriceDetailRef> _new = _priceDetailRef;
                        _priceDetailRef = new List<PriceDetailRef>();
                        var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
                        if (_p != null)
                            if (_p.Count > 0)
                            {
                                if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
                                _priceDetailRef.Add(_p[0]);
                            }
                    }
                    if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                    {
                        var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
                        if (_isSuspend > 0)
                        {
                            return false;
                        }
                    }
                    if (_priceDetailRef.Count > 1)
                    {
                        /*
                        DialogResult _result = new DialogResult();
                        using (new CenterWinDialog(this)) { _result = MessageBox.Show("This item has " +_priorityPriceBook.Sppb_pb + " " + _priorityPriceBook.Sppb_pb_lvl + " Promotion."+"\nDo you want to select " + _priorityPriceBook.Sppb_pb + " Promotion?", "Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1); }
                        if (_result == DialogResult.Yes)
                        {
                            SetColumnForPriceDetailNPromotion(false);
                            gvNormalPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                            gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                            BindNonSerializedPrice(_priceDetailRef);
                            pnlPriceNPromotion.Visible = true;
                            _IsTerminate = true;
                            pnlMain.Enabled = false;

                            return _IsTerminate;
                        }
                        else {
                            return false;
                        }
                        */
                        return false;
                    }
                    else if (_priceDetailRef.Count == 1)
                    {
                        var _one = from _itm in _priceDetailRef
                                   select _itm;
                        int _priceType = 0;
                        foreach (var _single in _one)
                        {
                            _priceType = _single.Sapd_price_type;
                            PriceTypeRef _promotion = TakePromotion(_priceType);

                            decimal UnitPrice = FigureRoundUp( _single.Sapd_itm_price, true);
                            //decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true), true);
                            //decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
                            _unitPrice = FormatToCurrency(Convert.ToString(UnitPrice));

                            WarrantyRemarks = _single.Sapd_warr_remarks;
                            //SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
                            Int32 _pbSq = _single.Sapd_pb_seq;
                            Int32 _pbiSq = _single.Sapd_seq_no;
                            string _mItem = _single.Sapd_itm_cd;
                            //if (_promotion.Sarpt_is_com)
                            //{
                            SetColumnForPriceDetailNPromotion(false);
                            gvNormalPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                            gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                            BindNonSerializedPrice(_priceDetailRef);

                            if (gvPromotionPrice.RowCount > 0)
                            {
                                //gvPromotionPrice_CellDoubleClick(0, false, false);
                                //pnlPriceNPromotion.Visible = true;
                                //pnlMain.Enabled = false;
                                //_IsTerminate = true;
                                //return _IsTerminate;
                            }
                            else
                            {
                                if (_isCombineAdding == false) txtUnitPrice.Focus();
                            }

                            //}
                            //else
                            //{
                            //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                            //}
                        }
                    }
                }
                _isEditPrice = false;
                _isEditDiscount = false;
                if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
                decimal vals1 = Convert.ToDecimal(txtQty.Text);
                txtQty.Text = FormatToQty(Convert.ToString(vals1));
                decimal otherPrice = 0;
                if (!string.IsNullOrEmpty(txtQty.Text) && !string.IsNullOrEmpty(_unitPrice))
                {
                    decimal _disRate = 0;
                    decimal _disAmt = 0;
                    if (!string.IsNullOrEmpty(txtDisRate.Text))
                    {
                        _disRate = Convert.ToDecimal(txtDisRate.Text);
                    }
                    if (!string.IsNullOrEmpty(txtDisAmt.Text))
                    {
                        _disAmt = Convert.ToDecimal(txtDisAmt.Text);
                    }

                    otherPrice = CalculateItemTem(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(_unitPrice), _disAmt, _disRate);
                }
                else
                    return false;
                //decimal otherPrice = Convert.ToDecimal(txtLineTotAmt.Text);
                //if price change display message
                if (otherPrice < normalPrice)
                {
                    DialogResult _result = new DialogResult();
                    using (new CenterWinDialog(this)) { _result = MessageBox.Show(_priorityPriceBook.Sppb_pb + " " + _priorityPriceBook.Sppb_pb_lvl + " Price - " + FormatToCurrency(otherPrice.ToString()) + "\nDo you want to select " + _priorityPriceBook.Sppb_pb + " Price?", "Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1); }

                    if (_result == DialogResult.Yes)
                    {
                        txtUnitPrice.Text = FormatToCurrency("0");
                        txtUnitAmt.Text = FormatToCurrency("0");
                        txtDisRate.Text = FormatToCurrency("0");
                        txtDisAmt.Text = FormatToCurrency("0");
                        txtTaxAmt.Text = FormatToCurrency("0");
                        txtLineTotAmt.Text = FormatToCurrency("0");
                        cmbBook.Text = _priorityPriceBook.Sppb_pb;
                        cmbLevel.Text = _priorityPriceBook.Sppb_pb_lvl;
                        CheckQty(false);
                    }
                    else
                    {
                        SSPRomotionType = 0;
                        //SSCirculerCode = string.Empty;
                        //SSPriceBookItemSequance = string.Empty;
                        //SSPriceBookPrice = Convert.ToDecimal(0);
                        //SSPriceBookSequance = string.Empty;
                        SSPromotionCode = string.Empty;
                        /*
                        _priceDetailRef = CHNLSVC.Sales.GetPrice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCusCode.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(dtpRecDate.Value.Date));
                        if (_priceDetailRef.Count == 1)
                        {
                            var _one = from _itm in _priceDetailRef
                                       select _itm;
                            int _priceType = 0;
                            foreach (var _single in _one)
                            {
                                _priceType = _single.Sapd_price_type;
                                PriceTypeRef _promotion = TakePromotion(_priceType);
                                decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
                                txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                WarrantyRemarks = _single.Sapd_warr_remarks;
                                SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
                                Int32 _pbSq = _single.Sapd_pb_seq;
                                Int32 _pbiSq = _single.Sapd_seq_no;
                                string _mItem = _single.Sapd_itm_cd;
                                //if (_promotion.Sarpt_is_com)
                                //{
                                SetColumnForPriceDetailNPromotion(false);
                                gvNormalPrice.DataSource = new List<PriceDetailRef>();
                                gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                                gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                                gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                                BindNonSerializedPrice(_priceDetailRef);

                                if (gvPromotionPrice.RowCount > 0)
                                {
                                    gvPromotionPrice_CellDoubleClick(0, false, false);
                                    pnlPriceNPromotion.Visible = true;
                                    pnlMain.Enabled = false;
                                    _IsTerminate = true;
                                    return _IsTerminate;
                                }
                                else
                                {
                                    if (_isCombineAdding == false) txtUnitPrice.Focus();
                                }

                                //}
                                //else
                                //{
                                //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                                //}
                            }
                        }
                        _isEditPrice = false;
                        _isEditDiscount = false;
                        if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
                        decimal vals2 = Convert.ToDecimal(txtQty.Text);
                        txtQty.Text = FormatToQty(Convert.ToString(vals2));
                        CalculateItem();
                         */
                    }
                }


            }

            return _IsTerminate;
        }
        //protected bool CheckQty(bool _isSearchPromotion)
        //{
        // // if (pnlMain.Enabled == false) return true;
        //    txtDisRate.Text = FormatToCurrency("0");
        //    txtDisAmt.Text = FormatToCurrency("0");
        //    WarrantyPeriod = 0;
        //    WarrantyRemarks = string.Empty;
        //    bool _IsTerminate = false;
        //    ManagerDiscount = new Dictionary<decimal, decimal>();
        //    SSPriceBookSequance = "0";
        //    SSPriceBookItemSequance = "0";
        //    SSPriceBookPrice = 0;
        //    if (_isCompleteCode == false)
        //        if (CheckInventoryCombine())
        //        {
        //            this.Cursor = Cursors.Default;
        //            using (new CenterWinDialog(this)) { MessageBox.Show("This compete code does not having a collection. Please contact inventory", "Inventory Combine", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
        //            _IsTerminate = true;
        //            return _IsTerminate;
        //        }
        //    if (CheckQtyPriliminaryRequirements()) return true;

        //    if (_isCombineAdding == false)
        //        if (CheckTaxAvailability())
        //        {
        //            this.Cursor = Cursors.Default;
        //            using (new CenterWinDialog(this)) { MessageBox.Show("Tax rates not setup for selected item code and item status.Please contact Inventory Department.", "Item Tax", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
        //            _IsTerminate = true;
        //            return _IsTerminate;
        //        }

        //    if (_isCombineAdding == false) CheckItemTax(TxtAdvItem.Text.Trim());
        //    if (_isCombineAdding == false)
        //        if (CheckProfitCenterAllowForWithoutPrice())
        //        {
        //            _IsTerminate = true;
        //            return _IsTerminate;
        //        }
        //    if (_isCombineAdding == false)
        //        if (ConsumerItemProduct())
        //        {
        //            //_IsTerminate = true;
        //            //return _IsTerminate;
        //        }
        //    if (_isSearchPromotion) if (CheckItemPromotion()) { _IsTerminate = true; return _IsTerminate; }
        //    if (_isCombineAdding == false && _priceBookLevelRef.Sapl_is_serialized)
        //        if (CheckSerializedPriceLevelAndLoadSerials(true))
        //        {
        //            _IsTerminate = true;
        //            return _IsTerminate;
        //        }
        //    if (IsGiftVoucher(_itemdetail.Mi_itm_tp)) return true;
        //    if (IsVirtual(_itemdetail.Mi_itm_tp) && _isCompleteCode == false)
        //    {
        //        txtUnitPrice.ReadOnly = false;
        //        txtDisRate.ReadOnly = false;
        //        txtDisAmt.ReadOnly = false;
        //        txtUnitAmt.ReadOnly = true;
        //        txtTaxAmt.ReadOnly = true;
        //        txtLineTotAmt.ReadOnly = true;
        //        return true;
        //    }
        //    else
        //    {
        //        txtUnitPrice.ReadOnly = true;
        //        txtUnitAmt.ReadOnly = true;
        //        txtTaxAmt.ReadOnly = true;
        //        txtLineTotAmt.ReadOnly = true;
        //        if (_itemdetail.Mi_itm_tp == "V")
        //        {
        //            txtDisRate.ReadOnly = true;
        //            txtDisAmt.ReadOnly = true;
        //        }
        //        else
        //        {
        //            txtDisRate.ReadOnly = false;
        //            txtDisAmt.ReadOnly = false;
        //        }
        //    }
        //    _priceDetailRef = new List<PriceDetailRef>();
        //    _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCusCode.Text, TxtAdvItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(dtpRecDate.Text));
        //    if (_priceDetailRef.Count <= 0)
        //    {
        //        if (!_isCompleteCode)
        //        {
        //            this.Cursor = Cursors.Default;
        //            using (new CenterWinDialog(this)) { MessageBox.Show("There is no price for the selected item", "No Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //            SetDecimalTextBoxForZero(true, false, true);
        //            _IsTerminate = true;
        //            return _IsTerminate;
        //        }
        //        else
        //        {
        //            txtUnitPrice.Text = FormatToCurrency("0");
        //        }
        //    }
        //    else
        //    {
        //        if (_isCompleteCode)
        //        {
        //            List<PriceDetailRef> _new = _priceDetailRef;
        //            _priceDetailRef = new List<PriceDetailRef>();
        //            var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
        //            if (_p != null)
        //                if (_p.Count > 0)
        //                {
        //                    if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
        //                    _priceDetailRef.Add(_p[0]);
        //                }
        //        }
        //        if (_priceDetailRef != null && _priceDetailRef.Count > 0)
        //        {
        //            var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
        //            if (_isSuspend > 0)
        //            {
        //                this.Cursor = Cursors.Default;
        //                using (new CenterWinDialog(this)) { MessageBox.Show("Price has been suspended. Please contact IT dept.", "Suspended Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //                _IsTerminate = true;
        //                //pnlMain.Enabled = true;
        //                return _IsTerminate;
        //            }
        //        }
        //        if (_priceDetailRef.Count > 1)
        //        {
        //            //SetColumnForPriceDetailNPromotion(false);
        //            //gvNormalPrice.DataSource = new List<PriceDetailRef>();
        //            //gvPromotionPrice.DataSource = new List<PriceDetailRef>();
        //            //gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
        //            //gvPromotionSerial.DataSource = new List<ReptPickSerials>();
        //            //BindNonSerializedPrice(_priceDetailRef);
        //            //pnlPriceNPromotion.Visible = true;
        //            _IsTerminate = true;
        //            //pnlMain.Enabled = false;

        //            return _IsTerminate;
        //        }
        //        else if (_priceDetailRef.Count == 1)
        //        {
        //            var _one = from _itm in _priceDetailRef
        //                       select _itm;
        //            int _priceType = 0;
        //            foreach (var _single in _one)
        //            {
        //                _priceType = _single.Sapd_price_type;
        //                PriceTypeRef _promotion = TakePromotion(_priceType);
        //                decimal UnitPrice = FigureRoundUp(TaxCalculation(TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
        //                txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
        //                WarrantyRemarks = _single.Sapd_warr_remarks;
        //                SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
        //                Int32 _pbSq = _single.Sapd_pb_seq;
        //                Int32 _pbiSq = _single.Sapd_seq_no;
        //                string _mItem = _single.Sapd_itm_cd;
        //                //if (_promotion.Sarpt_is_com)
        //                //{
        //                //SetColumnForPriceDetailNPromotion(false);
        //                //gvNormalPrice.DataSource = new List<PriceDetailRef>();
        //                //gvPromotionPrice.DataSource = new List<PriceDetailRef>();
        //                //gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
        //                //gvPromotionSerial.DataSource = new List<ReptPickSerials>();
        //                //BindNonSerializedPrice(_priceDetailRef);

        //                //if (gvPromotionPrice.RowCount > 0)
        //                //{
        //                //    //gvPromotionPrice_CellDoubleClick(0, false, false);
        //                //    //pnlPriceNPromotion.Visible = true;
        //                //    //pnlMain.Enabled = false;
        //                //    //_IsTerminate = true;
        //                //    //return _IsTerminate;
        //                //}
        //                //else
        //                //{
        //                //    if (_isCombineAdding == false) txtUnitPrice.Focus();
        //                //}

        //                //}
        //                //else
        //                //{
        //                //    if (_isCombineAdding == false) txtUnitPrice.Focus();
        //                //}
        //            }
        //        }
        //    }
        //    _isEditPrice = false;
        //    _isEditDiscount = false;
        //    if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
        //    decimal vals = Convert.ToDecimal(txtQty.Text);
        //    txtQty.Text = FormatToQty(Convert.ToString(vals));
        //    CalculateItem();

        //    //get price for priority pb
        //    if (_priorityPriceBook != null && cmbBook.SelectedValue != _priorityPriceBook.Sppb_pb && cmbBook.SelectedValue != _priorityPriceBook.Sppb_pb_lvl)
        //    {
        //        decimal normalPrice = Convert.ToDecimal(txtLineTotAmt.Text);

        //        _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _priorityPriceBook.Sppb_pb, _priorityPriceBook.Sppb_pb_lvl, txtCusCode.Text, TxtAdvItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(dtpRecDate.Text));
        //        string _unitPrice = "";
        //        if (_priceDetailRef.Count <= 0)
        //        {
        //            return false;
        //        }

        //        if (_priceDetailRef.Count <= 0)
        //        {
        //            if (!_isCompleteCode)
        //            {
        //                //this.Cursor = Cursors.Default;
        //                //using (new CenterWinDialog(this)) { MessageBox.Show("There is no price for the selected item", "No Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //                //SetDecimalTextBoxForZero(true, false, true);
        //                return false;
        //            }
        //            else
        //            {
        //                _unitPrice = FormatToCurrency("0");
        //            }
        //        }
        //        else
        //        {
        //            if (_isCompleteCode)
        //            {
        //                List<PriceDetailRef> _new = _priceDetailRef;
        //                _priceDetailRef = new List<PriceDetailRef>();
        //                var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
        //                if (_p != null)
        //                    if (_p.Count > 0)
        //                    {
        //                        if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
        //                        _priceDetailRef.Add(_p[0]);
        //                    }
        //            }
        //            if (_priceDetailRef != null && _priceDetailRef.Count > 0)
        //            {
        //                var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
        //                if (_isSuspend > 0)
        //                {
        //                    return false;
        //                }
        //            }
        //            if (_priceDetailRef.Count > 1)
        //            {
        //                /*
        //                DialogResult _result = new DialogResult();
        //                using (new CenterWinDialog(this)) { _result = MessageBox.Show("This item has " +_priorityPriceBook.Sppb_pb + " " + _priorityPriceBook.Sppb_pb_lvl + " Promotion."+"\nDo you want to select " + _priorityPriceBook.Sppb_pb + " Promotion?", "Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1); }
        //                if (_result == DialogResult.Yes)
        //                {
        //                    SetColumnForPriceDetailNPromotion(false);
        //                    gvNormalPrice.DataSource = new List<PriceDetailRef>();
        //                    gvPromotionPrice.DataSource = new List<PriceDetailRef>();
        //                    gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
        //                    gvPromotionSerial.DataSource = new List<ReptPickSerials>();
        //                    BindNonSerializedPrice(_priceDetailRef);
        //                    pnlPriceNPromotion.Visible = true;
        //                    _IsTerminate = true;
        //                    pnlMain.Enabled = false;

        //                    return _IsTerminate;
        //                }
        //                else {
        //                    return false;
        //                }
        //                */
        //                return false;
        //            }
        //            else if (_priceDetailRef.Count == 1)
        //            {
        //                var _one = from _itm in _priceDetailRef
        //                           select _itm;
        //                int _priceType = 0;
        //                foreach (var _single in _one)
        //                {
        //                    _priceType = _single.Sapd_price_type;
        //                    PriceTypeRef _promotion = TakePromotion(_priceType);
        //                    decimal UnitPrice = FigureRoundUp(TaxCalculation(TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
        //                    _unitPrice = FormatToCurrency(Convert.ToString(UnitPrice));
        //                    WarrantyRemarks = _single.Sapd_warr_remarks;
        //                    //SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
        //                    Int32 _pbSq = _single.Sapd_pb_seq;
        //                    Int32 _pbiSq = _single.Sapd_seq_no;
        //                    string _mItem = _single.Sapd_itm_cd;
        //                    //if (_promotion.Sarpt_is_com)
        //                    //{
        //                    //SetColumnForPriceDetailNPromotion(false);
        //                    //gvNormalPrice.DataSource = new List<PriceDetailRef>();
        //                    //gvPromotionPrice.DataSource = new List<PriceDetailRef>();
        //                    //gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
        //                    //gvPromotionSerial.DataSource = new List<ReptPickSerials>();
        //                    //BindNonSerializedPrice(_priceDetailRef);

        //                    //if (gvPromotionPrice.RowCount > 0)
        //                    //{
        //                    //    gvPromotionPrice_CellDoubleClick(0, false, false);
        //                    //    pnlPriceNPromotion.Visible = true;
        //                    //    pnlMain.Enabled = false;
        //                    //    _IsTerminate = true;
        //                    //    return _IsTerminate;
        //                    //}
        //                    //else
        //                    //{
        //                    //    if (_isCombineAdding == false) txtUnitPrice.Focus();
        //                    //}

        //                    //}
        //                    //else
        //                    //{
        //                    //    if (_isCombineAdding == false) txtUnitPrice.Focus();
        //                    //}
        //                }
        //            }
        //        }
        //        _isEditPrice = false;
        //        _isEditDiscount = false;
        //        if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
        //        decimal vals1 = Convert.ToDecimal(txtQty.Text);
        //        txtQty.Text = FormatToQty(Convert.ToString(vals1));
        //        decimal otherPrice = 0;
        //        if (!string.IsNullOrEmpty(txtQty.Text) && !string.IsNullOrEmpty(_unitPrice))
        //        {
        //            decimal _disRate = 0;
        //            decimal _disAmt = 0;
        //            if (!string.IsNullOrEmpty(txtDisRate.Text))
        //            {
        //                _disRate = Convert.ToDecimal(txtDisRate.Text);
        //            }
        //            if (!string.IsNullOrEmpty(txtDisAmt.Text))
        //            {
        //                _disAmt = Convert.ToDecimal(txtDisAmt.Text);
        //            }

        //            otherPrice = CalculateItemTem(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(_unitPrice), _disAmt, _disRate);
        //        }
        //        else
        //            return false;
        //        //decimal otherPrice = Convert.ToDecimal(txtLineTotAmt.Text);
        //        //if price change display message
        //        if (otherPrice < normalPrice)
        //        {
        //            DialogResult _result = new DialogResult();
        //            using (new CenterWinDialog(this)) { _result = MessageBox.Show(_priorityPriceBook.Sppb_pb + " " + _priorityPriceBook.Sppb_pb_lvl + " Price - " + FormatToCurrency(otherPrice.ToString()) + "\nDo you want to select " + _priorityPriceBook.Sppb_pb + " Price?", "Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1); }

        //            if (_result == DialogResult.Yes)
        //            {
        //                txtUnitPrice.Text = FormatToCurrency("0");
        //                txtUnitAmt.Text = FormatToCurrency("0");
        //                txtDisRate.Text = FormatToCurrency("0");
        //                txtDisAmt.Text = FormatToCurrency("0");
        //                txtTaxAmt.Text = FormatToCurrency("0");
        //                txtLineTotAmt.Text = FormatToCurrency("0");
        //                cmbBook.Text = _priorityPriceBook.Sppb_pb;
        //                cmbLevel.Text = _priorityPriceBook.Sppb_pb_lvl;
        //                CheckQty(false);
        //            }
        //            else
        //            {
        //                SSPRomotionType = 0;
        //                //SSCirculerCode = string.Empty;
        //                //SSPriceBookItemSequance = string.Empty;
        //                //SSPriceBookPrice = Convert.ToDecimal(0);
        //                //SSPriceBookSequance = string.Empty;
        //                SSPromotionCode = string.Empty;
        //                /*
        //                _priceDetailRef = CHNLSVC.Sales.GetPrice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCusCode.Text, TxtAdvItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(dtpRecDate.Text));
        //                if (_priceDetailRef.Count == 1)
        //                {
        //                    var _one = from _itm in _priceDetailRef
        //                               select _itm;
        //                    int _priceType = 0;
        //                    foreach (var _single in _one)
        //                    {
        //                        _priceType = _single.Sapd_price_type;
        //                        PriceTypeRef _promotion = TakePromotion(_priceType);
        //                        decimal UnitPrice = FigureRoundUp(TaxCalculation(TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
        //                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
        //                        WarrantyRemarks = _single.Sapd_warr_remarks;
        //                        SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
        //                        Int32 _pbSq = _single.Sapd_pb_seq;
        //                        Int32 _pbiSq = _single.Sapd_seq_no;
        //                        string _mItem = _single.Sapd_itm_cd;
        //                        //if (_promotion.Sarpt_is_com)
        //                        //{
        //                        SetColumnForPriceDetailNPromotion(false);
        //                        gvNormalPrice.DataSource = new List<PriceDetailRef>();
        //                        gvPromotionPrice.DataSource = new List<PriceDetailRef>();
        //                        gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
        //                        gvPromotionSerial.DataSource = new List<ReptPickSerials>();
        //                        BindNonSerializedPrice(_priceDetailRef);

        //                        if (gvPromotionPrice.RowCount > 0)
        //                        {
        //                            gvPromotionPrice_CellDoubleClick(0, false, false);
        //                            pnlPriceNPromotion.Visible = true;
        //                            pnlMain.Enabled = false;
        //                            _IsTerminate = true;
        //                            return _IsTerminate;
        //                        }
        //                        else
        //                        {
        //                            if (_isCombineAdding == false) txtUnitPrice.Focus();
        //                        }

        //                        //}
        //                        //else
        //                        //{
        //                        //    if (_isCombineAdding == false) txtUnitPrice.Focus();
        //                        //}
        //                    }
        //                }
        //                _isEditPrice = false;
        //                _isEditDiscount = false;
        //                if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
        //                decimal vals2 = Convert.ToDecimal(txtQty.Text);
        //                txtQty.Text = FormatToQty(Convert.ToString(vals2));
        //                CalculateItem();
        //                 */
        //            }
        //        }
        //    }

        //    return _IsTerminate;
        //}
        private decimal CalculateItemTem(decimal _qty, decimal _unitPrice, decimal _disAmount, decimal _disRt)
        {
            string unitAmt = FormatToCurrency(Convert.ToString(FigureRoundUp(Convert.ToDecimal(_unitPrice) * Convert.ToDecimal(_qty), true)));

            decimal _vatPortion = FigureRoundUp(TaxCalculation(TxtAdvItem.Text.Trim(), cmbStatus.SelectedValue.ToString().Trim(), Convert.ToDecimal(_qty), _priceBookLevelRef, Convert.ToDecimal(_unitPrice), Convert.ToDecimal(_disAmount), Convert.ToDecimal(_disRt), true), true);
            string tax = FormatToCurrency(Convert.ToString(_vatPortion));

            decimal _totalAmount = Convert.ToDecimal(_qty) * Convert.ToDecimal(_unitPrice);
            decimal _disAmt = 0;

            if (_disRt != 0)
            {
                bool _isVATInvoice = false;
                if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
                else _isVATInvoice = false;

                if (_isVATInvoice)
                    _disAmt = FigureRoundUp(_totalAmount * (Convert.ToDecimal(_disRt) / 100), true);
                else
                {
                    _disAmt = FigureRoundUp((_totalAmount + _vatPortion) * (Convert.ToDecimal(_disRt) / 100), true);
                    if (Convert.ToDecimal(txtDisRate.Text) > 0)
                    {
                        List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, TxtAdvItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty);
                        if (_tax != null && _tax.Count > 0)
                        {
                            decimal _vatval = ((_totalAmount + _vatPortion - _disAmt) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                            tax = Convert.ToString(FigureRoundUp(_vatval, true));
                        }
                    }
                }

                FormatToCurrency(Convert.ToString(_disAmt));
            }

            if (!string.IsNullOrEmpty(tax))
            {
                if (Convert.ToDecimal(txtDisRate.Text) > 0)
                    _totalAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true);
                else
                    _totalAmount = FigureRoundUp(_totalAmount + Convert.ToDecimal(tax) - _disAmt, true);
            }

            return _totalAmount;
        }
        // protected bool CheckQty(bool _isSearchPromotion)
        // {
        //     bool _IsTerminate = false;
        //     _isCompleteCode = false;
        //     _priceDetailRef = new List<PriceDetailRef>();
        //     _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCusCode.Text, TxtAdvItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(dtpRecDate.Text));
        //     if (_priceDetailRef.Count <= 0)
        //     {
        //         if (!_isCompleteCode)
        //         {
        //             this.Cursor = Cursors.Default;

        //              MessageBox.Show("There is no price for the selected item", "No Price", MessageBoxButtons.OK, MessageBoxIcon.Information); 
        //         //    SetDecimalTextBoxForZero(true, false, true);
        //             _IsTerminate = true;
        //             return _IsTerminate;
        //         }
        //         else
        //         {
        //             txtUnitPrice.Text = FormatToCurrency("0");
        //         }
        //     }
        //     else
        //     {
        //         if (_isCompleteCode)
        //         {
        //             List<PriceDetailRef> _new = _priceDetailRef;
        //             _priceDetailRef = new List<PriceDetailRef>();
        //             var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
        //             if (_p != null)
        //                 if (_p.Count > 0)
        //                 {
        //                     if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
        //                     _priceDetailRef.Add(_p[0]);
        //                 }

        //         }
        //         if (_priceDetailRef != null && _priceDetailRef.Count > 0)
        //         {
        //             var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
        //             if (_isSuspend > 0)
        //             {
        //                 this.Cursor = Cursors.Default;
        //               //  using (new CenterWinDialog(this))
        //                 { 
        //                     MessageBox.Show("Price has been suspended. Please contact IT dept.", "Suspended Price", MessageBoxButtons.OK, MessageBoxIcon.Information); 
        //                 }
        //                 _IsTerminate = true;
        //               //  pnlMain.Enabled = true;
        //                 return _IsTerminate;
        //             }
        //         }
        //         if (_priceDetailRef.Count > 1)
        //         {

        //             _IsTerminate = true;


        //             return _IsTerminate;
        //         }
        //         else if (_priceDetailRef.Count == 1)
        //         {
        //             var _one = from _itm in _priceDetailRef
        //                        select _itm;
        //             int _priceType = 0;
        //             foreach (var _single in _one)
        //             {
        //                 _priceType = _single.Sapd_price_type;
        //                 PriceTypeRef _promotion = TakePromotion(_priceType);
        //                 decimal UnitPrice = FigureRoundUp(TaxCalculation(TxtAdvItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
        //                 txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
        //                 WarrantyRemarks = _single.Sapd_warr_remarks;
        //                 SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
        //                 Int32 _pbSq = _single.Sapd_pb_seq;
        //                 Int32 _pbiSq = _single.Sapd_seq_no;
        //                 string _mItem = _single.Sapd_itm_cd;
        //                 //if (_promotion.Sarpt_is_com)
        //                 //{



        //                 //}
        //                 //else
        //                 //{
        //                 //    if (_isCombineAdding == false) txtUnitPrice.Focus();
        //                 //}

        //             }

        //         }

        //     }
        //     return _IsTerminate;
        //}

        //updated by akila 2017/01/06
        private void SetSSPriceDetailVariable(string _circuler, string _pblineseq, string _pbseqno, string _pbprice, string _promotioncd, string _priceTtpe)
        {
            SSCirculerCode = _circuler;
            SSPriceBookItemSequance = _pblineseq;
            SSPriceBookPrice = Convert.ToDecimal(_pbprice);
            SSPriceBookSequance = _pbseqno;

            if (Convert.ToInt16(_priceTtpe) == 0) { SSPromotionCode = string.Empty; }
            else { SSPromotionCode = _promotioncd; }

            //Commented by akila
            //SSPromotionCode = _promotioncd;
            //if (string.IsNullOrEmpty(_promotioncd) || _promotioncd.Trim().ToUpper() == "N/A") SSPromotionCode = string.Empty;
            SSPRomotionType = Convert.ToInt32(_priceTtpe);
        }
        protected PriceTypeRef TakePromotion(Int32 _priceType)
        {
            List<PriceTypeRef> _type = CHNLSVC.Sales.GetAllPriceType(string.Empty);
            var _ptype = from _types in _type
                         where _types.Sarpt_indi == _priceType
                         select _types;
            PriceTypeRef _list = new PriceTypeRef();
            foreach (PriceTypeRef _ones in _ptype)
            {
                _list = _ones;
            }
            return _list;
        }
        private decimal TaxCalculation(string _item, string _status, decimal _qty, PriceBookLevelRef _level, decimal _pbUnitPrice, decimal _discount, decimal _disRate, bool _isTaxfaction)
        {
            decimal _TaxAmt = 0;
            decimal _TotVal = 0;
            decimal _TotDis = 0;
            _TotVal = _pbUnitPrice * _qty;
            _TotDis = _TotVal * _disRate / 100;

            //updated by akila 2017/06/27 - updated according to new tax structure
            #region new tax calculation
            if (_MasterProfitCenter.Mpc_issp_tax == true)
            {
                List<MasterPCTax> _masterPCTax = new List<MasterPCTax>();
                _masterPCTax = CHNLSVC.Sales.GetPcTax(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, 1, dtpRecDate.Value.Date);

                var _pcTaxNBT = from _pcTaxs in _masterPCTax
                                where _pcTaxs.Mpt_taxtp == "NBT"
                                select _pcTaxs;

                foreach (MasterPCTax _one in _pcTaxNBT)
                {
                    if (lblVatExemptStatus.Text != "Available")
                    {
                        _discount = _TotVal * _disRate / 100;
                        _TaxAmt = _TaxAmt + ((_TotVal - _TotDis) * _one.Mpt_taxrt / 100);

                        _TotVal = _TotVal - _TotDis + _TaxAmt;
                    }
                    else { _pbUnitPrice = 0; }
                }

                var _pcTaxVAT = from _pcTaxs in _masterPCTax
                                where _pcTaxs.Mpt_taxtp == "VAT"
                                select _pcTaxs;

                foreach (MasterPCTax _one in _pcTaxVAT)
                {
                    if (lblVatExemptStatus.Text != "Available")
                    {
                        _discount = _TotVal * _disRate / 100;
                        _TaxAmt = _TaxAmt + ((_TotVal) * _one.Mpt_taxrt / 100);
                    }
                    else { _pbUnitPrice = 0; }
                }
                _pbUnitPrice = _TaxAmt;

            }
            else
            {
            if (_priceBookLevelRef != null)
                if (_priceBookLevelRef.Sapl_vat_calc)
                {
                    bool _isVATInvoice = false;

                    if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
                    else _isVATInvoice = false;

                    if (dtpRecDate.Value.Date == _serverDt)
                    {
                        List<MasterItemTax> _taxs = new List<MasterItemTax>();

                            if (_isStrucBaseTax == true)
                            {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _status, "NBT", string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, "NBT", string.Empty);

                        var _Tax = from _itm in _taxs
                                   select _itm;
                        foreach (MasterItemTax _one in _Tax)
                        {
                            if (lblVatExemptStatus.Text != "Available")
                            {
                                    _discount = _TotVal * _disRate / 100;
                                    _TaxAmt = _TaxAmt + ((_TotVal - _TotDis) * _one.Mict_tax_rate / 100);

                                    _TotVal = _TotVal - _TotDis + _TaxAmt;
                                }
                                else { _pbUnitPrice = 0; }
                            }

                            if (_isStrucBaseTax == true)
                                    {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _status, "VAT", string.Empty, _mstItem.Mi_anal1);
                                    }
                                    else
                                _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, "VAT", string.Empty);

                            var _Tax1 = from _itm in _taxs
                                        select _itm;
                            foreach (MasterItemTax _one in _Tax1)
                            {
                                if (lblVatExemptStatus.Text != "Available")
                                {
                                    if (_isTaxfaction == false)
                                    {
                                        _discount = _TotVal * _disRate / 100;
                                        _TaxAmt = _TaxAmt + ((_TotVal - _discount) * _one.Mict_tax_rate / 100);
                            }
                            else
                            {
                                        _discount = _TotVal * _disRate / 100;
                                        _TaxAmt = _TaxAmt + ((_TotVal) * _one.Mict_tax_rate / 100);
                                    }
                            }
                                else { _pbUnitPrice = 0; }
                        }
                    }
                    else
                    {
                        List<MasterItemTax> _taxs = new List<MasterItemTax>();
                            _taxs = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, _item, _status, "NBT", string.Empty, dtpRecDate.Value.Date);
                        var _Tax = from _itm in _taxs
                                   select _itm;
                        if (_taxs.Count > 0)
                        {
                            foreach (MasterItemTax _one in _Tax)
                            {
                                if (lblVatExemptStatus.Text != "Available")
                                {
                                        _discount = _TotVal * _disRate / 100;
                                        _TaxAmt = _TaxAmt + ((_TotVal - _TotDis) * _one.Mict_tax_rate / 100);

                                        _TotVal = _TotVal - _TotDis + _TaxAmt;
                                        }
                                    else { _pbUnitPrice = 0; }
                                }

                                _taxs = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, _item, _status, "VAT", string.Empty, dtpRecDate.Value.Date);
                                var _Tax1 = from _itm in _taxs
                                            select _itm;
                                foreach (MasterItemTax _one in _Tax1)
                                {
                                    if (lblVatExemptStatus.Text != "Available")
                                {
                                        _discount = _TotVal * _disRate / 100;
                                        _TaxAmt = _TaxAmt + ((_TotVal) * _one.Mict_tax_rate / 100);
                                }
                                    else { _pbUnitPrice = 0; }
                            }
                        }
                        else
                        {
                            List<LogMasterItemTax> _taxsEffDt = new List<LogMasterItemTax>();
                                _taxsEffDt = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, _item, _status, "NBT", string.Empty, dtpRecDate.Value.Date);
                            var _TaxEffDt = from _itm in _taxsEffDt
                                            select _itm;
                            foreach (LogMasterItemTax _one in _TaxEffDt)
                            {
                                if (lblVatExemptStatus.Text != "Available")
                                {
                                        _discount = _TotVal * _disRate / 100;
                                        _TaxAmt = _TaxAmt + ((_TotVal - _TotDis) * _one.Lict_tax_rate / 100);

                                        _TotVal = _TotVal - _TotDis + _TaxAmt;
                                        }
                                    else { _pbUnitPrice = 0; }
                                }

                                _taxsEffDt = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, _item, _status, "VAT", string.Empty, dtpRecDate.Value.Date);
                                var _TaxEffDt1 = from _itm in _taxsEffDt
                                                 select _itm;
                                foreach (LogMasterItemTax _one in _TaxEffDt1)
                                {
                                    if (lblVatExemptStatus.Text != "Available")
                                {
                                        _discount = _TotVal * _disRate / 100;
                                        _TaxAmt = _TaxAmt + ((_TotVal) * _one.Lict_tax_rate / 100);
                                }
                                    else { _pbUnitPrice = 0; }
                            }
                        }
                    }
                }
                else
                        if (_isTaxfaction)
                            _pbUnitPrice = 0;
                _pbUnitPrice = _TaxAmt;
            }

            return _pbUnitPrice;
            #endregion

            //Commented by Akila 2017/06/27
            #region old tax calculation
            //if (_priceBookLevelRef != null)
            //    if (_priceBookLevelRef.Sapl_vat_calc)
            //    {
            //        bool _isVATInvoice = false;
            //        if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
            //        else _isVATInvoice = false;
            //        _serverDt = CHNLSVC.Security.GetServerDateTime().Date;
            //        if (dtpRecDate.Value.Date == _serverDt)
            //        {
            //            List<MasterItemTax> _taxs = new List<MasterItemTax>();
            //            if (_isTaxfaction == false) _taxs = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, _status); else _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT");
            //            var _Tax = from _itm in _taxs
            //                       select _itm;
            //            foreach (MasterItemTax _one in _Tax)
            //            {
            //                if (lblVatExemptStatus.Text != "Available")
            //                {
            //                    if (_isTaxfaction == false)
            //                        _pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate;
            //                    else
            //                        if (_isVATInvoice)
            //                        {
            //                            _discount = _pbUnitPrice * _qty * _disRate / 100;
            //                            _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
            //                        }
            //                        else
            //                            _pbUnitPrice = (_pbUnitPrice * _one.Mict_tax_rate / 100) * _qty;
            //                }
            //                else
            //                {
            //                    if (_isTaxfaction) _pbUnitPrice = 0;
            //                }
            //            }
            //        }
            //        else
            //        {
            //            List<MasterItemTax> _taxs = new List<MasterItemTax>();
            //            if (_isTaxfaction == false) _taxs = CHNLSVC.Sales.GetTaxEffDt(BaseCls.GlbUserComCode, _item, _status, dtpRecDate.Value.Date); else _taxs = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT", dtpRecDate.Value.Date);
            //            var _Tax = from _itm in _taxs
            //                       select _itm;
            //            if (_taxs.Count > 0)
            //            {
            //                foreach (MasterItemTax _one in _Tax)
            //                {
            //                    if (lblVatExemptStatus.Text != "Available")
            //                    {
            //                        if (_isTaxfaction == false)
            //                            _pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate;
            //                        else
            //                            if (_isVATInvoice)
            //                            {
            //                                _discount = _pbUnitPrice * _qty * _disRate / 100;
            //                                _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
            //                            }
            //                            else
            //                                _pbUnitPrice = (_pbUnitPrice * _one.Mict_tax_rate / 100) * _qty;
            //                    }
            //                    else
            //                    {
            //                        if (_isTaxfaction) _pbUnitPrice = 0;
            //                    }
            //                }
            //            }
            //            else
            //            {
            //                List<LogMasterItemTax> _taxsEffDt = new List<LogMasterItemTax>();
            //                if (_isTaxfaction == false) _taxsEffDt = CHNLSVC.Sales.GetTaxLog(BaseCls.GlbUserComCode, _item, _status, dtpRecDate.Value.Date); else _taxsEffDt = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT", dtpRecDate.Value.Date);
            //                var _TaxEffDt = from _itm in _taxsEffDt
            //                                select _itm;
            //                foreach (LogMasterItemTax _one in _TaxEffDt)
            //                {
            //                    if (lblVatExemptStatus.Text != "Available")
            //                    {
            //                        if (_isTaxfaction == false)
            //                            _pbUnitPrice = _pbUnitPrice * _one.Lict_tax_rate;
            //                        else
            //                            if (_isVATInvoice)
            //                            {
            //                                _discount = _pbUnitPrice * _qty * _disRate / 100;
            //                                _pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Lict_tax_rate / 100) * _qty;
            //                            }
            //                            else
            //                                _pbUnitPrice = (_pbUnitPrice * _one.Lict_tax_rate / 100) * _qty;
            //                    }
            //                    else
            //                    {
            //                        if (_isTaxfaction) _pbUnitPrice = 0;
            //                    }
            //                }
            //            }
            //        }
            //    }
            //    else
            //        if (_isTaxfaction) _pbUnitPrice = 0;
            //return _pbUnitPrice;
            #endregion


        }

        private decimal FigureRoundUp(decimal value, bool _isFinal)
        {
            if (IsSaleFigureRoundUp && _isFinal) return RoundUpForPlace(Math.Round(value), 2);
            //else return RoundUpForPlace(value, 2);
            else return Math.Round(value, 2);
        }

        private void cmbLevel_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cmbLevel_Leave(object sender, EventArgs e)
        {

            try
            {
                this.Cursor = Cursors.WaitCursor;
                _priceBookLevelRefList = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                LoadLevelStatus(cmbInvType.Text.Trim(), cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                CheckPriceLevelStatusForDoAllow(cmbLevel.Text.Trim(), cmbBook.Text.Trim());
                //   SetColumnForPriceDetailNPromotion(_priceBookLevelRef.Sapl_is_serialized);
                if (_priceBookLevelRef.Sapl_is_serialized && string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You are going to select a serialized price level without serial\n.Please select the serial", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtSerialNo.Clear();
                    return;
                }
                CheckQty(false);
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void ClearPriceTextBox()
        {
            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            //txtDisRate.Text = FormatToCurrency("0");
            //txtDisAmt.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
            //  txtLineTotAmt.Text = FormatToCurrency("0");
        }


        private void cmbBook_Leave(object sender, EventArgs e)
        {
            //   if (chkPickGV.Checked) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                LoadPriceLevel(cmbInvType.Text, cmbBook.Text);
                LoadLevelStatus(cmbInvType.Text.Trim(), cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                CheckPriceLevelStatusForDoAllow(cmbLevel.Text.Trim(), cmbBook.Text.Trim());
                ClearPriceTextBox();
            }
            catch (Exception ex)
            {
                ClearPriceTextBox(); this.Cursor = Cursors.Default;
                //  SystemErrorMessage(ex); 
            }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }




        private void cmbBook_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void txtQty_TextChanged(object sender, EventArgs e)
        {

        }
        private void CheckLevelStatusWithInventoryStatus()
        {
            Boolean _DeliverLater = true;
            if (IsPriceLevelAllowDoAnyStatus == false)
            {
                string _invoiceStatus = cmbStatus.Text.Trim();
                string _inventoryStatus = string.Empty;
                if (_DeliverLater == false)
                    if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                    {
                        //pick inventory status
                        if (!string.IsNullOrEmpty(txtItem.Text.Trim()))
                        {
                            List<InventoryLocation> _balance = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), _invoiceStatus);
                            if (_balance == null)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected price level restricted to deliver with the same item status in the invoice. There is no available qty for this status.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                cmbStatus.Text = "";
                                return;
                            }
                            if (_balance.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected price level restricted to deliver with the same item status in the invoice. There is no available qty for this status.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                cmbStatus.Text = "";
                                return;
                            }
                        }
                    }
                    else
                    {
                        //pick serial status
                        DataTable _serialstatus = CHNLSVC.Inventory.GetAvailableItemStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, DefaultBin, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
                        if (_serialstatus != null)
                            if (_serialstatus.Rows.Count > 0)
                            {
                                _inventoryStatus = _serialstatus.Rows[0].Field<string>("ins_itm_stus");

                                if (_levelStatus != null)
                                    if (_levelStatus.Rows.Count > 0)
                                    {
                                        var _exist = _levelStatus.AsEnumerable().Where(x => x.Field<string>("Code") == _invoiceStatus).Select(y => y.Field<string>("Code")).ToList();
                                        if (_exist != null)
                                            if (_exist.Count > 0)
                                            {
                                                string _code = Convert.ToString(_exist[0]);
                                                cmbStatus.Text = _code;
                                                return;
                                            }
                                    }

                                if (!string.IsNullOrEmpty(_inventoryStatus))
                                    if (!_inventoryStatus.Equals(_invoiceStatus))
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Selected price level restricted to deliver with the same item status in the invoice. There is no available qty for this status.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                        cmbStatus.Text = "";
                                        return;
                                    }
                            }
                    }
            }
        }

        private void txtQty_Leave(object sender, EventArgs e)
        {
            // if (chkPickGV.Checked)
            if (_IsVirtualItem) return;
            try
            {
                if (Convert.ToDecimal(txtQty.Text.Trim()) < 0)
                {
                    MessageBox.Show("Quantity should be positive value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                this.Cursor = Cursors.WaitCursor;
                CheckQty(false);

            }
            catch (Exception ex)
            {
                txtQty.Text = FormatToQty("1"); this.Cursor = Cursors.Default;
                //SystemErrorMessage(ex); 
            }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }


        protected void LoadScheme(string _items)
        {
            try
            {
                DateTime _tmpDtReqPara = Convert.ToDateTime(dtpRecDate.Text).Date;
                List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                string _channel = "";
                string _typeChnl = "SCHNL";

                if (_Saleshir.Count > 0)
                {
                    _channel = (from _lst in _Saleshir
                                where _lst.Mpi_cd == "SCHNL"
                                select _lst.Mpi_val).ToList<string>()[0];
                }

                string _type = "PC";
                string _value = BaseCls.GlbUserDefProf;
                string _item = "";
                string _brand = "";
                string _mainCat = "";
                string _subCat = "";
                string _pb = "";
                string _lvl = "";

                _SchemeDefinition = new List<HpSchemeDefinition>();

                MasterItem _masterItemDetails = new MasterItem();
                _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, _items, 1);

                _item = _masterItemDetails.Mi_cd;
                _brand = _masterItemDetails.Mi_brand;
                _mainCat = _masterItemDetails.Mi_cate_1;
                _subCat = _masterItemDetails.Mi_cate_2;
                _pb = cmbBook.Text;
                _lvl = cmbLevel.Text;

                DataTable _tmpTable = CHNLSVC.Sales.LoadHPSchemasNew(_tmpDtReqPara, BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _items, _pb, _lvl);

                if (_tmpTable.Rows.Count > 0)
                {
                    List<string> _final = _tmpTable.AsEnumerable().Select(x => x.Field<string>("TMP_SCH_CD")).ToList();
                    if (_final.Count() > 0)
                    {
                        cmbSch.DataSource = _final;
                        _isProcess = true;
                    }
                }
                else
                {
                    MessageBox.Show("Scheme details not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    _isProcess = false;
                    return;
                }

                //Commented By Akila 201/01/18
                //List<HpSchemeDefinition> _processList = new List<HpSchemeDefinition>();              

                //if (!string.IsNullOrEmpty(_selectPromoCode))
                //{
                //    //get details according to selected promotion code
                //    List<HpSchemeDefinition> _def4 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, _tmpDtReqPara, null, null, null, null, null, _selectPromoCode);
                //    if (_def4 != null)
                //    {
                //        _processList.AddRange(_def4);
                //    }
                //    List<HpSchemeDefinition> _defChnl4 = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, _tmpDtReqPara, null, null, null, null, null, _selectPromoCode);
                //    if (_defChnl4 != null)
                //    {
                //        _processList.AddRange(_defChnl4);
                //    }
                //}
                //else if (!string.IsNullOrEmpty(_selectSerial))
                //{
                //    List<HpSchemeDefinition> _ser1 = CHNLSVC.Sales.GetSerialSchemeNew(_type, _value, _tmpDtReqPara, _item, _selectSerial, null);
                //    if (_ser1 != null)
                //    {
                //        _processList.AddRange(_ser1);
                //    }
                //    List<HpSchemeDefinition> _serChnl1 = CHNLSVC.Sales.GetSerialSchemeNew(_typeChnl, _channel, _tmpDtReqPara, _item, _selectSerial, null);
                //    if (_serChnl1 != null)
                //    {
                //        _processList.AddRange(_serChnl1);
                //    }
                //}
                //else
                //{
                //    //get details from item
                //    List<HpSchemeDefinition> _def = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, _tmpDtReqPara, _item, null, null, null, null, null);
                //    if (_def != null)
                //    {
                //        _processList.AddRange(_def);
                //    }
                //    List<HpSchemeDefinition> _defChnl = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, _tmpDtReqPara, _item, null, null, null, null, null);
                //    if (_defChnl != null)
                //    {
                //        _processList.AddRange(_defChnl);
                //    }

                //    //get details according to main category
                //    List<HpSchemeDefinition> _def1 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, _tmpDtReqPara, null, _brand, _mainCat, null, null, null);
                //    if (_def1 != null)
                //    {
                //        _processList.AddRange(_def1);
                //    }
                //    List<HpSchemeDefinition> _defChnl1 = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, _tmpDtReqPara, null, _brand, _mainCat, null, null, null);
                //    if (_defChnl1 != null)
                //    {
                //        _processList.AddRange(_defChnl1);
                //    }

                //    //get details according to sub category
                //    List<HpSchemeDefinition> _def2 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, _tmpDtReqPara, null, _brand, null, _subCat, null, null);
                //    if (_def2 != null)
                //    {
                //        _processList.AddRange(_def2);
                //    }
                //    List<HpSchemeDefinition> _defChnl2 = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, _tmpDtReqPara, null, _brand, null, _subCat, null, null);
                //    if (_defChnl2 != null)
                //    {
                //        _processList.AddRange(_defChnl2);
                //    }

                //    //get details according to price book and level
                //    List<HpSchemeDefinition> _def3 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, _tmpDtReqPara, null, null, null, null, null, null);
                //    if (_def3 != null)
                //    {
                //        _processList.AddRange(_def3);
                //    }
                //    List<HpSchemeDefinition> _defChnl3 = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, _tmpDtReqPara, null, null, null, null, null, null);
                //    if (_defChnl3 != null)
                //    {
                //        _processList.AddRange(_defChnl3);
                //    }
                //}

                //List<HpSchemeDefinition> _newList = new List<HpSchemeDefinition>();
                //if (_SchemeDefinition != null && _SchemeDefinition.Count > 0)
                //{
                //    _newList = _SchemeDefinition;
                //    _SchemeDefinition = new List<HpSchemeDefinition>();
                //    foreach (HpSchemeDefinition i in _processList)
                //    {
                //        List<HpSchemeDefinition> _select = (from _lst in _newList
                //                                            where _lst.Hpc_sch_cd == i.Hpc_sch_cd && i.Hpc_is_alw == true
                //                                            select _lst).ToList();

                //        if (_select.Count > 0)
                //        {
                //            _SchemeDefinition.AddRange(_select);
                //        }
                //        else
                //        {
                //            _SchemeDefinition.RemoveAll(item => item.Hpc_sch_cd == i.Hpc_sch_cd);
                //        }
                //    }
                //}
                //else
                //{
                //    _SchemeDefinition.AddRange(_processList);
                //}

                //var _record = (from _lst in _SchemeDefinition
                //               where _lst.Hpc_is_alw == false
                //               select _lst).ToList().Distinct();

                //foreach (HpSchemeDefinition j in _record)
                //{
                //    _SchemeDefinition.RemoveAll(item => item.Hpc_sch_cd == j.Hpc_sch_cd && item.Hpc_seq <= j.Hpc_seq);
                //}

                //var _newRecord = (from _lst in _SchemeDefinition
                //                  select _lst.Hpc_sch_cd).ToList().Distinct();

                //List<MasterSalesPriorityHierarchy> _Saleshir1 = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                //if (_Saleshir1.Count > 0)
                //{
                //    foreach (var j in _newRecord)
                //    {
                //        foreach (MasterSalesPriorityHierarchy _one in _Saleshir1)
                //        {
                //            _type = _one.Mpi_cd;
                //            _value = _one.Mpi_val;

                //            _SchemeDetails = CHNLSVC.Sales.getSchemeDetails(_type, _value, 1, j);

                //            if (_SchemeDetails.Hsd_cd != null)
                //            {
                //                goto L000;
                //            }
                //        }
                //    L000:
                //        if (_SchemeDetails.Hsd_cd == null)
                //        {
                //            _SchemeDefinition.RemoveAll(item => item.Hpc_sch_cd == j);
                //        }
                //    }
                //}

                //var _final = (from _lst in _SchemeDefinition
                //              select _lst.Hpc_sch_cd).ToList().Distinct();

                //if (_final.Count() > 0)
                //{
                //    cmbSch.DataSource = _final.ToList();
                //    _isProcess = true;
                //}
                //else
                //{
                //    MessageBox.Show("Scheme details not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    _isProcess = false;
                //    return;
                //}

                #region oldCode commented by akila 2017/01/18
                //lblCreateDate.Text = Convert.ToString(dtpRecDate.Value.ToShortDateString());
                //List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                //string _channel = "";
                //string _typeChnl = "SCHNL";


                //if (_Saleshir.Count > 0)
                //{
                //    _channel = (from _lst in _Saleshir
                //                where _lst.Mpi_cd == "SCHNL"
                //                select _lst.Mpi_val).ToList<string>()[0];
                //}

                //string _type = "PC";
                //string _value = BaseCls.GlbUserDefProf;


                //string _item = "";
                //string _brand = "";
                //string _mainCat = "";
                //string _subCat = "";
                //string _pb = "";
                //string _lvl = "";

                ////string _type = "PC";
                ////string _value = BaseCls.GlbUserDefProf;

                //_SchemeDefinition = new List<HpSchemeDefinition>();


                //{
                //    //   if (Convert.ToDecimal(txtLineTotAmt.Text ) > 0)
                //    {
                //        MasterItem _masterItemDetails = new MasterItem();
                //        _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, _items, 1);

                //        _item = _masterItemDetails.Mi_cd;
                //        _brand = _masterItemDetails.Mi_brand;
                //        _mainCat = _masterItemDetails.Mi_cate_1;
                //        _subCat = _masterItemDetails.Mi_cate_2;
                //        _pb = cmbBook.Text;
                //        _lvl = cmbLevel.Text;


                //        List<HpSchemeDefinition> _processList = new List<HpSchemeDefinition>();
                //        //List<HpSchemeDefinition> _processListNew = new List<HpSchemeDefinition>();

                //        if (!string.IsNullOrEmpty(_selectPromoCode))
                //        {
                //            //get details according to selected promotion code
                //            List<HpSchemeDefinition> _def4 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, null, null, null, null, _selectPromoCode);
                //            if (_def4 != null)
                //            {
                //                _processList.AddRange(_def4);


                //                //if (_SchemeDefinition != null && _SchemeDefinition.Count > 0)
                //                //{
                //                //    _SchemeDefinition = new List<HpSchemeDefinition>();
                //                //    foreach (HpSchemeDefinition i in _def4)
                //                //    {
                //                //        List<HpSchemeDefinition> _select = (from _lst in _SchemeDefinition
                //                //                                            where _lst.Hpc_sch_cd == i.Hpc_sch_cd
                //                //                                            select _lst).ToList();


                //                //        _SchemeDefinition.AddRange(_select);
                //                //    }

                //                //}
                //                //else
                //                //{
                //                //    _SchemeDefinition.AddRange(_def4);
                //                //}
                //            }

                //            List<HpSchemeDefinition> _defChnl4 = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, null, null, null, null, _selectPromoCode);
                //            if (_defChnl4 != null)
                //            {
                //                _processList.AddRange(_defChnl4);
                //            }
                //        }
                //        else if (!string.IsNullOrEmpty(_selectSerial))
                //        {
                //            List<HpSchemeDefinition> _ser1 = CHNLSVC.Sales.GetSerialSchemeNew(_type, _value, Convert.ToDateTime(lblCreateDate.Text).Date, _item, _selectSerial, null);
                //            if (_ser1 != null)
                //            {
                //                _processList.AddRange(_ser1);
                //            }

                //            List<HpSchemeDefinition> _serChnl1 = CHNLSVC.Sales.GetSerialSchemeNew(_typeChnl, _channel, Convert.ToDateTime(lblCreateDate.Text).Date, _item, _selectSerial, null);
                //            if (_serChnl1 != null)
                //            {
                //                _processList.AddRange(_serChnl1);
                //            }
                //        }
                //        else
                //        {
                //            //get details from item
                //            List<HpSchemeDefinition> _def = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, _item, null, null, null, null, null);
                //            if (_def != null)
                //            {
                //                _processList.AddRange(_def);
                //                //List<HpSchemeDefinition> _ItemList = new List<HpSchemeDefinition>();
                //                //_ItemList = _def;

                //                //foreach (HpSchemeDefinition i in _processListNew)
                //                //{
                //                //    List<HpSchemeDefinition> _select = (from _lst in _ItemList
                //                //                                        where _lst.Hpc_sch_cd == i.Hpc_sch_cd
                //                //                                        select _lst).Max<i.Hpc_seq>;

                //                //    if (_select.Count > 0)
                //                //    {
                //                //        _SchemeDefinition.AddRange(_select);
                //                //    }
                //                //}


                //                //if (_SchemeDefinition != null && _SchemeDefinition.Count > 0)
                //                //{
                //                //    _SchemeDefinition = new List<HpSchemeDefinition>();
                //                //    foreach (HpSchemeDefinition i in _def)
                //                //    {
                //                //        List<HpSchemeDefinition> _select = (from _lst in _SchemeDefinition
                //                //                       where _lst.Hpc_sch_cd == i.Hpc_sch_cd
                //                //                       select _lst).ToList();


                //                //        _SchemeDefinition.AddRange(_select);
                //                //    }

                //                //}
                //                //else
                //                //{
                //                //    _SchemeDefinition.AddRange(_def);
                //                //}
                //            }

                //            List<HpSchemeDefinition> _defChnl = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, _item, null, null, null, null, null);
                //            if (_defChnl != null)
                //            {
                //                _processList.AddRange(_defChnl);
                //            }



                //            //get details according to main category
                //            List<HpSchemeDefinition> _def1 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, _brand, _mainCat, null, null, null);
                //            if (_def1 != null)
                //            {
                //                _processList.AddRange(_def1);
                //                //if (_SchemeDefinition != null && _SchemeDefinition.Count > 0)
                //                //{
                //                //    _SchemeDefinition = new List<HpSchemeDefinition>();
                //                //    foreach (HpSchemeDefinition i in _def1)
                //                //    {
                //                //        List<HpSchemeDefinition> _select = (from _lst in _SchemeDefinition
                //                //                                            where _lst.Hpc_sch_cd == i.Hpc_sch_cd
                //                //                                            select _lst).ToList();


                //                //        _SchemeDefinition.AddRange(_select);
                //                //    }

                //                //}
                //                //else
                //                //{
                //                //    _SchemeDefinition.AddRange(_def1);
                //                //}
                //            }
                //            List<HpSchemeDefinition> _defChnl1 = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, _brand, _mainCat, null, null, null);
                //            if (_defChnl1 != null)
                //            {
                //                _processList.AddRange(_defChnl1);
                //            }


                //            //get details according to sub category
                //            List<HpSchemeDefinition> _def2 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, _brand, null, _subCat, null, null);
                //            if (_def2 != null)
                //            {
                //                _processList.AddRange(_def2);
                //                //if (_SchemeDefinition != null && _SchemeDefinition.Count > 0)
                //                //{
                //                //    _SchemeDefinition = new List<HpSchemeDefinition>();
                //                //    foreach (HpSchemeDefinition i in _def2)
                //                //    {
                //                //        List<HpSchemeDefinition> _select = (from _lst in _SchemeDefinition
                //                //                                            where _lst.Hpc_sch_cd == i.Hpc_sch_cd
                //                //                                            select _lst).ToList();


                //                //        _SchemeDefinition.AddRange(_select);
                //                //    }

                //                //}
                //                //else
                //                //{
                //                //    _SchemeDefinition.AddRange(_def2);
                //                //}
                //            }
                //            List<HpSchemeDefinition> _defChnl2 = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, _brand, null, _subCat, null, null);
                //            if (_defChnl2 != null)
                //            {
                //                _processList.AddRange(_defChnl2);
                //            }

                //            //get details according to price book and level
                //            List<HpSchemeDefinition> _def3 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, null, null, null, null, null);
                //            if (_def3 != null)
                //            {
                //                _processList.AddRange(_def3);
                //                //if (_SchemeDefinition != null && _SchemeDefinition.Count > 0)
                //                //{
                //                //    _SchemeDefinition = new List<HpSchemeDefinition>();
                //                //    foreach (HpSchemeDefinition i in _def3)
                //                //    {
                //                //        List<HpSchemeDefinition> _select = (from _lst in _SchemeDefinition
                //                //                                            where _lst.Hpc_sch_cd == i.Hpc_sch_cd
                //                //                                            select _lst).ToList();


                //                //        _SchemeDefinition.AddRange(_select);
                //                //    }

                //                //}
                //                //else
                //                //{
                //                //    _SchemeDefinition.AddRange(_def3);
                //                //}
                //            }
                //            List<HpSchemeDefinition> _defChnl3 = CHNLSVC.Sales.GetAllSchemeNew(_typeChnl, _channel, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, null, null, null, null, null);
                //            if (_defChnl3 != null)
                //            {
                //                _processList.AddRange(_defChnl3);
                //            }

                //        }

                //        List<HpSchemeDefinition> _newList = new List<HpSchemeDefinition>();

                //        if (_SchemeDefinition != null && _SchemeDefinition.Count > 0)
                //        {
                //            _newList = _SchemeDefinition;
                //            _SchemeDefinition = new List<HpSchemeDefinition>();
                //            foreach (HpSchemeDefinition i in _processList)
                //            {
                //                List<HpSchemeDefinition> _select = (from _lst in _newList
                //                                                    where _lst.Hpc_sch_cd == i.Hpc_sch_cd && i.Hpc_is_alw == true
                //                                                    select _lst).ToList();

                //                if (_select.Count > 0)
                //                {
                //                    _SchemeDefinition.AddRange(_select);
                //                }
                //                else
                //                {
                //                    _SchemeDefinition.RemoveAll(item => item.Hpc_sch_cd == i.Hpc_sch_cd);
                //                }
                //            }

                //        }
                //        else
                //        {
                //            _SchemeDefinition.AddRange(_processList);
                //        }
                //        //-------
                //    }
                //}

                //var _record = (from _lst in _SchemeDefinition
                //               where _lst.Hpc_is_alw == false
                //               select _lst).ToList().Distinct();

                //foreach (HpSchemeDefinition j in _record)
                //{
                //    _SchemeDefinition.RemoveAll(item => item.Hpc_sch_cd == j.Hpc_sch_cd && item.Hpc_seq <= j.Hpc_seq);
                //    //_SchemeDefinition.RemoveAll(item => item.Hpc_sch_cd == j.Hpc_sch_cd);
                //}

                //var _newRecord = (from _lst in _SchemeDefinition
                //                  select _lst.Hpc_sch_cd).ToList().Distinct();

                //List<MasterSalesPriorityHierarchy> _Saleshir1 = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                //if (_Saleshir1.Count > 0)
                //{

                //    foreach (var j in _newRecord)
                //    {
                //        foreach (MasterSalesPriorityHierarchy _one in _Saleshir1)
                //        {
                //            _type = _one.Mpi_cd;
                //            _value = _one.Mpi_val;

                //            _SchemeDetails = CHNLSVC.Sales.getSchemeDetails(_type, _value, 1, j);

                //            if (_SchemeDetails.Hsd_cd != null)
                //            {
                //                goto L000;
                //            }

                //        }

                //    L000:
                //        if (_SchemeDetails.Hsd_cd == null)
                //        {
                //            _SchemeDefinition.RemoveAll(item => item.Hpc_sch_cd == j);
                //        }

                //    }
                //}






                //var _final = (from _lst in _SchemeDefinition
                //              select _lst.Hpc_sch_cd).ToList().Distinct();

                //if (_final.Count() > 0)
                //{

                //    cmbSch.DataSource = _final.ToList();
                //    _isProcess = true;
                //}
                //else
                //{
                //    MessageBox.Show("Scheme details not found.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    _isProcess = false;
                //    return;
                //}
                #endregion
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }
        #endregion
        private void btnSearch_Item_Click(object sender, EventArgs e)
        {
            _commonSearch = new CommonSearch.CommonSearch();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch.ReturnIndex = 0;
                DataTable _result = new DataTable();

                if ((txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString()) && (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString()))
                {

                    if (string.IsNullOrEmpty(txtIntrCompany.Text))
                    {
                        MessageBox.Show("Please select a company", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                    if (string.IsNullOrEmpty(txtIntrLocation.Text))
                    {
                        MessageBox.Show("Please select a location", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }


                    _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ItemByLocation);
                    _result = CHNLSVC.CommonSearch.GetItemByLocation(_commonSearch.SearchParams, null, null);

                }
                else
                {
                    _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceItemUnAssable);
                    _result = CHNLSVC.CommonSearch.GetItemforInvoiceSearchData(_commonSearch.SearchParams, null, null);
                }


                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = TxtAdvItem;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                TxtAdvItem.Select();

                ////Commented by akila 2016/12/31
                //this.Cursor = Cursors.WaitCursor;
                //_commonSearch.ReturnIndex = 0;
                //_commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceItemUnAssable);
                //DataTable _result = CHNLSVC.CommonSearch.GetItemforInvoiceSearchData(_commonSearch.SearchParams, null, null);
                //_commonSearch.dvResult.DataSource = _result;
                //_commonSearch.BindUCtrlDDLData(_result);
                //_commonSearch.obj_TragetTextBox = TxtAdvItem;
                //_commonSearch.IsSearchEnter = true;
                //this.Cursor = Cursors.Default;
                //_commonSearch.ShowDialog();
                //TxtAdvItem.Select();
            }
            catch (Exception ex)
            {
                TxtAdvItem.Clear(); this.Cursor = Cursors.Default;
                SystemErrorMessage(ex);
            }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void TxtAdvItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Item_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                //cmbBook.Focus();
                txtQty.Focus();
        }

        private bool LoadItemDetail(string _item)
        {
            //lblItemDescription.Text = "Description : " + string.Empty;
            //lblItemModel.Text = "Model : " + string.Empty;
            //lblItemBrand.Text = "Brand : " + string.Empty;
            //lblItemSerialStatus.Text = "Serial Status : " + string.Empty;
            _itemdetail = new MasterItem();

            bool _isValid = false;

            if (!string.IsNullOrEmpty(_item)) _itemdetail = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
            if (_itemdetail != null && !string.IsNullOrEmpty(_itemdetail.Mi_cd))
            {
                _isValid = true;
                string _description = _itemdetail.Mi_longdesc;
                string _model = _itemdetail.Mi_model;
                string _brand = _itemdetail.Mi_brand;
                string _serialstatus = _itemdetail.Mi_is_ser1 == 1 ? "Available" : "Non";

                //lblItemDescription.Text = "Description : " + _description;
                //lblItemModel.Text = "Model : " + _model;
                //lblItemBrand.Text = "Brand : " + _brand;
                //lblItemSerialStatus.Text = "Serial Status : " + _serialstatus;
            }
            else _isValid = false;
            return _isValid;
        }
        //private void CheckItemCode(object sender, EventArgs e)
        //{
        //    if (string.IsNullOrEmpty(TxtAdvItem.Text.Trim())) return;
        //    if (_isItemChecking) { _isItemChecking = false; return; }
        //    _isItemChecking = true;
        //    try
        //    {
        //        this.Cursor = Cursors.WaitCursor;
        //        if (!LoadItemDetail(TxtAdvItem.Text.Trim()))
        //        {
        //            this.Cursor = Cursors.Default;
        //           // using (new CenterWinDialog(this)) 
        //            { MessageBox.Show("Please check the item code", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //            TxtAdvItem.Clear();
        //            TxtAdvItem.Focus();
        //         //   if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater == false) cmbStatus.Text = "";
        //            return;
        //        }

        //        //if (_itemdetail.Mi_is_ser1 == 1 && IsGiftVoucher(_itemdetail.Mi_itm_tp))
        //        //{
        //        //    if (string.IsNullOrEmpty(txtSerialNo.Text))
        //        //    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the gift voucher number", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Clear(); txtSerialNo.Clear(); }

        //        //    return;
        //        //}
        //      //  IsVirtual(_itemdetail.Mi_itm_tp);

        //        //if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater == false && chkDeliverNow == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false))
        //        //{
        //        //    this.Cursor = Cursors.Default;
        //        //    using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial no for the serialized item", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //        //    return;
        //        //}
        //        //if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater == true && chkDeliverNow == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) && _isRegistrationMandatory)
        //        //{
        //        //    this.Cursor = Cursors.Default;
        //        //   // using (new CenterWinDialog(this)) 
        //        //    { MessageBox.Show("Registration mandatory items can not save without serial", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //        //    return;
        //        //}

        //        //if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater == false) cmbStatus.Text = "";

        //        //if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) txtQty.Text = FormatToQty("0"); else
        //        //if (txtSerialNo.Text != "")
        //        //{
        //        //    txtQty.Text = FormatToQty("1");
        //        //}
        //        if (_IsVirtualItem)
        //        {
        //            bool block = CheckBlockItem(TxtAdvItem.Text.Trim(), 0, false);
        //            if (block)
        //            {
        //                TxtAdvItem.Text = "";
        //            }
        //        }
        //        CheckQty(true);
        //        //btnAddItem.Focus();
        //    }
        //    catch (Exception ex)
        //    { this.Cursor = Cursors.Default;
        //      //  SystemErrorMessage(ex); 
        //    }
        //    finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); _isItemChecking = false; }
        //}
        private bool _isBlocked = false;
        private bool _isItemChecking = false;
        private LoyaltyType _loyaltyType;

        private bool CheckBlockItem(string _item, int _pricetype, bool _isCombineItemAddingNow)
        {
            if (_isCombineItemAddingNow) return false;
            _isBlocked = false;
            if (_priceBookLevelRef.Sapl_is_serialized == false)
            {
                MasterItemBlock _block = CHNLSVC.Inventory.GetBlockedItemByPriceType(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item, _pricetype);
                if (_block != null)
                {
                    this.Cursor = Cursors.Default;
                    // using (new CenterWinDialog(this)) 
                    {
                        //  MessageBox.Show(_item + " item already blocked by the Costing Dept.", "Blocked Item", MessageBoxButtons.OK, MessageBoxIcon.Information); 
                    }
                    //_isBlocked = true;
                }
            }
            return _isBlocked;
        }
        private void TxtAdvItem_TextChanged(object sender, EventArgs e)
        {

        }



        private decimal _vouDisvals = 0;
        private decimal _vouDisrates = 0;
        private string _vouNo = "";
        private void btnProcess_Click(object sender, EventArgs e)
        {
            try
            {


                if (cmbSch.Text == "")
                {
                    MessageBox.Show("Please select scheme.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    cmbSch.Focus();
                    return;
                }
                lblSchme.Text = cmbSch.Text;
                //get max hp allow qty
                Decimal _maxAllowQty = 0;
                HpSystemParameters _SystemPara = new HpSystemParameters();
                _SystemPara = CHNLSVC.Sales.GetSystemParameter("PC", BaseCls.GlbUserDefProf, "ACNOITMS", Convert.ToDateTime(dtpRecDate.Text).Date);

                if (_SystemPara.Hsy_cd != null)
                {
                    _maxAllowQty = _SystemPara.Hsy_val;
                }
                if (_maxAllowQty < Convert.ToDecimal(txtQty.Text))
                {
                    MessageBox.Show("Maximum qty for per account is exceed.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                Decimal Tval = 0;
                Decimal TvalTax = 0;

                BindingSource _bind = (BindingSource)gvInvoiceItem.DataSource;
                List<InvoiceItem> _tmpList = new List<InvoiceItem>();
                _tmpList = _bind.DataSource as List<InvoiceItem>;
                _invoiceItemList = _tmpList;
                foreach (InvoiceItem itm in _invoiceItemList)
                {
                    Tval = Tval + (itm.Sad_unit_amt - itm.Sad_disc_amt) + itm.Sad_itm_tax_amt;
                    TvalTax = TvalTax + itm.Sad_itm_tax_amt;

                }


                _NetAmt = Tval;
                _TotVat = TvalTax;


                string _type = "";
                string _value = "";
                _SchemeDetails = new HpSchemeDetails();


                if (string.IsNullOrEmpty(cmbSch.Text))
                {
                    return;
                }


                List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                if (_Saleshir.Count > 0)
                {

                    foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                    {
                        _type = _one.Mpi_cd;
                        _value = _one.Mpi_val;

                        _SchemeDetails = CHNLSVC.Sales.getSchemeDetails(_type, _value, 1, cmbSch.Text);

                        if (_SchemeDetails.Hsd_cd != null)
                        {
                            if (_SchemeDetails.Hsd_alw_gs == true)
                            {
                                if (MessageBox.Show("Selected scheme is a group sale scheme. Do you want to proceed ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                                {
                                    return;
                                }
                            }

                            if (_SchemeDetails.Hsd_alw_cus == true)
                            {
                                if (MessageBox.Show("Selected scheme is a special customer base scheme. Do you want to proceed ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                                {
                                    return;
                                }
                            }

                            Int32 _isReveted = 0;



                            _vouDisvals = 0;
                            _vouDisrates = 0;
                            ///   chkVou.Checked = false;
                            _vouNo = "";
                            if (_SchemeDetails.Hsd_alw_vou == true && _SchemeDetails.Hsd_vou_man == true)
                            {
                                if (MessageBox.Show("Selected scheme is a enable only special vouchers. Do you want to proceed ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                                {
                                    return;
                                }
                                else
                                {
                                    // chkVou.Checked = true;
                                    string _vou = Microsoft.VisualBasic.Interaction.InputBox("Please enter voucher number.", "Voucher", "", -1, -1);
                                    if (string.IsNullOrEmpty(_vou))
                                    {
                                        MessageBox.Show("You cannot process.Voucher number is mandotory.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }
                                    else
                                    {
                                        if (!IsNumeric(_vou))
                                        {
                                            MessageBox.Show("You cannot process.Invalid voucher.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            _vou = "";
                                            return;
                                        }

                                        Boolean _validVou = false;
                                        List<HPAddSchemePara> _appVou = CHNLSVC.Sales.GetAddParaDetails("VOU", cmbSch.Text);

                                        if (_appVou.Count > 0)
                                        {
                                            foreach (HPAddSchemePara _tmpVou in _appVou)
                                            {
                                                List<GiftVoucherPages> _tmp = CHNLSVC.Inventory.GetAllGvbyPages(BaseCls.GlbUserComCode, null, "A", _tmpVou.Hap_cd, Convert.ToInt32(_vou));
                                                if (_tmp != null)
                                                {
                                                    if (_tmp.Count > 0)
                                                    {
                                                        foreach (GiftVoucherPages _tmpPage in _tmp)
                                                        {
                                                            if (_tmpPage.Gvp_valid_to < Convert.ToDateTime(dtpRecDate.Text).Date)
                                                            {
                                                                MessageBox.Show("Selected voucher date expire.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                _vou = "";
                                                                return;
                                                            }

                                                            _validVou = true;
                                                            goto L111;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    L111: int I = 0;
                                        if (_validVou == false)
                                        {
                                            MessageBox.Show("Invalid voucher selected.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            _vou = "";
                                            return;
                                        }
                                        else
                                        {
                                            CashGeneralEntiryDiscountDef GeneralDiscount = new CashGeneralEntiryDiscountDef();
                                            Boolean _IsPromoVou = false;
                                            //  foreach (InvoiceItem _itm in _AccountItems)
                                            {
                                                //  if (_itm.Sad_unit_rt > 0)
                                                {
                                                    GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "", Convert.ToDateTime(dtpRecDate.Value).Date, cmbBook.Text, cmbLevel.Text, HSSelectedtItem, _vou);
                                                    //GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "", Convert.ToDateTime(dtpRecDate.Value).Date, cmbBook.Text, cmbLevel.Text, TxtAdvItem.Text, _vou);
                                                    if (GeneralDiscount != null)
                                                    {
                                                        _IsPromoVou = true;
                                                        GeneralDiscount.Sgdd_seq = Convert.ToInt32(_vou);
                                                        goto L222;
                                                    }
                                                }
                                            }
                                        L222: int x = 0;
                                            if (_IsPromoVou == false)
                                            {
                                                MessageBox.Show("Invalid voucher selected. Selected items are not entitle for this voucher.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                _vou = "";
                                                _vouNo = "";
                                                _vouDisvals = 0;
                                                _vouDisrates = 0;
                                                return;
                                            }
                                            else
                                            {

                                                _vouDisvals = GeneralDiscount.Sgdd_disc_val;
                                                _vouDisrates = GeneralDiscount.Sgdd_disc_rt;
                                                _vouNo = _vou;
                                            }
                                        }
                                    }
                                }
                            }
                            else if (_SchemeDetails.Hsd_alw_vou == true && _SchemeDetails.Hsd_vou_man == false)
                            {
                                if (MessageBox.Show("Selected scheme is a enable for special vouchers. Do you want to proceed ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.No)
                                {
                                    goto L25;
                                }
                                else
                                {
                                    // chkVou.Checked = true;
                                    string _vou = Microsoft.VisualBasic.Interaction.InputBox("Please enter voucher number.", "Voucher", "", -1, -1);
                                    if (string.IsNullOrEmpty(_vou))
                                    {
                                        MessageBox.Show("You cannot process.please enter voucher number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                        return;
                                    }
                                    else
                                    {
                                        if (!IsNumeric(_vou))
                                        {
                                            MessageBox.Show("You cannot process.Invalid voucher.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            _vou = "";
                                            return;
                                        }

                                        Boolean _validVou = false;
                                        List<HPAddSchemePara> _appVou = CHNLSVC.Sales.GetAddParaDetails("VOU", cmbSch.Text);

                                        if (_appVou.Count > 0)
                                        {
                                            foreach (HPAddSchemePara _tmpVou in _appVou)
                                            {
                                                List<GiftVoucherPages> _tmp = CHNLSVC.Inventory.GetAllGvbyPages(BaseCls.GlbUserComCode, null, "A", _tmpVou.Hap_cd, Convert.ToInt32(_vou));
                                                if (_tmp != null)
                                                {
                                                    if (_tmp.Count > 0)
                                                    {
                                                        foreach (GiftVoucherPages _tmpPage in _tmp)
                                                        {
                                                            if (_tmpPage.Gvp_valid_to < Convert.ToDateTime(lblCreateDate.Text).Date)
                                                            {
                                                                MessageBox.Show("Selected voucher date expire.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                                _vou = "";
                                                                return;
                                                            }

                                                            _validVou = true;
                                                            goto L111;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    L111: int I = 0;
                                        if (_validVou == false)
                                        {
                                            MessageBox.Show("Invalid voucher selected.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            _vou = "";
                                            return;
                                        }
                                        else
                                        {
                                            CashGeneralEntiryDiscountDef GeneralDiscount = new CashGeneralEntiryDiscountDef();
                                            Boolean _IsPromoVou = false;
                                            //   foreach (InvoiceItem _itm in _AccountItems)
                                            {
                                                if (Convert.ToDecimal(txtUnitPrice.Text) > 0)
                                                {
                                                    GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "", Convert.ToDateTime(dtpRecDate.Value).Date, cmbBook.Text, cmbLevel.Text, HSSelectedtItem, _vou);
                                                    //GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "", Convert.ToDateTime(dtpRecDate.Value).Date, cmbBook.Text, cmbLevel.Text, TxtAdvItem.Text, _vou);
                                                    if (GeneralDiscount != null)
                                                    {
                                                        _IsPromoVou = true;
                                                        GeneralDiscount.Sgdd_seq = Convert.ToInt32(_vou);
                                                        goto L222;
                                                    }
                                                }
                                            }
                                        L222: int x = 0;
                                            if (_IsPromoVou == false)
                                            {
                                                MessageBox.Show("Invalid voucher selected. Selected items are not entitle for this voucher.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                _vou = "";
                                                _vouDisvals = 0;
                                                _vouDisrates = 0;
                                                _vouNo = "";
                                                return;
                                            }
                                            else
                                            {
                                                _vouNo = _vou;
                                                _vouDisvals = GeneralDiscount.Sgdd_disc_val;
                                                _vouDisrates = GeneralDiscount.Sgdd_disc_rt;
                                            }
                                        }
                                    }
                                }
                            }
                            goto L25;

                        }

                    }
                }
            L25:

                if (_SchemeDetails.Hsd_cd == null)
                {
                    MessageBox.Show("You cannot process scheme is inactive.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                txtCusPay.Text = "0.00";

                this.Cursor = Cursors.WaitCursor;

                GetDiscountAndCommission();
                GetServiceCharges();
                CalHireAmount();
                CalCommissionAmount();
                GetOtherCharges();
                GetInsuarance();
                CalTotalCash();
                CalInstallmentBaseAmt();
                TotalCash();
                GetInsAndReg();

                //   Show_Shedule();


                //Show_Shedule();
                //  Get_ProofDocs();
                //  lblPayBalance.Text = lblHPInitPay.Text;
                BalanceAmount = Convert.ToDecimal(lblHPInitPay.Text);
                if (!string.IsNullOrEmpty(lblTerm.Text) && Convert.ToInt16(lblTerm.Text) > 0)
                {
                    _isCalProcess = true;
                    cmbSch.Enabled = false;
                    //  btnContinue.Enabled = false;
                }
                else
                {
                    MessageBox.Show("Process terminated due to none availablity of parameters.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    _isCalProcess = false;
                    cmbSch.Enabled = false;
                    //btnContinue.Enabled = false;
                }
                this.Cursor = Cursors.Default;
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }
        private void GetInsAndReg()
        {
            try
            {
                Int32 _HpTerm = 0;
                decimal _insAmt = 0;
                decimal _regAmt = 0;
                string _type = "";
                string _value = "";
                Boolean _isInsuFound = false;

                //List<InvoiceItem> _item = new List<InvoiceItem>();
                //_item = _AccountItems;

                MasterVehicalInsuranceDefinitionNew _vehIns = new MasterVehicalInsuranceDefinitionNew();
                VehicalRegistrationDefnition _vehDef = new VehicalRegistrationDefnition();
                //   foreach (InvoiceItem _tempInv in _item)
                {
                    MasterItem _itemList = new MasterItem();
                    _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, HSSelectedtItem);
                    //_itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, TxtAdvItem.Text);

                    if (_itemList.Mi_need_insu == true)
                    {
                        _HpTerm = Convert.ToInt32(lblTerm.Text);
                        if ((_HpTerm + 3) <= 3)
                        {
                            _HpTerm = 3;
                        }
                        else if ((_HpTerm + 3) <= 6)
                        {
                            _HpTerm = 6;
                        }
                        else if ((_HpTerm + 3) <= 9)
                        {
                            _HpTerm = 9;
                        }
                        else
                        {
                            _HpTerm = 12;
                        }

                        List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                        string _Subchannel = "";
                        string _typeSubChnl = "SCHNL";

                        string _Mainchannel = "";
                        string _typeMainChanl = "CHNL";

                        string _Pctype = "PC";
                        string _typePc = BaseCls.GlbUserDefProf;

                        decimal _itmVal = 0;

                        _itmVal = Convert.ToDecimal(txtLineTotAmt.Text) / Convert.ToDecimal(txtQty.Text);

                        if (_Saleshir.Count > 0)
                        {
                            _Subchannel = (from _lst in _Saleshir
                                           where _lst.Mpi_cd == "SCHNL"
                                           select _lst.Mpi_val).ToList<string>()[0];


                            _Mainchannel = (from _lst in _Saleshir
                                            where _lst.Mpi_cd == "CHNL"
                                            select _lst.Mpi_val).ToList<string>()[0];



                            //if (!string.IsNullOrEmpty(_tempInv.Sad_promo_cd))
                            //{
                            //    //check pc + promo
                            //    _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", TxtAdvItem.Text, _HpTerm, cmbBook.Text, cmbLevel.Text, Convert.ToDateTime(lblCreateDate.Text).Date, _itmVal - 10, _itmVal + 10, _tempInv.Sad_promo_cd, null);

                            //    if (_vehIns.Svid_itm != null)
                            //    {
                            //        _insAmt = _insAmt + (_vehIns.Svid_val * _tempInv.Sad_qty);
                            //        _isInsuFound = true;
                            //        goto L55;
                            //    }

                            //    //check sub channel + promo
                            //    _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", TxtAdvItem.Text, _HpTerm, cmbBook.Text, cmbLevel.Text, Convert.ToDateTime(lblCreateDate.Text).Date, _itmVal - 10, _itmVal + 10, _tempInv.Sad_promo_cd, null);

                            //    if (_vehIns.Svid_itm != null)
                            //    {
                            //        _insAmt = _insAmt + (_vehIns.Svid_val * _tempInv.Sad_qty);
                            //        _isInsuFound = true;
                            //        goto L55;
                            //    }

                            //    //check channel + promo
                            //    _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", TxtAdvItem.Text, _HpTerm, cmbBook.Text, cmbLevel.Text, Convert.ToDateTime(lblCreateDate.Text).Date, _itmVal - 10, _itmVal + 10, _tempInv.Sad_promo_cd, null);

                            //    if (_vehIns.Svid_itm != null)
                            //    {
                            //        _insAmt = _insAmt + (_vehIns.Svid_val * _tempInv.Sad_qty);
                            //        _isInsuFound = true;
                            //        goto L55;
                            //    }


                            //    //check pc
                            //    _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", TxtAdvItem.Text, _HpTerm, cmbBook.Text, cmbLevel.Text, Convert.ToDateTime(lblCreateDate.Text).Date, _itmVal - 10, _itmVal + 10, null, null);

                            //    if (_vehIns.Svid_itm != null)
                            //    {
                            //        _insAmt = _insAmt + (_vehIns.Svid_val * _tempInv.Sad_qty);
                            //        _isInsuFound = true;
                            //        goto L55;
                            //    }

                            //    //check sub channel
                            //    _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", TxtAdvItem.Text, _HpTerm, cmbBook.Text, cmbLevel.Text, Convert.ToDateTime(lblCreateDate.Text).Date, _itmVal - 10, _itmVal + 10, null, null);

                            //    if (_vehIns.Svid_itm != null)
                            //    {
                            //        _insAmt = _insAmt + (_vehIns.Svid_val * _tempInv.Sad_qty);
                            //        _isInsuFound = true;
                            //        goto L55;
                            //    }

                            //    //check channel
                            //    _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", TxtAdvItem.Text, _HpTerm, cmbBook.Text, cmbLevel.Text, Convert.ToDateTime(lblCreateDate.Text).Date, _itmVal - 10, _itmVal + 10, null, null);

                            //    if (_vehIns.Svid_itm != null)
                            //    {
                            //        _insAmt = _insAmt + (_vehIns.Svid_val * _tempInv.Sad_qty);
                            //        _isInsuFound = true;
                            //        goto L55;
                            //    }


                            //}
                            // else
                            {
                                //check pc
                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", HSSelectedtItem, _HpTerm, cmbBook.Text, cmbLevel.Text, Convert.ToDateTime(dtpRecDate.Text).Date, _itmVal - 10, _itmVal + 10, null, null);
                                //_vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _Pctype, _typePc, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", TxtAdvItem.Text, _HpTerm, cmbBook.Text, cmbLevel.Text, Convert.ToDateTime(lblCreateDate.Text).Date, _itmVal - 10, _itmVal + 10, null, null);

                                if (_vehIns.Svid_itm != null)
                                {
                                    _insAmt = _insAmt + (_vehIns.Svid_val * Convert.ToDecimal(txtQty.Text));
                                    _isInsuFound = true;
                                    goto L55;
                                }

                                //check sub channel
                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", HSSelectedtItem, _HpTerm, cmbBook.Text, cmbLevel.Text, _invDt, _itmVal - 10, _itmVal + 10, null, null);
                                //_vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeSubChnl, _Subchannel, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", TxtAdvItem.Text, _HpTerm, cmbBook.Text, cmbLevel.Text, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                if (_vehIns.Svid_itm != null)
                                {
                                    _insAmt = _insAmt + (_vehIns.Svid_val * Convert.ToDecimal(txtQty.Text));
                                    _isInsuFound = true;
                                    goto L55;
                                }

                                //check channel
                                _vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", HSSelectedtItem, _HpTerm, cmbBook.Text, cmbLevel.Text, _invDt, _itmVal - 10, _itmVal + 10, null, null);
                                //_vehIns = CHNLSVC.Sales.GetVehInsAmtNewMethod(BaseCls.GlbUserComCode, _typeMainChanl, _Mainchannel, txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), "HS", TxtAdvItem.Text, _HpTerm, cmbBook.Text, cmbLevel.Text, _invDt, _itmVal - 10, _itmVal + 10, null, null);

                                if (_vehIns.Svid_itm != null)
                                {
                                    _insAmt = _insAmt + (_vehIns.Svid_val * Convert.ToDecimal(txtQty.Text));
                                    _isInsuFound = true;
                                    goto L55;
                                }
                            }
                        }

                    L55: int I = 0;

                        if (_isInsuFound == false)
                        {
                            MessageBox.Show("Insuarance definition not found for term" + _HpTerm, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            _insAmt = 0;
                        }
                        // _vehIns = CHNLSVC.Sales.GetVehInsAmtDirect(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "HS", txtInsuCom.Text.Trim(), txtInsuPol.Text.Trim(), _tempInv.Sad_itm_cd, Convert.ToDateTime(lblCreateDate.Text).Date, _HpTerm);
                        //  _insAmt = _insAmt + (_vehIns.Value * _tempInv.Sad_qty);
                    }

                    if (_itemList.Mi_need_reg == true)
                    {
                        //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirect(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "HS", _tempInv.Sad_itm_cd, Convert.ToDateTime(lblCreateDate.Text).Date);
                        List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                        if (_Saleshir.Count > 0)
                        {
                            foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                            {
                                //_regFound = false;
                                _type = _one.Mpi_cd;
                                _value = _one.Mpi_val;

                                _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, "HS", HSSelectedtItem, Convert.ToDateTime(dtpRecDate.Text).Date, cmbSch.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtLineTotAmt.Text), cmbBook.Text, cmbLevel.Text, "N/A");
                                //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, "HS", TxtAdvItem.Text, Convert.ToDateTime(lblCreateDate.Text).Date, cmbSch.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtLineTotAmt.Text), cmbBook.Text, cmbLevel.Text);

                                if (_vehDef.Svrd_itm != null)
                                {
                                    //txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                                    //txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                                    //_regAmt = _vehDef.Svrd_claim_val;
                                    //_regFound = true;
                                    _regAmt = _regAmt + (_vehDef.Svrd_val * Convert.ToDecimal(txtQty.Text));
                                    _vehRegTimes = _vehDef.SVRD_NO_OF_TIMES;
                                    _vehRegUsedTimes = _vehDef.SVRD_NO_OF_USED;
                                    _SVRD_SEQ = _vehDef.Svrd_seq;
                                    goto L1;
                                }
                                else
                                {
                                    _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, "HS", HSSelectedtItem, Convert.ToDateTime(dtpRecDate.Text).Date, null, Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtLineTotAmt.Text), cmbBook.Text, cmbLevel.Text, "N/A");
                                    //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, "HS", TxtAdvItem.Text, Convert.ToDateTime(lblCreateDate.Text).Date, null, Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtLineTotAmt.Text), cmbBook.Text, cmbLevel.Text);

                                    if (_vehDef.Svrd_itm != null)
                                    {
                                        // txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                                        // txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                                        // _regAmt = _vehDef.Svrd_claim_val;
                                        // _regFound = true;
                                        _regAmt = _regAmt + (_vehDef.Svrd_val * Convert.ToDecimal(txtQty.Text));
                                        _vehRegTimes = _vehDef.SVRD_NO_OF_TIMES;
                                        _vehRegUsedTimes = _vehDef.SVRD_NO_OF_USED;
                                        _SVRD_SEQ = _vehDef.Svrd_seq;
                                        goto L1;
                                    }

                                }
                            }
                        }

                    L1: Int32 i = 1;
                        // _regAmt = _regAmt + (_vehDef.Svrd_val * _tempInv.Sad_qty);
                    }
                }
                lblInsuFee.Text = _insAmt.ToString("n");
                lblRegFee.Text = _regAmt.ToString("n");
                lblTotPayAmount.Text = (Convert.ToDecimal(lblHPInitPay.Text) + Convert.ToDecimal(lblInsuFee.Text) + Convert.ToDecimal(lblRegFee.Text)).ToString("n");
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }
        private void CalInstallmentBaseAmt()
        {
            try
            {
                //Calculate amount base to installment
                //vTotalInsValue = Format(varAmountFinance + varInterest + ((varServiceCharges + varServiceChargesAdd - varInitServiceCharges) + (vInsAmt - vFInsAmt)), "0.00")
                _varRental = 0;
                //_varTotalInstallmentAmt = Math.Round(_varAmountFinance + _varInterestAmt + (_varServiceCharge + _varServiceChargesAdd - _varInitServiceCharge) + (_varInsAmount - _varFInsAmount), 0);
                _varTotalInstallmentAmt = Math.Round(_varAmountFinance + _varInterestAmt + (_varServiceCharge + _varServiceChargesAdd - _varInitServiceCharge), 0);

                HpSchemeSheduleDefinition _SchemeSheduleDef = new HpSchemeSheduleDefinition();
                _SchemeSheduleDef = CHNLSVC.Sales.GetSchemeSheduleDef(cmbSch.Text, 1);

                if (_SchemeSheduleDef.Hss_sch_cd != null)
                {
                    if (_SchemeSheduleDef.Hss_is_rt == true)
                    {
                        _varRental = Math.Round(_varTotalInstallmentAmt * _SchemeSheduleDef.Hss_rnt / 100, 0);
                    }
                    else
                    {
                        _varRental = _SchemeSheduleDef.Hss_rnt;
                    }
                }
                else
                {
                    _varRental = Math.Round(_varTotalInstallmentAmt / Convert.ToInt16(lblTerm.Text), 0);
                }

                CalculateAdditionalRental(_varRental);
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }
        protected void CalculateAdditionalRental(decimal _vRental)
        {
            try
            {
                decimal _tempVarRental = 0;

                _tempVarRental = _vRental * _SchemeDetails.Hsd_noof_addrnt;

                //additional rental calculation
                if (_SchemeDetails.Hsd_add_calwithvat == true)
                {
                    if (_SchemeDetails.Hsd_add_is_rt == true)
                    {
                        _varAddRental = Math.Round(_DisCashPrice * _SchemeDetails.Hsd_add_rnt / 100, 0);
                    }
                    else
                    {
                        _varAddRental = _SchemeDetails.Hsd_add_rnt;
                    }
                }
                else
                {
                    if (_SchemeDetails.Hsd_add_is_rt == true)
                    {
                        _varAddRental = Math.Round((_DisCashPrice - _UVAT) * _SchemeDetails.Hsd_add_rnt / 100, 0);
                    }
                    else
                    {
                        _varAddRental = _SchemeDetails.Hsd_add_rnt;
                    }
                }
                _varAddRental = _varAddRental + _tempVarRental;
                txtAddRental.Text = _varAddRental.ToString("n");
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }
        private void CalTotalCash()
        {
            //Calculate total cash amount
            //varTotalCash = Format(Val(Format(vDPay, "#####0.00")) + varInitServiceCharges + varInitialVAT, "#,###,##0.00")
            _varTotCash = Math.Round(_vDPay + _varInitServiceCharge + _varInitialVAT, 0);
            lblTotCash.Text = _varTotCash.ToString("n");
        }
        private void GetInsuarance()
        {
            try
            {
                Boolean tempIns = false;
                string _type = "";
                string _value = "";
                decimal _vVal = 0;
                int I = 0;
                _varFInsAmount = 0;
                _varInsAmount = 0;
                _varInsCommRate = 0;
                _varInsVATRate = 0;
                lblDiriyaAmt.Text = "0.00";
                Boolean _getIns = false;
                _insuAllow = false;

                if (_SchemeDetails.Hsd_has_insu == true)
                {
                    //  foreach (DataGridViewRow row in dgHpItems.Rows)
                    {
                        MasterItem _masterItemDetails = new MasterItem();
                        _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, HSSelectedtItem, 1);
                        //_masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, TxtAdvItem.Text, 1);

                        if (_masterItemDetails.Mi_insu_allow == true)
                        {
                            tempIns = true;
                        }
                    }

                    if (tempIns == true)
                    {
                        List<MasterSalesPriorityHierarchy> _hir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                        if (_hir.Count > 0)
                        {
                            foreach (MasterSalesPriorityHierarchy _one in _hir)
                            {
                                _type = _one.Mpi_cd;
                                _value = _one.Mpi_val;

                                List<HpInsuranceDefinition> _ser = CHNLSVC.Sales.GetInsuDefinition(cmbSch.Text, _type, _value, Convert.ToDateTime(dtpRecDate.Text).Date);
                                if (_ser != null)
                                {
                                    foreach (HpInsuranceDefinition _ser1 in _ser)
                                    {
                                        _getIns = false;
                                        if (_ser1.Hpi_chk_on == "UP")
                                        {
                                            if (_ser1.Hpi_from_val <= _DisCashPrice && _ser1.Hpi_to_val >= _DisCashPrice)
                                            {
                                                if (_ser1.Hpi_cal_on == "UP")
                                                {
                                                    _vVal = _DisCashPrice;
                                                }
                                                else if (_ser1.Hpi_cal_on == "AF")
                                                {
                                                    _vVal = _varAmountFinance;
                                                }
                                                else if (_ser1.Hpi_cal_on == "HP")
                                                {
                                                    _vVal = _varHireValue;
                                                }
                                                _getIns = true;
                                                goto L7;
                                            }
                                        }
                                        else if (_ser1.Hpi_chk_on == "AF")
                                        {
                                            if (_ser1.Hpi_from_val <= _varAmountFinance && _ser1.Hpi_to_val >= _varAmountFinance)
                                            {
                                                if (_ser1.Hpi_cal_on == "UP")
                                                {
                                                    _vVal = _DisCashPrice;
                                                }
                                                else if (_ser1.Hpi_cal_on == "AF")
                                                {
                                                    _vVal = _varAmountFinance;
                                                }
                                                else if (_ser1.Hpi_cal_on == "HP")
                                                {
                                                    _vVal = _varHireValue;
                                                }
                                                _getIns = true;
                                                goto L7;
                                            }
                                        }
                                        else if (_ser1.Hpi_chk_on == "HP")
                                        {
                                            if (_ser1.Hpi_from_val <= _varHireValue && _ser1.Hpi_to_val >= _varHireValue)
                                            {
                                                if (_ser1.Hpi_cal_on == "UP")
                                                {
                                                    _vVal = _DisCashPrice;
                                                }
                                                else if (_ser1.Hpi_cal_on == "AF")
                                                {
                                                    _vVal = _varAmountFinance;
                                                }
                                                else if (_ser1.Hpi_cal_on == "HP")
                                                {
                                                    _vVal = _varHireValue;
                                                }
                                                _getIns = true;
                                                goto L7;

                                            }
                                        }

                                    L7: I = 1;
                                        if (_getIns == true)
                                        {
                                            if (_ser1.Hpi_is_comp == true)
                                            {
                                                if (_SchemeDetails.Hsd_init_insu == true)
                                                {
                                                    //vFInsAmt = Format(Round(rsIns!isu_Amount + (Val(vVal) / 100 * rsIns!isu_Rate)), "0.00")
                                                    if (_ser1.Hpi_ins_isrt == true)
                                                    {
                                                        _varFInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                                        _varInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                                    }
                                                    else
                                                    {
                                                        _varFInsAmount = _ser1.Hpi_ins_val;
                                                        _varInsAmount = _ser1.Hpi_ins_val;
                                                    }

                                                }
                                                else
                                                {
                                                    if (_ser1.Hpi_ins_isrt == true)
                                                    {
                                                        _varFInsAmount = 0;
                                                        _varInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                                    }
                                                    else
                                                    {
                                                        _varFInsAmount = 0;
                                                        _varInsAmount = _ser1.Hpi_ins_val;
                                                    }
                                                }

                                                _varInsVATRate = _ser1.Hpi_vat_rt;
                                                if (_ser1.Hpi_comm_isrt == true)
                                                {
                                                    _varInsCommRate = _ser1.Hpi_comm;
                                                }
                                                lblDiriyaAmt.Text = _varFInsAmount.ToString("n");
                                                _insuAllow = true;
                                                goto L8;
                                            }
                                            else
                                            {
                                                DataTable COM_det = CHNLSVC.General.GetCompanyByCode(BaseCls.GlbUserComCode);
                                                string _insName = "";
                                                foreach (DataRow r in COM_det.Rows)
                                                {
                                                    _insName = (string)r["mc_anal3"];

                                                }



                                                if (MessageBox.Show(_insName + " is not mandatory. Do you want to collect from customer ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.Yes)
                                                {
                                                    if (_SchemeDetails.Hsd_init_insu == true)
                                                    {
                                                        //vFInsAmt = Format(Round(rsIns!isu_Amount + (Val(vVal) / 100 * rsIns!isu_Rate)), "0.00")
                                                        if (_ser1.Hpi_ins_isrt == true)
                                                        {
                                                            _varFInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                                            _varInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                                        }
                                                        else
                                                        {
                                                            _varFInsAmount = _ser1.Hpi_ins_val;
                                                            _varInsAmount = _ser1.Hpi_ins_val;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        if (_ser1.Hpi_ins_isrt == true)
                                                        {
                                                            _varFInsAmount = 0;
                                                            _varInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                                        }
                                                        else
                                                        {
                                                            _varFInsAmount = 0;
                                                            _varInsAmount = _ser1.Hpi_ins_val;
                                                        }
                                                    }

                                                    _varInsVATRate = _ser1.Hpi_vat_rt;
                                                    if (_ser1.Hpi_comm_isrt == true)
                                                    {
                                                        _varInsCommRate = _ser1.Hpi_comm;
                                                    }
                                                    lblDiriyaAmt.Text = _varFInsAmount.ToString("n");
                                                    _insuAllow = true;
                                                    goto L8;
                                                }
                                                else
                                                {
                                                    _varInsVATRate = 0;
                                                    _varInsCommRate = 0;
                                                    _varFInsAmount = 0;
                                                    _varInsAmount = 0;
                                                    _insuAllow = false;
                                                    goto L8;
                                                }
                                            }
                                        }

                                    }

                                }
                            }
                        L8: I = 1;
                        }
                    }

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }
        private decimal _maxAllowQty = 0;
        //  private Boolean _isProcess = false;
        //  private string _selectPromoCode = "";
        //   private string _selectSerial = "";
        private decimal _NetAmt = 0;
        private decimal _TotVat = 0;
        //  private Int32 WarrantyPeriod = 0;
        //   private string WarrantyRemarks = "";
        private decimal _DisCashPrice = 0;
        private decimal _varInstallComRate = 0;
        private string _SchTP = "";
        private decimal _commission = 0;
        private decimal _discount = 0;
        private decimal _UVAT = 0;
        private decimal _varVATAmt = 0;
        private decimal _IVAT = 0;
        private decimal _varCashPrice = 0;
        private decimal _varInitialVAT = 0;
        private decimal _vDPay = 0;
        private decimal _varInsVAT = 0;
        private decimal _MinDPay = 0;
        private decimal _varAmountFinance = 0;
        private decimal _varIntRate = 0;
        private decimal _varInterestAmt = 0;
        private decimal _varServiceCharge = 0;
        private decimal _varInitServiceCharge = 0;
        private decimal _varServiceChargesAdd = 0;
        private decimal _varHireValue = 0;
        private decimal _varCommAmt = 0;
        private decimal _varStampduty = 0;
        private decimal _varInitialStampduty = 0;
        private decimal _varOtherCharges = 0;
        private decimal _varFInsAmount = 0;
        private decimal _varInsAmount = 0;
        private decimal _varInsCommRate = 0;
        private decimal _varInsVATRate = 0;
        private decimal _varTotCash = 0;
        private decimal _varTotalInstallmentAmt = 0;
        private decimal _varRental = 0;
        private decimal _varAddRental = 0;
        private decimal _ExTotAmt = 0;
        private decimal BalanceAmount = 0;
        private decimal PaidAmount = 0;
        private decimal BankOrOther_Charges = 0;
        private decimal AmtToPayForFinishPayment = 0;
        private Boolean _isBlack = false;
        private Boolean _insuAllow = false;
        private Int16 _priceType = 0;
        private string _invoicePrefix = "";
        private decimal _varMgrComm = 0;
        private Boolean _isCalProcess = false;
        private Boolean _isSysReceipt = false;
        private Boolean _isGV = false;
        private string _manCd = "";
        // private bool IsFwdSaleCancelAllowUser = false;
        // private bool IsDlvSaleCancelAllowUser = false;
        //  private bool _isBackDate = false;
        private Boolean _isFoundTaxDef = false;
        //  private decimal _vouDisvals = 0;
        // private decimal _vouDisrates = 0;
        // private string _vouNo = "";
        //  private DateTime _serverDt = DateTime.Now.Date;
        private Int32 _calMethod = 0;
        private void GetDiscountAndCommission()
        {
            try
            {
                string _item = "";
                string _brand = "";
                string _mainCat = "";
                string _subCat = "";
                string _pb = "";
                string _lvl = "";
                int i = 0;
                string _type = "";
                string _value = "";
                decimal _vdp = 0;
                decimal _disAmt = 0;
                decimal _sch = 0;
                decimal _FP = 0;
                decimal _inte = 0;
                decimal _AF = 0;
                decimal _rnt = 0;
                decimal _tc = 0;
                decimal _tmpTotPay = 0;
                decimal _Bal = 0;
                _DisCashPrice = 0;
                _varInstallComRate = 0;
                _SchTP = "";
                List<HpSchemeDefinition> _SchemeDefinitionComm = new List<HpSchemeDefinition>();
                _SchemeDetails = new HpSchemeDetails();
                HpSchemeType _SchemeType = new HpSchemeType();
                List<HpServiceCharges> _ServiceCharges = new List<HpServiceCharges>();

                List<MasterSalesPriorityHierarchy> _hir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                if (_hir.Count > 0)
                {

                    //  foreach (DataGridViewRow row in dgHpItems.Rows)
                    //  {
                    //  if (Convert.ToDecimal(txtLineTotAmt.Text ) > 0)
                    {
                        MasterItem _masterItemDetails = new MasterItem();
                        _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, HSSelectedtItem, 1);
                        //_masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, TxtAdvItem.Text, 1);

                        _item = _masterItemDetails.Mi_cd;
                        _brand = _masterItemDetails.Mi_brand;
                        _mainCat = _masterItemDetails.Mi_cate_1;
                        _subCat = _masterItemDetails.Mi_cate_2;
                        _pb = cmbBook.Text;
                        _lvl = cmbLevel.Text;

                        foreach (MasterSalesPriorityHierarchy _one in _hir)
                        {
                            _type = _one.Mpi_cd;
                            _value = _one.Mpi_val;

                            if (!string.IsNullOrEmpty(_selectPromoCode))
                            {
                                //get details according to selected promotion code
                                List<HpSchemeDefinition> _def4 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(dtpRecDate.Text).Date, null, null, null, null, cmbSch.Text, _selectPromoCode);
                                if (_def4 != null)
                                {
                                    _SchemeDefinitionComm.AddRange(_def4);
                                    goto L1;
                                }
                            }
                            else if (!string.IsNullOrEmpty(_selectSerial))
                            {
                                //get details according to selected serial - serialized prices
                                List<HpSchemeDefinition> _ser1 = CHNLSVC.Sales.GetSerialSchemeNew(_type, _value, Convert.ToDateTime(dtpRecDate.Text).Date, _item, _selectSerial, cmbSch.Text);
                                if (_ser1 != null)
                                {
                                    _SchemeDefinitionComm.AddRange(_ser1);
                                    goto L1;
                                }
                            }
                            else
                            {
                                //get details from item
                                List<HpSchemeDefinition> _def = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(dtpRecDate.Text).Date, _item, null, null, null, cmbSch.Text, null);
                                if (_def != null)
                                {
                                    _SchemeDefinitionComm.AddRange(_def);
                                    goto L1;
                                }

                                //get details according to main category
                                List<HpSchemeDefinition> _def1 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(dtpRecDate.Text).Date, null, _brand, _mainCat, null, cmbSch.Text, null);
                                if (_def1 != null)
                                {
                                    _SchemeDefinitionComm.AddRange(_def1);
                                    goto L1;
                                }

                                //get details according to sub category
                                List<HpSchemeDefinition> _def2 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(dtpRecDate.Text).Date, null, _brand, null, _subCat, cmbSch.Text, null);
                                if (_def2 != null)
                                {
                                    _SchemeDefinitionComm.AddRange(_def2);
                                    goto L1;
                                }

                                //get details according to price book and level
                                List<HpSchemeDefinition> _def3 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(dtpRecDate.Text).Date, null, null, null, null, cmbSch.Text, null);
                                if (_def3 != null)
                                {
                                    _SchemeDefinitionComm.AddRange(_def3);
                                    goto L1;
                                }


                            }
                        }
                    L1: i = 1;
                    }
                    //  }

                    Int32 _maxSeq = 0;
                    if (_SchemeDefinitionComm != null && _SchemeDefinitionComm.Count > 0)
                    {
                        _maxSeq = (from _lst in _SchemeDefinitionComm
                                   select _lst.Hpc_seq).ToList().Max();
                    }
                    else
                    {
                        MessageBox.Show("Cannot find scheme parameters for main item.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    //(from _lst in _newList
                    // where _lst.Hpc_sch_cd == i.Hpc_sch_cd && i.Hpc_is_alw == true
                    // select _lst).ToList();

                    _commission = (from _lst in _SchemeDefinitionComm
                                   where _lst.Hpc_seq == _maxSeq
                                   select _lst.Hpc_dp_comm).ToList().Min();

                    _discount = (from _lst in _SchemeDefinitionComm
                                 where _lst.Hpc_seq == _maxSeq
                                 select _lst.Hpc_disc).ToList().Min();

                    _varInstallComRate = (from _lst in _SchemeDefinitionComm
                                          where _lst.Hpc_seq == _maxSeq
                                          select _lst.Hpc_inst_comm).ToList().Min();


                    lblCommRate.Text = _commission.ToString("n");
                    Boolean chkVou = false;
                    Int32 _isReveted = 0;
                    if (chkVou == true)
                    {
                        if (_vouDisrates > 0)
                        {
                            _discount = _vouDisrates;
                            lblDisRate.Text = _discount.ToString("n");
                            //lblCashPrice.Text = (Convert.ToDecimal(lblTot.Text) - (Convert.ToDecimal(lblTot.Text) * (_discount) / 100)).ToString("0.00");
                            _DisCashPrice = Math.Round(_NetAmt - (_NetAmt * _discount / 100), 0);
                            lblCashPrice.Text = _DisCashPrice.ToString("n");
                            _disAmt = Math.Round(Convert.ToDecimal(_NetAmt) * _discount / 100);
                            lblDisAmt.Text = _disAmt.ToString("n");
                        }
                        else
                        {
                            _discount = _vouDisvals / _NetAmt * 100;
                            lblDisRate.Text = _discount.ToString("n");
                            //lblCashPrice.Text = (Convert.ToDecimal(lblTot.Text) - (Convert.ToDecimal(lblTot.Text) * (_discount) / 100)).ToString("0.00");
                            _DisCashPrice = Math.Round(_NetAmt - (_NetAmt * _discount / 100), 0);
                            lblCashPrice.Text = _DisCashPrice.ToString("n");
                            _disAmt = Math.Round(Convert.ToDecimal(_NetAmt) * _discount / 100);
                            lblDisAmt.Text = _disAmt.ToString("n");
                        }
                    }
                    else
                    {

                        lblDisRate.Text = _discount.ToString("n");
                        //lblCashPrice.Text = (Convert.ToDecimal(lblTot.Text) - (Convert.ToDecimal(lblTot.Text) * (_discount) / 100)).ToString("0.00");
                        _DisCashPrice = Math.Round(_NetAmt - (_NetAmt * _discount / 100), 0);
                        lblCashPrice.Text = _DisCashPrice.ToString("n");
                        _disAmt = Math.Round(Convert.ToDecimal(_NetAmt) * _discount / 100);
                        lblDisAmt.Text = _disAmt.ToString("n");
                    }
                    List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                    if (_Saleshir.Count > 0)
                    {
                        foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                        {
                            _type = _one.Mpi_cd;
                            _value = _one.Mpi_val;

                            _SchemeDetails = CHNLSVC.Sales.getSchemeDetails(_type, _value, 1, cmbSch.Text);

                            if (_SchemeDetails.Hsd_cd != null)
                            {
                                if (_isReveted == 1 && Convert.ToInt32(lblTerm.Text) > 0)
                                {
                                    _SchemeDetails.Hsd_term = Convert.ToInt32(lblTerm.Text); // Nadeeka 13-05-2015
                                }
                                //get scheme type__________
                                _SchemeType = CHNLSVC.Sales.getSchemeType(_SchemeDetails.Hsd_sch_tp);
                                _SchTP = _SchemeDetails.Hsd_sch_tp;
                                if (_SchemeType.Hst_sch_cat == "S001" || _SchemeType.Hst_sch_cat == "S002")
                                {
                                    if (_SchemeDetails.Hsd_fpay_withvat == true)
                                    {
                                        _UVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
                                        _varVATAmt = Math.Round(_UVAT, 0);
                                        _IVAT = 0;
                                    }
                                    else
                                    {
                                        _UVAT = 0;
                                        _IVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
                                        _varVATAmt = Math.Round(_IVAT, 0);
                                    }

                                    _varCashPrice = Math.Round(_DisCashPrice - _varVATAmt, 0);
                                    lblVATAmt.Text = _UVAT.ToString("n");

                                    if (_SchemeDetails.Hsd_fpay_calwithvat == true)
                                    {
                                        if (_SchemeDetails.Hsd_is_rt == true)
                                        {
                                            _vdp = Math.Round(_DisCashPrice * (_SchemeDetails.Hsd_fpay) / 100, 0);
                                        }
                                        else
                                        {
                                            _vdp = Math.Round(_SchemeDetails.Hsd_fpay, 0);
                                        }
                                    }
                                    else
                                    {
                                        if (_SchemeDetails.Hsd_is_rt == true)
                                        {
                                            _vdp = Math.Round((_DisCashPrice - _UVAT) * (_SchemeDetails.Hsd_fpay / 100), 0);
                                        }
                                        else
                                        {
                                            _vdp = Math.Round(_SchemeDetails.Hsd_fpay);
                                        }
                                    }

                                    if (_SchemeDetails.Hsd_fpay_withvat == true)
                                    {
                                        _varInitialVAT = 0;
                                        _vDPay = Math.Round(_vdp - _UVAT, 0);
                                        _varInitialVAT = Math.Round(_UVAT, 0);
                                    }
                                    else
                                    {
                                        _varInitialVAT = 0;
                                        _varInsVAT = Math.Round(_IVAT, 0);
                                        _varInsVAT = Math.Round(_UVAT, 0);
                                        _vDPay = Math.Round(_vdp, 0);
                                    }
                                    if (Convert.ToDecimal(txtCusPay.Text) > 0)
                                    {
                                        //_vDPay = Convert.ToDecimal(txtCusPay.Text);
                                        _tmpTotPay = Convert.ToDecimal(lblHPInitPay.Text);
                                        _Bal = Convert.ToDecimal(txtCusPay.Text) - _tmpTotPay;
                                        _vDPay = Math.Round((Convert.ToDecimal(lblDownPay.Text) + _Bal), 0);
                                    }
                                    lblDownPay.Text = _vDPay.ToString("n");
                                    lblVATAmt.Text = _UVAT.ToString("n");
                                    _MinDPay = _vDPay;
                                    _varAmountFinance = Math.Round(_DisCashPrice - _vDPay - _varInitialVAT, 0);
                                    lblAmtFinance.Text = _varAmountFinance.ToString("n");
                                    _varIntRate = _SchemeDetails.Hsd_intr_rt;
                                    _varInterestAmt = Math.Round(_varAmountFinance * _varIntRate / 100, 0);
                                    lblIntAmount.Text = _varInterestAmt.ToString("n");

                                    // lblTerm.Text = _SchemeDetails.Hsd_term.ToString();

                                    if (_isReveted == 0) // Nadeeka 13-05-2015
                                    {
                                        lblTerm.Text = _SchemeDetails.Hsd_term.ToString();
                                    }

                                    if (_SchemeDetails.Hsd_alw_gs == true)
                                    {
                                        // chkGs.Checked = true;
                                    }
                                    else
                                    {
                                        //chkGs.Checked = false;
                                    }
                                    if (_SchemeDetails.Hsd_alw_cus == true)
                                    {
                                        //chkCusBase.Checked = true;
                                    }
                                    else
                                    {
                                        //  chkCusBase.Checked = false;
                                    }
                                    //if (_SchemeDetails.Hsd_alw_vou == true && _SchemeDetails.Hsd_vou_man == true)
                                    //{
                                    //    chkVou.Checked = true;
                                    //}
                                    //else
                                    //{
                                    //    chkVou.Checked = false;
                                    //}

                                    goto L2;
                                }
                                else if (_SchemeType.Hst_sch_cat == "S003" || _SchemeType.Hst_sch_cat == "S004")
                                {

                                    List<MasterSalesPriorityHierarchy> _Saleshir1 = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                                    if (_Saleshir.Count > 0)
                                    {
                                        foreach (MasterSalesPriorityHierarchy _one1 in _Saleshir)
                                        {
                                            _type = _one1.Mpi_cd;
                                            _value = _one1.Mpi_val;

                                            _ServiceCharges = CHNLSVC.Sales.getServiceChargesNew(_type, _value, cmbSch.Text, Convert.ToDateTime(dtpRecDate.Text).Date);

                                            if (_ServiceCharges != null)
                                            {
                                                foreach (HpServiceCharges _ser in _ServiceCharges)
                                                {
                                                    if (_ser.Hps_sch_cd != null)
                                                    {
                                                        // 1.
                                                        if (_SchemeType.Hst_sch_cat == "S004")
                                                        {
                                                            // 1.1 - Interest free/value/calculate on unit price
                                                            if (_ser.Hps_chk_on == false && _ser.Hps_chg > 0)
                                                            {
                                                                var _record = (from _lst in _ServiceCharges
                                                                               where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                               select _lst).ToList();

                                                                //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                                if (_record.Count > 0)
                                                                {
                                                                    foreach (HpServiceCharges _chr in _record)
                                                                    {
                                                                        _sch = Math.Round(_chr.Hps_chg, 0);
                                                                        _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    _sch = 0;
                                                                    _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
                                                                }
                                                                _inte = 0;
                                                            }
                                                            // 1.2 - Interest free/value/calculate on Amount Finance
                                                            else if (_ser.Hps_chk_on == true && _ser.Hps_chg > 0)
                                                            {
                                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                                   select _lst).ToList();
                                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {
                                                                            _sch = _chr.Hps_chg;
                                                                            _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);
                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }
                                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                                        }
                                                                    }
                                                                    _inte = 0;
                                                                }
                                                            }
                                                            // 1.3 - Interest free/Rate/check on Unit Price/calculate on Unit Price
                                                            else if (_ser.Hps_chk_on == false && _ser.Hps_rt > 0 && _ser.Hps_cal_on == false)
                                                            {
                                                                var _record = (from _lst in _ServiceCharges
                                                                               where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                               select _lst).ToList();

                                                                //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                                if (_record.Count > 0)
                                                                {
                                                                    foreach (HpServiceCharges _chr in _record)
                                                                    {
                                                                        _sch = Math.Round(_NetAmt * _chr.Hps_rt / 100, 0);
                                                                        _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    _sch = 0;
                                                                    _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
                                                                }
                                                            }

                                                            // 1.4 - Interest free/Rate/Check on Unit Price/calculate on Amount Finance
                                                            else if (_ser.Hps_chk_on == false && _ser.Hps_rt > 0 && _ser.Hps_cal_on == true)
                                                            {
                                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                                   select _lst).ToList();
                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {
                                                                            _sch = Math.Round(_chr.Hps_rt * _AF / 100, 0);
                                                                            _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);
                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }
                                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                                        }
                                                                    }
                                                                    _inte = 0;
                                                                }
                                                            }
                                                            //1.5 - Interest free/Rate/Check on Amount Finance/calculate on Unit Price
                                                            else if (_ser.Hps_rt > 0 && _ser.Hps_chk_on == true && _ser.Hps_cal_on == false)
                                                            {
                                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                                   select _lst).ToList();
                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {
                                                                            _sch = Math.Round(_chr.Hps_rt * _NetAmt / 100, 0);
                                                                            _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);

                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }

                                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                                        }
                                                                    }
                                                                    _inte = 0;
                                                                }
                                                            }
                                                            //1.6 - Interest free/Rate/Check on Amount Finance/calculate on Amount Finance
                                                            else if (_ser.Hps_rt > 0 && _ser.Hps_chk_on == true && _ser.Hps_cal_on == true)
                                                            {
                                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                                   select _lst).ToList();
                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {
                                                                            _sch = Math.Round((_chr.Hps_rt * _AF) / 100, 0);
                                                                            _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);

                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }
                                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                                        }
                                                                    }
                                                                    _inte = 0;
                                                                }
                                                            }
                                                            // 1.7 - Interest free/value/calculate on unit price
                                                            if (_ser.Hps_chk_on == false && _ser.Hps_rt == 0 && _ser.Hps_cal_on == false && _ser.Hps_chg == 0)
                                                            {
                                                                //var _record = (from _lst in _ServiceCharges
                                                                //               where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                //               select _lst).ToList();

                                                                //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                                //if (_record.Count > 0)
                                                                //{
                                                                //    foreach (HpServiceCharges _chr in _record)
                                                                //    {
                                                                //        _sch = Math.Round(_chr.Hps_chg, 0);
                                                                //        _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
                                                                //    }
                                                                //}
                                                                //else
                                                                //{
                                                                //    _sch = 0;
                                                                //    _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
                                                                //}
                                                                //_inte = 0;

                                                                var _record = (from _lst in _ServiceCharges
                                                                               where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                               select _lst).ToList();

                                                                //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                                if (_record.Count > 0)
                                                                {
                                                                    foreach (HpServiceCharges _chr in _record)
                                                                    {
                                                                        _sch = Math.Round(_NetAmt * _chr.Hps_rt / 100, 0);
                                                                        _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    _sch = 0;
                                                                    _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
                                                                }

                                                                if (_SchemeDetails.Hsd_fpay_withvat == true)
                                                                {
                                                                    _UVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
                                                                    _varVATAmt = Math.Round(_UVAT, 0);
                                                                    _IVAT = 0;
                                                                }
                                                                else
                                                                {
                                                                    _UVAT = 0;
                                                                    _IVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
                                                                    _varVATAmt = Math.Round(_IVAT, 0);
                                                                }
                                                            }
                                                        }
                                                        // 2
                                                        else if (_SchemeType.Hst_sch_cat == "S003")
                                                        {
                                                            //2.1 - Interest paid/value/calculate on unit price
                                                            if (_ser.Hps_chk_on == false && _ser.Hps_chg > 0)
                                                            {
                                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                                _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0); //rssr!scm_Int_Rate / 100
                                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    // if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                                   select _lst).ToList();

                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {
                                                                            _sch = Math.Round(_chr.Hps_chg, 0);
                                                                            _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);

                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }
                                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            // 2.2 - Interest paid/value/calculate on Amount Finance
                                                            else if (_ser.Hps_chk_on == true && _ser.Hps_chg > 0)
                                                            {
                                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                                _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                                   select _lst).ToList();
                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {
                                                                            _sch = Math.Round(_chr.Hps_chg, 0);
                                                                            _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);

                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }
                                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            // 2.3 - Interest paid/Rate/Check On Unit Price/calculate on unit price
                                                            else if (_ser.Hps_chk_on == false && _ser.Hps_rt > 0 && _ser.Hps_cal_on == false)
                                                            {
                                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                                _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                                   select _lst).ToList();
                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {
                                                                            _sch = Math.Round((_NetAmt * _chr.Hps_rt) / 100, 0);
                                                                            _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);

                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }
                                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            //2.4 - Interest paid/Rate/Check On Unit Price/calculate on Amount Finance
                                                            else if (_ser.Hps_chk_on == false && _ser.Hps_rt > 0 && _ser.Hps_cal_on == true)
                                                            {
                                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                                _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                                   select _lst).ToList();
                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {

                                                                            _sch = Math.Round((_AF * _chr.Hps_rt) / 100, 0);
                                                                            _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);
                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }
                                                                            _AF = _NetAmt - _FP;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            // 2.5 - Interest paid/Rate/Check On Amount Finance/calculate on unit price
                                                            else if (_ser.Hps_chk_on == true && _ser.Hps_rt > 0 && _ser.Hps_cal_on == false)
                                                            {
                                                                _FP = _NetAmt / _SchemeDetails.Hsd_term;
                                                                _AF = _NetAmt - _FP;
                                                                _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                                   select _lst).ToList();
                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {

                                                                            _sch = Math.Round((_NetAmt * _chr.Hps_rt) / 100, 0);
                                                                            _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);
                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }
                                                                            _AF = _NetAmt - _FP;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            //2.6 - Interest paid/Rate/Check On Amount Finance/calculate on Amount Finance
                                                            else if (_ser.Hps_chk_on == true && _ser.Hps_rt > 0 && _ser.Hps_cal_on == true)
                                                            {
                                                                _FP = _NetAmt / _SchemeDetails.Hsd_term;
                                                                _AF = _NetAmt - _FP;
                                                                _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                while (_tc != _rnt)
                                                                {
                                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                                    var _record = (from _lst in _ServiceCharges
                                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                                   select _lst).ToList();
                                                                    if (_record.Count > 0)
                                                                    {
                                                                        foreach (HpServiceCharges _chr in _record)
                                                                        {

                                                                            _sch = Math.Round((_AF * _chr.Hps_rt) / 100, 0);
                                                                            _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                                            _tc = Math.Round(_FP + _sch, 0);

                                                                            if ((_tc - _rnt) > 1)
                                                                            {
                                                                                _FP = _FP - 1;
                                                                            }
                                                                            else if ((_tc - _rnt) < -1)
                                                                            {
                                                                                _FP = _FP + 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                _tc = _rnt;
                                                                            }
                                                                            _AF = _NetAmt - _FP;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        _vDPay = _FP;

                                                        if (Convert.ToDecimal(txtCusPay.Text) > 0)
                                                        {
                                                            //_vDPay = Convert.ToDecimal(txtCusPay.Text);
                                                            _tmpTotPay = Convert.ToDecimal(lblHPInitPay.Text);
                                                            _Bal = Convert.ToDecimal(txtCusPay.Text) - _tmpTotPay;
                                                            _vDPay = (Convert.ToDecimal(lblDownPay.Text) + _Bal);
                                                        }

                                                        if (_vDPay < 0)
                                                        {
                                                            MessageBox.Show("Down payment calculate as minus.Reset as Zero", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                            //this.Cursor = Cursors.Default;
                                                            //return;
                                                            _vDPay = 0;
                                                        }

                                                        lblDownPay.Text = _vDPay.ToString("n");
                                                        lblVATAmt.Text = _UVAT.ToString("n");
                                                        _MinDPay = _vDPay;
                                                        _varAmountFinance = Math.Round(_DisCashPrice - _vDPay - _varInitialVAT, 0);
                                                        lblAmtFinance.Text = _varAmountFinance.ToString("n");
                                                        _varIntRate = _SchemeDetails.Hsd_intr_rt;
                                                        _varInterestAmt = Math.Round(_varAmountFinance * _varIntRate / 100, 0);
                                                        lblIntAmount.Text = _varInterestAmt.ToString("n");
                                                        lblTerm.Text = _SchemeDetails.Hsd_term.ToString();
                                                        if (_SchemeDetails.Hsd_alw_gs == true)
                                                        {
                                                            // chkGs.Checked = true;
                                                        }
                                                        else
                                                        {
                                                            // chkGs.Checked = false;
                                                        }

                                                        if (_SchemeDetails.Hsd_alw_cus == true)
                                                        {
                                                            // chkCusBase.Checked = true;
                                                        }
                                                        else
                                                        {
                                                            // chkCusBase.Checked = false;
                                                        }

                                                        //if (_SchemeDetails.Hsd_alw_vou == true && _SchemeDetails.Hsd_vou_man == true)
                                                        //{
                                                        //    chkVou.Checked = true;
                                                        //}
                                                        //else
                                                        //{
                                                        //    chkVou.Checked = false;
                                                        //}
                                                        goto L2;

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                    }
                L2: i = 1;

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }

        }

        private void GetServiceCharges()
        {
            try
            {
                string _type = "";
                string _value = "";
                _varMgrComm = 0;
                int I = 0;


                //get service chargers
                List<MasterSalesPriorityHierarchy> _hir2 = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                if (_hir2.Count > 0)
                {
                    foreach (MasterSalesPriorityHierarchy _two in _hir2)
                    {
                        _type = _two.Mpi_cd;
                        _value = _two.Mpi_val;

                        List<HpServiceCharges> _ser = CHNLSVC.Sales.getServiceChargesNew(_type, _value, cmbSch.Text, Convert.ToDateTime(dtpRecDate.Text).Date);

                        if (_ser != null)
                        {
                            foreach (HpServiceCharges _ser1 in _ser)
                            {
                                if (_ser1.Hps_chk_on == true)
                                {
                                    //If Val(rsTemp!sch_Value_From) <= Val(txt_AmtFinance.Text) And Val(rsTemp!sch_Value_To) >= Val(txt_AmtFinance.Text) Then
                                    if (_ser1.Hps_from_val <= _varAmountFinance && _ser1.Hps_to_val >= _varAmountFinance)
                                    {
                                        if (_ser1.Hps_cal_on == true)
                                        {
                                            //varServiceCharges = Format((txt_AmtFinance.Text * (rsTemp!sch_Rate) / 100) + (rsTemp!sch_Amount), "0.00")
                                            _varServiceCharge = Math.Round(((_varAmountFinance * _ser1.Hps_rt / 100) + _ser1.Hps_chg), 0);
                                            _varMgrComm = Math.Round(((_varServiceCharge * _ser1.Hps_mgr_comm_rt / 100) + _ser1.Hps_mgr_comm_amt), 0);
                                            goto L3;
                                        }
                                        else
                                        {
                                            //varServiceCharges = Format((DisCashPrice * (rsTemp!sch_Rate) / 100) + (rsTemp!sch_Amount), "0.00")
                                            _varServiceCharge = Math.Round(((_DisCashPrice * _ser1.Hps_rt / 100) + _ser1.Hps_chg), 0);
                                            _varMgrComm = Math.Round(((_varServiceCharge * _ser1.Hps_mgr_comm_rt / 100) + _ser1.Hps_mgr_comm_amt), 0);
                                            goto L3;
                                        }
                                    }
                                }
                                else
                                {
                                    if (_ser1.Hps_from_val <= _DisCashPrice && _ser1.Hps_to_val >= _DisCashPrice)
                                    {
                                        if (_ser1.Hps_cal_on == true)
                                        {
                                            _varServiceCharge = Math.Round(((_varAmountFinance * _ser1.Hps_rt / 100) + _ser1.Hps_chg), 0);
                                            _varMgrComm = Math.Round(((_varServiceCharge * _ser1.Hps_mgr_comm_rt / 100) + _ser1.Hps_mgr_comm_amt), 0);
                                            goto L3;
                                        }
                                        else
                                        {
                                            _varServiceCharge = Math.Round(((_DisCashPrice * _ser1.Hps_rt / 100) + _ser1.Hps_chg), 0);
                                            _varMgrComm = Math.Round(((_varServiceCharge * _ser1.Hps_mgr_comm_rt / 100) + _ser1.Hps_mgr_comm_amt), 0);
                                            goto L3;
                                        }
                                    }
                                }

                            }
                        }
                    }
                L3: I = 1;
                    GetAdditionalServiceCharges();
                    InitServiceCharge();
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        protected void InitServiceCharge()
        {
            if (_SchemeDetails.Hsd_init_serchg == true)
            {
                _varInitServiceCharge = _varServiceCharge;
                _varInitServiceCharge = _varInitServiceCharge + _varServiceChargesAdd;
            }
            else
            {
                _varInitServiceCharge = 0;
            }
            lblServiceCha.Text = _varInitServiceCharge.ToString("n");
        }


        protected void GetAdditionalServiceCharges()
        {
            try
            {
                string _type = "";
                string _value = "";
                int x = 0;

                List<HpAdditionalServiceCharges> _AdditionalServiceCharges = new List<HpAdditionalServiceCharges>();
                List<MasterSalesPriorityHierarchy> _hir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                if (_hir.Count > 0)
                {
                    foreach (MasterSalesPriorityHierarchy _one in _hir)
                    {
                        _type = _one.Mpi_cd;
                        _value = _one.Mpi_val;

                        List<HpAdditionalServiceCharges> _ser = CHNLSVC.Sales.getAddServiceCharges(cmbSch.Text, _type, _value, Convert.ToDateTime(lblCreateDate.Text).Date);

                        if (_ser != null)
                        {
                            foreach (HpAdditionalServiceCharges _ser1 in _ser)
                            {
                                if (_ser1.Has_chk_on == true)
                                {
                                    if (_ser1.Has_from_val <= _varAmountFinance && _ser1.Has_to_val >= _varAmountFinance)
                                    {
                                        if (_ser1.Has_cal_on == true)
                                        {
                                            _varServiceChargesAdd = Math.Round(((_varAmountFinance * _ser1.Has_rt / 100) + _ser1.Has_chg), 0);
                                            goto L6;
                                        }
                                        else
                                        {
                                            _varServiceChargesAdd = Math.Round(((_DisCashPrice * _ser1.Has_rt / 100) + _ser1.Has_chg), 0);
                                            goto L6;
                                        }
                                    }
                                }
                                else
                                {
                                    if (_ser1.Has_from_val <= _DisCashPrice && _ser1.Has_to_val >= _DisCashPrice)
                                    {
                                        if (_ser1.Has_cal_on == true)
                                        {
                                            _varServiceChargesAdd = Math.Round(((_varAmountFinance * _ser1.Has_rt / 100) + _ser1.Has_chg), 0);
                                            goto L6;
                                        }
                                        else
                                        {
                                            _varServiceChargesAdd = Math.Round(((_DisCashPrice * _ser1.Has_rt / 100) + _ser1.Has_chg), 0);
                                            goto L6;
                                        }
                                    }
                                }
                            }
                        }
                    }
                L6: x = 1;

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }


        //private void GetDiscountAndCommission()
        //{
        //    try
        //    {
        //        string _item = "";
        //        string _brand = "";
        //        string _mainCat = "";
        //        string _subCat = "";
        //        string _pb = "";
        //        string _lvl = "";
        //        int i = 0;
        //        string _type = "";
        //        string _value = "";
        //        decimal _vdp = 0;
        //        decimal _disAmt = 0;
        //        decimal _sch = 0;
        //        decimal _FP = 0;
        //        decimal _inte = 0;
        //        decimal _AF = 0;
        //        decimal _rnt = 0;
        //        decimal _tc = 0;
        //        decimal _tmpTotPay = 0;
        //        decimal _Bal = 0;
        //        _DisCashPrice = 0;
        //        _varInstallComRate = 0;
        //        _SchTP = "";
        //        List<HpSchemeDefinition> _SchemeDefinitionComm = new List<HpSchemeDefinition>();
        //        _SchemeDetails = new HpSchemeDetails();
        //        HpSchemeType _SchemeType = new HpSchemeType();
        //        List<HpServiceCharges> _ServiceCharges = new List<HpServiceCharges>();

        //        List<MasterSalesPriorityHierarchy> _hir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

        //        if (_hir.Count > 0)
        //        {

        //            foreach (DataGridViewRow row in dgHpItems.Rows)
        //            {
        //                if (Convert.ToDecimal(row.Cells["col_HTotal"].Value) > 0)
        //                {
        //                    MasterItem _masterItemDetails = new MasterItem();
        //                    _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, row.Cells["col_Hitem"].Value.ToString(), 1);

        //                    _item = _masterItemDetails.Mi_cd;
        //                    _brand = _masterItemDetails.Mi_brand;
        //                    _mainCat = _masterItemDetails.Mi_cate_1;
        //                    _subCat = _masterItemDetails.Mi_cate_2;
        //                    _pb = row.Cells["col_Hpb"].Value.ToString();
        //                    _lvl = row.Cells["col_Hlvl"].Value.ToString();

        //                    foreach (MasterSalesPriorityHierarchy _one in _hir)
        //                    {
        //                        _type = _one.Mpi_cd;
        //                        _value = _one.Mpi_val;

        //                        if (!string.IsNullOrEmpty(_selectPromoCode))
        //                        {
        //                            //get details according to selected promotion code
        //                            List<HpSchemeDefinition> _def4 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, null, null, null, cmbSch.Text, _selectPromoCode);
        //                            if (_def4 != null)
        //                            {
        //                                _SchemeDefinitionComm.AddRange(_def4);
        //                                goto L1;
        //                            }
        //                        }
        //                        else if (!string.IsNullOrEmpty(_selectSerial))
        //                        {
        //                            //get details according to selected serial - serialized prices
        //                            List<HpSchemeDefinition> _ser1 = CHNLSVC.Sales.GetSerialSchemeNew(_type, _value, Convert.ToDateTime(lblCreateDate.Text).Date, _item, _selectSerial, cmbSch.Text);
        //                            if (_ser1 != null)
        //                            {
        //                                _SchemeDefinitionComm.AddRange(_ser1);
        //                                goto L1;
        //                            }
        //                        }
        //                        else
        //                        {
        //                            //get details from item
        //                            List<HpSchemeDefinition> _def = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, _item, null, null, null, cmbSch.Text, null);
        //                            if (_def != null)
        //                            {
        //                                _SchemeDefinitionComm.AddRange(_def);
        //                                goto L1;
        //                            }

        //                            //get details according to main category
        //                            List<HpSchemeDefinition> _def1 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, _brand, _mainCat, null, cmbSch.Text, null);
        //                            if (_def1 != null)
        //                            {
        //                                _SchemeDefinitionComm.AddRange(_def1);
        //                                goto L1;
        //                            }

        //                            //get details according to sub category
        //                            List<HpSchemeDefinition> _def2 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, _brand, null, _subCat, cmbSch.Text, null);
        //                            if (_def2 != null)
        //                            {
        //                                _SchemeDefinitionComm.AddRange(_def2);
        //                                goto L1;
        //                            }

        //                            //get details according to price book and level
        //                            List<HpSchemeDefinition> _def3 = CHNLSVC.Sales.GetAllSchemeNew(_type, _value, _pb, _lvl, Convert.ToDateTime(lblCreateDate.Text).Date, null, null, null, null, cmbSch.Text, null);
        //                            if (_def3 != null)
        //                            {
        //                                _SchemeDefinitionComm.AddRange(_def3);
        //                                goto L1;
        //                            }


        //                        }
        //                    }
        //                L1: i = 1;
        //                }
        //            }

        //            Int32 _maxSeq = 0;
        //            if (_SchemeDefinitionComm != null && _SchemeDefinitionComm.Count > 0)
        //            {
        //                _maxSeq = (from _lst in _SchemeDefinitionComm
        //                           select _lst.Hpc_seq).ToList().Max();
        //            }
        //            else
        //            {
        //                MessageBox.Show("Cannot find scheme parameters for main item.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //                return;
        //            }
        //            //(from _lst in _newList
        //            // where _lst.Hpc_sch_cd == i.Hpc_sch_cd && i.Hpc_is_alw == true
        //            // select _lst).ToList();

        //            _commission = (from _lst in _SchemeDefinitionComm
        //                           where _lst.Hpc_seq == _maxSeq
        //                           select _lst.Hpc_dp_comm).ToList().Min();

        //            _discount = (from _lst in _SchemeDefinitionComm
        //                         where _lst.Hpc_seq == _maxSeq
        //                         select _lst.Hpc_disc).ToList().Min();

        //            _varInstallComRate = (from _lst in _SchemeDefinitionComm
        //                                  where _lst.Hpc_seq == _maxSeq
        //                                  select _lst.Hpc_inst_comm).ToList().Min();


        //            lblCommRate.Text = _commission.ToString("n");

        //            if (chkVou.Checked == true)
        //            {
        //                if (_vouDisrates > 0)
        //                {
        //                    _discount = _vouDisrates;
        //                    lblDisRate.Text = _discount.ToString("n");
        //                    //lblCashPrice.Text = (Convert.ToDecimal(lblTot.Text) - (Convert.ToDecimal(lblTot.Text) * (_discount) / 100)).ToString("0.00");
        //                    _DisCashPrice = Math.Round(_NetAmt - (_NetAmt * _discount / 100), 0);
        //                    lblCashPrice.Text = _DisCashPrice.ToString("n");
        //                    _disAmt = Math.Round(Convert.ToDecimal(_NetAmt) * _discount / 100);
        //                    lblDisAmt.Text = _disAmt.ToString("n");
        //                }
        //                else
        //                {
        //                    _discount = _vouDisvals / _NetAmt * 100;
        //                    lblDisRate.Text = _discount.ToString("n");
        //                    //lblCashPrice.Text = (Convert.ToDecimal(lblTot.Text) - (Convert.ToDecimal(lblTot.Text) * (_discount) / 100)).ToString("0.00");
        //                    _DisCashPrice = Math.Round(_NetAmt - (_NetAmt * _discount / 100), 0);
        //                    lblCashPrice.Text = _DisCashPrice.ToString("n");
        //                    _disAmt = Math.Round(Convert.ToDecimal(_NetAmt) * _discount / 100);
        //                    lblDisAmt.Text = _disAmt.ToString("n");
        //                }
        //            }
        //            else
        //            {

        //                lblDisRate.Text = _discount.ToString("n");
        //                //lblCashPrice.Text = (Convert.ToDecimal(lblTot.Text) - (Convert.ToDecimal(lblTot.Text) * (_discount) / 100)).ToString("0.00");
        //                _DisCashPrice = Math.Round(_NetAmt - (_NetAmt * _discount / 100), 0);
        //                lblCashPrice.Text = _DisCashPrice.ToString("n");
        //                _disAmt = Math.Round(Convert.ToDecimal(_NetAmt) * _discount / 100);
        //                lblDisAmt.Text = _disAmt.ToString("n");
        //            }
        //            List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

        //            if (_Saleshir.Count > 0)
        //            {
        //                foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
        //                {
        //                    _type = _one.Mpi_cd;
        //                    _value = _one.Mpi_val;

        //                    _SchemeDetails = CHNLSVC.Sales.getSchemeDetails(_type, _value, 1, cmbSch.Text);

        //                    if (_SchemeDetails.Hsd_cd != null)
        //                    {
        //                        if (_isReveted == 1 && Convert.ToInt32(lblTerm.Text) > 0)
        //                        {
        //                            _SchemeDetails.Hsd_term = Convert.ToInt32(lblTerm.Text); // Nadeeka 13-05-2015
        //                        }
        //                        //get scheme type__________
        //                        _SchemeType = CHNLSVC.Sales.getSchemeType(_SchemeDetails.Hsd_sch_tp);
        //                        _SchTP = _SchemeDetails.Hsd_sch_tp;
        //                        if (_SchemeType.Hst_sch_cat == "S001" || _SchemeType.Hst_sch_cat == "S002")
        //                        {
        //                            if (_SchemeDetails.Hsd_fpay_withvat == true)
        //                            {
        //                                _UVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
        //                                _varVATAmt = Math.Round(_UVAT, 0);
        //                                _IVAT = 0;
        //                            }
        //                            else
        //                            {
        //                                _UVAT = 0;
        //                                _IVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
        //                                _varVATAmt = Math.Round(_IVAT, 0);
        //                            }

        //                            _varCashPrice = Math.Round(_DisCashPrice - _varVATAmt, 0);
        //                            lblVATAmt.Text = _UVAT.ToString("n");

        //                            if (_SchemeDetails.Hsd_fpay_calwithvat == true)
        //                            {
        //                                if (_SchemeDetails.Hsd_is_rt == true)
        //                                {
        //                                    _vdp = Math.Round(_DisCashPrice * (_SchemeDetails.Hsd_fpay) / 100, 0);
        //                                }
        //                                else
        //                                {
        //                                    _vdp = Math.Round(_SchemeDetails.Hsd_fpay, 0);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                if (_SchemeDetails.Hsd_is_rt == true)
        //                                {
        //                                    _vdp = Math.Round((_DisCashPrice - _UVAT) * (_SchemeDetails.Hsd_fpay / 100), 0);
        //                                }
        //                                else
        //                                {
        //                                    _vdp = Math.Round(_SchemeDetails.Hsd_fpay);
        //                                }
        //                            }

        //                            if (_SchemeDetails.Hsd_fpay_withvat == true)
        //                            {
        //                                _varInitialVAT = 0;
        //                                _vDPay = Math.Round(_vdp - _UVAT, 0);
        //                                _varInitialVAT = Math.Round(_UVAT, 0);
        //                            }
        //                            else
        //                            {
        //                                _varInitialVAT = 0;
        //                                _varInsVAT = Math.Round(_IVAT, 0);
        //                                _varInsVAT = Math.Round(_UVAT, 0);
        //                                _vDPay = Math.Round(_vdp, 0);
        //                            }
        //                            if (Convert.ToDecimal(txtCusPay.Text) > 0)
        //                            {
        //                                //_vDPay = Convert.ToDecimal(txtCusPay.Text);
        //                                _tmpTotPay = Convert.ToDecimal(lblHPInitPay.Text);
        //                                _Bal = Convert.ToDecimal(txtCusPay.Text) - _tmpTotPay;
        //                                _vDPay = Math.Round((Convert.ToDecimal(lblDownPay.Text) + _Bal), 0);
        //                            }
        //                            lblDownPay.Text = _vDPay.ToString("n");
        //                            lblVATAmt.Text = _UVAT.ToString("n");
        //                            _MinDPay = _vDPay;
        //                            _varAmountFinance = Math.Round(_DisCashPrice - _vDPay - _varInitialVAT, 0);
        //                            lblAmtFinance.Text = _varAmountFinance.ToString("n");
        //                            _varIntRate = _SchemeDetails.Hsd_intr_rt;
        //                            _varInterestAmt = Math.Round(_varAmountFinance * _varIntRate / 100, 0);
        //                            lblIntAmount.Text = _varInterestAmt.ToString("n");

        //                            // lblTerm.Text = _SchemeDetails.Hsd_term.ToString();

        //                            if (_isReveted == 0) // Nadeeka 13-05-2015
        //                            {
        //                                lblTerm.Text = _SchemeDetails.Hsd_term.ToString();
        //                            }

        //                            if (_SchemeDetails.Hsd_alw_gs == true)
        //                            {
        //                                chkGs.Checked = true;
        //                            }
        //                            else
        //                            {
        //                                chkGs.Checked = false;
        //                            }
        //                            if (_SchemeDetails.Hsd_alw_cus == true)
        //                            {
        //                                chkCusBase.Checked = true;
        //                            }
        //                            else
        //                            {
        //                                chkCusBase.Checked = false;
        //                            }
        //                            //if (_SchemeDetails.Hsd_alw_vou == true && _SchemeDetails.Hsd_vou_man == true)
        //                            //{
        //                            //    chkVou.Checked = true;
        //                            //}
        //                            //else
        //                            //{
        //                            //    chkVou.Checked = false;
        //                            //}

        //                            goto L2;
        //                        }
        //                        else if (_SchemeType.Hst_sch_cat == "S003" || _SchemeType.Hst_sch_cat == "S004")
        //                        {

        //                            List<MasterSalesPriorityHierarchy> _Saleshir1 = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

        //                            if (_Saleshir.Count > 0)
        //                            {
        //                                foreach (MasterSalesPriorityHierarchy _one1 in _Saleshir)
        //                                {
        //                                    _type = _one1.Mpi_cd;
        //                                    _value = _one1.Mpi_val;

        //                                    _ServiceCharges = CHNLSVC.Sales.getServiceChargesNew(_type, _value, cmbSch.Text, Convert.ToDateTime(lblCreateDate.Text).Date);

        //                                    if (_ServiceCharges != null)
        //                                    {
        //                                        foreach (HpServiceCharges _ser in _ServiceCharges)
        //                                        {
        //                                            if (_ser.Hps_sch_cd != null)
        //                                            {
        //                                                // 1.
        //                                                if (_SchemeType.Hst_sch_cat == "S004")
        //                                                {
        //                                                    // 1.1 - Interest free/value/calculate on unit price
        //                                                    if (_ser.Hps_chk_on == false && _ser.Hps_chg > 0)
        //                                                    {
        //                                                        var _record = (from _lst in _ServiceCharges
        //                                                                       where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
        //                                                                       select _lst).ToList();

        //                                                        //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
        //                                                        if (_record.Count > 0)
        //                                                        {
        //                                                            foreach (HpServiceCharges _chr in _record)
        //                                                            {
        //                                                                _sch = Math.Round(_chr.Hps_chg, 0);
        //                                                                _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
        //                                                            }
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            _sch = 0;
        //                                                            _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
        //                                                        }
        //                                                        _inte = 0;
        //                                                    }
        //                                                    // 1.2 - Interest free/value/calculate on Amount Finance
        //                                                    else if (_ser.Hps_chk_on == true && _ser.Hps_chg > 0)
        //                                                    {
        //                                                        _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
        //                                                        _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                        _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
        //                                                                           select _lst).ToList();
        //                                                            //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {
        //                                                                    _sch = _chr.Hps_chg;
        //                                                                    _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);
        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }
        //                                                                    _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                                }
        //                                                            }
        //                                                            _inte = 0;
        //                                                        }
        //                                                    }
        //                                                    // 1.3 - Interest free/Rate/check on Unit Price/calculate on Unit Price
        //                                                    else if (_ser.Hps_chk_on == false && _ser.Hps_rt > 0 && _ser.Hps_cal_on == false)
        //                                                    {
        //                                                        var _record = (from _lst in _ServiceCharges
        //                                                                       where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
        //                                                                       select _lst).ToList();

        //                                                        //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
        //                                                        if (_record.Count > 0)
        //                                                        {
        //                                                            foreach (HpServiceCharges _chr in _record)
        //                                                            {
        //                                                                _sch = Math.Round(_NetAmt * _chr.Hps_rt / 100, 0);
        //                                                                _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
        //                                                            }
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            _sch = 0;
        //                                                            _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
        //                                                        }
        //                                                    }

        //                                                    // 1.4 - Interest free/Rate/Check on Unit Price/calculate on Amount Finance
        //                                                    else if (_ser.Hps_chk_on == false && _ser.Hps_rt > 0 && _ser.Hps_cal_on == true)
        //                                                    {
        //                                                        _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
        //                                                        _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                        _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
        //                                                                           select _lst).ToList();
        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {
        //                                                                    _sch = Math.Round(_chr.Hps_rt * _AF / 100, 0);
        //                                                                    _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);
        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }
        //                                                                    _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                                }
        //                                                            }
        //                                                            _inte = 0;
        //                                                        }
        //                                                    }
        //                                                    //1.5 - Interest free/Rate/Check on Amount Finance/calculate on Unit Price
        //                                                    else if (_ser.Hps_rt > 0 && _ser.Hps_chk_on == true && _ser.Hps_cal_on == false)
        //                                                    {
        //                                                        _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
        //                                                        _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                        _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
        //                                                                           select _lst).ToList();
        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {
        //                                                                    _sch = Math.Round(_chr.Hps_rt * _NetAmt / 100, 0);
        //                                                                    _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);

        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }

        //                                                                    _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                                }
        //                                                            }
        //                                                            _inte = 0;
        //                                                        }
        //                                                    }
        //                                                    //1.6 - Interest free/Rate/Check on Amount Finance/calculate on Amount Finance
        //                                                    else if (_ser.Hps_rt > 0 && _ser.Hps_chk_on == true && _ser.Hps_cal_on == true)
        //                                                    {
        //                                                        _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
        //                                                        _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                        _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
        //                                                                           select _lst).ToList();
        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {
        //                                                                    _sch = Math.Round((_chr.Hps_rt * _AF) / 100, 0);
        //                                                                    _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);

        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }
        //                                                                    _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                                }
        //                                                            }
        //                                                            _inte = 0;
        //                                                        }
        //                                                    }
        //                                                    // 1.7 - Interest free/value/calculate on unit price
        //                                                    if (_ser.Hps_chk_on == false && _ser.Hps_rt == 0 && _ser.Hps_cal_on == false && _ser.Hps_chg == 0)
        //                                                    {
        //                                                        //var _record = (from _lst in _ServiceCharges
        //                                                        //               where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
        //                                                        //               select _lst).ToList();

        //                                                        //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
        //                                                        //if (_record.Count > 0)
        //                                                        //{
        //                                                        //    foreach (HpServiceCharges _chr in _record)
        //                                                        //    {
        //                                                        //        _sch = Math.Round(_chr.Hps_chg, 0);
        //                                                        //        _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
        //                                                        //    }
        //                                                        //}
        //                                                        //else
        //                                                        //{
        //                                                        //    _sch = 0;
        //                                                        //    _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
        //                                                        //}
        //                                                        //_inte = 0;

        //                                                        var _record = (from _lst in _ServiceCharges
        //                                                                       where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
        //                                                                       select _lst).ToList();

        //                                                        //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
        //                                                        if (_record.Count > 0)
        //                                                        {
        //                                                            foreach (HpServiceCharges _chr in _record)
        //                                                            {
        //                                                                _sch = Math.Round(_NetAmt * _chr.Hps_rt / 100, 0);
        //                                                                _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
        //                                                            }
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            _sch = 0;
        //                                                            _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
        //                                                        }

        //                                                        if (_SchemeDetails.Hsd_fpay_withvat == true)
        //                                                        {
        //                                                            _UVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
        //                                                            _varVATAmt = Math.Round(_UVAT, 0);
        //                                                            _IVAT = 0;
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            _UVAT = 0;
        //                                                            _IVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
        //                                                            _varVATAmt = Math.Round(_IVAT, 0);
        //                                                        }
        //                                                    }
        //                                                }
        //                                                // 2
        //                                                else if (_SchemeType.Hst_sch_cat == "S003")
        //                                                {
        //                                                    //2.1 - Interest paid/value/calculate on unit price
        //                                                    if (_ser.Hps_chk_on == false && _ser.Hps_chg > 0)
        //                                                    {
        //                                                        _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
        //                                                        _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                        _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0); //rssr!scm_Int_Rate / 100
        //                                                        _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            // if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
        //                                                                           select _lst).ToList();

        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {
        //                                                                    _sch = Math.Round(_chr.Hps_chg, 0);
        //                                                                    _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
        //                                                                    _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);

        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }
        //                                                                    _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                    // 2.2 - Interest paid/value/calculate on Amount Finance
        //                                                    else if (_ser.Hps_chk_on == true && _ser.Hps_chg > 0)
        //                                                    {
        //                                                        _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
        //                                                        _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                        _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
        //                                                        _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
        //                                                                           select _lst).ToList();
        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {
        //                                                                    _sch = Math.Round(_chr.Hps_chg, 0);
        //                                                                    _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
        //                                                                    _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);

        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }
        //                                                                    _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                    // 2.3 - Interest paid/Rate/Check On Unit Price/calculate on unit price
        //                                                    else if (_ser.Hps_chk_on == false && _ser.Hps_rt > 0 && _ser.Hps_cal_on == false)
        //                                                    {
        //                                                        _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
        //                                                        _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                        _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
        //                                                        _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
        //                                                                           select _lst).ToList();
        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {
        //                                                                    _sch = Math.Round((_NetAmt * _chr.Hps_rt) / 100, 0);
        //                                                                    _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
        //                                                                    _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);

        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }
        //                                                                    _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                    //2.4 - Interest paid/Rate/Check On Unit Price/calculate on Amount Finance
        //                                                    else if (_ser.Hps_chk_on == false && _ser.Hps_rt > 0 && _ser.Hps_cal_on == true)
        //                                                    {
        //                                                        _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
        //                                                        _AF = Math.Round(_NetAmt - _FP, 0);
        //                                                        _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
        //                                                        _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
        //                                                                           select _lst).ToList();
        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {

        //                                                                    _sch = Math.Round((_AF * _chr.Hps_rt) / 100, 0);
        //                                                                    _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
        //                                                                    _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);
        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }
        //                                                                    _AF = _NetAmt - _FP;
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                    // 2.5 - Interest paid/Rate/Check On Amount Finance/calculate on unit price
        //                                                    else if (_ser.Hps_chk_on == true && _ser.Hps_rt > 0 && _ser.Hps_cal_on == false)
        //                                                    {
        //                                                        _FP = _NetAmt / _SchemeDetails.Hsd_term;
        //                                                        _AF = _NetAmt - _FP;
        //                                                        _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
        //                                                        _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
        //                                                                           select _lst).ToList();
        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {

        //                                                                    _sch = Math.Round((_NetAmt * _chr.Hps_rt) / 100, 0);
        //                                                                    _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
        //                                                                    _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);
        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }
        //                                                                    _AF = _NetAmt - _FP;
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                    //2.6 - Interest paid/Rate/Check On Amount Finance/calculate on Amount Finance
        //                                                    else if (_ser.Hps_chk_on == true && _ser.Hps_rt > 0 && _ser.Hps_cal_on == true)
        //                                                    {
        //                                                        _FP = _NetAmt / _SchemeDetails.Hsd_term;
        //                                                        _AF = _NetAmt - _FP;
        //                                                        _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
        //                                                        _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                        while (_tc != _rnt)
        //                                                        {
        //                                                            //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
        //                                                            var _record = (from _lst in _ServiceCharges
        //                                                                           where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
        //                                                                           select _lst).ToList();
        //                                                            if (_record.Count > 0)
        //                                                            {
        //                                                                foreach (HpServiceCharges _chr in _record)
        //                                                                {

        //                                                                    _sch = Math.Round((_AF * _chr.Hps_rt) / 100, 0);
        //                                                                    _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
        //                                                                    _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
        //                                                                    _tc = Math.Round(_FP + _sch, 0);

        //                                                                    if ((_tc - _rnt) > 1)
        //                                                                    {
        //                                                                        _FP = _FP - 1;
        //                                                                    }
        //                                                                    else if ((_tc - _rnt) < -1)
        //                                                                    {
        //                                                                        _FP = _FP + 1;
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        _tc = _rnt;
        //                                                                    }
        //                                                                    _AF = _NetAmt - _FP;
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                }

        //                                                _vDPay = _FP;

        //                                                if (Convert.ToDecimal(txtCusPay.Text) > 0)
        //                                                {
        //                                                    //_vDPay = Convert.ToDecimal(txtCusPay.Text);
        //                                                    _tmpTotPay = Convert.ToDecimal(lblHPInitPay.Text);
        //                                                    _Bal = Convert.ToDecimal(txtCusPay.Text) - _tmpTotPay;
        //                                                    _vDPay = (Convert.ToDecimal(lblDownPay.Text) + _Bal);
        //                                                }

        //                                                if (_vDPay < 0)
        //                                                {
        //                                                    MessageBox.Show("Down payment calculate as minus.Reset as Zero", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        //                                                    //this.Cursor = Cursors.Default;
        //                                                    //return;
        //                                                    _vDPay = 0;
        //                                                }

        //                                                lblDownPay.Text = _vDPay.ToString("n");
        //                                                lblVATAmt.Text = _UVAT.ToString("n");
        //                                                _MinDPay = _vDPay;
        //                                                _varAmountFinance = Math.Round(_DisCashPrice - _vDPay - _varInitialVAT, 0);
        //                                                lblAmtFinance.Text = _varAmountFinance.ToString("n");
        //                                                _varIntRate = _SchemeDetails.Hsd_intr_rt;
        //                                                _varInterestAmt = Math.Round(_varAmountFinance * _varIntRate / 100, 0);
        //                                                lblIntAmount.Text = _varInterestAmt.ToString("n");
        //                                                lblTerm.Text = _SchemeDetails.Hsd_term.ToString();
        //                                                if (_SchemeDetails.Hsd_alw_gs == true)
        //                                                {
        //                                                    chkGs.Checked = true;
        //                                                }
        //                                                else
        //                                                {
        //                                                    chkGs.Checked = false;
        //                                                }

        //                                                if (_SchemeDetails.Hsd_alw_cus == true)
        //                                                {
        //                                                    chkCusBase.Checked = true;
        //                                                }
        //                                                else
        //                                                {
        //                                                    chkCusBase.Checked = false;
        //                                                }

        //                                                //if (_SchemeDetails.Hsd_alw_vou == true && _SchemeDetails.Hsd_vou_man == true)
        //                                                //{
        //                                                //    chkVou.Checked = true;
        //                                                //}
        //                                                //else
        //                                                //{
        //                                                //    chkVou.Checked = false;
        //                                                //}
        //                                                goto L2;

        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }

        //            }
        //        L2: i = 1;

        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //        MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
        //    }
        //    finally
        //    {
        //        CHNLSVC.CloseAllChannels();
        //    }

        //}


        private void btnProcessRefresh_Click(object sender, EventArgs e)
        {
            try
            {

                //  _selectPromoCode = "";
                cmbSch.Enabled = true;
                _isCalProcess = false;
                //   LoadScheme();

            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void CalCommissionAmount()
        {
            //Commission Amount Calulation
            _varCommAmt = Math.Round(_vDPay * _commission / 100, 0);
            lblCommAmt.Text = _varCommAmt.ToString("n");
        }
        private void CalHireAmount()
        {
            //Calculate Hire Value
            _varHireValue = Math.Round(_DisCashPrice + _varInterestAmt + _varServiceCharge, 0);
            lblTotHire.Text = _varHireValue.ToString("n");
        }
        private void GetOtherCharges()
        {
            try
            {
                string _item = "";
                string _brand = "";
                string _mainCat = "";
                string _subCat = "";
                string _pb = "";
                string _lvl = "";
                int I = 0;
                decimal TotOther = 0;
                decimal _division = 0;
                int _slabs = 0;
                decimal _grossHV = 0;
                string _type = "";
                string _value = "";
                Int16 _Modslabs = 0;
                List<HpOtherCharges> _SchemeOtherCharges = new List<HpOtherCharges>();
                _varStampduty = 0;
                _varInitialStampduty = 0;
                _varOtherCharges = 0;
                lblStampDuty.Text = "0.00";

                //_SchemeOtherCharges

                // foreach (DataGridViewRow row in dgHpItems.Rows)
                {
                    MasterItem _masterItemDetails = new MasterItem();
                    _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, HSSelectedtItem, 1);

                    _item = _masterItemDetails.Mi_cd;
                    _brand = _masterItemDetails.Mi_brand;
                    _mainCat = _masterItemDetails.Mi_cate_1;
                    _subCat = _masterItemDetails.Mi_cate_2;
                    _pb = cmbBook.Text;
                    _lvl = cmbLevel.Text;

                    //get details from item
                    List<HpOtherCharges> _def = CHNLSVC.Sales.GetOtherCharges(cmbSch.Text, _pb, _lvl, Convert.ToDateTime(dtpRecDate.Text).Date, _item, null, null, null);
                    if (_def != null)
                    {
                        _SchemeOtherCharges.AddRange(_def);
                        goto L5;
                    }

                    //get details from main catetory
                    List<HpOtherCharges> _def1 = CHNLSVC.Sales.GetOtherCharges(cmbSch.Text, _pb, _lvl, Convert.ToDateTime(dtpRecDate.Text).Date, null, _brand, _mainCat, null);
                    if (_def1 != null)
                    {
                        _SchemeOtherCharges.AddRange(_def1);
                        goto L5;
                    }

                    //get details from sub catetory
                    List<HpOtherCharges> _def2 = CHNLSVC.Sales.GetOtherCharges(cmbSch.Text, _pb, _lvl, Convert.ToDateTime(dtpRecDate.Text).Date, null, _brand, null, _subCat);
                    if (_def2 != null)
                    {
                        _SchemeOtherCharges.AddRange(_def2);
                        goto L5;
                    }

                L5: I = 1;
                }

                var _record = (from _lst in _SchemeOtherCharges
                               where _lst.Hoc_tp != "STM"
                               select _lst).ToList();


                // to do list want to add other charges grid

                //gvOthChar.AutoGenerateColumns = false;
                //gvOthChar.DataSource = new List<HpOtherCharges>();
                //gvOthChar.DataSource = _record;


                //foreach (DataGridViewRow row in gvOthChar.Rows)
                //{
                //    TotOther = Math.Round(TotOther + Convert.ToDecimal(row.Cells["col_OthAmt"].Value));
                //}


                //lblOtherTotal.Text = TotOther.ToString("n");
                lblOthCharges.Text = TotOther.ToString("n");
                _varOtherCharges = TotOther;

                //stamp duty________
                var _stamp = (from _lst in _SchemeOtherCharges
                              where _lst.Hoc_tp == "STM"
                              select _lst).ToList();

                if (_stamp.Count > 0)
                {
                    _grossHV = Convert.ToDecimal(lblTotHire.Text);
                    _division = _grossHV / 1000;
                    _slabs = Convert.ToInt16(Math.Floor(_division));

                    _Modslabs = Convert.ToInt16(_grossHV % 1000);
                    if (_Modslabs > 0)
                    {
                        _Modslabs = 1;
                    }
                    else
                    {
                        _Modslabs = 0;
                    }
                    _slabs = Convert.ToInt16(_slabs + _Modslabs);
                    _varStampduty = _slabs * 10;
                    _varStampduty = Math.Round(_varStampduty, 0);

                    List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                    if (_Saleshir.Count > 0)
                    {
                        foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                        {
                            _type = _one.Mpi_cd;
                            _value = _one.Mpi_val;

                            _SchemeDetails = CHNLSVC.Sales.getSchemeDetails(_type, _value, 1, cmbSch.Text);

                            if (_SchemeDetails.Hsd_cd != null)
                            {
                                if (_SchemeDetails.Hsd_init_sduty == true)
                                {
                                    _varInitialStampduty = _varStampduty;
                                    lblStampDuty.Text = _varInitialStampduty.ToString("n");
                                    goto L6;
                                }
                                else
                                {
                                    _varInitialStampduty = 0;
                                    lblStampDuty.Text = "0.00";
                                    goto L6;
                                }

                            }
                        }
                    L6: I = 2;
                    }

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }

        }

        private void GetInsuaranceReCall()
        {
            try
            {
                Boolean tempIns = false;
                string _type = "";
                string _value = "";
                decimal _vVal = 0;
                int I = 0;
                _varFInsAmount = 0;
                _varInsAmount = 0;
                _varInsCommRate = 0;
                _varInsVATRate = 0;
                lblDiriyaAmt.Text = "0.00";
                Boolean _getIns = false;


                if (_SchemeDetails.Hsd_has_insu == true)
                {
                    // foreach (DataGridViewRow row in dgHpItems.Rows)
                    {
                        MasterItem _masterItemDetails = new MasterItem();
                        _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, TxtAdvItem.Text, 1);

                        if (_masterItemDetails.Mi_insu_allow == true)
                        {
                            tempIns = true;
                        }
                    }

                    if (tempIns == true)
                    {
                        List<MasterSalesPriorityHierarchy> _hir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());
                        if (_hir.Count > 0)
                        {
                            foreach (MasterSalesPriorityHierarchy _one in _hir)
                            {
                                _type = _one.Mpi_cd;
                                _value = _one.Mpi_val;

                                List<HpInsuranceDefinition> _ser = CHNLSVC.Sales.GetInsuDefinition(cmbSch.Text, _type, _value, Convert.ToDateTime(lblCreateDate.Text).Date);
                                if (_ser != null)
                                {
                                    foreach (HpInsuranceDefinition _ser1 in _ser)
                                    {
                                        _getIns = false;
                                        if (_ser1.Hpi_chk_on == "UP")
                                        {
                                            if (_ser1.Hpi_from_val <= _DisCashPrice && _ser1.Hpi_to_val >= _DisCashPrice)
                                            {
                                                if (_ser1.Hpi_cal_on == "UP")
                                                {
                                                    _vVal = _DisCashPrice;
                                                }
                                                else if (_ser1.Hpi_cal_on == "AF")
                                                {
                                                    _vVal = _varAmountFinance;
                                                }
                                                else if (_ser1.Hpi_cal_on == "HP")
                                                {
                                                    _vVal = _varHireValue;
                                                }
                                                _getIns = true;
                                                goto L7;
                                            }
                                        }
                                        else if (_ser1.Hpi_chk_on == "AF")
                                        {
                                            if (_ser1.Hpi_from_val <= _varAmountFinance && _ser1.Hpi_to_val >= _varAmountFinance)
                                            {
                                                if (_ser1.Hpi_cal_on == "UP")
                                                {
                                                    _vVal = _DisCashPrice;
                                                }
                                                else if (_ser1.Hpi_cal_on == "AF")
                                                {
                                                    _vVal = _varAmountFinance;
                                                }
                                                else if (_ser1.Hpi_cal_on == "HP")
                                                {
                                                    _vVal = _varHireValue;
                                                }
                                                _getIns = true;
                                                goto L7;
                                            }
                                        }
                                        else if (_ser1.Hpi_chk_on == "HP")
                                        {
                                            if (_ser1.Hpi_from_val <= _varHireValue && _ser1.Hpi_to_val >= _varHireValue)
                                            {
                                                if (_ser1.Hpi_cal_on == "UP")
                                                {
                                                    _vVal = _DisCashPrice;
                                                }
                                                else if (_ser1.Hpi_cal_on == "AF")
                                                {
                                                    _vVal = _varAmountFinance;
                                                }
                                                else if (_ser1.Hpi_cal_on == "HP")
                                                {
                                                    _vVal = _varHireValue;
                                                }
                                                _getIns = true;
                                                goto L7;

                                            }
                                        }

                                    L7: I = 1;
                                        if (_getIns == true)
                                        {
                                            if (_insuAllow == true)
                                            {
                                                if (_SchemeDetails.Hsd_init_insu == true)
                                                {
                                                    //vFInsAmt = Format(Round(rsIns!isu_Amount + (Val(vVal) / 100 * rsIns!isu_Rate)), "0.00")
                                                    if (_ser1.Hpi_ins_isrt == true)
                                                    {
                                                        _varFInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                                        _varInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                                    }
                                                    else
                                                    {
                                                        _varFInsAmount = _ser1.Hpi_ins_val;
                                                        _varInsAmount = _ser1.Hpi_ins_val;
                                                    }

                                                }
                                                else
                                                {
                                                    if (_ser1.Hpi_ins_isrt == true)
                                                    {
                                                        _varFInsAmount = 0;
                                                        _varInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                                    }
                                                    else
                                                    {
                                                        _varFInsAmount = 0;
                                                        _varInsAmount = _ser1.Hpi_ins_val;
                                                    }
                                                }

                                                _varInsVATRate = _ser1.Hpi_vat_rt;
                                                if (_ser1.Hpi_comm_isrt == true)
                                                {
                                                    _varInsCommRate = _ser1.Hpi_comm;
                                                }
                                                lblDiriyaAmt.Text = _varFInsAmount.ToString("n");
                                                goto L8;
                                            }
                                            else
                                            {
                                                _varInsVATRate = 0;
                                                _varInsCommRate = 0;
                                                _varFInsAmount = 0;
                                                _varInsAmount = 0;
                                                goto L8;
                                            }
                                        }

                                    }

                                }
                            }
                        L8: I = 1;
                        }
                    }

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void TotalCash()
        {
            lblHPInitPay.Text = Convert.ToDecimal(_varInitialVAT + _vDPay + _varInitServiceCharge + _varFInsAmount + _varAddRental + _varInitialStampduty + _varOtherCharges).ToString("n");
        }

        private void btnReCal_Click(object sender, EventArgs e)
        {
            try
            {
                decimal _Bal = 0;
                decimal _tmpTotPay = 0;
                decimal _tmpTotalPay = 0;

                if (string.IsNullOrEmpty(txtCusPay.Text))
                {
                    MessageBox.Show("Please enter customer pay amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtCusPay.Focus();
                    return;
                }


                if (Convert.ToDecimal(txtCusPay.Text) <= 0)
                {
                    MessageBox.Show("Please enter customer pay amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtCusPay.Focus();
                    return;
                }

                if (_isCalProcess == false)
                {
                    MessageBox.Show("Before re-cal pls. process.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }



                if (Convert.ToDecimal(txtAddRental.Text) > 0)
                {
                    if (Convert.ToDecimal(txtCusPay.Text) > _ExTotAmt)
                    {
                        _ExTotAmt = Convert.ToDecimal(txtCusPay.Text);
                        _tmpTotalPay = Convert.ToDecimal(lblHPInitPay.Text);
                        this.Cursor = Cursors.WaitCursor;
                        while (Convert.ToDecimal(lblHPInitPay.Text) < Convert.ToDecimal(txtCusPay.Text))
                        {
                            _tmpTotPay = Convert.ToDecimal(lblHPInitPay.Text);
                            _Bal = Convert.ToDecimal(txtCusPay.Text) - _tmpTotPay;
                            //lblDownPay.Text = (Convert.ToDecimal(lblDownPay.Text) + _Bal).ToString("0.00");
                            GetDiscountAndCommission();
                            GetServiceCharges();
                            CalHireAmount();
                            CalCommissionAmount();
                            GetOtherCharges();
                            GetInsuaranceReCall();
                            CalTotalCash();
                            CalInstallmentBaseAmt();
                            TotalCash();
                            //GetInsAndReg();
                            //Show_Shedule();
                            //   lblPayBalance.Text = lblHPInitPay.Text;
                            BalanceAmount = Convert.ToDecimal(lblHPInitPay.Text);
                        }
                        GetInsAndReg();
                        //if (chkCreditNote.Checked == false)
                        //{
                        //    Show_Shedule();
                        //}
                        //else
                        //{
                        //    Show_SheduleWithCrNote();
                        //}
                        //lblDownPay.Text = (Convert.ToDecimal(lblDownPay.Text) - (Convert.ToDecimal(txtAddRental.Text) - Convert.ToDecimal(txtAddRental.Text))).ToString("0.00");
                        // lblHPInitPay.Text = (Convert.ToDecimal(lblTotCash.Text) + Convert.ToDecimal(lblStampDuty.Text) + Convert.ToDecimal(txtAddRental.Text) + Convert.ToDecimal(lblDiriyaAmt.Text)).ToString("0.00");
                        this.Cursor = Cursors.Default;

                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        MessageBox.Show("Customer payment must be higher than the existing amount.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtCusPay.Focus();
                        return;
                    }
                }
                else
                {

                    if (Convert.ToDecimal(lblHPInitPay.Text) > Convert.ToDecimal(txtCusPay.Text))
                    {
                        MessageBox.Show("Customer payment must be higher than the existing initial payment.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtCusPay.Focus();
                        return;
                    }

                    this.Cursor = Cursors.WaitCursor;
                    while (Convert.ToDecimal(lblHPInitPay.Text) < Convert.ToDecimal(txtCusPay.Text))
                    {
                        _tmpTotPay = Convert.ToDecimal(lblHPInitPay.Text);
                        _Bal = Convert.ToDecimal(txtCusPay.Text) - _tmpTotPay;
                        // lblDPay.Text = (Convert.ToDecimal(lblDPay.Text) + _Bal).ToString("0.00");
                        GetDiscountAndCommission();
                        GetServiceCharges();
                        CalHireAmount();
                        CalCommissionAmount();
                        GetOtherCharges();
                        GetInsuaranceReCall();
                        CalTotalCash();
                        CalInstallmentBaseAmt();
                        TotalCash();
                        //GetInsAndReg();
                        //Show_Shedule();
                        //  lblPayBalance.Text = lblHPInitPay.Text;
                        BalanceAmount = Convert.ToDecimal(lblHPInitPay.Text);
                    }
                    GetInsAndReg();
                    //if (chkCreditNote.Checked == false)
                    //{
                    //    Show_Shedule();
                    //}
                    //else
                    //{
                    //    Show_SheduleWithCrNote();
                    //    chkCreditNote.Enabled = false;
                    //}
                    this.Cursor = Cursors.Default;
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();

            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void btn_add_ser_Click(object sender, EventArgs e)
        {
            SSPromotionCode = string.Empty;
            decimal _valPd = 0;
            chkitmres.Visible = false;
            chkitmres.Checked = false;
            if (pnlAdv.Visible == false)
            {
                if (txtCusCode.Text == "CASH")
                {
                    MessageBox.Show("Not Allow for customer code < CASH >.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (string.IsNullOrEmpty(txtCusCode.Text))
                {
                    MessageBox.Show("Customer code cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (txtRecType.Text == "ADVAN")
                {
                    if (string.IsNullOrEmpty(txtSubReceiptTp.Text))
                    {
                        MessageBox.Show("Please select receipt sub type", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                    chkitmres.Checked = true;
                    chkitmres.Visible = true;
                    if (ReceiptSettingList.Count > 0) { _valPd = ReceiptSettingList[0].SettelmentPeriod; dtpValidTill.Value = dtpRecDate.Value.Date.AddDays(Convert.ToDouble(_valPd)); }
                }

                LoadCachedObjects();
                LoadInvoiceType();

                ////Commented by akila 2016/12/29
                //if (txtCusCode.Text == "CASH")
                //{
                //    MessageBox.Show("Not Allow for customer code < CASH >.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}
                //if (txtRecType.Text == "ADVAN")
                //{
                //    List<Hpr_SysParameter> para = CHNLSVC.Sales.GetAll_hpr_Para("ADREFMAXDT", "COM", BaseCls.GlbUserComCode);
                //    if (para.Count > 0)
                //    {
                //        _valPd = para[0].Hsy_val;
                //    }
                //}
                //dtpValidTill.Value = dtpRecDate.Value.Date.AddDays(Convert.ToDouble(_valPd));
                LoadPriceDefaultValue();
                pnlAdv.Visible = true;
                pnlAdv.Width = 1022;
                pnlAdv.Height = 525;
                cmbInvType.Focus();
                lblLvlMsg.Text = string.Empty;
            }
            else
            {
                pnlAdv.Visible = false;
            }

        }

        private void cmbInvType_SelectedIndexChanged(object sender, EventArgs e)
        {
            //if (cmbInvType.Text == "HS")
            //{
            //    LoadScheme();
            pnlItem.Enabled = true;
            _invoiceItemList = new List<InvoiceItem>();
            _invoiceItemList = null;
            _ResList = new List<ReptPickSerials>();
            //gvInvoiceItem.DataSource = new List<InvoiceItem>();
            // gvInvoiceItem.DataSource = _invoiceItemList;
            panelHP.Enabled = true;
            btnProcess.Enabled = true;

            if (cmbInvType.Text == "HS")
            {
                btnProcess.Enabled = true;
                cmbSch.DataSource = null;
                btnProcessRefresh_Click(null, null);
                if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if ((txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.PRCDF.ToString()) || (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.RVT.ToString()))
                    {
                        panelHP.Enabled = false;
                        btnProcess.Enabled = false;
                    }
                }
                // btnConfirm.Enabled = true;
            }
            else if (cmbInvType.Text == "CS")
            {
                panelHP.Enabled = false;
                btnProcess.Enabled = false;
                pnlItem.Enabled = true;
            }
            //else
            //{//  btnConfirm.Enabled = true;
            //}

        }
        private void LoadCachedObjects()
        {

            _PriceDefinitionRef = CacheLayer.Get<List<PriceDefinitionRef>>(CacheLayer.Key.PriceDefinition.ToString()); MasterChannel = CacheLayer.Get<DataTable>(CacheLayer.Key.ChannelDefinition.ToString()); IsSaleFigureRoundUp = CacheLayer.Get(CacheLayer.Key.IsSaleValueRoundUp.ToString());
            _MasterProfitCenter = CacheLayer.Get<MasterProfitCenter>(CacheLayer.Key.ProfitCenter.ToString()); _PriceDefinitionRef = CacheLayer.Get<List<PriceDefinitionRef>>(CacheLayer.Key.PriceDefinition.ToString()); MasterChannel = CacheLayer.Get<DataTable>(CacheLayer.Key.ChannelDefinition.ToString()); IsSaleFigureRoundUp = CacheLayer.Get(CacheLayer.Key.IsSaleValueRoundUp.ToString());
        }
        private void cmbInvType_Leave(object sender, EventArgs e)
        {
            // LoadPriceDefaultValue();
            ////if (cmbInvType.SelectedValue.ToString() == "HS")
            ////{
            ////    panelHP.Enabled = true;
            ////}
        }

        private void btnConfirm_Click(object sender, EventArgs e)
        {

            if (txtRecType.Text == "ADVAN")
            {
                if (gvInvoiceItem.Rows.Count > 0)
                {
                    BindingSource _bind = (BindingSource)gvInvoiceItem.DataSource;
                    List<InvoiceItem> _tmpList = new List<InvoiceItem>();
                    _tmpList = _bind.DataSource as List<InvoiceItem>;
                    _invoiceItemList = _tmpList;
                }
                else { MessageBox.Show("Please select an item", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return; }
                //if (string.IsNullOrEmpty(TxtAdvItem.Text) == true)
                //{
                //    MessageBox.Show("Enter item an item.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}
                //MasterItem _itemList = new MasterItem();
                //_itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, TxtAdvItem.Text.Trim());

                if (cmbInvType.Text == "HS" && _isCalProcess == false)
                {
                    MessageBox.Show("pls click on the process button.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                if (_invoiceItemList.Count == 0)
                {
                    MessageBox.Show("Enter item details.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }


                //         decimal _totAmt = 0;
                //for (int i = 0; i < dgvItem.Rows.Count; i++)
                //{

                //       if (  dgvItem.Rows[i].Cells[0].Value.ToString() == TxtAdvItem.Text)
                //       {
                //           MessageBox.Show("This item already exist.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //           return;
                //       }

                //}

                //if (string.IsNullOrEmpty(cmbBook.Text) == true)
                //{
                //    MessageBox.Show("Enter Price Book", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}
                //if (string.IsNullOrEmpty(cmbLevel.Text) == true)
                //{
                //    MessageBox.Show("Enter price level", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}
                //if (string.IsNullOrEmpty(cmbStatus.SelectedValue.ToString()) == true)
                //{
                //    MessageBox.Show("Enter item status.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}
                //if (string.IsNullOrEmpty(txtUnitPrice.Text) == true)
                //{
                //    MessageBox.Show("Enter Unit Price.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}
                dgvItem.Rows.Clear();                

                foreach (InvoiceItem itm in _invoiceItemList)
                {
                    string _companyCode = null;
                    if ((txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString()) && (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString()))
                    {
                        _companyCode = txtIntrCompany.Text.ToUpper();
                    }
                    else
                    {
                        _companyCode = BaseCls.GlbUserComCode;
                    }

                    MasterItem _item = CHNLSVC.Inventory.GetItem(_companyCode, itm.Sad_itm_cd);
                    ReptPickSerials _tempItem = new ReptPickSerials();
                    _tempItem.Tus_itm_desc = _item.Mi_shortdesc;
                    _tempItem.Tus_itm_model = _item.Mi_model;
                    _tempItem.Tus_itm_brand = _item.Mi_brand;
                    _tempItem.Tus_base_doc_no = null;
                    _tempItem.Tus_base_itm_line = 0;
                    _tempItem.Tus_isapp = 0;
                    _tempItem.Tus_iscovernote = 0;
                    _tempItem.Tus_com = BaseCls.GlbUserComCode;
                    _tempItem.Tus_loc = BaseCls.GlbUserDefLoca;

                    _tempItem.Tus_itm_cd = itm.Sad_itm_cd;
                    _tempItem.Tus_itm_stus = itm.Sad_itm_stus;
                    //if (cmbInvType.Text != "HS")
                    //{
                    _tempItem.Tus_unit_price = Convert.ToDecimal(itm.Sad_unit_rt);
                    _tempItem.Tus_unit_cost = Convert.ToDecimal(itm.Sad_unit_amt);
                    //}
                    //else
                    //{
                    //    _tempItem.Tus_unit_price = Convert.ToDecimal(lblDownPay.Text);
                    //    _tempItem.Tus_unit_cost = Convert.ToDecimal(lblDownPay.Text);
                    //}

                    _tempItem.Tus_orig_grnno = itm.Sad_pbook;
                    _tempItem.Tus_orig_supp = itm.Sad_pb_lvl;
                    _tempItem.Tus_resqty = itm.Sad_itm_tax_amt;
                    _tempItem.Tus_qty = itm.Sad_qty;
                    _tempItem.Tus_ser_1 = itm.Sad_job_no;//serial 
                    _tempItem.Tus_new_remarks = itm.Sad_promo_cd;
                    _ResList.Add(_tempItem);



                    // dgvItem.Rows.Clear();

                    dgvItem.Rows.Add();
                    dgvItem["col_itmItem", dgvItem.Rows.Count - 1].Value = itm.Sad_itm_cd;
                    dgvItem["colpb", dgvItem.Rows.Count - 1].Value = itm.Sad_pbook;
                    dgvItem["colpblvl", dgvItem.Rows.Count - 1].Value = itm.Sad_pb_lvl;
                    dgvItem["col_itmStatus", dgvItem.Rows.Count - 1].Value = itm.Sad_itm_stus;
                    dgvItem["colQty", dgvItem.Rows.Count - 1].Value = itm.Sad_qty;
                    //if (cmbInvType.Text != "HS")
                    //{
                    dgvItem["colRate", dgvItem.Rows.Count - 1].Value = itm.Sad_unit_rt.ToString("N2");
                    dgvItem["colamt", dgvItem.Rows.Count - 1].Value = itm.Sad_unit_amt.ToString("N2");//commnt by tharanga
                    dgvItem["colamt", dgvItem.Rows.Count - 1].Value = itm.Sad_tot_amt.ToString("N2"); //add by tharanga 2018/04/24
                    //if (cmbInvType.Text != "HS")
                    //{
                    //    lblSchme.Text = "";
                    //}


                    //}
                    //else
                    //{
                    //    dgvItem["colRate", dgvItem.Rows.Count - 1].Value = lblDownPay.Text;
                    //    dgvItem["colamt", dgvItem.Rows.Count - 1].Value = lblDownPay.Text;
                    //    lblSchme.Text = "Sales Type:" + cmbSch.Text;

                    //}


                    dgvItem["colTax", dgvItem.Rows.Count - 1].Value = itm.Sad_itm_tax_amt.ToString("N2");

                    lblSalesType.Text = cmbInvType.Text;
                    dgvItem["col_itmDesc", dgvItem.Rows.Count - 1].Value = _item.Mi_shortdesc;
                    dgvItem["col_itmModel", dgvItem.Rows.Count - 1].Value = _item.Mi_model;
                    dgvItem["col_itmSerial", dgvItem.Rows.Count - 1].Value = itm.Sad_job_no;//serial 

                }

                lblTotInvVal.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt)));
                //cmbBook.SelectedIndex = -1;
                //cmbLevel.SelectedIndex = -1;
                //cmbStatus.SelectedIndex = -1;
                //txtTaxAmt.Text = "0";
                //txtQty.Text = "0";
                //txtQty.Text = "1";
                //txtSerialNo.Text = "";
                //txtUnitPrice.Text = "0";
                //txtLineTotAmt.Text = "0";
                //TxtAdvItem.Text ="";
                //txtItem.Text = ""; 

                //decimal TotRec = 0;

                //Decimal _recPer = 0;
                decimal _shouldpay = 0;

                if (cmbInvType.Text == "HS")
                {
                    _shouldpay = Convert.ToDecimal(lblHPInitPay.Text);
                    HsMinPayAmount = _shouldpay;
                    txtPayment.Text = FormatToCurrency(_shouldpay.ToString("N2"));
                    ucPayModes1.Date = Convert.ToDateTime(dtpRecDate.Value.Date);
                    ucPayModes1.LoadData();
                    if (dgvItem.Rows.Count > 0)
                    {
                        dgvItem["colpay", dgvItem.Rows.Count - 1].Value = txtPayment.Text;
                    }

                    //comment ed by akila 2017/01/07
                    //Decimal _Amt = 0;
                    //_Amt = Convert.ToDecimal(_shouldpay.ToString("N2"));
                    //ucPayModes1.TotalAmount = _Amt;
                    //ucPayModes1.Amount.Text = Convert.ToString(ucPayModes1.TotalAmount - Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text));
                    //ucPayModes1.Date = Convert.ToDateTime(dtpRecDate.Value.Date);

                    //ucPayModes1.LoadData();
                    //txtTotal.Text = Convert.ToDecimal(ucPayModes1.TotalAmount).ToString();
                }
                else
                {
                    //if (txtRecType.Text == "ADVAN")
                    //{
                    //    List<Hpr_SysParameter> para = CHNLSVC.Sales.GetAll_hpr_Para("RECTPER", "COM", BaseCls.GlbUserComCode);
                    //    if (para.Count > 0)
                    //    {
                    //        _recPer = para[0].Hsy_val;
                    //    }

                    //}

                    //Add by Akila 2016/12/29

                    ucPayModes1.Date = Convert.ToDateTime(dtpRecDate.Value.Date);
                    if ((txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString()) && (ucPayModes1.TotalAmount == 0))
                    {
                        txtPayment.Text = FormatToCurrency(CalculateMiniPayableAmt().ToString());
                        ucPayModes1.LoadData();
                    }

                    if (dgvItem.Rows.Count > 0)
                    {
                        dgvItem["colpay", dgvItem.Rows.Count - 1].Value = txtPayment.Text;
                    }

                    //TotRec = 0;
                    //foreach (InvoiceItem itm in _invoiceItemList)
                    //{
                    //    TotRec = TotRec + itm.Sad_tot_amt;
                    //}


                    //if (TotRec > 0 && _recPer > 0)
                    //{
                    //    _shouldpay = TotRec * (_recPer / 100);
                    //}

                    //ucPayModes1.TotalAmount = 0;
                    //ucPayModes1.Amount.Text = "0";
                    //Decimal _Amt = 0;
                    //_Amt = Convert.ToDecimal(_shouldpay.ToString("N2"));
                    //ucPayModes1.TotalAmount = _Amt;
                    //ucPayModes1.Amount.Text = Convert.ToString(ucPayModes1.TotalAmount - Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text));
                    //ucPayModes1.Date = Convert.ToDateTime(dtpRecDate.Value.Date);

                    //ucPayModes1.LoadData();
                    //txtTotal.Text = Convert.ToDecimal(ucPayModes1.TotalAmount).ToString();


                }
                //if (dgvItem.Rows.Count > 0)
                //{
                //    dgvItem["colpay", dgvItem.Rows.Count - 1].Value = _shouldpay.ToString("N2");
                //}
                pnlAdv.Visible = false;

                _invoiceItemList = new List<InvoiceItem>();
                _invoiceItemList = null;
                //gvInvoiceItem.DataSource = new List<InvoiceItem>();
                //gvInvoiceItem.DataSource = _invoiceItemList;

                ClearHP();
                txtItem.Text = "";
                TxtAdvItem.Text = "";

            }

        }

        private void btnSearch_Serial_Click(object sender, EventArgs e)
        {
            try
            {
                if (txtRecType.Text.ToUpper() == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString())
                    {
                        if (string.IsNullOrEmpty(txtIntrCompany.Text))
                        {
                            MessageBox.Show("Please select a company", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }

                        if (string.IsNullOrEmpty(txtIntrLocation.Text))
                        {
                            MessageBox.Show("Please select a location", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                    }
                }


                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ItemAvailableSerial);
                DataTable _result = CHNLSVC.CommonSearch.SearchAvlbleSerial4Invoice(_commonSearch.SearchParams, null, null);
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtSerialNo;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtSerialNo.Select();


            }
            catch (Exception ex)
            { txtSerialNo.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void SystemErrorMessage(Exception ex)
        { CHNLSVC.CloseChannel(); this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); } }

        private void txtengine_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtItem_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtChasis_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtSerialNo_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtSerialNo.Text))
            {
                string _location = null;

                if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString())
                {
                    _location = txtIntrLocation.Text;
                }
                else
                {
                    _location = BaseCls.GlbUserDefLoca;
                }

                ReptPickSerials _serialList = new ReptPickSerials();
                _serialList = CHNLSVC.Inventory.GetAvailableSerIDInformation(BaseCls.GlbUserComCode, _location, null, txtSerialNo.Text.Trim(), string.Empty, string.Empty);
                //_serialList = CHNLSVC.Inventory.GetAvailableSerIDInformation(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, TxtAdvItem.Text.Trim(), txtSerialNo.Text.Trim(), string.Empty, string.Empty);

                if (_serialList == null)
                {
                    MessageBox.Show("Serail not found. Please select  a valid serial", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtSerialNo.Text = "";
                    txtSerialNo.Focus();
                    return;
                }

                if (_serialList.Tus_ser_1 != null)
                {
                    TxtAdvItem.Text = _serialList.Tus_itm_cd;
                    //if (txtChasis.Visible == true)
                    //{
                    //    txtChasis.Text = _serialList.Tus_ser_2;
                    //}
                }
                else
                {
                    MessageBox.Show("Invalid serial / engine number.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtSerialNo.Text = "";
                    txtSerialNo.Focus();
                    return;
                }
                _isResser = true;
            }
        }


        private void cmbStatus_Leave(object sender, EventArgs e)
        {

            try
            {
                this.Cursor = Cursors.WaitCursor;
                CheckLevelStatusWithInventoryStatus();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void cmbStatus_SelectedIndexChanged(object sender, EventArgs e)
        {

        }


        private bool _isRegistrationMandatory = false;
        private void CheckItemCode(object sender, EventArgs e)
        {
            //Boolean chkDeliverLater = true;
            //Boolean chkDeliverNow = false;

            if (string.IsNullOrEmpty(cmbInvType.Text))
            {
                MessageBox.Show("Please select sales type", "Invalid Type", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (string.IsNullOrEmpty(TxtAdvItem.Text.Trim())) return;

            txtItem.Text = TxtAdvItem.Text;
            if (_isItemChecking) { _isItemChecking = false; return; }
            _isItemChecking = true;

            try
            {
                if (cmbInvType.Text == "HS")
                {
                    _isCalProcess = false;
                    _selectPromoCode = "";
                    //  LoadScheme();
                    if (GetItemDetails(TxtAdvItem.Text.Trim()) == false)
                    {
                        return;
                    }
                }


                this.Cursor = Cursors.WaitCursor;
                if (!LoadItemDetail(TxtAdvItem.Text.Trim()))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please check the item code", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    TxtAdvItem.Text = null;
                    TxtAdvItem.Focus();
                    if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater == false) cmbStatus.Text = "";
                    return;
                }

                if (_itemdetail.Mi_is_ser1 == 1 && IsGiftVoucher(_itemdetail.Mi_itm_tp))
                {
                    if (string.IsNullOrEmpty(txtSerialNo.Text))
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the gift voucher number", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Clear(); txtSerialNo.Clear(); }

                    return;
                }
                IsVirtual(_itemdetail.Mi_itm_tp);

                if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater == false && chkDeliverNow == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial no for the serialized item", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater == true && chkDeliverNow == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) && _isRegistrationMandatory)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Registration mandatory items can not save without serial", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }

                //if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater == false) cmbStatus.Text = "";

                //if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) txtQty.Text = FormatToQty("0"); else
                if (txtSerialNo.Text != "")
                {
                    txtQty.Text = FormatToQty("1");
                }
                if (_IsVirtualItem)
                {
                    bool block = CheckBlockItem(TxtAdvItem.Text.Trim(), 0, false);
                    if (block)
                    {
                        TxtAdvItem.Text = "";
                    }
                }
                CheckQty(true);
                txtQty.Focus();
                // btnConfirm.Focus();
            }
            catch (Exception ex)
            {
                TxtAdvItem.Text = null;
                TxtAdvItem.Focus();
                this.Cursor = Cursors.Default; SystemErrorMessage(ex); 
            }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); _isItemChecking = false; }
        }

        private void txtUnitPrice_TextChanged(object sender, EventArgs e)
        {

        }

        private void gvNormalPrice_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvNormalPrice.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                        if (_priceBookLevelRef.Sapl_is_serialized)
                        {
                            UncheckNormalPriceOrPromotionPrice(false, true);
                            DataGridViewCheckBoxCell _chk = (DataGridViewCheckBoxCell)gvNormalPrice.Rows[_row].Cells[0];
                            if (Convert.ToBoolean(_chk.Value)) _chk.Value = false; else _chk.Value = true;
                            decimal _count = (from DataGridViewRow row in gvNormalPrice.Rows
                                              where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true
                                              select row).Count();
                            if (_count > Convert.ToDecimal(txtQty.Text.Trim()))
                            {
                                _chk.Value = false; this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials are mismatch.", "Serial and Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                        }
                        else
                        {
                            //string _unitPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_UnitPrice"].Value.ToString();
                            //string _bkpPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_BkpUPrice"].Value.ToString();
                            //string _pbseq = gvNormalPrice.Rows[_row].Cells["NorPrice_Pb_Seq"].Value.ToString();
                            //string _pblineseq = gvNormalPrice.Rows[_row].Cells["NorPrice_PbLineSeq"].Value.ToString();
                            //string _warrantyrmk = gvNormalPrice.Rows[_row].Cells["NorPrice_WarrantyRmk"].Value.ToString();
                            //if (!string.IsNullOrEmpty(_unitPrice))
                            //{
                            //    txtUnitPrice.Text = _unitPrice;

                            //    SSPriceBookPrice = Convert.ToDecimal(_bkpPrice);
                            //    SSPriceBookSequance = _pbseq;
                            //    SSPriceBookItemSequance = _pblineseq;
                            //    WarrantyRemarks = _warrantyrmk;
                            //    CalculateItem();
                            //    pnlMain.Enabled = true;
                            //    pnlPriceNPromotion.Visible = false;
                            //}
                        }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvNormalPrice_CellClick(object sender, DataGridViewCellEventArgs e)
        {

            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvNormalPrice.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        //Added by Prabhath on stop to change status
                        string _oldStatus = Convert.ToString(cmbStatus.SelectedValue);
                        string _book = gvNormalPrice.Rows[_row].Cells["NorPrice_Book"].Value.ToString();
                        string _level = gvNormalPrice.Rows[_row].Cells["NorPrice_Level"].Value.ToString();
                        cmbBook.Text = _book;
                        cmbLevel.Text = _level;
                        cmbLevel_Leave(null, null);
                        //Added by Prabhath on stop double click
                        gvNormalPrice_CellDoubleClick(sender, e);
                        if (_priceBookLevelRef.Sapl_is_serialized == false)
                        {
                            string _unitPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_UnitPrice"].Value.ToString();
                            string _bkpPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_BkpUPrice"].Value.ToString();
                            string _pbseq = gvNormalPrice.Rows[_row].Cells["NorPrice_Pb_Seq"].Value.ToString();
                            string _pblineseq = gvNormalPrice.Rows[_row].Cells["NorPrice_PbLineSeq"].Value.ToString();
                            string _warrantyrmk = gvNormalPrice.Rows[_row].Cells["NorPrice_WarrantyRmk"].Value.ToString();
                            if (!string.IsNullOrEmpty(_unitPrice))
                            {
                                txtUnitPrice.Text = FormatToCurrency(_unitPrice);
                                SSPriceBookPrice = Convert.ToDecimal(_bkpPrice);
                                SSPriceBookSequance = _pbseq;
                                SSPriceBookItemSequance = _pblineseq;
                                WarrantyRemarks = _warrantyrmk;

                                CalculateItem();
                                //  pnlMain.Enabled = true;
                                pnlPriceNPromotion.Visible = false;
                            }
                        }
                        else
                        {   //Added by Prabhath on stop to change status
                            cmbStatus.Text = _oldStatus;
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionPrice_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionPrice.RowCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        string _book = gvPromotionPrice.Rows[_row].Cells["PromPrice_Book"].Value.ToString();
                        string _level = gvPromotionPrice.Rows[_row].Cells["PromPrice_Level"].Value.ToString();
                        cmbBook.Text = _book;
                        cmbBook_Leave(null, null);
                        cmbLevel.Text = _level;
                        cmbLevel_Leave(null, null);
                        gvPromotionPrice_CellDoubleClick(_row, false, _priceBookLevelRef.Sapl_is_serialized);
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }
        private void UncheckNormalPriceOrPromotionPrice(bool _isNormal, bool _isPromotion)
        {
            if (_isNormal)
                if (gvNormalPrice.RowCount > 0)
                {
                    foreach (DataGridViewRow _r in gvNormalPrice.Rows)
                    {
                        DataGridViewCheckBoxCell _chk = (DataGridViewCheckBoxCell)_r.Cells[0];
                        if (Convert.ToBoolean(_chk.Value) == true)
                        {
                            _chk.Value = false;
                        }
                    }
                }

            if (_isPromotion)
                if (gvPromotionPrice.RowCount > 0)
                    foreach (DataGridViewRow row in gvPromotionPrice.Rows)
                    {
                        DataGridViewCheckBoxCell chk = row.Cells[0] as DataGridViewCheckBoxCell;
                        if (Convert.ToBoolean(chk.Value) == true)
                        {
                            chk.Value = false;
                        }
                    }
        }
        private void BindPriceCombineItem(Int32 _pbseq, Int32 _pblineseq, Int32 _priceType, string _mainItem, string _mainSerial)
        {
            _tempPriceCombinItem = new List<PriceCombinedItemRef>();
            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
            //PriceTypeRef _list = TakePromotion(_priceType);
            //if (_list.Sarpt_is_com)
            if (_priceBookLevelRef.Sapl_is_serialized)
            {
                _tempPriceCombinItem = CHNLSVC.Sales.GetPriceCombinedItem(_pbseq, _mainItem, _mainSerial);
                PromItm_Serial.Visible = true;
            }
            else
            {
                _tempPriceCombinItem = CHNLSVC.Sales.GetPriceCombinedItemLine(_pbseq, _pblineseq, _mainItem, string.Empty);
                PromItm_Serial.Visible = false;
            }
            if (_tempPriceCombinItem != null && _tempPriceCombinItem.Count > 0)
            {
                _tempPriceCombinItem.ForEach(x => x.Mi_cre_by = Convert.ToString(x.Mi_std_price));
                _tempPriceCombinItem.Where(x => x.Sapc_increse).ToList().ForEach(x => x.Sapc_qty = x.Sapc_qty * Convert.ToDecimal(txtQty.Text.Trim()));
                _tempPriceCombinItem.ForEach(x => x.Sapc_price = x.Sapc_price * CheckSubItemTax(x.Sapc_itm_cd));
                _tempPriceCombinItem.Where(x => !string.IsNullOrEmpty(x.Sapc_sub_ser)).ToList().ForEach(x => x.Sapc_increse = true);
                gvPromotionItem.DataSource = _tempPriceCombinItem;
                HangGridComboBoxStatus();
            }
        }

        private void HangGridComboBoxStatus()
        {
            if (_levelStatus == null || _levelStatus.Rows.Count <= 0) return;
            var _types = _levelStatus.AsEnumerable().Select(x => x.Field<string>("Code")).Distinct().ToList();
            _types.Add("");
            PromItm_Status.DataSource = _types;
            foreach (DataGridViewRow r in gvPromotionItem.Rows)
                r.Cells["PromItm_Status"].Value = cmbStatus.Text;
        }

        private void gvPromotionPrice_CellDoubleClick(Int32 _row, bool _isValidate, bool _IsSerializedPriceLevel)
        {
            if (_IsSerializedPriceLevel)
            {
                DataGridViewCheckBoxCell _chk = gvPromotionPrice.Rows[_row].Cells["PromPrice_Select"] as DataGridViewCheckBoxCell;
                bool _isSelected = false;
                if (Convert.ToBoolean(_chk.Value)) _isSelected = true;
                UncheckNormalPriceOrPromotionPrice(true, false);
                string _mainItem = gvPromotionPrice.Rows[_row].Cells["PromPrice_Item"].Value.ToString();
                string _mainSerial = gvPromotionPrice.Rows[_row].Cells["PromPrice_Serial"].Value.ToString();
                string _pbseq = gvPromotionPrice.Rows[_row].Cells["PromPrice_Pb_Seq"].Value.ToString();
                string _priceType = gvPromotionPrice.Rows[_row].Cells["PromPrice_PriceType"].Value.ToString();
                BindPriceCombineItem(Convert.ToInt32(_pbseq), 1, Convert.ToInt32(_priceType), _mainItem, _mainSerial);
                if (_isValidate)
                {
                    if (_isSelected) _chk.Value = false; else _chk.Value = true;
                    decimal _count = (from DataGridViewRow row in gvNormalPrice.Rows
                                      where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true
                                      select row).Count();
                    if (_count > Convert.ToDecimal(txtQty.Text.Trim()))
                    {
                        _chk.Value = false; this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials are mismatch.", "Serial and Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }
                }
                if (_isSelected) _chk.Value = false; else _chk.Value = true;
            }
            else
            {
                if (gvPromotionPrice.Rows.Count > 0)
                {
                    DataGridViewCheckBoxCell chk = gvPromotionPrice.Rows[_row].Cells["PromPrice_Select"] as DataGridViewCheckBoxCell;
                    bool _isSelected = false;
                    if (Convert.ToBoolean(chk.Value)) _isSelected = true;
                    UncheckNormalPriceOrPromotionPrice(false, true);
                    BindingSource _source = new BindingSource();
                    _source.DataSource = new List<PriceCombinedItemRef>();
                    gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                    if (_isSelected) chk.Value = false;
                    else
                    {
                        string _mainItem = gvPromotionPrice.Rows[_row].Cells["PromPrice_Item"].Value.ToString();
                        string _pbseq = gvPromotionPrice.Rows[_row].Cells["PromPrice_Pb_Seq"].Value.ToString();
                        string _priceType = gvPromotionPrice.Rows[_row].Cells["PromPrice_PriceType"].Value.ToString();
                        string _pblineseq = gvPromotionPrice.Rows[_row].Cells["PromPrice_PbLineSeq"].Value.ToString();
                        BindPriceCombineItem(Convert.ToInt32(_pbseq), Convert.ToInt32(_pblineseq), Convert.ToInt32(_priceType), _mainItem, string.Empty);
                        chk.Value = true;
                    }
                }
            }
        }

        private void gvPromotionPrice_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionPrice.RowCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                        gvPromotionPrice_CellDoubleClick(_row, true, _priceBookLevelRef.Sapl_is_serialized);
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionItem_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionItem.RowCount > 0)
                {
                    int _col = e.ColumnIndex;
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        string _originalItem = gvPromotionItem.Rows[_row].Cells["PromItm_Item"].Value.ToString();
                        string _item = gvPromotionItem.Rows[_row].Cells["PromItm_Item"].Value.ToString();
                        string _similerItem = Convert.ToString(gvPromotionItem.Rows[_row].Cells["PromItm_SimilerItem"].Value);
                        string _status = Convert.ToString(gvPromotionItem.Rows[_row].Cells["PromItm_Status"].Value); //cmbStatus.Text.Trim();
                        string _qty = gvPromotionItem.Rows[_row].Cells["PromItm_Qty"].Value.ToString();
                        string _serial = gvPromotionItem.Rows[_row].Cells["PromItm_Serial"].Value.ToString();
                        bool _haveSerial = Convert.ToBoolean(gvPromotionItem.Rows[_row].Cells["PromItm_increse"].Value.ToString());
                        string _PromotionCD = Convert.ToString(gvPromotionPrice.SelectedRows[0].Cells["PromPrice_PromotionCD"].Value);
                        List<ReptPickSerials> _giftVoucher = new List<ReptPickSerials>();

                        if (!string.IsNullOrEmpty(_similerItem))
                            _item = _similerItem;
                        bool _isGiftVoucher = IsGiftVoucher(CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item).Mi_itm_tp);

                        if (!_isGiftVoucher) DisplayAvailableQty(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, _status);
                        else LoadGiftVoucherBalance(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, out _giftVoucher);
                        if (gvPromotionItem.Columns[e.ColumnIndex].Name != "PromItm_SelectSimilerItem")
                        {
                            if (_isGiftVoucher)
                            {
                                List<ReptPickSerials> _lst = new List<ReptPickSerials>();
                                _promotionSerial = new List<ReptPickSerials>();
                                _promotionSerialTemp = new List<ReptPickSerials>();
                                if (_giftVoucher != null)
                                    if (_giftVoucher.Count > 0)
                                        _lst.AddRange(_giftVoucher);
                                _promotionSerial = _lst;
                                gvPopComItemSerial.DataSource = new List<ReptPickSerials>();
                                gvPopComItemSerial.DataSource = _lst;
                                txtPriNProSerialSearch.Text = ".";
                                txtPriNProSerialSearch.Text = string.Empty;
                            }
                            else if (_priceBookLevelRef.Sapl_is_serialized)
                            {
                                if (_haveSerial == false && chkDeliverLater == false && chkDeliverNow == false)
                                    LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, _col);
                                else if (_haveSerial == true && !string.IsNullOrEmpty(_similerItem) && chkDeliverLater == false && chkDeliverNow == false)
                                    LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, _col);
                                else if (_haveSerial == true && chkDeliverLater == false && chkDeliverNow == false)
                                {
                                    List<InventorySerialRefN> _ref = CHNLSVC.Inventory.GetItemDetailBySerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _serial);
                                    if (_ref != null)
                                        if (_ref.Count > 0)
                                        {
                                            var _available = _ref.Where(x => x.Ins_itm_cd == _item).ToList();
                                            if (_available == null || _available.Count <= 0)
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected item does not available in the current inventory", "No Stock", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                                return;
                                            }
                                        }
                                }
                            }
                            else if (chkDeliverLater == false && chkDeliverNow == false)
                            {
                                LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, _col);
                            }
                            else
                            {
                                var _list = new BindingList<ReptPickSerials>(new List<ReptPickSerials>());
                                gvPromotionSerial.DataSource = _list;
                            }
                        }

                        #region Similar Item Call

                        if (!_isGiftVoucher)
                            if (gvPromotionItem.Columns[e.ColumnIndex].Name == "PromItm_SelectSimilerItem" && chkDeliverLater == false && chkDeliverNow == false)
                            {
                                DataTable _dtTable = CHNLSVC.Inventory.GetItemInventoryBalanceStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty);
                                if (_dtTable != null)
                                    if (_dtTable.Rows.Count > 0)
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Stock balance is available for the promotion item. No need to pick similar item here!.", "Similar Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }

                                TextBox _box = new TextBox();
                                CommonSearch.SearchSimilarItems _similarItems = new CommonSearch.SearchSimilarItems();
                                _similarItems.DocumentType = "S";
                                _similarItems.ItemCode = _item;
                                _similarItems.FunctionDate = dtpRecDate.Value.Date;
                                _similarItems.DocumentNo = string.Empty;
                                _similarItems.PromotionCode = _PromotionCD;
                                _similarItems.obj_TragetTextBox = _box;
                                _similarItems.ShowDialog();
                                if (!string.IsNullOrEmpty(_box.Text))
                                {
                                    _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == _originalItem).ToList().ForEach(x => x.Similer_item = _box.Text);
                                    _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == _originalItem).ToList().ForEach(x => x.Sapc_increse = false);
                                    _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == _originalItem).ToList().ForEach(x => x.Sapc_sub_ser = string.Empty);
                                    BindingSource _source = new BindingSource();
                                    _source.DataSource = _tempPriceCombinItem;
                                    gvPromotionItem.DataSource = _source;
                                    _box.Clear();
                                }
                            }
                            else if ((gvPromotionItem.Columns[e.ColumnIndex].Name == "PromItm_SelectSimilerItem" && chkDeliverLater == true && chkDeliverNow == false))
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You can not pick similar item unless you have deliver now!", "Similar Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                        #endregion Similar Item Call
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void LoadSelectedItemSerialForPriceComItemSerialGv(string _item, string _status, decimal _qty, bool _isPromotion, int _isStatusCol)
        {
            List<ReptPickSerials> _lst = null;
            _promotionSerial = new List<ReptPickSerials>();
            _promotionSerialTemp = new List<ReptPickSerials>();
            MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
            if (_itm.Mi_is_ser1 == 1)
            {
                if (IsPriceLevelAllowDoAnyStatus)
                    _lst = CHNLSVC.Inventory.GetNonSerializedItemInTopOrder(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item.Trim().ToUpper(), string.Empty, _qty);
                else
                    _lst = CHNLSVC.Inventory.GetNonSerializedItemInTopOrder(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item.Trim().ToUpper(), _status, _qty);

                if (IsPriceLevelAllowDoAnyStatus == false && (_lst == null || _lst.Count <= 0))
                {
                    if (cmbStatus.Items.Contains("CONS"))
                    {
                        _status = "CONS";
                        _lst = CHNLSVC.Inventory.GetNonSerializedItemInTopOrder(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item.Trim().ToUpper(), _status, _qty);
                    }
                }
                foreach (ReptPickSerials _ser in ScanSerialList.Where(x => x.Tus_itm_cd == _item.Trim()))
                    _lst.RemoveAll(x => x.Tus_ser_1 == _ser.Tus_ser_1);

                _lst.RemoveAll(x => x.Tus_ser_1 == txtSerialNo.Text);

                #region Age Price level - serial pick

                bool _isAgePriceLevel = false;
                int _noOfDays = 0;
                CheckNValidateAgeItem(_item.Trim(), _itm.Mi_cate_1, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), _status, out _isAgePriceLevel, out _noOfDays);
                List<ReptPickSerials> _newlist = GetAgeItemList(Convert.ToDateTime(dtpRecDate.Value.Date).Date, _isAgePriceLevel, _noOfDays, _lst);

                #endregion Age Price level - serial pick

                gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                BindingSource _source = new BindingSource();
                var _list = new BindingList<ReptPickSerials>(_newlist);
                if (_isPromotion)
                {
                    _source.DataSource = _lst;
                    gvPromotionSerial.DataSource = _list;
                }
                else
                {
                    _source.DataSource = _lst;
                    gvPopComItemSerial.DataSource = _list;
                }
                _promotionSerial = _lst;
            }
            else
            {
                if (_isStatusCol == 7) return;
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("No need to pick non serialized item", "Non Serialized Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return;
            }
        }

        private void CheckNValidateAgeItem(string _itemc, string _itemcategory, string _bookc, string _levelc, string _status, out bool IsAgePriceLevel, out int AgeDays)
        {
            bool _isAgePriceLevel = false;
            int _ageingDays = -1;
            MasterItem _item = null;
            if (string.IsNullOrEmpty(_itemcategory))
            { _item = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itemc); if (_item != null) _itemcategory = _item.Mi_cate_1; }
            List<PriceBookLevelRef> _level = _priceBookLevelRefList;
            if (_level != null)
                if (_level.Count > 0)
                {
                    var _lvl = _level.Where(x => x.Sapl_isage && x.Sapl_itm_stuts == _status).ToList();
                    if (_lvl != null) if (_lvl.Count() > 0)
                            _isAgePriceLevel = true;
                }
            if (_isAgePriceLevel)
            {
                DataTable _categoryDet = CHNLSVC.General.GetMainCategoryDetail(_itemcategory);
                if (_categoryDet != null && _categoryDet.Rows.Count > 0)
                {
                    if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                        _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                    else _ageingDays = 0;
                }
            }

            IsAgePriceLevel = _isAgePriceLevel;
            AgeDays = _ageingDays;
        }


        private List<ReptPickSerials> GetAgeItemList(DateTime _date, bool _isAgePriceLevel, int _noOfDays, List<ReptPickSerials> _referance)
        {
            List<ReptPickSerials> _ageLst = new List<ReptPickSerials>();
            if (_isAgePriceLevel)
                _ageLst = _referance.Where(x => x.Tus_exist_grndt <= _date.AddDays(-_noOfDays)).ToList();
            else
                _ageLst = _referance;
            return _ageLst;
        }
        private void gvPromotionItem_PromItm_Status_LoadInventoryBalance(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                string _selectedstatus = Convert.ToString(((DataGridViewComboBoxEditingControl)sender).EditingControlFormattedValue);
                DataGridViewRow _rowCollection = gvPromotionItem.SelectedRows[0];
                Int32 _row = _rowCollection.Index;

                string _originalItem = _rowCollection.Cells["PromItm_Item"].Value.ToString();
                string _item = _rowCollection.Cells["PromItm_Item"].Value.ToString();
                string _similerItem = Convert.ToString(_rowCollection.Cells["PromItm_SimilerItem"].Value);
                string _status = _selectedstatus;
                string _oldStatus = Convert.ToString(_rowCollection.Cells["PromItm_Status"].Value);
                string _qty = _rowCollection.Cells["PromItm_Qty"].Value.ToString();
                string _serial = _rowCollection.Cells["PromItm_Serial"].Value.ToString();
                bool _haveSerial = Convert.ToBoolean(_rowCollection.Cells["PromItm_increse"].Value.ToString());
                string _PromotionCD = Convert.ToString(gvPromotionPrice.SelectedRows[0].Cells["PromPrice_PromotionCD"].Value);
                List<ReptPickSerials> _giftVoucher = new List<ReptPickSerials>();

                if (!string.IsNullOrEmpty(_similerItem))
                    _item = _similerItem;

                if (PriceCombinItemSerialList != null && PriceCombinItemSerialList.Count > 0) PriceCombinItemSerialList.RemoveAll(x => x.Tus_itm_cd == _item && x.Tus_itm_stus == _oldStatus);

                bool _isGiftVoucher = IsGiftVoucher(CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item).Mi_itm_tp);

                if (!_isGiftVoucher)
                    DisplayAvailableQty(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, _status);
                else
                    LoadGiftVoucherBalance(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, out _giftVoucher);

                if (_isGiftVoucher)
                {
                    List<ReptPickSerials> _lst = new List<ReptPickSerials>();
                    _promotionSerial = new List<ReptPickSerials>();
                    _promotionSerialTemp = new List<ReptPickSerials>();
                    if (_giftVoucher != null)
                        if (_giftVoucher.Count > 0)
                            _lst.AddRange(_giftVoucher);
                    _promotionSerial = _lst;
                    gvPopComItemSerial.DataSource = new List<ReptPickSerials>();
                    gvPopComItemSerial.DataSource = _lst;
                    txtPriNProSerialSearch.Text = ".";
                    txtPriNProSerialSearch.Text = string.Empty;
                }
                else if (_priceBookLevelRef.Sapl_is_serialized)
                {
                    if (_haveSerial == false && chkDeliverLater == false && chkDeliverNow == false)
                        LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, 7);
                    else if (_haveSerial == true && !string.IsNullOrEmpty(_similerItem) && chkDeliverLater == false)
                        LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, 7);
                    else if (_haveSerial == true && chkDeliverLater == false && chkDeliverNow == false)
                    {
                        List<InventorySerialRefN> _ref = CHNLSVC.Inventory.GetItemDetailBySerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _serial);
                        if (_ref != null)
                            if (_ref.Count > 0)
                            {
                                var _available = _ref.Where(x => x.Ins_itm_cd == _item).ToList();
                                if (_available == null || _available.Count <= 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Selected item does not available in the current inventory", "No Stock", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                    }
                }


                else if (chkDeliverLater == false && chkDeliverNow == false)
                {
                    LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, 7);
                }
                else
                {
                    var _list = new BindingList<ReptPickSerials>(new List<ReptPickSerials>());
                    gvPromotionSerial.DataSource = _list;
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void DisplayAvailableQty(string _item, Label _withStatus, Label _withoutStatus, string _status)
        {
            List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item.Trim(), string.Empty);
            if (_inventoryLocation != null)
                if (_inventoryLocation.Count > 0)
                {
                    var _woStatus = _inventoryLocation.Select(x => x.Inl_free_qty).Sum();
                    var _wStatus = _inventoryLocation.Where(x => x.Inl_itm_stus == _status).Select(x => x.Inl_free_qty).Sum();
                    _withStatus.Text = FormatToQty(Convert.ToString(_wStatus));
                    _withoutStatus.Text = FormatToQty(Convert.ToString(_woStatus));
                }
                else { _withStatus.Text = FormatToQty("0"); _withoutStatus.Text = FormatToQty("0"); }
            else { _withoutStatus.Text = FormatToQty("0"); _withStatus.Text = FormatToQty("0"); }
        }
        private void LoadGiftVoucherBalance(string _item, Label _withStatus, Label _withoutStatus, out List<ReptPickSerials> GiftVoucher)
        {
            List<ReptPickSerials> _gifVoucher = CHNLSVC.Inventory.GetAvailableGiftVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item);
            if (_gifVoucher == null || _gifVoucher.Count <= 0)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("There is no gift vouchers available.", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                _withStatus.Text = string.Empty;
                _withoutStatus.Text = string.Empty;
                GiftVoucher = _gifVoucher;
                return;
            }
            int _count = _gifVoucher.AsEnumerable().Count();
            _withStatus.Text = FormatToQty(Convert.ToString(_count));
            _withoutStatus.Text = FormatToQty(Convert.ToString(_count));
            var _list = _gifVoucher.AsEnumerable().Where(x => x.Tus_itm_cd == _item).ToList();
            GiftVoucher = _list;
        }

        private void gvPromotionItem_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                ComboBox cb = e.Control as ComboBox;
                if (cb != null)
                {
                    cb.SelectedIndexChanged -= new
                    EventHandler(gvPromotionItem_PromItm_Status_LoadInventoryBalance);

                    cb.SelectedIndexChanged += new
                    EventHandler(gvPromotionItem_PromItm_Status_LoadInventoryBalance);
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        protected void CheckDiscountAmount(object sender, EventArgs e)
        {
            //if (chkPickGV.Checked) return;
            if (_IsVirtualItem)
            {
                txtDisRate.Clear();
                txtDisAmt.Clear();
                txtDisAmt.Text = FormatToCurrency("0");
                txtDisRate.Text = FormatToCurrency("0");
                return;
            }
            try
            {
                if (string.IsNullOrEmpty(txtDisAmt.Text)) return;
                this.Cursor = Cursors.WaitCursor;
                if (Convert.ToDecimal(txtDisAmt.Text) < 0)
                {
                    //MessageBox.Show("Discount amount should be positive value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //txtDisAmt.Clear();
                    //txtDisAmt.Text = FormatToQty("0");
                    //return;
                }
                CheckNewDiscountAmount();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }
        private bool CheckNewDiscountAmount()
        {
            if (string.IsNullOrEmpty(txtItem.Text)) return false;
            if (IsNumeric(txtQty.Text) == false)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return false;
            }
            if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return false;
            if (!string.IsNullOrEmpty(txtDisAmt.Text) && _isEditPrice == false && !string.IsNullOrEmpty(txtQty.Text))
            {
                decimal _disAmt = Convert.ToDecimal(txtDisAmt.Text);
                decimal _uRate = Convert.ToDecimal(txtUnitPrice.Text);
                decimal _qty = Convert.ToDecimal(txtQty.Text);
                decimal _totAmt = _uRate * _qty;
                decimal _percent = _totAmt != 0 ? (_disAmt / _totAmt) * 100 : 0;

                if (_disAmt > 0)
                {
                    if (GeneralDiscount != null)
                    {
                        decimal vals = GeneralDiscount.Sgdd_disc_val;
                        decimal rates = GeneralDiscount.Sgdd_disc_rt;

                        if (vals < _disAmt && rates == 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You can not discount price more than " + vals + ".", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtDisAmt.Text = FormatToCurrency("0");
                            txtDisRate.Text = FormatToCurrency("0");
                            _isEditDiscount = false;
                            return false;
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = "0";
                            CalculateItem();
                            if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) _percent = _totAmt != 0 ? (_disAmt / Convert.ToDecimal(txtLineTotAmt.Text)) * 100 : 0;
                            if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = FormatToCurrency(Convert.ToString(_percent));
                            CalculateItem();
                            CheckNewDiscountRate();
                            _isEditDiscount = true;
                        }
                    }
                    else
                    {
                        if (GeneralDiscount == null) GeneralDiscount = new CashGeneralEntiryDiscountDef();
                        bool _IsPromoVou = false;
                        if (string.IsNullOrEmpty(lblPromoVouNo))
                        {
                            GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(dtpRecDate.Value).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtCusCode.Text.Trim(), txtItem.Text.Trim(), _priceBookLevelRef.Sapl_is_serialized ? true : false, false);
                        }
                        else
                        {
                            GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtItem.Text.Trim(), lblPromoVouNo.Trim());
                            if (GeneralDiscount != null)
                            {
                                _IsPromoVou = true;
                                GeneralDiscount.Sgdd_seq = Convert.ToInt32(lblPromoVouNo);
                            }
                        }

                        if (GeneralDiscount != null)
                        {
                            decimal vals = GeneralDiscount.Sgdd_disc_val;
                            decimal rates = GeneralDiscount.Sgdd_disc_rt;

                            if (_IsPromoVou == true)
                            {
                                if (vals < _disAmt && rates == 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discuount amount should be " + vals + "!./nNot allowed discount amount " + _disAmt + " discounted price is " + txtLineTotAmt.Text, "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisAmt.Text = FormatToCurrency("0");
                                    txtDisRate.Text = FormatToCurrency("0");
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }

                            if (vals < _disAmt && rates == 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You can not discount price more than " + vals + ".", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                txtDisAmt.Text = FormatToCurrency("0");
                                txtDisRate.Text = FormatToCurrency("0");
                                _isEditDiscount = false;
                                return false;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = "0";
                                CalculateItem();
                                if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) _percent = _totAmt != 0 ? (_disAmt / _totAmt) * 100 : 0;
                                if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = FormatToCurrency(Convert.ToString(_percent));
                                CalculateItem();
                                CheckNewDiscountRate();
                                _isEditDiscount = true;
                            }
                        }
                        else
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow for discount", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtDisAmt.Text = FormatToCurrency("0");
                            txtDisRate.Text = FormatToCurrency("0");
                            _isEditDiscount = false;
                            return false;
                        }
                    }
                }
                else
                    _isEditDiscount = false;
            }
            else if (_isEditPrice)
            {
                txtDisAmt.Text = FormatToCurrency("0");
                txtDisRate.Text = FormatToCurrency("0");
            }

            if (string.IsNullOrEmpty(txtDisAmt.Text)) txtDisAmt.Text = FormatToCurrency("0");
            decimal val = Convert.ToDecimal(txtDisAmt.Text);
            txtDisAmt.Text = FormatToCurrency(Convert.ToString(val));
            CalculateItem();
            return true;
        }
        protected bool CheckNewDiscountRate()
        {
            if (string.IsNullOrEmpty(txtItem.Text)) return false;
            if (IsNumeric(txtQty.Text) == false)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return false;
            }
            if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return false;

            if (!string.IsNullOrEmpty(txtDisRate.Text) && _isEditPrice == false)
            {
                decimal _disRate = Convert.ToDecimal(txtDisRate.Text);
                bool _IsPromoVou = false;
                if (_disRate > 0)
                {
                    if (GeneralDiscount == null) GeneralDiscount = new CashGeneralEntiryDiscountDef();
                    if (string.IsNullOrEmpty(lblPromoVouNo))
                    {
                        GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(dtpRecDate.Value).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtCusCode.Text.Trim(), txtItem.Text.Trim(), _priceBookLevelRef.Sapl_is_serialized ? true : false, false);
                    }
                    else
                    {
                        GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtItem.Text.Trim(), lblPromoVouNo.Trim());
                        if (GeneralDiscount != null)
                        {
                            _IsPromoVou = true;
                            GeneralDiscount.Sgdd_seq = Convert.ToInt32(lblPromoVouNo);
                        }
                    }
                    if (GeneralDiscount != null)
                    {
                        decimal vals = GeneralDiscount.Sgdd_disc_val;
                        decimal rates = GeneralDiscount.Sgdd_disc_rt;

                        if (lblPromoVouUsedFlag.Contains("U") == true)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Voucher already used!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtDisRate.Text = FormatToCurrency("0");
                            _isEditDiscount = false;
                            return false;
                        }

                        if (_IsPromoVou == true)
                        {
                            if (rates == 0 && vals > 0)
                            {
                                CalculateItem();
                                if (Convert.ToDecimal(txtDisAmt.Text) > vals)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discuount amount should be " + vals + ".\nNot allowed discount rate " + _disRate + "%", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisRate.Text = FormatToCurrency("0");
                                    CalculateItem();
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }
                            else
                            {
                                if (rates != _disRate)
                                {
                                    CalculateItem();
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discuount rate should be " + rates + "% !.\nNot allowed discount rate " + _disRate + "% discounted price is " + txtLineTotAmt.Text, "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisRate.Text = FormatToCurrency("0");
                                    CalculateItem();
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }
                        }
                        else
                        {
                            if (rates < _disRate)
                            {
                                CalculateItem();
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Exceeds maximum discount allowed " + rates + "% !.\n" + _disRate + "% discounted price is " + txtLineTotAmt.Text, "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                txtDisRate.Text = FormatToCurrency("0");
                                CalculateItem();
                                _isEditDiscount = false;
                                return false;
                            }
                            else
                            {
                                _isEditDiscount = true;
                            }
                        }
                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow for apply discount", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDisRate.Text = FormatToCurrency("0");
                        _isEditDiscount = false;
                        return false;
                    }

                    if (_isEditDiscount == true)
                    {
                        if (_IsPromoVou == true)
                        {
                            //lblPromoVouUsedFlag.Text = "U";
                            _proVouInvcItem = txtItem.Text.ToUpper().ToString();
                        }
                    }
                }
                else
                    _isEditDiscount = false;
            }
            else if (_isEditPrice)
            {
                txtDisRate.Text = FormatToCurrency("0");
            }
            if (string.IsNullOrEmpty(txtDisRate.Text)) txtDisRate.Text = FormatToCurrency("0");
            decimal val = Convert.ToDecimal(txtDisRate.Text);
            txtDisRate.Text = FormatToCurrency(Convert.ToString(val));
            CalculateItem();
            //btnConfirm.Focus();
            return true;
        }
        protected void CheckDiscountRate(object sender, EventArgs e)
        {
            //if (chkPickGV.Checked) return;
            if (_IsVirtualItem)
            {
                txtDisRate.Clear();
                txtDisAmt.Clear();
                txtDisAmt.Text = FormatToCurrency("0");
                txtDisRate.Text = FormatToCurrency("0");
                return;
            }
            try
            {
                if (Convert.ToDecimal(txtDisRate.Text.Trim()) < 0)
                {
                    //MessageBox.Show("Discount rate should be positive value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //txtDisRate.Clear();
                    //txtDisRate.Text = FormatToQty("0");
                    //return;
                }

                this.Cursor = Cursors.WaitCursor;
                if (string.IsNullOrEmpty(lblPromoVouNo))
                {
                    if (_isCompleteCode && _MasterProfitCenter.Mpc_edit_price && Convert.ToDecimal(txtDisRate.Text.Trim()) > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow discount for com codes!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDisRate.Clear();
                        txtDisRate.Text = FormatToQty("0");
                        return;
                    }
                }
                else
                {
                    if (Convert.ToDecimal(txtQty.Text) != 1)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher allow for only one(1) item!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDisRate.Clear();
                        txtDisRate.Text = FormatToQty("0");
                        return;
                    }
                }
                CheckNewDiscountRate();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPopComItem_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPopComItem.ColumnCount > 0)
                {
                    int _col = e.ColumnIndex;
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        string _item = gvPopComItem.Rows[_row].Cells["PopComItm_Item"].Value.ToString();
                        string _status = gvPopComItem.Text.Trim();
                        string _qty = gvPopComItem.Rows[_row].Cells["PopComItm_Qty"].Value.ToString();

                        if (chkDeliverLater == false)
                            LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), false, _col);
                        if (chkDeliverLater)
                            return;
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtPayment_TextChanged(object sender, EventArgs e)
        {

        }

        private Boolean GetItemDetails(string _itm)
        {
            Boolean _isvalid = true;
            try
            {
                if (!string.IsNullOrEmpty(_itm))
                {
                    MasterItem _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, _itm, 1);

                    if (_masterItemDetails.Mi_cd != null)
                    {
                        if (_masterItemDetails.Mi_hp_allow == true)
                        {
                            //  txtItmDesc.Text = _masterItemDetails.Mi_longdesc;
                            // txtModel.Text = _masterItemDetails.Mi_model;
                            MasterItemBrand _itemBrand = CHNLSVC.Sales.GetItemBrand(_masterItemDetails.Mi_brand);
                            //   txtBrand.Text = _itemBrand.Mb_desc;
                            txtQty.Text = "1";
                            // btnConfirm.Focus();
                        }
                        else
                        {
                            List<MasterItemComponent> _masterItemComponent = CHNLSVC.Inventory.GetItemComponents(txtItem.Text);
                            if (_masterItemComponent == null)
                            {
                                MessageBox.Show("Selected item " + txtItem.Text + " is not allow to HP.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtItem.Text = "";
                                //   txtItmDesc.Text = "";
                                //   txtModel.Text = "";
                                //  txtBrand.Text = "";
                                txtQty.Text = "";
                                txtItem.Focus();
                                _isvalid = false;
                                return _isvalid;
                            }
                            else
                            {
                                //   txtItmDesc.Text = _masterItemDetails.Mi_longdesc;
                                //   txtModel.Text = _masterItemDetails.Mi_model;
                                MasterItemBrand _itemBrand = CHNLSVC.Sales.GetItemBrand(_masterItemDetails.Mi_brand);
                                //   txtBrand.Text = _itemBrand.Mb_desc;
                                txtQty.Text = "1";
                                //btnConfirm.Focus();
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("Selected item is invalid.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtItem.Text = "";
                        //txtItmDesc.Text = "";
                        //txtModel.Text = "";
                        //txtBrand.Text = "";
                        //txtQty.Text = "";
                        txtItem.Focus();
                        _isvalid = false;
                        return _isvalid;
                    }
                }
                return _isvalid;
            }
            catch (Exception ex)
            {
                _isvalid = false;
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
                return _isvalid;
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void btnCloseSerialPnl_Click(object sender, EventArgs e)
        {
            pnlAdv.Visible = false;

            if ((txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString()) && (ucPayModes1.TotalAmount == 0))
            {
                txtPayment.Text = CalculateMiniPayableAmt().ToString();
            }
            //comented by akila 2016/12/28
            //_invoiceItemList = new List<InvoiceItem>();
            //gvInvoiceItem.DataSource = new List<InvoiceItem>();
            //gvInvoiceItem.DataSource = _invoiceItemList;
        }

        private void dgvItem_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }



        private void txtRecNo_TextChanged(object sender, EventArgs e)
        {

        }
        private void loadPrifixes()
        {
            MasterProfitCenter profCenter = CHNLSVC.Sales.GetProfitCenter(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
            string docTp = "";
            if (radioButtonManual.Checked)
            {
                //ISSys = false;
                docTp = "MDOC_AVREC";
            }
            else
            {
                //   ISSys = true;
                docTp = "SDOC_AVREC";
            }
            List<string> prifixes = new List<string>();
            try
            {
                prifixes = CHNLSVC.Sales.GetAll_prifixes(profCenter.Mpc_chnl, docTp, 1);
            }
            catch (Exception)
            {
                comboBoxPrefix.DataSource = null;
            }
            comboBoxPrefix.DataSource = prifixes;

        }
        private void btnAddItem_Click(object sender, EventArgs e)
        {
            //     if (chkQuotation.Checked) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow to add additional items for the selected quotation.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            try
            
            {
               
                if (txtRecType.Text.ToUpper() == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString())
                    {
                        if (string.IsNullOrEmpty(txtIntrCompany.Text))
                        {
                            MessageBox.Show("Please select a company", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }

                        if (string.IsNullOrEmpty(txtIntrLocation.Text))
                        {
                            MessageBox.Show("Please select a location", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                    }
                    //kapila 20/7/2017 
                    //comented on 8/8/2017
                    //if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.NOR.ToString())
                    //{
                    //    DataTable _dtFreeBal = CHNLSVC.Inventory.CHECKRESQTY(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text, cmbStatus.Text, BaseCls.GlbUserID, 1);
                    //    if(_dtFreeBal.Rows.Count>0)
                    //        if(Convert.ToDecimal(_dtFreeBal.Rows[0]["inl_free_qty"])==0)
                    //        {
                    //            MessageBox.Show("Free stock balance not available", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //            return;
                    //        }
                    //}

                }
                //add by tharanga 2018/01/27
                if (chkitmres.Checked==true)
                {
                    DataTable _dtFreeBal = CHNLSVC.Inventory.CHECKRESQTY(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text, cmbStatus.Text, BaseCls.GlbUserID, 1);
                    if (_dtFreeBal.Rows.Count > 0)
                    {
                        if (Convert.ToDecimal(_dtFreeBal.Rows[0]["inl_free_qty"]) == 0)
                        {
                            MessageBox.Show("Free stock balance not available", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Free stock balance not available", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }   
                }
               
                chkitmres.Enabled = false;
                _isInventoryCombineAdded = false;
                _isCombineAdding = false;
                InventoryCombinItemSerialList = null;
               // InventoryCombinItemSerialList = new List<ReptPickSerials>();
                //if (cmbInvType.Text == "HS" && _isCalProcess == false)
                //{
                //    MessageBox.Show("pls click on the process button.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                //    return;
                //}

                if (string.IsNullOrEmpty(TxtAdvItem.Text))
                {
                    MessageBox.Show("Please select an item", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                DataTable _alloc = CHNLSVC.Inventory.GetItemAllocationDet(TxtAdvItem.Text.Trim());
                if (_alloc.Rows.Count > 0)
                {
                    Decimal qtyalow = Convert.ToDecimal(txtQty.Text);
                    if (qtyalow > Convert.ToInt32(_alloc.Rows[0]["SSA_REC_FREE"].ToString()))
                    {
                        MessageBox.Show("You cannot raise advance for this item. Because Item has reached allocation qty.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
               

                if (string.IsNullOrEmpty(txtItem.Text)) return;
                if (string.IsNullOrEmpty(txtQty.Text)) return;

                #region Check Customer has promotion voucher avoid the discount :: Chamal 04/Jul/2014
                //By Akila This part not necessary for advance receipts. 2017-03-23

                //if (!string.IsNullOrEmpty(txtCusCode.Text))
                //{
                //    if (txtCusCode.Text != "CASH")
                //    {
                //        if ((string.IsNullOrEmpty(txtDisRate.Text) && string.IsNullOrEmpty(txtDisAmt.Text)))
                //        {
                //            CashGeneralEntiryDiscountDef _discVou = CHNLSVC.Sales.CheckCustHaveDiscountPromoVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text, dtpRecDate.Value.Date, cmbBook.Text, cmbLevel.Text, txtItem.Text, string.Empty, txtNIC.Text, txtMobile.Text);
                //            if (_discVou != null)
                //            {
                //                using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher discount available for this item", "Promotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //                return;
                //            }
                //        }
                //        else
                //        {
                //            if (Convert.ToDecimal(txtDisRate.Text) <= 0 && Convert.ToDecimal(txtDisAmt.Text) <= 0)
                //            {
                //                CashGeneralEntiryDiscountDef _discVou = CHNLSVC.Sales.CheckCustHaveDiscountPromoVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCusCode.Text, dtpRecDate.Value.Date, cmbBook.Text, cmbLevel.Text, txtItem.Text, string.Empty, txtNIC.Text, txtMobile.Text);
                //                if (_discVou != null)
                //                {
                //                    using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher discount available for this item", "Promotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //                    return;
                //                }
                //            }
                //        }
                //    }
                //}

                #endregion Check Customer has promotion voucher avoid the discount :: Chamal 04/Jul/2014

                if (!string.IsNullOrEmpty(SSPromotionCode))
                {
                    //check promotion qty anr return
                    List<PriceDetailRef> _promoList = CHNLSVC.Sales.GetPriceByPromoCD(SSPromotionCode);
                    if (_promoList == null && _promoList.Count <= 0)
                    {
                        return;
                    }
                    else
                    {
                        decimal qty = _promoList[0].Sapd_qty_to;
                        if (_invoiceItemList != null && _invoiceItemList.Count > 0)
                        {
                            List<InvoiceItem> _alredyAddList = (from _res in _invoiceItemList
                                                                where _res.Sad_itm_cd == txtItem.Text.Trim() && _res.Sad_itm_stus == cmbStatus.Text
                                                                select _res).ToList<InvoiceItem>();
                            if (_alredyAddList != null)
                            {
                                qty = qty + _alredyAddList.Count;
                            }
                            if (Convert.ToDecimal(txtQty.Text) > qty)
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty exceed promotion allow qty.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                        }
                        //free item check
                        //not define the process
                        //sachith 2014/01/29
                    }
                }

                List<MasterItemComponent> _com = CHNLSVC.Inventory.GetItemComponents(txtItem.Text.Trim());
                if (_com != null && _com.Count > 0)
                {
                    foreach (MasterItemComponent _itmCom in _com)
                    {
                        //REGISTRATION PROCESS
                        //ADDED 2013/12/10
                        //REGISTRATION PEOCESS CHECK
                        //ADDED 2013/12/06
                        //CHECK ITEM NEED REGISTRATION OR NOT
                        MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itmCom.ComponentItem.Mi_cd);
                        if (_isRegistrationMandatory)
                        {
                            if (_temItm.Mi_need_reg)
                            {
                                //_isNeedRegistrationReciept = true;
                                //  lnkProcessRegistration.Visible = true;
                            }
                        }
                    }
                }
                else
                {
                    MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                    if (_isRegistrationMandatory)
                    {
                        if (_temItm.Mi_need_reg)
                        {
                            //  _isNeedRegistrationReciept = true;
                            //  lnkProcessRegistration.Visible = true;
                        }
                    }
                }
                //END
                //END

                this.Cursor = Cursors.WaitCursor;

                bool _isAdded = false;
                AddItem(SSPromotionCode == "0" || string.IsNullOrEmpty(SSPromotionCode) ? false : true, string.Empty, ref _isAdded);
                if (_isAdded)
                {
                    if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                    {
                        if (_priceDetailRef[0].Sapd_customer_cd == txtCusCode.Text.Trim())
                        {
                            txtCusCode.ReadOnly = true;
                            //  btnSearch_Customer.Enabled = false;
                        }
                    }

                    if (cmbInvType.Text == "HS")
                    {
                        List<InvoiceItem> _tmpList = new List<InvoiceItem>();
                        if (gvInvoiceItem.Rows.Count > 0)
                        {
                            BindingSource _bind = (BindingSource)gvInvoiceItem.DataSource;                            
                            _tmpList = _bind.DataSource as List<InvoiceItem>;
                        }
                        HSSelectedtItem = null;
                        HSSelectedtItem = _tmpList.Where(x => x.Sad_itm_tp == "M" && x.Sad_unit_rt > 0).Select(x => x.Sad_itm_cd).First();
                        pnlItem.Enabled = false;
                        LoadScheme(HSSelectedtItem);
                    }

                    else
                    {
                        txtQty.Text = FormatToQty("1");
                        txtSerialNo.Text = "";
                        TxtAdvItem.Text = "";
                    }
                }

                ////commented by akila 2016/12/29
                //if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                //{
                //    if (_priceDetailRef[0].Sapd_customer_cd == txtCusCode.Text.Trim())
                //    {
                //        txtCusCode.ReadOnly = true;
                //        //  btnSearch_Customer.Enabled = false;
                //    }
                //}

                //if (cmbInvType.Text == "HS")
                //{
                //    pnlItem.Enabled = false;
                //    LoadScheme(TxtAdvItem.Text);
                //}

                //else
                //{
                //    txtQty.Text = FormatToQty("1");
                //    txtSerialNo.Text = "";
                //    TxtAdvItem.Text = "";
                //}

                //// AddItemDisableCustomer(true);
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally
            {
                this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels();
            }
        }


        private void AddItem(bool _isPromotion, string _originalItem, ref bool _isadded)
        {
            try
            {
                //Add by Akila 2016/12/28
                
                if (gvInvoiceItem.Rows.Count > 0)
                {
                    BindingSource _bind = (BindingSource)gvInvoiceItem.DataSource;
                    List<InvoiceItem> _tmpList = new List<InvoiceItem>();
                    _tmpList = _bind.DataSource as List<InvoiceItem>;
                    _invoiceItemList = _tmpList;

                    _lineNo = _invoiceItemList.Count;
                }
                else if (_invoiceItemList == null)
                {
                    _invoiceItemList = new List<InvoiceItem>();
                    _lineNo = 0;
                }
                else if (_invoiceItemList.Count == 0)
                {
                    _invoiceItemList = null;
                    _invoiceItemList = new List<InvoiceItem>();
                    _lineNo = 0;
                }
                else
                {
                    _lineNo = _invoiceItemList.Count;
                }

                //if (_invoiceItemList == null)
                //{
                //    _invoiceItemList = new List<InvoiceItem>();
                //}
                if (InvoiceSerialList == null)
                {
                    InvoiceSerialList = new List<InvoiceSerial>();
                }

                if (ScanSerialList == null)
                {
                    ScanSerialList = new List<ReptPickSerials>();
                }

                if (_invoiceItemList == null)
                {
                    if ((_invoiceItemList.Count > 0) && (!string.IsNullOrEmpty(txtSerialNo.Text)))
                    {
                        int _duplicateSerialCount = _invoiceItemList.Where(x => x.Sad_itm_cd == TxtAdvItem.Text && x.Sad_job_no == txtSerialNo.Text && x.Mi_is_ser1 == 1).Count();
                        if (_duplicateSerialCount > 0)
                        {
                            this.Cursor = Cursors.Default;
                            _isCheckedPriceCombine = false;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Serial duplicating for the following item(s) " + txtSerialNo.Text, "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                    }
                }

                

                #region Calculations
                //Comented by akila 2017/01/09
                //gvInvoiceItem.DataSource = new List<InvoiceItem>() ;

                if (!string.IsNullOrEmpty(SSPromotionCode) && SSPromotionCode != "N/A")
                    ucPayModes1.ISPromotion = true;

                this.Cursor = Cursors.WaitCursor;
                ReptPickSerials _serLst = null;
                List<ReptPickSerials> _nonserLst = null;
                MasterItem _itm = null;

                _priceBookLevelRefList = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, cmbBook.Text.Trim(), cmbLevel.Text.Trim());

                #region Gift Voucher Check

                //if ((chkPickGV.Checked || IsGiftVoucher(_itemdetail.Mi_itm_tp)) && _isCombineAdding == false)
                //{
                //    if (gvInvoiceItem.Rows.Count <= 0)
                //    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the selling item before add gift voucher.", "Need Selling Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                //    if (gvInvoiceItem.Rows.Count > 0)
                //    {
                //        var _noOfSets = _invoiceItemList.Select(x => x.Sad_job_line).Distinct().ToList();

                //        var _giftCount = _invoiceItemList.Where(x => IsGiftVoucher(x.Sad_itm_tp)).Sum(x => x.Sad_qty);
                //        var _nonGiftCount = _invoiceItemList.Sum(x => x.Sad_qty) - _giftCount;
                //        if (_nonGiftCount < _giftCount + 1)
                //        {
                //            this.Cursor = Cursors.Default;
                //            using (new CenterWinDialog(this)) { MessageBox.Show("You can not add more gift vouchers than selling qty", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //            return;
                //        }
                //    }

                //    DataTable _giftVoucher = CHNLSVC.Inventory.GetDetailByPageNItem(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToInt32(txtSerialNo.Text.Trim()), txtItem.Text.Trim());
                //    if (_giftVoucher != null)
                //        if (_giftVoucher.Rows.Count > 0)
                //        {
                //            _serial2 = Convert.ToString(_giftVoucher.Rows[0].Field<Int64>("gvp_book"));
                //            _prefix = Convert.ToString(_giftVoucher.Rows[0].Field<string>("gvp_gv_prefix"));
                //        }
                //}

                #endregion Gift Voucher Check

                #region Check for Payment

                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("You have already payment added!", "Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }

                #endregion Check for Payment

                #region Priority Base Validation

                if (_masterBusinessCompany == null)
                    //   { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer code", "No Customer", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    //if (_masterBusinessCompany.Mbe_cd != null && _masterBusinessCompany.Mbe_sub_tp == "C")                //    if ((Convert.ToDecimal(lblAvailableCredit.Text) - Convert.ToDecimal(txtLineTotAmt.Text) - Convert.ToDecimal(lblGrndTotalAmount.Text) < 0) && txtCusCode.Text != "CASH")                //    {                //        this.Cursor = Cursors.Default;                //        using (new CenterWinDialog(this)) { MessageBox.Show("Please check the customer's account balance", "Account Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }                //        return;                //    }
                    if (string.IsNullOrEmpty(cmbBook.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price book", "Price Book", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbBook.Focus(); return; }
                if (string.IsNullOrEmpty(cmbLevel.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbLevel.Focus(); return; }
                if (string.IsNullOrEmpty(cmbStatus.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item status", "Item Status", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbStatus.Focus(); return; }
                if (string.IsNullOrEmpty(cmbInvType.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbInvType.Focus(); return; }
                if (string.IsNullOrEmpty(txtCusCode.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCusCode.Focus(); return; }
                if (string.IsNullOrEmpty(txtItem.Text)) { if (chkDeliverLater == false && chkDeliverNow == false) { if (string.IsNullOrEmpty(txtSerialNo.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial", "Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtSerialNo.Focus(); return; } else { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Focus(); return; } } else { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Focus(); return; } }
                if (string.IsNullOrEmpty(txtQty.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtQty.Focus(); return; }
                else if (IsNumeric(txtQty.Text) == false) { MessageBox.Show("Please select valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                else if (Convert.ToDecimal(txtQty.Text.Trim()) <= 0) { MessageBox.Show("Please select the valid qty amount.", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                if (string.IsNullOrEmpty(txtUnitPrice.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the unit price", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtUnitPrice.Focus(); return; }
                if (string.IsNullOrEmpty(txtDisRate.Text))
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the discount %", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtDisRate.Focus(); return; }
                if (string.IsNullOrEmpty(txtDisAmt.Text))
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the discount amount", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtDisAmt.Focus(); return; }
                if (string.IsNullOrEmpty(txtTaxAmt.Text))
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the VAT amount", "Tax Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtTaxAmt.Focus(); return; }
                #endregion Priority Base Validation

                #region Virtual Item

                if (_IsVirtualItem && _isCompleteCode == false)
                {
                    bool _isDuplicateItem0 = false;
                    Int32 _duplicateComLine0 = 0;
                    Int32 _duplicateItmLine0 = 0;
                    WarrantyPeriod = 0;
                    CalculateItem();

                    #region Adding Invoice Item

                    //Adding Items to grid goes here ----------------------------------------------------------------------
                    if (_invoiceItemList == null || _invoiceItemList.Count <= 0)
                    //No Records
                    {
                        _isDuplicateItem0 = false;
                        _lineNo += 1;
                        if (!_isCombineAdding) SSCombineLine += 1;//_lineNo;
                        _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itemdetail, _originalItem));
                    }
                    else
                    //Having some records
                    {
                        var _duplicateItem = from _list in _invoiceItemList
                                             where _list.Sad_itm_cd == txtItem.Text && _list.Sad_itm_stus == cmbStatus.Text && _list.Sad_pbook == cmbBook.Text && _list.Sad_pb_lvl == cmbLevel.Text && _list.Sad_unit_rt == Convert.ToDecimal(txtUnitPrice.Text) && _list.Sad_disc_rt == Convert.ToDecimal(txtDisRate.Text.Trim())
                                             select _list;

                        if (_duplicateItem.Count() > 0)
                        //Similar item available
                        {
                            _isDuplicateItem0 = true;
                            foreach (var _similerList in _duplicateItem)
                            {
                                _duplicateComLine0 = _similerList.Sad_job_line;
                                _duplicateItmLine0 = _similerList.Sad_itm_line;
                                _similerList.Sad_disc_amt = Convert.ToDecimal(_similerList.Sad_disc_amt) + Convert.ToDecimal(txtDisAmt.Text);
                                _similerList.Sad_itm_tax_amt = Convert.ToDecimal(_similerList.Sad_itm_tax_amt) + Convert.ToDecimal(txtTaxAmt.Text);
                                _similerList.Sad_qty = Convert.ToDecimal(_similerList.Sad_qty) + Convert.ToDecimal(txtQty.Text);
                                _similerList.Sad_tot_amt = Convert.ToDecimal(_similerList.Sad_tot_amt) + Convert.ToDecimal(txtLineTotAmt.Text);
                            }
                        }
                        else
                        //No similar item found
                        {
                            _isDuplicateItem0 = false;
                            _lineNo += 1;
                            if (!_isCombineAdding) SSCombineLine += 1;//_lineNo;
                            _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itemdetail, _originalItem));
                        }
                    }
                    //Adding Items to grid end here ----------------------------------------------------------------------

                    #endregion Adding Invoice Item

                    CalculateGrandTotal(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text), Convert.ToDecimal(txtTaxAmt.Text), true);
                    _itemdetail = new MasterItem();
                    txtSerialNo.Text = "";
                    ClearAfterAddItem();
                    SSPriceBookSequance = "0";
                    SSPriceBookItemSequance = "0";
                    SSPriceBookPrice = 0;
                    if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                    SSPRomotionType = 0;

                    //commented by akila 2017/01/10
                    //txtItem.Focus();
                    //BindAddItem();
                    //SetDecimalTextBoxForZero(true);
                    //decimal _tobepays0 = 0;
                    //if (lblSVatStatus.Text == "Available")
                    //    _tobepays0 = FigureRoundUp(Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()), true);
                    //else
                    //    _tobepays0 = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                    //ucPayModes1.TotalAmount = _tobepays0;
                    //ucPayModes1.InvoiceItemList = _invoiceItemList;
                    //ucPayModes1.SerialList = InvoiceSerialList;
                    //ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays0));
                    //if (_loyaltyType != null)
                    //{
                    //    ucPayModes1.LoyaltyCard = _loyaltyType.Salt_loty_tp;
                    //}
                    //if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                    //    ucPayModes1.LoadData();
                    ////LookingForBuyBack();
                    //this.Cursor = Cursors.Default;
                    //if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater == false && chkDeliverNow == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } }

                    return;
                }

                _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());

                //if (!chkDeliverLater && !chkDeliverNow)
                //{
                //    List<ReptPickSerials> _temp = CHNLSVC.Inventory.Search_by_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, txtSerialNo.Text.Trim(), string.Empty);
                //    if (!string.IsNullOrEmpty(Convert.ToString(cmbLevel.Text)) && !string.IsNullOrEmpty(Convert.ToString(cmbBook.Text)))
                //    {
                //        bool _isAgeLevel = false;
                //        int _noofday = 0;
                //        CheckNValidateAgeItem(_itm.Mi_cd, string.Empty, cmbBook.Text, cmbLevel.Text, cmbStatus.Text, out _isAgeLevel, out _noofday);
                //        if (_isAgeLevel)
                //            _temp = GetAgeItemList(Convert.ToDateTime(dtpRecDate..Value.Date).Date, _isAgeLevel, _noofday, _temp);
                //        if (_temp == null || _temp.Count <= 0)
                //        {
                //            this.Cursor = Cursors.Default;
                //            using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //            txtSerialNo.Clear();
                //            txtItem.Clear();
                //            txtSerialNo.Focus();
                //            return;
                //        }
                //    }
                //}
                // CheckSerialAvailability(null, null);
                if (string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    if (!string.IsNullOrEmpty(txtItem.Text.Trim()))
                    {
                        //Edt0001
                        if (_itm.Mi_is_ser1 == 1 && (chkDeliverLater == false && chkDeliverNow == false && _priceBookLevelRef.Sapl_is_serialized))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtSerialNo.Focus();
                            return;
                        }
                    }
                }

                #region sachith check item balance

                if (chkDeliverNow && _itm.Mi_itm_tp == "M")
                {
                    List<ReptPickSerials> serial_list = new List<ReptPickSerials>();
                    if (_itm.Mi_is_ser1 == 0)
                        serial_list = CHNLSVC.Inventory.Search_serials_for_itemCD(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, string.Empty).ToList();//.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();
                    else if (_itm.Mi_is_ser1 == 1) //serial
                        serial_list = CHNLSVC.Inventory.Search_serials_for_itemCD(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, string.Empty).ToList();//.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();
                    else if (_itm.Mi_is_ser1 == -1)
                        serial_list = CHNLSVC.Inventory.Search_serials_for_itemCD(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, string.Empty).ToList();//.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();

                    if (IsPriceLevelAllowDoAnyStatus)
                    {
                        serial_list = serial_list.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();
                    }

                    if (Convert.ToDecimal(txtQty.Text) > serial_list.Count)
                    {
                        if (MessageBox.Show("Inventory has only " + serial_list.Count + " items\n Do you want to proceed?", "Serial Qty", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.No)
                            return;
                        else
                        {
                        }
                    }
                }

                #endregion sachith check item balance

                #endregion Virtual Item

                #region Price Combine Checking Process - Costing Dept.

                if (_isCheckedPriceCombine == false)
                    if (_MainPriceCombinItem != null)
                        if (_MainPriceCombinItem.Count > 0)
                        {
                            string _serialiNotpick = string.Empty;
                            string _serialDuplicate = string.Empty;
                            string _taxNotdefine = string.Empty;
                            string _noInventoryBalance = string.Empty;
                            string _noWarrantySetup = string.Empty;
                            string _mItem = txtItem.Text.Trim();
                            if (CheckBlockItem(_mItem, SSPRomotionType, _isCombineAdding)) { _isCheckedPriceCombine = false; return; }
                            var _dupsMain = ScanSerialList.Where(x => x.Tus_itm_cd == _mItem && x.Tus_ser_1 == ScanSerialNo);
                            if (_dupsMain != null) if (_dupsMain.Count() > 0) { this.Cursor = Cursors.Default; _isCheckedPriceCombine = false; using (new CenterWinDialog(this)) { MessageBox.Show(_mItem + " serial " + ScanSerialNo + " is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                            foreach (PriceCombinedItemRef _ref in _MainPriceCombinItem)
                            {
                                string _item = _ref.Sapc_itm_cd;
                                string _originalItm = _ref.Sapc_itm_cd;
                                decimal _qty = _ref.Sapc_qty;
                                string _status = _ref.Status;
                                string _similerItem = Convert.ToString(_ref.Similer_item);
                                if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                if (CheckBlockItem(_item, SSPRomotionType, _isCombineAdding)) { _isCheckedPriceCombine = false; break; }

                                //List<MasterItemTax> _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, string.Empty);
                                //updated by akila 2017/08/16
                                List<MasterItemTax> _taxs = new List<MasterItemTax>();
                                if (_isStrucBaseTax == true)
                                {
                                    MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                    _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _status, "VAT", string.Empty, _mstItem.Mi_anal1);
                                }
                                else
                                {
                                    _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, string.Empty);
                                }

                                if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                                { if (string.IsNullOrEmpty(_taxNotdefine)) _taxNotdefine = _item; else _taxNotdefine += "," + _item; }
                                if (CheckItemWarranty(_item, _status))
                                { if (string.IsNullOrEmpty(_noWarrantySetup)) _noWarrantySetup = _item; else _noWarrantySetup += "," + _item; }
                                MasterItem _itmS = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);

                                if ((chkDeliverLater == false && chkDeliverNow == false && _isCheckedPriceCombine == false) || IsGiftVoucher(_itmS.Mi_itm_tp))
                                {
                                    _isCheckedPriceCombine = true;
                                    if (_itmS.Mi_is_ser1 == 1)
                                    {
                                        var _exist = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item);
                                        if (_qty > _exist.Count())
                                        { if (string.IsNullOrEmpty(_serialiNotpick)) _serialiNotpick = _item; else _serialiNotpick += "," + _item; }
                                        foreach (ReptPickSerials _p in _exist)
                                        {
                                            string _serial = _p.Tus_ser_1;
                                            var _dup = ScanSerialList.Where(x => x.Tus_ser_1 == _serial);
                                            if (_dup != null)
                                                if (_dup.Count() > 0)
                                                { if (string.IsNullOrEmpty(_serialDuplicate)) _serialDuplicate = _item + "/" + _serial; else _serialDuplicate = "," + _item + "/" + _serial; }
                                        }
                                    }
                                    if (!IsGiftVoucher(_itmS.Mi_itm_tp))
                                    {
                                        decimal _pickQty = 0;
                                        if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum(); else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == _status).ToList().Select(x => x.Sad_qty).Sum();
                                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                        List<InventoryLocation> _inventoryLocation = null;
                                        if (IsPriceLevelAllowDoAnyStatus) _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty); else _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status);
                                        if (_inventoryLocation != null)
                                            if (_inventoryLocation.Count > 0)
                                            {
                                                decimal _invBal = _inventoryLocation[0].Inl_qty;
                                                if (_pickQty > _invBal)
                                                { if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item; else _noInventoryBalance = "," + _item; }
                                            }
                                            else
                                            { if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item; else _noInventoryBalance = "," + _item; }
                                        else
                                        { if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item; else _noInventoryBalance = "," + _item; }
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(_taxNotdefine))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_taxNotdefine + " does not have setup tax definition for the selected status. Please contact Inventory dept.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                            if (!string.IsNullOrEmpty(_serialiNotpick))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Item Qty and picked serial mismatch for the following item(s) " + _serialiNotpick, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                            if (!string.IsNullOrEmpty(_serialDuplicate))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Serial duplicating for the following item(s) " + _serialDuplicate, "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                            if (!string.IsNullOrEmpty(_noInventoryBalance) && !IsGiftVoucher(_itm.Mi_itm_tp))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_noInventoryBalance + " item(s) does not having inventory balance for release.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                            if (!string.IsNullOrEmpty(_noWarrantySetup))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_noWarrantySetup + " item(s)'s warranty not define.", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                            _isFirstPriceComItem = true;
                            _isCheckedPriceCombine = true;
                        }
                if (_isCompleteCode && _isInventoryCombineAdded == false) BindItemComponent(txtItem.Text);
                if (_masterItemComponent != null && _masterItemComponent.Count > 0 && _isInventoryCombineAdded == false)
                {
                    string _combineStatus = string.Empty;
                    decimal _discountRate = -1;
                    decimal _combineQty = 0;
                    string _mainItem = string.Empty;
                    _combineCounter = 0;
                    _isInventoryCombineAdded = true; _isCombineAdding = true;
                    if (string.IsNullOrEmpty(_combineStatus)) _combineStatus = cmbStatus.Text;
                    if (_combineQty == 0) _combineQty = Convert.ToDecimal(txtQty.Text);
                    if (_discountRate == -1) _discountRate = Convert.ToDecimal(txtDisRate.Text);
                    List<MasterItemComponent> _comItem = new List<MasterItemComponent>();
                    var _item_ = (from _n in _masterItemComponent where _n.Micp_itm_tp == "M" select _n.ComponentItem.Mi_cd).ToList();
                    if (!string.IsNullOrEmpty(_item_[0]))
                    {
                        string _mItem = Convert.ToString(_item_[0]);
                        _mainItem = Convert.ToString(_item_[0]);
                        _priceDetailRef = new List<PriceDetailRef>();
                        _priceDetailRef = CHNLSVC.Sales.GetPrice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCusCode.Text, _mItem, _combineQty, Convert.ToDateTime(dtpRecDate.Value.Date));
                        _priceDetailRef = _priceDetailRef.Where(X => X.Sapd_price_type == 0).ToList();
                        if (CheckItemWarranty(_mItem, cmbStatus.Text.Trim()))
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_mItem + " item's warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); } _isInventoryCombineAdded = false; return; }

                        if (_priceDetailRef.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(_item_[0].ToString() + " does not having price. Please contact IT dept.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            _isInventoryCombineAdded = false;
                            return;
                        }
                        else
                        {
                            if (CheckBlockItem(_mItem, _priceDetailRef[0].Sapd_price_type, _isCombineAdding))
                            { _isInventoryCombineAdded = false; return; }
                            if (_priceDetailRef.Count == 1 && _priceDetailRef[0].Sapd_price_type != 0 && _priceDetailRef[0].Sapd_price_type != 4)
                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item_[0].ToString() + " price is available for only promotion. Complete code does not support for promotion", "Available Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } _isInventoryCombineAdded = false; return; }
                        }
                    }
                    foreach (MasterItemComponent _com in _masterItemComponent.Where(X => X.ComponentItem.Mi_cd != _item_[0]))
                    {
                        if (CheckItemWarranty(_com.ComponentItem.Mi_cd, cmbStatus.Text.Trim()))
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item's warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); } _isInventoryCombineAdded = false; return; }
                        if (CheckBlockItem(_com.ComponentItem.Mi_cd, _priceDetailRef[0].Sapd_price_type, _isCombineAdding))
                        { _isInventoryCombineAdded = false; return; }
                    }
                    bool _isMainSerialCheck = false;
                    if (ScanSerialList != null && chkDeliverLater == false && chkDeliverNow == false)
                    {
                        if (ScanSerialList.Count > 0)
                        {
                            if (_isMainSerialCheck == false)
                            {
                                var _dup = ScanSerialList.Where(x => x.Tus_itm_cd == _item_[0].ToString() && x.Tus_ser_1 == ScanSerialNo);
                                if (_dup != null)
                                    if (_dup.Count() > 0)
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item_[0].ToString() + " serial " + ScanSerialNo + " is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } _isInventoryCombineAdded = false; return; } _isMainSerialCheck = true;
                            }
                            foreach (MasterItemComponent _com in _masterItemComponent)
                            {
                                string _serial = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _com.ComponentItem.Mi_cd).Select(y => y.Tus_ser_1).ToString();
                                var _dup = ScanSerialList.Where(x => x.Tus_ser_1 == _serial && x.Tus_itm_cd == _com.ComponentItem.Mi_cd);
                                if (_dup != null)
                                    if (_dup.Count() > 0)
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Item " + _com.ComponentItem.Mi_cd + "," + _serial + " serial is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                        _isInventoryCombineAdded = false;
                                        return;
                                    }
                            }
                        }
                    }
                   // if (InventoryCombinItemSerialList.Count == 0)
                    if (InventoryCombinItemSerialList == null)
                    {
                        _isCombineAdding = true;
                        foreach (MasterItemComponent _com in _masterItemComponent)
                        {
                            List<MasterItemTax> _taxs = new List<MasterItemTax>();
                            if (_isStrucBaseTax == true)  
                            {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd);
                                _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd, _combineStatus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd, _combineStatus, string.Empty, string.Empty);

                            if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " does not have setup tax definition for the selected status. Please contact Inventory dept.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                _isInventoryCombineAdded = false;
                                return;
                            }


                            //Commented by akila 2017/01/09
                            //List<MasterItemTax> _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd, _combineStatus, string.Empty, string.Empty);
                            //if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                            //{
                            //    this.Cursor = Cursors.Default;
                            //    using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " does not have setup tax definition for the selected status. Please contact Inventory dept.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            //    _isInventoryCombineAdded = false;
                            //    return;
                            //}

                            if (chkDeliverLater == false && chkDeliverNow == false)
                            {
                                decimal _pickQty = 0;
                                if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _com.ComponentItem.Mi_cd).ToList().Select(x => x.Sad_qty).Sum();
                                else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _com.ComponentItem.Mi_cd && x.Mi_itm_stus == cmbStatus.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();
                                _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _com.ComponentItem.Mi_cd, cmbStatus.Text.Trim());
                                if (_inventoryLocation != null)
                                    if (_inventoryLocation.Count > 0)
                                    {
                                        decimal _invBal = _inventoryLocation[0].Inl_qty;
                                        if (_pickQty > _invBal)
                                        {
                                            this.Cursor = Cursors.Default;
                                            using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                            _isInventoryCombineAdded = false;
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty("0"), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        _isInventoryCombineAdded = false;
                                        return;
                                    }
                                else
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty("0"), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    _isInventoryCombineAdded = false;
                                    return;
                                }
                            }
                            _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd);
                            if (_itm != null)
                            {
                                if (_itm.Mi_is_ser1 == 1 && chkDeliverLater == false && chkDeliverNow == false)
                                {
                                    _comItem.Add(_com);
                                }
                            }
                        }

                        if (_comItem.Count > 1 && chkDeliverLater == false && chkDeliverNow == false)
                        {//hdnItemCode.value
                            ReptPickSerials _pick = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _mainItem.Trim(), txtSerialNo.Text.Trim());
                            if (_pick != null)
                                if (!string.IsNullOrEmpty(_pick.Tus_itm_cd))
                                {
                                    var _dup = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _pick.Tus_itm_cd && x.Tus_ser_1 == _pick.Tus_ser_1).ToList();
                                    if (_dup != null)
                                        if (_dup.Count <= 0)
                                            InventoryCombinItemSerialList.Add(_pick);
                                }
                            _comItem.ForEach(x => x.Micp_itm_cd = _combineStatus);
                            var _listComItem = (from _one in _comItem where _one.ComponentItem.Mi_itm_tp != "M" select new { Mi_cd = _one.ComponentItem.Mi_cd, Mi_longdesc = _one.ComponentItem.Mi_longdesc, Micp_itm_cd = _one.Micp_itm_cd, Micp_qty = _one.Micp_qty, Mi_itm_tp = _one.ComponentItem.Mi_itm_tp }).ToList();
                            gvPopComItem.DataSource = _listComItem;
                            pnlInventoryCombineSerialPick.Visible = true;
                            //  pnlMain.Enabled = false;
                            _isInventoryCombineAdded = false;
                            this.Cursor = Cursors.Default;
                            return;
                        }
                        else if (_comItem.Count == 1 && chkDeliverLater == false && chkDeliverNow == false)
                        {//hdnItemCode.Value
                            ReptPickSerials _pick = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _mainItem.Trim(), txtSerialNo.Text.Trim());
                            if (_pick != null)
                                if (!string.IsNullOrEmpty(_pick.Tus_itm_cd))
                                { var _dup = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _pick.Tus_itm_cd && x.Tus_ser_1 == _pick.Tus_ser_1).ToList(); if (_dup != null)                                        if (_dup.Count <= 0) InventoryCombinItemSerialList.Add(_pick); }
                        }
                    }
                    SSCombineLine += 1;
                    foreach (MasterItemComponent _com in _masterItemComponent.OrderByDescending(x => x.ComponentItem.Mi_itm_tp))
                    {
                        //If going to deliver now
                        if (chkDeliverLater == false && chkDeliverNow == false && InventoryCombinItemSerialList.Count > 0)
                        {
                            var _comItemSer = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _com.ComponentItem.Mi_cd).ToList();
                            if (_comItemSer != null)
                                if (_comItemSer.Count > 0)
                                {
                                    foreach (ReptPickSerials _serItm in _comItemSer)
                                    {
                                        txtSerialNo.Text = _serItm.Tus_ser_1; ScanSerialNo = txtSerialNo.Text;
                                        txtSerialNo.Text = ScanSerialNo; txtItem.Text = _com.ComponentItem.Mi_cd;
                                        cmbStatus.Text = _combineStatus; txtQty.Text = FormatToQty("1");
                                        CheckQty(false); txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate));
                                        txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
                                        txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, cmbStatus.Text, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                                        txtLineTotAmt.Text = FormatToCurrency("0"); CalculateItem();
                                        AddItem(false, string.Empty, ref _isadded); ScanSerialNo = string.Empty;
                                        txtSerialNo.Text = string.Empty; txtSerialNo.Text = string.Empty;
                                    }
                                    _combineCounter += 1;
                                }
                                else
                                {
                                    txtItem.Text = _com.ComponentItem.Mi_cd; cmbStatus.Text = _combineStatus;
                                    txtQty.Text = FormatToQty(Convert.ToString(_com.Micp_qty * _combineQty)); CheckQty(false);
                                    txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate)); txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
                                    txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, cmbStatus.Text, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                                    txtLineTotAmt.Text = FormatToCurrency("0"); CalculateItem();
                                    AddItem(false, string.Empty, ref _isadded); ScanSerialNo = string.Empty;
                                    txtSerialNo.Text = string.Empty; txtSerialNo.Text = string.Empty; _combineCounter += 1;
                                }
                        }
                        //If deliver later
                        else if ((chkDeliverLater || chkDeliverNow) && InventoryCombinItemSerialList == null)
                        {
                            txtItem.Text = _com.ComponentItem.Mi_cd; LoadItemDetail(txtItem.Text.Trim());
                            cmbStatus.Text = _combineStatus; txtQty.Text = FormatToQty(Convert.ToString(_com.Micp_qty * _combineQty));
                            CheckQty(false); txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate));
                            txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
                            txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, cmbStatus.Text, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                            txtLineTotAmt.Text = FormatToCurrency("0"); CalculateItem();
                            AddItem(false, string.Empty, ref _isadded); _combineCounter += 1;
                        }
                    }
                    if (_combineCounter == _masterItemComponent.Count)
                    {
                        _masterItemComponent = new List<MasterItemComponent>();
                        _isCompleteCode = false; _isInventoryCombineAdded = false;
                        _isCombineAdding = false; ScanSerialNo = string.Empty;
                        InventoryCombinItemSerialList = new List<ReptPickSerials>();
                        txtSerialNo.Text = string.Empty;
                        if (_isCombineAdding == false)
                        {
                            this.Cursor = Cursors.Default;

                            //commented by akila 2017/01/10
                            txtSerialNo.Text = "";
                            ClearAfterAddItem();
                            _combineCounter = 0;
                            SSPriceBookSequance = "0";
                            SSPriceBookItemSequance = "0";
                            SSPriceBookPrice = 0;
                            if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                            SSPRomotionType = 0;

                            //txtItem.Focus();
                            //BindAddItem();
                            //SetDecimalTextBoxForZero(true);

                            //decimal _tobepay = 0;
                            //if (lblSVatStatus.Text == "Available")
                            //    _tobepay = FigureRoundUp(Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()), true);
                            //else
                            //    _tobepay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());

                            //ucPayModes1.TotalAmount = _tobepay;
                            //ucPayModes1.InvoiceItemList = _invoiceItemList;
                            //ucPayModes1.SerialList = InvoiceSerialList;
                            //ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepay));
                            //if (_loyaltyType != null)
                            //{
                            //    ucPayModes1.LoyaltyCard = _loyaltyType.Salt_loty_tp;
                            //}
                            //if (ucPayModes1.HavePayModes)
                            //    ucPayModes1.LoadData();
                            //this.Cursor = Cursors.Default;

                            //if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            //{
                            //    if (chkDeliverLater == false && chkDeliverNow == false)
                            //    {
                            //        txtSerialNo.Focus();
                            //    }
                            //    else
                            //    {
                            //        txtItem.Focus();
                            //    }
                            //}
                            //else
                            //{
                            //    ucPayModes1.button1.Focus();
                            //}
                        } return;
                    }
                }
                bool _isAgePriceLevel = false;
                int _noofDays = 0;
                DateTime _serialpickingdate = dtpRecDate.Value.Date;
                CheckNValidateAgeItem(txtItem.Text.Trim(), _itm.Mi_cate_1, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), cmbStatus.Text, out _isAgePriceLevel, out _noofDays);
                if (_isAgePriceLevel) _serialpickingdate = _serialpickingdate.AddDays(-_noofDays);
                if (_priceBookLevelRef.Sapl_is_serialized)
                {
                    if (chkDeliverLater == false && chkDeliverNow == false || (_isRegistrationMandatory))
                    {
                        if (_itm.Mi_is_ser1 == 1)
                        {
                            if (string.IsNullOrEmpty(txtSerialNo.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtSerialNo.Focus(); return; }
                            _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
                            if (_serLst == null || string.IsNullOrEmpty(_serLst.Tus_com)) { this.Cursor = Cursors.Default; if (_isAgePriceLevel)                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item in a ageing price level.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        }
                        else if (_itm.Mi_is_ser1 == 0)
                        {
                            if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date); else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                            if (_nonserLst == null || _nonserLst.Count <= 0) { this.Cursor = Cursors.Default; if (_isAgePriceLevel)                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        }
                        else if (_itm.Mi_is_ser1 == -1)
                        {
                            //if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date); else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                            //if (_nonserLst == null || _nonserLst.Count <= 0) { this.Cursor = Cursors.Default; if (_isAgePriceLevel)                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        }
                    }
                    else
                    {
                        // if (_itm.Mi_is_ser1 == 1) _serLst = VirtualSerialLine(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), txtSerialNo.Text.Trim())[0]; else if (_itm.Mi_is_ser1 == 0) _nonserLst = VirtualSerialLine(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), string.Empty);
                    }
                }
                else if ((chkDeliverLater == false && chkDeliverNow == false) || IsGiftVoucher(_itm.Mi_itm_tp) || (_isRegistrationMandatory))
                {
                    if (_itm.Mi_is_ser1 == 1)
                    {
                        if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtSerialNo.Focus(); return; }
                        bool _isGiftVoucher = IsGiftVoucher(_itm.Mi_itm_tp);
                        if (!_isGiftVoucher) _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim()); else _serLst = CHNLSVC.Inventory.GetGiftVoucherDetail(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtItem.Text.Trim(), Convert.ToInt32(_serial2), Convert.ToInt32(txtSerialNo.Text.Trim()), _prefix);

                        if (_serLst != null && !string.IsNullOrEmpty(_serLst.Tus_com))
                        {
                            if (_serLst.Tus_doc_dt >= _serialpickingdate)
                            {
                                this.Cursor = Cursors.Default;
                                if (_isAgePriceLevel)
                                {
                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item in a ageing price level.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                            //else using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } return;
                        }
                    }
                    else if (_itm.Mi_is_ser1 == 0)
                    {
                        if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        if (_nonserLst == null || _nonserLst.Count <= 0)
                        { this.Cursor = Cursors.Default; if (_isAgePriceLevel) using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    }
                    else if (_itm.Mi_is_ser1 == -1)
                    {
                        //if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        //else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        //if (_nonserLst == null || _nonserLst.Count <= 0)
                        //{ this.Cursor = Cursors.Default; if (_isAgePriceLevel) using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    }
                }
                if ((SSPriceBookSequance == "0" || string.IsNullOrEmpty(SSPriceBookSequance)) && !IsGiftVoucher(_itm.Mi_itm_tp) && _MasterProfitCenter.Mpc_without_price == false && _priceBookLevelRef.Sapl_is_without_p == false)
                    if (!_isCombineAdding) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid price", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (string.IsNullOrEmpty(txtQty.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (Convert.ToDecimal(txtQty.Text) == 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (Convert.ToDecimal(txtQty.Text.Trim()) <= 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (string.IsNullOrEmpty(txtUnitPrice.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid unit price", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (!_isCombineAdding)
                {
                    List<MasterItemTax> _tax = new List<MasterItemTax>();
                    if (_isStrucBaseTax == true)       //kapila 3/8/2017
                    {
                        MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                        _tax = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), string.Empty, string.Empty, _mstItem.Mi_anal1);
                    }
                    else
                        
                        _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), string.Empty, string.Empty);
                    if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Tax rates not setup for selected item code and item status.Please contact Inventory Department.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        cmbStatus.Focus();
                        return;
                    }
                }
                if (Convert.ToDecimal(txtUnitPrice.Text.Trim()) == 0 && _isCombineAdding == false && !IsGiftVoucher(_itm.Mi_itm_tp) && (SSPriceBookSequance == "0" || string.IsNullOrEmpty(SSPriceBookSequance)))
                {
                    bool _isTerminate = CheckQty(false);
                    if (_isTerminate) { this.Cursor = Cursors.Default; return; }
                }
                if (CheckBlockItem(txtItem.Text.Trim(), SSPRomotionType, _isCombineAdding))
                    return;
                if (_isCombineAdding == false && _MasterProfitCenter.Mpc_without_price == false && _priceBookLevelRef.Sapl_is_without_p == false)
                {
                    PriceDetailRef _lsts = CHNLSVC.Sales.GetPriceDetailByItemLineSeq(txtItem.Text.Trim(), Convert.ToInt32(SSPriceBookItemSequance), Convert.ToInt32(SSPriceBookSequance));
                    if (_lsts != null && _isCombineAdding == false)
                    {
                        if (string.IsNullOrEmpty(_lsts.Sapd_itm_cd))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " does not available price. Please contact IT dept.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }
                        else
                        {
                            decimal _tax = 0;
                            if (MainTaxConstant != null && MainTaxConstant.Count > 0)
                            {
                                _tax = MainTaxConstant[0].Mict_tax_rate;
                            }

                            decimal sysUPrice = FigureRoundUp(_lsts.Sapd_itm_price * _tax, true);
                            decimal pickUPrice = Convert.ToDecimal(txtUnitPrice.Text);
                            if (_MasterProfitCenter != null && _priceBookLevelRef != null)
                                if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_com) && !string.IsNullOrEmpty(_priceBookLevelRef.Sapl_com_cd))

                                    if (!_MasterProfitCenter.Mpc_without_price && !_priceBookLevelRef.Sapl_is_without_p)
                                        if (!_MasterProfitCenter.Mpc_edit_price)
                                        {
                                            //comment by darshana 23-08-2013
                                            //re-open by chamal 18-Nov-2014
                                            if (Math.Round(_lsts.Sapd_itm_price, 0) != Math.Round(pickUPrice, 0))
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show("Price Book price and the unit price is different. Please check the price you selected!", "System Price With Edited Price", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            if (sysUPrice != pickUPrice)
                                                if (sysUPrice > pickUPrice)
                                                {
                                                    decimal sysEditRate = _MasterProfitCenter.Mpc_edit_rate;
                                                    decimal ddUprice = sysUPrice - ((sysUPrice * sysEditRate) / 100);
                                                    if (ddUprice > pickUPrice)
                                                    {
                                                        this.Cursor = Cursors.Default;
                                                        using (new CenterWinDialog(this)) { MessageBox.Show("Price Book price and the unit price is different. Please check the price you selected!", "System Price With Edited Price", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                                                        return;
                                                    }
                                                }
                                        }
                        }
                    }
                    else
                    {
                        if (_isCombineAdding == false && _priceBookLevelRef.Sapl_is_serialized == false && !IsGiftVoucher(_itm.Mi_itm_tp))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " does not available price. Please contact IT dept.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }
                    }
                }
                if (_isCombineAdding == false)
                    if (chkDeliverLater == false && chkDeliverNow == false || (_isRegistrationMandatory))
                    {
                        if (_itm.Mi_is_ser1 == 1)
                        {
                            var _dup = ScanSerialList.Where(x => x.Tus_itm_cd == txtItem.Text && x.Tus_ser_1 == ScanSerialNo).ToList();
                            if (_dup != null)
                                if (_dup.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show(ScanSerialNo + " serial is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtSerialNo.Focus();
                                    return;
                                }
                        }

                        if (!IsPriceLevelAllowDoAnyStatus)
                        {
                            if (_serLst != null)
                                if (string.IsNullOrEmpty(_serLst.Tus_com))
                                {
                                    if (_serLst.Tus_itm_stus != cmbStatus.Text.Trim())
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show(ScanSerialNo + " serial status is not match with the price level status", "Price Level Restriction", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        txtSerialNo.Focus();
                                        return;
                                    }
                                }
                        }
                    }

                #endregion Price Combine Checking Process - Costing Dept.

                CalculateItem();

                #region Check Inventory Balance if deliver now!

                if (_isCombineAdding == false)
                    if (chkDeliverLater == false && chkDeliverNow == false || (_isRegistrationMandatory))
                    {
                        decimal _pickQty = 0;
                        if (IsPriceLevelAllowDoAnyStatus)
                            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == txtItem.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();
                        else
                            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == txtItem.Text.Trim() && x.Mi_itm_stus == cmbStatus.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();

                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                        List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim());

                        if (_inventoryLocation != null)
                            if (_inventoryLocation.Count > 0)
                            {
                                decimal _invBal = _inventoryLocation[0].Inl_qty;
                                if (_pickQty > _invBal)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                        else
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }

                        if (_itm.Mi_is_ser1 == 1 && ScanSerialList.Count > 0)
                        {
                            var _serDup = (from _lst in ScanSerialList
                                           where _lst.Tus_ser_1 == txtSerialNo.Text.Trim() && _lst.Tus_itm_cd == txtItem.Text.Trim()
                                           select _lst).ToList();

                            if (_serDup != null)
                                if (_serDup.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Selected Serial is duplicating.", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                        }
                    }
                List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
                if (_lvl != null)
                    if (_lvl.Count > 0)
                    {
                        var _lst = (from _l in _lvl where _l.Sapl_itm_stuts == cmbStatus.Text.Trim() select _l).ToList();
                        if (_lst != null)
                            if (_lst.Count > 0)
                            {
                                DataTable _temWarr = CHNLSVC.Sales.GetPCWara(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value.Date).Date);

                                if (_lst[0].Sapl_set_warr == true)
                                {
                                    WarrantyPeriod = _lst[0].Sapl_warr_period;
                                }
                                else if (_temWarr != null && _temWarr.Rows.Count > 0)
                                {
                                    WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                    WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
                                }
                                else
                                {
                                    MasterItemWarrantyPeriod _period = CHNLSVC.Inventory.GetItemWarrantyDetail(txtItem.Text.Trim(), cmbStatus.Text.Trim());
                                    if (_period != null)
                                    {
                                        WarrantyPeriod = _period.Mwp_val;
                                        WarrantyRemarks = _period.Mwp_rmk;
                                    }
                                    else
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }
                                }
                            }
                    }
                bool _isDuplicateItem = false;
                Int32 _duplicateComLine = 0;
                Int32 _duplicateItmLine = 0;
                if (_invoiceItemList == null || _invoiceItemList.Count <= 0)
                {
                    _isDuplicateItem = false;
                    _lineNo += 1;
                    if (!_isCombineAdding) SSCombineLine += 1;
                    _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itm, _originalItem));
                }
                else
                {
                    //updated by akila 2017/01/17
                    var _duplicateItem = from _list in _invoiceItemList
                                         where _list.Sad_original_itemcd == txtItem.Text && _list.Sad_job_no == txtSerialNo.Text && _list.Sad_itm_stus == cmbStatus.Text && _list.Sad_pbook == cmbBook.Text && _list.Sad_pb_lvl == cmbLevel.Text && _list.Sad_unit_rt == Convert.ToDecimal(txtUnitPrice.Text) && _list.Sad_disc_rt == Convert.ToDecimal(txtDisRate.Text.Trim())
                                         select _list;

                    //var _duplicateItem = from _list in _invoiceItemList
                    //                     where _list.Sad_itm_cd == txtItem.Text && _list.Sad_itm_stus == cmbStatus.Text && _list.Sad_pbook == cmbBook.Text && _list.Sad_pb_lvl == cmbLevel.Text && _list.Sad_unit_rt == Convert.ToDecimal(txtUnitPrice.Text) && _list.Sad_disc_rt == Convert.ToDecimal(txtDisRate.Text.Trim())
                    //                     select _list;

                    if (_duplicateItem.Count() > 0)
                    {
                        _isDuplicateItem = true;
                        foreach (var _similerList in _duplicateItem)
                        {
                            _duplicateComLine = _similerList.Sad_job_line;
                            _duplicateItmLine = _similerList.Sad_itm_line;
                            _similerList.Sad_disc_amt = Convert.ToDecimal(_similerList.Sad_disc_amt) + Convert.ToDecimal(txtDisAmt.Text);
                            _similerList.Sad_itm_tax_amt = Convert.ToDecimal(_similerList.Sad_itm_tax_amt) + Convert.ToDecimal(txtTaxAmt.Text);
                            _similerList.Sad_qty = Convert.ToDecimal(_similerList.Sad_qty) + Convert.ToDecimal(txtQty.Text);
                            _similerList.Sad_unit_amt = Convert.ToDecimal(txtUnitPrice.Text) * _similerList.Sad_qty;
                            _similerList.Sad_tot_amt = Convert.ToDecimal(_similerList.Sad_tot_amt) + Convert.ToDecimal(txtLineTotAmt.Text);
                        }
                    }
                    else
                    {
                        _isDuplicateItem = false;
                        _lineNo += 1;
                        if (!_isCombineAdding) SSCombineLine += 1;
                        _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itm, _originalItem));
                    }
                }
                //Adding Items to grid end here ----------------------------------------------------------------------

                #endregion Check Inventory Balance if deliver now!

                #region Adding Serial/Non Serial items

                //Scan By Serial ----------start----------------------------------
                if ((chkDeliverLater == false && chkDeliverNow == false) || _priceBookLevelRef.Sapl_is_serialized || IsGiftVoucher(_itm.Mi_itm_tp) || _isRegistrationMandatory)
                {
                    if (_isFirstPriceComItem)
                        _isCombineAdding = true;
                    if (ScanSequanceNo == 0) ScanSequanceNo = -100;
                    if (_itm.Mi_is_ser1 == 1)
                    {
                        if (_serLst != null)    //kapila 20/7/2017
                        {
                            _serLst.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
                            _serLst.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine;
                            _serLst.Tus_usrseq_no = ScanSequanceNo;
                            _serLst.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                            _serLst.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty;
                            _serLst.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty;
                            _serLst.ItemType = _itm.Mi_itm_tp;
                            ScanSerialList.Add(_serLst);
                        }
                    }
                    if (_itm.Mi_is_ser1 == 0)
                    {
                        if (_nonserLst.Count < Convert.ToDecimal(txtQty.Text.Trim()))
                        {
                            if (_isAgePriceLevel == false)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_nonserLst.Count)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                                foreach (InvoiceItem _one in _partly)
                                    //DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                                    return;
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                if (gvInvoiceItem.Rows.Count > 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                                foreach (InvoiceItem _one in _partly)
                                    //   DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                                    return;
                            }
                        }
                        _nonserLst.ForEach(x => x.Tus_base_doc_no = Convert.ToString(ScanSequanceNo));
                        _nonserLst.ForEach(x => x.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine);
                        _nonserLst.ForEach(x => x.Tus_usrseq_no = ScanSequanceNo);
                        _nonserLst.ForEach(x => x.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim()));
                        _nonserLst.ForEach(x => x.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty);
                        _nonserLst.ForEach(x => x.Tus_ser_id = -1);
                        _nonserLst.ForEach(x => x.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty);
                        _nonserLst.ForEach(x => x.ItemType = _itm.Mi_itm_tp);
                        ScanSerialList.AddRange(_nonserLst);
                    }
                    if (_itm.Mi_is_ser1 == -1)
                    {
                        //if (_nonserLst.Count < Convert.ToDecimal(txtQty.Text.Trim()))
                        //{
                        //    if (_isAgePriceLevel == false)
                        //    {
                        //        this.Cursor = Cursors.Default;
                        //        using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_nonserLst.Count)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        //        var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                        //        foreach (InvoiceItem _one in _partly)
                        //            DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                        //        return;
                        //    }
                        //    else
                        //    {
                        //        this.Cursor = Cursors.Default;
                        //        if (gvInvoiceItem.Rows.Count > 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        //        var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                        //        foreach (InvoiceItem _one in _partly)
                        //            DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                        //        return;
                        //    }
                        //}
                        ReptPickSerials _chk = new ReptPickSerials();
                        _chk.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
                        _chk.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine;
                        _chk.Tus_usrseq_no = ScanSequanceNo;
                        _chk.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                        _chk.Tus_itm_cd = txtItem.Text.Trim();
                        _chk.Tus_itm_stus = cmbStatus.Text;
                        _chk.Tus_ser_id = 0;
                        _chk.Tus_qty = Convert.ToDecimal(txtQty.Text);
                        _chk.Tus_bin = BaseCls.GlbDefaultBin;
                        _chk.Tus_ser_1 = "N/A";
                        _chk.Tus_ser_2 = "N/A";
                        _chk.Tus_ser_3 = "N/A";
                        _chk.Tus_ser_4 = "N/A";
                        _chk.Tus_ser_id = 0;
                        _chk.Tus_serial_id = "0";
                        _chk.Tus_com = BaseCls.GlbUserComCode;
                        _chk.Tus_loc = BaseCls.GlbUserDefLoca;
                        _chk.ItemType = _itm.Mi_itm_tp;
                        _chk.Tus_cre_by = BaseCls.GlbUserID;
                        _chk.Tus_cre_by = BaseCls.GlbUserID;
                        _chk.Tus_itm_desc = _itm.Mi_shortdesc;
                        _chk.Tus_itm_model = _itm.Mi_model;
                        _chk.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                        ScanSerialList.Add(_chk);

                        //_nonserLst.ForEach(x => x.Tus_base_doc_no = Convert.ToString(ScanSequanceNo));
                        //_nonserLst.ForEach(x => x.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine);
                        //_nonserLst.ForEach(x => x.Tus_usrseq_no = ScanSequanceNo);
                        //_nonserLst.ForEach(x => x.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim()));
                        //_nonserLst.ForEach(x => x.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty);
                        //_nonserLst.ForEach(x => x.Tus_ser_id = -1);
                        //_nonserLst.ForEach(x => x.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty);
                        //_nonserLst.ForEach(x => x.ItemType = _itm.Mi_itm_tp);
                        //_nonserLst.ForEach(x=>x.Tus_ser_1 = "N/A");
                        //_nonserLst.ForEach(x=>x.Tus_ser_2 = "N/A");
                        //_nonserLst.ForEach(x=>x.Tus_ser_3 = "N/A");
                        //_nonserLst.ForEach(x=>x.Tus_ser_4 = "N/A");
                        //_nonserLst.ForEach(x=>x.Tus_ser_id = 0);
                        //_nonserLst.ForEach(x=>x.Tus_serial_id = "0");
                        // _nonserLst.ForEach(x=>x.Tus_unit_cost = 0);
                        // _nonserLst.ForEach(x=>x.Tus_unit_price = 0);

                        //ScanSerialList.AddRange(_nonserLst);
                    }

                    //gvPopSerial.DataSource = new List<ReptPickSerials>();
                    //gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
                    //var filenamesList = new BindingList<ReptPickSerials>(ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList());
                    //gvGiftVoucher.DataSource = filenamesList;

                    if (_isFirstPriceComItem)
                    {
                        _isCombineAdding = false;
                        _isFirstPriceComItem = false;
                    }

                    if (IsGiftVoucher(_itm.Mi_itm_tp)) _isCombineAdding = true;
                }

                #endregion Adding Serial/Non Serial items

                bool _isDuplicate = false;
                if (InvoiceSerialList != null)
                    if (InvoiceSerialList.Count > 0)
                    { if (_itm.Mi_is_ser1 == 1) { var _dup = (from _i in InvoiceSerialList where _i.Sap_ser_1 == txtSerialNo.Text.Trim() && _i.Sap_itm_cd == txtItem.Text.Trim() select _i).ToList(); if (_dup != null)                                if (_dup.Count > 0)                                    _isDuplicate = true; } }
                if (_isDuplicate == false)
                {
                    InvoiceSerial _invser = new InvoiceSerial(); _invser.Sap_del_loc = BaseCls.GlbUserDefLoca;
                    _invser.Sap_itm_cd = txtItem.Text.Trim(); _invser.Sap_itm_line = _lineNo;
                    _invser.Sap_remarks = string.Empty; _invser.Sap_seq_no = Convert.ToInt32(SSPriceBookSequance);
                    _invser.Sap_ser_1 = txtSerialNo.Text; _invser.Sap_ser_line = _isCombineAdding ? Convert.ToInt32(SSCombineLine) : 0;
                    InvoiceSerialList.Add(_invser);
                }
                CalculateGrandTotal(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text), Convert.ToDecimal(txtTaxAmt.Text), true);
                if (_MainPriceCombinItem != null)
                {
                    string _combineStatus = string.Empty;
                    decimal _combineQty = 0;
                    bool _isSingleItemSerializedInCombine = true;
                    if (_MainPriceCombinItem.Count > 0 && _isCombineAdding == false)
                    {
                        _isCombineAdding = true;
                        if (string.IsNullOrEmpty(_combineStatus)) _combineStatus = cmbStatus.Text;
                        if (_combineQty == 0) _combineQty = Convert.ToDecimal(txtQty.Text);
                        if (chkDeliverLater == true || chkDeliverNow == true)
                        {
                            foreach (PriceCombinedItemRef _list in _MainPriceCombinItem)
                            {
                                string _originalItm = _list.Sapc_itm_cd; string _similerItem = _list.Similer_item;
                                _combineStatus = _list.Status; if (!string.IsNullOrEmpty(_similerItem)) txtItem.Text = _similerItem; else txtItem.Text = _list.Sapc_itm_cd;
                                if (_priceBookLevelRef.Sapl_is_serialized) txtSerialNo.Text = _list.Sapc_sub_ser;
                                LoadItemDetail(txtItem.Text.Trim());
                                if (IsGiftVoucher(_itemdetail.Mi_itm_tp))
                                {
                                    foreach (ReptPickSerials _lists in PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == txtItem.Text.Trim()).ToList())
                                    {
                                        txtSerialNo.Text = _lists.Tus_ser_1;
                                        ScanSerialNo = _lists.Tus_ser_1;
                                        string _originalItms = _lists.Tus_session_id;
                                        if (string.IsNullOrEmpty(_originalItm))
                                        {
                                            txtItem.Text = _lists.Tus_itm_cd; _serial2 = _lists.Tus_ser_2;
                                            _prefix = _lists.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                            cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                            decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
                                            txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                            if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((Qty)));
                                            txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                            txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                            CalculateItem(); AddItem(_isPromotion, string.Empty, ref _isadded);
                                        }
                                        else
                                        {
                                            txtItem.Text = _lists.Tus_itm_cd; _serial2 = _lists.Tus_ser_2;
                                            _prefix = _lists.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                            cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                            decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum(); txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                            if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((Qty)));
                                            txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                            txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                            CalculateItem(); AddItem(_isPromotion, _originalItm, ref _isadded);
                                        }
                                        _combineCounter += 1;
                                    }
                                }
                                else
                                {
                                    cmbStatus.Text = _combineStatus; txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_list.Sapc_price));
                                    if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty /* * _combineQty */))); else txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, _originalItm, ref _isadded);
                                    _combineCounter += 1;
                                }
                            }
                        }
                        else
                        {
                            if (PriceCombinItemSerialList == null || PriceCombinItemSerialList.Count == 0) _isSingleItemSerializedInCombine = false;
                            foreach (ReptPickSerials _list in PriceCombinItemSerialList)
                            {
                                txtSerialNo.Text = _list.Tus_ser_1;
                                ScanSerialNo = _list.Tus_ser_1;
                                string _originalItm = _list.Tus_session_id;
                                _combineStatus = _list.Tus_itm_stus;
                                if (string.IsNullOrEmpty(_originalItm))
                                {
                                    txtItem.Text = _list.Tus_itm_cd; _serial2 = _list.Tus_ser_2;
                                    _prefix = _list.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                    cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                    decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
                                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice)); txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, string.Empty, ref _isadded);
                                }
                                else
                                {
                                    txtItem.Text = _list.Tus_itm_cd; _serial2 = _list.Tus_ser_2;
                                    _prefix = _list.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                    cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                    decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
                                    var _Increaseable = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(x => x.Sapc_increse).Distinct().ToList();
                                    bool _isIncreaseable = Convert.ToBoolean(_Increaseable[0]); txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                    if (_isIncreaseable) txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((Qty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, _originalItm, ref _isadded);
                                }
                                _combineCounter += 1;
                            }
                            foreach (PriceCombinedItemRef _list in _MainPriceCombinItem)
                            {
                                MasterItem _i = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _list.Sapc_itm_cd);
                                _combineStatus = _list.Status;
                                if (_i.Mi_is_ser1 != 1)
                                {
                                    string _originalItm = _list.Sapc_itm_cd; string _similerItem = _list.Similer_item;
                                    if (!string.IsNullOrEmpty(_similerItem)) txtItem.Text = _similerItem; else txtItem.Text = _list.Sapc_itm_cd;
                                    LoadItemDetail(txtItem.Text.Trim()); cmbStatus.Text = _combineStatus;
                                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_list.Sapc_price));
                                    if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, _originalItm, ref _isadded);
                                    _combineCounter += 1;
                                }
                            }
                        }

                        if (chkDeliverLater == true || chkDeliverNow == true)
                            if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes) ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater == false && chkDeliverNow == false || (_isRegistrationMandatory)) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }//hdnSerialNo.Value = ""
                        if (chkDeliverLater == false && chkDeliverNow == false || (_isRegistrationMandatory))
                        {
                            if (_isSingleItemSerializedInCombine)
                            {
                                if (_combineCounter == PriceCombinItemSerialList.Count)
                                { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes)  ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater == false && chkDeliverNow == false || (_isRegistrationMandatory)) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }
                                else if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes) ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater == false && chkDeliverNow == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }
                            }
                            else
                                if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes)  ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater == false && chkDeliverNow == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }//hdnSerialNo.Value = ""
                        }
                    }
                }
                #endregion

                //Add by Akila 2016/12/28 (Advance Receipt - Validate entered item details with sub receipt defenition)
                if (IsValidItem())
                {
                    // #endregion Rooting for Invnetory Combine
                    _isadded = true;
                    txtSerialNo.Text = "";
                    ClearAfterAddItem();
                    SSPriceBookSequance = "0";
                    SSPriceBookItemSequance = "0";
                    SSPriceBookPrice = 0;
                    SSCombineLine = 0;
                    if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                    txtItem.Focus();
                    BindAddItem();
                    SetDecimalTextBoxForZero(true);

                    lblGrndSubTotal.Text = FormatToCurrency(Convert.ToString(GrndSubTotal));
                    lblGrndDiscount.Text = FormatToCurrency(Convert.ToString(GrndDiscount));
                    lblGrndTax.Text = FormatToCurrency(Convert.ToString(GrndTax));
                    lblGrndAfterDiscount.Text = FormatToCurrency(Convert.ToString(GrndSubTotal - GrndDiscount));

                    if (_invoiceItemList != null || _invoiceItemList.Count > 0)
                    {
                        lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt)));
                    }
                    else
                    {
                        lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));
                    }

                    decimal _tobepays = 0;
                    if (txtRecType.Text.ToUpper() != MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                    {
                        if (lblSVatStatus.Text == "Available") _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                        else
                        {
                            _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                            ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                            ucPayModes1.TotalAmount = _tobepays;
                        }
                    }
                    else
                    {
                        _tobepays = Convert.ToDecimal(CalculateMiniPayableAmt());
                        // ucPayModes1.TotalAmount = Convert.ToDecimal(CalculateMiniPayableAmt());
                        // ucPayModes1.Amount.Text = FormatToCurrency(ucPayModes1.TotalAmount.ToString());
                    }


                    //ucPayModes1.TotalAmount = _tobepays;
                    ucPayModes1.InvoiceItemList = _invoiceItemList;
                    ucPayModes1.SerialList = InvoiceSerialList;

                    ucPayModes1.IsTaxInvoice = chkTaxPayable.Checked;

                    if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                        ucPayModes1.LoadData();
                    if (_loyaltyType != null)
                    {
                        ucPayModes1.LoyaltyCard = _loyaltyType.Salt_loty_tp;
                    }
                    //  LookingForBuyBack();
                    this.Cursor = Cursors.Default;
                    if (_isCombineAdding == false)
                    {
                        this.Cursor = Cursors.Default;
                        if (cmbInvType.Text != "HS")
                        {

                            if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            { if (chkDeliverLater == false && chkDeliverNow == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } }
                            else { ucPayModes1.button1.Focus(); }
                        }
                    }
                }
                else
                {
                    //RemoveItemOnError(TxtAdvItem.Text);
                    //_invoiceItemList.Remove(_invoiceItemList.Single(x => x.Sad_itm_cd == TxtAdvItem.Text));
                    _isadded = false;
                    txtUnitPrice.Text = FormatToCurrency("0");
                    txtUnitAmt.Text = FormatToCurrency("0");
                    txtDisRate.Text = FormatToCurrency("0");
                    txtDisAmt.Text = FormatToCurrency("0");
                    txtTaxAmt.Text = FormatToCurrency("0");
                    txtLineTotAmt.Text = FormatToCurrency("0");
                }



                ////Commented by akila 2016/12/28
                //// #endregion Rooting for Invnetory Combine

                //txtSerialNo.Text = "";
                //ClearAfterAddItem();
                //SSPriceBookSequance = "0";
                //SSPriceBookItemSequance = "0";
                //SSPriceBookPrice = 0;
                //if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                //SSPRomotionType = 0;
                //txtItem.Focus();
                //BindAddItem();
                //SetDecimalTextBoxForZero(true);
                //decimal _tobepays = 0;
                //if (lblSVatStatus.Text == "Available") _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                //else _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                //ucPayModes1.TotalAmount = _tobepays;
                //ucPayModes1.InvoiceItemList = _invoiceItemList;
                //ucPayModes1.SerialList = InvoiceSerialList;
                //ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                //ucPayModes1.IsTaxInvoice = chkTaxPayable.Checked;
                //if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                //    ucPayModes1.LoadData();
                //if (_loyaltyType != null)
                //{
                //    ucPayModes1.LoyaltyCard = _loyaltyType.Salt_loty_tp;
                //}
                ////  LookingForBuyBack();
                //this.Cursor = Cursors.Default;
                //if (_isCombineAdding == false)
                //{
                //    this.Cursor = Cursors.Default;
                //    if (cmbInvType.Text != "HS")
                //    {

                //        if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                //        { if (chkDeliverLater == false && chkDeliverNow == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } }
                //        else { ucPayModes1.button1.Focus(); }
                //    }
                //}
            }
            catch (Exception ex)
            {
                RemoveItemOnError(TxtAdvItem.Text, txtSerialNo.Text);
                //_invoiceItemList.Remove(_invoiceItemList.Single(x => x.Sad_itm_cd == TxtAdvItem.Text));
                _isadded = false;
                txtUnitPrice.Text = FormatToCurrency("0");
                txtUnitAmt.Text = FormatToCurrency("0");
                txtDisRate.Text = FormatToCurrency("0");
                txtDisAmt.Text = FormatToCurrency("0");
                txtTaxAmt.Text = FormatToCurrency("0");
                txtLineTotAmt.Text = FormatToCurrency("0");

                CHNLSVC.CloseChannel();
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                return;
            }
        }

        private InvoiceItem AssignDataToObject(bool _isPromotion, MasterItem _item, string _originalItem)
        {
            InvoiceItem _tempItem = new InvoiceItem();
            IsVirtual(_item.Mi_itm_tp);
            _tempItem.Sad_alt_itm_cd = "";
            _tempItem.Sad_alt_itm_desc = "";
            _tempItem.Sad_comm_amt = 0;
            _tempItem.Sad_disc_amt = Convert.ToDecimal(txtDisAmt.Text);
            _tempItem.Sad_disc_rt = Convert.ToDecimal(txtDisRate.Text);
            _tempItem.Sad_do_qty = (IsGiftVoucher(_item.Mi_itm_tp) || _IsVirtualItem) ? Convert.ToDecimal(txtQty.Text) : 0;
            _tempItem.Sad_inv_no = "";
            _tempItem.Sad_is_promo = _isPromotion;
            _tempItem.Sad_itm_cd = txtItem.Text;
            _tempItem.Sad_itm_line = _lineNo;
            _tempItem.Sad_itm_seq = Convert.ToInt32(SSPriceBookItemSequance);
            _tempItem.Sad_itm_stus = cmbStatus.Text;
            _tempItem.Sad_itm_tax_amt = Convert.ToDecimal(txtTaxAmt.Text);
            _tempItem.Sad_itm_tp = _item.Mi_itm_tp;
            _tempItem.Sad_job_no = "";
            _tempItem.Sad_res_line_no = 0;
            _tempItem.Sad_res_no = "";
            //if (_proVouInvcItem == txtItem.Text.ToString())
            //{
            //    if (string.IsNullOrEmpty(lblPromoVouUsedFlag.Text))
            //    {
            //        lblPromoVouUsedFlag.Text = "U";
            //        _proVouInvcLine = _lineNo;
            //        _tempItem.Sad_res_line_no = Convert.ToInt32(lblPromoVouNo.Text.ToString());
            //        _tempItem.Sad_res_no = "PROMO_VOU";
            //    }
            //}
            _tempItem.Sad_merge_itm = "";
            _tempItem.Sad_pb_lvl = cmbLevel.Text;
            _tempItem.Sad_pb_price = Convert.ToDecimal(SSPriceBookPrice);
            _tempItem.Sad_pbook = cmbBook.Text;
            _tempItem.Sad_print_stus = false;
            _tempItem.Sad_promo_cd = SSPromotionCode;
            _tempItem.Sad_qty = Convert.ToDecimal(txtQty.Text);
            _tempItem.Sad_seq = Convert.ToInt32(SSPriceBookSequance);
            _tempItem.Sad_seq_no = 0;
            _tempItem.Sad_srn_qty = 0;
            _tempItem.Sad_tot_amt = Convert.ToDecimal(txtLineTotAmt.Text);

            _tempItem.Sad_unit_amt = Convert.ToDecimal((decimal.Parse(txtUnitPrice.Text) * decimal.Parse(txtQty.Text)).ToString("N2"));
            //_tempItem.Sad_unit_amt = Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text);
            _tempItem.Sad_unit_rt = Convert.ToDecimal(txtUnitPrice.Text);
            _tempItem.Sad_uom = "";
            _tempItem.Sad_warr_based = false;
            _tempItem.Mi_longdesc = _item.Mi_longdesc;
            _tempItem.Mi_itm_tp = _item.Mi_itm_tp;
            _tempItem.Mi_brand = _item.Mi_brand;
            _tempItem.Mi_cate_1 = _item.Mi_cate_1;
            _tempItem.Mi_cate_2 = _item.Mi_cate_2;
            _tempItem.Sad_job_line = Convert.ToInt32(SSCombineLine);
            _tempItem.Sad_warr_period = WarrantyPeriod;
            _tempItem.Sad_warr_remarks = WarrantyRemarks;
            _tempItem.Sad_sim_itm_cd = _originalItem;
            _tempItem.Sad_merge_itm = _item.Mi_itm_tp != "M" ? "0" : Convert.ToString(SSPRomotionType);
            
            //Updated by akila 2017/01/25
            if ((_tempItem.Sad_is_promo) && (_tempItem.Sad_unit_rt == 0))
            {
                _tempItem.Sad_job_no = "";
            }
            else { _tempItem.Sad_job_no = txtSerialNo.Text; }
            

            //Add by akila 2017/01/04
            _tempItem.Mi_is_ser1 = _item.Mi_is_ser1;
            _tempItem.Mi_is_ser2 = _item.Mi_is_ser2;
            _tempItem.Mi_is_ser3 = _item.Mi_is_ser3;

            //Add by akila 
            _tempItem.Sad_original_itemcd = TxtAdvItem.Text;
            
            if (!string.IsNullOrEmpty(txtDisRate.Text.Trim()) && IsNumeric(txtDisRate.Text.Trim())) if (Convert.ToDecimal(txtDisRate.Text.Trim()) > 0 && GeneralDiscount != null) { _tempItem.Sad_dis_type = "M"; _tempItem.Sad_dis_seq = GeneralDiscount.Sgdd_seq; _tempItem.Sad_dis_line = 0; }
            return _tempItem;
        }

        private void ClearAfterAddItem()
        {
            if (cmbInvType.Text != "HS")
            {
                txtItem.Text = "";
            }
            cmbStatus.Text = DefaultItemStatus;
            txtQty.Text = FormatToQty("1");
            LoadItemDetail(string.Empty);
            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
            txtItem.ReadOnly = false;

        }
        protected void BindAddItem()
        {
            //updated by akila 2016/12/28

            var _bindinSource = new BindingSource();
            _bindinSource.DataSource = _invoiceItemList;
            gvInvoiceItem.DataSource = _bindinSource;
            gvInvoiceItem.Refresh();

            //List<InvoiceItem> _data = new List<InvoiceItem>();
            //_data = _invoiceItemList;
            //gvInvoiceItem.DataSource = new List<InvoiceItem>();
            //gvInvoiceItem.DataSource = _data;

            //if (_invoiceItemList == null) AddItemDisableCustomer(false);
            //if (_invoiceItemList.Count <= 0) AddItemDisableCustomer(false);
        }
        private void SetDecimalTextBoxForZero(bool _isUnit)
        {
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtQty.Text = FormatToQty("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
            if (_isUnit) txtUnitPrice.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
        }
        private bool CheckItemWarranty(string _item, string _status)
        {
            bool _isNoWarranty = false;
            List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
            if (_lvl != null)
                if (_lvl.Count > 0)
                {
                    var _lst = (from _l in _lvl where _l.Sapl_itm_stuts == _status.Trim() select _l).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                        {
                            DataTable _temWarr = CHNLSVC.Sales.GetPCWara(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item.Trim(), _status.Trim(), Convert.ToDateTime(dtpRecDate.Value.Date).Date);

                            if (_lst[0].Sapl_set_warr == true)
                            {
                                WarrantyPeriod = _lst[0].Sapl_warr_period;

                            }
                            else if (_temWarr != null && _temWarr.Rows.Count > 0)
                            {
                                WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
                            }
                            else
                            {
                                MasterItemWarrantyPeriod _period = CHNLSVC.Inventory.GetItemWarrantyDetail(_item.Trim(), _status.Trim()); if (_period != null) { WarrantyPeriod = _period.Mwp_val; WarrantyRemarks = _period.Mwp_rmk; }
                                else { _isNoWarranty = true; }
                            }
                        }
                }
            return _isNoWarranty;
        }

        private void btnPriNProConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (_tempPriceCombinItem != null && _tempPriceCombinItem.Count > 0)
                { foreach (DataGridViewRow r in gvPromotionItem.Rows) _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == Convert.ToString(r.Cells["PromItm_Item"].Value)).ToList().ForEach(x => x.Status = Convert.ToString(r.Cells["PromItm_Status"].Value)); }

                if (_priceBookLevelRef.Sapl_is_serialized)
                {
                    int _normalCount = (from DataGridViewRow row in gvNormalPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row).Count();
                    int _promoCount = (from DataGridViewRow row in gvPromotionPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row).Count();
                    int _totalPickedSerial = _normalCount + _promoCount;
                    if (_totalPickedSerial == 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price from normal or promotion", "Normal Or Promotion Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    if (_totalPickedSerial > 1)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have selected more than one selection.", "Qty And Selection Mismatch", MessageBoxButtons.YesNo, MessageBoxIcon.Information); } return; }
                    if (_normalCount > 0)
                    {
                        var _normalRow = from DataGridViewRow row in gvNormalPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row;
                        if (_normalRow != null)
                        {
                            foreach (var _row in _normalRow)
                            {
                                string _unitPrice = _row.Cells["NorPrice_UnitPrice"].Value.ToString();
                                string _bkpPrice = _row.Cells["NorPrice_BkpUPrice"].Value.ToString();
                                string _pbseq = _row.Cells["NorPrice_Pb_Seq"].Value.ToString();
                                string _pblineseq = string.Empty;
                                if (string.IsNullOrEmpty(Convert.ToString(_row.Cells["NorPrice_PbLineSeq"].Value))) _pblineseq = "1";
                                else _pblineseq = _row.Cells["NorPrice_PbLineSeq"].Value.ToString();
                                string _warrantyrmk = _row.Cells["NorPrice_WarrantyRmk"].Value.ToString();
                                if (!string.IsNullOrEmpty(_unitPrice))
                                {
                                    txtUnitPrice.Text = FormatToCurrency(_unitPrice);
                                    SSPriceBookPrice = Convert.ToDecimal(_bkpPrice);
                                    SSPriceBookSequance = _pbseq;
                                    SSPriceBookItemSequance = _pblineseq;
                                    WarrantyRemarks = _warrantyrmk;
                                    CalculateItem();
                                    //  pnlMain.Enabled = true;
                                    pnlPriceNPromotion.Visible = false;
                                }
                            }
                        }
                        return;
                    }
                    if (_promoCount > 0)
                    {
                        var _promoRow = from DataGridViewRow row in gvPromotionPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row;
                        if (_promoRow != null)
                        {
                            foreach (var _row in _promoRow)
                            {
                                string _mainItem = _row.Cells["PromPrice_Item"].Value.ToString();
                                string _pbSeq = _row.Cells["PromPrice_Pb_Seq"].Value.ToString();
                                string _pbLineSeq = "0";
                                if (Convert.ToString(_row.Cells["PromPrice_PbLineSeq"].Value) == string.Empty) _pbLineSeq = "0"; else _pbLineSeq = Convert.ToString(_row.Cells["PromPrice_PbLineSeq"].Value);
                                string _pbWarranty = _row.Cells["PromPrice_WarrantyRmk"].Value.ToString();
                                string _unitprice = _row.Cells["PromPrice_UnitPrice"].Value.ToString();
                                string _promotioncode = _row.Cells["PromPrice_PromotionCD"].Value.ToString();
                                _selectPromoCode = _promotioncode;
                                string _circulerncode = _row.Cells["PromPrice_Circuler"].Value.ToString();
                                string _promotiontype = _row.Cells["PromPrice_PriceType"].Value.ToString();
                                string _pbPrice = _row.Cells["PromPrice_BkpUPrice"].Value.ToString();
                                bool _isSingleItemSerialized = false;

                                PriceDetailRestriction _restriction = CHNLSVC.Sales.GetPromotionRestriction(BaseCls.GlbUserComCode, _promotioncode);

                                if (_restriction != null)
                                {
                                    //show message
                                    if (!string.IsNullOrEmpty(_restriction.Spr_msg))
                                    {
                                        MessageBox.Show(_restriction.Spr_msg, "Promotion Message", MessageBoxButtons.OK);

                                        bool nic = false;
                                        bool mob = false;
                                        bool cus = false;

                                        if (_restriction.Spr_need_cus && (string.IsNullOrEmpty(txtCusCode.Text) || txtCusCode.Text.ToUpper() == "CASH"))
                                        {
                                            cus = true;
                                        }
                                        if (_restriction.Spr_need_mob && string.IsNullOrEmpty(txtMobile.Text))
                                        {
                                            mob = true;
                                        }
                                        if (_restriction.Spr_need_nic && string.IsNullOrEmpty(txtNIC.Text))
                                        {
                                            nic = true;
                                        }

                                        string _message = "";
                                        if (cus)
                                        {
                                            _message = _message + "This promotion need Customer code, Please enter customer code\n";
                                        }
                                        if (nic)
                                        {
                                            _message = _message + "This promotion need ID Number, Please enter ID Number\n";
                                        }
                                        if (mob)
                                        {
                                            _message = _message + "This promotion need Mobile Number, Please enter  Mobile Number\n";
                                        }
                                        if (cus || nic || mob)
                                        {
                                            MessageBox.Show(_message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            return;
                                        }
                                    }
                                }

                                foreach (PriceCombinedItemRef _ref in _tempPriceCombinItem)
                                {
                                    string _item = _ref.Sapc_itm_cd;
                                    string _originalItem = _ref.Sapc_itm_cd;
                                    string _similerItem = Convert.ToString(_ref.Similer_item);
                                    if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                    string _status = _ref.Status; //cmbStatus.Text.Trim();
                                    string _qty = Convert.ToString(_ref.Sapc_qty);
                                    bool _haveSerial = Convert.ToBoolean(_ref.Sapc_increse);
                                    string _serialno = Convert.ToString(_ref.Sapc_sub_ser);

                                    MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                    if (_itm.Mi_is_ser1 == 1) _isSingleItemSerialized = true;
                                    if (_haveSerial && _itm.Mi_is_ser1 == 1)
                                    {
                                        if (!string.IsNullOrEmpty(_serialno) && chkDeliverLater == false && chkDeliverNow == false)
                                        {
                                            List<InventorySerialRefN> _refs = CHNLSVC.Inventory.GetItemDetailBySerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _serialno);
                                            if (_ref != null)
                                                if (_refs.Count > 0)
                                                {
                                                    var _available = _refs.Where(x => x.Ins_itm_cd == _item).ToList();
                                                    if (_available == null || _available.Count <= 0)
                                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item, " + _serialno + " serial  does not available in the current inventory stock.", "No Stock", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                                }
                                        }
                                        else if (string.IsNullOrEmpty(_serialno) && chkDeliverLater == false && chkDeliverNow == false)
                                        {
                                            decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                            if (_serialcount != Convert.ToDecimal(_qty))
                                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                        }
                                        else if (_itm.Mi_is_ser1 == 1 && chkDeliverLater && chkDeliverNow == false)
                                        {
                                            ReptPickSerials _one = new ReptPickSerials();
                                            if (!string.IsNullOrEmpty(_serialno)) PriceCombinItemSerialList.Add(VirtualSerialLine(_item, _status, Convert.ToDecimal(_qty), _serialno)[0]);
                                        }
                                    }
                                    else if (_haveSerial == false && _itm.Mi_is_ser1 == 1 && chkDeliverLater == false && chkDeliverNow == false)
                                    {
                                        decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                        if (_serialcount != Convert.ToDecimal(_qty))
                                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                    }
                                    else if (_haveSerial == false && (_itm.Mi_is_ser1 == 0 || _itm.Mi_is_ser1 == -1) && chkDeliverLater == false && chkDeliverNow == false)
                                    {
                                        decimal _pickQty = 0;
                                        if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum(); else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == _status).ToList().Select(x => x.Sad_qty).Sum();
                                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                        List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status);
                                        if (_inventoryLocation != null)
                                            if (_inventoryLocation.Count > 0)
                                            {
                                                decimal _invBal = _inventoryLocation[0].Inl_qty;
                                                if (_pickQty > _invBal)
                                                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                            }
                                            else
                                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                        else
                                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                    }
                                    else if (_itm.Mi_is_ser1 == 1 && (chkDeliverLater || chkDeliverNow))
                                    {
                                        ReptPickSerials _one = new ReptPickSerials();
                                        if (!string.IsNullOrEmpty(_serialno))
                                        {
                                            _one.Tus_com = BaseCls.GlbUserComCode;
                                            _one.Tus_itm_cd = _item;
                                            _one.Tus_itm_stus = _status;
                                            _one.Tus_loc = BaseCls.GlbUserDefLoca;
                                            _one.Tus_qty = Convert.ToDecimal(_qty);
                                            _one.Tus_ser_1 = _serialno;
                                            _one.Tus_ser_2 = "N/A";
                                            _one.Tus_ser_3 = "N/A";
                                            _one.Tus_ser_4 = "N/A";
                                            _one.Tus_ser_id = -100;
                                            _one.Tus_ser_line = 1;
                                            PriceCombinItemSerialList.Add(_one);
                                        }
                                    }
                                }

                                if (chkDeliverLater == false && _isSingleItemSerialized && chkDeliverNow == false)
                                    if (PriceCombinItemSerialList == null)
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                if (chkDeliverLater == false && _isSingleItemSerialized && chkDeliverNow == false)
                                    if (PriceCombinItemSerialList.Count <= 0)
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                SetSSPriceDetailVariable(_circulerncode, _pbLineSeq, _pbSeq, _pbPrice, _promotioncode, _promotiontype);
                                _MainPriceCombinItem = _tempPriceCombinItem;
                                txtUnitPrice.Text = FormatToCurrency(_unitprice);
                                txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text),true)));
                                //txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false)));
                                CalculateItem();
                                pnlPriceNPromotion.Visible = false;
                                //  pnlMain.Enabled = true;
                                btnAddItem.Focus();
                            }
                        }
                        return;
                    }
                }
                else
                {
                    bool _isSelect = false;
                    DataGridViewRow _pickedRow = new DataGridViewRow();
                    foreach (DataGridViewRow _row in gvPromotionPrice.Rows)
                    {
                        if (Convert.ToBoolean(_row.Cells["PromPrice_Select"].Value) == true)
                        { _isSelect = true; _pickedRow = _row; break; }
                    }
                    //bool _isHavingSubItem = false;
                    //if (_pickedRow.Index == -1) _isHavingSubItem = false; else _isHavingSubItem = IsPromotionHavingSubItem(_pickedRow);
                    if (!_isSelect)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select a promotion.", "No Selection", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    if (_tempPriceCombinItem == null)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select a promotion items.", "No Promotion item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    //if (_tempPriceCombinItem.Count <= 0 && _isHavingSubItem)
                    //{ this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select a promotion items.", "No Promotion item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    if (_isSelect)
                    {
                        string _mainItem = _pickedRow.Cells["PromPrice_Item"].Value.ToString();
                        string _pbSeq = _pickedRow.Cells["PromPrice_Pb_Seq"].Value.ToString();
                        string _pbLineSeq = _pickedRow.Cells["PromPrice_PbLineSeq"].Value.ToString();
                        string _pbWarranty = _pickedRow.Cells["PromPrice_WarrantyRmk"].Value.ToString();
                        string _unitprice = Convert.ToString(FigureRoundUp(Convert.ToDecimal(_pickedRow.Cells["PromPrice_UnitPrice"].Value.ToString()), true));
                        string _promotioncode = _pickedRow.Cells["PromPrice_PromotionCD"].Value.ToString();
                        _selectPromoCode = _promotioncode;
                        string _circulerncode = _pickedRow.Cells["PromPrice_Circuler"].Value.ToString();
                        string _promotiontype = _pickedRow.Cells["PromPrice_PriceType"].Value.ToString();
                        string _pbPrice = _pickedRow.Cells["PromPrice_BkpUPrice"].Value.ToString();
                        bool _isSingleItemSerialized = false;

                        PriceDetailRestriction _restriction = CHNLSVC.Sales.GetPromotionRestriction(BaseCls.GlbUserComCode, _promotioncode);

                        if (_restriction != null)
                        {
                            //show message
                            if (!string.IsNullOrEmpty(_restriction.Spr_msg))
                            {
                                MessageBox.Show(_restriction.Spr_msg, "Promotion Message", MessageBoxButtons.OK);

                                bool nic = false;
                                bool mob = false;
                                bool cus = false;

                                if (_restriction.Spr_need_cus && (string.IsNullOrEmpty(txtCusCode.Text) || txtCusCode.Text.ToUpper() == "CASH"))
                                {
                                    cus = true;
                                }
                                if (_restriction.Spr_need_mob && string.IsNullOrEmpty(txtMobile.Text))
                                {
                                    mob = true;
                                }
                                if (_restriction.Spr_need_nic && string.IsNullOrEmpty(txtNIC.Text))
                                {
                                    nic = true;
                                }

                                string _message = "";
                                if (cus)
                                {
                                    _message = _message + "This promotion need Customer code, Please enter customer code\n";
                                }
                                if (nic)
                                {
                                    _message = _message + "This promotion need ID Number, Please enter ID Number\n";
                                }
                                if (mob)
                                {
                                    _message = _message + "This promotion need Mobile Number, Please enter  Mobile Number\n";
                                }
                                if (cus || nic || mob)
                                {
                                    MessageBox.Show(_message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                            }
                        }

                        if (chkDeliverLater == false && chkDeliverNow == false)
                            foreach (PriceCombinedItemRef _ref in _tempPriceCombinItem)
                            {
                                string _item = _ref.Sapc_itm_cd;
                                string _originalItem = _ref.Sapc_itm_cd;
                                string _similerItem = Convert.ToString(_ref.Similer_item);
                                if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                string _status = _ref.Status;
                                string _qty = Convert.ToString(_ref.Sapc_qty);
                                MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                if (_itm.Mi_is_ser1 == 1)
                                {
                                    _isSingleItemSerialized = true;
                                    decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                    if (_serialcount != Convert.ToDecimal(_qty)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                }
                                else if (_itm.Mi_is_ser1 == 0 || _itm.Mi_is_ser1 == -1)
                                {
                                    decimal _pickQty = 0;
                                    if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum(); else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == _status).ToList().Select(x => x.Sad_qty).Sum();
                                    _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                    List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status);
                                    if (_inventoryLocation != null)
                                        if (_inventoryLocation.Count > 0)
                                        {
                                            decimal _invBal = _inventoryLocation[0].Inl_qty;
                                            if (_pickQty > _invBal)
                                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                        }
                                        else
                                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                    else
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                }
                            }
                        if (chkDeliverLater || chkDeliverNow)
                        {
                            foreach (PriceCombinedItemRef _ref in _tempPriceCombinItem)
                            {
                                string _item = _ref.Sapc_itm_cd;
                                string _originalItem = _ref.Sapc_itm_cd;
                                string _similerItem = Convert.ToString(_ref.Similer_item);
                                if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                string _status = _ref.Status;
                                string _qty = Convert.ToString(_ref.Sapc_qty);
                                MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                if (IsGiftVoucher(_itm.Mi_itm_tp))
                                {
                                    _isSingleItemSerialized = true;
                                    decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                    if (_serialcount != Convert.ToDecimal(_qty))
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                }
                            }
                        }
                        if (chkDeliverLater == false && _isSingleItemSerialized && chkDeliverNow == false)
                            if (PriceCombinItemSerialList == null)
                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                        if (chkDeliverLater == false && _isSingleItemSerialized && chkDeliverNow == false)
                            if (PriceCombinItemSerialList.Count <= 0)
                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                        SetSSPriceDetailVariable(_circulerncode, _pbLineSeq, _pbSeq, _pbPrice, _promotioncode, _promotiontype);
                        _MainPriceCombinItem = _tempPriceCombinItem;
                        txtUnitPrice.Text = FormatToCurrency(_unitprice);
                        txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                        //txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false)));
                        CalculateItem();
                        pnlPriceNPromotion.Visible = false;
                        //   LoadScheme();
                        // pnlMain.Enabled = true;
                        btnAddItem.Focus();
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnPriNProCancel_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                PriceCombinItemSerialList = new List<ReptPickSerials>();
                _tempPriceCombinItem = new List<PriceCombinedItemRef>();
                _promotionSerial = new List<ReptPickSerials>();
                _promotionSerialTemp = new List<ReptPickSerials>();
                txtUnitPrice.Text = FormatToCurrency("0");
                CalculateItem();
                pnlPriceNPromotion.Visible = false;
                //  pnlMain.Enabled = true;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; }
        }

        private void btnPriNProSerConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                txtPriNProSerialSearch.Text = string.Empty;
                decimal _serialcount = 0;
                decimal _promotionItemQty = Convert.ToDecimal(gvPromotionItem.SelectedRows[0].Cells["PromItm_Qty"].Value);
                string _promotionItem = gvPromotionItem.SelectedRows[0].Cells["PromItm_Item"].Value.ToString();
                string _promotionOriginalItem = gvPromotionItem.SelectedRows[0].Cells["PromItm_Item"].Value.ToString();
                string _SimilerItem = Convert.ToString(gvPromotionItem.SelectedRows[0].Cells["PromItm_SimilerItem"].Value);
                if (!string.IsNullOrEmpty(_SimilerItem)) _promotionItem = _SimilerItem;
                foreach (DataGridViewRow _row in gvPromotionSerial.Rows)
                {
                    if (Convert.ToBoolean(_row.Cells["ProSer_Select"].Value) == true)
                        _serialcount += 1;
                }
                if (_serialcount != _promotionItemQty)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch. Item Qty - " + _promotionItemQty.ToString() + "but serials - " + _serialcount.ToString(), "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }
                if (_serialcount > _promotionItemQty)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch. Item Qty - " + _promotionItemQty.ToString() + "but serials - " + _serialcount.ToString(), "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }
                if (PriceCombinItemSerialList != null)
                    if (PriceCombinItemSerialList.Count > 0)
                    {
                        decimal _count = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _promotionItem).Count();
                        if (_count >= _promotionItemQty)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You already pick serials for the item", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                    }
                foreach (DataGridViewRow _r in gvPromotionSerial.Rows)
                {
                    if (Convert.ToBoolean(_r.Cells["ProSer_Select"].Value) == true)
                    {
                        string _item = Convert.ToString(_r.Cells["ProSer_Item"].Value);
                        string _serial = Convert.ToString(_r.Cells["ProSer_Serial1"].Value);
                        string _serial2 = Convert.ToString(_r.Cells["ProSer_Serial2"].Value);
                        MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                        string _prefix = Convert.ToString(_r.Cells["ProSer_Serial3"].Value);
                        bool _isGiftVoucher = IsGiftVoucher(_itm.Mi_itm_tp);
                        ReptPickSerials _serLst = null;
                        if (!_isGiftVoucher) _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item, _serial); else _serLst = CHNLSVC.Inventory.GetGiftVoucherDetail(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item, Convert.ToInt32(_serial2), Convert.ToInt32(_serial), _prefix);
                        _serLst.Tus_session_id = _promotionOriginalItem;
                        if (_serLst != null)
                            if (_serLst.Tus_ser_1 != null || !string.IsNullOrEmpty(_serLst.Tus_ser_1))
                            {
                                if (PriceCombinItemSerialList != null)
                                    if (PriceCombinItemSerialList.Count > 0)
                                    {
                                        var _dup = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _serLst.Tus_itm_cd && x.Tus_ser_1 == _serLst.Tus_ser_1).ToList();
                                        if (_dup != null)
                                            if (_dup.Count > 0)
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show(_serLst.Tus_ser_1 + "Serial duplicating!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                                return;
                                            }
                                            else
                                                PriceCombinItemSerialList.Add(_serLst);
                                        else
                                            PriceCombinItemSerialList.Add(_serLst);
                                    }
                                    else
                                    {
                                        PriceCombinItemSerialList.Add(_serLst);
                                    }
                                else
                                {
                                    PriceCombinItemSerialList.Add(_serLst);
                                }
                            }
                    }
                }
                List<ReptPickSerials> _lst = new List<ReptPickSerials>();
                gvPromotionSerial.DataSource = _lst;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionPrice_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
        private List<ReptPickSerials> VirtualSerialLine(string _item, string _status, decimal _qty, string _serialno)
        {
            List<ReptPickSerials> _ser = new List<ReptPickSerials>();
            if (!string.IsNullOrEmpty(_serialno))
            {
                ReptPickSerials _one = new ReptPickSerials();
                _one.Tus_com = BaseCls.GlbUserComCode;
                _one.Tus_itm_cd = _item;
                _one.Tus_itm_stus = _status;
                _one.Tus_loc = BaseCls.GlbUserDefLoca;
                _one.Tus_qty = Convert.ToDecimal(_qty);
                _one.Tus_ser_1 = _serialno;
                _one.Tus_ser_2 = "N/A";
                _one.Tus_ser_3 = "N/A";
                _one.Tus_ser_4 = "N/A";
                _one.Tus_ser_id = VirtualCounter + 1;
                _one.Tus_ser_line = 1;
                _ser.Add(_one);
            }
            else
            {
                for (int i = 0; i < Convert.ToInt32(_qty); i++)
                {
                    ReptPickSerials _one = new ReptPickSerials();
                    _one.Tus_com = BaseCls.GlbUserComCode;
                    _one.Tus_itm_cd = _item;
                    _one.Tus_itm_stus = _status;
                    _one.Tus_loc = BaseCls.GlbUserDefLoca;
                    _one.Tus_qty = 1;
                    _one.Tus_ser_1 = "N/A";
                    _one.Tus_ser_2 = "N/A";
                    _one.Tus_ser_3 = "N/A";
                    _one.Tus_ser_4 = "N/A";
                    _one.Tus_ser_id = VirtualCounter + 1;
                    _one.Tus_ser_line = 1;
                    _ser.Add(_one);
                }
            }
            return _ser;
        }

        private void CalculateGrandTotal(decimal _qty, decimal _uprice, decimal _discount, decimal _tax, bool _isAddition)
        {
            GrndSubTotal = decimal.Parse(lblGrndSubTotal.Text);
            GrndDiscount = decimal.Parse(lblGrndDiscount.Text);
            GrndTax = decimal.Parse(lblGrndTax.Text);

            if (_isAddition)//++
            {
                GrndSubTotal = GrndSubTotal + Convert.ToDecimal(_qty) * Convert.ToDecimal(_uprice);
                GrndDiscount = GrndDiscount + Convert.ToDecimal(_discount);
                GrndTax = GrndTax + Convert.ToDecimal(_tax);

                //commented by akila 2017/01/04
                //lblGrndSubTotal.Text = FormatToCurrency(Convert.ToString(GrndSubTotal));
                //lblGrndDiscount.Text = FormatToCurrency(Convert.ToString(GrndDiscount));
                //lblGrndTax.Text = FormatToCurrency(Convert.ToString(GrndTax));
            }
            else//--
            {
                GrndSubTotal = GrndSubTotal - Convert.ToDecimal(_qty) * Convert.ToDecimal(_uprice);
                GrndDiscount = GrndDiscount - Convert.ToDecimal(_discount);
                GrndTax = GrndTax - Convert.ToDecimal(_tax);

                //lblGrndSubTotal.Text = FormatToCurrency(Convert.ToString(GrndSubTotal));
                //lblGrndDiscount.Text = FormatToCurrency(Convert.ToString(GrndDiscount));
                //lblGrndTax.Text = FormatToCurrency(Convert.ToString(GrndTax));
            }

            //lblGrndAfterDiscount.Text = FormatToCurrency(Convert.ToString(GrndSubTotal - GrndDiscount));
            ////lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(FigureRoundUp(GrndSubTotal - GrndDiscount + GrndTax, true,false)));
            //if (_invoiceItemList != null || _invoiceItemList.Count > 0) lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt))); else lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));
            //TODO: remove remark, when apply payment UC
            //txtPayAmount.Text = FormatToCurrency(Convert.ToString((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(_paidAmount))));
            //lblPayBalance.Text = lblGrndTotalAmount.Text;
        }

        private void gvInvoiceItem_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void gvInvoiceItem_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvInvoiceItem.ColumnCount > 0)
                {
                    Int32 _rowIndex = e.RowIndex;
                    Int32 _colIndex = e.ColumnIndex;
                    if (_rowIndex != -1)
                    {
                        #region Deleting Row

                        if (_colIndex == 0)
                        {
                            if (MessageBox.Show("Do you want to remove?", "Removing...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                            {
                                return;
                            }

                            if (gvInvoiceItem.Rows.Count > 0)
                            {
                                BindingSource _bind = (BindingSource)gvInvoiceItem.DataSource;
                                List<InvoiceItem> _tmpList = new List<InvoiceItem>();
                                _tmpList = _bind.DataSource as List<InvoiceItem>;
                                _invoiceItemList = _tmpList;
                            }

                            if (_recieptItem != null)
                                if (_recieptItem.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("You have already payment added!", "Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            int _combineLine = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_JobLine"].Value);
                            string _resNo = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_ResNo"].Value;//Add by Chamal 6-Jul-2014
                            int _resLine = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_ResLine"].Value);//Add by Chamal 6-Jul-2014
                            if (_MainPriceSerial != null)
                                if (_MainPriceSerial.Count > 0)
                                {
                                    string _item = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value;
                                    decimal _uRate = (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_UPrice"].Value;
                                    string _pbook = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value;
                                    string _level = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value;

                                    List<PriceSerialRef> _tempSerial = _MainPriceSerial;
                                    var _remove = from _list in _tempSerial
                                                  where _list.Sars_itm_cd == _item && _list.Sars_itm_price == _uRate && _list.Sars_pbook == _pbook && _list.Sars_price_lvl == _level
                                                  select _list;

                                    foreach (PriceSerialRef _single in _remove)
                                    {
                                        _tempSerial.Remove(_single);
                                    }

                                    _MainPriceSerial = _tempSerial;
                                }

                            List<InvoiceItem> _tempList = _invoiceItemList;
                            var _promo = (from _pro in _invoiceItemList
                                          where _pro.Sad_is_promo == true && (_pro.Sad_promo_cd != null || _pro.Sad_promo_cd != string.Empty)
                                          select _pro).ToList();

                            //Commented by akila 2017/01/06
                            //List<InvoiceItem> _tempList = _invoiceItemList;
                            //var _promo = (from _pro in _invoiceItemList
                            //              where _pro.Sad_job_line == _combineLine
                            //              select _pro).ToList();
                            if (_promo.Count() > 0)
                            {
                                foreach (InvoiceItem code in _promo)
                                {
                                    CalculateGrandTotal(Convert.ToDecimal(code.Sad_qty), (decimal)code.Sad_unit_rt, (decimal)code.Sad_disc_amt, (decimal)code.Sad_itm_tax_amt, false);
                                    ScanSerialList.RemoveAll(x => x.Tus_base_itm_line == code.Sad_itm_line);
                                    InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == code.Sad_itm_line);
                                }
                                _tempList.RemoveAll(x => x.Sad_job_line == _combineLine);
                            }
                            else
                            {
                                CalculateGrandTotal(Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Qty"].Value), (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_UPrice"].Value, (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_DisAmt"].Value, (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_TaxAmt"].Value, false);
                                InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == _tempList[_rowIndex].Sad_itm_line);
                                _tempList.RemoveAt(_rowIndex);
                            }
                            _invoiceItemList = _tempList;

                            if (_resNo == "PROMO_VOU" && _resLine == Convert.ToInt32(lblPromoVouNo))
                            {
                                //Add by Chamal 6-Jul-2014
                                //lblPromoVouUsedFlag.Text = "";
                                //lblPromoVouNo.Text = "";
                                //_proVouInvcItem = "";
                                //_proVouInvcLine = 0;
                            }

                            int _newLine = 1;
                            List<InvoiceItem> _tempLists = _invoiceItemList;
                            if (_tempLists != null)
                                if (_tempLists.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in _tempLists)
                                    {
                                        Int32 _line = _itm.Sad_itm_line;
                                        _invoiceItemList.Where(Y => Y.Sad_itm_line == _line).ToList().ForEach(x => x.Sad_itm_line = _newLine);
                                        InvoiceSerialList.Where(y => y.Sap_itm_line == _line).ToList().ForEach(x => x.Sap_itm_line = _newLine);
                                        ScanSerialList.Where(y => y.Tus_base_itm_line == _line).ToList().ForEach(x => x.Tus_base_itm_line = _newLine);

                                        _newLine += 1;
                                    }
                                    _lineNo = _newLine - 1;
                                }
                                else _lineNo = 0;
                            else _lineNo = 0;
                            BindAddItem();
                            if (_invoiceItemList != null || _invoiceItemList.Count > 0)
                                lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt)));
                            else
                            {
                                lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));
                            }
                            //lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));
                            //gvPopSerial.DataSource = new List<ReptPickSerials>();
                            //gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
                            //gvGiftVoucher.DataSource = new List<ReptPickSerials>();
                            //gvGiftVoucher.DataSource = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();

                            //update promotion
                            //update promotion
                            List<InvoiceItem> _temItems = (from _invItm in _invoiceItemList
                                                           where !string.IsNullOrEmpty(_invItm.Sad_promo_cd)
                                                           select _invItm).ToList<InvoiceItem>();
                            if (_temItems != null && _temItems.Count > 0)
                            {
                                ucPayModes1.ISPromotion = true;
                            }
                            else
                                ucPayModes1.ISPromotion = false;
                            ucPayModes1.TotalAmount = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                            ucPayModes1.Amount.Text = FormatToCurrency(lblGrndTotalAmount.Text.Trim());
                            ucPayModes1.LoadData();
                            //  LookingForBuyBack();

                            //REGISTRATION PROCESS
                            //ADDED 2013/12/06
                            //search invoice item list if registration item not found set visibility
                            if (_isRegistrationMandatory)
                            {
                                bool _isHaveReg = false;
                                if (_invoiceItemList != null && _invoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _invItm in _invoiceItemList)
                                    {
                                        //check item need registration
                                        MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                                        if (_itm != null)
                                        {
                                            if (_itm.Mi_need_reg)
                                            {
                                                _isHaveReg = true;
                                                break;
                                            }
                                        }
                                    }
                                }

                                if (!_isHaveReg)
                                {
                                    //_isNeedRegistrationReciept = false;
                                    //lnkProcessRegistration.Visible = false;
                                }
                            }
                            //END

                            return;
                        }
                        if (_colIndex == 1)
                        {
                            return;
                        }
                        if (_colIndex == 2 && chkDeliverLater == false)
                        {
                            string _item = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value;
                            string _status = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Status"].Value;
                            int _itemLineNo = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_No"].Value.ToString());
                            decimal _invoiceQty = Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Qty"].Value.ToString());
                            decimal _doQty = 0;
                            decimal _scanQty = 0;
                            if (ScanSerialList != null) _scanQty = ScanSerialList.Where(x => x.Tus_base_itm_line == _itemLineNo).Sum(x => x.Tus_qty);
                            string _priceBook = gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value.ToString();
                            string _priceLevel = gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value.ToString();
                            int pbCount = CHNLSVC.Sales.GetDOPbCount(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                            string _promotioncd = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_PromoCd"].Value);
                            bool _isAgePriceLevel = false;
                            int _ageingDays = -1;
                            MasterItem _itemM = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                            if (_itemM.Mi_is_ser1 == -1 || _itemM.Mi_is_ser1 == 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You do not need to pick non-serialized item.", "Non-Serialized", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                            DataTable _categoryDet = CHNLSVC.General.GetMainCategoryDetail(_itemM.Mi_cate_1);
                            List<PriceBookLevelRef> _level = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                            if (_level != null)
                                if (_level.Count > 0)
                                {
                                    var _lvl = _level.Where(x => x.Sapl_isage).ToList();
                                    if (_lvl != null) if (_lvl.Count() > 0)
                                            _isAgePriceLevel = true;
                                }

                            if (_categoryDet != null && _isAgePriceLevel)
                                if (_categoryDet.Rows.Count > 0)
                                {
                                    if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                                        _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                                    else _ageingDays = 0;
                                }
                            if ((_invoiceQty - _doQty) <= 0) return;
                            if ((_invoiceQty - _doQty) <= _scanQty) return;
                            _commonOutScan = new CommonSearch.CommonOutScan();
                            _commonOutScan._isWriteToTemporaryTable = false;
                            _commonOutScan.ModuleTypeNo = 1;
                            _commonOutScan.ScanDocument = "N/A";
                            _commonOutScan.DocumentType = "DO";
                            _commonOutScan.PopupItemCode = _item;
                            _commonOutScan.ItemStatus = _status;
                            _commonOutScan.ItemLineNo = _itemLineNo;
                            _commonOutScan.PopupQty = _invoiceQty - _doQty;
                            _commonOutScan.ApprovedQty = _doQty;
                            _commonOutScan.ScanQty = _scanQty;
                            _commonOutScan.IsAgePriceLevel = _isAgePriceLevel;
                            _commonOutScan.DocumentDate = dtpRecDate.Value.Date;
                            _commonOutScan.NoOfDays = _ageingDays;
                            if (pbCount <= 0) _commonOutScan.IsCheckStatus = false;
                            else _commonOutScan.IsCheckStatus = true;
                            //  _commonOutScan.AddSerialClick += new EventHandler(CommonOutScan_AddSerialClick);
                            _commonOutScan.Location = new Point(((this.Width - _commonOutScan.Width) / 2), ((this.Height - _commonOutScan.Height) / 2) + 50);
                            _commonOutScan.ShowDialog();
                            return;
                        }
                        if (_colIndex == 10 && _isEditPrice == false)
                        {
                            decimal _prevousDisRate = Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_DisRate"].Value);
                            int _lineno0 = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_No"].Value);
                            string _book = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value);
                            string _level = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value);
                            string _item = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value);
                            string _status = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Status"].Value);
                            bool _isSerialized = false;

                        xy:
                            string _userDisRate = Microsoft.VisualBasic.Interaction.InputBox("Enter the discount rate", "Discount", Convert.ToString(_prevousDisRate), this.Width / 2, this.Height / 2);
                            if (string.IsNullOrEmpty(_userDisRate))
                                return;
                            if (IsNumeric(_userDisRate) == false || Convert.ToDecimal(_userDisRate) > 100 || Convert.ToDecimal(_userDisRate) < 0)
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid discount rate", "Invalid Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                goto xy;
                            }
                            decimal _disRate = Convert.ToDecimal(_userDisRate);

                            if (GeneralDiscount == null) GeneralDiscount = new CashGeneralEntiryDiscountDef();
                            GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(dtpRecDate.Text.Trim()).Date, _book, _level, txtCusCode.Text.Trim(), _item, _isSerialized, false);
                            if (GeneralDiscount != null)
                            {
                                decimal vals = GeneralDiscount.Sgdd_disc_val;
                                decimal rates = GeneralDiscount.Sgdd_disc_rt;

                                if (rates < _disRate)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not discount price more than " + rates + "%.", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow for apply discount", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                            var _itm = _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList();
                            if (_item != null && _item.Count() > 0) foreach (InvoiceItem _one in _itm)
                                {
                                    CalculateGrandTotal(_one.Sad_qty, _one.Sad_unit_rt, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, false);
                                    decimal _unitRate = _one.Sad_unit_rt;
                                    decimal _unitAmt = _one.Sad_unit_amt;
                                    decimal _disVal = 0;
                                    decimal _vatPortion = 0;
                                    decimal _lineamount = 0;
                                    decimal _newvatval = 0;

                                    bool _isTaxDiscount = chkTaxPayable.Checked ? true : (lblSVatStatus.Text == "Available") ? true : false;

                                    if (_isTaxDiscount)
                                    {
                                        _vatPortion = FigureRoundUp(TaxCalculation(_item, _status, _one.Sad_qty, _priceBookLevelRef, _unitRate, _disVal, _disRate, true), true);
                                        _disVal = FigureRoundUp(_unitAmt * _disRate / 100, true);
                                        _lineamount = FigureRoundUp(_unitRate * _one.Sad_qty + _vatPortion - _disVal, true);
                                    }
                                    else
                                    {
                                        _vatPortion = FigureRoundUp(TaxCalculation(_item, _status, _one.Sad_qty, _priceBookLevelRef, _unitRate, _disVal, _disRate, true), true);
                                        _disVal = FigureRoundUp((_unitAmt + _vatPortion) * _disRate / 100, true);

                                        if (_disRate > 0)
                                        {
                                            List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, string.Empty);
                                            if (_tax != null && _tax.Count > 0)
                                            {
                                                _newvatval = ((_unitRate * _one.Sad_qty + _vatPortion - _disVal) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                                            }
                                        }
                                        if (_disRate > 0)
                                        {
                                            _lineamount = FigureRoundUp(_unitRate * _one.Sad_qty + _vatPortion - _disVal, true);
                                            _vatPortion = FigureRoundUp(_newvatval, true);
                                        }
                                        else
                                        {
                                            _lineamount = FigureRoundUp(_unitRate * _one.Sad_qty + _vatPortion - _disVal, true);
                                        }
                                    }
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_disc_rt = _disRate);
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_disc_amt = _disVal);
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_itm_tax_amt = _vatPortion);
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_tot_amt = FigureRoundUp(_lineamount, true));
                                    BindAddItem();
                                    CalculateGrandTotal(_one.Sad_qty, _unitRate, _disVal, _vatPortion, true);
                                    decimal _tobepays = 0;
                                    if (lblSVatStatus.Text == "Available") _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()); else _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                                    ucPayModes1.TotalAmount = _tobepays;
                                    //update promotion
                                    List<InvoiceItem> _temItems = (from _invItm in _invoiceItemList
                                                                   where !string.IsNullOrEmpty(_invItm.Sad_promo_cd)
                                                                   select _invItm).ToList<InvoiceItem>();
                                    if (_temItems != null && _temItems.Count > 0)
                                    {
                                        ucPayModes1.ISPromotion = true;
                                    }
                                    else
                                        ucPayModes1.ISPromotion = false;
                                    ucPayModes1.InvoiceItemList = _invoiceItemList;
                                    ucPayModes1.SerialList = InvoiceSerialList;
                                    ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                                    if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                                        ucPayModes1.LoadData();
                                }
                        }

                        #endregion Deleting Row

                        if (_invoiceItemList != null || _invoiceItemList.Count > 0)
                        {
                            lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt)));
                        }
                        else
                        {
                            lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));
                        }
                    }
                }

            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally
            {
                if (cmbInvType.SelectedValue.ToString() == "HS")
                {
                    if (gvInvoiceItem.Rows.Count == 0)
                    {
                        ClearHP();
                        txtUnitPrice.Text = FormatToCurrency("0");
                        txtUnitAmt.Text = FormatToCurrency("0");
                        txtDisRate.Text = FormatToCurrency("0");
                        txtDisAmt.Text = FormatToCurrency("0");
                        txtTaxAmt.Text = FormatToCurrency("0");
                        txtLineTotAmt.Text = FormatToCurrency("0");
                        lblGrndSubTotal.Text = "0.00";
                        lblGrndDiscount.Text = "0.00";
                        lblGrndAfterDiscount.Text = "0.00";
                        lblGrndTax.Text = "0.00";
                        lblGrndTotalAmount.Text = "0.00";
                        TxtAdvItem.Text = string.Empty;
                        cmbInvType.SelectedIndex = cmbInvType.Items.IndexOf("CS");
                    }
                }


                lblGrndSubTotal.Text = FormatToCurrency(Convert.ToString(GrndSubTotal));
                lblGrndDiscount.Text = FormatToCurrency(Convert.ToString(GrndDiscount));
                lblGrndTax.Text = FormatToCurrency(Convert.ToString(GrndTax));
                lblGrndAfterDiscount.Text = FormatToCurrency(Convert.ToString(GrndSubTotal - GrndDiscount));
                this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels();
            }
        }

        private void SetPanelSize()
        { pnlPriceNPromotion.Size = new Size(1007, 366); pnlInventoryCombineSerialPick.Size = new Size(648, 242); pnlOth.Size = new Size(518, 209); pnlOth.Location = new Point(505, 78); pnlJob.Location = new Point(445, 264); pnlJob.Size = new Size(314, 214); btn_srch_jobno.Size = new Size(18, 18); }

        private void txtManual_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtRecType_TextChanged(object sender, EventArgs e)
        {

        }

        private void gvNormalPrice_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void cmbSch_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
        private void ClearHP()
        {          //Clear lable and text boxes in trial calculation section

            lblTerm.Text = "0.00";
            lblCashPrice.Text = "0.00";
            lblAmtFinance.Text = "0.00";
            lblIntAmount.Text = "0.00";
            lblTotHire.Text = "0.00";
            lblCommRate.Text = "0.00";
            lblCommAmt.Text = "0.00";
            lblDisRate.Text = "0.00";
            lblDisAmt.Text = "0.00";
            lblTotCash.Text = "0.00";
            txtCusPay.Text = "0.00";
            lblDownPay.Text = "0.00";
            lblVATAmt.Text = "0.00";
            lblServiceCha.Text = "0.00";
            lblDiriyaAmt.Text = "0.00";
            txtAddRental.Text = "0.00";
            lblStampDuty.Text = "0.00";
            lblOthCharges.Text = "0.00";
            lblHPInitPay.Text = "0.00";
            lblInsuFee.Text = "0.00";
            lblRegFee.Text = "0.00";
            lblTotPayAmount.Text = "0.00";
        }

        private void gvPopComItem_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void radioButtonSystem_CheckedChanged(object sender, EventArgs e)
        {
            loadPrifixes();
        }

        private void radioButtonManual_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButtonManual.Checked == true)
            {
                txtManual.Enabled = true;
                Int32 _NextNo = CHNLSVC.Inventory.GetNextManualDocNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_AVREC");
                if (_NextNo != 0)
                {
                    txtManual.Text = _NextNo.ToString();
                }
                else
                {
                    txtManual.Text = "";
                }
            }

            else
            {
                if (BaseCls.GlbIsManChkLoc == true)
                {
                    txtManual.Text = "";
                    // txtManual.Enabled = false;
                }
                else
                {
                    txtManual.Text = "";
                    txtManual.Enabled = true;
                }


            }
            loadPrifixes();
        }

        private void btnCustomer_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                General.CustomerCreation _CusCre = new General.CustomerCreation();
                _CusCre._isFromOther = true;
                _CusCre.obj_TragetTextBox = txtCusCode;
                this.Cursor = Cursors.Default;
                _CusCre.ShowDialog();
                txtCusCode.Select();

            }
            catch (Exception ex)
            { txtCusCode.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnAllocation_Click(object sender, EventArgs e)
        {
            DataTable _alloc = CHNLSVC.Inventory.GetItemAllocationDet(null);
            dgvAllocation.AutoGenerateColumns = false;
            dgvAllocation.DataSource = new DataTable();
            dgvAllocation.DataSource = _alloc;
            pnlAllocation.Visible = true;
            pnlAllocation.Width = 463;
            pnlAllocation.Height = 272;
        }

        private void btnAlloc_Click(object sender, EventArgs e)
        {
            pnlAllocation.Visible = false;
        }

        private void btn_srch_quo_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtCusCode.Text))
            {
                MessageBox.Show("Please select customer first.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtCusCode.Text = "";
                txtCusCode.Focus();
                return;
            }
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.QuoByCust);
                DataTable _result = CHNLSVC.CommonSearch.GetQuotationAll(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtQuoNo;
                _CommonSearch.ShowDialog();
                txtQuoNo.Select();

                get_quot_det();
            }
            catch (Exception err)
            {
                Cursor.Current = Cursors.Default;
                CHNLSVC.CloseChannel();
                MessageBox.Show(err.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void get_quot_det()
        {
            decimal _val = 0;
            chkDel.Checked = true;
            chkDel.Enabled = false;
            _invDt = Convert.ToDateTime(DateTime.Now).Date;

            QuotationHeader _quoH = new QuotationHeader();
            _quoH = CHNLSVC.Sales.Get_Quotation_HDR(txtQuoNo.Text);
            if (_quoH != null) // add by akila 2016-12-23 check ofr null object to prefent runtime errors.
            {
                if (_quoH.Qh_anal_3 != null)
                {
                    _invType = _quoH.Qh_anal_3;
                }

                if (txtRecType.Text == "ADVAN")     //kapila 18/1/2016
                {
                    int X = CHNLSVC.Financial.GetQuotationDPTotal(txtQuoNo.Text, out _val);
                    txtPayment.Text = (_val * -1).ToString("n");
                }
            }
        }

        private void txtQuoNo_DoubleClick(object sender, EventArgs e)
        {
            btn_srch_quo_Click(null, null);
        }

        private void txtQuoNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btn_srch_quo_Click(null, null);
        }

        private void btnOthAdd_Click(object sender, EventArgs e)
        {
            decimal _othAmt = 0;
            if (dtpRes.Value.Date < DateTime.Now.Date)
            {
                MessageBox.Show("Invalid Reserve Date", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                dtpRes.Focus();
                return;
            }
            if (string.IsNullOrEmpty(txtOthRef.Text))
            {
                MessageBox.Show("Please enter the Ref #.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtOthRef.Focus();
                return;
            }
            if (string.IsNullOrEmpty(txtNoTick.Text))
            {
                MessageBox.Show("Please enter the No of Tickets.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtNoTick.Focus();
                return;
            }
            if (cmbSeatTp.SelectedIndex == -1)
            {
                MessageBox.Show("Please select Seat Type.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                cmbSeatTp.Focus();
                return;
            }
            if (cmbTickTp.SelectedIndex == -1)
            {
                MessageBox.Show("Please select Ticket Type.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                cmbTickTp.Focus();
                return;
            }
            if (Convert.ToDecimal(txtOthAmt.Text) <= 0)
            {
                MessageBox.Show("Invalid Amount", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtOthAmt.Focus();
                return;
            }
            if (MessageBox.Show("Are you sure ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1) == System.Windows.Forms.DialogResult.No) return;

            ReceiptAddDetails _recAddDet = new ReceiptAddDetails();
            _recAddDet.SRA_AMT = Convert.ToDecimal(txtOthAmt.Text);
            _recAddDet.SRA_CRE_BY = BaseCls.GlbUserID;
            _recAddDet.SRA_LINE_NO = 1;
            _recAddDet.SRA_OTH_TP = cmbSeatTp.Text;
            _recAddDet.SRA_REC_NO = "0";
            _recAddDet.SRA_REF_NO = txtOthRef.Text;
            _recAddDet.SRA_REQ_DT = Convert.ToDateTime(dtpRes.Value.Date);
            _recAddDet.SRA_RMKS = txtOthRem.Text;
            _recAddDet.SRA_TP = cmbTickTp.Text;
            _recAddDet.SRA_UNITS = Convert.ToInt32(txtNoTick.Text);

            _recAddDetList.Add(_recAddDet);

            gvOth.AutoGenerateColumns = false;
            gvOth.DataSource = new List<ReceiptAddDetails>();
            gvOth.DataSource = _recAddDetList;

            _othAmt = Convert.ToDecimal(txtOthAmt.Text);
            ucPayModes1.TotalAmount = ucPayModes1.TotalAmount + _othAmt;
            ucPayModes1.Amount.Text = Convert.ToString(ucPayModes1.TotalAmount + _othAmt - Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text));
            ucPayModes1.Date = Convert.ToDateTime(dtpRecDate.Value.Date);

            ucPayModes1.LoadData();
            txtTotal.Text = Convert.ToDecimal(ucPayModes1.TotalAmount).ToString();
            txtRecType.Enabled = false;

            txtOthRef.Text = "";
            txtOthRem.Text = "";
            txtOthAmt.Text = "";
            cmbSeatTp.SelectedIndex = -1;
            cmbTickTp.SelectedIndex = -1;
            txtNoTick.Text = "";
            dtpRes.Value = DateTime.Now.Date;
            txtOthRef.Focus();
        }

        private void txtOthRef_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtNoTick.Focus();
        }

        private void txtNoTick_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                dtpRes.Focus();
        }

        private void dtpRes_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                cmbTickTp.Focus();
        }

        private void cmbTickTp_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                cmbSeatTp.Focus();
        }

        private void cmbSeatTp_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtOthAmt.Focus();
        }

        private void txtOthAmt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtOthRem.Focus();
        }

        private void txtOthRem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                btnOthAdd.Focus();
        }

        private void gvOth_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1 && e.ColumnIndex == 0)
            {
                if (MessageBox.Show("Are you Sure?", "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    Decimal _amt = Convert.ToDecimal(_recAddDetList[e.RowIndex].SRA_AMT);

                    ucPayModes1.TotalAmount = ucPayModes1.TotalAmount - _amt;
                    ucPayModes1.Amount.Text = Convert.ToString(ucPayModes1.TotalAmount - _amt - Convert.ToDecimal(ucPayModes1.PaidAmountLabel.Text));

                    ucPayModes1.LoadData();
                    txtTotal.Text = Convert.ToDecimal(ucPayModes1.TotalAmount).ToString();

                    _recAddDetList.RemoveAt(e.RowIndex);
                    BindingSource _source = new BindingSource();
                    _source.DataSource = _recAddDetList;
                    gvOth.DataSource = _source;
                }
            }
        }

        private void txtNoTick_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtNoTick.Text))
            {
                if (!IsNumeric(txtNoTick.Text))
                {
                    MessageBox.Show("Invalid no of tickets", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtNoTick.Text = "";
                    txtNoTick.Focus();
                    return;
                }
                if (Convert.ToInt32(txtNoTick.Text) < 1)
                {
                    MessageBox.Show("Invalid no of tickets", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtNoTick.Text = "";
                    txtNoTick.Focus();
                    return;
                }
            }
        }

        private void txtOthAmt_Leave(object sender, EventArgs e)
        {
            if (!IsNumeric(txtOthAmt.Text))
            {
                MessageBox.Show("Please enter a valid amount", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtOthAmt.Text = "";
                txtOthAmt.Focus();
                return;
            }
        }

        private void txtCusCode_TextChanged(object sender, EventArgs e)
        {

        }

        private void chk_Freereg_CheckedChanged(object sender, EventArgs e)
        {
            if (chk_Freereg.Checked == true)
            {
                if (txtRecType.Text == "VHREG")
                {
                    ActualRegAmount = Convert.ToDecimal(txtPayment.Text);
                    txtPayment.Text = "0.00";                    
                }
            }
            else
            {
                if (txtRecType.Text == "VHREG")
                {
                    txtPayment.Text = txtBalance.Text;
                }
            }
        }

        private void btnCloseJob_Click(object sender, EventArgs e)
        {
            txtJobNo.Text = "";
            txtJobItm.Text = "";
            dgvGrade.DataSource = null;
            pnlJob.Visible = false;
        }

        private void btnJob_Click(object sender, EventArgs e)
        {
            if (!CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 10148))
            {
                MessageBox.Show("Sorry, You have no permission for pick a job!\n( Advice: Required permission code :10148)", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
            }
            pnlJob.Visible = true;
        }

        private void btn_srch_jobno_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                CommonSearch.CommonSearchDate _CommonSearch = new CommonSearch.CommonSearchDate();
                _CommonSearch.ReturnIndex = 1;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ServiceJobSearch);
                DateTime dtTemp = DateTime.Today.AddMonths(-1);
                DataTable _result = CHNLSVC.CommonSearch.GetServiceJobs(_CommonSearch.SearchParams, null, null, dtTemp, DateTime.Today);
                _CommonSearch.dtpFrom.Value = dtTemp;
                _CommonSearch.dtpTo.Value = DateTime.Today;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtJobNo;
                this.Cursor = Cursors.Default;
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.ShowDialog();
                txtJobNo.Select();
                txtJobNo_Leave(null, null);
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void txtJobNo_Leave(object sender, EventArgs e)
        {
            string _coment = "";
            txtJobItm.Text = "";
            dgvGrade.DataSource = null;
            if (!string.IsNullOrEmpty(txtJobNo.Text))
            {
                //check already pick for a receipt
                DataTable _dtrec = CHNLSVC.CustService.get_receipt_byjobno(BaseCls.GlbUserComCode, txtJobNo.Text);
                if (_dtrec.Rows.Count > 0)
                {
                    MessageBox.Show("Already pick this job # for GV issue.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                List<Service_job_Det> _JobDet = new List<Service_job_Det>();
                _JobDet = CHNLSVC.CustService.GetPcJobDetails(BaseCls.GlbUserComCode, null, txtJobNo.Text.Trim());
                if (_JobDet != null && _JobDet.Count > 0)
                {
                    DataTable _dtJobHdr = new DataTable();
                    _dtJobHdr = CHNLSVC.CustService.get_JobHeader(txtJobNo.Text);
                    txtCusCode.Text = _dtJobHdr.Rows[0]["sjb_cust_cd"].ToString();
                    if (!string.IsNullOrEmpty(txtCusCode.Text))
                        txtCusCode_Leave(null, null);

                    List<Service_Job_Tech_Comments> oMainListCommnets = CHNLSVC.CustService.GetServiceJobTechComments(0, txtJobNo.Text, 0);
                    foreach (Service_Job_Tech_Comments ins in oMainListCommnets)
                    {
                        if (string.IsNullOrEmpty(_coment))
                            _coment = ins.JTC_CMT_RMK;
                        else
                            _coment = _coment + "," + ins.JTC_CMT_RMK;
                    }
                    txtComent.Text = _coment;

                    foreach (Service_job_Det _jDet in _JobDet)
                    {
                        txtJobItm.Text = _jDet.Jbd_itm_cd;

                        DataTable _dt = CHNLSVC.CustService.Get_Job_Item_grade_Val(BaseCls.GlbUserComCode, DateTime.Now.Date, txtJobItm.Text);
                        dgvGrade.AutoGenerateColumns = false;
                        dgvGrade.DataSource = _dt;
                    }
                }
                else
                {
                    MessageBox.Show("Invalid Job Number", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
                    txtJobNo.Text = "";
                }
            }
        }

        private void txtJobNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtJobNo_Leave(null, null);
        }

        private void dgvGrade_CellContentDoubleClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dgvGrade_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == 0 && e.RowIndex != -1)
            {
                decimal _val = Convert.ToDecimal(dgvGrade.Rows[e.RowIndex].Cells["migd_val"].Value);
                txtPgAmt.Text = _val.ToString("0.00");
            }
        }

        private void cmbGVPrefix_SelectedIndexChanged(object sender, EventArgs e)
        {
            cmbGvBook.DataSource = new DataTable();
            if (!string.IsNullOrEmpty(txtGVCode.Text))
            {
                DataTable _book = CHNLSVC.Inventory.GetAvailableGvBooks(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "VALUE", "P", txtGVCode.Text.Trim(), cmbGVPrefix.Text);

                if (_book != null)
                {
                    cmbGvBook.DataSource = _book;
                    cmbGvBook.ValueMember = "GVP_BOOK";
                    cmbGvBook.DisplayMember = "GVP_BOOK";

                }
            }
        }

        //add by akila 2016/12/15
        private string SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType _type, string _status, string _profitCenter = null)
        {
            StringBuilder paramsText = new StringBuilder();
            string seperator = "|";

            try
            {
                paramsText.Append(((int)_type).ToString() + ":");

                switch (_type)
                {
                    case CommonUIDefiniton.SearchUserControlType.HpAccount:
                        { paramsText.Append(BaseCls.GlbUserComCode + seperator + _profitCenter.ToUpper() + seperator + _status + seperator); break; }
                    case CommonUIDefiniton.SearchUserControlType.AllProfitCenters:
                        { paramsText.Append(BaseCls.GlbUserComCode + seperator); break; }
                    default:
                        break;
                }
            }
            catch (Exception)
            {

                throw;
            }

            return paramsText.ToString();
        }

        //add by akila 2016/12/15
        private string GetHpAccountSeq(string _profitCenter = null)
        {
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
            _CommonSearch.ReturnIndex = 0;
            DataTable _result = new DataTable();
            string _hpAccountSeq = null;

            try
            {
                if (_profitCenter == null)
                {
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.AllProfitCenters);
                    _result = CHNLSVC.CommonSearch.GetPC_SearchData(_CommonSearch.SearchParams, null, null);
                }
                else
                {
                    _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.HpAccount, "R", _profitCenter);
                    _result = CHNLSVC.CommonSearch.GetHpAccountSearchData(_CommonSearch.SearchParams, null, null);
                }

                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtInvoice;
                _CommonSearch.ShowDialog();
                _hpAccountSeq = txtInvoice.Text;
            }
            catch (Exception)
            {

                throw;
            }
            return _hpAccountSeq;
        }

        //add by akila 2016/12/15
        private void PrepareUiForSubRecTp(string _receiptType, string _subReceiptType)
        {
            try
            {
                if (_receiptType == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if (!string.IsNullOrEmpty(_subReceiptType))
                    {
                        switch ((MstRecSubTp.ReceiptTypes)Enum.Parse(typeof(MstRecSubTp.ReceiptTypes), _subReceiptType))
                        {
                            case MstRecSubTp.ReceiptTypes.NOR:
                                pnlIntrLocation.Visible = false;
                                txtIntrLocation.Enabled = false;
                                pnlIntrCompany.Visible = false;
                                txtIntrCompany.Enabled = false;
                                panelHP.Enabled = false;
                                pnlQuo.Visible = true;
                                pnlQuo.Enabled = false;
                                btn_add_ser.Enabled = true;
                                gbItem.Visible = false;
                                gbInsu.Visible = false;
                                lblInvoice.Text = "Invoice#";
                                txtInvoice.Text = null;
                                txtInvoice.Enabled = false;
                                lblAmount.Text = "Balance";
                                txtBalance.Text = "0.00";
                                txtBalance.Enabled = false;
                                pnlInvoice.Visible = false;
                                pnlAmount.Visible = false;
                                ReceiptSettingList = GetReceiptSettings(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _receiptType, _subReceiptType);
                                break;

                            case MstRecSubTp.ReceiptTypes.TRAV:
                                pnlIntrLocation.Visible = false;
                                txtIntrLocation.Enabled = false;
                                pnlIntrCompany.Visible = false;
                                txtIntrCompany.Enabled = false;
                                panelHP.Enabled = false;
                                pnlQuo.Visible = true;
                                pnlQuo.Enabled = false;
                                btn_add_ser.Enabled = true;
                                gbItem.Visible = false;
                                gbInsu.Visible = false;
                                lblInvoice.Text = "Invoice#";
                                txtInvoice.Text = null;
                                txtInvoice.Enabled = false;
                                lblAmount.Text = "Balance";
                                txtBalance.Text = "0.00";
                                txtBalance.Enabled = false;
                                pnlInvoice.Visible = false;
                                pnlAmount.Visible = false;
                                ReceiptSettingList = GetReceiptSettings(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _receiptType, _subReceiptType);
                                break;

                            case MstRecSubTp.ReceiptTypes.PRCDF:
                                pnlIntrLocation.Visible = false;
                                txtIntrLocation.Enabled = false;
                                pnlIntrCompany.Visible = false;
                                txtIntrCompany.Enabled = false;
                                pnlQuo.Enabled = false;
                                pnlQuo.Visible = true;
                                btn_add_ser.Enabled = false;
                                gbItem.Visible = false;
                                gbInsu.Visible = false;
                                lblInvoice.Text = "Invoice#";
                                txtInvoice.Text = null;
                                txtInvoice.ReadOnly = false;
                                txtInvoice.Enabled = true;
                                lblAmount.Text = "Balance";
                                txtBalance.Text = "0.00";
                                txtBalance.ReadOnly = true;
                                txtBalance.BackColor = Color.White;
                                txtBalance.Enabled = true;
                                pnlInvoice.Visible = true;
                                pnlAmount.Visible = true;
                                ReceiptSettingList = GetReceiptSettings(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _receiptType, _subReceiptType);
                                break;

                            case MstRecSubTp.ReceiptTypes.RVT:
                                pnlIntrLocation.Visible = false;
                                txtIntrLocation.Enabled = false;
                                pnlIntrCompany.Visible = false;
                                txtIntrCompany.Enabled = false;
                                pnlQuo.Enabled = false;
                                pnlQuo.Visible = true;
                                btn_add_ser.Enabled = false;
                                txtInvoice.ReadOnly = true;
                                txtInvoice.BackColor = Color.White;
                                txtInvoice.Enabled = true;
                                lblInvoice.Text = "Account#";
                                txtInvoice.Text = null;
                                lblAmount.Text = "Amount";
                                txtBalance.Text = "0.00";
                                txtBalance.Enabled = true;
                                txtBalance.ReadOnly = true;
                                txtBalance.BackColor = Color.White;
                                gbItem.Visible = false;
                                gbInsu.Visible = false;
                                pnlInvoice.Visible = true;
                                pnlAmount.Visible = true;
                                ReceiptSettingList = GetReceiptSettings(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _receiptType, _subReceiptType);
                                break;

                            case MstRecSubTp.ReceiptTypes.INTR:
                                pnlIntrLocation.Visible = true;
                                txtIntrLocation.Enabled = true;
                                pnlIntrCompany.Visible = true;
                                txtIntrCompany.Enabled = true;
                                panelHP.Enabled = false;
                                pnlQuo.Visible = true;
                                pnlQuo.Enabled = false;
                                btn_add_ser.Enabled = true;
                                gbItem.Visible = false;
                                gbInsu.Visible = false;
                                lblInvoice.Text = "Invoice#";
                                txtInvoice.Text = null;
                                txtInvoice.Enabled = false;
                                lblAmount.Text = "Balance";
                                txtBalance.Text = "0.00";
                                txtBalance.Enabled = false;
                                pnlInvoice.Visible = false;
                                pnlAmount.Visible = false;
                                ReceiptSettingList = GetReceiptSettings(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _receiptType, _subReceiptType);
                                break;

                            case MstRecSubTp.ReceiptTypes.JOB:
                                pnlIntrLocation.Visible = false;
                                txtIntrLocation.Enabled = false;
                                pnlIntrCompany.Visible = false;
                                txtIntrCompany.Enabled = false;
                                pnlQuo.Enabled = false;
                                pnlQuo.Visible = true;
                                btn_add_ser.Enabled = false;
                                gbItem.Visible = false;
                                gbInsu.Visible = false;
                                lblInvoice.Text = "Job No ";
                                txtInvoice.Text = null;
                                txtInvoice.ReadOnly = false;
                                txtInvoice.Enabled = true;
                                lblAmount.Text = "Balance";
                                txtBalance.Text = "0.00";
                                txtBalance.ReadOnly = true;
                                txtBalance.BackColor = Color.White;
                                txtBalance.Enabled = true;
                                pnlInvoice.Visible = true;
                                pnlAmount.Visible = false;
                                ReceiptSettingList = GetReceiptSettings(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _receiptType, _subReceiptType);
                                break;
                        }
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        //add by akila 216/12/16
        private string GetHpAccountNo(string _profitCenter)
        {
            string _hpAccountNo = null;
            try
            {
                List<HpAccount> _accountList = new List<HpAccount>();
                string _hpAccountSeq = GetHpAccountSeq(_profitCenter);
                if (!string.IsNullOrEmpty(_hpAccountSeq))
                {
                    _accountList = CHNLSVC.Sales.GetHP_Accounts(BaseCls.GlbUserComCode, _profitCenter, _hpAccountSeq, null);
                    if (_accountList != null)
                    {
                        foreach (HpAccount account in _accountList)
                        {
                            _hpAccountNo = account.Hpa_acc_no;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Account details couldn't find", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtCusCode.Focus();
                    }
                }                
            }
            catch (Exception)
            {
                throw;
            }
            return _hpAccountNo;
        }

        //Add by akila 2016/12/16
        private void UpdateBalance(string _receiptType, string _subReceiptType)
        {
            if (_receiptType == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            {
                if (_subReceiptType == MstRecSubTp.ReceiptTypes.RVT.ToString())
                {
                    if (!string.IsNullOrEmpty(txtInvoice.Text))
                    {
                        //get account balance
                        Decimal accBalance = CHNLSVC.Sales.Get_AccountBalance(CHNLSVC.Security.GetServerDateTime().Date, txtInvoice.Text);
                        if (accBalance > 0)
                        {
                            txtBalance.Text = accBalance.ToString();
                            txtPayment.Enabled = true;
                            txtPayment.ReadOnly = false;
                            txtPayment.Focus();
                        }
                        else
                        {
                            MessageBox.Show("Customer has already settled the balance amount", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtInvoice.Focus();
                            return;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Account number cannot be blank. Please select an account number", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtInvoice.Focus();
                        return;
                    }
                }
            }
        }

        //Add by akila 2016/12/16
        private void LoadHPCustomer(string _comCode, string _hpAccountNo)
        {
            DataTable _hpCustomers = new DataTable();
            try
            {
                _hpCustomers = CHNLSVC.Sales.GetHPCustomerDet(_comCode, _hpAccountNo);
                if (_hpCustomers.Rows.Count > 0)
                {
                    txtCusCode.Text = _hpCustomers.Rows[0]["mbe_cd"].ToString();
                    LoadCustomerDetails();
                    grpCustomer.Enabled = false;
                }
                else
                {
                    DialogResult _result = MessageBox.Show("Customer information not found." + Environment.NewLine + "Do you want to continue ?", "Receipt Entry", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                    if (_result == DialogResult.No)
                    {
                        txtInvoice.Focus();
                        return;
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //add by akila 2016/12/20
        private bool IsValidReceiptDetails(string _subReceiptType)
        {
            bool _isValid = true;

            try
            {
                if (ReceiptSettingList.Count > 0)
                {


                    switch ((MstRecSubTp.ReceiptTypes)Enum.Parse(typeof(MstRecSubTp.ReceiptTypes), _subReceiptType))
                    {
                        case MstRecSubTp.ReceiptTypes.ADVAN:
                            break;

                        case MstRecSubTp.ReceiptTypes.NOR:
                        {
                            if (string.IsNullOrEmpty(txtRecType.Text)) { MessageBox.Show("Receipt type cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (string.IsNullOrEmpty(txtSubReceiptTp.Text)) { MessageBox.Show("Please select receipt sub type", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (string.IsNullOrEmpty(txtCusCode.Text)) { MessageBox.Show("Please selecta a valid customer", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (txtCusCode.Text == "CASH") { MessageBox.Show("Customer code [CASH] is invalid", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }

                            if (gvInvoiceItem.Rows.Count > 0)
                            {
                                BindingSource _bind = (BindingSource)gvInvoiceItem.DataSource;
                                List<InvoiceItem> _tmpItemList = new List<InvoiceItem>();
                                _tmpItemList = _bind.DataSource as List<InvoiceItem>;

                                foreach (MstRecSubTp _setting in ReceiptSettingList)
                                {
                                    if (_tmpItemList != null)
                                    {
                                        decimal _totalItemCount = _tmpItemList.Where(x => x.Sad_unit_rt > 0).Sum(x => x.Sad_qty);
                                        if (_totalItemCount > _setting.MinItemCount)
                                        {
                                            MessageBox.Show("Item quanity has exceeded the minimum quanity. Minimum item quantity is " + _setting.MinItemCount.ToString(), "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            return false;
                                        }

                                        foreach (InvoiceItem _item in _tmpItemList)
                                        {
                                            if ((_item.Mi_is_ser1 == 1) && (_setting.IsSerialCompulsory == 1) && (_item.Sad_job_no == string.Empty) && (_item.Sad_unit_rt > 0))
                                            {
                                                MessageBox.Show("Serial number is mandatory [Item - " + _item.Sad_itm_cd + "]", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                            else { MessageBox.Show("Please add an item ", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }

                            break;
                        }
                        case MstRecSubTp.ReceiptTypes.TRAV:
                        {
                            if (string.IsNullOrEmpty(txtRecType.Text)) { MessageBox.Show("Receipt type cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (string.IsNullOrEmpty(txtSubReceiptTp.Text)) { MessageBox.Show("Please select receipt sub type", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (string.IsNullOrEmpty(txtCusCode.Text)) { MessageBox.Show("Please selecta a valid customer", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (txtCusCode.Text == "CASH") { MessageBox.Show("Customer code [CASH] is invalid", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }

                            if (gvInvoiceItem.Rows.Count > 0)
                            {
                                BindingSource _bind = (BindingSource)gvInvoiceItem.DataSource;
                                List<InvoiceItem> _tmpItemList = new List<InvoiceItem>();
                                _tmpItemList = _bind.DataSource as List<InvoiceItem>;

                                foreach (MstRecSubTp _setting in ReceiptSettingList)
                                {
                                    if (_tmpItemList != null)
                                    {
                                        decimal _totalItemCount = _tmpItemList.Where(x => x.Sad_unit_rt > 0).Sum(x => x.Sad_qty);
                                        if (_totalItemCount > _setting.MinItemCount)
                                        {
                                            MessageBox.Show("Item quanity has exceeded the minimum quanity. Minimum item quantity is " + _setting.MinItemCount.ToString(), "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            return false;
                                        }

                                        foreach (InvoiceItem _item in _tmpItemList)
                                        {
                                            if ((_item.Mi_is_ser1 == 1) && (_setting.IsSerialCompulsory == 1) && (_item.Sad_job_no == string.Empty) && (_item.Sad_unit_rt > 0))
                                            {
                                                MessageBox.Show("Serial number is mandatory [Item - " + _item.Sad_itm_cd + "]", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                            else { MessageBox.Show("Please add an item ", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            break;
                        }

                        case MstRecSubTp.ReceiptTypes.PRCDF:
                        {
                            if (string.IsNullOrEmpty(txtInvoice.Text)) { MessageBox.Show("Invoice number cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (string.IsNullOrEmpty(txtCusCode.Text)) { MessageBox.Show("Customer code cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (txtCusCode.Text == "CASH") { MessageBox.Show("Customer code [CASH] is invalid", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            break;
                        }

                        case MstRecSubTp.ReceiptTypes.RVT:
                        {
                            if (string.IsNullOrEmpty(txtInvoice.Text)) { MessageBox.Show("Account number cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            else if (Convert.ToDouble(ucPayModes1.PaidAmountLabel.Text) > Convert.ToDouble(txtBalance.Text)) { MessageBox.Show("Total paid amount cannot exceed the balance amount", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            break;
                        }

                        case MstRecSubTp.ReceiptTypes.INTR:
                        {
                            if (string.IsNullOrEmpty(txtRecType.Text)) { MessageBox.Show("Receipt type cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (string.IsNullOrEmpty(txtSubReceiptTp.Text)) { MessageBox.Show("Please select receipt sub type", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (string.IsNullOrEmpty(txtCusCode.Text)) { MessageBox.Show("Please selecta a valid customer", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (txtCusCode.Text == "CASH") { MessageBox.Show("Customer code [CASH] is invalid", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (string.IsNullOrEmpty(txtIntrLocation.Text)) { MessageBox.Show("Please select a location", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }

                            if (gvInvoiceItem.Rows.Count > 0)
                            {
                                BindingSource _bind = (BindingSource)gvInvoiceItem.DataSource;
                                List<InvoiceItem> _tmpItemList = new List<InvoiceItem>();
                                _tmpItemList = _bind.DataSource as List<InvoiceItem>;

                                foreach (MstRecSubTp _setting in ReceiptSettingList)
                                {
                                    if (_tmpItemList != null)
                                    {
                                        decimal _totalItemCount = _tmpItemList.Where(x => x.Sad_unit_rt > 0).Sum(x => x.Sad_qty);
                                        if (_totalItemCount > _setting.MinItemCount)
                                        {
                                            MessageBox.Show("Item quanity has exceeded the minimum quanity. Minimum item quantity is " + _setting.MinItemCount.ToString(), "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            return false;
                                        }

                                        foreach (InvoiceItem _item in _tmpItemList)
                                        {
                                            if ((_item.Mi_is_ser1 == 1) && (_setting.IsSerialCompulsory == 1) && (_item.Sad_job_no == string.Empty) && (_item.Sad_unit_rt > 0))
                                            {
                                                MessageBox.Show("Serial number is mandatory [Item - " + _item.Sad_itm_cd + "]", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                return false;
                                            }
                                        }
                                    }
                                }
                            }
                            else { MessageBox.Show("Please add an item ", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            break;
                        }
                        case MstRecSubTp.ReceiptTypes.JOB:
                        {
                            if (string.IsNullOrEmpty(txtInvoice.Text)) { MessageBox.Show("Job number cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (string.IsNullOrEmpty(txtCusCode.Text)) { MessageBox.Show("Customer code cannot be blank", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            if (txtCusCode.Text == "CASH") { MessageBox.Show("Customer code [CASH] is invalid", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                                if (Convert.ToDouble(ucPayModes1.TotalAmount) < 1) { MessageBox.Show("Invalid payment. Paymount amount cannot be zero or a negative", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
                            break;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Advance receipt parameters has not define", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An errorr occurred while validating advance receipt details !" + Environment.NewLine + ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
                _isValid = false;
            }

            return _isValid;
        }

        private List<MstRecSubTp> GetReceiptSettings(string _companyCode, string _profitCenter, string _receiptType, string _subReceiptType, string _itemCategory = null)
        {
            List<MstRecSubTp> _settings = new List<MstRecSubTp>();
            try
            {
                DataTable _receiptSettings = new DataTable();
                _receiptSettings = CHNLSVC.Sales.GetAdvanReceiptSettings(_companyCode, _profitCenter, _receiptType, _subReceiptType, _itemCategory);
                if (_receiptSettings.Rows.Count > 0)
                {
                    _settings = DataTableExtensions.ToGenericList<MstRecSubTp>(_receiptSettings, MstRecSubTp.Converter);
                }
                //else
                //{
                //    MessageBox.Show("Advance receipt parameters has not define", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //    txtRecType.Focus();
                //}
            }
            catch (Exception ex)
            {
                MessageBox.Show("An errorr occurred while loading advance receipt parameters!" + Environment.NewLine + ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1);
                CHNLSVC.CloseChannel();
                txtRecType.Focus();
            }
            return _settings;
        }

        private void GetInvoiceNumber(string _customerCode)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceWithoutReversal);
                DataTable _result = CHNLSVC.CommonSearch.GetInvoiceWithoutReversal(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtInvoice;
                _CommonSearch.ShowDialog();
                txtInvoice.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while loading invoices !" + Environment.NewLine + ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private bool IsValidItem()
        {
            bool _isValid = true;

            try
            {
                if (txtRecType.Text.ToUpper() == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if (_invoiceItemList.Count > 0)
                    {
                        //Get all the item category from selected items
                        List<string> _tmpList = _invoiceItemList.GroupBy(_list => _list.Mi_cate_1).Select(_list => _list.Key).ToList();

                        //check receipt setting from each category type
                        string _inClause = null;
                        foreach (string _category in _tmpList)
                        {
                            _inClause += string.Format("{0},", _category);
                        }
                        _inClause = _inClause.Remove((_inClause.Length) - 1);

                        ReceiptSettingList = new List<MstRecSubTp>();
                        ReceiptSettingList = GetReceiptSettings(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecType.Text, txtSubReceiptTp.Text, _inClause);
                        if (ReceiptSettingList.Count == 0)
                        {
                            ReceiptSettingList = GetReceiptSettings(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtRecType.Text, txtSubReceiptTp.Text, null);
                        }

                        if (ReceiptSettingList.Count > 0)
                        {
                            decimal _totalItemQty = 0;

                            foreach (MstRecSubTp _setting in ReceiptSettingList)
                            {
                                foreach (InvoiceItem _item in _invoiceItemList)
                                { 
                                    if ((_item.Mi_cate_1 != _setting.ItemCategory) && (!string.IsNullOrEmpty(_setting.ItemCategory)))
                                    {
                                        MessageBox.Show("Item cannot be added !" + Environment.NewLine + "Item [" + _item.Sad_itm_cd + "] belongs to different category. Please use a separate receipt", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                                        RemoveItemOnError(TxtAdvItem.Text, txtSerialNo.Text);                                     
                                        TxtAdvItem.Focus();
                                        return false;
                                    }

                                    if ((_item.Mi_is_ser1 == 1) && (_setting.IsSerialCompulsory == 1) && (_item.Sad_job_no == string.Empty) && (_item.Sad_unit_rt > 0) && (_item.Sad_unit_rt > 0))
                                    {
                                        MessageBox.Show("Serial number is mandatory ", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        RemoveItemOnError(TxtAdvItem.Text, txtSerialNo.Text);   
                                        txtSerialNo.Focus();
                                        return false;
                                    }

                                    if (_item.Sad_unit_rt > 0)
                                    {
                                        _totalItemQty += _item.Sad_qty;
                                        if (_totalItemQty > _setting.MinItemCount)
                                        {
                                            MessageBox.Show("Item quanity has exceeded the minimum quanity. Minimum item quantity is " + _setting.MinItemCount.ToString(), "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            RemoveItemOnError(TxtAdvItem.Text, txtSerialNo.Text);                                               
                                            txtQty.Focus();
                                            return false;
                                        }
                                    }

                                    if (_item.Sad_unit_rt > 0)
                                    {
                                        double _minUnitPrice = Convert.ToDouble(_item.Sad_unit_rt * _item.Sad_qty);
                                        if (_setting.MinimumBillValue > _minUnitPrice)
                                        {
                                            MessageBox.Show("Unit amount didn't reach the minimum amount. Minimum unit amount is " + _setting.MinimumBillValue.ToString("N2"), "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            RemoveItemOnError(TxtAdvItem.Text, txtSerialNo.Text);     
                                            TxtAdvItem.Focus();
                                            return false;
                                        }
                                    }

                                }

                                #region Old code
                                ////Check for different categoris
                                //if (!string.IsNullOrEmpty(_setting.ItemCategory))
                                //{
                                //    List<string> _item = _invoiceItemList.Where(x => x.Mi_cate_1 != _setting.ItemCategory).Select(x => x.Sad_itm_cd).ToList();
                                //    if (_item.Count > 0)
                                //    {
                                //        MessageBox.Show("Item cannot be added !" + Environment.NewLine + "Item [" + _item[0] + "] belongs to different category. Please use a separate receipt", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                                //        RemoveItemOnError(_item[0]);
                                //        TxtAdvItem.Focus();
                                //        return false;
                                //    }
                                //}

                                ////check for serail numbers
                                //int _isSerailaItem = _invoiceItemList.Where(x => x.Sad_itm_cd == txtItem.Text).Select(x =>x.Mi_is_ser1).First();
                                //if ((_isSerailaItem == 1) && (_setting.IsSerialCompulsory == 1) && (string.IsNullOrEmpty(txtSerialNo.Text)))
                                //{
                                //    MessageBox.Show("Serial number is mandatory ", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                //    txtSerialNo.Focus();
                                //    return false;
                                //}

                                //check total item count
                                //decimal _totalItemCount = _invoiceItemList.Where(x => x.Sad_unit_rt > 0).Sum(x => x.Sad_qty);
                                //if (_totalItemCount > _setting.MinItemCount)
                                //{
                                //    MessageBox.Show("Item quanity has exceeded the minimum quanity. Minimum item quantity is " + _setting.MinItemCount.ToString(), "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                //    txtQty.Focus();
                                //    return false;
                                //}

                                ////check minimum item price
                                //foreach (InvoiceItem _item in _invoiceItemList)
                                //{
                                //    if (_item.Sad_unit_rt > 0)
                                //    {
                                //        decimal _minUnitPrice = (_item.Sad_unit_rt * _item.Sad_qty);
                                //        if ((_setting.MinimumBillValue > Convert.ToDouble(_minUnitPrice)))
                                //        {
                                //            MessageBox.Show("Unit amount didn't reach the minimum amount. Minimum unit amount is " + _setting.MinimumBillValue.ToString(), "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                //            TxtAdvItem.Focus();
                                //            return false;
                                //        }
                                //    }
                                //} 
                                #endregion
                            }
                        }
                        else
                        {
                            MessageBox.Show("Advance receipt parameters has not define", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return false;
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while validating item details !" + Environment.NewLine + ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error);
                _isValid = false;
            }

            return _isValid;
        }

        private double CalculateMiniPayableAmt()
        {
            double _totalBillValue = 0.00;
            double _payableAmt = 0.00;

            try
            {
                _totalBillValue = double.Parse(lblGrndTotalAmount.Text);

                if (_totalBillValue > 0)
                {
                    if (ReceiptSettingList.Count > 0)
                    {
                        foreach (MstRecSubTp _setting in ReceiptSettingList)
                        {
                            if (_setting.MinimunItemPrice > 0) { _payableAmt += (_totalBillValue * _setting.MinimunItemPrice) / 100; }
                            else { _payableAmt += 0; }
                            //else { _payableAmt += _totalBillValue; } if the setting amount is 0 user can enter any value
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error occurred while calculating minimum payable amount" + Environment.NewLine + ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return Math.Round(_payableAmt, 2);
        }

        private void txtSerialNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Serial_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                TxtAdvItem.Focus();
        }

        private void txtIntrProfitCenter_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.F2)
            {
                txtIntrLocation_DoubleClick(null, null);
            }
            else if (e.KeyCode == Keys.Enter)
            {
                txtSerialNo.Focus();
            }
        }

        private void txtIntrProfitCenter_Leave(object sender, EventArgs e)
        {
            if (txtRecType.Text.ToUpper() == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            {
                if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString())
                {
                    //if (string.IsNullOrEmpty(txtIntrLocation.Text))
                    //{
                    //    MessageBox.Show("Please select a location", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //    return;
                    //}
                    //else
                    //{
                    if (!string.IsNullOrEmpty(txtIntrLocation.Text))
                    {
                        MasterLocation _location = CHNLSVC.General.GetLocationByLocCode(null, txtIntrLocation.Text);
                        if (_location == null)
                        {
                            MessageBox.Show("Location not found. Please select a valid location", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            txtIntrLocation.Text = null;
                            txtIntrLocation.Focus();
                            return;
                        }
                        else { IntrCompanyCode = _location.Ml_com_cd; }
                    }
                        
                    //}
                }
            }
        }

        private void txtIntrCompany_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
            {
                if (txtRecType.Text.ToUpper() == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
                {
                    if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString())
                    {
                        txtIntrCompany_DoubleClick(null, null);
                    }
                }

            }
            else if (e.KeyCode == Keys.Enter)
            {
                txtIntrLocation.Focus();
            }
        }

        private void txtIntrCompany_Leave(object sender, EventArgs e)
        {
            if (txtRecType.Text.ToUpper() == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            {
                if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString())
                {
                    //if (string.IsNullOrEmpty(txtIntrCompany.Text))
                    //{
                    //    MessageBox.Show("Please select a company", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //    return;
                    //}
                    //else
                    //{
                    if (!string.IsNullOrEmpty(txtIntrCompany.Text))
                    {
                        DataTable _company = CHNLSVC.General.GetCompanyByCode(txtIntrCompany.Text);
                        if (_company.Rows.Count == 0)
                        {
                            MessageBox.Show("Company code not found. Please select a valid company", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            txtIntrCompany.Text = null;
                            txtIntrCompany.Focus();
                            return;
                        }
                    }
                        
                    //}
                }
            }
        }

        private void cmbBook_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                cmbLevel.Focus();
            }
        }

        private void cmbLevel_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                cmbStatus.Focus();
            }
        }

        private void cmbStatus_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtQty.Focus();
            }
        }

        private void txtQty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtDisRate.Focus();
            }
        }

        private void txtDisRate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtDisAmt.Focus();
            }
        }

        private void txtDisAmt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnAddItem.Focus();
                btnAddItem.Select();
            }
        }

        private void btnAddItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnAddItem_Click(null, null);
            }
        }

        private void txtUnitPrice_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtDisRate.Focus();
            }
        }

        private void txtSubReceiptTp_DoubleClick(object sender, EventArgs e)
        {
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SubReceiptTypes);
            DataTable _result = CHNLSVC.CommonSearch.GetSubReceiptTypes(_CommonSearch.SearchParams, null, null);
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtSubReceiptTp;
            _CommonSearch.ShowDialog();
            txtSubReceiptTp.Select();
        }

        private void txtSubReceiptTp_KeyDown(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.F2) && (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString()))
            {
                txtSubReceiptTp_DoubleClick(null, null);
            }
            if ((e.KeyCode == Keys.Enter) && (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString()))
            {
                txtDivision.Focus();
            }
        }

        private void txtSubReceiptTp_Leave(object sender, EventArgs e)
        {
            

            if (txtRecType.Text == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            {
                if (!string.IsNullOrEmpty(txtSubReceiptTp.Text))
                {
                    if (!IsValidSubReceiptType(txtSubReceiptTp.Text.ToUpper()))
                    {
                        txtSubReceiptTp.Focus();
                        return;
                    }
                }

                PrepareUiForSubRecTp(txtRecType.Text, txtSubReceiptTp.Text.ToUpper());
                txtSubReceiptTp.Enabled = false;
                txtRecType.Enabled = false;
            }
        }

        private void toolStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void btnInvComSerTotConfirm_Click(object sender, EventArgs e)
        {

        }

        private void RemoveItemOnError(string _itemCode, string _serial = null)
        {
            try
            {
                List<InvoiceItem> _tempList = _invoiceItemList;
                var _promo = (from _pro in _invoiceItemList
                              where _pro.Sad_is_promo == true && (_pro.Sad_promo_cd != null || _pro.Sad_promo_cd != string.Empty)
                              select _pro).ToList();

                if (_promo.Count() > 0)
                {
                    foreach (InvoiceItem code in _promo)
                    {
                        _invoiceItemList.Remove(_invoiceItemList.Single(x => x.Sad_itm_cd == code.Sad_itm_cd));
                    }
                }
                else
                {
                    int count = _invoiceItemList.Where(x => x.Sad_original_itemcd == _itemCode && x.Sad_job_no == _serial && x.Sad_qty > 1).Select(x => x.Sad_itm_cd).Count();
                    if (count > 0)
                    {
                        (from invoice in _invoiceItemList
                         where invoice.Sad_original_itemcd == _itemCode
                         select invoice).ToList().ForEach(invoice => invoice.Sad_qty -= 1);

                        (from invoice in _invoiceItemList
                         where invoice.Sad_original_itemcd == _itemCode
                         select invoice).ToList().ForEach(invoice => invoice.Sad_tot_amt -= decimal.Parse(txtLineTotAmt.Text));

                        (from invoice in _invoiceItemList
                         where invoice.Sad_original_itemcd == _itemCode
                         select invoice).ToList().ForEach(invoice => invoice.Sad_unit_amt -= decimal.Parse(txtUnitAmt.Text));
                        //add by tharanga 2017/11/06
                        if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                        {
                             _invoiceItemList.RemoveAll(item => item.Sad_itm_cd == _itemCode);
                        }
                    }
                    else
                    {
                        count = _invoiceItemList.Where(x => x.Sad_original_itemcd == _itemCode && x.Sad_job_no == _serial).Select(x => x.Sad_itm_cd).Count();
                        if (count > 1)
                        {
                            _invoiceItemList.RemoveAll(item => item.Sad_original_itemcd == _itemCode && item.Sad_job_no == _serial);
                        }
                        else
                        {
                            _invoiceItemList.Remove(_invoiceItemList.Single(x => x.Sad_original_itemcd == _itemCode && x.Sad_job_no == _serial));
                        }
                        
                    }
                }

            }
            catch (Exception)
            {
                throw;
            }
            BindAddItem();
        }

        private bool IsValidSubReceiptType(string _subReceiptType)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SubReceiptTypes);
                DataTable _result = CHNLSVC.CommonSearch.GetSubReceiptTypes(_CommonSearch.SearchParams, null, null);
                if (_result.Rows.Count > 0)
                {                   
                    int count = _result.AsEnumerable().Where(x => x.Field<string>("Code") == _subReceiptType).Count();
                    if (count > 0)
                    {
                        return true;
                    }
                    else
                    {
                        MessageBox.Show("Invalid receipt sub type", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        txtSubReceiptTp.Text = null;
                        return false;
                    }
                   
                }
                else { MessageBox.Show("Receipt information not found. Please check the definition", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning); return false; }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while validating sub receipt type. " + Environment.NewLine + ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }

        private void txtIntrCompany_DoubleClick(object sender, EventArgs e)
        {

            if (txtRecType.Text.ToUpper() == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            {
                if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString())
                {
                    try
                    {
                        CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                        _CommonSearch.ReturnIndex = 0;
                        _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Company);
                        DataTable _result = CHNLSVC.CommonSearch.GetCompanySearchData(_CommonSearch.SearchParams, null, null);
                        _CommonSearch.dvResult.DataSource = _result;
                        _CommonSearch.BindUCtrlDDLData(_result);
                        _CommonSearch.obj_TragetTextBox = txtIntrCompany;
                        _CommonSearch.ShowDialog();
                        txtIntrLocation.Select();
                    }
                    catch (Exception ex)
                    {
                        Cursor.Current = Cursors.Default;
                        CHNLSVC.CloseChannel();
                        MessageBox.Show("Error occurred while loadding profit center" + Environment.NewLine + ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }            
        }

        private void txtIntrLocation_DoubleClick(object sender, EventArgs e)
        {
            if (txtRecType.Text.ToUpper() == MstRecSubTp.ReceiptTypes.ADVAN.ToString())
            {
                if (txtSubReceiptTp.Text == MstRecSubTp.ReceiptTypes.INTR.ToString())
                {
                    
                    if (string.IsNullOrEmpty(txtIntrCompany.Text))
                    {
                        MessageBox.Show("Please select a company", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }


                    try
                    {
                        CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
                        _CommonSearch.ReturnIndex = 0;
                        _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Location);
                        DataTable _result = CHNLSVC.CommonSearch.GetLocationSearchData(_CommonSearch.SearchParams, null, null);
                        _CommonSearch.dvResult.DataSource = _result;
                        _CommonSearch.BindUCtrlDDLData(_result);
                        _CommonSearch.obj_TragetTextBox = txtIntrLocation;
                        _CommonSearch.ShowDialog();
                        txtIntrLocation.Select();
                    }
                    catch (Exception ex)
                    {
                        Cursor.Current = Cursors.Default;
                        CHNLSVC.CloseChannel();
                        MessageBox.Show("Error occurred while loadding profit center" + Environment.NewLine + ex.Message, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void txtSerialNo_DoubleClick(object sender, EventArgs e)
        {
            btnSearch_Serial_Click(null, null);
        }

        private void TxtAdvItem_DoubleClick(object sender, EventArgs e)
        {
            btnSearch_Item_Click(null, null);
        }

        private List<ReptPickSerials> GetReservedSerials(string _comCode, string _location)
        {
            List<ReptPickSerials> _reservedSerials = new List<ReptPickSerials>();

            try
            {
                if (dgvItem.Rows.Count > 0)
                {
                    foreach (DataGridViewRow _row in dgvItem.Rows)
                    {
                        string _serailNo = string.IsNullOrEmpty(_row.Cells["col_itmSerial"].Value.ToString()) ? string.Empty : _row.Cells["col_itmSerial"].Value.ToString();
                        string _itemCode = string.IsNullOrEmpty(_row.Cells["col_itmItem"].Value.ToString()) ? string.Empty : _row.Cells["col_itmItem"].Value.ToString();

                        //if (!string.IsNullOrEmpty(_serailNo))
                        if (!string.IsNullOrEmpty(_itemCode))
                        {
                            ReptPickSerials _tempItem = new ReptPickSerials();
                            _tempItem = CHNLSVC.Inventory.GetAvailableSerIDInformation(_comCode, _location, _itemCode, _serailNo, string.Empty, string.Empty);
                            if (_tempItem != null)
                            {
                                _tempItem.Tus_orig_grnno = string.IsNullOrEmpty(_row.Cells["colpb"].Value.ToString()) ? string.Empty : _row.Cells["colpb"].Value.ToString();
                                _tempItem.Tus_orig_supp = string.IsNullOrEmpty(_row.Cells["colpblvl"].Value.ToString()) ? string.Empty : _row.Cells["colpblvl"].Value.ToString();

                                if (_tempItem.Tus_itm_cd != null)
                                {
                                    MasterItem _itemList = new MasterItem();
                                    _itemList = CHNLSVC.Inventory.GetItem(_comCode, _itemCode);

                                    if (_itemList != null)
                                    {
                                        _isRes = true;
                                        _tempItem.Tus_itm_desc = _itemList.Mi_shortdesc;
                                        _tempItem.Tus_itm_model = _itemList.Mi_model;
                                        _tempItem.Tus_itm_brand = _itemList.Mi_brand;
                                        _tempItem.Tus_base_itm_line = _invLine;
                                        //ADD BY THARANGA 2017/11/06
                                        _tempItem.Tus_qty = Convert.ToDecimal(_row.Cells["colQty"].Value.ToString());
                                        if (chkitmres.Checked==true)
                                        {
                                             _tempItem.Tus_resqty = Convert.ToDecimal(_row.Cells["colQty"].Value.ToString());
                                        } 
                                        if (!string.IsNullOrEmpty(txtQuoNo.Text))
                                        {
                                            _tempItem.Tus_base_doc_no = txtQuoNo.Text;
                                        }

                                        //else
                                        //    _tempItem.Tus_base_doc_no = txtInvoice.Text.Trim();

                                        if (_invType == "HS")
                                        {
                                            _tempItem.Tus_isapp = 0;
                                            _tempItem.Tus_iscovernote = 0;
                                        }
                                        else
                                        {
                                            _tempItem.Tus_isapp = 1;
                                            _tempItem.Tus_iscovernote = 1;
                                        }

                                        //2012/12/24
                                        //if no serial
                                        _tempItem.Tus_com = _comCode;
                                        _tempItem.Tus_loc = _location;
                                        if (_tempItem.Tus_itm_cd == "" || _tempItem.Tus_itm_cd == null)
                                        {
                                            _isRes = false;
                                            _tempItem.Tus_itm_cd = txtItem.Text;
                                        }

                                        //END
                                        if (_tempItem.Tus_itm_cd != "" || _tempItem.Tus_itm_cd != null)
                                        {
                                            if (string.IsNullOrEmpty(_row.Cells["col_itmSerial"].Value.ToString()))//add by tharanga 2018/05/02 remove serilay without adding advance recpt without serial
                                            {
                                                _tempItem.Tus_ser_1 = "";
                                                _tempItem.Tus_ser_2 = "";
                                               
                                            }
                                            _reservedSerials.Add(_tempItem);
                                        }
                                    }

                                }
                                else
                                {
                                    if (txtRecType.Text == "ADVAN")
                                    {
                                        MasterItem _itemList = new MasterItem();
                                        _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itemCode);

                                        if (_itemList != null)
                                        {
                                            _isRes = false;
                                            _tempItem.Tus_itm_desc = _itemList.Mi_shortdesc;
                                            _tempItem.Tus_itm_model = _itemList.Mi_model;
                                            _tempItem.Tus_itm_brand = _itemList.Mi_brand;
                                            _tempItem.Tus_base_doc_no = null;
                                            _tempItem.Tus_base_itm_line = 0;
                                            _tempItem.Tus_isapp = 1;
                                            _tempItem.Tus_iscovernote = 1;
                                            _tempItem.Tus_com = _comCode;
                                            _tempItem.Tus_loc = _location;
                                            _tempItem.Tus_itm_cd = _itemList.Mi_cd;
                                            _tempItem.Tus_bin = BaseCls.GlbDefaultBin;
                                            _tempItem.Tus_qty = Convert.ToDecimal(_row.Cells["colQty"].Value.ToString());
                                            _tempItem.Tus_itm_stus = _row.Cells["col_itmStatus"].Value.ToString();
                                            
                                            _reservedSerials.Add(_tempItem);

                                            ////END
                                            //if (_tempItem.Tus_itm_cd != "" || _tempItem.Tus_itm_cd != null)
                                            //{
                                                
                                            //   // _ResList.Add(_tempItem);
                                            //}
                                        }                                        
                                    }
                                }
                            }
                            else
                            {
                                if (txtRecType.Text == "ADVAN")
                                {
                                    MasterItem _itemList1 = new MasterItem();
                                    _itemList1 = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itemCode);

                                    if (_itemList1 != null)
                                    {
                                        if (_tempItem == null)
                                        {
                                            _tempItem = new ReptPickSerials();
                                        }
                                        _isRes = false;
                                        _tempItem.Tus_itm_desc = _itemList1.Mi_shortdesc;
                                        _tempItem.Tus_itm_model = _itemList1.Mi_model;
                                        _tempItem.Tus_itm_brand = _itemList1.Mi_brand;
                                        _tempItem.Tus_base_doc_no = null;
                                        _tempItem.Tus_base_itm_line = 0;
                                        _tempItem.Tus_isapp = 1;
                                        _tempItem.Tus_iscovernote = 1;
                                        _tempItem.Tus_com = _comCode;
                                        _tempItem.Tus_loc = _location;
                                        _tempItem.Tus_itm_cd = _itemList1.Mi_cd;
                                        _tempItem.Tus_bin = BaseCls.GlbDefaultBin;
                                        _tempItem.Tus_qty = Convert.ToDecimal(_row.Cells["colQty"].Value.ToString());
                                        _tempItem.Tus_itm_stus = _row.Cells["col_itmStatus"].Value.ToString();
                                        _tempItem.Tus_orig_grnno = string.IsNullOrEmpty(_row.Cells["colpb"].Value.ToString()) ? string.Empty : _row.Cells["colpb"].Value.ToString();
                                        _tempItem.Tus_orig_supp = string.IsNullOrEmpty(_row.Cells["colpblvl"].Value.ToString()) ? string.Empty : _row.Cells["colpblvl"].Value.ToString();
                                        _tempItem.Tus_resqty = Convert.ToDecimal(_row.Cells["colTax"].Value.ToString());
                                        
                                        _reservedSerials.Add(_tempItem);

                                        ////END
                                        //if (_tempItem.Tus_itm_cd != "" || _tempItem.Tus_itm_cd != null)
                                        //{

                                        //   // _ResList.Add(_tempItem);
                                        //}
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                CHNLSVC.CloseChannel();
                throw new Exception("An error occurred while reserving serials." + Environment.NewLine + ex.Message);              
            }

            return _reservedSerials;
        }

        private void SearchJobNo()
        {
            this.Cursor = Cursors.WaitCursor;
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ServiceJobSearchByCustomer);
            DataTable _result = CHNLSVC.CommonSearch.GetServiceJobsByCustomer(_CommonSearch.SearchParams, null, null);
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtInvoice;
            this.Cursor = Cursors.Default;
            _CommonSearch.ShowDialog();
            txtInvoice.Focus();
        }

        private void chklaunchparticipate_CheckedChanged(object sender, EventArgs e)
        {
            if (chklaunchparticipate.Checked == true)
            {
                Boolean _isValid = IsValidMobileOrLandNo(txtMobile.Text.Trim());

                if (_isValid == false)
                {
                    MessageBox.Show("Invalid mobile number.", "Receipt entry", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    chklaunchparticipate.Checked = false;
                    return;
                }

                Boolean _isValidEmail = IsValidEmail(lblCusEmail.Text.Trim());

                if (_isValidEmail == false)
                {
                    MessageBox.Show("Invalid email address.", "Customer Creation", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    chklaunchparticipate.Checked = false;
                    return;
                }
            }
        }
    }
}

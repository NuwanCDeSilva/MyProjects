using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using FF.BusinessObjects;
using FF.WindowsERPClient.Reports.Inventory;
using FF.WindowsERPClient.Reports.Sales;
using System.Text.RegularExpressions;
using FF.BusinessObjects.General;
using FF.BusinessObjects.Sales;


//Web base system written by Prabhath (Original)
//Windows base system written by Prabhath on 10/12/2012 according to the web

namespace FF.WindowsERPClient.Sales
{
    public partial class Invoice : Base
    {
        ///  Edit History
        ///  ------------
        ///  Sequence          Date                  Name                    Code
        ///  1                 28/03/2013            Prabhath                Edt0001

        #region Table Column Names

        //NorPrice_Select
        //NorPrice_Serial
        //NorPrice_Item
        //NorPrice_UnitPrice
        //NorPrice_Circuler
        //NorPrice_PriceType
        //NorPrice_PriceTypeDescription
        //NorPrice_ValidTill
        //NorPrice_Pb_Seq
        //NorPrice_PbLineSeq
        //NorPrice_PromotionCD
        //NorPrice_IsFixQty
        //NorPrice_BkpUPrice
        //NorPrice_WarrantyRmk

        //PromPrice_Select
        //PromPrice_Serial
        //PromPrice_Item
        //PromPrice_UnitPrice
        //PromPrice_Circuler
        //PromPrice_PriceType
        //PromPrice_PriceTypeDescription
        //PromPrice_ValidTill
        //PromPrice_Pb_Seq
        //PromPrice_PbLineSeq
        //PromPrice_PromotionCD
        //PromPrice_IsFixQty
        //PromPrice_BkpUPrice
        //PromPrice_WarrantyRmk

        //PromItm_ItemLine
        //PromItm_Item
        //PromItm_Description
        //PromItm_Modle
        //PromItm_Serial
        //PromItm_Qty
        //PromItm_UnitPrice
        //PromItm_PbSeq
        //PromItm_PbLineSeq
        //PromItm_MainItem
        //PromItm_MainSerial
        //PromItm_BkpSubSerial
        //PromItm_BkpUnitPrice

        //ProSer_Select
        //ProSer_Item
        //ProSer_Serial1
        //ProSer_Serial2
        //ProSer_Warranty
        //ProSer_Status
        //ProSer_SerialID

        //PopComItm_Item
        //PopComItm_Description
        //PopComItm_Status
        //PopComItm_Qty

        //PopComItmSer_Select
        //PopComItmSer_Item
        //PopComItmSer_Serial1
        //PopComItmSer_Serial2
        //PopComItmSer_Warranty
        //PopComItmSer_Status
        //PopComItmSer_Serialid

        //InvItm_No
        //InvItm_Item
        //InvItm_Description
        //InvItm_Status
        //InvItm_Qty
        //InvItm_UPrice
        //InvItm_UnitAmt
        //InvItm_DisRate
        //InvItm_DisAmt
        //InvItm_TaxAmt
        //InvItm_LineAmt
        //InvItm_Book
        //InvItm_Level
        //InvItm_Delete
        //InvItm_SerialShow
        //InvItm_SerialAdd
        //InvItm_PbPrice
        //InvItm_PbSeq
        //InvItm_PbLineSeq
        //InvItm_WarraPeriod
        //InvItm_WarraRemarks
        //InvItm_IsPromo
        //InvItm_PromoCd
        //InvItm_JobLineb
        //InvItm_Circuler

        //popSer_Remove
        //popSer_Item
        //popSer_Model
        //popSer_Status
        //popSer_Qty
        //popSer_Serial1
        //popSer_Serial2
        //popSer_Warranty
        //popSer_BaseItemLine
        //popSer_SerialID
        //popSer_NewStatus
        //popSer_UnitPrice

        //txtDate
        //cmbInvType
        //txtDocRefNo
        //txtInvoiceNo
        //lblCurrency

        //txtCustomer
        //txtNIC
        //txtMobile
        //txtCusName
        //txtAddress1
        //txtAddress2

        //chkTaxPayable
        //lblSVatStatus
        //lblVatExemptStatus

        //lblAccountBalance
        //lblAvailableCredit

        //txtExecutive
        //lblExecutiveName
        //txtManualRefNo
        //chkManualRef

        //txtSerialNo
        //txtItem
        //cmbBook
        //cmbLevel
        //cmbStatus
        //txtQty
        //txtUnitPrice
        //txtUnitAmt
        //txtDisRate
        //txtDisAmt
        //txtTaxAmt
        //txtLineTotAmt
        //gvInvoiceItem

        //lblGrndSubTotal
        //lblGrndDiscount
        //lblGrndAfterDiscount
        //lblGrndTax
        //lblGrndTotalAmount

        //ucPayModes1

        //pnlConsumerPrice
        //pnlDeliveryInstruction
        //pnlInventoryCombineSerialPick
        //pnlMain
        //pnlMultiCombine
        //pnlMultipleItem
        //pnlPriceNPromotion

        //pnlDeliveryInstruction
        //----------------------
        //txtDelLocation
        //lblDeliveryLocation
        //chkOpenDelivery
        //txtDelCustomer
        //txtDelName
        //txtDelAddress1
        //txtDelAddress2

        //pnlInventoryCombineSerialPick
        //-----------------------------
        //gvPopComItem
        //gvPopComItemSerial
        //txtInvComSerSearch

        #endregion Table Column Names

        #region Variables

        private List<InvoiceItem> _invoiceItemList = null; private List<InvoiceItem> _invoiceItemListWithDiscount = null; private List<RecieptItem> _recieptItem = null; private List<RecieptItem> _newRecieptItem = null;
        private MasterBusinessEntity _businessEntity = null; private List<MasterItemComponent> _masterItemComponent = null; private PriceBookLevelRef _priceBookLevelRef = null; private List<PriceBookLevelRef> _priceBookLevelRefList = null;
        private List<PriceDetailRef> _priceDetailRef = null; private MasterBusinessEntity _masterBusinessCompany = null; private List<PriceSerialRef> _MainPriceSerial = null; private List<PriceSerialRef> _tempPriceSerial = null; private List<PriceCombinedItemRef> _MainPriceCombinItem = null; private List<PriceCombinedItemRef> _tempPriceCombinItem = null;
        private bool _isInventoryCombineAdded = false; private Int32 ScanSequanceNo = 0; private List<ReptPickSerials> ScanSerialList = null; private bool IsPriceLevelAllowDoAnyStatus = false; private string WarrantyRemarks = string.Empty; private Int32 WarrantyPeriod = 0; private string ScanSerialNo = string.Empty; private string DefaultItemStatus = string.Empty;
        private List<InvoiceSerial> InvoiceSerialList = null; private List<ReptPickSerials> InventoryCombinItemSerialList = null; private List<ReptPickSerials> PriceCombinItemSerialList = null; private List<ReptPickSerials> BuyBackItemList = null;
        private Int32 _lineNo = 0; private bool _isEditPrice = false; private bool _isEditDiscount = false; private decimal GrndSubTotal = 0; private decimal GrndDiscount = 0; private decimal GrndTax = 0; private decimal _toBePayNewAmount = 0; private bool _isCompleteCode = false;
        public decimal SSPriceBookPrice = 0; public string SSPriceBookSequance = string.Empty; public string SSPriceBookItemSequance = string.Empty; public string SSIsLevelSerialized = string.Empty; public string SSPromotionCode = string.Empty; public string SSCirculerCode = string.Empty; public Int32 SSPRomotionType = 0; public Int32 SSCombineLine = 0;
        private Dictionary<decimal, decimal> ManagerDiscount = null; private CashGeneralEntiryDiscountDef GeneralDiscount = null; private string DefaultBook = string.Empty; private string DefaultLevel = string.Empty; private string DefaultInvoiceType = string.Empty; private string DefaultStatus = string.Empty; private string DefaultBin = string.Empty; private MasterItem _itemdetail = null;
        private List<MasterItemTax> MainTaxConstant = null; private List<ReptPickSerials> _promotionSerial = null; private List<ReptPickSerials> _promotionSerialTemp = null;
        private bool _isBackDate = false; private MasterProfitCenter _MasterProfitCenter = null; private List<PriceDefinitionRef> _PriceDefinitionRef = null; private const string InvoiceBackDateName = "SALESENTRY"; private static int VirtualCounter = 1;
        private bool _isGiftVoucherCheckBoxClick = false; private DataTable MasterChannel = null; private CommonSearch.CommonOutScan _commonOutScan = null; private bool IsToken = false; private bool IsSaleFigureRoundUp = false; private DataTable _tblExecutive = null; private CommonSearch.CommonSearch _commonSearch = null; private bool IsFwdSaleCancelAllowUser = false; private bool IsDlvSaleCancelAllowUser = false; private bool _IsVirtualItem = false; private string technicianCode = string.Empty; private bool _iswhat = false;
        private DataTable _tblPromotor = null;
        private bool _serialMatch = true; private PriortyPriceBook _priorityPriceBook = null;
        private bool _processMinusBalance = false;
        private int _discountSequence;
        private bool _isRegistrationMandatory = false;
        private bool _isNeedRegistrationReciept = false;
        private decimal _totalRegistration = 0;
        private List<RegistrationList> _List = new List<RegistrationList>();
        private LoyaltyType _loyaltyType;
        private int _proVouInvcLine = 0;
        private string _proVouInvcItem = string.Empty;
        private Boolean _isGroup = false;
        private DateTime _serverDt = DateTime.Now.Date;
        private decimal _minDPRate = 0;     //kapila 14/1/2016
        private Boolean _isBOnCredNote = false;       //kapila 4/3/2016
        private string _reqNo = "";     //kapila 4/3/2016
        private DateTime _dtReqPara = DateTime.Now.Date;
        private Boolean _isStrucBaseTax = false;
        private string _bkNo = "";  //kapila 27/4/2016
        private string _promoType = ""; //kapila 29/12/2016
        private Boolean _grah_alw_pro = true; //kapila 14/2/2017
        private Boolean _grah_isalw_free_itm = true;  //kapila 14/2/2017
        private Boolean _grah_rcv_buyb = true;  //kapila 15/2/2017
        private int _selectedItemLine = -1;
        private bool IsNewCustomer = false;
        private bool IsInvoiceCompleted = false;
        private bool IsOrgPriceEdited = false;
        private decimal _itm_tax_rate = 0;
        //public List<PcAllowBanks> PcAllowBanks = new List<PcAllowBanks>(); // by akila 2017/10/10
        public CctTransLog CreditCardTransLog = null; // by akila 2017/10/10
        private string gvp_gv_cd = "";
        List<EventItems> _InvEventItems = new List<EventItems>(); //akila 2018/02/01
        List<EventRegistry> _InvEventList = new List<EventRegistry>(); //akila 2018/02/01
        bool IsAddingEventItem = false;
        //add by tharanga
        private Boolean _VoucherPromotionnew = false;
        #endregion Variables

        #region Ad-hoc Session

        private void Ad_hoc_Session()
        { //BaseCls.GlbUserComCode = "AAL";            //BaseCls.GlbUserDefLoca = "AAZPG";            //BaseCls.GlbUserDefProf = "AAZPG";            //BaseCls.GlbUserID = "ADMIN";            //BaseCls.GlbUserComCode = "SGL";            //BaseCls.GlbUserDefLoca = "SGMTR";            //BaseCls.GlbUserDefProf = "SGMTR";            //BaseCls.GlbUserID = "PRABHATH";            //BaseCls.GlbUserComCode = "AAL";            //BaseCls.GlbUserDefLoca = "AAZPG";            //BaseCls.GlbUserDefProf = "AAZPG";            //BaseCls.GlbUserID = "ADMIN";
        }

        private void SystemErrorMessage(Exception ex)
        { CHNLSVC.CloseChannel(); this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); } }

        #endregion Ad-hoc Session

        public Invoice()
        {
            InitializeComponent(); try { this.Cursor = Cursors.WaitCursor; gvBuyBack.AutoGenerateColumns = false; if (string.IsNullOrEmpty(BaseCls.GlbUserDefProf)) { this.Cursor = Cursors.Default; MessageBox.Show("You do not have assigned a profit center. " + this.Text + " is terminating now!", "Termination", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); this.Close(); } if (string.IsNullOrEmpty(BaseCls.GlbUserDefLoca)) { this.Cursor = Cursors.Default; MessageBox.Show("You do not have assigned a delivery location. " + this.Text + " is de-activating delivery option now!", "De-activate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); chkDeliverLater.Enabled = false; } else chkDeliverLater.Enabled = true; LoadCachedObjects(); SetGridViewAutoColumnGenerate(); SetPanelSize(); InitializeValuesNDefaultValueSet(); TextBox _txt = new TextBox(); }
            catch { this.Cursor = Cursors.Default; }
            finally { CHNLSVC.CloseAllChannels(); }
        }

        #region Rooting for Form Load Event Bind and Default Value

        private void Invoice_Load(object sender, EventArgs e)
        {
            try
            {
                CCTBaseComponent.CCTBase.IsCCTOnline = true;
                this.Cursor = Cursors.WaitCursor;
                BackDatePermission();
                //kapila 18/11/2016
                ucPayModes1.TransDate.Text = txtDate.Value.Date.ToShortDateString();
                ucPayModes1.IsBOCN = chkCreditNote.Checked ? 1 : 0;
                LoadPayMode();
                //load priority price book                        

                List<PriceDefinitionRef> tem = (from _res in _PriceDefinitionRef
                                                where _res.Sadd_def_pb
                                                select _res).ToList<PriceDefinitionRef>();
                if (tem != null && tem.Count > 0)
                {
                    _priorityPriceBook = new PriortyPriceBook();
                    _priorityPriceBook.Sppb_pb = tem[0].Sadd_pb;
                    _priorityPriceBook.Sppb_pb_lvl = tem[0].Sadd_p_lvl;
                }

                //change chk value
                if (_MasterProfitCenter.Mpc_is_do_now == 0)
                {
                    chkDeliverLater.Checked = false;
                    chkDeliverNow.Checked = false;
                    chkDeliverLater_CheckedChanged(null, null);
                }
                else if (_MasterProfitCenter.Mpc_is_do_now == 1)
                {
                    chkDeliverNow.Checked = true;
                    chkDeliverLater.Checked = false;
                    chkDeliverNow_CheckedChanged(null, null);
                }
                else
                {
                    chkDeliverLater.Checked = true;
                    chkDeliverNow.Checked = false;
                    chkDeliverLater_CheckedChanged(null, null);
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default; SystemErrorMessage(ex);
            }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void LoadPromotor()
        {
            cmbTechnician.DataSource = null;
            txtPromotor.Text = "";
            DataTable _tblPromotor = CHNLSVC.General.GetProfitCenterAllocatedPromotors(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);

            if (_tblPromotor != null)
            {
                AutoCompleteStringCollection _string0 = new AutoCompleteStringCollection();
                var _lst0 = _tblPromotor.AsEnumerable().ToList();
                cmbTechnician.ValueMember = "mpp_promo_cd";
                cmbTechnician.DisplayMember = "mpp_promo_name";
                if (_lst0 != null && _lst0.Count > 0) cmbTechnician.DataSource = _lst0.CopyToDataTable();
                cmbTechnician.DropDownWidth = 200; if (_lst0 != null && _lst0.Count > 0)
                { Parallel.ForEach(_lst0, x => _string0.Add(x.Field<string>("mpp_promo_name"))); cmbTechnician.AutoCompleteSource = AutoCompleteSource.CustomSource; cmbTechnician.AutoCompleteMode = AutoCompleteMode.SuggestAppend; cmbTechnician.AutoCompleteCustomSource = _string0; }

                cmbTechnician.SelectedIndex = -1;
                //cmbTechnician.ValueMember = "mpp_promo_cd"; cmbTechnician.DisplayMember = "mpp_promo_name";
                //cmbExecutive.DataSource = _tblPromotor; cmbExecutive.DropDownWidth = 200;
            }
        }

        private void LoadExecutive()
        {
            cmbExecutive.DataSource = null;
            DataTable _tblExecutive = CHNLSVC.Sales.GetProfitCenterAllocatedExecutive(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
            if ((_tblExecutive != null) && (_tblExecutive.Rows.Count > 0))
            {
                var _lst = _tblExecutive.AsEnumerable().Where(X => X.Field<string>("esep_cat_cd") != "TECH").ToList();
                cmbExecutive.ValueMember = "esep_epf"; cmbExecutive.DisplayMember = "esep_first_name";
                if (_lst != null && _lst.Count > 0) cmbExecutive.DataSource = _lst.CopyToDataTable(); cmbExecutive.DropDownWidth = 200;
                if (_tblExecutive != null)
                {
                    cmbExecutive.SelectedValue = _MasterProfitCenter.Mpc_man;
                }
                //MSR channel load default executive with null record
                if (_MasterProfitCenter.Mpc_chnl == "ELITE")
                {
                    //DataRow dr = _tblExecutive.NewRow();
                    //dr["esep_epf"] = "";
                    //dr["esep_first_name"] = "";
                    //_tblExecutive.Rows.Add(dr);
                    cmbExecutive.SelectedIndex = -1;
                }

                txtExecutive.Text = _MasterProfitCenter.Mpc_man;
                AutoCompleteStringCollection _string = new AutoCompleteStringCollection();
                Parallel.ForEach(_lst, x => _string.Add(x.Field<string>("esep_first_name")));
                cmbExecutive.AutoCompleteSource = AutoCompleteSource.CustomSource;
                cmbExecutive.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                cmbExecutive.AutoCompleteCustomSource = _string;
                AutoCompleteStringCollection _string0 = new AutoCompleteStringCollection();
                var _lst0 = _tblExecutive.AsEnumerable().Where(X => X.Field<string>("esep_cat_cd") == "TECH").ToList();
                // cmbTechnician.ValueMember = "esep_epf";
                // cmbTechnician.DisplayMember = "esep_first_name";
                if (_lst0 != null && _lst0.Count > 0) cmbTechnician.DataSource = null;//_lst0.CopyToDataTable();
                cmbTechnician.DropDownWidth = 200; if (_lst0 != null && _lst0.Count > 0)
                { Parallel.ForEach(_lst0, x => _string0.Add(x.Field<string>("esep_first_name"))); cmbTechnician.AutoCompleteSource = AutoCompleteSource.CustomSource; cmbTechnician.AutoCompleteMode = AutoCompleteMode.SuggestAppend; cmbTechnician.AutoCompleteCustomSource = _string0; }
                var _manname = _tblExecutive.AsEnumerable().Where(X => X.Field<string>("esep_epf") == _MasterProfitCenter.Mpc_man).ToList();
                if (_manname != null && _manname.Count > 0) { string _name = _manname[0].Field<string>("esep_first_name") + " (" + _MasterProfitCenter.Mpc_man + ")"; this.Text = "Invoice | Manager : " + _name; }
            }
        }

        private void LoadCachedObjects()
        {
            _MasterProfitCenter = CacheLayer.Get<MasterProfitCenter>(CacheLayer.Key.ProfitCenter.ToString()); MasterChannel = CacheLayer.Get<DataTable>(CacheLayer.Key.ChannelDefinition.ToString()); IsSaleFigureRoundUp = CacheLayer.Get(CacheLayer.Key.IsSaleValueRoundUp.ToString());

            //_PriceDefinitionRef = CacheLayer.Get<List<PriceDefinitionRef>>(CacheLayer.Key.PriceDefinition.ToString());

            _PriceDefinitionRef = CHNLSVC.Sales.GetPriceDefinitionByBookAndLevel(BaseCls.GlbUserComCode, string.Empty, string.Empty, string.Empty, BaseCls.GlbUserDefProf);
            List<PriceBookLevelRef> _bookLevel = new List<PriceBookLevelRef>();
            List<PriceBookLevelRef> _bookLevelBase = new List<PriceBookLevelRef>();

            foreach (PriceDefinitionRef _lis in _PriceDefinitionRef)
            {
                _bookLevel = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _lis.Sadd_pb, _lis.Sadd_p_lvl);

                foreach (PriceBookLevelRef _nn in _bookLevel)
                {
                    if (_nn.SAPL_QUO_BASE == 1)
                    {
                        _bookLevelBase.Add(_nn);

                    }
                }
            }

            if (_bookLevelBase != null && _bookLevelBase.Count > 0)
            {
                foreach (PriceBookLevelRef pl in _bookLevelBase)
                {
                    _PriceDefinitionRef.RemoveAll(x => x.Sadd_pb == pl.Sapl_pb && x.Sadd_p_lvl == pl.Sapl_pb_lvl_cd);
                }
            }

        }

        private void SetPanelSize()
        { pnlMultipleItem.Size = new Size(610, 155); pnlMultiCombine.Size = new Size(597, 140); pnlConsumerPrice.Size = new Size(553, 137); pnlPriceNPromotion.Size = new Size(1007, 366); pnlDeliveryInstruction.Size = new Size(441, 246); pnlInventoryCombineSerialPick.Size = new Size(648, 242); pnlDiscountRequest.Size = new Size(484, 143); pnlGroupSale.Size = new Size(200, 35); pnlRePay.Size = new Size(597, 279); pnlBuyBack.Size = new Size(1009, 342); pnlSubSerial.Size = new Size(1004, 210); pnlTokenItem.Size = new Size(911, 130); pnlRegistration.Size = new Size(1000, 373); pnlDiscount.Size = new Size(608, 303); pnlDoNowItems.Size = new Size(785, 303); pnlDoNowItems.Size = new Size(785, 303); pnlPromoVouNo.Size = new Size(237, 40); pnlADVR.Size = new Size(255, 53); }

        private void SetGridViewAutoColumnGenerate()
        { gvInvoiceItem.AutoGenerateColumns = false; gvPopSerial.AutoGenerateColumns = false; gvGiftVoucher.AutoGenerateColumns = false; gvDisItem.AutoGenerateColumns = false; gvNormalPrice.AutoGenerateColumns = false; gvPopComItem.AutoGenerateColumns = false; gvPopComItemSerial.AutoGenerateColumns = false; gvPopConsumPricePick.AutoGenerateColumns = false; gvPromotionItem.AutoGenerateColumns = false; gvPromotionPrice.AutoGenerateColumns = false; gvPromotionSerial.AutoGenerateColumns = false; gvRePayment.AutoGenerateColumns = false; dgvReceiptItems.AutoGenerateColumns = false; }

        private void LoadInvoiceProfitCenterDetail()
        { 
            if (_MasterProfitCenter != null) 
                if (_MasterProfitCenter.Mpc_cd != null) 
                { 
                    if (!_MasterProfitCenter.Mpc_edit_price) 
                        txtUnitPrice.ReadOnly = true;
                    txtCustomer.Text = _MasterProfitCenter.Mpc_def_customer; 
                    lblCurrency.Text = _MasterProfitCenter.Mpc_def_exrate + " - Sri Lankan Rupees"; 
                    txtExecutive.Text = _MasterProfitCenter.Mpc_man; 
                    _masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C"); 
                } 
        }

        private void LoadPriceDefaultValue()
        { if (_PriceDefinitionRef != null) if (_PriceDefinitionRef.Count > 0) { var _defaultValue = _PriceDefinitionRef.Where(x => x.Sadd_def == true).ToList(); if (_defaultValue != null)                        if (_defaultValue.Count > 0) { DefaultInvoiceType = _defaultValue[0].Sadd_doc_tp; DefaultBook = _defaultValue[0].Sadd_pb; DefaultLevel = _defaultValue[0].Sadd_p_lvl; DefaultStatus = _defaultValue[0].Sadd_def_stus; DefaultItemStatus = _defaultValue[0].Sadd_def_stus; LoadInvoiceType(); LoadPriceBook(cmbInvType.Text); LoadPriceLevel(cmbInvType.Text, cmbBook.Text.Trim()); LoadLevelStatus(cmbInvType.Text, cmbBook.Text.Trim(), cmbLevel.Text.Trim()); CheckPriceLevelStatusForDoAllow(cmbLevel.Text.Trim(), cmbBook.Text.Trim()); } } cmbTitle.SelectedIndex = 0; }

        private void VariableInitialization()
        { InvItm_Qty.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_UPrice.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_UnitAmt.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_DisRate.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_DisAmt.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_TaxAmt.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_LineAmt.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_Qty.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_UPrice.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_UnitAmt.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_DisRate.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_DisAmt.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_TaxAmt.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_LineAmt.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight; InvItm_Qty.DefaultCellStyle.Format = "0.0000"; InvItm_UPrice.DefaultCellStyle.Format = "N"; InvItm_UnitAmt.DefaultCellStyle.Format = "N"; InvItm_DisRate.DefaultCellStyle.Format = "N"; InvItm_DisAmt.DefaultCellStyle.Format = "N"; InvItm_TaxAmt.DefaultCellStyle.Format = "N"; InvItm_LineAmt.DefaultCellStyle.Format = "N"; btnSave.Enabled = true; txtInvoiceNo.Enabled = true; WarrantyRemarks = string.Empty; WarrantyPeriod = 0; ScanSequanceNo = 0; ScanSerialNo = string.Empty; SSPriceBookSequance = "0"; SSPriceBookItemSequance = "0"; SSPriceBookPrice = 0; _recieptItem = new List<RecieptItem>(); ScanSerialList = new List<ReptPickSerials>(); InventoryCombinItemSerialList = new List<ReptPickSerials>(); ManagerDiscount = new Dictionary<decimal, decimal>(); _invoiceItemList = new List<InvoiceItem>(); InvoiceSerialList = new List<InvoiceSerial>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); MainTaxConstant = new List<MasterItemTax>(); _priceBookLevelRefList = new List<PriceBookLevelRef>(); _masterItemComponent = new List<MasterItemComponent>(); _newRecieptItem = new List<RecieptItem>(); _lineNo = 0; GrndSubTotal = 0; GrndDiscount = 0; GrndTax = 0; _isCompleteCode = false; chkOpenDelivery.Enabled = false; }

        private void SetDecimalTextBoxForZero(bool _isUnit, bool _isAccBal, bool _isQty)
        { txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0"); if (_isQty) txtQty.Text = FormatToQty("1"); txtTaxAmt.Text = FormatToCurrency("0"); if (_isUnit) txtUnitPrice.Text = FormatToCurrency("0"); txtUnitAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0"); if (_isAccBal) { lblAccountBalance.Text = FormatToCurrency("0"); lblAvailableCredit.Text = FormatToCurrency("0"); } }

        private void VaribleClear()
        { _lineNo = 1; _isEditPrice = false; _isEditDiscount = false; GrndSubTotal = 0; GrndDiscount = 0; GrndTax = 0; SSCombineLine = 1; _proVouInvcLine = 0; _proVouInvcItem = string.Empty; }

        private void LoadCancelPermission()
        { IsFwdSaleCancelAllowUser = false; IsDlvSaleCancelAllowUser = false; btnCancel.Enabled = false; string _masterLocation = (string.IsNullOrEmpty(BaseCls.GlbUserDefLoca)) ? BaseCls.GlbUserDefProf : BaseCls.GlbUserDefLoca; if (CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 10002)) { IsFwdSaleCancelAllowUser = true; btnCancel.Enabled = true; } else { IsFwdSaleCancelAllowUser = false; btnCancel.Enabled = false; } if (CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 10042)) { IsFwdSaleCancelAllowUser = true; IsDlvSaleCancelAllowUser = true; btnCancel.Enabled = true; } else { if (!IsFwdSaleCancelAllowUser) { IsDlvSaleCancelAllowUser = false; btnCancel.Enabled = false; } } }

        private void LoadPayMode()
        { 
            ucPayModes1.InvoiceType = cmbInvType.Text.Trim(); 
            ucPayModes1.Customer_Code = txtCustomer.Text.Trim(); 
            ucPayModes1.Mobile = txtMobile.Text.Trim();
            ucPayModes1.SystemModule = GlbModuleName;
            ucPayModes1.LoadPayModes(); 
        }

        private void BackDatePermission()
        {
            _isBackDate = false;
            bool _allowCurrentTrans = false;
            IsAllowBackDateForModule(BaseCls.GlbUserComCode, string.Empty, BaseCls.GlbUserDefProf, this.GlbModuleName, txtDate, lblBackDateInfor, string.Empty, out _allowCurrentTrans);
        }

        private void CheckPrintStatus()
        { if (_MasterProfitCenter != null) if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_com)) if (_MasterProfitCenter.Mpc_print_payment) btnPrint.Visible = true; else  btnPrint.Visible = false; }

        private void InitializeValuesNDefaultValueSet()
        {
            _InvEventItems = new List<EventItems>(); //akila 2018/02/01
            _InvEventList = new List<EventRegistry>(); //akila 2018/02/01
            txtDate.Text = CHNLSVC.Security.GetServerDateTime().Date.ToString("dd/MM/yyyy");
            _serverDt = CHNLSVC.Security.GetServerDateTime().Date;
            VaribleClear();
            VariableInitialization();
            LoadInvoiceProfitCenterDetail();
            LoadPriceDefaultValue();
            LoadCancelPermission();
            SetDecimalTextBoxForZero(true, true, true);
            LoadPayMode(); LoadControl();
            lblBackDateInfor.Text = string.Empty;
            ResetDeliveryInstructionToOriginalCustomer();
            chkDeliverLater_CheckedChanged(null, null);
            CheckPrintStatus();
            BuyBackItemList = null;
            SetDateTopPayMode();
            txtQty.Text = FormatToQty("1");
            txtPromotor.Text = "";
            LoadExecutive();
            LoadPromotor();
            if (string.IsNullOrEmpty(BaseCls.GlbUserDefLoca))
            { chkDeliverLater.Checked = true; chkDeliverLater.Enabled = false; }
            else chkDeliverLater.Enabled = true; LoadInvoiceType();

            if (_MasterProfitCenter.Mpc_chnl == "AUTO_DEL")
            { txtManualRefNo.Enabled = true; }
            else
            {
                txtManualRefNo.Enabled = false;
            }

            //set registration mandatory field

            _isRegistrationMandatory = false; //(MasterChannel.Rows[0]["msc_is_registration"].ToString()) == "1" ? true : false;

            txtPromoVouNo.Clear();
            lblPromoVouNo.Text = "";
            lblPVDisc.Text = "";
            lblPVTp.Text = "";
            lblPVBal.Text = "";
            lblPromoVouUsedFlag.Text = "";
            _dtReqPara = txtDate.Value.Date;

            MasterCompany _masterComp = null;
            _masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);

            if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;
            //by akila 2017/10/10
            //PcAllowBanks = LoadPcAllowBanks(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
            //ucPayModes1.PcAllowBanks = PcAllowBanks;

            if (cmbInvType.Text.Trim() != "CRED")
            {
                LoadCustomerDetailsByCustomer(null, null);
                cmbTitle_SelectedIndexChanged(null, null);
            } //enable manual textbox

            
        }

        #endregion Rooting for Form Load Event Bind and Default Value

        #region Rooting for Delivery Now Event

        private void chkDeliverLater_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (_isGiftVoucherCheckBoxClick) return;
                txtDelLocation.Text = BaseCls.GlbUserDefLoca.Trim();
                chkOpenDelivery.Checked = false;
                if (chkDeliverLater.Checked)
                { chkOpenDelivery.Enabled = true; txtDelLocation.Enabled = true; btnSearchDelLocation.Enabled = true; chkDeliverLater.Enabled = false; chkDeliverNow.Enabled = false; chkDeliverNow.Checked = false; }
                else { chkOpenDelivery.Enabled = false; txtDelLocation.Enabled = false; btnSearchDelLocation.Enabled = false; chkDeliverNow.Enabled = true; chkDeliverNow.Checked = false; }
                chkGiftVoucher.Checked = false; chkPickGV.Checked = false; chkPickGV.Enabled = false;

                //chk if fwd sale limit exceed
                //if (_MasterProfitCenter.Mpc_max_fwdsale <= _MasterProfitCenter.MPC_NUM_FWDSALE)
                //{
                //    chkDeliverLater.Checked = false;
                //    chkDeliverLater.Enabled = false;
                //    chkDeliverNow.Checked = false;
                //    chkDeliverNow.Enabled = false;
                //}
            }
            catch (Exception ex) { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void chkDeliverNow_CheckedChanged(object sender, EventArgs e)
        {
            chkOpenDelivery.Checked = false;
            if (chkDeliverNow.Checked)
            { chkOpenDelivery.Enabled = true; txtDelLocation.Enabled = true; btnSearchDelLocation.Enabled = true; chkDeliverLater.Enabled = false; chkDeliverLater.Enabled = false; chkDeliverLater.Checked = false; chkDeliverNow.Enabled = false; }
            else { chkOpenDelivery.Enabled = false; txtDelLocation.Enabled = false; btnSearchDelLocation.Enabled = false; chkDeliverLater.Enabled = true; chkDeliverLater.Checked = false; }
            chkGiftVoucher.Checked = false; chkPickGV.Checked = false; chkPickGV.Enabled = false;
            //if (_MasterProfitCenter.Mpc_max_fwdsale <= _MasterProfitCenter.MPC_NUM_FWDSALE)
            //{
            //    chkDeliverLater.Checked = false;
            //    chkDeliverLater.Enabled = false;
            //    chkDeliverNow.Checked = false;
            //    chkDeliverNow.Enabled = false;
            //}
        }

        private void txtCusName_Leave(object sender, EventArgs e)
        { 
            if (string.IsNullOrEmpty(txtCusName.Text)) return; 
            try 
            {
                cmbTitle_SelectedIndexChanged(null, null);
                this.Cursor = Cursors.WaitCursor;/* if (string.IsNullOrEmpty(txtDelName.Text) )   */                 
                txtDelName.Text = txtCusName.Text; } 
            catch (Exception ex) 
            { 
                this.Cursor = Cursors.Default; SystemErrorMessage(ex); 
            } 
            finally { this.Cursor = Cursors.Default; } }

        private void txtAddress1_Leave(object sender, EventArgs e)
        { if (string.IsNullOrEmpty(txtAddress1.Text)) return; try { this.Cursor = Cursors.WaitCursor;/* if (string.IsNullOrEmpty(txtDelAddress1.Text)) */                   txtDelAddress1.Text = txtAddress1.Text; } catch (Exception ex) { this.Cursor = Cursors.Default; SystemErrorMessage(ex); } finally { this.Cursor = Cursors.Default; } }

        private void txtAddress2_Leave(object sender, EventArgs e)
        { if (string.IsNullOrEmpty(txtAddress2.Text)) return; try { this.Cursor = Cursors.WaitCursor;/* if (string.IsNullOrEmpty(txtDelAddress2.Text))  */                  txtDelAddress2.Text = txtAddress2.Text; } catch (Exception ex) { this.Cursor = Cursors.Default; SystemErrorMessage(ex); } finally { this.Cursor = Cursors.Default; } }

        private string SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType _type)
        {
            StringBuilder paramsText = new StringBuilder();
            StringBuilder seperator = new StringBuilder("|");
            paramsText.Append(((int)_type).ToString() + ":");

            switch (_type)
            {
                case CommonUIDefiniton.SearchUserControlType.CreditNote:
                    {
                        paramsText.Append(txtCustomer.Text.Trim() + seperator + BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.SalesOrder:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + "SO" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceType:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceWithDate:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceItemUnAssable:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PriceBook:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + cmbInvType.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PriceLevel:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + cmbInvType.Text + seperator + cmbBook.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PriceLevelItemStatus:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + cmbBook.Text + seperator + cmbLevel.Text + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Customer:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.NIC:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Mobile:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Currency:
                    {
                        paramsText.Append(seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Employee_Executive:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + "SEX" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.InvoiceExecutive:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Bank:
                    {
                        paramsText.Append(CommonUIDefiniton.BusinessEntityType.BANK.ToString() + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Receipt:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + CommonUIDefiniton.PayMode.ADVAN.ToString() + seperator);
                        break;
                    }

                case CommonUIDefiniton.SearchUserControlType.ItemAvailableSerial:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefLoca + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Group_Sale:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + 1 + seperator);
                        break;
                    }

                case CommonUIDefiniton.SearchUserControlType.QuotationForInvoice:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + Convert.ToDateTime(txtDate.Text).ToString("dd/MMM/yyyy") + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Location:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.UserLocation:
                    {
                        paramsText.Append(BaseCls.GlbUserID + seperator + BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.AvailableGiftVoucher:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + "ITEM" + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCard:
                    {
                        paramsText.Append(txtCustomer.Text.Trim() + seperator + Convert.ToDateTime(txtDate.Value.Date).Date.ToString("d") + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.Town:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.PendADVNum:
                    {
                        paramsText.Append("ADVAN" + seperator + BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.AdvanceRecForCus:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefProf + seperator + txtCustomer.Text.Trim() + seperator + null + seperator);
                        break;
                    }
                case CommonUIDefiniton.SearchUserControlType.ReservationNo:
                    {
                        paramsText.Append(BaseCls.GlbUserComCode + seperator + BaseCls.GlbUserDefLoca + seperator + "A" + seperator);
                        break;
                    }
                

                default:
                    break;
            }

            return paramsText.ToString();
        }

        private void btnSearch_Customer_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Customer);
                DataTable _result = CHNLSVC.CommonSearch.GetCustomerGenaral(_commonSearch.SearchParams, null, null, CommonUIDefiniton.SearchUserControlCustomerType.MBE_CD.ToString(), CommonUIDefiniton.ReturnCustomerSearchDisplay(CommonUIDefiniton.SearchUserControlCustomerType.MBE_CD));
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtCustomer;
                _commonSearch.IsSearchEnter = true; //Add by Chamal 10/Aug/2013
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtCustomer.Select();
                txtCustomer.Enabled = true;
            }
            catch (Exception ex) { txtCustomer.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnSearch_NIC_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.NIC);
                DataTable _result = CHNLSVC.CommonSearch.GetCustomerGenaral(_commonSearch.SearchParams, null, null, CommonUIDefiniton.SearchUserControlCustomerType.MBE_NIC.ToString(), CommonUIDefiniton.ReturnCustomerSearchDisplay(CommonUIDefiniton.SearchUserControlCustomerType.MBE_NIC));
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtNIC;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtNIC.Select();
            }
            catch (Exception ex)
            { txtNIC.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnSearch_Mobile_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Mobile);
                DataTable _result = CHNLSVC.CommonSearch.GetCustomerGenaral(_commonSearch.SearchParams, null, null, CommonUIDefiniton.SearchUserControlCustomerType.MBE_MOB.ToString(), CommonUIDefiniton.ReturnCustomerSearchDisplay(CommonUIDefiniton.SearchUserControlCustomerType.MBE_MOB));
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtMobile;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtMobile.Select();
                if (_commonSearch.GlbSelectData == null) return;
                string[] args = _commonSearch.GlbSelectData.Split('|');
                string _cuscode = args[4];
                if (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.Trim() == "CASH") txtCustomer.Text = _cuscode;
                else if (txtCustomer.Text.Trim() != _cuscode && txtCustomer.Text.Trim() != "CASH")
                {
                    DialogResult _res = MessageBox.Show("Currently selected customer code " + txtCustomer.Text + " is differ which selected (" + _cuscode + ") from here. Do you need to change current customer code from selected customer", "Invoice", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (_res == System.Windows.Forms.DialogResult.Yes)
                    {
                        txtCustomer.Text = _cuscode;
                        txtCustomer.Focus();
                        txtCusName.Focus();
                    }
                }
            }
            catch (Exception ex)
            { txtExecutive.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnSearch_Invoice_Click(object sender, EventArgs e)
        {
            //CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
            //_CommonSearch.ReturnIndex = 0;
            //_CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvSalesInvoice);
            //DataTable _result = CHNLSVC.CommonSearch.GetInvoiceSearchData(_CommonSearch.SearchParams, null, null);
            //_CommonSearch.dvResult.DataSource = _result;
            //_CommonSearch.BindUCtrlDDLData(_result);
            //_CommonSearch.obj_TragetTextBox = txtInvoiceNo;
            //_CommonSearch.ShowDialog();
            //txtInvoiceNo.Select();

            if (IsToken) return;
            DecideTokenInvoice();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                CommonSearch.CommonSearchDate _CommonSearch = new CommonSearch.CommonSearchDate();
                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceWithDate);
                DataTable _result = CHNLSVC.CommonSearch.SearchInvoice(_CommonSearch.SearchParams, null, null, txtDate.Value.Date.AddMonths(-1), txtDate.Value.Date);
                _CommonSearch.dtpFrom.Value = txtDate.Value.Date.AddMonths(-1);
                _CommonSearch.dtpTo.Value = txtDate.Value.Date;
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtInvoiceNo;
                //_commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _CommonSearch.IsSearchEnter = true;
                _CommonSearch.ShowDialog();
                txtInvoiceNo.Select();
            }
            catch (Exception ex)
            { txtInvoiceNo.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnSearch_Serial_Click(object sender, EventArgs e)
        {
            try
            {
                MasterLocation _MasterLocation = CHNLSVC.General.GetAllLocationByLocCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, 0);

                if (_MasterLocation.Ml_is_serial == false)
                {
                    MessageBox.Show("This Location is not setup for serial maintain Pls. contact Inventory Department. ", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if (!chkPickGV.Checked)
                {
                    this.Cursor = Cursors.WaitCursor;
                    _commonSearch = new CommonSearch.CommonSearch();
                    _commonSearch.ReturnIndex = 0;
                    _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ItemAvailableSerial);
                    DataTable _result = CHNLSVC.CommonSearch.SearchAvlbleSerial4Invoice(_commonSearch.SearchParams, null, null);
                    _commonSearch.dvResult.DataSource = _result;
                    _commonSearch.BindUCtrlDDLData(_result);
                    _commonSearch.obj_TragetTextBox = txtSerialNo;
                    _commonSearch.IsSearchEnter = true;
                    this.Cursor = Cursors.Default;
                    _commonSearch.ShowDialog();
                    txtSerialNo.Select();
                }
                else
                {
                    this.Cursor = Cursors.WaitCursor;
                    _commonSearch = new CommonSearch.CommonSearch();
                    _commonSearch.ReturnIndex = 0;
                    _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.AvailableGiftVoucher);
                    DataTable _result = CHNLSVC.CommonSearch.SearchAvailableGiftVoucher(_commonSearch.SearchParams, null, null);
                    _commonSearch.dvResult.DataSource = _result;
                    _commonSearch.BindUCtrlDDLData(_result);
                    _commonSearch.obj_TragetTextBox = txtSerialNo;
                    this.Cursor = Cursors.Default;
                    _commonSearch.ShowDialog();
                    string[] _selectedText = null;
                    if (!string.IsNullOrEmpty(_commonSearch.obj_AllResult.Text))
                        _selectedText = _commonSearch.obj_AllResult.Text.Split('|');
                    txtSerialNo.Select();
                }
            }
            catch (Exception ex)
            { txtSerialNo.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnSearch_Item_Click(object sender, EventArgs e)
        {
            _commonSearch = new CommonSearch.CommonSearch();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceItemUnAssable);
                DataTable _result = CHNLSVC.CommonSearch.GetItemforInvoiceSearchData(_commonSearch.SearchParams, null, null);
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtItem;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtItem.Select();
            }
            catch (Exception ex)
            { txtItem.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnSearch_Executive_Click(object sender, EventArgs e)
        {
            //CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

            //_CommonSearch.ReturnIndex = 0;
            //_CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Employee_Executive);
            //DataTable _result = CHNLSVC.CommonSearch.GetEmployeeData(_CommonSearch.SearchParams, null, null);
            //_CommonSearch.dvResult.DataSource = _result;
            //_CommonSearch.BindUCtrlDDLData(_result);
            //_CommonSearch.obj_TragetTextBox = txtExecutive;
            //_CommonSearch.ShowDialog();
            //txtExecutive.Select();

            _commonSearch = new CommonSearch.CommonSearch();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.InvoiceExecutive);
                DataTable _result = CHNLSVC.CommonSearch.SearchEmployeeAssignToProfitCenter(_commonSearch.SearchParams, null, null);
                if (_result == null || _result.Rows.Count <= 0)
                {
                    _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Employee_Executive);
                    _result = CHNLSVC.CommonSearch.GetEmployeeData(_commonSearch.SearchParams, null, null);
                }
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtExecutive;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtExecutive.Select();
            }
            catch (Exception ex)
            { txtExecutive.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtInvoiceNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Invoice_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                txtCustomer.Focus();
        }

        private void txtInvoiceNo_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearch_Invoice_Click(null, null);
        }

        private void txtCustomer_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Customer_Click(null, null);
            if (e.KeyCode == Keys.Enter)
            {
                if (txtNIC.Enabled == false)
                {
                    txtNIC.Enabled = true;
                    txtNIC.Focus();
                }
                else
                {
                    txtNIC.Focus();
                }
            }
        }

        private void txtCustomer_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearch_Customer_Click(null, null);
        }

        private void txtNIC_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_NIC_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                txtMobile.Focus();
        }

        private void txtNIC_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearch_NIC_Click(null, null);
        }

        private void txtMobile_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Mobile_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                txtLoyalty.Focus();
        }

        private void txtMobile_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearch_Mobile_Click(null, null);
        }

        private void txtExecutive_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Executive_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                txtCustomer.Focus();
        }

        private void txtExecutive_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearch_Executive_Click(null, null);
        }

        private void txtSerialNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Serial_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                txtItem.Focus();
        }

        private void txtSerialNo_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearch_Serial_Click(null, null);
        }

        private void txtItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Item_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                cmbBook.Focus();
        }

        private void txtItem_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearch_Item_Click(null, null);
        }

        private void btnGroup_Click(object sender, EventArgs e)
        {
            if (pnlGroupSale.Visible)
                pnlGroupSale.Visible = false;
            else
                pnlGroupSale.Visible = true;
        }

        private void btnSearch_Group_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(cmbInvType.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type!", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbInvType.Focus(); return; }
            if (cmbInvType.Text.Trim() != "CRED") { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Group sales only available for credit sales!", "Credit Sale", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Group_Sale);
                DataTable _result = CHNLSVC.CommonSearch.GetGroupSaleSearchData(_commonSearch.SearchParams, null, null);
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtGroup;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtGroup.Select();
            }
            catch (Exception ex)
            { txtGroup.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtGroup_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearch_Group_Click(null, null);
        }

        private void txtGroup_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearch_Group_Click(null, null);
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            using (new CenterWinDialog(this))
            {
                if (MessageBox.Show("Do you want to close " + this.Text + "?", "Closing...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                {
                    this.Close();
                }
            }
        }

        private void btnSearch_Loyalty_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtCustomer.Text) && IsNewCustomer == false) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer code.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCustomer.Clear(); txtCustomer.Focus(); return; }
            //if (string.IsNullOrEmpty(txtCustomer.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer code.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCustomer.Clear(); txtCustomer.Focus(); return; }
            try
            {
                _commonSearch = new CommonSearch.CommonSearch();
                this.Cursor = Cursors.WaitCursor;
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCard);
                DataTable _result = CHNLSVC.CommonSearch.SearchLoyaltyCard(_commonSearch.SearchParams, null, null);
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtLoyalty;
                _commonSearch.IsSearchEnter = true;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtLoyalty.Select();
            }
            catch (Exception ex)
            { txtLoyalty.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtLoyalty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter) cmbTitle.Focus();
            if (e.KeyCode == Keys.F2) btnSearch_Loyalty_Click(null, null);
        }

        private void txtLoyalty_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearch_Loyalty_Click(null, null);
        }

        //http://msdn.microsoft.com/en-us/library/system.midpointrounding.aspx
        private decimal FigureRoundUp(decimal value, bool _isFinal)
        {
            if (IsSaleFigureRoundUp && _isFinal) return RoundUpForPlace(Math.Round(value), 2);
            //else return RoundUpForPlace(value, 2);
            else return Math.Round(value, 2);
        }

        private void LoadControl()
        {
            txtAddress1.GotFocus += txtAddress_GotFocus;
            txtAddress2.GotFocus += txtAddress_GotFocus;

            txtAddress1.LostFocus += txtAddress_LostFocus;
            txtAddress2.LostFocus += txtAddress_LostFocus;
            btnAddItem.GotFocus += btnAddItem_GotFocus;
            btnAddItem.LostFocus += btnAddItem_LostFocus;
            btnAddItem.MouseHover += btnAddItem_GotFocus;
            btnAddItem.MouseLeave += btnAddItem_LostFocus;

            txtInvoiceNo.DragDrop += new DragEventHandler(txtItem_DragDrop);
            txtInvoiceNo.DragOver += new DragEventHandler(txtItem_DragEnter);
        }

        private const byte CtrlMask = 8;

        private void txtItem_DragDrop(object sender, DragEventArgs e)
        {
            try
            {
                txtInvoiceNo.Text = e.Data.GetData(DataFormats.Text).ToString().Trim();
                if ((e.KeyState & CtrlMask) != CtrlMask)
                    CheckInvoiceNo(null, null);
            }
            catch (Exception ex)
            { txtInvoiceNo.Clear(); SystemErrorMessage(ex); }
        }

        private void txtItem_DragEnter(object sender, DragEventArgs e)
        {
            try
            {
                if (e.Data.GetDataPresent(DataFormats.Text))
                {
                    if ((e.KeyState & CtrlMask) == CtrlMask)
                    {
                        e.Effect = DragDropEffects.Copy;
                    }
                    else
                    {
                        e.Effect = DragDropEffects.Move;
                    }
                }
                else
                {
                    e.Effect = DragDropEffects.None;
                }
            }
            catch (Exception ex)
            {
                SystemErrorMessage(ex);
            }
        }

        private void btnAddItem_GotFocus(object sender, EventArgs e)
        {
            btnAddItem.BackColor = Color.Yellow;
        }

        private void btnAddItem_LostFocus(object sender, EventArgs e)
        {
            btnAddItem.BackColor = Color.Transparent;
        }

        private void txtDate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                cmbInvType.Focus();
        }

        private void cmbInvType_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtDocRefNo.Focus();
        }

        private void txtDocRefNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                //txtExecutive.Focus();
                cmbExecutive.Focus();
        }

        private void txtCusName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtAddress1.Focus();
                txtAddress1.SelectAll();
            }
        }

        private void txtAddress1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtAddress2.Focus();
        }

        private void txtAddress2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtSerialNo.Focus();
        }

        private void cmbBook_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                cmbLevel.Focus();
        }

        private void cmbLevel_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                cmbStatus.Focus();
        }

        private void cmbStatus_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtQty.Focus();
        }

        private void txtQty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtUnitPrice.Focus();
        }

        private void txtUnitPrice_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtUnitAmt.Focus();
        }

        private void txtUnitAmt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtDisRate.Focus();
        }

        private void txtDisRate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtDisAmt.Focus();
        }

        private void txtDisAmt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtTaxAmt.Focus();
        }

        private void txtTaxAmt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtLineTotAmt.Focus();
        }

        private void txtLineTotAmt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                btnAddItem.Focus();
        }

        private void cmbTitle_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtCusName.Focus();
                txtCusName.SelectAll();
            }
        }

        private void cmbExecutive_Leave(object sender, EventArgs e)
        {
            //if (string.IsNullOrEmpty(Convert.ToString(cmbExecutive.SelectedValue))) return;

            if (!string.IsNullOrEmpty(Convert.ToString(cmbExecutive.SelectedValue)))
            {
                if (_tblExecutive != null)
                {
                    var _find = (from DataRow _l in _tblExecutive.Rows where _l.Field<string>("esep_first_name") == cmbExecutive.Text select _l).ToList();
                    if (_find != null && _find.Count > 0)
                    {
                        txtExecutive.Text = Convert.ToString(cmbExecutive.SelectedValue);
                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the correct sales executive", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtExecutive.Text = string.Empty;
                        cmbExecutive.SelectedIndex = 0;
                    }
                }
            }
            else
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the correct sales executive", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                txtExecutive.Text = string.Empty;
                cmbExecutive.SelectedIndex = -1;
            }
        }

        private void cmbExecutive_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                //txtCustomer.Focus();
                ;
            else
            {
                if (e.KeyCode != Keys.F4)
                    cmbExecutive.DroppedDown = false;
            }
        }

        private void cmbExecutive_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(Convert.ToString(cmbExecutive.SelectedValue)))
            {
                txtExecutive.Text = Convert.ToString(cmbExecutive.SelectedValue);
            }
        }

        #endregion Rooting for Delivery Now Event

        #region Rooting for check group sale code and its value loading

        private void txtGroup_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtGroup.Text)) return;
            if (string.IsNullOrEmpty(cmbInvType.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type!", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbInvType.Focus(); return; }
            if (cmbInvType.Text.Trim() != "CRED") { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Group sales only available for credit sales!", "Credit Sale", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }

            try
            {
                this.Cursor = Cursors.WaitCursor;
                GroupSaleHeader _groupSale = CHNLSVC.Sales.GetGroupSaleHeaderDetails(txtGroup.Text.Trim());
                if (_groupSale != null)
                    if (!string.IsNullOrEmpty(_groupSale.Hgr_com))
                    {
                        ClearTop2p0();
                        ClearTop2p1();
                        ClearTop2p2();
                        txtCustomer.Text = _groupSale.Hgr_Grup_com;
                        LoadCustomerDetailsByCustomer(null, null);
                        return;
                    }
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please check the group sale code.", "Group Sale", MessageBoxButtons.OK, MessageBoxIcon.Information); }
            }
            catch (Exception ex)
            { txtCustomer.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        protected void IsValidManualNo(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (txtManualRefNo.Text != "")
                {
                    Boolean _IsValid = CHNLSVC.Inventory.IsValidManualDocument(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_INV", Convert.ToInt32(txtManualRefNo.Text));
                    if (_IsValid == false)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Invalid Manual Document Number !", "Manual Document", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        txtManualRefNo.Clear();
                        txtManualRefNo.Focus();
                    }
                }
                else
                {
                    if (chkManualRef.Checked == true)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Invalid Manual Document Number !", "Manual Document", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        txtManualRefNo.Focus();
                    }
                }
            }
            catch (Exception ex)
            { txtManualRefNo.Clear(); txtManualRefNo.Enabled = false; chkManualRef.Checked = false; this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        protected void chkManual_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (chkManualRef.Checked == true)
                {
                    _bkNo = "";
                    txtManualRefNo.Enabled = true;
                    Int32 _NextNo = CHNLSVC.Inventory.GetNextManualDocNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_INV");
                    if (_NextNo != 0)
                    {
                        txtManualRefNo.Text = _NextNo.ToString();
                        //kapila 25/4/2016
                        DataTable _dtBk = CHNLSVC.Inventory.GetManualDocBookNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_INV", Convert.ToInt32(txtManualRefNo.Text), null);
                        if (_dtBk.Rows.Count > 0) _bkNo = _dtBk.Rows[0]["mdd_bk_no"].ToString();
                    }
                    else
                        txtManualRefNo.Text = "";
                }
                else
                {
                    txtManualRefNo.Text = string.Empty;
                    txtManualRefNo.Enabled = false;
                }
            }
            catch (Exception ex)
            { txtManualRefNo.Clear(); txtManualRefNo.Enabled = false; chkManualRef.Checked = false; this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtManualRefNo_Leave(object sender, EventArgs e)
        {
            if (chkManualRef.Checked == false) return;

            if (IsNumeric(txtManualRefNo.Text) == false && chkManualRef.Checked)
            {
                MessageBox.Show("Please enter only numeric value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtManualRefNo.Clear();
                return;
            }

            Boolean X = CHNLSVC.Inventory.Check_Temp_coll_Man_doc_dt(BaseCls.GlbUserComCode, BaseCls.GlbUserID, BaseCls.GlbUserDefLoca, "MDOC_INV", string.Empty, Convert.ToInt32(txtManualRefNo.Text.Trim()), GlbModuleName);
            if (X == false)
            {
                using (new CenterWinDialog(this)) { MessageBox.Show("Invalid Manual no", "Manual No", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                txtManualRefNo.Clear();
            }
            //kapila 25/4/2016
            _bkNo = "";
            DataTable _dtBk = CHNLSVC.Inventory.GetManualDocBookNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "MDOC_INV", Convert.ToInt32(txtManualRefNo.Text), null);
            if (_dtBk.Rows.Count > 0) _bkNo = _dtBk.Rows[0]["mdd_bk_no"].ToString();
        }

        #endregion Rooting for check group sale code and its value loading

        #region Rooting for Re-call Invoice

        private void DecideTokenInvoice()
        {
            if (lblInvoice.BackColor == Color.SteelBlue) IsToken = false; else IsToken = true;
        }

        private void AssignInvoiceHeaderDetail(InvoiceHeader _hdr)
        {
            cmbInvType.Text = _hdr.Sah_inv_tp;
            txtDate.Text = _hdr.Sah_dt.ToString("dd/MM/yyyy"); ;
            txtCustomer.Text = _hdr.Sah_cus_cd;
            txtLoyalty.Text = _hdr.Sah_anal_6;
            _masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
            SetCustomerAndDeliveryDetails(true, _hdr);
            ViewCustomerAccountDetail(txtCustomer.Text);
            txtExecutive.Text = _hdr.Sah_sales_ex_cd;
            DataTable _recallemp = CHNLSVC.Sales.GetinvEmp(BaseCls.GlbUserComCode, _hdr.Sah_sales_ex_cd);
            string _name = string.Empty;
            string _code = "";
            if (_recallemp != null && _recallemp.Rows.Count > 0)
            {
                _name = _recallemp.Rows[0].Field<string>("esep_first_name");
                _code = _recallemp.Rows[0].Field<string>("esep_epf");
            }
            //cmbExecutive.DataSource = null;
            //cmbExecutive.Items.Clear();
            //cmbExecutive.Items.Add(_name);
            cmbExecutive.SelectedValue = _code;
            lblCurrency.Text = _hdr.Sah_currency;
            txtManualRefNo.Text = _hdr.Sah_man_ref;
            chkTaxPayable.Checked = _hdr.Sah_tax_inv ? true : false;
            txtManualRefNo.Text = _hdr.Sah_man_ref;
            txtDocRefNo.Text = _hdr.Sah_ref_doc;
            txtPoNo.Text = _hdr.Sah_anal_4;
            txtRemarks.Text = _hdr.Sah_remarks;

        }

        private void RecallInvoice()
        {
            if (string.IsNullOrEmpty(txtInvoiceNo.Text)) return;
            InvoiceHeader _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text);
            if (_hdr == null) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid invoice", "Invalid Invoice", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Text = string.Empty; return; }
            //Add by Chamal 20-07-2014
            if (_hdr.Sah_pc != BaseCls.GlbUserDefProf.ToString()) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid invoice", "Invalid Profit Center", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Text = string.Empty; return; }
            //Add by Chamal 25-08-2014
            if (_hdr.Sah_tp != "INV") { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid invoice", "Invalid Invoice Category", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Text = string.Empty; return; }
            if (_hdr.Sah_inv_tp == "CS" || _hdr.Sah_inv_tp == "TTCA" || _hdr.Sah_inv_tp == "POCA" || cmbInvType.Text == "PTCS" || cmbInvType.Text == "AACS")
            {
                this.Cursor = Cursors.WaitCursor;
            }
            else if (_hdr.Sah_inv_tp == "CRED" || _hdr.Sah_inv_tp == "TTSR" || _hdr.Sah_inv_tp == "POCR" || cmbInvType.Text == "AACR")
            {
                this.Cursor = Cursors.WaitCursor;
            }

            else
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this))
                { MessageBox.Show("Please select the valid invoice", "Invalid Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Text = string.Empty; return;
            }
            if (_hdr.Sah_stus == "R")
            {
                MessageBox.Show("This invoice alredy reversed ", "Invalid Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtInvoiceNo.Text = string.Empty;
                this.Cursor = Cursors.Default;
                return;
            }

            this.Cursor = Cursors.Default;

            AssignInvoiceHeaderDetail(_hdr);
            List<InvoiceItem> _list = CHNLSVC.Sales.GetInvoiceDetailByInvoice(txtInvoiceNo.Text.Trim());
            _invoiceItemList = _list;
            GrndSubTotal = 0;
            GrndDiscount = 0;
            GrndTax = 0;
            InvoiceSerialList = new List<InvoiceSerial>();
            ScanSerialList = new List<ReptPickSerials>();
            InvoiceSerialList = CHNLSVC.Sales.GetInvoiceSerial(txtInvoiceNo.Text.Trim());
            foreach (InvoiceItem itm in _list)
            { CalculateGrandTotal(itm.Sad_qty, itm.Sad_unit_rt, itm.Sad_disc_amt, itm.Sad_itm_tax_amt, true); _lineNo += 1; SSCombineLine += 1; }
            if (InvoiceSerialList == null)
                InvoiceSerialList = new List<InvoiceSerial>();
            gvInvoiceItem.DataSource = _list;

            //load invoice serials
            if (InvoiceSerialList != null && InvoiceSerialList.Count > 0)
            {
                foreach (InvoiceSerial invSer in InvoiceSerialList)
                {
                    ReptPickSerials _rept = CHNLSVC.Inventory.GetAvailableSerIDInformation(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, invSer.Sap_itm_cd, invSer.Sap_ser_1, "N/A", "");
                    if (_rept != null)
                    {
                        List<InvoiceItem> _item = (from _res in _invoiceItemList
                                                   where _res.Sad_itm_cd == invSer.Sap_itm_cd &&
                                                   _res.Sad_itm_line == invSer.Sap_itm_line
                                                   select _res).ToList<InvoiceItem>();
                        if (_item == null || _item.Count <= 0)
                        {
                            MessageBox.Show("Error occurred while recalling invoice\nItem - " + invSer.Sap_itm_cd + " not found on item list", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }
                        _rept.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
                        _rept.Tus_base_itm_line = _item[0].Sad_itm_line;
                        _rept.Tus_usrseq_no = -100;
                        _rept.Tus_unit_price = _rept.Tus_unit_price;
                        MasterItem msitem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, invSer.Sap_itm_cd);
                        //get item status

                        _rept.Tus_new_status = _item[0].Mi_itm_stus;
                        _rept.ItemType = msitem.Mi_itm_tp;
                        ScanSerialList.Add(_rept);
                    }
                }
            }
            gvPopSerial.AutoGenerateColumns = false;
            gvPopSerial.DataSource = ScanSerialList;

            //end load invoice serials

            List<RecieptItem> _itms = CHNLSVC.Sales.GetReceiptItemList(txtInvoiceNo.Text.Trim());
            ucPayModes1.RecieptItemList = _itms;
            _recieptItem = _itms;
            ucPayModes1.LoadRecieptGrid();

            ucPayModes1.TotalAmount = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
            ucPayModes1.LoadData();
            if (_hdr.Sah_stus != "H")
            {
                btnSave.Enabled = false;
                txtItem.Enabled = false;
                txtSerialNo.Enabled = false;
                btnAddItem.Enabled = false;
            }
            else
            {
                btnSave.Enabled = true;
                txtItem.Enabled = true;
                txtSerialNo.Enabled = true;
                btnAddItem.Enabled = true;
            }
        }

        //Darshana
        private void SetCustomerAndDeliveryDetailsGroup(GroupBussinessEntity _cust)
        {
            txtCustomer.Text = _cust.Mbg_cd;
            txtCusName.Text = _cust.Mbg_name;
            txtAddress1.Text = _cust.Mbg_add1;
            txtAddress2.Text = _cust.Mbg_add2;
            txtMobile.Text = _cust.Mbg_mob;
            txtNIC.Text = _cust.Mbg_nic;
            ucPayModes1.Customer_Code = txtCustomer.Text.Trim();
            ucPayModes1.Mobile = txtMobile.Text.Trim();
            txtDelAddress1.Text = _cust.Mbg_add1;
            txtDelAddress2.Text = _cust.Mbg_add2;
            txtDelCustomer.Text = _cust.Mbg_cd;
            txtDelName.Text = _cust.Mbg_name;
            chkTaxPayable.Checked = false;
            chkTaxPayable.Enabled = false;
            cmbTitle.Text = _cust.Mbg_tit;


            //if (string.IsNullOrEmpty(txtNIC.Text)) { cmbTitle.SelectedIndex = 0; return; }
            //if (IsValidNIC(txtNIC.Text) == false) { cmbTitle.SelectedIndex = 0; return; }
            //GetNICGender();
            //if (string.IsNullOrEmpty(txtCusName.Text)) txtCusName.Text = cmbTitle.Text.Trim();
            //else
            //{
            //    string _title = ExtractTitleByCustomerName(txtCusName.Text.Trim());
            //    bool _exist = cmbTitle.Items.Contains(_title);
            //    if (_exist)
            //        cmbTitle.Text = _title;
            //}
        }

        private void SetCustomerAndDeliveryDetails(bool _isRecall, InvoiceHeader _hdr)
        {
            txtCustomer.Text = _masterBusinessCompany.Mbe_cd;
            txtCusName.Text = _masterBusinessCompany.Mbe_name;
            txtAddress1.Text = _masterBusinessCompany.Mbe_add1;
            txtAddress2.Text = _masterBusinessCompany.Mbe_add2;
            txtMobile.Text = _masterBusinessCompany.Mbe_mob;
            txtNIC.Text = _masterBusinessCompany.Mbe_nic;
            cmbTitle.Text = _masterBusinessCompany.MBE_TIT;
            _minDPRate = _masterBusinessCompany.Mbe_min_dp_per;     //kapila 14/1/2016
            if (_masterBusinessCompany.Mbe_town_cd != null)
            {
                txtPerTown.Text = _masterBusinessCompany.Mbe_town_cd.ToUpper();
            }

            ucPayModes1.Customer_Code = txtCustomer.Text.Trim();
            ucPayModes1.Mobile = txtMobile.Text.Trim();

            if (_isRecall == false)
            {
                /* if (string.IsNullOrEmpty(txtDelAddress1.Text))*/
                txtDelAddress1.Text = _masterBusinessCompany.Mbe_add1;
                /* if (string.IsNullOrEmpty(txtDelAddress2.Text))*/
                txtDelAddress2.Text = _masterBusinessCompany.Mbe_add2;
                /* if (string.IsNullOrEmpty(txtDelCustomer.Text) || txtDelCustomer.Text.Trim() == "CASH")*/
                txtDelCustomer.Text = _masterBusinessCompany.Mbe_cd;
                /* if (string.IsNullOrEmpty(txtDelName.Text))*/
                txtDelName.Text = _masterBusinessCompany.Mbe_name;
            }
            else
            {
                txtCusName.Text = _hdr.Sah_cus_name;
                txtAddress1.Text = _hdr.Sah_cus_add1;
                txtAddress2.Text = _hdr.Sah_cus_add2;

                txtDelAddress1.Text = _hdr.Sah_d_cust_add1;
                txtDelAddress2.Text = _hdr.Sah_d_cust_add2;
                txtDelCustomer.Text = _hdr.Sah_d_cust_cd;
                txtDelName.Text = _hdr.Sah_d_cust_name;
                txtDelLocation.Text = _hdr.Sah_del_loc.Trim();
            }

            if (_isRecall == false)
            {
                if (_masterBusinessCompany.Mbe_is_tax) { chkTaxPayable.Checked = true; chkTaxPayable.Enabled = true; } else { chkTaxPayable.Checked = false; chkTaxPayable.Enabled = false; }
            }

            if (string.IsNullOrEmpty(txtNIC.Text)) { cmbTitle.SelectedIndex = 0; return; }
            if (IsValidNIC(txtNIC.Text) == false) { cmbTitle.SelectedIndex = 0; return; }
            GetNICGender();
            if (string.IsNullOrEmpty(txtCusName.Text)) txtCusName.Text = cmbTitle.Text.Trim();
            else
            {
                string _title = ExtractTitleByCustomerName(txtCusName.Text.Trim());
                if (!string.IsNullOrEmpty(_title))
                {
                    bool _exist = cmbTitle.Items.Contains(_title);
                    if (_exist == true)
                    {
                        cmbTitle.Text = _title;
                    }
                }
            }
        }

        private void ViewCustomerAccountDetail(string _customer)
        {
            if (string.IsNullOrEmpty(_customer.Trim())) return;
            if (_customer != "CASH")
            {
                CustomerAccountRef _account = CHNLSVC.Sales.GetCustomerAccount(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                lblAccountBalance.Text = FormatToCurrency(Convert.ToString(_account.Saca_acc_bal));
                lblAvailableCredit.Text = FormatToCurrency(Convert.ToString((_account.Saca_crdt_lmt - _account.Saca_ord_bal - _account.Saca_acc_bal)));
            }
        }

        protected void CheckInvoiceNo(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtInvoiceNo.Text)) { txtCustomer.Focus(); return; }
            //try
            //{
            if (IsToken)
            {
                this.Cursor = Cursors.WaitCursor;
                if (IsNumeric(txtInvoiceNo.Text.Trim()) == false)
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Token should be consist of numeric only", "Token", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Clear(); txtInvoiceNo.Focus(); return; }
                DataTable _token = CHNLSVC.Inventory.GetAvailableToken(DateTime.Now.Date, BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToInt32(txtInvoiceNo.Text.Trim()));
                if (_token == null || _token.Rows.Count <= 0)
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Select token is not valid or incorrect. Please check the no", "Token", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Clear(); txtInvoiceNo.Focus(); return; }
                return;
            }

            DecideTokenInvoice();
            RecallInvoice();
            //}
            //catch (Exception ex)
            //{ txtInvoiceNo.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            //finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void CalculateItem()
        {
            if (!string.IsNullOrEmpty(txtQty.Text) && !string.IsNullOrEmpty(txtUnitPrice.Text))
            {
                txtUnitAmt.Text = FormatToCurrency(Convert.ToString(FigureRoundUp(Convert.ToDecimal(txtUnitPrice.Text.Trim()) * Convert.ToDecimal(txtQty.Text.Trim()), true)));

                decimal _vatPortion = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString().Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true), true);
                txtTaxAmt.Text = FormatToCurrency(Convert.ToString(_vatPortion));

                decimal _totalAmount = Convert.ToDecimal(txtQty.Text) * Convert.ToDecimal(txtUnitPrice.Text);
                decimal _disAmt = 0;

                if (!string.IsNullOrEmpty(txtDisRate.Text))
                {
                    bool _isVATInvoice = false;
                    if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
                    else _isVATInvoice = false;

                    if (_isVATInvoice)
                        _disAmt = FigureRoundUp(_totalAmount * (Convert.ToDecimal(txtDisRate.Text) / 100), true);
                    else
                    {
                        _disAmt = FigureRoundUp((_totalAmount + _vatPortion) * (Convert.ToDecimal(txtDisRate.Text) / 100), true);
                       
                        if (Convert.ToDecimal(txtDisRate.Text) > 0)
                        {
                            if (_priceBookLevelRef != null)
                            {
                                if (_priceBookLevelRef.Sapl_vat_calc)
                                {
                                    decimal _tmpUnitPrice = (_totalAmount + _vatPortion - _disAmt);
                                    //decimal _tmpUnitPrice = (_totalAmount + _vatPortion - _disAmt) / Convert.ToDecimal(txtQty.Text);
                                    decimal _tmpVat = RecalculateTax(_tmpUnitPrice, _vatPortion, txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString().Trim(), true);
                                    txtTaxAmt.Text = Convert.ToString(FigureRoundUp(_tmpVat, true));
                                }
                                else
                                {
                                    txtTaxAmt.Text = "0.00";
                                }
                            }
                            else
                            {
                                txtTaxAmt.Text = "0.00";
                            }
                           

                            //List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty);
                            //if (_tax != null && _tax.Count > 0)
                            //{                               

                            //    //decimal _vatval = ((_totalAmount + _vatPortion - _disAmt) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                            //    //txtTaxAmt.Text = Convert.ToString(FigureRoundUp(_vatval, true));
                            //}
                        }
                        else
                        {
                            //decimal _tmpUnitPrice = (_totalAmount + _vatPortion -( (_disAmt * 100) / (100 + _itm_tax_rate)));
                            ////decimal _tmpUnitPrice = (_totalAmount + _vatPortion - _disAmt) / Convert.ToDecimal(txtQty.Text);
                            //decimal _tmpVat = RecalculateTax(_tmpUnitPrice, _vatPortion, txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString().Trim(), true);
                            //txtTaxAmt.Text = Convert.ToString(FigureRoundUp(_tmpVat, true));
                            if (_priceBookLevelRef != null)
                            {
                                if (_priceBookLevelRef.Sapl_vat_calc)
                                {
                                    decimal _tmpUnitPrice = (_totalAmount + _vatPortion - (_disAmt));
                                    //decimal _tmpUnitPrice = ((_totalAmount + _vatPortion )- ((_disAmt * 100) / (100 + _itm_tax_rate)));
                                    //decimal _tmpUnitPrice = (_totalAmount + _vatPortion - _disAmt) / Convert.ToDecimal(txtQty.Text);
                                    decimal _tmpVat = RecalculateTax(_tmpUnitPrice, _vatPortion, txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString().Trim(), true);
                                    txtTaxAmt.Text = Convert.ToString(FigureRoundUp(_tmpVat, true));
                                }
                                else
                                {
                                    txtTaxAmt.Text = "0.00";
                                }
                            }
                            else
                            {
                                txtTaxAmt.Text = "0.00";
                            }

                       
                        
                        }
                    }

                    txtDisAmt.Text = FormatToCurrency(Convert.ToString(_disAmt));
                }

                if (!string.IsNullOrEmpty(txtTaxAmt.Text))
                {
                    if (Convert.ToDecimal(txtDisRate.Text) > 0)
                    {
                        _totalAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true);
                    }
                    else if (Convert.ToDecimal(txtDisRate.Text) < 0)
                    {
                        //_totalAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true);
                        bool _isVATInv = false;
                        if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInv = true;
                        else _isVATInv = false;

                        //if (_isVATInv)
                        if (_isVATInv == true && Convert.ToDecimal(txtDisRate.Text) < 0)

                        {
                            _totalAmount = FigureRoundUp(_totalAmount + _vatPortion - (_disAmt), true);

                           // _totalAmount = FigureRoundUp(Convert.ToDecimal(txtUnitPrice.Text) + (Convert.ToDecimal(txtDisAmt.Text) * -1 ) + Convert.ToDecimal(txtTaxAmt.Text), true);
                        }
                        else
                        {
                            //_totalAmount = FigureRoundUp(_totalAmount - ((_disAmt * 100) / (100 + _itm_tax_rate)) + Convert.ToDecimal(txtTaxAmt.Text), true);
                            _totalAmount = FigureRoundUp(_totalAmount - (_totalAmount * Convert.ToDecimal(txtDisRate.Text) /100) + Convert.ToDecimal(txtTaxAmt.Text), true);
                        }
                        //else
                            //_totalAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true);
                        //  _totalAmount = FigureRoundUp(_totalAmount - ((_disAmt * 100) / (100 + _itm_tax_rate)) + Convert.ToDecimal(txtTaxAmt.Text), true);
                    }
                    else
                        _totalAmount = FigureRoundUp(_totalAmount + Convert.ToDecimal(txtTaxAmt.Text) - _disAmt, true);
                }

                txtLineTotAmt.Text = FormatToCurrency(Convert.ToString(_totalAmount));
            }
        }

        private decimal CalculateItemTem(decimal _qty, decimal _unitPrice, decimal _disAmount, decimal _disRt)
        {
            string unitAmt = FormatToCurrency(Convert.ToString(FigureRoundUp(Convert.ToDecimal(_unitPrice) * Convert.ToDecimal(_qty), true)));

            decimal _vatPortion = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString().Trim(), Convert.ToDecimal(_qty), _priceBookLevelRef, Convert.ToDecimal(_unitPrice), Convert.ToDecimal(_disAmount), Convert.ToDecimal(_disRt), true), true);
            string tax = FormatToCurrency(Convert.ToString(_vatPortion));

            decimal _totalAmount = Convert.ToDecimal(_qty) * Convert.ToDecimal(_unitPrice);
            decimal _disAmt = 0;

            if (_disRt != 0)
            {
                bool _isVATInvoice = false;
                if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
                else _isVATInvoice = false;

                if (_isVATInvoice)
                    _disAmt = FigureRoundUp(_totalAmount * (Convert.ToDecimal(_disRt) / 100), true);
                else
                {
                    _disAmt = FigureRoundUp((_totalAmount + _vatPortion) * (Convert.ToDecimal(_disRt) / 100), true);
                    if (Convert.ToDecimal(txtDisRate.Text) > 0)
                    {
                        //List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty);
                        List<MasterItemTax> _tax = new List<MasterItemTax>();
                        if (_isStrucBaseTax == true)       //kapila
                        {
                            MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);
                            _tax = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, txtItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty, _mstItem.Mi_anal1);
                        }
                        else
                            _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), Convert.ToString(cmbStatus.SelectedValue), string.Empty, string.Empty);
                        if (_tax != null && _tax.Count > 0)
                        {
                            decimal _vatval = ((_totalAmount + _vatPortion - _disAmt) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                            tax = Convert.ToString(FigureRoundUp(_vatval, true));
                        }
                    }
                }

                FormatToCurrency(Convert.ToString(_disAmt));
            }

            if (!string.IsNullOrEmpty(tax))
            {
                if (Convert.ToDecimal(txtDisRate.Text) > 0)
                    _totalAmount = FigureRoundUp(_totalAmount + _vatPortion - _disAmt, true);
                else
                    _totalAmount = FigureRoundUp(_totalAmount + Convert.ToDecimal(tax) - _disAmt, true);
            }

            return _totalAmount;
        }

        private void CalculateGrandTotal(decimal _qty, decimal _uprice, decimal _discount, decimal _tax, bool _isAddition)
        {
            if (_isAddition)//++
            {
                GrndSubTotal = GrndSubTotal + Convert.ToDecimal(_qty) * Convert.ToDecimal(_uprice);
                GrndDiscount = GrndDiscount + Convert.ToDecimal(_discount);
                GrndTax = GrndTax + Convert.ToDecimal(_tax);
                if (!string.IsNullOrEmpty(lblPVBal.Text))
                    lblPVBal.Text = (Convert.ToDecimal(lblPVBal.Text) - Convert.ToDecimal(_discount)).ToString();

                lblGrndSubTotal.Text = FormatToCurrency(Convert.ToString(GrndSubTotal));
                lblGrndDiscount.Text = FormatToCurrency(Convert.ToString(GrndDiscount));
                lblGrndTax.Text = FormatToCurrency(Convert.ToString(GrndTax));
            }
            else//--
            {
                GrndSubTotal = GrndSubTotal - Convert.ToDecimal(_qty) * Convert.ToDecimal(_uprice);
                GrndDiscount = GrndDiscount - Convert.ToDecimal(_discount);
                GrndTax = GrndTax - Convert.ToDecimal(_tax);
                if (!string.IsNullOrEmpty(lblPVBal.Text))
                    lblPVBal.Text = (Convert.ToDecimal(lblPVBal.Text) + Convert.ToDecimal(_discount)).ToString();

                lblGrndSubTotal.Text = FormatToCurrency(Convert.ToString(GrndSubTotal));
                lblGrndDiscount.Text = FormatToCurrency(Convert.ToString(GrndDiscount));
                lblGrndTax.Text = FormatToCurrency(Convert.ToString(GrndTax));
            }

            lblGrndAfterDiscount.Text = FormatToCurrency(Convert.ToString(GrndSubTotal - GrndDiscount));
            //lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(FigureRoundUp(GrndSubTotal - GrndDiscount + GrndTax, true,false)));
            if (_invoiceItemList != null || _invoiceItemList.Count > 0) lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt))); else lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));
            //TODO: remove remark, when apply payment UC
            //txtPayAmount.Text = FormatToCurrency(Convert.ToString((Convert.ToDecimal(lblGrndTotalAmount.Text) - Convert.ToDecimal(_paidAmount))));
            //lblPayBalance.Text = lblGrndTotalAmount.Text;
        }

        private decimal TaxCalculation(string _item, string _status, decimal _qty, PriceBookLevelRef _level, decimal _pbUnitPrice, decimal _discount, decimal _disRate, bool _isTaxfaction)
        {
            decimal _returnValValue = 0;
            decimal _pbUnitPrice_new = _pbUnitPrice;

            if (_priceBookLevelRef != null)
                if (_priceBookLevelRef.Sapl_vat_calc)
                {
                    bool _isVATInvoice = false;
                    if (chkTaxPayable.Checked || lblVatExemptStatus.Text == "Available") _isVATInvoice = true;
                    else _isVATInvoice = false;


                    if (txtDate.Value.Date == _serverDt)
                    {
                        List<MasterItemTax> _taxs = new List<MasterItemTax>();
                        if (_isTaxfaction == false)
                        {
                            //  _taxs = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, _status);
                            if (_isStrucBaseTax == true)       //kapila
                            {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                //_taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _status, null, null, _mstItem.Mi_anal1);
                                //kapila 30/1/2017
                                _taxs = CHNLSVC.Sales.GetTax_strucbase(BaseCls.GlbUserComCode, _item, _status, null, null, _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, _status);
                        }
                        else
                        {
                            //  _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT");
                            if (_isStrucBaseTax == true)       //kapila
                            {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT", _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT");
                        }
                        var _Tax = from _itm in _taxs
                                   select _itm;
                        foreach (MasterItemTax _one in _Tax)
                        {
                            if (_one.Mict_tax_cd != "NBT")
                            {
                                 _itm_tax_rate= _one.Mict_tax_rate;
                            }
                          
                            if (lblVatExemptStatus.Text != "Available")
                            {
                                if (_isTaxfaction == false)
                                    if (_isStrucBaseTax == true)   //kapila 9/2/2017
                                        _returnValValue = _pbUnitPrice;
                                    //_pbUnitPrice = _pbUnitPrice;
                                    else
                                        _returnValValue += _pbUnitPrice * _one.Mict_tax_rate;
                                //_pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate;
                                else
                                    if (_isVATInvoice)
                                    {
                                        _discount = (_pbUnitPrice * _qty) * _disRate / 100;
                                        _returnValValue += (((_pbUnitPrice - _discount / _qty) + _returnValValue) * _one.Mict_tax_rate / 100) * _qty;

                                        //_discount = _pbUnitPrice * _qty * _disRate / 100;
                                        //_pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
                                    }
                                    else
                                        //if (_disRate < 0)
                                        //{
                                        //    _returnValValue += ((_pbUnitPrice + _returnValValue - ((_discount * 100) / (100 + _one.Mict_tax_rate))) * _one.Mict_tax_rate / 100) * _qty;   
                                        //}
                                        //else
                                        //{

                                        //if (_isTaxfaction == false)
                                        //{
                                        //    _pbUnitPrice_new = _pbUnitPrice;
                                        //    if (_disRate < 0)
                                        //    {
                                        //        _pbUnitPrice = _pbUnitPrice - (_pbUnitPrice * _disRate / 100);
                                        //    }
                                        //}

                                _returnValValue += ((_pbUnitPrice + _returnValValue) * _one.Mict_tax_rate / 100) * _qty;
                                //if (_isTaxfaction == false)
                                //{
                                //    _pbUnitPrice_new = _pbUnitPrice;
                                //    if (_disRate < 0)
                                //    {
                                //        _pbUnitPrice = _pbUnitPrice_new;
                                //    }
                                //}
                               
                                       // }
                                        //_returnValValue += ((_pbUnitPrice + _returnValValue) * _one.Mict_tax_rate / 100) * _qty;
                                //_pbUnitPrice = (_pbUnitPrice * _one.Mict_tax_rate / 100) * _qty;
                            }
                            else
                            {
                                if (_isTaxfaction)
                                    _returnValValue = 0;
                                else
                                    _returnValValue = _pbUnitPrice;
                            }
                        }
                    }
                    else
                    {
                        List<MasterItemTax> _taxs = new List<MasterItemTax>();
                        if (_isTaxfaction == false)
                            _taxs = CHNLSVC.Sales.GetTaxEffDt(BaseCls.GlbUserComCode, _item, _status, txtDate.Value.Date);
                        else
                            _taxs = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT", txtDate.Value.Date);

                        var _Tax = from _itm in _taxs
                                   select _itm;
                        if (_taxs.Count > 0)
                        {
                            foreach (MasterItemTax _one in _Tax)
                            {
                                if (lblVatExemptStatus.Text != "Available")
                                {
                                    if (_isTaxfaction == false)
                                        if (_isStrucBaseTax == true)   //kapila 9/2/2017
                                            _returnValValue = _pbUnitPrice;
                                        //_pbUnitPrice = _pbUnitPrice;
                                        else
                                            _returnValValue += _pbUnitPrice * _one.Mict_tax_rate;
                                    //_pbUnitPrice = _pbUnitPrice * _one.Mict_tax_rate;
                                    else
                                        if (_isVATInvoice)
                                        {
                                            _discount = (_pbUnitPrice * _qty) * _disRate / 100;
                                            _returnValValue += (((_pbUnitPrice - _discount / _qty) + _returnValValue) * _one.Mict_tax_rate / 100) * _qty;

                                            //_discount = _pbUnitPrice * _qty * _disRate / 100;
                                            //_pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Mict_tax_rate / 100) * _qty;
                                        }
                                        else
                                            _returnValValue += ((_pbUnitPrice + _returnValValue) * _one.Mict_tax_rate / 100) * _qty;
                                    //_pbUnitPrice = (_pbUnitPrice * _one.Mict_tax_rate / 100) * _qty;
                                }
                                else
                                {
                                    if (_isTaxfaction)
                                        _returnValValue = 0;
                                    else
                                        _returnValValue = _pbUnitPrice;
                                }
                            }
                        }
                        else
                        {
                            List<LogMasterItemTax> _taxsEffDt = new List<LogMasterItemTax>();
                            if (_isTaxfaction == false)
                                _taxsEffDt = CHNLSVC.Sales.GetTaxLog(BaseCls.GlbUserComCode, _item, _status, txtDate.Value.Date);
                            else
                                _taxsEffDt = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, _item, _status, string.Empty, "VAT", txtDate.Value.Date);

                            var _TaxEffDt = from _itm in _taxsEffDt
                                            select _itm;
                            foreach (LogMasterItemTax _one in _TaxEffDt)
                            {
                                if (lblVatExemptStatus.Text != "Available")
                                {
                                    if (_isTaxfaction == false)
                                        if (_isStrucBaseTax == true)    //kapila 9/2/2017
                                            _returnValValue = _pbUnitPrice;
                                        //_pbUnitPrice = _pbUnitPrice;
                                        else
                                            _returnValValue += _pbUnitPrice * _one.Lict_tax_rate;
                                    //_pbUnitPrice = _pbUnitPrice * _one.Lict_tax_rate;
                                    else
                                        if (_isVATInvoice)
                                        {
                                            _discount = (_pbUnitPrice * _qty) * _disRate / 100;
                                            _returnValValue += (((_pbUnitPrice - _discount / _qty) + _returnValValue) * _one.Lict_tax_rate / 100) * _qty;

                                            //_discount = _pbUnitPrice * _qty * _disRate / 100;
                                            //_pbUnitPrice = ((_pbUnitPrice - _discount / _qty) * _one.Lict_tax_rate / 100) * _qty;
                                        }
                                        else
                                            _returnValValue += ((_pbUnitPrice + _returnValValue) * _one.Lict_tax_rate / 100) * _qty;
                                    //_pbUnitPrice = (_pbUnitPrice * _one.Lict_tax_rate / 100) * _qty;
                                }
                                else
                                {
                                    if (_isTaxfaction)
                                        _returnValValue = 0;
                                    else
                                        _returnValValue = _pbUnitPrice;
                                }
                            }
                        }
                    }
                }
                else
                {
                    _returnValValue = _pbUnitPrice;
                    if (_isTaxfaction) _returnValValue = 0;
                }

                    
            return _returnValValue;
        }

        private void GetNICGender()
        {
            String nic_ = txtNIC.Text.Trim().ToUpper();
            char[] nicarray = nic_.ToCharArray();
            string thirdNum = (nicarray[2]).ToString();
            if (thirdNum == "5" || thirdNum == "6" || thirdNum == "7" || thirdNum == "8" || thirdNum == "9")
            {
                cmbTitle.Text = "MS.";
            }
            else
            {
                cmbTitle.Text = "MR.";
            }
        }

        private void ClearCustomer(bool _isCustomer)
        {
            if (_isCustomer) txtCustomer.Clear();
            txtCusName.Clear();
            txtAddress1.Clear();
            txtAddress2.Clear();
            txtMobile.Clear();
            txtNIC.Clear();
            chkTaxPayable.Checked = false;
            txtLoyalty.Clear();
        }

        protected void LoadCustomerDetailsByCustomer(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtCustomer.Text)) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (cmbInvType.Text.Trim() == "CRED" && txtCustomer.Text.Trim() == "CASH")
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not select customer as CASH, because your invoice type is " + cmbInvType.Text, "Credit Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    ClearCustomer(false);
                    txtCustomer.Focus();
                    return;
                }

                _masterBusinessCompany = new MasterBusinessEntity();
                if (!string.IsNullOrEmpty(txtCustomer.Text))
                    //_masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                    _masterBusinessCompany = CHNLSVC.Sales.GetCustomerProfileByCom(txtCustomer.Text, null, null, null, null, BaseCls.GlbUserComCode);

                //Akila 2017/10/26
                if ((!string.IsNullOrEmpty(txtCustomer.Text.Trim())) && (txtCustomer.Text != "CASH") && (BaseCls.GlbUserComCode != "AAL"))
                {
                    if (!IsValidCustomer(txtCustomer.Text.Trim(), cmbInvType.SelectedValue.ToString()))
                    {
                        return;
                    }
                }

                if (_masterBusinessCompany.Mbe_cd != null)
                {
                    //IsNewCustomer = true;
                    if (_masterBusinessCompany.Mbe_act == false)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("This customer already inactive. Please contact Accounts dept.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }

                    DataTable _table = CHNLSVC.Sales.GetCustomerAllowInvoiceType(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                    if (_table != null && _table.Rows.Count > 0)
                    {
                        if (cmbInvType.Text != "CS" && cmbInvType.Text != "POCA" && cmbInvType.Text != "PTCS" && cmbInvType.Text != "AACS" && cmbInvType.Text != "TTCA")
                        {
                            var _isAvailable = _table.AsEnumerable().Where(x => x.Field<string>("mbsa_sa_tp") == cmbInvType.Text.Trim()).ToList();
                            if (_isAvailable == null || _isAvailable.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                ClearCustomer(true);
                                txtCustomer.Focus();
                                return;
                            }
                        }
                    }
                    else if (cmbInvType.Text != "CS" && cmbInvType.Text != "POCA" && cmbInvType.Text != "PTCS" && cmbInvType.Text != "AACS" && cmbInvType.Text != "TTCA")
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }

                    if (_masterBusinessCompany.Mbe_cd == "CASH")
                    {
                        txtCustomer.Text = _masterBusinessCompany.Mbe_cd;
                        SetCustomerAndDeliveryDetails(false, null);
                        //ClearCustomer(false);
                    }
                    else
                    {
                        LoadTaxDetail(_masterBusinessCompany);
                        SetCustomerAndDeliveryDetails(false, null);
                    }

                    ViewCustomerAccountDetail(txtCustomer.Text);
                    //txtLoyalty.Text = ReturnLoyaltyNo();
                    //cmbTitle_SelectedIndexChanged(null, null);
                    //txtLoyalty_Leave(null, null);
                }
                else
                {
                    GroupBussinessEntity _grupProf = GetbyCustCDGrup(txtCustomer.Text.Trim().ToUpper());
                    if (_grupProf.Mbg_cd != null && _grupProf.Mbg_act == true)
                    {
                        SetCustomerAndDeliveryDetailsGroup(_grupProf);
                        _isGroup = true;

                        DataTable _table = CHNLSVC.Sales.GetCustomerAllowInvoiceType(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                        if (_table != null && _table.Rows.Count > 0)
                        {
                            var _isAvailable = _table.AsEnumerable().Where(x => x.Field<string>("mbsa_sa_tp") == cmbInvType.Text.Trim()).ToList();
                            if (_isAvailable == null || _isAvailable.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                ClearCustomer(true);
                                txtCustomer.Focus();
                                return;
                            }
                        }
                        else if (cmbInvType.Text != "CS" && cmbInvType.Text != "POCA" && cmbInvType.Text != "PTCS" && cmbInvType.Text != "AACS")
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            ClearCustomer(true);
                            txtCustomer.Focus();
                            return;
                        }
                    }
                    else
                    {
                        _isGroup = false;
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid customer", "Customer Detail", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }

                }

                //kapila 22/11/2016
                if (!string.IsNullOrEmpty(txtMobile.Text))
                {
                    if (!IsValidMobileOrLandNo(txtMobile.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid mobile", "Customer Mobile", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtMobile.Text = ""; return;
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }
                }
                // ViewCustomerAccountDetail(txtCustomer.Text);
                txtLoyalty.Text = ReturnLoyaltyNo();
                txtLoyalty_Leave(null, null);
                EnableDisableCustomer();
                cmbTitle_SelectedIndexChanged(null, null);
            }
            catch (Exception ex)
            { ClearCustomer(true); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        public GroupBussinessEntity GetbyCustCDGrup(string custCD)
        {
            return CHNLSVC.Sales.GetCustomerProfileByGrup(custCD, null, null, null, null, null);
        }

        protected void LoadCustomerDetailsByNIC(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtNIC.Text)) { return; }
            _masterBusinessCompany = new MasterBusinessEntity();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (!string.IsNullOrEmpty(txtNIC.Text))
                {
                    if (!IsValidNIC(txtNIC.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid NIC", "Customer NIC", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtNIC.Text = ""; return;
                    }
                    List<MasterBusinessEntity> _custList = CHNLSVC.Sales.GetActiveCustomerDetailList(BaseCls.GlbUserComCode, string.Empty, txtNIC.Text, string.Empty, "C");
                    if (_custList != null && _custList.Count > 0)
                    {
                        if (_custList.Count > 1)
                        {
                            //Tempory removed by Chamal 26-04-2014
                            //if (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.Trim() == "CASH") MessageBox.Show("There are " + _custList.Count + " number of active customers are available for the selected NIC.\nPlease contact Accounts Dept.", "Customers", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); txtNIC.Clear(); txtNIC.Focus(); return;
                        }
                    }

                    if (cmbInvType.Text.Trim() == "CRED")
                    {
                        if (_custList != null && _custList.Count > 0) { foreach (MasterBusinessEntity _cust in _custList) { if (_cust.Mbe_is_suspend == true) { MessageBox.Show("Customer suspend!\n[" + _cust.Mbe_cd + " | " + _cust.Mbe_name + "]\nFor more information, please contact Accounts Dept.", "Customers", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); txtNIC.Clear(); txtNIC.Focus(); return; } } }
                    }

                    //_masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, string.Empty, txtNIC.Text, string.Empty, "C");
                    _masterBusinessCompany = CHNLSVC.Sales.GetCustomerProfileByCom(null, txtNIC.Text, null, null, null, BaseCls.GlbUserComCode);
                }
                if (!string.IsNullOrEmpty(_masterBusinessCompany.Mbe_cd))
                {
                    if (_masterBusinessCompany.Mbe_act == true)
                    {
                        LoadTaxDetail(_masterBusinessCompany);
                        SetCustomerAndDeliveryDetails(false, null);
                        ViewCustomerAccountDetail(txtCustomer.Text);
                        GetNICGender();
                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("This customer already inactive. Please contact accounts dept.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }
                }
                else
                {

                    GroupBussinessEntity _grupProf = GetbyNICGrup(txtNIC.Text.Trim().ToUpper());
                    if (_grupProf.Mbg_cd != null && _grupProf.Mbg_act == true)
                    {
                        GetNICGender();
                        SetCustomerAndDeliveryDetailsGroup(_grupProf);
                        _isGroup = true;

                        DataTable _table = CHNLSVC.Sales.GetCustomerAllowInvoiceType(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                        if (_table != null && _table.Rows.Count > 0)
                        {
                            var _isAvailable = _table.AsEnumerable().Where(x => x.Field<string>("mbsa_sa_tp") == cmbInvType.Text.Trim()).ToList();
                            if (_isAvailable == null || _isAvailable.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Customer is not allow for enter transaction under selected invoice type.\n Contact A/C department", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                ClearCustomer(true);
                                txtCustomer.Focus();
                                return;
                            }
                        }
                        else if (cmbInvType.Text != "CS" && cmbInvType.Text != "POCA" && cmbInvType.Text != "PTCS" && cmbInvType.Text != "AACS")
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type.\n Contact A/C department", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            ClearCustomer(true);
                            txtCustomer.Focus();
                            return;
                        }
                    }

                }

                //Akila 2017/10/26
                if ((!string.IsNullOrEmpty(txtCustomer.Text.Trim())) && (txtCustomer.Text != "CASH") && (BaseCls.GlbUserComCode != "AAL"))
                {
                    if (!IsValidCustomer(txtCustomer.Text.Trim(), cmbInvType.SelectedValue.ToString()))
                    {
                        return;
                    }

                }

                txtLoyalty.Text = ReturnLoyaltyNo();
                txtLoyalty_Leave(null, null);
                EnableDisableCustomer();
                cmbTitle_SelectedIndexChanged(null, null);
                txtMobile.Focus();
            }
            catch (Exception ex)
            { ClearCustomer(true); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        public GroupBussinessEntity GetbyNICGrup(string nic)
        {
            return CHNLSVC.Sales.GetCustomerProfileByGrup(null, nic, null, null, null, null);
        }

        protected void LoadCustomerDetailsByMobile(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtMobile.Text)) return;
            _masterBusinessCompany = new MasterBusinessEntity();
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (!string.IsNullOrEmpty(txtMobile.Text))
                {
                    if (!IsValidMobileOrLandNo(txtMobile.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid mobile", "Customer Mobile", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtMobile.Text = ""; return;
                    }
                    List<MasterBusinessEntity> _custList = CHNLSVC.Sales.GetActiveCustomerDetailList(BaseCls.GlbUserComCode, string.Empty, string.Empty, txtMobile.Text, "C");
                    if (_custList != null && _custList.Count > 0)
                    {
                        if (_custList.Count > 1)
                        {
                            //Tempory removed by Chamal 26-04-2014
                            //if (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.Trim() == "CASH") MessageBox.Show("There are " + _custList.Count + " number of customers are available for the selected mobile.", "Customers", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); txtMobile.Clear(); txtMobile.Focus(); return;
                        }
                    }

                    if (!string.IsNullOrEmpty(txtCustomer.Text) && txtCustomer.Text.Trim() != "CASH")
                        _masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text.Trim(), string.Empty, txtMobile.Text, "C");
                    else
                        _masterBusinessCompany = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, string.Empty, string.Empty, txtMobile.Text, "C");
                    ucPayModes1.Mobile = txtMobile.Text.Trim();

                }
                //if (!string.IsNullOrEmpty(_masterBusinessCompany.Mbe_cd) && txtCustomer.Text != "CASH")
                if (!string.IsNullOrEmpty(_masterBusinessCompany.Mbe_cd))
                {
                    if (_masterBusinessCompany.Mbe_act == true)
                    {
                        LoadTaxDetail(_masterBusinessCompany);
                        SetCustomerAndDeliveryDetails(false, null);
                        ViewCustomerAccountDetail(txtCustomer.Text);
                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("This customer already inactive. Please contact accounts dept.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        ClearCustomer(true);
                        txtCustomer.Focus();
                        return;
                    }
                }
                else
                {
                    GroupBussinessEntity _grupProf = GetbyMobGrup(txtMobile.Text.Trim().ToUpper());
                    if (_grupProf.Mbg_cd != null && _grupProf.Mbg_act == true)
                    {
                        SetCustomerAndDeliveryDetailsGroup(_grupProf);
                        _isGroup = true;
                        DataTable _table = CHNLSVC.Sales.GetCustomerAllowInvoiceType(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                        if (_table != null && _table.Rows.Count > 0)
                        {
                            var _isAvailable = _table.AsEnumerable().Where(x => x.Field<string>("mbsa_sa_tp") == cmbInvType.Text.Trim()).ToList();
                            if (_isAvailable == null || _isAvailable.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                ClearCustomer(true);
                                txtCustomer.Focus();
                                return;
                            }
                        }
                        else if (cmbInvType.Text != "CS" && cmbInvType.Text != "POCA" && cmbInvType.Text != "PTCS" && cmbInvType.Text != "AACS")
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type.", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            ClearCustomer(true);
                            txtCustomer.Focus();
                            return;
                        }
                    }
                    else
                    {
                        _isGroup = false;
                    }
                }

                //Akila 2017/10/26
                if ((!string.IsNullOrEmpty(txtCustomer.Text.Trim())) && (txtCustomer.Text != "CASH") && (BaseCls.GlbUserComCode != "AAL"))
                {
                    if (!IsValidCustomer(txtCustomer.Text.Trim(), cmbInvType.SelectedValue.ToString()))
                    {
                        return;
                    }
                }

                txtLoyalty.Text = ReturnLoyaltyNo();
                txtLoyalty_Leave(null, null);
                EnableDisableCustomer();
                cmbTitle_SelectedIndexChanged(null, null);
            }
            catch (Exception ex)
            { ClearCustomer(true); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        public GroupBussinessEntity GetbyMobGrup(string mobNo)
        {
            return CHNLSVC.Sales.GetCustomerProfileByGrup(null, null, null, null, null, mobNo);
        }

        private void LoadTaxDetail(MasterBusinessEntity _entity)
        {
            lblSVatStatus.Text = _entity.Mbe_is_svat ? "Available" : "None";
            lblVatExemptStatus.Text = _entity.Mbe_tax_ex ? "Available" : "None";
        }

        private void cmbTitle_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (string.IsNullOrEmpty(txtCusName.Text))
                {
                   // txtCusName.Text = cmbTitle.Text.Trim();
                }                    
                else
                {
                    string _title = ExtractTitleByCustomerName(txtCusName.Text.Trim());
                    if (string.IsNullOrEmpty(_title))
                        txtCusName.Text = cmbTitle.Text.Trim() + txtCusName.Text;
                    else
                    {
                        bool _isExist = cmbTitle.Items.Contains(_title);
                        if (_isExist)
                        {
                            string _currentCustomerName = txtCusName.Text.Trim();
                            txtCusName.Text = _currentCustomerName.Replace(_title.ToUpper(), cmbTitle.Text.Trim().ToUpper());
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; }
        }

        private bool LoadItemDetail(string _item)
        {
            lblItemDescription.Text = "Description : " + string.Empty;
            lblItemModel.Text = "Model : " + string.Empty;
            lblItemBrand.Text = "Brand : " + string.Empty;
            lblItemSerialStatus.Text = "Serial Status : " + string.Empty;
            _itemdetail = new MasterItem();

            bool _isValid = false;

            if (!string.IsNullOrEmpty(_item)) _itemdetail = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
            if (_itemdetail != null && !string.IsNullOrEmpty(_itemdetail.Mi_cd))
            {
                _isValid = true;
                string _description = _itemdetail.Mi_longdesc;
                string _model = _itemdetail.Mi_model;
                string _brand = _itemdetail.Mi_brand;
                string _serialstatus = _itemdetail.Mi_is_ser1 == 1 ? "Available" : "Non";

                lblItemDescription.Text = "Description : " + _description;
                lblItemModel.Text = "Model : " + _model;
                lblItemBrand.Text = "Brand : " + _brand;
                lblItemSerialStatus.Text = "Serial Status : " + _serialstatus;
            }
            else _isValid = false;
            return _isValid;
        }

        private bool LoadBuyBackItemDetail(string _item)
        {
            lblBBDescription.Text = "Description : " + string.Empty;
            lblBBModel.Text = "Model : " + string.Empty;
            lblBBBrand.Text = "Brand : " + string.Empty;
            _itemdetail = new MasterItem();

            bool _isValid = false;

            if (!string.IsNullOrEmpty(_item)) _itemdetail = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
            if (_itemdetail != null)
                if (!string.IsNullOrEmpty(_itemdetail.Mi_cd))
                {
                    _isValid = true;
                    string _description = _itemdetail.Mi_longdesc;
                    string _model = _itemdetail.Mi_model;
                    string _brand = _itemdetail.Mi_brand;
                    string _serialstatus = _itemdetail.Mi_is_ser1 == 1 ? "Available" : "Non";

                    lblBBDescription.Text = "Description : " + _description;
                    lblBBModel.Text = "Model : " + _model;
                    lblBBBrand.Text = "Brand : " + _brand;
                }
            if (!_item.Contains("BUY BACK"))
                _isValid = false;

            return _isValid;
        }

        private bool LoadPriceBook(string _invoiceType)
        {
            bool _isAvailable = false;
            if (_PriceDefinitionRef != null)
                if (_PriceDefinitionRef.Count > 0)
                {
                    _isAvailable = true;
                    var _books = _PriceDefinitionRef.Where(x => x.Sadd_doc_tp == cmbInvType.Text).Select(x => x.Sadd_pb).Distinct().ToList();
                    _books.Add("");
                    cmbBook.DataSource = _books;
                    cmbBook.SelectedIndex = cmbBook.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultBook)) cmbBook.Text = DefaultBook;
                }
                else
                    cmbBook.DataSource = null;
            else
                cmbBook.DataSource = null;

            return _isAvailable;
        }

        private bool LoadPriceLevel(string _invoiceType, string _book)
        {
            bool _isAvailable = false;
            if (_PriceDefinitionRef != null)
                if (_PriceDefinitionRef.Count > 0)
                {

                    _isAvailable = true;
                    var _levels = _PriceDefinitionRef.Where(x => x.Sadd_doc_tp == cmbInvType.Text && x.Sadd_pb == _book).Select(y => y.Sadd_p_lvl).Distinct().ToList();
                    _levels.Add("");
                    cmbLevel.DataSource = _levels;
                    cmbLevel.SelectedIndex = cmbLevel.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultLevel) && !string.IsNullOrEmpty(cmbBook.Text)) cmbLevel.Text = DefaultLevel;
                    _priceBookLevelRefList = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _book.Trim(), cmbLevel.Text.Trim());

                    LoadPriceLevelMessage();
                }
                else
                    cmbLevel.DataSource = null;
            else cmbLevel.DataSource = null;

            return _isAvailable;
        }

        private bool LoadInvoiceType()
        {
            bool _isAvailable = false;
            if (_PriceDefinitionRef != null)
                if (_PriceDefinitionRef.Count > 0)
                {
                    _isAvailable = true;
                    var _types = _PriceDefinitionRef.Where(X => !X.Sadd_doc_tp.Contains("HS")).Select(x => x.Sadd_doc_tp).Distinct().ToList();
                    _types.Add("");
                    cmbInvType.DataSource = _types;
                    cmbInvType.SelectedIndex = cmbInvType.Items.Count - 1;
                    if (!string.IsNullOrEmpty(DefaultInvoiceType)) cmbInvType.Text = DefaultInvoiceType;

                    //var _val = (from _p in _type.AsEnumerable()
                    //            select new
                    //            {
                    //                Code = _p.Field<string>(0),
                    //                Description = _p.Field<string>(1)

                    //            }).ToList();

                    //multiColumnCombo1._queryObject = _val;
                    //multiColumnCombo1.DataSource = _type;
                }
                else
                    cmbInvType.DataSource = null;
            else
                cmbInvType.DataSource = null;

            return _isAvailable;
        }

        private DataTable _levelStatus = null;

        private void LoadPriceLevelMessage()
        {
            DataTable _msg = CHNLSVC.Sales.GetPriceLevelMessage(BaseCls.GlbUserComCode, cmbBook.Text, cmbLevel.Text);
            if (_msg != null && _msg.Rows.Count > 0) lblLvlMsg.Text = _msg.Rows[0].Field<string>("Sapl_spmsg");
            else lblLvlMsg.Text = string.Empty;
        }

        private bool LoadLevelStatus(string _invType, string _book, string _level)
        {
            _levelStatus = null;
            bool _isAvailable = false;
            string _initPara = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.PriceLevelItemStatus);
            _levelStatus = CHNLSVC.CommonSearch.GetPriceLevelItemStatusData(_initPara, null, null);
            if (_levelStatus != null)
                if (_levelStatus.Rows.Count > 0)
                {
                    _isAvailable = true;
                    var _types = _levelStatus.AsEnumerable().Select(x => x.Field<string>("Code")).Distinct().ToList();
                    _types.Add("");
                    cmbStatus.DataSource = _types;
                    cmbStatus.SelectedIndex = cmbStatus.Items.Count - 1;

                    //Tharindu  05-Apr-2018
                    //After add promotion item, item status set as blank then tax calculation wrong
                    var _typesNew = _levelStatus.AsEnumerable().Where(y => y.Field<string>("Code") == DefaultStatus);
                    if (_typesNew == null || _typesNew.Count() == 0)
                    {
                        DefaultStatus = _types.FirstOrDefault().ToString(); 
                    }

                    if (!string.IsNullOrEmpty(DefaultInvoiceType)) cmbStatus.Text = DefaultStatus;                 
                    //Load Level definition
                    _priceBookLevelRef = CHNLSVC.Sales.GetPriceLevel(BaseCls.GlbUserComCode, cmbBook.Text, cmbLevel.Text);
                    LoadPriceLevelMessage();
                }
                else
                    cmbStatus.DataSource = null;
            else
                cmbStatus.DataSource = null;
            return _isAvailable;
        }

        private void CheckPriceLevelStatusForDoAllow(string _level, string _book)
        {
            if (!string.IsNullOrEmpty(_level.Trim()) && !string.IsNullOrEmpty(_book.Trim()))
            {
                List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
                if (_lvl != null)
                    if (_lvl.Count > 0)
                    {
                        var _bool = (from _l in _lvl where _l.Sapl_chk_st_tp == true select _l.Sapl_chk_st_tp).ToList();
                        if (_bool != null && _bool.Count() > 0) IsPriceLevelAllowDoAnyStatus = false; else IsPriceLevelAllowDoAnyStatus = true;
                    }
            }
            else
                IsPriceLevelAllowDoAnyStatus = true;
        }

        private void CheckLevelStatusWithInventoryStatus()
        {
            if (IsPriceLevelAllowDoAnyStatus == false)
            {
                string _invoiceStatus = cmbStatus.Text.Trim();
                string _inventoryStatus = string.Empty;
                if (chkDeliverLater.Checked == false)
                    if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                    {
                        //pick inventory status
                        if (!string.IsNullOrEmpty(txtItem.Text.Trim()))
                        {
                            List<InventoryLocation> _balance = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), _invoiceStatus);
                            if (_balance == null)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected price level restricted to deliver with the same item status in the invoice. There is no available qty for this status.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                cmbStatus.Text = "";
                                return;
                            }
                            if (_balance.Count <= 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected price level restricted to deliver with the same item status in the invoice. There is no available qty for this status.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                cmbStatus.Text = "";
                                return;
                            }
                        }
                    }
                    else
                    {
                        //pick serial status
                        DataTable _serialstatus = CHNLSVC.Inventory.GetAvailableItemStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, DefaultBin, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
                        if (_serialstatus != null)
                            if (_serialstatus.Rows.Count > 0)
                            {
                                _inventoryStatus = _serialstatus.Rows[0].Field<string>("ins_itm_stus");

                                if (_levelStatus != null)
                                    if (_levelStatus.Rows.Count > 0)
                                    {
                                        var _exist = _levelStatus.AsEnumerable().Where(x => x.Field<string>("Code") == _invoiceStatus).Select(y => y.Field<string>("Code")).ToList();
                                        if (_exist != null)
                                            if (_exist.Count > 0)
                                            {
                                                string _code = Convert.ToString(_exist[0]);
                                                cmbStatus.Text = _code;
                                                return;
                                            }
                                    }

                                if (!string.IsNullOrEmpty(_inventoryStatus))
                                    if (!_inventoryStatus.Equals(_invoiceStatus))
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Selected price level restricted to deliver with the same item status in the invoice. There is no available qty for this status.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                        cmbStatus.Text = "";
                                        return;
                                    }
                            }
                    }
            }
        }

        private void cmbBook_Leave(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                LoadPriceLevel(cmbInvType.Text, cmbBook.Text);
                LoadLevelStatus(cmbInvType.Text.Trim(), cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                CheckPriceLevelStatusForDoAllow(cmbLevel.Text.Trim(), cmbBook.Text.Trim());
                ClearPriceTextBox();
            }
            catch (Exception ex)
            { ClearPriceTextBox(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void cmbLevel_Leave(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _priceBookLevelRefList = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                LoadLevelStatus(cmbInvType.Text.Trim(), cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                CheckPriceLevelStatusForDoAllow(cmbLevel.Text.Trim(), cmbBook.Text.Trim());
                SetColumnForPriceDetailNPromotion(_priceBookLevelRef.Sapl_is_serialized);
                if (_priceBookLevelRef.Sapl_is_serialized && string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You are going to select a serialized price level without serial\n.Please select the serial", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtSerialNo.Clear();
                    return;
                }
                CheckQty(false);
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void cmbStatus_Leave(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                CheckLevelStatusWithInventoryStatus();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private bool _stopit = false;

        private void CheckSerialAvailability(object sender, EventArgs e)
        {
            MasterLocation _MasterLocation = CHNLSVC.General.GetAllLocationByLocCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, 0);
            if (_stopit) return;
            if (pnlMain.Enabled == false) return;
            if (string.IsNullOrEmpty(txtSerialNo.Text.Trim())) return;
            if (_MasterLocation.Ml_is_serial == false)
            {
                MessageBox.Show("This Location is not setup for serial maintain Pls. contact Inventory Department. ", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtSerialNo.Text = string.Empty;
                txtSerialNo.Focus();
                return;
            }
            if (txtSerialNo.Text.Trim().ToUpper() == "N/A" || txtSerialNo.Text.Trim().ToUpper() == "NA")
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Selected serial no is invalid or not available in your location.\nPlease check your inventory.", "Invalid Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } txtSerialNo.Clear(); txtItem.Clear(); return; }

            txtItem.Text = string.Empty;
            lblItemDescription.Text = "Description : " + string.Empty;
            lblItemModel.Text = "Model : " + string.Empty;
            lblItemBrand.Text = "Brand : " + string.Empty;

            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (chkPickGV.Checked)
                {
                    if (IsNumeric(txtSerialNo.Text.Trim()) == false)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please check the gift voucher", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtSerialNo.Clear();
                        txtSerialNo.Focus();
                        return;
                    }

                    DataTable _giftVoucher = CHNLSVC.Inventory.GetDetailByGiftVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToInt32(txtSerialNo.Text.Trim()), "ITEM");
                    if (_giftVoucher == null || _giftVoucher.Rows.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("There is no such gift voucher. Please check the gift voucher inventory", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtSerialNo.Clear();
                        txtSerialNo.Focus();
                        return;
                    }

                    if (_giftVoucher.Rows.Count > 1)
                    { PrepareMultiItemGrid(true); pnlMain.Enabled = false; pnlMultipleItem.Visible = true; gvMultipleItem.DataSource = _giftVoucher; return; }

                    string _item = _giftVoucher.Rows[0].Field<string>("gvp_gv_cd");
                    LoadItemDetail(_item); txtItem.Text = _item; txtQty.Text = FormatToQty("1");
                    btnAddItem.Focus();
                }
                else
                {
                    DataTable _multiItemforSerial = CHNLSVC.Inventory.GetMultipleItemforOneSerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtSerialNo.Text.Trim(), string.Empty);
                    Int32 _isAvailable = _multiItemforSerial.Rows.Count;

                    if (_isAvailable <= 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Selected serial no is invalid or not available in your location.\nPlease check your inventory.", "Invalid Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } txtSerialNo.Clear(); txtItem.Clear(); return; }

                    if (_isAvailable > 1)
                    { PrepareMultiItemGrid(false); pnlMain.Enabled = false; pnlMultipleItem.Visible = true; gvMultipleItem.DataSource = _multiItemforSerial; return; }

                    string _item = _multiItemforSerial.Rows[0].Field<string>("Item");
                    List<ReptPickSerials> _one = CHNLSVC.Inventory.Search_by_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty, txtSerialNo.Text.Trim(), string.Empty);
                    if (!string.IsNullOrEmpty(Convert.ToString(cmbLevel.Text)) && !string.IsNullOrEmpty(Convert.ToString(cmbBook.Text)))
                    {
                        bool _isAgeLevel = false;
                        int _noofday = 0;
                        CheckNValidateAgeItem(_item, string.Empty, cmbBook.Text, cmbLevel.Text, cmbStatus.Text, out _isAgeLevel, out _noofday);
                        if (_isAgeLevel)
                            _one = GetAgeItemList(Convert.ToDateTime(txtDate.Value.Date).Date, _isAgeLevel, _noofday, _one);
                        if (_one == null || _one.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtSerialNo.Clear();
                            txtItem.Clear();
                            txtSerialNo.Focus();
                            return;
                        }
                    }
                    //
                    if (_one != null && _one.Count > 0 && IsPriceLevelAllowDoAnyStatus == false)
                    {
                        string _serialstatus = _one[0].Tus_itm_stus;
                        if (!cmbStatus.Items.Contains(_serialstatus))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Selected serial item inventory status not available in price level status collection. Please contact IT dept.", "Inventory Item Status", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtSerialNo.Clear();
                            txtItem.Clear();
                            txtSerialNo.Focus();
                            return;
                        }
                        else
                            cmbStatus.SelectedItem = _serialstatus;
                    }

                    if (LoadMultiCombinItem(_item) == false)
                    { LoadItemDetail(_item); txtItem.Text = _item; txtQty.Text = FormatToQty("1"); _stopit = true; CheckQty(true); btnAddItem.Focus(); }
                }
            }
            catch (Exception ex)
            { txtSerialNo.Clear(); txtItem.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { _stopit = false; this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private bool LoadMultiCombinItem(string _item)
        {
            bool _isManyItem = false;
            if (LoadMultiCombineItem(_item))
            {
                _isManyItem = true;
            }
            return _isManyItem;
        }

        private Point muItemPoint = new Point();

        private void pnlMultipleItem_MouseDown(object sender, MouseEventArgs e)
        {
            muItemPoint.X = e.X;
            muItemPoint.Y = e.Y;
        }

        private void pnlMultipleItem_MouseUp(object sender, MouseEventArgs e)
        {
            pnlMultipleItem.Location = new Point(e.X - muItemPoint.X + pnlMultipleItem.Location.X, e.Y - muItemPoint.Y + pnlMultipleItem.Location.Y);
        }

        private void cmsMuItem_Description_Click(object sender, EventArgs e)
        {
            if (cmsMuItem_Description.CheckState == CheckState.Checked) gvMultipleItem.Columns["MuItm_Description"].Visible = true; else gvMultipleItem.Columns["MuItm_Description"].Visible = false;
        }

        private void cmsMuItem_Brand_Click(object sender, EventArgs e)
        {
            if (cmsMuItem_Brand.CheckState == CheckState.Checked) gvMultipleItem.Columns["MuItm_Brand"].Visible = true; else gvMultipleItem.Columns["MuItm_Brand"].Visible = false;
        }

        private void cmsMuItem_Model_Click(object sender, EventArgs e)
        {
            if (cmsMuItem_Model.CheckState == CheckState.Checked) gvMultipleItem.Columns["MuItm_Model"].Visible = true; else gvMultipleItem.Columns["MuItm_Model"].Visible = false;
        }

        private void btnPnlMuItemClose_Click(object sender, EventArgs e)
        {
            pnlMultipleItem.Visible = false;
            pnlMain.Enabled = true;
        }

        private void gvMultipleItem_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (gvMultipleItem.RowCount > 0)
            {
                try
                {
                    this.Cursor = Cursors.WaitCursor;
                    string _item = gvMultipleItem.SelectedRows[0].Cells["MuItm_Item"].Value.ToString();
                    string _serial = gvMultipleItem.SelectedRows[0].Cells["MuItm_Serial"].Value.ToString();

                    if (!string.IsNullOrEmpty(Convert.ToString(cmbLevel.Text)) && !string.IsNullOrEmpty(Convert.ToString(cmbBook.Text)))
                    {
                        List<ReptPickSerials> _one = CHNLSVC.Inventory.Search_by_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty, txtSerialNo.Text.Trim(), string.Empty);
                        bool _isAgeLevel = false;
                        int _noofday = 0;
                        CheckNValidateAgeItem(_item, string.Empty, cmbBook.Text, cmbLevel.Text, cmbStatus.Text, out _isAgeLevel, out _noofday);
                        if (_isAgeLevel)
                            _one = GetAgeItemList(Convert.ToDateTime(txtDate.Value.Date).Date, _isAgeLevel, _noofday, _one);
                        if (_one == null || _one.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT Dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtSerialNo.Clear();
                            txtItem.Clear();
                            txtSerialNo.Focus();
                            return;
                        }
                    }

                    txtItem.Text = _item.Trim();
                    MasterItem _itemDet = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                    if (_itemDet.Mi_itm_tp == "V" && _itemDet.Mi_is_subitem == true)
                        _isCompleteCode = true;
                    else _isCompleteCode = false;
                    if (LoadItemDetail(_item.Trim()) == false) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Item already inactive or invalid. Please check the item.", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Clear(); return; }
                    txtQty.Text = FormatToQty("1");
                    LoadMultiCombinItem(_item);
                    btnPnlMuItemClose_Click(null, null);
                    CheckQty(true);
                    if (IsGiftVoucher(_itemdetail.Mi_itm_tp)) btnAddItem.Focus();
                }
                catch (Exception ex)
                { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
                finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
            }
        }

        private void btnPnlMuComItemClose_Click(object sender, EventArgs e)
        {
            pnlMultiCombine.Visible = false;
            pnlMain.Enabled = true;
            txtItem.Clear();
            txtSerialNo.Clear();
        }

        private bool LoadMultiCombineItem(string _item)
        {
            bool _isMultiCom = false;
            DataTable _invnetoryCombinAnalalize = CHNLSVC.Inventory.GetCompeleteItemfromAssambleItem(_item);
            if (_invnetoryCombinAnalalize != null)
                if (_invnetoryCombinAnalalize.Rows.Count > 0)
                {
                    gvMultiCombineItem.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
                    gvMultiCombineItem.DataSource = _invnetoryCombinAnalalize;
                    _isMultiCom = true;
                    pnlMain.Enabled = false;
                    pnlMultiCombine.Visible = true;
                    gvMultiCombineItem.Focus();
                }
            return _isMultiCom;
        }

        private void gvMultiCombineItem_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvMultiCombineItem.RowCount > 0)
                {
                    string _item = gvMultiCombineItem.SelectedRows[0].Cells["Item"].Value.ToString();
                    txtItem.Text = _item.Trim();
                    txtQty.Text = FormatToQty("1");
                    pnlMultiCombine.Visible = false;
                    pnlMain.Enabled = true;
                    if (LoadItemDetail(_item) == false) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This item already inactive or invalid code. Please check with inventory dept.", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Clear(); return; }
                    CheckQty(true);
                    btnAddItem.Focus();
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvMultiCombineItem_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvMultiCombineItem.RowCount > 0 && e.KeyCode == Keys.Enter)
                {
                    string _item = gvMultiCombineItem.SelectedRows[0].Cells["Item"].Value.ToString();
                    txtItem.Text = _item.Trim();
                    MasterItem _itemDet = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                    if (_itemDet.Mi_itm_tp == "V" && _itemDet.Mi_is_subitem == true)
                        _isCompleteCode = true;
                    else _isCompleteCode = false;
                    txtQty.Text = FormatToQty("1");
                    pnlMultiCombine.Visible = false;
                    pnlMain.Enabled = true;
                    if (LoadItemDetail(_item) == false) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Item already inactive or invalid. Please check the item code.", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Clear(); return; }
                    CheckQty(true);
                    btnAddItem.Focus();
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private Point muComItemPoint = new Point();

        private void pnlMultiCombine_MouseDown(object sender, MouseEventArgs e)
        {
            muComItemPoint.X = e.X;
            muComItemPoint.Y = e.Y;
        }

        private void pnlMultiCombine_MouseUp(object sender, MouseEventArgs e)
        {
            pnlMultiCombine.Location = new Point(e.X - muComItemPoint.X + pnlMultiCombine.Location.X, e.Y - muComItemPoint.Y + pnlMultiCombine.Location.Y);
        }

        private void btnDeliveryInstruction_Click(object sender, EventArgs e)
        {
            if (pnlDeliveryInstruction.Visible)
            {
                pnlDeliveryInstruction.Visible = false;
                pnlMain.Enabled = true;
            }
            else
            {
                pnlDeliveryInstruction.Visible = true;
                pnlMain.Enabled = false;
            }
        }

        private void btnPnlDelInsCancel_Click(object sender, EventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            try
            {
                ResetDeliveryInstructionToOriginalCustomer();
                btnDeliveryInstruction_Click(null, null);
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void ClearDeliveryInstruction(bool _isReset)
        {
             //txtDelLocation.Clear();
            txtDelCustomer.Clear();
            txtDelName.Clear();
            txtDelAddress1.Clear();
            txtDelAddress2.Clear();

            if (_isReset)
            {
                ResetDeliveryInstructionToOriginalCustomer();
            }
        }

        private void ResetDeliveryInstructionToOriginalCustomer()
        {
            txtDelLocation.Text = BaseCls.GlbUserDefLoca.Trim();
            txtDelCustomer.Text = txtCustomer.Text;
            txtDelName.Text = txtCusName.Text;
            txtDelAddress1.Text = txtAddress1.Text;
            txtAddress2.Text = txtAddress2.Text;
            chkOpenDelivery.Checked = false;
        }

        private void btnPnlDelInsClear_Click(object sender, EventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            try
            {
                ClearDeliveryInstruction(false);
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void chkOpenDelivery_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (_MasterProfitCenter != null)
                    if (_MasterProfitCenter.Mpc_com != null)
                    {
                        if (string.IsNullOrEmpty(_MasterProfitCenter.Mpc_def_loc))
                        {
                            if (chkOpenDelivery.Checked == false)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Default location not setup. You have to contact inventory department.", "Default Location", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                txtDelLocation.Text = BaseCls.GlbUserDefLoca.Trim();
                                return;
                            }
                        }
                        else
                        {
                            if (chkOpenDelivery.Checked == false)
                                txtDelLocation.Text = _MasterProfitCenter.Mpc_def_loc.Trim();
                            else
                                txtDelLocation.Clear();
                        }
                    }
            }
            catch (Exception ex)
            { chkOpenDelivery.Checked = false; this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnPnlDelInsReset_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                ResetDeliveryInstructionToOriginalCustomer();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnPnlDelInsConfirm_Click(object sender, EventArgs e)
        {
            btnDeliveryInstruction_Click(null, null);
        }

        private void btnSearchDelLocation_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Location);
                DataTable _result = CHNLSVC.CommonSearch.GetLocationSearchData(_commonSearch.SearchParams, null, null);
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtDelLocation;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtDelLocation.Select();
            }
            catch (Exception ex)
            { txtDelLocation.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtDelLocation_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearchDelLocation_Click(null, null);
        }

        private void txtDelLocation_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearchDelLocation_Click(null, null);
        }

        private void btnSearchDelCustomer_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Customer);
                DataTable _result = CHNLSVC.CommonSearch.GetCustomerGenaral(_commonSearch.SearchParams, null, null, CommonUIDefiniton.SearchUserControlCustomerType.MBE_CD.ToString(), CommonUIDefiniton.ReturnCustomerSearchDisplay(CommonUIDefiniton.SearchUserControlCustomerType.MBE_CD));
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtDelCustomer;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtDelCustomer.Select();
            }
            catch (Exception ex)
            { txtDelCustomer.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtDelCustomer_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearchDelCustomer_Click(null, null);
        }

        private void txtDelCustomer_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearchDelCustomer_Click(null, null);
        }

        private Point delInstructionPoint = new Point();

        private void pnlDeliveryInstruction_MouseDown(object sender, MouseEventArgs e)
        {
            delInstructionPoint.X = e.X;
            delInstructionPoint.Y = e.Y;
        }

        private void pnlDeliveryInstruction_MouseUp(object sender, MouseEventArgs e)
        {
            pnlDeliveryInstruction.Location = new Point(e.X - delInstructionPoint.X + pnlDeliveryInstruction.Location.X, e.Y - delInstructionPoint.Y + pnlDeliveryInstruction.Location.Y);
        }

        private bool _isItemChecking = false;

        private void CheckItemCode(object sender, EventArgs e)
                
        {
            if (string.IsNullOrEmpty(txtItem.Text.Trim())) return;
            if (_isItemChecking) { _isItemChecking = false; return; }
            _isItemChecking = true;
            try
            {
                if (IsNewCustomer)
                {
                    EnableDisableCustomer();
                }

                this.Cursor = Cursors.WaitCursor;
                if (!LoadItemDetail(txtItem.Text.Trim()))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please check the item code", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtItem.Clear();
                    txtItem.Focus();
                    if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater.Checked == false) cmbStatus.Text = "";
                    return;
                }

                if (_itemdetail.Mi_is_ser1 == 1 && IsGiftVoucher(_itemdetail.Mi_itm_tp))
                {
                    if (string.IsNullOrEmpty(txtSerialNo.Text))
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the gift voucher number", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Clear(); txtSerialNo.Clear(); }

                    return;
                }
                IsVirtual(_itemdetail.Mi_itm_tp);

                if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial no for the serialized item", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater.Checked == true && chkDeliverNow.Checked == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) && _isRegistrationMandatory)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Registration mandatory items can not save without serial", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }

                //if (IsPriceLevelAllowDoAnyStatus == false && chkDeliverLater.Checked == false) cmbStatus.Text = "";

                //if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) txtQty.Text = FormatToQty("0"); else
                if (txtSerialNo.Text != "")
                {
                    txtQty.Text = FormatToQty("1");
                }
                if (_IsVirtualItem)
                {
                    bool block = CheckBlockItem(txtItem.Text.Trim(), 0, false);
                    if (block)
                    {
                        txtItem.Text = "";
                    }
                }
                CheckQty(true);
                btnAddItem.Focus();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); _isItemChecking = false; }
        }

        private void cmbInvType_Leave(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                LoadPriceBook(cmbInvType.Text.Trim());
                LoadPriceLevel(cmbInvType.Text.Trim(), cmbBook.Text.Trim());
                LoadLevelStatus(cmbInvType.Text.Trim(), cmbBook.Text.Trim(), cmbLevel.Text.Trim());
                LoadPayMode();

                #region Clear Customer

                txtCusName.Clear();
                txtAddress1.Clear();
                txtAddress2.Clear();
                txtMobile.Clear();
                txtNIC.Clear();
                chkTaxPayable.Checked = false;
                txtCustomer.Clear();
                txtDelAddress1.Clear();
                txtDelAddress2.Clear();
                txtDelCustomer.Clear();
                txtDelName.Clear();
                txtCustomer.Text = string.Empty;
                //if (cmbInvType.Text.Trim() == "CS")
                //    txtCustomer.Text = "CASH";

                btnSearch_NIC.Enabled = true;
                btnSearch_Customer.Enabled = true;
                btnSearch_Mobile.Enabled = true;

                //if (cmbInvType.Text.Trim() == "CS")
                //    txtCustomer.Text = "CASH";

                #endregion Clear Customer
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void CheckItemTax(string _item)
        {
            MainTaxConstant = new List<MasterItemTax>();
            if (_priceBookLevelRef.Sapl_vat_calc == true)
            {
                if (_isStrucBaseTax == true)       //kapila
                {
                    MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                    MainTaxConstant = CHNLSVC.Sales.GetTax_strucbase(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim(), null, null, _mstItem.Mi_anal1);
                    foreach (MasterItemTax _ones in MainTaxConstant)
                    {
                        _ones.Mict_tax_rate = 1;
                    }
                }
                else
                    MainTaxConstant = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim());
            }
        }

        private decimal CheckSubItemTax(string _item)
        {
            decimal _fraction = 1;
            List<MasterItemTax> TaxConstant = new List<MasterItemTax>();
            if (_priceBookLevelRef.Sapl_vat_calc == true)
            {
                if (_isStrucBaseTax == true)       //kapila 21/4/2017
                {
                    _fraction = 1;
                }
                else
                {
                    TaxConstant = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, cmbStatus.Text.Trim());

                    if (TaxConstant != null)
                        if (TaxConstant.Count > 0)
                            _fraction = TaxConstant[0].Mict_tax_rate;
                }
            }
            return _fraction;
        }

        private bool CheckTaxAvailability()
        {
            bool _IsTerminate = false;
            //Check for tax setup  - under Darshana confirmation on 02/06/2012
            if (!_isCompleteCode)
            {
                if (txtDate.Value.Date == _serverDt)
                {
                    //  List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty);
                    List<MasterItemTax> _tax = new List<MasterItemTax>();
                    if (_isStrucBaseTax == true)       //kapila
                    {
                        MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);
                        _tax = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty, _mstItem.Mi_anal1);
                    }
                    else
                        _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty);

                    if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                        _IsTerminate = true;
                    if (_tax.Count <= 0)
                        _IsTerminate = true;
                }
                else
                {
                    List<MasterItemTax> _taxEff = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty, txtDate.Value.Date);
                    if (_taxEff.Count <= 0)
                    {
                        List<LogMasterItemTax> _tax = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), "VAT", string.Empty, txtDate.Value.Date);
                        if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                            _IsTerminate = true;
                        if (_tax.Count <= 0)
                            _IsTerminate = true;
                    }
                }
            }
            return _IsTerminate;
        }

        #endregion Rooting for Re-call Invoice

        #region Rooting for Invnetory Combine

        private bool BindItemComponent(string _item)
        {
            _masterItemComponent = CHNLSVC.Inventory.GetItemComponents(_item);
            if (_masterItemComponent != null)
            {
                if (_masterItemComponent.Count > 0)
                {
                    _masterItemComponent.ForEach(X => X.Micp_must_scan = false);
                    if (_masterItemComponent != null)
                    {
                        if (_masterItemComponent.Count > 0)
                            return true;
                        else
                            return false;
                    }
                    else
                        return false;
                }
                else return false;
            }
            else return false;
        }

        private bool CheckInventoryCombine()
        {
            bool _IsTerminate = false;
            _isCompleteCode = false;

            if (!string.IsNullOrEmpty(txtItem.Text))
            {
                MasterItem _itemDet = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                if (_itemDet.Mi_itm_tp == "V" && _itemDet.Mi_is_subitem == true)
                    _isCompleteCode = BindItemComponent(txtItem.Text.Trim());

                if (_isCompleteCode)
                {
                    if (_masterItemComponent != null)
                    {
                        if (_masterItemComponent.Count > 0)
                        {
                            _isInventoryCombineAdded = false;
                            _isCompleteCode = true;
                            _IsTerminate = false;
                            return _IsTerminate;
                        }
                        else
                        {
                            _isCompleteCode = false;
                            _IsTerminate = true;
                        }
                    }
                    else
                    {
                        _isCompleteCode = false;
                        _IsTerminate = true;
                    }
                }
            }
            else
            {
                _isCompleteCode = false;
                _IsTerminate = true;
            }

            return _IsTerminate;
        }

        protected PriceTypeRef TakePromotion(Int32 _priceType)
        {
            List<PriceTypeRef> _type = CHNLSVC.Sales.GetAllPriceType(string.Empty);
            var _ptype = from _types in _type
                         where _types.Sarpt_indi == _priceType
                         select _types;
            PriceTypeRef _list = new PriceTypeRef();
            foreach (PriceTypeRef _ones in _ptype)
            {
                _list = _ones;
            }
            return _list;
        }

        private void SetSSPriceDetailVariable(string _circuler, string _pblineseq, string _pbseqno, string _pbprice, string _promotioncd, string _promotiontype)
        {
            SSCirculerCode = _circuler;
            SSPriceBookItemSequance = _pblineseq;
            SSPriceBookPrice = Convert.ToDecimal(_pbprice);
            SSPriceBookSequance = _pbseqno;
            SSPromotionCode = _promotioncd;
            // if (string.IsNullOrEmpty(_promotioncd) || _promotioncd.Trim().ToUpper() == "N/A") SSPromotionCode = string.Empty;
            //kapila 6/10/2016
            //if (Convert.ToInt32(_promotiontype) == 0 || Convert.ToInt32(_promotiontype) == 4) SSPromotionCode = string.Empty;  //kapila comented on 29/12/2016
            _promoType = _promotiontype;

            SSPRomotionType = Convert.ToInt32(_promotiontype);
        }

        private void UncheckNormalPriceOrPromotionPrice(bool _isNormal, bool _isPromotion)
        {
            if (_isNormal)
                if (gvNormalPrice.RowCount > 0)
                {
                    foreach (DataGridViewRow _r in gvNormalPrice.Rows)
                    {
                        DataGridViewCheckBoxCell _chk = (DataGridViewCheckBoxCell)_r.Cells[0];
                        if (Convert.ToBoolean(_chk.Value) == true)
                        {
                            _chk.Value = false;
                        }
                    }
                }

            if (_isPromotion)
                if (gvPromotionPrice.RowCount > 0)
                    foreach (DataGridViewRow row in gvPromotionPrice.Rows)
                    {
                        DataGridViewCheckBoxCell chk = row.Cells[0] as DataGridViewCheckBoxCell;
                        if (Convert.ToBoolean(chk.Value) == true)
                        {
                            chk.Value = false;
                        }
                    }
        }

        private void SetColumnForPriceDetailNPromotion(bool _isSerializedPriceLevel)
        {
            if (_isSerializedPriceLevel)
            {
                NorPrice_Select.Visible = true;

                NorPrice_Serial.DataPropertyName = "sars_ser_no";
                NorPrice_Serial.Visible = true;
                NorPrice_Item.DataPropertyName = "Sars_itm_cd";
                NorPrice_Item.Visible = true;
                NorPrice_UnitPrice.DataPropertyName = "sars_itm_price";
                NorPrice_UnitPrice.Visible = true;
                NorPrice_Circuler.DataPropertyName = "sars_circular_no";
                NorPrice_PriceType.DataPropertyName = "sars_price_type";
                NorPrice_PriceTypeDescription.DataPropertyName = "sars_price_type_desc";
                NorPrice_ValidTill.DataPropertyName = "sars_val_to";
                NorPrice_ValidTill.Visible = true;
                NorPrice_Pb_Seq.DataPropertyName = "sars_pb_seq";
                NorPrice_PbLineSeq.DataPropertyName = "1";
                NorPrice_PromotionCD.DataPropertyName = "sars_promo_cd";
                NorPrice_IsFixQty.DataPropertyName = "sars_is_fix_qty";
                NorPrice_BkpUPrice.DataPropertyName = "sars_cre_by";
                NorPrice_WarrantyRmk.DataPropertyName = "sars_warr_remarks";
                NorPrice_Book.DataPropertyName = "sars_pbook";
                NorPrice_Level.DataPropertyName = "sars_price_lvl";

                PromPrice_Select.Visible = true;

                PromPrice_Serial.DataPropertyName = "sars_ser_no";
                PromPrice_Serial.Visible = true;
                PromPrice_Item.DataPropertyName = "Sars_itm_cd";
                PromPrice_Item.Visible = true;
                PromPrice_UnitPrice.DataPropertyName = "sars_itm_price";
                PromPrice_UnitPrice.Visible = true;
                PromPrice_Circuler.DataPropertyName = "sars_circular_no";
                PromPrice_PriceType.DataPropertyName = "sars_price_type";
                PromPrice_PriceTypeDescription.DataPropertyName = "sars_price_type_desc";
                PromPrice_ValidTill.DataPropertyName = "sars_val_to";
                PromPrice_ValidTill.Visible = true;
                PromPrice_Pb_Seq.DataPropertyName = "sars_pb_seq";
                //PromPrice_PbLineSeq.DataPropertyName = "1";
                PromPrice_PromotionCD.DataPropertyName = "sars_promo_cd";
                PromPrice_IsFixQty.DataPropertyName = "sars_is_fix_qty";
                PromPrice_BkpUPrice.DataPropertyName = "sars_cre_by";
                PromPrice_WarrantyRmk.DataPropertyName = "sars_warr_remarks";
                PromPrice_Book.DataPropertyName = "sars_pbook";
                PromPrice_Level.DataPropertyName = "sars_price_lvl";
            }
            else
            {
                NorPrice_Select.Visible = false;

                NorPrice_Serial.Visible = false;
                NorPrice_Item.DataPropertyName = "sapd_itm_cd";
                NorPrice_Item.Visible = true;
                NorPrice_UnitPrice.DataPropertyName = "Sapd_itm_price";
                NorPrice_UnitPrice.Visible = true;
                NorPrice_Circuler.DataPropertyName = "Sapd_circular_no";
                NorPrice_Circuler.Visible = true;
                NorPrice_PriceType.DataPropertyName = "Sarpt_cd";
                NorPrice_PriceTypeDescription.DataPropertyName = "SARPT_CD";
                NorPrice_ValidTill.DataPropertyName = "Sapd_to_date";
                NorPrice_ValidTill.Visible = true;
                NorPrice_Pb_Seq.DataPropertyName = "sapd_pb_seq";
                NorPrice_PbLineSeq.DataPropertyName = "sapd_seq_no";
                NorPrice_PromotionCD.DataPropertyName = "sapd_promo_cd";
                NorPrice_IsFixQty.DataPropertyName = "sapd_is_fix_qty";
                NorPrice_BkpUPrice.DataPropertyName = "sapd_cre_by";
                NorPrice_WarrantyRmk.DataPropertyName = "sapd_warr_remarks";
                NorPrice_Book.DataPropertyName = "sapd_pb_tp_cd";
                NorPrice_Level.DataPropertyName = "sapd_pbk_lvl_cd";

                PromPrice_Select.Visible = true;

                PromPrice_Serial.Visible = false;
                PromPrice_Item.DataPropertyName = "sapd_itm_cd";
                PromPrice_Item.Visible = true;
                PromPrice_UnitPrice.DataPropertyName = "Sapd_itm_price";
                PromPrice_UnitPrice.Visible = true;
                PromPrice_Circuler.DataPropertyName = "Sapd_circular_no";
                PromPrice_Circuler.Visible = true;
                PromPrice_PriceType.DataPropertyName = "sapd_price_type"; //"Sarpt_cd";
                PromPrice_PriceTypeDescription.DataPropertyName = "Sarpt_cd";
                PromPrice_ValidTill.DataPropertyName = "Sapd_to_date";
                PromPrice_ValidTill.Visible = true;
                PromPrice_Pb_Seq.DataPropertyName = "sapd_pb_seq";
                PromPrice_PbLineSeq.DataPropertyName = "sapd_seq_no";
                PromPrice_PromotionCD.DataPropertyName = "sapd_promo_cd";
                PromPrice_IsFixQty.DataPropertyName = "sapd_is_fix_qty";
                PromPrice_BkpUPrice.DataPropertyName = "sapd_cre_by";
                PromPrice_WarrantyRmk.DataPropertyName = "sapd_warr_remarks";
                PromPrice_Book.DataPropertyName = "sapd_pb_tp_cd";
                PromPrice_Level.DataPropertyName = "sapd_pbk_lvl_cd";
            }
        }

        protected void BindPriceAndPromotion(List<PriceSerialRef> _list)
        {
            _list.ForEach(x => x.Sars_cre_by = Convert.ToString(x.Sars_itm_price));
            _list.ForEach(x => x.Sars_itm_price = x.Sars_itm_price * CheckSubItemTax(x.Sars_itm_cd));
            var _normal = _list.Where(x => x.Sars_price_type == 0).ToList();
            var _promotion = _list.Where(x => x.Sars_price_type != 0).ToList();

            gvNormalPrice.DataSource = _normal;
            gvPromotionPrice.DataSource = _promotion;
        }

        protected void BindNonSerializedPrice(List<PriceDetailRef> _list)
        {
            _list.ForEach(x => x.Sapd_cre_by = Convert.ToString(x.Sapd_itm_price));
            _list.ForEach(x => x.Sapd_itm_price = CheckSubItemTax(x.Sapd_itm_cd) * x.Sapd_itm_price);

            var _normal = _list.Where(x => x.Sapd_price_type == 0).ToList();
            var _promotion = _list.Where(x => x.Sapd_price_type != 0).ToList();

            gvNormalPrice.DataSource = _normal;
            gvPromotionPrice.DataSource = _promotion;
        }

        protected void BindSerializedPrice(List<PriceSerialRef> _list)
        {
            _list.ForEach(x => x.Sars_cre_by = Convert.ToString(x.Sars_itm_price));
            _list.ForEach(x => x.Sars_itm_price = CheckSubItemTax(x.Sars_itm_cd) * x.Sars_itm_price);
            var _normal = _list.Where(x => x.Sars_price_type == 0).ToList();
            var _promotion = _list.Where(x => x.Sars_price_type != 0).ToList();
            gvNormalPrice.DataSource = _normal;
            gvPromotionPrice.DataSource = _promotion;
        }

        private void gvNormalPrice_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvNormalPrice.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                        if (_priceBookLevelRef.Sapl_is_serialized)
                        {
                            UncheckNormalPriceOrPromotionPrice(false, true);
                            DataGridViewCheckBoxCell _chk = (DataGridViewCheckBoxCell)gvNormalPrice.Rows[_row].Cells[0];
                            if (Convert.ToBoolean(_chk.Value)) _chk.Value = false; else _chk.Value = true;
                            decimal _count = (from DataGridViewRow row in gvNormalPrice.Rows
                                              where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true
                                              select row).Count();
                            if (_count > Convert.ToDecimal(txtQty.Text.Trim()))
                            {
                                _chk.Value = false; this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials are mismatch.", "Serial and Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                        }
                        else
                        {
                            //string _unitPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_UnitPrice"].Value.ToString();
                            //string _bkpPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_BkpUPrice"].Value.ToString();
                            //string _pbseq = gvNormalPrice.Rows[_row].Cells["NorPrice_Pb_Seq"].Value.ToString();
                            //string _pblineseq = gvNormalPrice.Rows[_row].Cells["NorPrice_PbLineSeq"].Value.ToString();
                            //string _warrantyrmk = gvNormalPrice.Rows[_row].Cells["NorPrice_WarrantyRmk"].Value.ToString();
                            //if (!string.IsNullOrEmpty(_unitPrice))
                            //{
                            //    txtUnitPrice.Text = _unitPrice;

                            //    SSPriceBookPrice = Convert.ToDecimal(_bkpPrice);
                            //    SSPriceBookSequance = _pbseq;
                            //    SSPriceBookItemSequance = _pblineseq;
                            //    WarrantyRemarks = _warrantyrmk;
                            //    CalculateItem();
                            //    pnlMain.Enabled = true;
                            //    pnlPriceNPromotion.Visible = false;
                            //}
                        }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvNormalPrice_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvNormalPrice.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        //Added by Prabhath on stop to change status
                        string _oldStatus = Convert.ToString(cmbStatus.SelectedValue);
                        string _book = gvNormalPrice.Rows[_row].Cells["NorPrice_Book"].Value.ToString();
                        string _level = gvNormalPrice.Rows[_row].Cells["NorPrice_Level"].Value.ToString();
                        cmbBook.Text = _book;
                        cmbLevel.Text = _level;
                        cmbLevel_Leave(null, null);
                        //Added by Prabhath on stop double click
                        gvNormalPrice_CellDoubleClick(sender, e);
                        if (_priceBookLevelRef.Sapl_is_serialized == false)
                        {
                            string _unitPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_UnitPrice"].Value.ToString();
                            string _bkpPrice = gvNormalPrice.Rows[_row].Cells["NorPrice_BkpUPrice"].Value.ToString();
                            string _pbseq = gvNormalPrice.Rows[_row].Cells["NorPrice_Pb_Seq"].Value.ToString();
                            string _pblineseq = gvNormalPrice.Rows[_row].Cells["NorPrice_PbLineSeq"].Value.ToString();
                            string _warrantyrmk = gvNormalPrice.Rows[_row].Cells["NorPrice_WarrantyRmk"].Value.ToString();
                            if (!string.IsNullOrEmpty(_unitPrice))
                            {
                                txtUnitPrice.Text = FormatToCurrency(_unitPrice);
                                SSPriceBookPrice = Convert.ToDecimal(_bkpPrice);
                                SSPriceBookSequance = _pbseq;
                                SSPriceBookItemSequance = _pblineseq;
                                WarrantyRemarks = _warrantyrmk;

                                CalculateItem();
                                pnlMain.Enabled = true;
                                pnlPriceNPromotion.Visible = false;
                            }
                        }
                        else
                        {   //Added by Prabhath on stop to change status
                            cmbStatus.Text = _oldStatus;
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionPrice_CellDoubleClick(Int32 _row, bool _isValidate, bool _IsSerializedPriceLevel)
        {
            if (_IsSerializedPriceLevel)
            {
                DataGridViewCheckBoxCell _chk = gvPromotionPrice.Rows[_row].Cells["PromPrice_Select"] as DataGridViewCheckBoxCell;
                bool _isSelected = false;
                if (Convert.ToBoolean(_chk.Value)) _isSelected = true;
                UncheckNormalPriceOrPromotionPrice(true, false);
                string _mainItem = gvPromotionPrice.Rows[_row].Cells["PromPrice_Item"].Value.ToString();
                string _mainSerial = gvPromotionPrice.Rows[_row].Cells["PromPrice_Serial"].Value.ToString();
                string _pbseq = gvPromotionPrice.Rows[_row].Cells["PromPrice_Pb_Seq"].Value.ToString();
                string _priceType = gvPromotionPrice.Rows[_row].Cells["PromPrice_PriceType"].Value.ToString();
                BindPriceCombineItem(Convert.ToInt32(_pbseq), 1, Convert.ToInt32(_priceType), _mainItem, _mainSerial);
                if (_isValidate)
                {
                    if (_isSelected) _chk.Value = false; else _chk.Value = true;
                    decimal _count = (from DataGridViewRow row in gvNormalPrice.Rows
                                      where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true
                                      select row).Count();
                    if (_count > Convert.ToDecimal(txtQty.Text.Trim()))
                    {
                        _chk.Value = false; this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials are mismatch.", "Serial and Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }
                }
                if (_isSelected) _chk.Value = false; else _chk.Value = true;
            }
            else
            {
                DataGridViewCheckBoxCell chk = gvPromotionPrice.Rows[_row].Cells["PromPrice_Select"] as DataGridViewCheckBoxCell;
                bool _isSelected = false;
                if (Convert.ToBoolean(chk.Value)) _isSelected = true;
                UncheckNormalPriceOrPromotionPrice(false, true);
                BindingSource _source = new BindingSource();
                _source.DataSource = new List<PriceCombinedItemRef>();
                gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                if (_isSelected) chk.Value = false;
                else
                {
                    string _mainItem = gvPromotionPrice.Rows[_row].Cells["PromPrice_Item"].Value.ToString();
                    string _pbseq = gvPromotionPrice.Rows[_row].Cells["PromPrice_Pb_Seq"].Value.ToString();
                    string _priceType = gvPromotionPrice.Rows[_row].Cells["PromPrice_PriceType"].Value.ToString();
                    string _pblineseq = gvPromotionPrice.Rows[_row].Cells["PromPrice_PbLineSeq"].Value.ToString();
                    BindPriceCombineItem(Convert.ToInt32(_pbseq), Convert.ToInt32(_pblineseq), Convert.ToInt32(_priceType), _mainItem, string.Empty);
                    chk.Value = true;
                }
            }
        }

        private void gvPromotionPrice_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionPrice.RowCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                        gvPromotionPrice_CellDoubleClick(_row, true, _priceBookLevelRef.Sapl_is_serialized);
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionPrice_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionPrice.RowCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        string _book = gvPromotionPrice.Rows[_row].Cells["PromPrice_Book"].Value.ToString();
                        string _level = gvPromotionPrice.Rows[_row].Cells["PromPrice_Level"].Value.ToString();
                        cmbBook.Text = _book;
                        if (cmbBook.Text != _book)
                        {
                          MessageBox.Show("Price book not allow.", "Invalid Book", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                          return;
                        }
                        cmbBook_Leave(null, null);
                                               
                        cmbLevel.Text = _level;
                        if (cmbLevel.Text != _level)
                        {
                            MessageBox.Show("Price Level not allow.", "Invalid Book", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            return;
                        }
                      
                        cmbLevel_Leave(null, null);
                        gvPromotionPrice_CellDoubleClick(_row, false, _priceBookLevelRef.Sapl_is_serialized);
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionPrice_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
        }

        private void BindPriceCombineItem(Int32 _pbseq, Int32 _pblineseq, Int32 _priceType, string _mainItem, string _mainSerial)
        {
            _tempPriceCombinItem = new List<PriceCombinedItemRef>();
            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
            //PriceTypeRef _list = TakePromotion(_priceType);
            //if (_list.Sarpt_is_com)
            if (_priceBookLevelRef.Sapl_is_serialized)
            {
                _tempPriceCombinItem = CHNLSVC.Sales.GetPriceCombinedItem(_pbseq, _mainItem, _mainSerial);
                PromItm_Serial.Visible = true;
            }
            else
            {
                _tempPriceCombinItem = CHNLSVC.Sales.GetPriceCombinedItemLine(_pbseq, _pblineseq, _mainItem, string.Empty);
                PromItm_Serial.Visible = false;
            }
            if (_tempPriceCombinItem != null && _tempPriceCombinItem.Count > 0)
            {
                //kapila 14/2/2017
                if (_grah_isalw_free_itm == false)
                {
                    _tempPriceCombinItem = _tempPriceCombinItem.Where(x => x.Sapc_price > 0).ToList();
                }
                _tempPriceCombinItem.ForEach(x => x.Mi_cre_by = Convert.ToString(x.Mi_std_price));
                _tempPriceCombinItem.Where(x => x.Sapc_increse).ToList().ForEach(x => x.Sapc_qty = x.Sapc_qty * Convert.ToDecimal(txtQty.Text.Trim()));
                _tempPriceCombinItem.ForEach(x => x.Sapc_price = x.Sapc_price * CheckSubItemTax(x.Sapc_itm_cd));
                _tempPriceCombinItem.Where(x => !string.IsNullOrEmpty(x.Sapc_sub_ser)).ToList().ForEach(x => x.Sapc_increse = true);
                gvPromotionItem.DataSource = _tempPriceCombinItem;
                HangGridComboBoxStatus();
            }
        }

        private void LoadSelectedItemSerialForPriceComItemSerialGv(string _item, string _status, decimal _qty, bool _isPromotion, int _isStatusCol)
        {
            List<ReptPickSerials> _lst = null;
            _promotionSerial = new List<ReptPickSerials>();
            _promotionSerialTemp = new List<ReptPickSerials>();
            MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
            if (_itm.Mi_is_ser1 == 1)
            {
                if (IsPriceLevelAllowDoAnyStatus)
                    _lst = CHNLSVC.Inventory.GetNonSerializedItemInTopOrder(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item.Trim().ToUpper(), string.Empty, _qty);
                else
                    _lst = CHNLSVC.Inventory.GetNonSerializedItemInTopOrder(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item.Trim().ToUpper(), _status, _qty);

                if (IsPriceLevelAllowDoAnyStatus == false && (_lst == null || _lst.Count <= 0))
                {
                    if (cmbStatus.Items.Contains("CONS"))
                    {
                        _status = "CONS";
                        _lst = CHNLSVC.Inventory.GetNonSerializedItemInTopOrder(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item.Trim().ToUpper(), _status, _qty);
                    }
                }
                foreach (ReptPickSerials _ser in ScanSerialList.Where(x => x.Tus_itm_cd == _item.Trim()))
                    _lst.RemoveAll(x => x.Tus_ser_1 == _ser.Tus_ser_1);

                _lst.RemoveAll(x => x.Tus_ser_1 == txtSerialNo.Text);

                #region Age Price level - serial pick

                bool _isAgePriceLevel = false;
                int _noOfDays = 0;
                CheckNValidateAgeItem(_item.Trim(), _itm.Mi_cate_1, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), _status, out _isAgePriceLevel, out _noOfDays);
                List<ReptPickSerials> _newlist = GetAgeItemList(Convert.ToDateTime(txtDate.Value.Date).Date, _isAgePriceLevel, _noOfDays, _lst);

                #endregion Age Price level - serial pick

                gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                BindingSource _source = new BindingSource();
                var _list = new BindingList<ReptPickSerials>(_newlist);
                if (_isPromotion)
                {
                    _source.DataSource = _lst;
                    gvPromotionSerial.DataSource = _list;
                }
                else
                {
                    _source.DataSource = _lst;
                    gvPopComItemSerial.DataSource = _list;
                }
                _promotionSerial = _lst;
            }
            else
            {
                if (_isStatusCol == 7) return;
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("No need to pick non serialized item", "Non Serialized Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return;
            }
        }

        private void HangGridComboBoxStatus()
        {
            if (_levelStatus == null || _levelStatus.Rows.Count <= 0) return;
            var _types = _levelStatus.AsEnumerable().Select(x => x.Field<string>("Code")).Distinct().ToList();
            _types.Add("");
            PromItm_Status.DataSource = _types;
            foreach (DataGridViewRow r in gvPromotionItem.Rows)
                r.Cells["PromItm_Status"].Value = cmbStatus.Text;
        }

        private void gvPromotionItem_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                ComboBox cb = e.Control as ComboBox;
                if (cb != null)
                {
                    cb.SelectedIndexChanged -= new
                    EventHandler(gvPromotionItem_PromItm_Status_LoadInventoryBalance);

                    cb.SelectedIndexChanged += new
                    EventHandler(gvPromotionItem_PromItm_Status_LoadInventoryBalance);
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionItem_PromItm_Status_LoadInventoryBalance(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                string _selectedstatus = Convert.ToString(((DataGridViewComboBoxEditingControl)sender).EditingControlFormattedValue);
                DataGridViewRow _rowCollection = gvPromotionItem.SelectedRows[0];
                Int32 _row = _rowCollection.Index;

                string _originalItem = _rowCollection.Cells["PromItm_Item"].Value.ToString();
                string _item = _rowCollection.Cells["PromItm_Item"].Value.ToString();
                string _similerItem = Convert.ToString(_rowCollection.Cells["PromItm_SimilerItem"].Value);
                string _status = _selectedstatus;
                string _oldStatus = Convert.ToString(_rowCollection.Cells["PromItm_Status"].Value);
                string _qty = _rowCollection.Cells["PromItm_Qty"].Value.ToString();
                string _serial = _rowCollection.Cells["PromItm_Serial"].Value.ToString();
                bool _haveSerial = Convert.ToBoolean(_rowCollection.Cells["PromItm_increse"].Value.ToString());
                string _PromotionCD = Convert.ToString(gvPromotionPrice.SelectedRows[0].Cells["PromPrice_PromotionCD"].Value);
                List<ReptPickSerials> _giftVoucher = new List<ReptPickSerials>();

                if (!string.IsNullOrEmpty(_similerItem))
                    _item = _similerItem;

                if (PriceCombinItemSerialList != null && PriceCombinItemSerialList.Count > 0) PriceCombinItemSerialList.RemoveAll(x => x.Tus_itm_cd == _item && x.Tus_itm_stus == _oldStatus);

                bool _isGiftVoucher = IsGiftVoucher(CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item).Mi_itm_tp);

                if (!_isGiftVoucher)
                    DisplayAvailableQty(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, _status);
                else
                    LoadGiftVoucherBalance(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, out _giftVoucher);

                if (_isGiftVoucher)
                {
                    List<ReptPickSerials> _lst = new List<ReptPickSerials>();
                    _promotionSerial = new List<ReptPickSerials>();
                    _promotionSerialTemp = new List<ReptPickSerials>();
                    if (_giftVoucher != null)
                        if (_giftVoucher.Count > 0)
                            _lst.AddRange(_giftVoucher);
                    _promotionSerial = _lst;
                    gvPopComItemSerial.DataSource = new List<ReptPickSerials>();
                    gvPopComItemSerial.DataSource = _lst;
                    txtPriNProSerialSearch.Text = ".";
                    txtPriNProSerialSearch.Text = string.Empty;
                }
                else if (_priceBookLevelRef.Sapl_is_serialized)
                {
                    if (_haveSerial == false && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                        LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, 7);
                    else if (_haveSerial == true && !string.IsNullOrEmpty(_similerItem) && chkDeliverLater.Checked == false)
                        LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, 7);
                    else if (_haveSerial == true && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                    {
                        List<InventorySerialRefN> _ref = CHNLSVC.Inventory.GetItemDetailBySerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _serial);
                        if (_ref != null)
                            if (_ref.Count > 0)
                            {
                                var _available = _ref.Where(x => x.Ins_itm_cd == _item).ToList();
                                if (_available == null || _available.Count <= 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Selected item does not available in the current inventory", "No Stock", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                    }
                }
                else if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                {
                    LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, 7);
                }
                else
                {
                    var _list = new BindingList<ReptPickSerials>(new List<ReptPickSerials>());
                    gvPromotionSerial.DataSource = _list;
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionItem_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionItem.RowCount > 0)
                {
                    int _col = e.ColumnIndex;
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        string _originalItem = gvPromotionItem.Rows[_row].Cells["PromItm_Item"].Value.ToString();
                        string _item = gvPromotionItem.Rows[_row].Cells["PromItm_Item"].Value.ToString();
                        string _similerItem = Convert.ToString(gvPromotionItem.Rows[_row].Cells["PromItm_SimilerItem"].Value);
                        string _status = Convert.ToString(gvPromotionItem.Rows[_row].Cells["PromItm_Status"].Value); //cmbStatus.Text.Trim();
                        string _qty = gvPromotionItem.Rows[_row].Cells["PromItm_Qty"].Value.ToString();
                        string _serial = gvPromotionItem.Rows[_row].Cells["PromItm_Serial"].Value.ToString();
                        bool _haveSerial = Convert.ToBoolean(gvPromotionItem.Rows[_row].Cells["PromItm_increse"].Value.ToString());
                        string _PromotionCD = Convert.ToString(gvPromotionPrice.SelectedRows[0].Cells["PromPrice_PromotionCD"].Value);
                        List<ReptPickSerials> _giftVoucher = new List<ReptPickSerials>();

                        if (!string.IsNullOrEmpty(_similerItem))
                            _item = _similerItem;
                        bool _isGiftVoucher = IsGiftVoucher(CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item).Mi_itm_tp);

                        if (!_isGiftVoucher) DisplayAvailableQty(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, _status);
                        else LoadGiftVoucherBalance(_item, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, out _giftVoucher);
                        if (gvPromotionItem.Columns[e.ColumnIndex].Name != "PromItm_SelectSimilerItem")
                        {
                            if (_isGiftVoucher)
                            {
                                List<ReptPickSerials> _lst = new List<ReptPickSerials>();
                                _promotionSerial = new List<ReptPickSerials>();
                                _promotionSerialTemp = new List<ReptPickSerials>();
                                if (_giftVoucher != null)
                                    if (_giftVoucher.Count > 0)
                                        _lst.AddRange(_giftVoucher);
                                _promotionSerial = _lst;
                                gvPopComItemSerial.DataSource = new List<ReptPickSerials>();
                                gvPopComItemSerial.DataSource = _lst;
                                txtPriNProSerialSearch.Text = ".";
                                txtPriNProSerialSearch.Text = string.Empty;
                            }
                            else if (_priceBookLevelRef.Sapl_is_serialized)
                            {
                                if (_haveSerial == false && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                    LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, _col);
                                else if (_haveSerial == true && !string.IsNullOrEmpty(_similerItem) && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                    LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, _col);
                                else if (_haveSerial == true && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                {
                                    List<InventorySerialRefN> _ref = CHNLSVC.Inventory.GetItemDetailBySerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _serial);
                                    if (_ref != null)
                                        if (_ref.Count > 0)
                                        {
                                            var _available = _ref.Where(x => x.Ins_itm_cd == _item).ToList();
                                            if (_available == null || _available.Count <= 0)
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected item does not available in the current inventory", "No Stock", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                                return;
                                            }
                                        }
                                }
                            }
                            else if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            {
                                LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), true, _col);
                            }
                            else
                            {
                                var _list = new BindingList<ReptPickSerials>(new List<ReptPickSerials>());
                                gvPromotionSerial.DataSource = _list;
                            }
                        }

                        #region Similar Item Call

                        if (!_isGiftVoucher)
                            if (gvPromotionItem.Columns[e.ColumnIndex].Name == "PromItm_SelectSimilerItem" && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            {
                                DataTable _dtTable = CHNLSVC.Inventory.GetItemInventoryBalanceStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty);
                                if (_dtTable != null)
                                    if (_dtTable.Rows.Count > 0)
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Stock balance is available for the promotion item. No need to pick similar item here!.", "Similar Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }

                                TextBox _box = new TextBox();
                                CommonSearch.SearchSimilarItems _similarItems = new CommonSearch.SearchSimilarItems();
                                _similarItems.DocumentType = "S";
                                _similarItems.ItemCode = _item;
                                _similarItems.FunctionDate = txtDate.Value.Date;
                                _similarItems.DocumentNo = string.Empty;
                                _similarItems.PromotionCode = _PromotionCD;
                                _similarItems.obj_TragetTextBox = _box;
                                _similarItems.ShowDialog();
                                if (!string.IsNullOrEmpty(_box.Text))
                                {
                                    _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == _originalItem).ToList().ForEach(x => x.Similer_item = _box.Text);
                                    _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == _originalItem).ToList().ForEach(x => x.Sapc_increse = false);
                                    _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == _originalItem).ToList().ForEach(x => x.Sapc_sub_ser = string.Empty);
                                    BindingSource _source = new BindingSource();
                                    _source.DataSource = _tempPriceCombinItem;
                                    gvPromotionItem.DataSource = _source;
                                    _box.Clear();
                                }
                            }
                            else if ((gvPromotionItem.Columns[e.ColumnIndex].Name == "PromItm_SelectSimilerItem" && chkDeliverLater.Checked == true && chkDeliverNow.Checked == false))
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You can not pick similar item unless you have deliver now!", "Similar Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                        #endregion Similar Item Call
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionSerial_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionSerial.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        DataGridViewCheckBoxCell _cell = gvPromotionSerial.Rows[_row].Cells["ProSer_Select"] as DataGridViewCheckBoxCell;
                        string _id = gvPromotionSerial.Rows[_row].Cells["ProSer_SerialID"].Value.ToString();
                        if (Convert.ToBoolean(_cell.Value) == true)
                        {
                            _cell.Value = false;
                            PriceCombinItemSerialList.RemoveAll(x => x.Tus_ser_id == Convert.ToInt32(_id));
                        }
                        else
                        {
                            _cell.Value = true;
                            var _n = _promotionSerial.Where(x => x.Tus_ser_id == Convert.ToInt32(_id)).ToList();
                            _promotionSerialTemp.AddRange(_n);
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPromotionSerial_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionSerial.ColumnCount > 0)
                {
                    Int32 _rowindex = e.RowIndex;
                    if (_rowindex != -1)
                    {
                        for (int index = e.RowIndex; index <= e.RowIndex + e.RowCount - 1; index++)
                        {
                            string _item = gvPromotionSerial.Rows[index].Cells["ProSer_Item"].Value.ToString();
                            string _serialID = gvPromotionSerial.Rows[index].Cells["ProSer_SerialID"].Value.ToString();
                            DataGridViewCheckBoxCell _check = gvPromotionSerial.Rows[index].Cells["ProSer_Select"] as DataGridViewCheckBoxCell;

                            string _selectedid = string.Empty;
                            if (PriceCombinItemSerialList != null)
                                if (PriceCombinItemSerialList != null)
                                    if (PriceCombinItemSerialList.Count > 0)
                                    {
                                        var _id = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item && x.Tus_ser_id == Convert.ToInt32(_serialID)).Select(y => y.Tus_ser_id);
                                        if (_id != null)
                                            if (_id.Count() > 0)
                                            {
                                                foreach (var f in _id)
                                                    if (!string.IsNullOrEmpty(Convert.ToString(f)))
                                                        _check.Value = true;
                                            }
                                    }
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnPriClose_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                PriceCombinItemSerialList = new List<ReptPickSerials>();
                _tempPriceCombinItem = new List<PriceCombinedItemRef>();
                _promotionSerial = new List<ReptPickSerials>();
                _promotionSerialTemp = new List<ReptPickSerials>();
                txtUnitPrice.Text = FormatToCurrency("0");
                CalculateItem();
                pnlMain.Enabled = true;
                pnlPriceNPromotion.Visible = false;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; }
        }

        private void btnPriNProCancel_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                PriceCombinItemSerialList = new List<ReptPickSerials>();
                _tempPriceCombinItem = new List<PriceCombinedItemRef>();
                _promotionSerial = new List<ReptPickSerials>();
                _promotionSerialTemp = new List<ReptPickSerials>();
                txtUnitPrice.Text = FormatToCurrency("0");
                CalculateItem();
                pnlPriceNPromotion.Visible = false;
                pnlMain.Enabled = true;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; }
        }

        private List<ReptPickSerials> VirtualSerialLine(string _item, string _status, decimal _qty, string _serialno)
        {
            List<ReptPickSerials> _ser = new List<ReptPickSerials>();
            if (!string.IsNullOrEmpty(_serialno))
            {
                ReptPickSerials _one = new ReptPickSerials();
                _one.Tus_com = BaseCls.GlbUserComCode;
                _one.Tus_itm_cd = _item;
                _one.Tus_itm_stus = _status;
                _one.Tus_loc = BaseCls.GlbUserDefLoca;
                _one.Tus_qty = Convert.ToDecimal(_qty);
                _one.Tus_ser_1 = _serialno;
                _one.Tus_ser_2 = "N/A";
                _one.Tus_ser_3 = "N/A";
                _one.Tus_ser_4 = "N/A";
                _one.Tus_ser_id = VirtualCounter + 1;
                _one.Tus_ser_line = 1;
                _ser.Add(_one);
            }
            else
            {
                for (int i = 0; i < Convert.ToInt32(_qty); i++)
                {
                    ReptPickSerials _one = new ReptPickSerials();
                    _one.Tus_com = BaseCls.GlbUserComCode;
                    _one.Tus_itm_cd = _item;
                    _one.Tus_itm_stus = _status;
                    _one.Tus_loc = BaseCls.GlbUserDefLoca;
                    _one.Tus_qty = 1;
                    _one.Tus_ser_1 = "N/A";
                    _one.Tus_ser_2 = "N/A";
                    _one.Tus_ser_3 = "N/A";
                    _one.Tus_ser_4 = "N/A";
                    _one.Tus_ser_id = VirtualCounter + 1;
                    _one.Tus_ser_line = 1;
                    _ser.Add(_one);
                }
            }
            return _ser;
        }

        private bool IsPromotionHavingSubItem(DataGridViewRow _row)
        {
            try
            {
                bool _yes = false;
                int _pricetype = Convert.ToInt32(_row.Cells["PromPrice_pricetype"].Value);
                DataTable _pricetypetbl = CHNLSVC.Sales.GetPriceTypeByIndent(_pricetype);
                if (_pricetypetbl.Rows[0]["sarpt_is_com"] == DBNull.Value)
                    _yes = false;
                else
                    _yes = Convert.ToBoolean(_pricetypetbl.Rows[0].Field<Int16>("sarpt_is_com"));
                return _yes;
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                CHNLSVC.CloseChannel();
                return false;
            }
        }

        private void btnPriNProConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (_tempPriceCombinItem != null && _tempPriceCombinItem.Count > 0)
                { foreach (DataGridViewRow r in gvPromotionItem.Rows) _tempPriceCombinItem.Where(x => x.Sapc_itm_cd == Convert.ToString(r.Cells["PromItm_Item"].Value)).ToList().ForEach(x => x.Status = Convert.ToString(r.Cells["PromItm_Status"].Value)); }

                if (_priceBookLevelRef.Sapl_is_serialized)
                {
                    int _normalCount = (from DataGridViewRow row in gvNormalPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row).Count();
                    int _promoCount = (from DataGridViewRow row in gvPromotionPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row).Count();
                    int _totalPickedSerial = _normalCount + _promoCount;
                    if (_totalPickedSerial == 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price from normal or promotion", "Normal Or Promotion Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    if (_totalPickedSerial > 1)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have selected more than one selection.", "Qty And Selection Mismatch", MessageBoxButtons.YesNo, MessageBoxIcon.Information); } return; }
                    if (_normalCount > 0)
                    {
                        var _normalRow = from DataGridViewRow row in gvNormalPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row;
                        if (_normalRow != null)
                        {
                            foreach (var _row in _normalRow)
                            {
                                string _unitPrice = _row.Cells["NorPrice_UnitPrice"].Value.ToString();
                                string _bkpPrice = _row.Cells["NorPrice_BkpUPrice"].Value.ToString();
                                string _pbseq = _row.Cells["NorPrice_Pb_Seq"].Value.ToString();
                                string _pblineseq = string.Empty;
                                if (string.IsNullOrEmpty(Convert.ToString(_row.Cells["NorPrice_PbLineSeq"].Value))) _pblineseq = "1";
                                else _pblineseq = _row.Cells["NorPrice_PbLineSeq"].Value.ToString();
                                string _warrantyrmk = _row.Cells["NorPrice_WarrantyRmk"].Value.ToString();
                                if (!string.IsNullOrEmpty(_unitPrice))
                                {
                                    txtUnitPrice.Text = FormatToCurrency(_unitPrice);
                                    SSPriceBookPrice = Convert.ToDecimal(_bkpPrice);
                                    SSPriceBookSequance = _pbseq;
                                    SSPriceBookItemSequance = _pblineseq;
                                    WarrantyRemarks = _warrantyrmk;
                                    CalculateItem();
                                    pnlMain.Enabled = true;
                                    pnlPriceNPromotion.Visible = false;
                                }
                            }
                        }
                        return;
                    }
                    if (_promoCount > 0)
                    {
                        var _promoRow = from DataGridViewRow row in gvPromotionPrice.Rows where Convert.ToBoolean(((DataGridViewCheckBoxCell)row.Cells[0]).Value) == true select row;
                        if (_promoRow != null)
                        {
                            foreach (var _row in _promoRow)
                            {
                                string _mainItem = _row.Cells["PromPrice_Item"].Value.ToString();
                                string _pbSeq = _row.Cells["PromPrice_Pb_Seq"].Value.ToString();
                                string _pbLineSeq = "0";
                                if (Convert.ToString(_row.Cells["PromPrice_PbLineSeq"].Value) == string.Empty) _pbLineSeq = "0"; else _pbLineSeq = Convert.ToString(_row.Cells["PromPrice_PbLineSeq"].Value);
                                string _pbWarranty = _row.Cells["PromPrice_WarrantyRmk"].Value.ToString();
                                string _unitprice = _row.Cells["PromPrice_UnitPrice"].Value.ToString();
                                string _promotioncode = _row.Cells["PromPrice_PromotionCD"].Value.ToString();
                                string _circulerncode = _row.Cells["PromPrice_Circuler"].Value.ToString();
                                string _promotiontype = _row.Cells["PromPrice_PriceType"].Value.ToString();
                                string _pbPrice = _row.Cells["PromPrice_BkpUPrice"].Value.ToString();
                                bool _isSingleItemSerialized = false;

                                PriceDetailRestriction _restriction = CHNLSVC.Sales.GetPromotionRestriction(BaseCls.GlbUserComCode, _promotioncode);

                                if (_restriction != null)
                                {
                                    //show message
                                    if (!string.IsNullOrEmpty(_restriction.Spr_msg))
                                    {
                                        MessageBox.Show(_restriction.Spr_msg, "Promotion Message", MessageBoxButtons.OK);

                                        bool nic = false;
                                        bool mob = false;
                                        bool cus = false;

                                        if (_restriction.Spr_need_cus && (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.ToUpper() == "CASH"))
                                        {
                                            cus = true;
                                        }
                                        if (_restriction.Spr_need_mob && string.IsNullOrEmpty(txtMobile.Text))
                                        {
                                            mob = true;
                                        }
                                        if (_restriction.Spr_need_nic && string.IsNullOrEmpty(txtNIC.Text))
                                        {
                                            nic = true;
                                        }

                                        string _message = "";
                                        if (cus)
                                        {
                                            _message = _message + "This promotion need Customer code, Please enter customer code\n";
                                        }
                                        if (nic)
                                        {
                                            _message = _message + "This promotion need ID Number, Please enter ID Number\n";
                                        }
                                        if (mob)
                                        {
                                            _message = _message + "This promotion need Mobile Number, Please enter  Mobile Number\n";
                                        }
                                        if (cus || nic || mob)
                                        {
                                            MessageBox.Show(_message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            return;
                                        }
                                    }
                                }

                                foreach (PriceCombinedItemRef _ref in _tempPriceCombinItem)
                                {
                                    string _item = _ref.Sapc_itm_cd;
                                    string _originalItem = _ref.Sapc_itm_cd;
                                    string _similerItem = Convert.ToString(_ref.Similer_item);
                                    if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                    string _status = _ref.Status; //cmbStatus.Text.Trim();
                                    string _qty = Convert.ToString(_ref.Sapc_qty);
                                    bool _haveSerial = Convert.ToBoolean(_ref.Sapc_increse);
                                    string _serialno = Convert.ToString(_ref.Sapc_sub_ser);

                                    MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                    if (_itm.Mi_is_ser1 == 1) _isSingleItemSerialized = true;
                                    if (_haveSerial && _itm.Mi_is_ser1 == 1)
                                    {
                                        if (!string.IsNullOrEmpty(_serialno) && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                        {
                                            List<InventorySerialRefN> _refs = CHNLSVC.Inventory.GetItemDetailBySerial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _serialno);
                                            if (_ref != null)
                                                if (_refs.Count > 0)
                                                {
                                                    var _available = _refs.Where(x => x.Ins_itm_cd == _item).ToList();
                                                    if (_available == null || _available.Count <= 0)
                                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item, " + _serialno + " serial  does not available in the current inventory stock.", "No Stock", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                                }
                                        }
                                        else if (string.IsNullOrEmpty(_serialno) && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                        {
                                            decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                            if (_serialcount != Convert.ToDecimal(_qty))
                                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                        }
                                        else if (_itm.Mi_is_ser1 == 1 && chkDeliverLater.Checked && chkDeliverNow.Checked == false)
                                        {
                                            ReptPickSerials _one = new ReptPickSerials();
                                            if (!string.IsNullOrEmpty(_serialno)) PriceCombinItemSerialList.Add(VirtualSerialLine(_item, _status, Convert.ToDecimal(_qty), _serialno)[0]);
                                        }
                                    }
                                    else if (_haveSerial == false && _itm.Mi_is_ser1 == 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                    {
                                        decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                        if (_serialcount != Convert.ToDecimal(_qty))
                                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                    }
                                    else if (_haveSerial == false && (_itm.Mi_is_ser1 == 0 || _itm.Mi_is_ser1 == -1) && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                    {
                                        decimal _pickQty = 0;
                                        if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum(); else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == _status).ToList().Select(x => x.Sad_qty).Sum();
                                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                        List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status);
                                        if (_inventoryLocation != null)
                                            if (_inventoryLocation.Count > 0)
                                            {
                                                decimal _invBal = _inventoryLocation[0].Inl_qty;
                                                if (_pickQty > _invBal)
                                                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                            }
                                            else
                                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                        else
                                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                    }
                                    else if (_itm.Mi_is_ser1 == 1 && (chkDeliverLater.Checked || chkDeliverNow.Checked))
                                    {
                                        ReptPickSerials _one = new ReptPickSerials();
                                        if (!string.IsNullOrEmpty(_serialno))
                                        {
                                            _one.Tus_com = BaseCls.GlbUserComCode;
                                            _one.Tus_itm_cd = _item;
                                            _one.Tus_itm_stus = _status;
                                            _one.Tus_loc = BaseCls.GlbUserDefLoca;
                                            _one.Tus_qty = Convert.ToDecimal(_qty);
                                            _one.Tus_ser_1 = _serialno;
                                            _one.Tus_ser_2 = "N/A";
                                            _one.Tus_ser_3 = "N/A";
                                            _one.Tus_ser_4 = "N/A";
                                            _one.Tus_ser_id = -100;
                                            _one.Tus_ser_line = 1;
                                            PriceCombinItemSerialList.Add(_one);
                                        }
                                    }
                                }

                                if (chkDeliverLater.Checked == false && _isSingleItemSerialized && chkDeliverNow.Checked == false)
                                    if (PriceCombinItemSerialList == null)
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                if (chkDeliverLater.Checked == false && _isSingleItemSerialized && chkDeliverNow.Checked == false)
                                    if (PriceCombinItemSerialList.Count <= 0)
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                SetSSPriceDetailVariable(_circulerncode, _pbLineSeq, _pbSeq, _pbPrice, _promotioncode, _promotiontype);
                                _MainPriceCombinItem = _tempPriceCombinItem;
                                txtUnitPrice.Text = FormatToCurrency(_unitprice);
                                txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false)));
                                CalculateItem();
                                pnlPriceNPromotion.Visible = false;
                                pnlMain.Enabled = true;
                                btnAddItem.Focus();
                            }
                        }
                        return;
                    }
                }
                else
                {
                    bool _isSelect = false;
                    DataGridViewRow _pickedRow = new DataGridViewRow();
                    foreach (DataGridViewRow _row in gvPromotionPrice.Rows)
                    {
                        if (Convert.ToBoolean(_row.Cells["PromPrice_Select"].Value) == true)
                        { _isSelect = true; _pickedRow = _row; break; }
                    }
                    //bool _isHavingSubItem = false;
                    //if (_pickedRow.Index == -1) _isHavingSubItem = false; else _isHavingSubItem = IsPromotionHavingSubItem(_pickedRow);
                    if (!_isSelect)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select a promotion.", "No Selection", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    if (_tempPriceCombinItem == null)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select a promotion items.", "No Promotion item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    //if (_tempPriceCombinItem.Count <= 0 && _isHavingSubItem)
                    //{ this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select a promotion items.", "No Promotion item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                    if (_isSelect)
                    {
                        string _mainItem = _pickedRow.Cells["PromPrice_Item"].Value.ToString();
                        string _pbSeq = _pickedRow.Cells["PromPrice_Pb_Seq"].Value.ToString();
                        string _pbLineSeq = _pickedRow.Cells["PromPrice_PbLineSeq"].Value.ToString();
                        string _pbWarranty = _pickedRow.Cells["PromPrice_WarrantyRmk"].Value.ToString();
                        string _unitprice = Convert.ToString(FigureRoundUp(Convert.ToDecimal(_pickedRow.Cells["PromPrice_UnitPrice"].Value.ToString()), true));
                        string _promotioncode = _pickedRow.Cells["PromPrice_PromotionCD"].Value.ToString();
                        string _circulerncode = _pickedRow.Cells["PromPrice_Circuler"].Value.ToString();
                        string _promotiontype = _pickedRow.Cells["PromPrice_PriceType"].Value.ToString();
                        string _pbPrice = _pickedRow.Cells["PromPrice_BkpUPrice"].Value.ToString();
                        bool _isSingleItemSerialized = false;

                        PriceDetailRestriction _restriction = CHNLSVC.Sales.GetPromotionRestriction(BaseCls.GlbUserComCode, _promotioncode);

                        if (_restriction != null)
                        {
                            //show message
                            if (!string.IsNullOrEmpty(_restriction.Spr_msg))
                            {
                                MessageBox.Show(_restriction.Spr_msg, "Promotion Message", MessageBoxButtons.OK);

                                bool nic = false;
                                bool mob = false;
                                bool cus = false;

                                if (_restriction.Spr_need_cus && (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.ToUpper() == "CASH"))
                                {
                                    cus = true;
                                }
                                if (_restriction.Spr_need_mob && string.IsNullOrEmpty(txtMobile.Text))
                                {
                                    mob = true;
                                }
                                if (_restriction.Spr_need_nic && string.IsNullOrEmpty(txtNIC.Text))
                                {
                                    nic = true;
                                }

                                string _message = "";
                                if (cus)
                                {
                                    _message = _message + "This promotion need Customer code, Please enter customer code\n";
                                }
                                if (nic)
                                {
                                    _message = _message + "This promotion need ID Number, Please enter ID Number\n";
                                }
                                if (mob)
                                {
                                    _message = _message + "This promotion need Mobile Number, Please enter  Mobile Number\n";
                                }
                                if (cus || nic || mob)
                                {
                                    MessageBox.Show(_message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                            }
                        }

                        if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            foreach (PriceCombinedItemRef _ref in _tempPriceCombinItem)
                            {
                                string _item = _ref.Sapc_itm_cd;
                                string _originalItem = _ref.Sapc_itm_cd;
                                string _similerItem = Convert.ToString(_ref.Similer_item);
                                if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                string _status = _ref.Status;
                                string _qty = Convert.ToString(_ref.Sapc_qty);
                                MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                if (_itm.Mi_is_ser1 == 1)
                                {
                                    _isSingleItemSerialized = true;
                                    decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                    if (_serialcount != Convert.ToDecimal(_qty)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                }
                                else if (_itm.Mi_is_ser1 == 0 || _itm.Mi_is_ser1 == -1)
                                {
                                    decimal _pickQty = 0;
                                    if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum(); else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == _status).ToList().Select(x => x.Sad_qty).Sum();
                                    _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                    List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status);
                                    if (_inventoryLocation != null)
                                        if (_inventoryLocation.Count > 0)
                                        {
                                            decimal _invBal = _inventoryLocation[0].Inl_qty;
                                            if (_pickQty > _invBal)
                                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                        }
                                        else
                                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                    else
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                }
                            }
                        if (chkDeliverLater.Checked || chkDeliverNow.Checked)
                        {
                            foreach (PriceCombinedItemRef _ref in _tempPriceCombinItem)
                            {
                                string _item = _ref.Sapc_itm_cd;
                                string _originalItem = _ref.Sapc_itm_cd;
                                string _similerItem = Convert.ToString(_ref.Similer_item);
                                if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                string _status = _ref.Status;
                                string _qty = Convert.ToString(_ref.Sapc_qty);
                                MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                if (IsGiftVoucher(_itm.Mi_itm_tp))
                                {
                                    _isSingleItemSerialized = true;
                                    decimal _serialcount = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Select(y => y.Tus_qty).Count();
                                    if (_serialcount != Convert.ToDecimal(_qty))
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch in " + _item, "Serial & Qty", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                                }
                            }
                        }
                        if (chkDeliverLater.Checked == false && _isSingleItemSerialized && chkDeliverNow.Checked == false)
                            if (PriceCombinItemSerialList == null)
                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                        if (chkDeliverLater.Checked == false && _isSingleItemSerialized && chkDeliverNow.Checked == false)
                            if (PriceCombinItemSerialList.Count <= 0)
                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You have to select the serial for the promotion items", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                        SetSSPriceDetailVariable(_circulerncode, _pbLineSeq, _pbSeq, _pbPrice, _promotioncode, _promotiontype);
                        _MainPriceCombinItem = _tempPriceCombinItem;
                        txtUnitPrice.Text = FormatToCurrency(_unitprice);
                        txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text.Trim()), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false)));
                        CalculateItem();
                        pnlPriceNPromotion.Visible = false;
                        pnlMain.Enabled = true;
                        btnAddItem.Focus();
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnPriNProSerConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                txtPriNProSerialSearch.Text = string.Empty;
                decimal _serialcount = 0;
                decimal _promotionItemQty = Convert.ToDecimal(gvPromotionItem.SelectedRows[0].Cells["PromItm_Qty"].Value);
                string _promotionItem = gvPromotionItem.SelectedRows[0].Cells["PromItm_Item"].Value.ToString();
                string _promotionOriginalItem = gvPromotionItem.SelectedRows[0].Cells["PromItm_Item"].Value.ToString();
                string _SimilerItem = Convert.ToString(gvPromotionItem.SelectedRows[0].Cells["PromItm_SimilerItem"].Value);
                if (!string.IsNullOrEmpty(_SimilerItem)) _promotionItem = _SimilerItem;
                foreach (DataGridViewRow _row in gvPromotionSerial.Rows)
                {
                    if (Convert.ToBoolean(_row.Cells["ProSer_Select"].Value) == true)
                        _serialcount += 1;
                }
                if (_serialcount != _promotionItemQty)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch. Item Qty - " + _promotionItemQty.ToString() + "but serials - " + _serialcount.ToString(), "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }
                if (_serialcount > _promotionItemQty)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch. Item Qty - " + _promotionItemQty.ToString() + "but serials - " + _serialcount.ToString(), "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }
                if (PriceCombinItemSerialList != null)
                    if (PriceCombinItemSerialList.Count > 0)
                    {
                        decimal _count = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _promotionItem).Count();
                        if (_count >= _promotionItemQty)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You already pick serials for the item", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                    }
                foreach (DataGridViewRow _r in gvPromotionSerial.Rows)
                {
                    if (Convert.ToBoolean(_r.Cells["ProSer_Select"].Value) == true)
                    {
                        string _item = Convert.ToString(_r.Cells["ProSer_Item"].Value);
                        string _serial = Convert.ToString(_r.Cells["ProSer_Serial1"].Value);
                        string _serial2 = Convert.ToString(_r.Cells["ProSer_Serial2"].Value);
                        MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                        string _prefix = Convert.ToString(_r.Cells["ProSer_Serial3"].Value);
                        bool _isGiftVoucher = IsGiftVoucher(_itm.Mi_itm_tp);
                        ReptPickSerials _serLst = null;
                        if (!_isGiftVoucher) _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item, _serial); else _serLst = CHNLSVC.Inventory.GetGiftVoucherDetail(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item, Convert.ToInt32(_serial2), Convert.ToInt32(_serial), _prefix);
                        _serLst.Tus_session_id = _promotionOriginalItem;
                        if (_serLst != null)
                            if (_serLst.Tus_ser_1 != null || !string.IsNullOrEmpty(_serLst.Tus_ser_1))
                            {
                                if (PriceCombinItemSerialList != null)
                                    if (PriceCombinItemSerialList.Count > 0)
                                    {
                                        var _dup = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _serLst.Tus_itm_cd && x.Tus_ser_1 == _serLst.Tus_ser_1).ToList();
                                        if (_dup != null)
                                            if (_dup.Count > 0)
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show(_serLst.Tus_ser_1 + "Serial duplicating!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                                return;
                                            }
                                            else
                                                PriceCombinItemSerialList.Add(_serLst);
                                        else
                                            PriceCombinItemSerialList.Add(_serLst);
                                    }
                                    else
                                    {
                                        PriceCombinItemSerialList.Add(_serLst);
                                    }
                                else
                                {
                                    PriceCombinItemSerialList.Add(_serLst);
                                }
                            }
                    }
                }
                List<ReptPickSerials> _lst = new List<ReptPickSerials>();
                gvPromotionSerial.DataSource = _lst;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtPriNProSerialSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPromotionSerial.ColumnCount > 0)
                {
                    if (!string.IsNullOrEmpty(txtPriNProSerialSearch.Text.Trim()))
                    {
                        var query = _promotionSerial.Where(x => x.Tus_ser_1.Contains(txtPriNProSerialSearch.Text.Trim())).ToList();
                        if (query != null) if (query.Count() > 0) gvPromotionSerial.DataSource = query; else gvPromotionSerial.DataSource = new List<ReptPickSerials>(); else gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                    }
                    else
                    {
                        gvPromotionSerial.DataSource = _promotionSerial;
                    }
                    foreach (DataGridViewRow _r in gvPromotionSerial.Rows)
                    {
                        string _id = _r.Cells["ProSer_SerialID"].Value.ToString();
                        DataGridViewCheckBoxCell _chk = _r.Cells["ProSer_Select"] as DataGridViewCheckBoxCell;
                        if (_promotionSerialTemp != null)
                            if (_promotionSerialTemp.Count > 0)
                            {
                                var _exist = _promotionSerialTemp.Where(x => x.Tus_ser_id == Convert.ToInt32(_id)).ToList();
                                if (_exist != null)
                                    if (_exist.Count > 0)
                                        _chk.Value = true;
                            }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private Point muPricePoint = new Point();

        private void pnlPriceNPromotion_MouseDown(object sender, MouseEventArgs e)
        {
            muPricePoint.X = e.X;
            muPricePoint.Y = e.Y;
        }

        private void pnlPriceNPromotion_MouseUp(object sender, MouseEventArgs e)
        {
            pnlPriceNPromotion.Location = new Point(e.X - muPricePoint.X + pnlPriceNPromotion.Location.X, e.Y - muPricePoint.Y + pnlPriceNPromotion.Location.Y);
        }

        protected void BindConsumableItem(List<InventoryBatchRefN> _consumerpricelist)
        {
            _consumerpricelist.ForEach(x => x.Inb_unit_cost = x.Inb_unit_price * CheckSubItemTax(x.Inb_itm_cd));
            gvPopConsumPricePick.DataSource = _consumerpricelist;
        }

        private bool ConsumerItemProduct()
        {
            bool _isAvailable = false;
            bool _isMRP = _itemdetail.Mi_anal3;
            if (_isMRP && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
            {
                List<InventoryBatchRefN> _batchRef = new List<InventoryBatchRefN>();
                if (_priceBookLevelRef.Sapl_chk_st_tp) _batchRef = CHNLSVC.Sales.GetConsumerProductPriceList(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim()); else _batchRef = CHNLSVC.Sales.GetConsumerProductPriceList(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty);
                if (_batchRef.Count > 0)
                    if (_batchRef.Count > 1)
                    {
                        pnlMain.Enabled = false;
                        pnlConsumerPrice.Visible = true;
                        BindConsumableItem(_batchRef);
                    }
                    else if (_batchRef.Count == 1)
                    {
                        if (_batchRef[0].Inb_free_qty < Convert.ToDecimal(txtQty.Text.Trim()))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty is " + txtQty.Text + " and inventory available qty having only " + _batchRef[0].Inb_free_qty.ToString(), "No Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            _isAvailable = true;
                            return _isAvailable;
                        }
                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(_batchRef[0].Inb_unit_price * CheckSubItemTax(_batchRef[0].Inb_itm_cd))));
                        txtUnitPrice.Focus();
                        _isAvailable = false;
                    }
                _isEditPrice = false;
                _isEditDiscount = false;
                if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
                decimal val = Convert.ToDecimal(txtQty.Text);
                txtQty.Text = FormatToQty(Convert.ToString(val));
                CalculateItem();
                _isAvailable = true;
            }
            return _isAvailable;
        }

        private Point ConsumItemPoint = new Point();

        private void pnlConsumerPrice_MouseDown(object sender, MouseEventArgs e)
        {
            ConsumItemPoint.X = e.X;
            ConsumItemPoint.Y = e.Y;
        }

        private void pnlConsumerPrice_MouseUp(object sender, MouseEventArgs e)
        {
            pnlConsumerPrice.Location = new Point(e.X - ConsumItemPoint.X + pnlConsumerPrice.Location.X, e.Y - ConsumItemPoint.Y + pnlConsumerPrice.Location.Y);
        }

        private void btnPnlConsumeClose_Click(object sender, EventArgs e)
        {
            pnlConsumerPrice.Visible = false;
            pnlMain.Enabled = true;
        }

        private void gvPopConsumPricePick_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPopConsumPricePick.Rows.Count > 0)
                {
                    string _freeQty = gvPopConsumPricePick.SelectedRows[0].Cells["inb_free_qty"].Value.ToString();
                    string _unitPrice = gvPopConsumPricePick.SelectedRows[0].Cells["Inb_unit_price"].Value.ToString();
                    if (!string.IsNullOrEmpty(_freeQty))
                        if (Convert.ToDecimal(_freeQty) < Convert.ToDecimal(txtQty.Text.Trim()))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Selected price does not meet the quantity requirement.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                    pnlMain.Enabled = true;
                    pnlConsumerPrice.Visible = false;
                    txtUnitPrice.Text = _unitPrice;
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; }
        }

        private void DisplayAvailableQty(string _item, Label _withStatus, Label _withoutStatus, string _status)
        {
            List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item.Trim(), string.Empty);
            if (_inventoryLocation != null)
                if (_inventoryLocation.Count > 0)
                {
                    var _woStatus = _inventoryLocation.Select(x => x.Inl_free_qty).Sum();
                    var _wStatus = _inventoryLocation.Where(x => x.Inl_itm_stus == _status).Select(x => x.Inl_free_qty).Sum();
                    _withStatus.Text = FormatToQty(Convert.ToString(_wStatus));
                    _withoutStatus.Text = FormatToQty(Convert.ToString(_woStatus));
                }
                else { _withStatus.Text = FormatToQty("0"); _withoutStatus.Text = FormatToQty("0"); }
            else { _withoutStatus.Text = FormatToQty("0"); _withStatus.Text = FormatToQty("0"); }
        }

        private void LoadGiftVoucherBalance(string _item, Label _withStatus, Label _withoutStatus, out List<ReptPickSerials> GiftVoucher)
        {
            List<ReptPickSerials> _gifVoucher = CHNLSVC.Inventory.GetAvailableGiftVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item);
            if (_gifVoucher == null || _gifVoucher.Count <= 0)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("There is no gift vouchers available.", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                _withStatus.Text = string.Empty;
                _withoutStatus.Text = string.Empty;
                GiftVoucher = _gifVoucher;
                return;
            }
            int _count = _gifVoucher.AsEnumerable().Count();
            _withStatus.Text = FormatToQty(Convert.ToString(_count));
            _withoutStatus.Text = FormatToQty(Convert.ToString(_count));
            var _list = _gifVoucher.AsEnumerable().Where(x => x.Tus_itm_cd == _item).ToList();
            GiftVoucher = _list;
        }

        private bool _isNewPromotionProcess = false;
        private List<PriceDetailRef> _PriceDetailRefPromo = null;
        private List<PriceSerialRef> _PriceSerialRefPromo = null;
        private List<PriceSerialRef> _PriceSerialRefNormal = null;

        private bool CheckProfitCenterAllowForWithoutPrice()
        {
            bool _isAvailable = false;
            if (_MasterProfitCenter.Mpc_without_price && _priceBookLevelRef.Sapl_is_without_p)
            {
                SetDecimalTextBoxForZero(false, false, false);
                _isAvailable = true;
                return _isAvailable;
            }
            return _isAvailable;
        }

        private bool CheckQtyPriliminaryRequirements()
        {
            bool _IsTerminate = false;
            if (string.IsNullOrEmpty(txtItem.Text))
            {
                _IsTerminate = true; return _IsTerminate;
            }
            if (IsNumeric(txtQty.Text) == false)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Invalid Character", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                txtQty.Focus();
                return _IsTerminate; ;
            }
            if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) { _IsTerminate = true; return _IsTerminate; };

            if (_itemdetail.Mi_is_ser1 == 1 && !string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                txtQty.Text = FormatToQty("1");
            _MainPriceCombinItem = new List<PriceCombinedItemRef>();
            if (string.IsNullOrEmpty(txtQty.Text)) { CalculateItem(); SSPriceBookItemSequance = "0"; SSPriceBookPrice = 0; SSPriceBookSequance = "0"; WarrantyPeriod = 0; WarrantyRemarks = string.Empty; _IsTerminate = true; return _IsTerminate; }
            if (Convert.ToDecimal(txtQty.Text) <= 0) { CalculateItem(); SSPriceBookItemSequance = "0"; SSPriceBookPrice = 0; SSPriceBookSequance = "0"; WarrantyPeriod = 0; WarrantyRemarks = string.Empty; _IsTerminate = true; return _IsTerminate; }
            if (string.IsNullOrEmpty(cmbInvType.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invalid Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                cmbInvType.Focus();
                return _IsTerminate;
            }
            // if (string.IsNullOrEmpty(txtCustomer.Text))
            if (string.IsNullOrEmpty(txtCustomer.Text) && IsNewCustomer == false) // updaetd by akila 2017/09/15
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Invalid Customer Code", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                txtCustomer.Focus();
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(txtItem.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                txtItem.Focus();
                return _IsTerminate;
            }

            if (string.IsNullOrEmpty(cmbBook.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Price book not select.", "Invalid Book", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(cmbLevel.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Invalid Level", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                cmbLevel.Focus();
                return _IsTerminate;
            }
            if (string.IsNullOrEmpty(cmbStatus.Text))
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item status", "Invalid Status", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                _IsTerminate = true;
                cmbStatus.Focus();
                return _IsTerminate;
            }
            return _IsTerminate;
        }

        private bool CheckSerializedPriceLevelAndLoadSerials(bool _isSerialized)
        {
            bool _isAvailable = false;
            if (_isSerialized)
            {
                if (string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You are selected a serialized price level, hence you have not select the serial no. Please select the serial no.", "Serialized Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    _isAvailable = true;
                    return _isAvailable;
                }
                List<PriceSerialRef> _list = null;
                if (_isNewPromotionProcess == false)
                    _list = CHNLSVC.Sales.GetAllPriceSerialFromSerial(cmbBook.Text, cmbLevel.Text, txtItem.Text, Convert.ToDateTime(txtDate.Text), txtCustomer.Text, BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtSerialNo.Text.Trim());
                else if (_PriceSerialRefNormal != null && _PriceSerialRefNormal.Count > 0)
                    _list = _PriceSerialRefNormal;
                else if (_PriceSerialRefPromo != null && _PriceSerialRefPromo.Count > 0)
                    _list = _PriceSerialRefPromo;
                _tempPriceSerial = new List<PriceSerialRef>();
                _tempPriceSerial = _list;
                if (_list != null)
                {
                    if (_list.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("There are no serials available for the selected item", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        txtQty.Text = FormatToQty("0");
                        _isAvailable = true;
                        txtQty.Focus();
                        return _isAvailable;
                    }
                    var _oneSerial = _list.Where(x => x.Sars_ser_no == txtSerialNo.Text.Trim()).ToList();
                    _list = _oneSerial;
                    if (_list.Count < Convert.ToDecimal(txtQty.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Selected qty is exceeds available serials at the price definition!", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        txtQty.Text = FormatToQty("0");
                        // IsNoPriceDefinition = true;
                        _isAvailable = true;
                        txtQty.Focus();
                        return _isAvailable;
                    }
                    if (_list.Count == 1)
                    {
                        string _book = _list[0].Sars_pbook;
                        string _level = _list[0].Sars_price_lvl;
                        cmbBook.Text = _book;
                        cmbLevel.Text = _level;
                        if (!_isSerialized)
                            cmbLevel_Leave(null, null);

                        int _priceType = 0;
                        _priceType = _list[0].Sars_price_type;
                        PriceTypeRef _promotion = TakePromotion(_priceType);
                        decimal UnitPrice = TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _list[0].Sars_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false);

                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                        WarrantyRemarks = _list[0].Sars_warr_remarks;
                        SetSSPriceDetailVariable(_list[0].Sars_circular_no, "0", Convert.ToString(_list[0].Sars_pb_seq), Convert.ToString(_list[0].Sars_itm_price), _list[0].Sars_promo_cd, Convert.ToString(_list[0].Sars_price_type));

                        Int32 _pbSq = _list[0].Sars_pb_seq;
                        string _mItem = _list[0].Sars_itm_cd;
                        _isAvailable = true;
                        //if (_promotion.Sarpt_is_com)
                        //{
                        SetColumnForPriceDetailNPromotion(true);
                        BindSerializedPrice(_list);

                        if (gvPromotionPrice.RowCount > 0)
                        {
                            gvPromotionPrice_CellDoubleClick(0, false, _isSerialized);
                            pnlPriceNPromotion.Visible = true;
                            pnlMain.Enabled = false;
                            return _isAvailable;
                        }
                        else
                            if (_isCombineAdding == false) txtUnitPrice.Focus();
                        //}
                        //else
                        //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                        return _isAvailable;
                    }
                    if (_list.Count > 1)
                    {
                        SetColumnForPriceDetailNPromotion(true);
                        BindPriceAndPromotion(_list);
                        DisplayAvailableQty(txtItem.Text, lblPriNProAvailableStatusQty, lblPriNProAvailableQty, cmbStatus.Text);
                        pnlMain.Enabled = false;
                        pnlPriceNPromotion.Visible = true;
                        _isAvailable = true;
                        return _isAvailable;
                    }
                }
                else
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("There are no serials available for the selected item", "Serialized Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    txtQty.Text = FormatToQty("0");
                    _isAvailable = true;
                    txtQty.Focus();
                    return _isAvailable;
                }
            }
            return _isAvailable;
        }

        protected bool CheckQty(bool _isSearchPromotion)
            {
            chkDeliverLater.Enabled = false;
            //_masterBusinessCompany = NewCustomer();//add by akila 2017/09/15

            if (pnlMain.Enabled == false) return true;
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");

            //add by akila 2017/08/17
            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0");

            WarrantyPeriod = 0;
            WarrantyRemarks = string.Empty;
            bool _IsTerminate = false;
            ManagerDiscount = new Dictionary<decimal, decimal>();
            SSPriceBookSequance = "0";
            SSPriceBookItemSequance = "0";
            SSPriceBookPrice = 0;

            IsOrgPriceEdited = false;
            //if (!IsOrgPriceEdited)
            //{
            //    if (_MasterProfitCenter != null)
            //    {
            //        if (_MasterProfitCenter.Mpc_cd != null)
            //        {
            //            if (_MasterProfitCenter.Mpc_edit_price){ txtUnitPrice.ReadOnly = true;}
            //            else { txtUnitPrice.ReadOnly = true;}
            //        }
            //    }
            //}

            _grah_alw_pro = true;
            _grah_isalw_free_itm = true;
            _grah_rcv_buyb = true;

            if (_isCompleteCode == false)
                if (CheckInventoryCombine())
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("This compete code does not having a collection. Please contact inventory", "Inventory Combine", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (CheckQtyPriliminaryRequirements()) return true;

            if (_isCombineAdding == false)
                if (CheckTaxAvailability())
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Tax rates not setup for selected item code ( " + txtItem.Text + " ) and item status ( " + cmbStatus.Text.Trim() + " ). Please contact Inventory Department.", "Item Tax", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    _IsTerminate = true;
                    return _IsTerminate;
                }

            if (_isCombineAdding == false) CheckItemTax(txtItem.Text.Trim());
            if (_isCombineAdding == false)
                if (CheckProfitCenterAllowForWithoutPrice())
                {
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (_isCombineAdding == false)
                if (ConsumerItemProduct())
                {
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (_isSearchPromotion) if (CheckItemPromotion()) { _IsTerminate = true; return _IsTerminate; }
            if (_isCombineAdding == false && _priceBookLevelRef.Sapl_is_serialized)
                if (CheckSerializedPriceLevelAndLoadSerials(true))
                {
                    _IsTerminate = true;
                    return _IsTerminate;
                }
            if (IsGiftVoucher(_itemdetail.Mi_itm_tp)) return true;
            if (IsVirtual(_itemdetail.Mi_itm_tp) && _isCompleteCode == false)
            {
                txtUnitPrice.ReadOnly = false;
                txtDisRate.ReadOnly = false;
                txtDisAmt.ReadOnly = false;
                txtUnitAmt.ReadOnly = true;
                txtTaxAmt.ReadOnly = true;
                txtLineTotAmt.ReadOnly = true;
                return true;
            }
            else if (_MasterProfitCenter.Mpc_edit_price == true)
            {
                txtUnitPrice.ReadOnly = false;
                txtDisRate.ReadOnly = false;
                txtDisAmt.ReadOnly = false;
                txtUnitAmt.ReadOnly = true;
                txtTaxAmt.ReadOnly = true;
                txtLineTotAmt.ReadOnly = true;
            }
            else
            {
                txtUnitPrice.ReadOnly = true;
                txtUnitAmt.ReadOnly = true;
                txtTaxAmt.ReadOnly = true;
                txtLineTotAmt.ReadOnly = true;
                if (_itemdetail.Mi_itm_tp == "V")
                {
                    txtDisRate.ReadOnly = true;
                    txtDisAmt.ReadOnly = true;
                }
                else
                {
                    txtDisRate.ReadOnly = false;
                    txtDisAmt.ReadOnly = false;
                }
            }
            _priceDetailRef = new List<PriceDetailRef>();
            if (_isBOnCredNote == true)    //kapila 5/3/2016
                _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), _dtReqPara);
            else
                _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(txtDate.Text));
            if (_priceDetailRef.Count <= 0)
            {
                if (!_isCompleteCode)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no price for the selected item", "No Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    SetDecimalTextBoxForZero(true, false, true);
                    _IsTerminate = true;
                    return _IsTerminate;
                }
                else
                {
                    txtUnitPrice.Text = FormatToCurrency("0");
                }
            }
            else
            {
                if (_isCompleteCode)
                {
                    List<PriceDetailRef> _new = _priceDetailRef;
                    _priceDetailRef = new List<PriceDetailRef>();
                    var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
                    if (_p != null)
                        if (_p.Count > 0)
                        {
                            if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
                            _priceDetailRef.Add(_p[0]);
                        }
                }
                if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                {
                    var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
                    if (_isSuspend > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Price has been suspended. Please contact IT dept.", "Suspended Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        _IsTerminate = true;
                        pnlMain.Enabled = true;
                        return _IsTerminate;
                    }
                }
                if (_priceDetailRef.Count > 1)
                {
                    SetColumnForPriceDetailNPromotion(false);
                    gvNormalPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                    gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                    gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                    BindNonSerializedPrice(_priceDetailRef);
                    pnlPriceNPromotion.Visible = true;
                    _IsTerminate = true;
                    pnlMain.Enabled = false;

                    return _IsTerminate;
                }
                else if (_priceDetailRef.Count == 1)
                {
                    var _one = from _itm in _priceDetailRef
                               select _itm;
                    int _priceType = 0;
                    foreach (var _single in _one)
                    {
                        _priceType = _single.Sapd_price_type;
                        PriceTypeRef _promotion = TakePromotion(_priceType);
                        decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                        WarrantyRemarks = _single.Sapd_warr_remarks;
                        SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
                        Int32 _pbSq = _single.Sapd_pb_seq;
                        Int32 _pbiSq = _single.Sapd_seq_no;
                        string _mItem = _single.Sapd_itm_cd;
                        //if (_promotion.Sarpt_is_com)
                        //{
                        SetColumnForPriceDetailNPromotion(false);
                        gvNormalPrice.DataSource = new List<PriceDetailRef>();
                        gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                        gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                        gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                        BindNonSerializedPrice(_priceDetailRef);

                        if (gvPromotionPrice.RowCount > 0)
                        {
                            //gvPromotionPrice_CellDoubleClick(0, false, false);
                            //pnlPriceNPromotion.Visible = true;
                            //pnlMain.Enabled = false;
                            //_IsTerminate = true;
                            //return _IsTerminate;
                        }
                        else
                        {
                            if (_isCombineAdding == false) txtUnitPrice.Focus();
                        }

                        //}
                        //else
                        //{
                        //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                        //}
                    }
                }
            }
            _isEditPrice = false;
            _isEditDiscount = false;
            if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
            decimal vals = Convert.ToDecimal(txtQty.Text);
            txtQty.Text = FormatToQty(Convert.ToString(vals));
            CalculateItem();

            //get price for priority pb
            if (_priorityPriceBook != null && cmbBook.SelectedValue != _priorityPriceBook.Sppb_pb && cmbBook.SelectedValue != _priorityPriceBook.Sppb_pb_lvl)
            {
                decimal normalPrice = Convert.ToDecimal(txtLineTotAmt.Text);

                if (_isBOnCredNote == true)     //kapila 5/3/2016
                    _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _priorityPriceBook.Sppb_pb, _priorityPriceBook.Sppb_pb_lvl, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), _dtReqPara);
                else
                    _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _priorityPriceBook.Sppb_pb, _priorityPriceBook.Sppb_pb_lvl, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(txtDate.Text));
                string _unitPrice = "";
                if (_priceDetailRef.Count <= 0)
                {
                    return false;
                }

                if (_priceDetailRef.Count <= 0)
                {
                    if (!_isCompleteCode)
                    {
                        //this.Cursor = Cursors.Default;
                        //using (new CenterWinDialog(this)) { MessageBox.Show("There is no price for the selected item", "No Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        //SetDecimalTextBoxForZero(true, false, true);
                        return false;
                    }
                    else
                    {
                        _unitPrice = FormatToCurrency("0");
                    }
                }
                else
                {
                    if (_isCompleteCode)
                    {
                        List<PriceDetailRef> _new = _priceDetailRef;
                        _priceDetailRef = new List<PriceDetailRef>();
                        var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
                        if (_p != null)
                            if (_p.Count > 0)
                            {
                                if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
                                _priceDetailRef.Add(_p[0]);
                            }
                    }
                    if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                    {
                        var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
                        if (_isSuspend > 0)
                        {
                            return false;
                        }
                    }
                    if (_priceDetailRef.Count > 1)
                    {
                        /*
                        DialogResult _result = new DialogResult();
                        using (new CenterWinDialog(this)) { _result = MessageBox.Show("This item has " +_priorityPriceBook.Sppb_pb + " " + _priorityPriceBook.Sppb_pb_lvl + " Promotion."+"\nDo you want to select " + _priorityPriceBook.Sppb_pb + " Promotion?", "Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1); }
                        if (_result == DialogResult.Yes)
                        {
                            SetColumnForPriceDetailNPromotion(false);
                            gvNormalPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                            gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                            BindNonSerializedPrice(_priceDetailRef);
                            pnlPriceNPromotion.Visible = true;
                            _IsTerminate = true;
                            pnlMain.Enabled = false;

                            return _IsTerminate;
                        }
                        else {
                            return false;
                        }
                        */
                        return false;
                    }
                    else if (_priceDetailRef.Count == 1)
                    {
                        var _one = from _itm in _priceDetailRef
                                   select _itm;
                        int _priceType = 0;
                        foreach (var _single in _one)
                        {
                            _priceType = _single.Sapd_price_type;
                            PriceTypeRef _promotion = TakePromotion(_priceType);
                            decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
                            _unitPrice = FormatToCurrency(Convert.ToString(UnitPrice));
                            WarrantyRemarks = _single.Sapd_warr_remarks;
                            //SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
                            Int32 _pbSq = _single.Sapd_pb_seq;
                            Int32 _pbiSq = _single.Sapd_seq_no;
                            string _mItem = _single.Sapd_itm_cd;
                            //if (_promotion.Sarpt_is_com)
                            //{
                            SetColumnForPriceDetailNPromotion(false);
                            gvNormalPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                            gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                            BindNonSerializedPrice(_priceDetailRef);

                            if (gvPromotionPrice.RowCount > 0)
                            {
                                //gvPromotionPrice_CellDoubleClick(0, false, false);
                                //pnlPriceNPromotion.Visible = true;
                                //pnlMain.Enabled = false;
                                //_IsTerminate = true;
                                //return _IsTerminate;
                            }
                            else
                            {
                                if (_isCombineAdding == false) txtUnitPrice.Focus();
                            }

                            //}
                            //else
                            //{
                            //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                            //}
                        }
                    }
                }
                _isEditPrice = false;
                _isEditDiscount = false;
                if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
                decimal vals1 = Convert.ToDecimal(txtQty.Text);
                txtQty.Text = FormatToQty(Convert.ToString(vals1));
                decimal otherPrice = 0;
                if (!string.IsNullOrEmpty(txtQty.Text) && !string.IsNullOrEmpty(_unitPrice))
                {
                    decimal _disRate = 0;
                    decimal _disAmt = 0;
                    if (!string.IsNullOrEmpty(txtDisRate.Text))
                    {
                        _disRate = Convert.ToDecimal(txtDisRate.Text);
                    }
                    if (!string.IsNullOrEmpty(txtDisAmt.Text))
                    {
                        _disAmt = Convert.ToDecimal(txtDisAmt.Text);
                    }

                    otherPrice = CalculateItemTem(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(_unitPrice), _disAmt, _disRate);
                }
                else
                    return false;
                //decimal otherPrice = Convert.ToDecimal(txtLineTotAmt.Text);
                //if price change display message
                if (otherPrice < normalPrice)
                {
                    DialogResult _result = new DialogResult();
                    using (new CenterWinDialog(this)) { _result = MessageBox.Show(_priorityPriceBook.Sppb_pb + " " + _priorityPriceBook.Sppb_pb_lvl + " Price - " + FormatToCurrency(otherPrice.ToString()) + "\nDo you want to select " + _priorityPriceBook.Sppb_pb + " Price?", "Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1); }

                    if (_result == DialogResult.Yes)
                    {
                        txtUnitPrice.Text = FormatToCurrency("0");
                        txtUnitAmt.Text = FormatToCurrency("0");
                        txtDisRate.Text = FormatToCurrency("0");
                        txtDisAmt.Text = FormatToCurrency("0");
                        txtTaxAmt.Text = FormatToCurrency("0");
                        txtLineTotAmt.Text = FormatToCurrency("0");
                        cmbBook.Text = _priorityPriceBook.Sppb_pb;
                        cmbLevel.Text = _priorityPriceBook.Sppb_pb_lvl;
                        CheckQty(false);
                    }
                    else
                    {
                        SSPRomotionType = 0;
                        //SSCirculerCode = string.Empty;
                        //SSPriceBookItemSequance = string.Empty;
                        //SSPriceBookPrice = Convert.ToDecimal(0);
                        //SSPriceBookSequance = string.Empty;
                        SSPromotionCode = string.Empty;
                        /*
                        _priceDetailRef = CHNLSVC.Sales.GetPrice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(txtDate.Text));
                        if (_priceDetailRef.Count == 1)
                        {
                            var _one = from _itm in _priceDetailRef
                                       select _itm;
                            int _priceType = 0;
                            foreach (var _single in _one)
                            {
                                _priceType = _single.Sapd_price_type;
                                PriceTypeRef _promotion = TakePromotion(_priceType);
                                decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
                                txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                WarrantyRemarks = _single.Sapd_warr_remarks;
                                SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
                                Int32 _pbSq = _single.Sapd_pb_seq;
                                Int32 _pbiSq = _single.Sapd_seq_no;
                                string _mItem = _single.Sapd_itm_cd;
                                //if (_promotion.Sarpt_is_com)
                                //{
                                SetColumnForPriceDetailNPromotion(false);
                                gvNormalPrice.DataSource = new List<PriceDetailRef>();
                                gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                                gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                                gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                                BindNonSerializedPrice(_priceDetailRef);

                                if (gvPromotionPrice.RowCount > 0)
                                {
                                    gvPromotionPrice_CellDoubleClick(0, false, false);
                                    pnlPriceNPromotion.Visible = true;
                                    pnlMain.Enabled = false;
                                    _IsTerminate = true;
                                    return _IsTerminate;
                                }
                                else
                                {
                                    if (_isCombineAdding == false) txtUnitPrice.Focus();
                                }

                                //}
                                //else
                                //{
                                //    if (_isCombineAdding == false) txtUnitPrice.Focus();
                                //}
                            }
                        }
                        _isEditPrice = false;
                        _isEditDiscount = false;
                        if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
                        decimal vals2 = Convert.ToDecimal(txtQty.Text);
                        txtQty.Text = FormatToQty(Convert.ToString(vals2));
                        CalculateItem();
                         */
                    }
                }
            }

            return _IsTerminate;
        }

        private bool CheckItemPromotion()
        {
            _isNewPromotionProcess = false;
            if (string.IsNullOrEmpty(txtItem.Text))
            { using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return false; }
            _PriceDetailRefPromo = null;
            _PriceSerialRefPromo = null;
            _PriceSerialRefNormal = null;
            //kapila 
            if (_isBOnCredNote == true)
                CHNLSVC.Sales.GetPromotion(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtItem.Text.Trim(), _dtReqPara, txtCustomer.Text.Trim(), out _PriceDetailRefPromo, out _PriceSerialRefPromo, out _PriceSerialRefNormal);
            else
                CHNLSVC.Sales.GetPromotion(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtItem.Text.Trim(), txtDate.Value.Date, txtCustomer.Text.Trim(), out _PriceDetailRefPromo, out _PriceSerialRefPromo, out _PriceSerialRefNormal);

            if (_PriceDetailRefPromo == null && _PriceSerialRefPromo == null && _PriceSerialRefNormal == null) return false;
            if (_PriceSerialRefNormal != null && _PriceSerialRefNormal.Count > 0 && !string.IsNullOrEmpty(txtSerialNo.Text))
            {
                var _isSerialAvailable = _PriceSerialRefNormal.Where(x => x.Sars_ser_no == txtSerialNo.Text.Trim()).ToList();
                if (_isSerialAvailable != null && _isSerialAvailable.Count > 0)
                {
                    DialogResult _normalSerialized = new DialogResult();
                    using (new CenterWinDialog(this)) { _normalSerialized = MessageBox.Show("This item is having normal serialized price.\nDo you need to select normal serialized price?", "Normal Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_normalSerialized == System.Windows.Forms.DialogResult.Yes)
                    {
                        _isNewPromotionProcess = true;
                        CheckSerializedPriceLevelAndLoadSerials(true);
                        return true;
                    }
                }
                else
                {
                    _isNewPromotionProcess = false;
                    _PriceSerialRefNormal = null;
                }
            }
            else if (_PriceSerialRefNormal != null && _PriceSerialRefNormal.Count > 0 && string.IsNullOrEmpty(txtSerialNo.Text))
            {
                DialogResult _normalSerialized = new System.Windows.Forms.DialogResult();
                using (new CenterWinDialog(this)) { _normalSerialized = MessageBox.Show("This item having normal serialized price. Do you need to continue with normal serialized price?", "Normal Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                if (_normalSerialized == System.Windows.Forms.DialogResult.Yes)
                {
                    _isNewPromotionProcess = true;
                    CheckSerializedPriceLevelAndLoadSerials(true);
                    return true;
                }
                else
                {
                    _isNewPromotionProcess = false;
                    _PriceSerialRefNormal = null;
                }
            }
            if (_PriceSerialRefPromo != null && _PriceSerialRefPromo.Count > 0 && !string.IsNullOrEmpty(txtSerialNo.Text))
            {
                var _isSerialPromoAvailable = _PriceSerialRefPromo.Where(x => x.Sars_ser_no == txtSerialNo.Text.Trim()).ToList();
                if (_isSerialPromoAvailable != null && _isSerialPromoAvailable.Count > 0)
                {
                    DialogResult _promoSerialized = new System.Windows.Forms.DialogResult();
                    using (new CenterWinDialog(this)) { _promoSerialized = MessageBox.Show("This item is having promotional serialized price.\nDo you need to select promotional serialized price?", "Promotional Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_promoSerialized == System.Windows.Forms.DialogResult.Yes)
                    {
                        _isNewPromotionProcess = true;
                        CheckSerializedPriceLevelAndLoadSerials(true);
                        return true;
                    }
                    else
                    {
                        _isNewPromotionProcess = false;
                        _PriceSerialRefPromo = null;
                    }
                }
                else if (_PriceSerialRefPromo != null && _PriceSerialRefPromo.Count > 0 && string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    DialogResult _promoSerialized = new System.Windows.Forms.DialogResult();
                    using (new CenterWinDialog(this)) { _promoSerialized = MessageBox.Show("This item is having promotional serialized price.\nDo you need to select promotional serialized price?", "Promotional Serialized Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_promoSerialized == System.Windows.Forms.DialogResult.Yes)
                    {
                        _isNewPromotionProcess = true;
                        CheckSerializedPriceLevelAndLoadSerials(true);
                        return true;
                    }
                    else
                    {
                        _isNewPromotionProcess = false;
                        _PriceSerialRefPromo = null;
                    }
                }
            }

            _grah_alw_pro = true;
            _grah_isalw_free_itm = true;
            _grah_rcv_buyb = true;

            if (_PriceDetailRefPromo != null && _PriceDetailRefPromo.Count > 0)
            {
                //kapila 14/2/2017
                if (_isBOnCredNote)
                {
                    DataTable _invHdr = CHNLSVC.Sales.GetSalesHdr(txtSrchCreditNote.Text);
                    DataTable _gReqHdr = CHNLSVC.Sales.getReqHdrByReqNo(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _invHdr.Rows[0]["sah_anal_3"].ToString());
                    if (Convert.ToInt32(_gReqHdr.Rows[0]["grah_alw_pro"]) == 0)
                        _grah_alw_pro = false;
                    else
                    {
                        _grah_isalw_free_itm = Convert.ToBoolean(_gReqHdr.Rows[0]["GRAH_IS_ALW_FREEITMISU"]);
                        _grah_rcv_buyb = Convert.ToBoolean(_gReqHdr.Rows[0]["GRAH_RCV_BUYB"]);
                    }
                }

                if (_grah_alw_pro == true)
                {
                    DialogResult _promo = new System.Windows.Forms.DialogResult();
                    using (new CenterWinDialog(this)) { _promo = MessageBox.Show("This item is having promotions. Do you need to continue with the available promotions?", "Promotion", MessageBoxButtons.YesNo, MessageBoxIcon.Question); }
                    if (_promo == System.Windows.Forms.DialogResult.Yes)
                    {
                        SetColumnForPriceDetailNPromotion(false);
                        gvNormalPrice.DataSource = new List<PriceDetailRef>();
                        gvPromotionPrice.DataSource = new List<PriceDetailRef>();
                        gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
                        gvPromotionSerial.DataSource = new List<ReptPickSerials>();
                        BindNonSerializedPrice(_PriceDetailRefPromo);
                        pnlPriceNPromotion.Visible = true;
                        pnlMain.Enabled = false;
                        _isNewPromotionProcess = true;
                        return true;
                    }
                    else
                    {
                        _isNewPromotionProcess = false;
                        return false;
                    }
                }
                else
                {
                    _isNewPromotionProcess = false;
                    return false;
                }
            }
            else return false;
        }

        private void txtQty_Leave(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) { txtQty.Text = FormatToQty("1"); return; }
            if (_IsVirtualItem) return;
            try
            {
                if (Convert.ToDecimal(txtQty.Text.Trim()) < 0)
                {
                    MessageBox.Show("Quantity should be positive value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                this.Cursor = Cursors.WaitCursor;
                CheckQty(false);
            }
            catch (Exception ex)
            { txtQty.Text = FormatToQty("1"); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        protected void CheckUnitPrice(object sender, EventArgs e)
        {
            if (txtUnitPrice.ReadOnly) return;

            if (chkPickGV.Checked) return;
            if (_IsVirtualItem) { CalculateItem(); return; }
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (_isCompleteCode && _MasterProfitCenter.Mpc_edit_price && Convert.ToDecimal(txtUnitPrice.Text.Trim()) > 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Not allow price edit for com codes!", "Price Edit", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }

                if (string.IsNullOrEmpty(txtItem.Text)) return;
                if (IsNumeric(txtQty.Text) == false)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return;

                if (_MasterProfitCenter.Mpc_without_price && _priceBookLevelRef.Sapl_is_without_p)
                {
                    if (string.IsNullOrEmpty(txtUnitPrice.Text)) txtUnitPrice.Text = FormatToCurrency("0");
                    decimal vals = Convert.ToDecimal(txtUnitPrice.Text);
                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(vals));
                    CalculateItem();
                    return;
                }
                if (!_isCompleteCode)
                {
                    //check minus unit price validation
                    decimal _unitAmt = 0;
                    bool _isUnitAmt = Decimal.TryParse(txtUnitPrice.Text, out _unitAmt);
                    if (!_isUnitAmt)
                    {
                        using (new CenterWinDialog(this)) { MessageBox.Show("Unit Price has to be number!", "Price Edit", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }
                    if (_unitAmt <= 0)
                    {
                        using (new CenterWinDialog(this)) { MessageBox.Show("Unit Price has to be greater than 0!", "Price Edit", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }

                    if (!string.IsNullOrEmpty(txtUnitPrice.Text) && _isEditDiscount == false)
                    {
                        decimal _pb_price;
                        if (SSPriceBookPrice == 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Price not define. Please check the system updated price.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtUnitPrice.Text = FormatToCurrency("0");
                            return;
                        }
                        _pb_price = SSPriceBookPrice;
                        decimal _txtUprice = Convert.ToDecimal(txtUnitPrice.Text);
                        if (_MasterProfitCenter.Mpc_edit_price)
                        {
                            if (_pb_price > _txtUprice)
                            {
                                decimal _diffPecentage = ((_pb_price - _txtUprice) / _pb_price) * 100;
                                if (_diffPecentage > _MasterProfitCenter.Mpc_edit_rate)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not deduct price more than " + _MasterProfitCenter.Mpc_edit_rate + "% from the price book price.", "Price Edit", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_pb_price));
                                    _isEditPrice = false;
                                    return;
                                }
                                else
                                {
                                    _isEditPrice = true;
                                }
                            }
                        }
                        else
                        {
                            txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_pb_price));
                            _isEditPrice = false;
                        }
                    }
                }
                if (string.IsNullOrEmpty(txtUnitPrice.Text)) txtUnitPrice.Text = FormatToCurrency("0");
                decimal val = Convert.ToDecimal(txtUnitPrice.Text);
                txtUnitPrice.Text = FormatToCurrency(Convert.ToString(val));

                //add by akila
                if (!IsOrgPriceEdited)
                {                    
                    BackwardTaxCalculation();                    
                }
                CalculateItem();
                
            }
            catch (Exception ex)
            { 
                txtUnitPrice.Text = FormatToCurrency("0"); CalculateItem();
                this.Cursor = Cursors.Default; 
                SystemErrorMessage(ex); }
            finally
            { 
                this.Cursor = Cursors.Default; 
                CHNLSVC.CloseAllChannels(); 
        }
        }

        protected bool CheckNewDiscountRate()
        {
            if (string.IsNullOrEmpty(txtItem.Text)) return false;
            if (IsNumeric(txtQty.Text) == false)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return false;
            }
            if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return false;

            if (!string.IsNullOrEmpty(txtDisRate.Text) && _isEditPrice == false)
            {
                decimal _disRate = Convert.ToDecimal(txtDisRate.Text);
                bool _IsPromoVou = false;
                if (_disRate > 0)
                {
                    if (GeneralDiscount == null) GeneralDiscount = new CashGeneralEntiryDiscountDef();
                    if (string.IsNullOrEmpty(lblPromoVouNo.Text))
                    {
                        GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(txtDate.Text.Trim()).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtCustomer.Text.Trim(), txtItem.Text.Trim(), _priceBookLevelRef.Sapl_is_serialized ? true : false, false);
                    }
                    else
                    {
                        GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text.Trim(), Convert.ToDateTime(txtDate.Text.Trim()).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtItem.Text.Trim(), lblPromoVouNo.Text.Trim(), gvp_gv_cd);
                        if (GeneralDiscount != null)
                        {
                            _IsPromoVou = true;
                            GeneralDiscount.Sgdd_seq = Convert.ToInt32(lblPromoVouNo.Text);
                        }
                    }
                    if (GeneralDiscount != null)
                    {
                        decimal vals = GeneralDiscount.Sgdd_disc_val;
                        decimal rates = GeneralDiscount.Sgdd_disc_rt;

                        if (lblPromoVouUsedFlag.Text.Contains("U") == true)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Voucher already used!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtDisRate.Text = FormatToCurrency("0");
                            _isEditDiscount = false;
                            return false;
                        }

                        if (_IsPromoVou == true)
                        {
                            if (rates == 0 && vals > 0)
                            {
                                CalculateItem();
                                if (Convert.ToDecimal(txtDisAmt.Text) > vals)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discuount amount should be " + vals + ".\nNot allowed discount rate " + _disRate + "%", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisRate.Text = FormatToCurrency("0");
                                    CalculateItem();
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }
                            else
                            {
                                //kapila 2/11/2016
                                var _itm = _invoiceItemList.Where(x => x.Sad_disc_rt == rates).ToList();
                                if (_itm.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Already discount is used", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisRate.Text = FormatToCurrency("0");
                                    CalculateItem();
                                    _isEditDiscount = false;
                                    return false;
                                }
                                //kapila commented req by wathsala costing dept
                                //if (rates != _disRate)
                                //{
                                //    CalculateItem();
                                //    this.Cursor = Cursors.Default;
                                //    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discuount rate should be " + rates + "% !.\nNot allowed discount rate " + _disRate + "% discounted price is " + txtLineTotAmt.Text, "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                //    txtDisRate.Text = FormatToCurrency("0");
                                //    CalculateItem();
                                //    _isEditDiscount = false;
                                //    return false;
                                //}
                            }
                        }
                        else
                        {
                            if (rates < _disRate)
                            {
                                CalculateItem();
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Exceeds maximum discount allowed " + rates + "% !.\n" + _disRate + "% discounted price is " + txtLineTotAmt.Text, "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                txtDisRate.Text = FormatToCurrency("0");
                                CalculateItem();
                                _isEditDiscount = false;
                                return false;
                            }
                            else
                            {
                                _isEditDiscount = true;
                            }
                        }
                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow for apply discount", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDisRate.Text = FormatToCurrency("0");
                        _isEditDiscount = false;
                        return false;
                    }

                    if (_isEditDiscount == true)
                    {
                        if (_IsPromoVou == true)
                        {
                            //lblPromoVouUsedFlag.Text = "U";
                            _proVouInvcItem = txtItem.Text.ToUpper().ToString();
                        }
                    }
                }
                else
                    _isEditDiscount = false;
            }
            else if (_isEditPrice)
            {
                decimal _discRate = 0;
                decimal.TryParse(txtDisRate.Text.Trim(), out _discRate);
                if (_discRate > 0)
                {
                    txtDisAmt.Text = FormatToCurrency("0");
                    txtDisRate.Text = FormatToCurrency("0");
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You are not allowed to apply discount when the price has edited", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return false;
                }                
            }

            if (string.IsNullOrEmpty(txtDisRate.Text)) txtDisRate.Text = FormatToCurrency("0");
            decimal val = Convert.ToDecimal(txtDisRate.Text);
            txtDisRate.Text = FormatToCurrency(Convert.ToString(val));
            CalculateItem();
            btnAddItem.Focus();
            return true;
        }

        private Object thisLock = new Object();

        protected void CheckDiscountRate(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) return;
            if (_IsVirtualItem)
            {
                txtDisRate.Clear();
                txtDisAmt.Clear();
                txtDisAmt.Text = FormatToCurrency("0");
                txtDisRate.Text = FormatToCurrency("0");
                return;
            }
            try
            {
                if (Convert.ToDecimal(txtDisRate.Text.Trim()) > 100)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Discount Rate should be less than 100%!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtDisRate.Clear();
                    txtDisRate.Text = FormatToQty("0");
                    return;
                }
                if (Convert.ToDecimal(txtDisRate.Text.Trim()) < 0)
                {
                    //MessageBox.Show("Discount rate should be positive value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //txtDisRate.Clear();
                    //txtDisRate.Text = FormatToQty("0");
                    //return;
                }

                this.Cursor = Cursors.WaitCursor;
                if (string.IsNullOrEmpty(lblPromoVouNo.Text))
                {
                    if (_isCompleteCode && _MasterProfitCenter.Mpc_edit_price && Convert.ToDecimal(txtDisRate.Text.Trim()) > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow discount for com codes!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDisRate.Clear();
                        txtDisRate.Text = FormatToQty("0");
                        return;
                    }
                }
                else
                {
                    if (Convert.ToDecimal(txtQty.Text) != 1)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher allow for only one(1) item!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDisRate.Clear();
                        txtDisRate.Text = FormatToQty("0");
                        return;
                    }
                }
                CheckNewDiscountRate();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private bool CheckNewDiscountAmount()
        {
            if (string.IsNullOrEmpty(txtItem.Text)) return false;
            if (IsNumeric(txtQty.Text) == false)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return false;
            }
            if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return false;
            if (!string.IsNullOrEmpty(txtDisAmt.Text) && _isEditPrice == false && !string.IsNullOrEmpty(txtQty.Text))
            {
                decimal _disAmt = Convert.ToDecimal(txtDisAmt.Text);
                decimal _uRate = Convert.ToDecimal(txtUnitPrice.Text);
                decimal _qty = Convert.ToDecimal(txtQty.Text);
                decimal _totAmt = _uRate * _qty;
                decimal _percent = _totAmt != 0 ? (_disAmt / _totAmt) * 100 : 0;

                if (_disAmt > 0)
                {
                    if (GeneralDiscount != null)
                    {
                        decimal vals = GeneralDiscount.Sgdd_disc_val;
                        decimal rates = GeneralDiscount.Sgdd_disc_rt;

                        if (!string.IsNullOrEmpty(lblPromoVouNo.Text))
                        {
                            if (lblPVTp.Text == "VALUE")
                            {
                                if (_disAmt > Convert.ToDecimal(lblPVBal.Text))
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discount amount exceed the allowed discount amount ", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisAmt.Text = FormatToCurrency("0");
                                    txtDisRate.Text = FormatToCurrency("0");
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }
                        }
                        if (vals < _disAmt && rates == 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You can not discount price more than " + vals + ".", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtDisAmt.Text = FormatToCurrency("0");
                            txtDisRate.Text = FormatToCurrency("0");
                            _isEditDiscount = false;
                            return false;
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = "0";
                            CalculateItem();
                            if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) _percent = _totAmt != 0 ? (_disAmt / Convert.ToDecimal(txtLineTotAmt.Text)) * 100 : 0;
                            if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = FormatToCurrency(Convert.ToString(_percent));
                            CalculateItem();
                            CheckNewDiscountRate();
                            _isEditDiscount = true;
                        }
                    }
                    else
                    {
                        if (GeneralDiscount == null) GeneralDiscount = new CashGeneralEntiryDiscountDef();
                        bool _IsPromoVou = false;
                        if (string.IsNullOrEmpty(lblPromoVouNo.Text))
                        {
                            GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(txtDate.Text.Trim()).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtCustomer.Text.Trim(), txtItem.Text.Trim(), _priceBookLevelRef.Sapl_is_serialized ? true : false, false);
                        }
                        else
                        {
                            GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text.Trim(), Convert.ToDateTime(txtDate.Text.Trim()).Date, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), txtItem.Text.Trim(), lblPromoVouNo.Text.Trim(), gvp_gv_cd);
                            if (GeneralDiscount != null)
                            {
                                _IsPromoVou = true;
                                GeneralDiscount.Sgdd_seq = Convert.ToInt32(lblPromoVouNo.Text);
                            }
                        }

                        if (GeneralDiscount != null)
                        {
                            decimal vals = GeneralDiscount.Sgdd_disc_val;
                            decimal rates = GeneralDiscount.Sgdd_disc_rt;

                            if (_IsPromoVou == true)
                            {
                                if (lblPVTp.Text == "VALUE")   //kapila 2/11/2016
                                {
                                    if (_disAmt > Convert.ToDecimal(lblPVBal.Text))
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discount amount exceed the allowed discount amount ", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                        txtDisAmt.Text = FormatToCurrency("0");
                                        txtDisRate.Text = FormatToCurrency("0");
                                        _isEditDiscount = false;
                                        return false;
                                    }
                                }
                                if (vals < _disAmt && rates == 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discount amount should be " + vals + "!./nNot allowed discount amount " + _disAmt + " discounted price is " + txtLineTotAmt.Text, "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtDisAmt.Text = FormatToCurrency("0");
                                    txtDisRate.Text = FormatToCurrency("0");
                                    _isEditDiscount = false;
                                    return false;
                                }
                            }

                            if (vals < _disAmt && rates == 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You can not discount price more than " + vals + ".", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                txtDisAmt.Text = FormatToCurrency("0");
                                txtDisRate.Text = FormatToCurrency("0");
                                _isEditDiscount = false;
                                return false;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = "0";
                                CalculateItem();
                                if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) _percent = _totAmt != 0 ? (_disAmt / _totAmt) * 100 : 0;
                                if (!string.IsNullOrEmpty(txtDisRate.Text) && Convert.ToDecimal(txtDisRate.Text) == 0) txtDisRate.Text = FormatToCurrency(Convert.ToString(_percent));
                                CalculateItem();
                                CheckNewDiscountRate();
                                _isEditDiscount = true;
                            }
                        }
                        else
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow for discount", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtDisAmt.Text = FormatToCurrency("0");
                            txtDisRate.Text = FormatToCurrency("0");
                            _isEditDiscount = false;
                            return false;
                        }
                    }
                }
                else
                    _isEditDiscount = false;
            }
            else if (_isEditPrice)
            {
                decimal _discRate = 0;
                decimal.TryParse(txtDisAmt.Text.Trim(), out _discRate);
                if (_discRate > 0)
                {
                    txtDisAmt.Text = FormatToCurrency("0");
                    txtDisRate.Text = FormatToCurrency("0");
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You are not allowed to apply discount when the price has edited", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return false;
                } 
            }

            if (string.IsNullOrEmpty(txtDisAmt.Text)) txtDisAmt.Text = FormatToCurrency("0");
            decimal val = Convert.ToDecimal(txtDisAmt.Text);
            txtDisAmt.Text = FormatToCurrency(Convert.ToString(val));
            CalculateItem();
            return true;
        }

        protected void CheckDiscountAmount(object sender, EventArgs e)
        {
            if (chkPickGV.Checked) return;
            if (_IsVirtualItem)
            {
                txtDisRate.Clear();
                txtDisAmt.Clear();
                txtDisAmt.Text = FormatToCurrency("0");
                txtDisRate.Text = FormatToCurrency("0");
                return;
            }
            try
            {
                if (string.IsNullOrEmpty(txtDisAmt.Text)) return;
                this.Cursor = Cursors.WaitCursor;
                if (Convert.ToDecimal(txtDisAmt.Text) < 0)
                {
                    //MessageBox.Show("Discount amount should be positive value.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //txtDisAmt.Clear();
                    //txtDisAmt.Text = FormatToQty("0");
                    //return;
                }
                CheckNewDiscountAmount();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        protected void CheckVAT(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtItem.Text)) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (IsNumeric(txtQty.Text) == false)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return;

                if (string.IsNullOrEmpty(txtTaxAmt.Text)) txtTaxAmt.Text = FormatToCurrency("0");
                decimal val = Convert.ToDecimal(txtTaxAmt.Text);
                txtTaxAmt.Text = FormatToCurrency(Convert.ToString(val));
                CalculateItem();
            }
            catch (Exception ex)
            { txtTaxAmt.Text = FormatToCurrency("0"); CalculateItem(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        protected void CheckTotalAmt(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtItem.Text)) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (IsNumeric(txtQty.Text) == false)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (Convert.ToDecimal(txtQty.Text.Trim()) == 0) return;

                if (string.IsNullOrEmpty(txtTaxAmt.Text)) txtTaxAmt.Text = FormatToCurrency("0");
                CalculateItem();
                decimal val = Convert.ToDecimal(txtTaxAmt.Text);
                txtTaxAmt.Text = FormatToCurrency(Convert.ToString(val));
            }
            catch (Exception ex)
            { txtTaxAmt.Text = FormatToCurrency("0"); CalculateItem(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void LookingForBuyBack()
        {
            if (_invoiceItemList != null && _invoiceItemList.Count > 0)
            {
                var _bb = _invoiceItemList.Where(x => x.Sad_merge_itm == "3").ToList();
                if (_bb != null && _bb.Count > 0) { if (gvBuyBack.Rows.Count <= 0)  btnBuyBack.BackColor = Color.Red; else btnBuyBack.BackColor = Color.White; }
                else btnBuyBack.BackColor = Color.White;
            }
            else btnBuyBack.BackColor = Color.White;
        }

        private InvoiceItem AssignDataToObject(bool _isPromotion, MasterItem _item, string _originalItem)
        {
            InvoiceItem _tempItem = new InvoiceItem();
            //add by a akila 2017/08/23 - if reservation available, validate the reservation qty

            if ((_invoiceItemList != null) && (_invoiceItemList.Count > 0))
            {
                var _currentReservation = _invoiceItemList.Where(x => x.Sad_itm_cd == _item.Mi_cd).Select(x => new { x.Sad_res_no, x.Sad_qty }).ToList();
                if (_currentReservation != null && _currentReservation.Count > 0)
                {
                    List<INR_RES_DET> _reservationDetList = new List<INR_RES_DET>();
                    _reservationDetList = CHNLSVC.Sales.GET_RESERVATION_DET(0, _currentReservation.First().Sad_res_no);
                    if (_reservationDetList != null && _reservationDetList.Count > 0)
                    {
                        decimal _balanceQty = _reservationDetList.Sum(x => x.IRD_RES_BQTY);
                        //decimal _resQty = _reservationDetList.Where(x => x.IRD_ITM_CD == _item.Mi_cd).Select(x => x.IRD_RES_QTY - (x.IRD_RES_CQTY + x.Ird_so_mrn_bqty)).First();
                        if ((_currentReservation.First().Sad_qty + decimal.Parse(txtQty.Text)) > _balanceQty)
                        {
                            MessageBox.Show("Selected item quantity has exceeded the reservation quantity!", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return _tempItem;
                        }
                        List<INR_RES_LOG> _reservvationLogDet = new List<INR_RES_LOG>();
                        INR_RES_LOG _log = new INR_RES_LOG();
                        _log.IRL_RES_NO = txtReservation.Text;
                        _log.IRL_CURT_COM = BaseCls.GlbUserComCode;
                        _log.IRL_CURT_LOC = BaseCls.GlbUserDefLoca;
                        _log.IRL_CURT_DOC_TP = "INV";
                        _log.IRL_ITM_CD = _item.Mi_cd;
                        _log.IRL_ACT = 1;

                        _reservvationLogDet = CHNLSVC.Inventory.GET_INR_RES_LOG_DATA_NEW(_log);
                        if ((_reservvationLogDet != null) && (_reservvationLogDet.Count > 0))
                        {
                            _balanceQty = _reservvationLogDet.Sum(x => x.IRL_RES_BQTY);
                            if (_invoiceItemList.Where(x => x.Sad_itm_line == _selectedItemLine).First().Sad_qty > _balanceQty)
                            {
                                MessageBox.Show("Selected item quantity has exceeded the reservation quantity!", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return _tempItem;
                            }
                        }
                    }                    
                }
            }
            
            IsVirtual(_item.Mi_itm_tp);
            _tempItem.Sad_alt_itm_cd = "";
            _tempItem.Sad_alt_itm_desc = "";
            _tempItem.Sad_comm_amt = 0;
            _tempItem.Sad_disc_amt = Convert.ToDecimal(txtDisAmt.Text);
            _tempItem.Sad_disc_rt = Convert.ToDecimal(txtDisRate.Text);
            //kapila 28/6/2016
            if (txtItem.Text == "DLG-EZCASH" || txtItem.Text == "RELOADDLG")
                _tempItem.Sad_do_qty = Convert.ToDecimal(txtQty.Text);
            else
            {
                if (_item.Mi_is_ser1 == -1)
                    //updated by akila 2018/01/24
                    if  (chkDeliverLater.Checked == false || chkDeliverNow.Checked) //(chkDeliverNow.Checked == true)     //kapila 27/1/2017
                        _tempItem.Sad_do_qty = Convert.ToDecimal(txtQty.Text);
                    else
                        _tempItem.Sad_do_qty = (IsGiftVoucher(_item.Mi_itm_tp) || _IsVirtualItem) ? Convert.ToDecimal(txtQty.Text) : 0;
                else
                    _tempItem.Sad_do_qty = (IsGiftVoucher(_item.Mi_itm_tp) || _IsVirtualItem) ? Convert.ToDecimal(txtQty.Text) : 0;
            }
            _tempItem.Sad_inv_no = "";
            _tempItem.Sad_is_promo = _isPromotion;
            _tempItem.Sad_itm_cd = txtItem.Text;
            _tempItem.Sad_itm_line = _lineNo;
            _tempItem.Sad_itm_seq = Convert.ToInt32(SSPriceBookItemSequance);
            _tempItem.Sad_itm_stus = cmbStatus.Text;
            _tempItem.Sad_itm_tax_amt = Convert.ToDecimal(txtTaxAmt.Text);
            _tempItem.Sad_itm_tp = _item.Mi_itm_tp;
            _tempItem.Sad_job_no = "";
            _tempItem.Sad_res_line_no = 0;
            _tempItem.Sad_res_no = "";
            if (_proVouInvcItem == txtItem.Text.ToString())
            {
                if (string.IsNullOrEmpty(lblPromoVouUsedFlag.Text))
                {
                    lblPromoVouUsedFlag.Text = "U";
                    _proVouInvcLine = _lineNo;
                    _tempItem.Sad_res_line_no = Convert.ToInt32(lblPromoVouNo.Text.ToString());
                    _tempItem.Sad_res_no = "PROMO_VOU";
                }
                //kapila 3/11/2016
                if (!string.IsNullOrEmpty(lblPVBal.Text))
                    if (Convert.ToDecimal(lblPVBal.Text) != 0)
                        lblPromoVouUsedFlag.Text = "";
            }
            //kapila 3/11/2016
            if (!string.IsNullOrEmpty(lblPromoVouNo.Text))
            {
                _tempItem.Sad_res_line_no = Convert.ToInt32(lblPromoVouNo.Text.ToString());
                _tempItem.Sad_res_no = "PROMO_VOU";
            }
            _tempItem.Sad_merge_itm = "";
            _tempItem.Sad_pb_lvl = cmbLevel.Text;
            _tempItem.Sad_pb_price = Convert.ToDecimal(SSPriceBookPrice);
            _tempItem.Sad_pbook = cmbBook.Text;
            _tempItem.Sad_print_stus = false;
            _tempItem.Sad_promo_cd = SSPromotionCode;
            _tempItem.Sad_qty = Convert.ToDecimal(txtQty.Text);
            _tempItem.Sad_seq = Convert.ToInt32(SSPriceBookSequance);
            _tempItem.Sad_seq_no = 0;
            _tempItem.Sad_srn_qty = 0;
            _tempItem.Sad_tot_amt = Convert.ToDecimal(txtLineTotAmt.Text);
            _tempItem.Sad_unit_amt = Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text);
            _tempItem.Sad_unit_rt = Convert.ToDecimal(txtUnitPrice.Text);
            _tempItem.Sad_uom = "";
            _tempItem.Sad_warr_based = false;
            _tempItem.Mi_longdesc = _item.Mi_longdesc;
            _tempItem.Mi_itm_tp = _item.Mi_itm_tp;
            _tempItem.Mi_brand = _item.Mi_brand;
            _tempItem.Mi_cate_1 = _item.Mi_cate_1;
            _tempItem.Mi_cate_2 = _item.Mi_cate_2;
            _tempItem.Sad_job_line = Convert.ToInt32(SSCombineLine);
            _tempItem.Sad_warr_period = WarrantyPeriod;
            _tempItem.Sad_warr_remarks = WarrantyRemarks;
            _tempItem.Sad_sim_itm_cd = _originalItem;
            _tempItem.Sad_merge_itm = _item.Mi_itm_tp != "M" ? "0" : Convert.ToString(SSPRomotionType);
            //kapila 29/12/2016
            _tempItem.Sad_conf_no = _promoType;
            if (!string.IsNullOrEmpty(txtDisRate.Text.Trim()) && IsNumeric(txtDisRate.Text.Trim())) if (Convert.ToDecimal(txtDisRate.Text.Trim()) > 0 && GeneralDiscount != null) { _tempItem.Sad_dis_type = "M"; _tempItem.Sad_dis_seq = GeneralDiscount.Sgdd_seq; _tempItem.Sad_dis_line = 0; }
            return _tempItem;
        }

        private void ClearAfterAddItem()
        {
            txtItem.Text = "";
            cmbStatus.Text = DefaultItemStatus;
            txtQty.Text = FormatToQty("1");
            LoadItemDetail(string.Empty);
            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
            txtItem.ReadOnly = false;
        }

        private bool _isCombineAdding = false;
        private int _combineCounter = 0;
        private string _paymodedef = string.Empty;
        private bool _isCheckedPriceCombine = false;
        private bool _isFirstPriceComItem = false;
        private string _serial2 = string.Empty;
        private string _prefix = string.Empty;

        private bool CheckItemWarranty(string _item, string _status)
        {
            bool _isNoWarranty = false;
            List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
            if (_lvl != null)
                if (_lvl.Count > 0)
                {
                    var _lst = (from _l in _lvl where _l.Sapl_itm_stuts == _status.Trim() select _l).ToList();
                    if (_lst != null)
                        if (_lst.Count > 0)
                        {
                            DataTable _temWarr = CHNLSVC.Sales.GetPCWara(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item.Trim(), _status.Trim(), Convert.ToDateTime(txtDate.Text).Date);

                            if (_lst[0].Sapl_set_warr == true)
                            {
                                WarrantyPeriod = _lst[0].Sapl_warr_period;

                            }
                            else if (_temWarr != null && _temWarr.Rows.Count > 0)
                            {
                                WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
                            }
                            else
                            {
                                MasterItemWarrantyPeriod _period = CHNLSVC.Inventory.GetItemWarrantyDetail(_item.Trim(), _status.Trim()); if (_period != null) { WarrantyPeriod = _period.Mwp_val; WarrantyRemarks = _period.Mwp_rmk; }
                                else { _isNoWarranty = true; }
                            }
                        }
                }
            return _isNoWarranty;
        }

        private bool CheckItemWarrantyNew(string _item, string _status, Int32 _pbSeq, Int32 _itmSeq, string _pb, string _pbLvl, Boolean _isPbWara, decimal _unitPrice, Int32 _pbWarrPd)
        {
            bool _isNoWarranty = false;
            MasterItemWarrantyPeriod _period = new MasterItemWarrantyPeriod();
            LogMasterItemWarranty _periodLog = new LogMasterItemWarranty();
            //List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
            //if (_lvl != null)
            //    if (_lvl.Count > 0)
            //    {
            //        var _lst = (from _l in _lvl where _l.Sapl_itm_stuts == _status.Trim() select _l).ToList();
            //        if (_lst != null)
            //if (_lst.Count > 0)
            //{
            DataTable _temWarr = CHNLSVC.Sales.GetPCWara(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item.Trim(), _status.Trim(), Convert.ToDateTime(txtDate.Text).Date);

            if (_isPbWara == true && _unitPrice > 0)
            {
                WarrantyPeriod = _pbWarrPd;
                PriceDetailRef _lsts = CHNLSVC.Sales.GetPriceDetailByItemLineSeq(_item, _itmSeq, _pbSeq);
                if (_lsts != null)
                {
                    WarrantyRemarks = _lsts.Sapd_warr_remarks;
                }

            }
            else if (_temWarr != null && _temWarr.Rows.Count > 0)
            {
                WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
            }
            else if (txtDate.Value.Date != _serverDt)
            {
                _period = new MasterItemWarrantyPeriod();
                _period = CHNLSVC.Sales.GetItemWarrEffDt(_item, _status, 1, txtDate.Value.Date);
                if (_period.Mwp_itm_cd != null)
                {
                    WarrantyPeriod = _period.Mwp_val;
                    WarrantyRemarks = _period.Mwp_rmk;
                }
                else
                {
                    _periodLog = new LogMasterItemWarranty();
                    _periodLog = CHNLSVC.Sales.GetItemWarrEffDtLog(_item.Trim(), _status.Trim(), 1, txtDate.Value.Date); if (_periodLog.Lmwp_itm_cd != null) { WarrantyPeriod = _periodLog.Lmwp_val; WarrantyRemarks = _periodLog.Lmwp_rmk; }
                    else { _isNoWarranty = true; }
                }
            }
            else
            {
                _period = new MasterItemWarrantyPeriod();
                _period = CHNLSVC.Inventory.GetItemWarrantyDetail(_item.Trim(), _status.Trim()); if (_period.Mwp_itm_cd != null) { WarrantyPeriod = _period.Mwp_val; WarrantyRemarks = _period.Mwp_rmk; }
                else { _isNoWarranty = true; }
            }
            //}
            //}
            return _isNoWarranty;
        }

        protected void BindAddItem()
        {
            gvInvoiceItem.DataSource = new List<InvoiceItem>();
            gvInvoiceItem.DataSource = _invoiceItemList;

            if (_invoiceItemList == null) AddItemDisableCustomer(false);
            if (_invoiceItemList.Count <= 0) AddItemDisableCustomer(false);
        }

        private bool _isBlocked = false;

        private bool CheckBlockItem(string _item, int _pricetype, bool _isCombineItemAddingNow)
        {
            if (_isCombineItemAddingNow) return false;
            _isBlocked = false;
            if (_priceBookLevelRef.Sapl_is_serialized == false) //As per the anuradha's request commented on 15/nov/2017. uncomment on 22-nov-17 
            {
              
                MasterItemBlock _block = CHNLSVC.Inventory.GetBlockedItemByPriceType(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item, _pricetype);
                if (_block == null)
                {
                    _block = CHNLSVC.Inventory.GetBlockedItmByCatTp(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, _item, _pricetype, "S");
                    if (_block == null)
                    {
                        _block = CHNLSVC.Inventory.GetBlockedItmByCatTp(BaseCls.GlbUserComCode, BaseCls.GlbDefChannel, _item, _pricetype, "C");

                    }
                }

                if (_block != null)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item already blocked by the Costing Dept.", "Blocked Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    _isBlocked = true;
                }
            }
            //add by tharanga 2017/12/07
            if (_priceBookLevelRef.Sapl_is_serialized == true) //As per the anuradha's request commented on 15/nov/2017. uncomment on 22-nov-17 
            {

                MasterItemBlock _block = CHNLSVC.Inventory.GetBlockedItemByPriceType(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _item, 6);
                if (_block == null)
                {
                    _block = CHNLSVC.Inventory.GetBlockedItmByCatTp(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, 6, "L");
                    if (_block == null)
                    {
                        _block = CHNLSVC.Inventory.GetBlockedItmByCatTp(BaseCls.GlbUserComCode, BaseCls.GlbDefChannel, _item, 6, "C");
                        if (_block == null)
                        {
                            _block = CHNLSVC.Inventory.GetBlockedItmByCatTp(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, _item, 6, "S");
                        }
                    }
                }

                if (_block != null)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item already blocked by the Costing Dept.", "Blocked Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    _isBlocked = true;
                }
            }
            #region item block check
            if (_isBlocked ==false)
            {
                MasterItemBlock _blockbrand = CHNLSVC.Inventory.GetBlockedItmBrand(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _itemdetail.Mi_brand, _pricetype, "P", _itemdetail.Mi_cate_1, _itemdetail.Mi_cate_2);
                if (_blockbrand == null)
                {
                    _blockbrand = CHNLSVC.Inventory.GetBlockedItmBrand(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itemdetail.Mi_brand, _pricetype, "L", _itemdetail.Mi_cate_1, _itemdetail.Mi_cate_2);
                    if (_blockbrand == null)
                    {
                        _blockbrand = CHNLSVC.Inventory.GetBlockedItmBrand(BaseCls.GlbUserComCode, BaseCls.GlbDefChannel, _itemdetail.Mi_brand, _pricetype, "C", _itemdetail.Mi_cate_1, _itemdetail.Mi_cate_2);
                        if (_blockbrand == null)
                        {
                            _blockbrand = CHNLSVC.Inventory.GetBlockedItmBrand(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, _itemdetail.Mi_brand, _pricetype, "S", _itemdetail.Mi_cate_1, _itemdetail.Mi_cate_2);
                        }
                    }
                }

                if (_blockbrand != null)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(_item + " item already blocked by the Costing Dept.", "Blocked Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    _isBlocked = true;
                }  
            }
           

            #endregion
                return _isBlocked;
        }

        private void AddItem(bool _isPromotion, string _originalItem)
        {
            try
            {
                //updated by akila 2018/01/26
                int _priceType = 0;
                int.TryParse(_promoType, out _priceType);
                if (_priceType != 0 && _priceType != 4)
                {
                    ucPayModes1.ISPromotion = true;
                }
                else
                {
                    ucPayModes1.ISPromotion = false;
                }

                //if (!string.IsNullOrEmpty(SSPromotionCode) && SSPromotionCode != "N/A")
                //    ucPayModes1.ISPromotion = true;

                this.Cursor = Cursors.WaitCursor;
                ReptPickSerials _serLst = null;
                List<ReptPickSerials> _nonserLst = null;
                MasterItem _itm = null;

                _priceBookLevelRefList = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, cmbBook.Text.Trim(), cmbLevel.Text.Trim());

                #region Gift Voucher Check

                if ((chkPickGV.Checked || IsGiftVoucher(_itemdetail.Mi_itm_tp)) && _isCombineAdding == false)
                {
                    if (gvInvoiceItem.Rows.Count <= 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the selling item before add gift voucher.", "Need Selling Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    if (gvInvoiceItem.Rows.Count > 0)
                    {
                        var _noOfSets = _invoiceItemList.Select(x => x.Sad_job_line).Distinct().ToList();

                        var _giftCount = _invoiceItemList.Where(x => IsGiftVoucher(x.Sad_itm_tp)).Sum(x => x.Sad_qty);
                        var _nonGiftCount = _invoiceItemList.Sum(x => x.Sad_qty) - _giftCount;
                        if (_nonGiftCount < _giftCount + 1)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You can not add more gift vouchers than selling qty", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }
                    }

                    DataTable _giftVoucher = CHNLSVC.Inventory.GetDetailByPageNItem(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToInt32(txtSerialNo.Text.Trim()), txtItem.Text.Trim());
                    if (_giftVoucher != null)
                        if (_giftVoucher.Rows.Count > 0)
                        {
                            _serial2 = Convert.ToString(_giftVoucher.Rows[0].Field<Int64>("gvp_book"));
                            _prefix = Convert.ToString(_giftVoucher.Rows[0].Field<string>("gvp_gv_prefix"));
                        }
                }

                #endregion Gift Voucher Check

                #region Check for Payment

                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("You have already payment added!", "Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }

                #endregion Check for Payment

                #region Priority Base Validation

                if (_masterBusinessCompany == null) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer code", "No Customer", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                //if (_masterBusinessCompany.Mbe_cd != null && _masterBusinessCompany.Mbe_sub_tp == "C")                //    if ((Convert.ToDecimal(lblAvailableCredit.Text) - Convert.ToDecimal(txtLineTotAmt.Text) - Convert.ToDecimal(lblGrndTotalAmount.Text) < 0) && txtCustomer.Text != "CASH")                //    {                //        this.Cursor = Cursors.Default;                //        using (new CenterWinDialog(this)) { MessageBox.Show("Please check the customer's account balance", "Account Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }                //        return;                //    }
                if (string.IsNullOrEmpty(cmbBook.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price book", "Price Book", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbBook.Focus(); return; }
                if (string.IsNullOrEmpty(cmbLevel.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbLevel.Focus(); return; }
                if (string.IsNullOrEmpty(cmbStatus.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item status", "Item Status", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbStatus.Focus(); return; }
                if (string.IsNullOrEmpty(cmbInvType.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbInvType.Focus(); return; }

                if (string.IsNullOrEmpty(txtCustomer.Text) && IsNewCustomer == false) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCustomer.Focus(); return; }
                //if (string.IsNullOrEmpty(txtCustomer.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCustomer.Focus(); return; }

                if (string.IsNullOrEmpty(txtItem.Text)) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) { if (string.IsNullOrEmpty(txtSerialNo.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial", "Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtSerialNo.Focus(); return; } else { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Focus(); return; } } else { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item", "Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtItem.Focus(); return; } }
                if (string.IsNullOrEmpty(txtQty.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtQty.Focus(); return; }
                else if (IsNumeric(txtQty.Text) == false) { MessageBox.Show("Please select valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                else if (Convert.ToDecimal(txtQty.Text.Trim()) <= 0) { MessageBox.Show("Please select the valid qty amount.", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                if (string.IsNullOrEmpty(txtUnitPrice.Text)) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the unit price", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtUnitPrice.Focus(); return; }
                if (string.IsNullOrEmpty(txtDisRate.Text))
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the discount %", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtDisRate.Focus(); return; }
                if (string.IsNullOrEmpty(txtDisAmt.Text))
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the discount amount", "Discount Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtDisAmt.Focus(); return; }
                if (string.IsNullOrEmpty(txtTaxAmt.Text))
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the VAT amount", "Tax Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtTaxAmt.Focus(); return; }
                #endregion Priority Base Validation

                #region Virtual Item

                //kapila 3/1/2017
                if (SSPRomotionType == 0 || SSPRomotionType == 4)
                {
                    PriceDetailRestriction _restriction = CHNLSVC.Sales.GetPromotionRestriction(BaseCls.GlbUserComCode, SSPromotionCode);

                    if (_restriction != null)
                    {
                        //show message
                        if (!string.IsNullOrEmpty(_restriction.Spr_msg))
                        {
                            MessageBox.Show(_restriction.Spr_msg, "Promotion Message", MessageBoxButtons.OK);

                            bool nic = false;
                            bool mob = false;
                            bool cus = false;

                            if (_restriction.Spr_need_cus && (string.IsNullOrEmpty(txtCustomer.Text) || txtCustomer.Text.ToUpper() == "CASH"))
                            {
                                cus = true;
                            }
                            if (_restriction.Spr_need_mob && string.IsNullOrEmpty(txtMobile.Text))
                            {
                                mob = true;
                            }
                            if (_restriction.Spr_need_nic && string.IsNullOrEmpty(txtNIC.Text))
                            {
                                nic = true;
                            }

                            string _message = "";
                            if (cus)
                            {
                                _message = _message + "This promotion need Customer code, Please enter customer code\n";
                            }
                            if (nic)
                            {
                                _message = _message + "This promotion need ID Number, Please enter ID Number\n";
                            }
                            if (mob)
                            {
                                _message = _message + "This promotion need Mobile Number, Please enter  Mobile Number\n";
                            }
                            if (cus || nic || mob)
                            {
                                MessageBox.Show(_message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                        }
                    }
                }
                if (_IsVirtualItem && _isCompleteCode == false)
                {
                    bool _isDuplicateItem0 = false;
                    Int32 _duplicateComLine0 = 0;
                    Int32 _duplicateItmLine0 = 0;
                    WarrantyPeriod = 0;
                    CalculateItem();

                    #region Adding Invoice Item

                    //Adding Items to grid goes here ----------------------------------------------------------------------
                    if (_invoiceItemList == null || _invoiceItemList.Count <= 0)
                    //No Records
                    {
                        _isDuplicateItem0 = false;
                        _lineNo += 1;
                        if (!_isCombineAdding) SSCombineLine += 1;//_lineNo;
                        _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itemdetail, _originalItem));
                    }
                    else
                    //Having some records
                    {
                        var _duplicateItem = from _list in _invoiceItemList
                                             where _list.Sad_itm_cd == txtItem.Text && _list.Sad_itm_stus == cmbStatus.Text && _list.Sad_pbook == cmbBook.Text && _list.Sad_pb_lvl == cmbLevel.Text && _list.Sad_unit_rt == Convert.ToDecimal(txtUnitPrice.Text) && _list.Sad_disc_rt == Convert.ToDecimal(txtDisRate.Text.Trim())
                                             select _list;

                        if (_duplicateItem.Count() > 0)
                        //Similar item available
                        {
                            _isDuplicateItem0 = true;
                            foreach (var _similerList in _duplicateItem)
                            {
                                _duplicateComLine0 = _similerList.Sad_job_line;
                                _duplicateItmLine0 = _similerList.Sad_itm_line;
                                _similerList.Sad_disc_amt = Convert.ToDecimal(_similerList.Sad_disc_amt) + Convert.ToDecimal(txtDisAmt.Text);
                                _similerList.Sad_itm_tax_amt = Convert.ToDecimal(_similerList.Sad_itm_tax_amt) + Convert.ToDecimal(txtTaxAmt.Text);
                                _similerList.Sad_qty = Convert.ToDecimal(_similerList.Sad_qty) + Convert.ToDecimal(txtQty.Text);
                                _similerList.Sad_tot_amt = Convert.ToDecimal(_similerList.Sad_tot_amt) + Convert.ToDecimal(txtLineTotAmt.Text);
                            }
                        }
                        else
                        //No similar item found
                        {
                            _isDuplicateItem0 = false;
                            _lineNo += 1;
                            if (!_isCombineAdding) SSCombineLine += 1;//_lineNo;
                            _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itemdetail, _originalItem));
                        }
                    }
                    //Adding Items to grid end here ----------------------------------------------------------------------

                    #endregion Adding Invoice Item

                    CalculateGrandTotal(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text), Convert.ToDecimal(txtTaxAmt.Text), true);
                    _itemdetail = new MasterItem();
                    txtSerialNo.Text = "";
                    ClearAfterAddItem();
                    SSPriceBookSequance = "0";
                    SSPriceBookItemSequance = "0";
                    SSPriceBookPrice = 0;
                    if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                    SSPRomotionType = 0;
                    txtItem.Focus();
                    BindAddItem();
                    SetDecimalTextBoxForZero(true);
                    decimal _tobepays0 = 0;
                    if (lblSVatStatus.Text == "Available")
                        _tobepays0 = FigureRoundUp(Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()), true);
                    else
                        _tobepays0 = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                    ucPayModes1.TotalAmount = _tobepays0;
                    ucPayModes1.InvoiceItemList = _invoiceItemList;
                    ucPayModes1.SerialList = InvoiceSerialList;
                    ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays0));
                    if (_loyaltyType != null)
                    {
                        ucPayModes1.LoyaltyCard = _loyaltyType.Salt_loty_tp;
                    }
                    if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                        ucPayModes1.LoadData();
                    LookingForBuyBack();
                    this.Cursor = Cursors.Default;
                    if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } }
                    return;
                }

                _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());

                //if (!chkDeliverLater.Checked && !chkDeliverNow.Checked)
                //{
                //    List<ReptPickSerials> _temp = CHNLSVC.Inventory.Search_by_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, txtSerialNo.Text.Trim(), string.Empty);
                //    if (!string.IsNullOrEmpty(Convert.ToString(cmbLevel.Text)) && !string.IsNullOrEmpty(Convert.ToString(cmbBook.Text)))
                //    {
                //        bool _isAgeLevel = false;
                //        int _noofday = 0;
                //        CheckNValidateAgeItem(_itm.Mi_cd, string.Empty, cmbBook.Text, cmbLevel.Text, cmbStatus.Text, out _isAgeLevel, out _noofday);
                //        if (_isAgeLevel)
                //            _temp = GetAgeItemList(Convert.ToDateTime(txtDate.Value.Date).Date, _isAgeLevel, _noofday, _temp);
                //        if (_temp == null || _temp.Count <= 0)
                //        {
                //            this.Cursor = Cursors.Default;
                //            using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //            txtSerialNo.Clear();
                //            txtItem.Clear();
                //            txtSerialNo.Focus();
                //            return;
                //        }
                //    }
                //}
                // CheckSerialAvailability(null, null);
                if (string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    if (!string.IsNullOrEmpty(txtItem.Text.Trim()))
                    {
                        //Edt0001
                        if (_itm.Mi_is_ser1 == 1 && (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false && _priceBookLevelRef.Sapl_is_serialized))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            txtSerialNo.Focus();
                            return;
                        }
                    }
                }

                #region sachith check item balance

                if (chkDeliverNow.Checked && _itm.Mi_itm_tp == "M")
                {
                    List<ReptPickSerials> serial_list = new List<ReptPickSerials>();
                    if (_itm.Mi_is_ser1 == 0)
                        serial_list = CHNLSVC.Inventory.Search_serials_for_itemCD(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, string.Empty).ToList();//.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();
                    else if (_itm.Mi_is_ser1 == 1) //serial
                        serial_list = CHNLSVC.Inventory.Search_serials_for_itemCD(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, string.Empty).ToList();//.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();
                    else if (_itm.Mi_is_ser1 == -1)
                        serial_list = CHNLSVC.Inventory.Search_serials_for_itemCD(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Mi_cd, string.Empty, string.Empty).ToList();//.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();

                    if (IsPriceLevelAllowDoAnyStatus)
                    {
                        serial_list = serial_list.Where(x => x.Tus_itm_stus == cmbStatus.SelectedValue.ToString()).ToList();
                    }

                    if (Convert.ToDecimal(txtQty.Text) > serial_list.Count)
                    {
                        if (MessageBox.Show("Inventory has only " + serial_list.Count + " items\n Do you want to proceed?", "Serial Qty", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.No)
                            return;
                        else
                        {
                        }
                    }
                }

                #endregion sachith check item balance

                #endregion Virtual Item

                //kapila 28/6/2017
                if (_priceBookLevelRef.Sapl_is_serialized == true && string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Invalid serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtSerialNo.Focus();
                    return;
                }
                //kapila 28/6/2017 block by adding same serial
                if (!string.IsNullOrEmpty(txtSerialNo.Text))
                {
                    var r = ScanSerialList.Where(X => X.Tus_ser_1 == txtSerialNo.Text).ToList();
                    if (r.Count > 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show(txtSerialNo.Text + " is already added", "Price Level Restriction", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtSerialNo.Focus();
                        return;
                    }
                }

                #region Price Combine Checking Process - Costing Dept.

                if (_isCheckedPriceCombine == false)
                    if (_MainPriceCombinItem != null)
                        if (_MainPriceCombinItem.Count > 0)
                        {
                            string _serialiNotpick = string.Empty;
                            string _serialDuplicate = string.Empty;
                            string _taxNotdefine = string.Empty;
                            string _noInventoryBalance = string.Empty;
                            string _noWarrantySetup = string.Empty;
                            string _mItem = txtItem.Text.Trim();
                            if (CheckBlockItem(_mItem, SSPRomotionType, _isCombineAdding)) { _isCheckedPriceCombine = false; return; }
                            var _dupsMain = ScanSerialList.Where(x => x.Tus_itm_cd == _mItem && x.Tus_ser_1 == ScanSerialNo);
                            if (_dupsMain != null) if (_dupsMain.Count() > 0) { this.Cursor = Cursors.Default; _isCheckedPriceCombine = false; using (new CenterWinDialog(this)) { MessageBox.Show(_mItem + " serial " + ScanSerialNo + " is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                            foreach (PriceCombinedItemRef _ref in _MainPriceCombinItem)
                            {
                                string _item = _ref.Sapc_itm_cd;
                                string _originalItm = _ref.Sapc_itm_cd;
                                decimal _qty = _ref.Sapc_qty;
                                string _status = _ref.Status;
                                string _similerItem = Convert.ToString(_ref.Similer_item);
                                if (!string.IsNullOrEmpty(_similerItem)) _item = _similerItem;
                                if (CheckBlockItem(_item, SSPRomotionType, _isCombineAdding)) { _isCheckedPriceCombine = false; break; }
                                
                                //List<MasterItemTax> _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, string.Empty);
                                //updated by akila 2017/08/16
                                List<MasterItemTax> _taxs = new List<MasterItemTax>();
                                if (_isStrucBaseTax == true)
                                {
                                    MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                                    _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _status, "VAT", string.Empty, _mstItem.Mi_anal1);
                                }
                                else
                                {
                                    _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, string.Empty);
                                }
                                    

                                if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                                { if (string.IsNullOrEmpty(_taxNotdefine)) _taxNotdefine = _item; else _taxNotdefine += "," + _item; }
                                if (CheckItemWarranty(_item, _status))
                                { if (string.IsNullOrEmpty(_noWarrantySetup)) _noWarrantySetup = _item; else _noWarrantySetup += "," + _item; }
                                MasterItem _itmS = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);

                                if ((chkDeliverLater.Checked == false && chkDeliverNow.Checked == false && _isCheckedPriceCombine == false) || IsGiftVoucher(_itmS.Mi_itm_tp))
                                {
                                    _isCheckedPriceCombine = true;
                                    if (_itmS.Mi_is_ser1 == 1)
                                    {
                                        var _exist = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item);
                                        if (_qty > _exist.Count())
                                        { if (string.IsNullOrEmpty(_serialiNotpick)) _serialiNotpick = _item; else _serialiNotpick += "," + _item; }
                                        foreach (ReptPickSerials _p in _exist)
                                        {
                                            string _serial = _p.Tus_ser_1;
                                            var _dup = ScanSerialList.Where(x => x.Tus_ser_1 == _serial);
                                            if (_dup != null)
                                                if (_dup.Count() > 0)
                                                { if (string.IsNullOrEmpty(_serialDuplicate)) _serialDuplicate = _item + "/" + _serial; else _serialDuplicate = "," + _item + "/" + _serial; }
                                        }
                                    }
                                    if (!IsGiftVoucher(_itmS.Mi_itm_tp))
                                    {
                                        decimal _pickQty = 0;
                                        if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum(); else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == _status).ToList().Select(x => x.Sad_qty).Sum();
                                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                        List<InventoryLocation> _inventoryLocation = null;
                                        if (IsPriceLevelAllowDoAnyStatus) _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty); else _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status);
                                        if (_inventoryLocation != null)
                                            if (_inventoryLocation.Count > 0)
                                            {
                                                decimal _invBal = _inventoryLocation[0].Inl_qty;
                                                if (_pickQty > _invBal)
                                                { if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item; else _noInventoryBalance = "," + _item; }
                                            }
                                            else
                                            { if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item; else _noInventoryBalance = "," + _item; }
                                        else
                                        { if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item; else _noInventoryBalance = "," + _item; }
                                    }
                                }
                            }
                            if (!string.IsNullOrEmpty(_taxNotdefine))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_taxNotdefine + " does not have setup tax definition for the selected status. Please contact Inventory dept.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                            if (!string.IsNullOrEmpty(_serialiNotpick))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Item Qty and picked serial mismatch for the following item(s) " + _serialiNotpick, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                            if (!string.IsNullOrEmpty(_serialDuplicate))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Serial duplicating for the following item(s) " + _serialDuplicate, "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                            if (!string.IsNullOrEmpty(_noInventoryBalance) && !IsGiftVoucher(_itm.Mi_itm_tp))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_noInventoryBalance + " item(s) does not having inventory balance for release.", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                            if (!string.IsNullOrEmpty(_noWarrantySetup))
                            {
                                this.Cursor = Cursors.Default;
                                _isCheckedPriceCombine = false;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_noWarrantySetup + " item(s)'s warranty not define.", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                            _isFirstPriceComItem = true;
                            _isCheckedPriceCombine = true;
                        }
                if (_isCompleteCode && _isInventoryCombineAdded == false) BindItemComponent(txtItem.Text);
                if (_masterItemComponent != null && _masterItemComponent.Count > 0 && _isInventoryCombineAdded == false)
                {
                    string _combineStatus = string.Empty;
                    decimal _discountRate = -1;
                    decimal _combineQty = 0;
                    string _mainItem = string.Empty;
                    _combineCounter = 0;
                    _isInventoryCombineAdded = true; _isCombineAdding = true;
                    if (string.IsNullOrEmpty(_combineStatus)) _combineStatus = cmbStatus.Text;
                    if (_combineQty == 0) _combineQty = Convert.ToDecimal(txtQty.Text);
                    if (_discountRate == -1) _discountRate = Convert.ToDecimal(txtDisRate.Text);
                    List<MasterItemComponent> _comItem = new List<MasterItemComponent>();
                    var _item_ = (from _n in _masterItemComponent where _n.Micp_itm_tp == "M" select _n.ComponentItem.Mi_cd).ToList();
                    if (!string.IsNullOrEmpty(_item_[0]))
                    {
                        string _mItem = Convert.ToString(_item_[0]);
                        _mainItem = Convert.ToString(_item_[0]);
                        _priceDetailRef = new List<PriceDetailRef>();
                        if (_isBOnCredNote == true)
                            _priceDetailRef = CHNLSVC.Sales.GetPrice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCustomer.Text, _mItem, _combineQty, _dtReqPara);
                        else
                            _priceDetailRef = CHNLSVC.Sales.GetPrice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCustomer.Text, _mItem, _combineQty, Convert.ToDateTime(txtDate.Text));
                        _priceDetailRef = _priceDetailRef.Where(X => X.Sapd_price_type == 0).ToList();
                        if (CheckItemWarranty(_mItem, cmbStatus.Text.Trim()))
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_mItem + " item's warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); } _isInventoryCombineAdded = false; return; }

                        if (_priceDetailRef.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(_item_[0].ToString() + " does not having price. Please contact IT dept.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            _isInventoryCombineAdded = false;
                            return;
                        }
                        else
                        {
                            if (CheckBlockItem(_mItem, _priceDetailRef[0].Sapd_price_type, _isCombineAdding))
                            { _isInventoryCombineAdded = false; return; }
                            if (_priceDetailRef.Count == 1 && _priceDetailRef[0].Sapd_price_type != 0 && _priceDetailRef[0].Sapd_price_type != 4)
                            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item_[0].ToString() + " price is available for only promotion. Complete code does not support for promotion", "Available Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } _isInventoryCombineAdded = false; return; }
                        }
                    }
                    foreach (MasterItemComponent _com in _masterItemComponent.Where(X => X.ComponentItem.Mi_cd != _item_[0]))
                    {
                        if (CheckItemWarranty(_com.ComponentItem.Mi_cd, cmbStatus.Text.Trim()))
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item's warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); } _isInventoryCombineAdded = false; return; }
                        if (CheckBlockItem(_com.ComponentItem.Mi_cd, _priceDetailRef[0].Sapd_price_type, _isCombineAdding))
                        { _isInventoryCombineAdded = false; return; }
                    }
                    bool _isMainSerialCheck = false;
                    if (ScanSerialList != null && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                    {
                        if (ScanSerialList.Count > 0)
                        {
                            if (_isMainSerialCheck == false)
                            {
                                var _dup = ScanSerialList.Where(x => x.Tus_itm_cd == _item_[0].ToString() && x.Tus_ser_1 == ScanSerialNo);
                                if (_dup != null)
                                    if (_dup.Count() > 0)
                                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(_item_[0].ToString() + " serial " + ScanSerialNo + " is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } _isInventoryCombineAdded = false; return; } _isMainSerialCheck = true;
                            }
                            foreach (MasterItemComponent _com in _masterItemComponent)
                            {
                                string _serial = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _com.ComponentItem.Mi_cd).Select(y => y.Tus_ser_1).ToString();
                                var _dup = ScanSerialList.Where(x => x.Tus_ser_1 == _serial && x.Tus_itm_cd == _com.ComponentItem.Mi_cd);
                                if (_dup != null)
                                    if (_dup.Count() > 0)
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Item " + _com.ComponentItem.Mi_cd + "," + _serial + " serial is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                        _isInventoryCombineAdded = false;
                                        return;
                                    }
                            }
                        }
                    }
                    if (InventoryCombinItemSerialList.Count == 0)
                    {
                        _isCombineAdding = true;
                        foreach (MasterItemComponent _com in _masterItemComponent)
                        {
                            //Darshana 
                            //List<MasterItemTax> _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd, _combineStatus, string.Empty, string.Empty);
                            //if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                            //{
                            //    this.Cursor = Cursors.Default;
                            //    using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " does not have setup tax definition for the selected status. Please contact Inventory dept.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            //    _isInventoryCombineAdded = false;
                            //    return;
                            //}

                            List<MasterItemTax> _taxs = new List<MasterItemTax>();
                            if (_isStrucBaseTax == true)       //kapila added one in pos invoice copy by darshana
                            {
                                MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd);
                                _taxs = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd, _combineStatus, string.Empty, string.Empty, _mstItem.Mi_anal1);
                            }
                            else
                                _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd, _combineStatus, string.Empty, string.Empty);

                            if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " does not have setup tax definition for the selected status. Please contact Inventory dept.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                _isInventoryCombineAdded = false;
                                return;
                            }

                            if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            {
                                decimal _pickQty = 0;
                                if (IsPriceLevelAllowDoAnyStatus) _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _com.ComponentItem.Mi_cd).ToList().Select(x => x.Sad_qty).Sum();
                                else _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _com.ComponentItem.Mi_cd && x.Mi_itm_stus == cmbStatus.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();
                                _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _com.ComponentItem.Mi_cd, cmbStatus.Text.Trim());
                                if (_inventoryLocation != null)
                                    if (_inventoryLocation.Count > 0)
                                    {
                                        decimal _invBal = _inventoryLocation[0].Inl_qty;
                                        if (_pickQty > _invBal)
                                        {
                                            this.Cursor = Cursors.Default;
                                            using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                            _isInventoryCombineAdded = false;
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty("0"), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        _isInventoryCombineAdded = false;
                                        return;
                                    }
                                else
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show(_com.ComponentItem.Mi_cd + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty("0"), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    _isInventoryCombineAdded = false;
                                    return;
                                }
                            }
                            _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd);

                            if (_itm.Mi_is_ser1 == 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                            {
                                _comItem.Add(_com);
                            }
                        }

                        if (_comItem.Count > 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                        {//hdnItemCode.value
                            ReptPickSerials _pick = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _mainItem.Trim(), txtSerialNo.Text.Trim());
                            if (_pick != null)
                                if (!string.IsNullOrEmpty(_pick.Tus_itm_cd))
                                {
                                    var _dup = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _pick.Tus_itm_cd && x.Tus_ser_1 == _pick.Tus_ser_1).ToList();
                                    if (_dup != null)
                                        if (_dup.Count <= 0)
                                            InventoryCombinItemSerialList.Add(_pick);
                                }
                            _comItem.ForEach(x => x.Micp_itm_cd = _combineStatus);
                           // var _listComItem = (from _one in _comItem where _one.ComponentItem.Mi_itm_tp != "M" select new { Mi_cd = _one.ComponentItem.Mi_cd, Mi_longdesc = _one.ComponentItem.Mi_longdesc, Micp_itm_cd = _one.Micp_itm_cd, Micp_qty = _one.Micp_qty, Mi_itm_tp = _one.ComponentItem.Mi_itm_tp }).ToList();
                            var _listComItem = (from _one in _comItem where _one.Micp_itm_tp == "C" select new { Mi_cd = _one.ComponentItem.Mi_cd, Mi_longdesc = _one.ComponentItem.Mi_longdesc, Micp_itm_cd = _one.Micp_itm_cd, Micp_qty = _one.Micp_qty, Mi_itm_tp = _one.ComponentItem.Mi_itm_tp }).ToList();
                            gvPopComItem.DataSource = _listComItem;
                            pnlInventoryCombineSerialPick.Visible = true;
                            pnlMain.Enabled = false;
                            _isInventoryCombineAdded = false;
                            this.Cursor = Cursors.Default;
                            return;
                        }
                        else if (_comItem.Count == 1 && chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                        {//hdnItemCode.Value
                            ReptPickSerials _pick = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _mainItem.Trim(), txtSerialNo.Text.Trim());
                            if (_pick != null)
                                if (!string.IsNullOrEmpty(_pick.Tus_itm_cd))
                                { var _dup = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _pick.Tus_itm_cd && x.Tus_ser_1 == _pick.Tus_ser_1).ToList(); if (_dup != null)                                        if (_dup.Count <= 0) InventoryCombinItemSerialList.Add(_pick); }
                        }
                    }
                    SSCombineLine += 1;
                    foreach (MasterItemComponent _com in _masterItemComponent.OrderByDescending(x => x.ComponentItem.Mi_itm_tp))
                    {
                        //If going to deliver now
                        if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false && InventoryCombinItemSerialList.Count > 0)
                        {
                            var _comItemSer = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _com.ComponentItem.Mi_cd).ToList();
                            if (_comItemSer != null)
                                if (_comItemSer.Count > 0)
                                {
                                    foreach (ReptPickSerials _serItm in _comItemSer)
                                    {
                                        txtSerialNo.Text = _serItm.Tus_ser_1; ScanSerialNo = txtSerialNo.Text;
                                        txtSerialNo.Text = ScanSerialNo; txtItem.Text = _com.ComponentItem.Mi_cd;
                                        cmbStatus.Text = _combineStatus; txtQty.Text = FormatToQty("1");
                                        CheckQty(false); txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate));
                                        txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
                                        txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, cmbStatus.Text, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                                        txtLineTotAmt.Text = FormatToCurrency("0"); CalculateItem();
                                        AddItem(false, string.Empty); ScanSerialNo = string.Empty;
                                        txtSerialNo.Text = string.Empty; txtSerialNo.Text = string.Empty;
                                    }
                                    _combineCounter += 1;
                                }
                                else
                                {
                                    txtItem.Text = _com.ComponentItem.Mi_cd; cmbStatus.Text = _combineStatus;
                                    txtQty.Text = FormatToQty(Convert.ToString(_com.Micp_qty * _combineQty)); CheckQty(false);
                                    txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate)); txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
                                    txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, cmbStatus.Text, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                                    txtLineTotAmt.Text = FormatToCurrency("0"); CalculateItem();
                                    AddItem(false, string.Empty); ScanSerialNo = string.Empty;
                                    txtSerialNo.Text = string.Empty; txtSerialNo.Text = string.Empty; _combineCounter += 1;
                                }
                        }
                        //If deliver later
                        else if ((chkDeliverLater.Checked || chkDeliverNow.Checked) && InventoryCombinItemSerialList.Count == 0)
                        {
                            txtItem.Text = _com.ComponentItem.Mi_cd; LoadItemDetail(txtItem.Text.Trim());
                            cmbStatus.Text = _combineStatus; txtQty.Text = FormatToQty(Convert.ToString(_com.Micp_qty * _combineQty));
                            CheckQty(false); txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate));
                            txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
                            txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, cmbStatus.Text, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), true)));
                            txtLineTotAmt.Text = FormatToCurrency("0"); CalculateItem();
                            AddItem(false, string.Empty); _combineCounter += 1;
                        }
                    }
                    if (_combineCounter == _masterItemComponent.Count)
                    {
                        _masterItemComponent = new List<MasterItemComponent>();
                        _isCompleteCode = false; _isInventoryCombineAdded = false;
                        _isCombineAdding = false; ScanSerialNo = string.Empty;
                        InventoryCombinItemSerialList = new List<ReptPickSerials>();
                        txtSerialNo.Text = string.Empty;
                        if (_isCombineAdding == false)
                        {
                            this.Cursor = Cursors.Default;

                            txtSerialNo.Text = "";
                            ClearAfterAddItem();
                            _combineCounter = 0;
                            SSPriceBookSequance = "0";
                            SSPriceBookItemSequance = "0";
                            SSPriceBookPrice = 0;
                            if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                            SSPRomotionType = 0;

                            txtItem.Focus();
                            BindAddItem();
                            SetDecimalTextBoxForZero(true);

                            decimal _tobepay = 0;
                            if (lblSVatStatus.Text == "Available")
                                _tobepay = FigureRoundUp(Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()), true);
                            else
                                _tobepay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());

                            ucPayModes1.TotalAmount = _tobepay;
                            ucPayModes1.InvoiceItemList = _invoiceItemList;
                            ucPayModes1.SerialList = InvoiceSerialList;
                            ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepay));
                            if (_loyaltyType != null)
                            {
                                ucPayModes1.LoyaltyCard = _loyaltyType.Salt_loty_tp;
                            }
                            if (ucPayModes1.HavePayModes)
                                ucPayModes1.LoadData();
                            this.Cursor = Cursors.Default;

                            if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                                {
                                    txtSerialNo.Focus();
                                }
                                else
                                {
                                    txtItem.Focus();
                                }
                            }
                            else
                            {
                                ucPayModes1.button1.Focus();
                            }
                        } return;
                    }
                }
                bool _isAgePriceLevel = false;
                int _noofDays = 0;
                DateTime _serialpickingdate = txtDate.Value.Date;
                CheckNValidateAgeItem(txtItem.Text.Trim(), _itm.Mi_cate_1, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), cmbStatus.Text, out _isAgePriceLevel, out _noofDays);
                if (_isAgePriceLevel) _serialpickingdate = _serialpickingdate.AddDays(-_noofDays);
                if (_priceBookLevelRef.Sapl_is_serialized)
                {
                    if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory))
                    {
                        if (_itm.Mi_is_ser1 == 1)
                        {
                            if (string.IsNullOrEmpty(txtSerialNo.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtSerialNo.Focus(); return; }
                            _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
                            if (_serLst == null || string.IsNullOrEmpty(_serLst.Tus_com)) { this.Cursor = Cursors.Default; if (_isAgePriceLevel)                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item in a ageing price level.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        }
                        else if (_itm.Mi_is_ser1 == 0)
                        {
                            if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date); else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                            if (_nonserLst == null || _nonserLst.Count <= 0) { this.Cursor = Cursors.Default; if (_isAgePriceLevel)                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        }
                        else if (_itm.Mi_is_ser1 == -1)
                        {
                            //if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date); else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                            //if (_nonserLst == null || _nonserLst.Count <= 0) { this.Cursor = Cursors.Default; if (_isAgePriceLevel)                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        }
                    }
                    else
                    {
                        if (_itm.Mi_is_ser1 == 1) _serLst = VirtualSerialLine(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), txtSerialNo.Text.Trim())[0]; else if (_itm.Mi_is_ser1 == 0) _nonserLst = VirtualSerialLine(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), string.Empty);
                    }
                }
                else if ((chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) || IsGiftVoucher(_itm.Mi_itm_tp) || (_isRegistrationMandatory))
                {
                    if (_itm.Mi_is_ser1 == 1)
                    {
                        if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
                        { 
                            this.Cursor = Cursors.Default; 
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select the serial no", "Serial No", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtSerialNo.Focus();
                            _isInventoryCombineAdded = false;
                            return; 
                        }

                        bool _isGiftVoucher = IsGiftVoucher(_itm.Mi_itm_tp);
                        if (!_isGiftVoucher) _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim()); else _serLst = CHNLSVC.Inventory.GetGiftVoucherDetail(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtItem.Text.Trim(), Convert.ToInt32(_serial2), Convert.ToInt32(txtSerialNo.Text.Trim()), _prefix);

                        if (_serLst != null && !string.IsNullOrEmpty(_serLst.Tus_com))
                        {
                            if (_serLst.Tus_doc_dt >= _serialpickingdate)
                            {
                                this.Cursor = Cursors.Default;
                                if (_isAgePriceLevel)
                                {
                                    using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item in a ageing price level.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                            //else using (new CenterWinDialog(this)) { MessageBox.Show("There is no serial available for the selected item.", "No Serial", MessageBoxButtons.OK, MessageBoxIcon.Information); } return;
                        }
                    }
                    else if (_itm.Mi_is_ser1 == 0)
                    {
                        if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        if (_nonserLst == null || _nonserLst.Count <= 0)
                        { this.Cursor = Cursors.Default; if (_isAgePriceLevel) using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    }
                    else if (_itm.Mi_is_ser1 == -1)
                    {
                        //if (IsPriceLevelAllowDoAnyStatus == false) _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        //else _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), string.Empty, Convert.ToDecimal(txtQty.Text.Trim()), _serialpickingdate.Date);
                        //if (_nonserLst == null || _nonserLst.Count <= 0)
                        //{ this.Cursor = Cursors.Default; if (_isAgePriceLevel) using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item in a ageing price level.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } else                                using (new CenterWinDialog(this)) { MessageBox.Show("There is no available qty for the selected item.", "No Available Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    }
                }
                if ((SSPriceBookSequance == "0" || string.IsNullOrEmpty(SSPriceBookSequance)) && !IsGiftVoucher(_itm.Mi_itm_tp) && _MasterProfitCenter.Mpc_without_price == false && _priceBookLevelRef.Sapl_is_without_p == false)
                    if (!_isCombineAdding) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid price", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (string.IsNullOrEmpty(txtQty.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (Convert.ToDecimal(txtQty.Text) == 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (Convert.ToDecimal(txtQty.Text.Trim()) <= 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (string.IsNullOrEmpty(txtUnitPrice.Text.Trim())) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid unit price", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                if (!_isCombineAdding)
                {
                    //List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), string.Empty, string.Empty);
                    //if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                    //{
                    //    this.Cursor = Cursors.Default;
                    //    using (new CenterWinDialog(this)) { MessageBox.Show("Tax rates not setup for selected item code and item status.Please contact Inventory Department.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    //    cmbStatus.Focus();
                    //    return;
                    //}
                    List<MasterItemTax> _tax = new List<MasterItemTax>();
                    if (_isStrucBaseTax == true)       //kapila
                    {
                        MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text);
                        _tax = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), string.Empty, string.Empty, _mstItem.Mi_anal1);
                    }
                    else
                        _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), string.Empty, string.Empty);

                    if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Tax rates not setup for selected item code ( " + txtItem.Text + " ) and item status ( " + cmbStatus.Text.Trim() + " ). Please contact Inventory Department.", "Tax Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        cmbStatus.Focus();
                        return;
                    }
                }
                if (Convert.ToDecimal(txtUnitPrice.Text.Trim()) == 0 && _isCombineAdding == false && !IsGiftVoucher(_itm.Mi_itm_tp) && (SSPriceBookSequance == "0" || string.IsNullOrEmpty(SSPriceBookSequance)))
                {
                    bool _isTerminate = CheckQty(false);
                    if (_isTerminate) { this.Cursor = Cursors.Default; return; }
                }
                if (CheckBlockItem(txtItem.Text.Trim(), SSPRomotionType, _isCombineAdding))
                    return;
                if (_isCombineAdding == false && _MasterProfitCenter.Mpc_without_price == false && _priceBookLevelRef.Sapl_is_without_p == false)
                {
                    PriceDetailRef _lsts = CHNLSVC.Sales.GetPriceDetailByItemLineSeq(txtItem.Text.Trim(), Convert.ToInt32(SSPriceBookItemSequance), Convert.ToInt32(SSPriceBookSequance));
                    if (_lsts != null && _isCombineAdding == false)
                    {
                        if (string.IsNullOrEmpty(_lsts.Sapd_itm_cd))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " does not available price. Please contact IT dept.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }
                        else
                        {
                            decimal _tax = 0;
                            if (MainTaxConstant != null && MainTaxConstant.Count > 0)
                            {
                                _tax = MainTaxConstant[0].Mict_tax_rate;
                            }

                            decimal sysUPrice = FigureRoundUp(_lsts.Sapd_itm_price * _tax, true);
                            decimal pickUPrice = Convert.ToDecimal(txtUnitPrice.Text);
                            if (_MasterProfitCenter != null && _priceBookLevelRef != null)
                                if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_com) && !string.IsNullOrEmpty(_priceBookLevelRef.Sapl_com_cd))

                                    if (!_MasterProfitCenter.Mpc_without_price && !_priceBookLevelRef.Sapl_is_without_p)
                                        if (!_MasterProfitCenter.Mpc_edit_price)
                                        {
                                            //comment by darshana 23-08-2013
                                            //re-open by chamal 18-Nov-2014
                                            if (Math.Round(_lsts.Sapd_itm_price, 0) != Math.Round(pickUPrice, 0))
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show("Price Book price and the unit price is different. Please check the price you selected!", "System Price With Edited Price", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            if (sysUPrice != pickUPrice)
                                                if (sysUPrice > pickUPrice)
                                                {
                                                    decimal sysEditRate = _MasterProfitCenter.Mpc_edit_rate;
                                                    decimal ddUprice = sysUPrice - ((sysUPrice * sysEditRate) / 100);
                                                    if (ddUprice > pickUPrice)
                                                    {
                                                        this.Cursor = Cursors.Default;
                                                        using (new CenterWinDialog(this)) { MessageBox.Show("Price Book price and the unit price is different. Please check the price you selected!", "System Price With Edited Price", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                                                        return;
                                                    }
                                                }
                                        }
                        }
                    }
                    else
                    {
                        if (_isCombineAdding == false && _priceBookLevelRef.Sapl_is_serialized == false && !IsGiftVoucher(_itm.Mi_itm_tp))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " does not available price. Please contact IT dept.", "System Price", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }
                    }
                }
                if (_isCombineAdding == false)
                    if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory))
                    {
                        if (_itm.Mi_is_ser1 == 1)
                        {
                            var _dup = ScanSerialList.Where(x => x.Tus_itm_cd == txtItem.Text && x.Tus_ser_1 == ScanSerialNo).ToList();
                            if (_dup != null)
                                if (_dup.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show(ScanSerialNo + " serial is already picked!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    txtSerialNo.Focus();
                                    return;
                                }
                        }

                        if (!IsPriceLevelAllowDoAnyStatus)
                        {
                            if (_serLst != null)
                                if (string.IsNullOrEmpty(_serLst.Tus_com))
                                {
                                    if (_serLst.Tus_itm_stus != cmbStatus.Text.Trim())
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show(ScanSerialNo + " serial status is not match with the price level status", "Price Level Restriction", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        txtSerialNo.Focus();
                                        return;
                                    }
                                }
                        }
                    }

                #endregion Price Combine Checking Process - Costing Dept.

                CalculateItem();

                #region Check Inventory Balance if deliver now!

                if (_isCombineAdding == false)
                    if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory))
                    {
                        decimal _pickQty = 0;
                        if (IsPriceLevelAllowDoAnyStatus)
                            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == txtItem.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();
                        else
                            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == txtItem.Text.Trim() && x.Mi_itm_stus == cmbStatus.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();

                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                        List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim());

                        if (_inventoryLocation != null)
                            if (_inventoryLocation.Count > 0)
                            {
                                decimal _invBal = _inventoryLocation[0].Inl_qty;
                                if (_pickQty > _invBal)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_invBal)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }
                        else
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString("0")), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }

                        if (_itm.Mi_is_ser1 == 1 && ScanSerialList.Count > 0)
                        {
                            var _serDup = (from _lst in ScanSerialList
                                           where _lst.Tus_ser_1 == txtSerialNo.Text.Trim() && _lst.Tus_itm_cd == txtItem.Text.Trim()
                                           select _lst).ToList();

                            if (_serDup != null)
                                if (_serDup.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Selected Serial is duplicating.", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                        }
                    }
                List<PriceBookLevelRef> _lvl = _priceBookLevelRefList;
                if (_lvl != null)
                    if (_lvl.Count > 0)
                    {
                        var _lst = (from _l in _lvl where _l.Sapl_itm_stuts == cmbStatus.Text.Trim() select _l).ToList();
                        if (_lst != null)
                            if (_lst.Count > 0)
                            {
                                DataTable _temWarr = CHNLSVC.Sales.GetPCWara(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDateTime(txtDate.Text).Date);

                                if (_lst[0].Sapl_set_warr == true)
                                {
                                    WarrantyPeriod = _lst[0].Sapl_warr_period;
                                }
                                else if (_temWarr != null && _temWarr.Rows.Count > 0)
                                {
                                    WarrantyPeriod = Convert.ToInt32(_temWarr.Rows[0]["SPW_WARA_PD"].ToString());
                                    WarrantyRemarks = _temWarr.Rows[0]["SPW_WARA_RMK"].ToString();
                                }
                                else
                                {
                                    MasterItemWarrantyPeriod _period = CHNLSVC.Inventory.GetItemWarrantyDetail(txtItem.Text.Trim(), cmbStatus.Text.Trim());
                                    if (_period != null)
                                    {
                                        WarrantyPeriod = _period.Mwp_val;
                                        WarrantyRemarks = _period.Mwp_rmk;
                                    }
                                    else
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("Warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }
                                }
                            }
                    }
                bool _isDuplicateItem = false;
                Int32 _duplicateComLine = 0;
                Int32 _duplicateItmLine = 0;
                if (_invoiceItemList == null || _invoiceItemList.Count <= 0)
                {
                    _isDuplicateItem = false;
                    _lineNo += 1;
                    if (!_isCombineAdding) SSCombineLine += 1;
                    _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itm, _originalItem));
                }
                else
                {
                    var _duplicateItem = from _list in _invoiceItemList
                                         where _list.Sad_itm_cd == txtItem.Text && _list.Sad_itm_stus == cmbStatus.Text && _list.Sad_pbook == cmbBook.Text && _list.Sad_pb_lvl == cmbLevel.Text && _list.Sad_unit_rt == Convert.ToDecimal(txtUnitPrice.Text) && _list.Sad_disc_rt == Convert.ToDecimal(txtDisRate.Text.Trim())
                                         select _list;

                    if (_duplicateItem.Count() > 0)
                    {
                        _isDuplicateItem = true;
                        foreach (var _similerList in _duplicateItem)
                        {
                            _duplicateComLine = _similerList.Sad_job_line;
                            _duplicateItmLine = _similerList.Sad_itm_line;
                            _similerList.Sad_disc_amt = Convert.ToDecimal(_similerList.Sad_disc_amt) + Convert.ToDecimal(txtDisAmt.Text);
                            _similerList.Sad_itm_tax_amt = Convert.ToDecimal(_similerList.Sad_itm_tax_amt) + Convert.ToDecimal(txtTaxAmt.Text);
                            _similerList.Sad_qty = Convert.ToDecimal(_similerList.Sad_qty) + Convert.ToDecimal(txtQty.Text);
                            _similerList.Sad_unit_amt = Convert.ToDecimal(txtUnitPrice.Text) * _similerList.Sad_qty;
                            _similerList.Sad_tot_amt = Convert.ToDecimal(_similerList.Sad_tot_amt) + Convert.ToDecimal(txtLineTotAmt.Text);
                        }
                    }
                    else
                    {
                        _isDuplicateItem = false;
                        _lineNo += 1;
                        if (!_isCombineAdding) SSCombineLine += 1;
                        _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itm, _originalItem));
                    }
                }
                //Adding Items to grid end here ----------------------------------------------------------------------

                #endregion Check Inventory Balance if deliver now!

                #region Adding Serial/Non Serial items

                //Scan By Serial ----------start----------------------------------
                if ((chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) || _priceBookLevelRef.Sapl_is_serialized || IsGiftVoucher(_itm.Mi_itm_tp) || _isRegistrationMandatory)
                {
                    if (_isFirstPriceComItem)
                        _isCombineAdding = true;
                    if (ScanSequanceNo == 0) ScanSequanceNo = -100;
                    if (_itm.Mi_is_ser1 == 1)
                    {
                        _serLst.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
                        _serLst.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine;
                        _serLst.Tus_usrseq_no = ScanSequanceNo;
                        _serLst.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                        _serLst.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty;
                        _serLst.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty;
                        _serLst.ItemType = _itm.Mi_itm_tp;
                        ScanSerialList.Add(_serLst);
                    }
                    if (_itm.Mi_is_ser1 == 0)
                    {
                        if (_nonserLst.Count < Convert.ToDecimal(txtQty.Text.Trim()))
                        {
                            if (_isAgePriceLevel == false)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_nonserLst.Count)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                                foreach (InvoiceItem _one in _partly)
                                    DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                                return;
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                if (gvInvoiceItem.Rows.Count > 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                                var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                                foreach (InvoiceItem _one in _partly)
                                    DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                                return;
                            }
                        }
                        _nonserLst.ForEach(x => x.Tus_base_doc_no = Convert.ToString(ScanSequanceNo));
                        _nonserLst.ForEach(x => x.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine);
                        _nonserLst.ForEach(x => x.Tus_usrseq_no = ScanSequanceNo);
                        _nonserLst.ForEach(x => x.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim()));
                        _nonserLst.ForEach(x => x.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty);
                        _nonserLst.ForEach(x => x.Tus_ser_id = -1);
                        _nonserLst.ForEach(x => x.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty);
                        _nonserLst.ForEach(x => x.ItemType = _itm.Mi_itm_tp);
                        ScanSerialList.AddRange(_nonserLst);
                    }
                    if (_itm.Mi_is_ser1 == -1)
                    {
                        //if (_nonserLst.Count < Convert.ToDecimal(txtQty.Text.Trim()))
                        //{
                        //    if (_isAgePriceLevel == false)
                        //    {
                        //        this.Cursor = Cursors.Default;
                        //        using (new CenterWinDialog(this)) { MessageBox.Show(txtItem.Text + " item qty exceeding it's inventory balance. Inventory balance : " + FormatToQty(Convert.ToString(_nonserLst.Count)), "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        //        var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                        //        foreach (InvoiceItem _one in _partly)
                        //            DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                        //        return;
                        //    }
                        //    else
                        //    {
                        //        this.Cursor = Cursors.Default;
                        //        if (gvInvoiceItem.Rows.Count > 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This serial can't select under ageing price level. Please check the ageing status with IT dept.", "Age Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                        //        var _partly = _invoiceItemList.Where(x => x.Sad_job_line == SSCombineLine).ToList();
                        //        foreach (InvoiceItem _one in _partly)
                        //            DeleteIfPartlyAdded(_one.Sad_job_line, _one.Sad_itm_cd, _one.Sad_unit_rt, _one.Sad_pbook, _one.Sad_pb_lvl, _one.Sad_qty, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, _one.Sad_itm_line, _one.Sad_itm_line);

                        //        return;
                        //    }
                        //}
                        ReptPickSerials _chk = new ReptPickSerials();
                        _chk.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
                        _chk.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine;
                        _chk.Tus_usrseq_no = ScanSequanceNo;
                        _chk.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                        _chk.Tus_itm_cd = txtItem.Text.Trim();
                        _chk.Tus_itm_stus = cmbStatus.Text;
                        _chk.Tus_ser_id = 0;
                        _chk.Tus_qty = Convert.ToDecimal(txtQty.Text);
                        _chk.Tus_bin = BaseCls.GlbDefaultBin;
                        _chk.Tus_ser_1 = "N/A";
                        _chk.Tus_ser_2 = "N/A";
                        _chk.Tus_ser_3 = "N/A";
                        _chk.Tus_ser_4 = "N/A";
                        _chk.Tus_ser_id = 0;
                        _chk.Tus_serial_id = "0";
                        _chk.Tus_com = BaseCls.GlbUserComCode;
                        _chk.Tus_loc = BaseCls.GlbUserDefLoca;
                        _chk.ItemType = _itm.Mi_itm_tp;
                        _chk.Tus_cre_by = BaseCls.GlbUserID;
                        _chk.Tus_cre_by = BaseCls.GlbUserID;
                        _chk.Tus_itm_desc = _itm.Mi_shortdesc;
                        _chk.Tus_itm_model = _itm.Mi_model;
                        _chk.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                        ScanSerialList.Add(_chk);

                        //_nonserLst.ForEach(x => x.Tus_base_doc_no = Convert.ToString(ScanSequanceNo));
                        //_nonserLst.ForEach(x => x.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine);
                        //_nonserLst.ForEach(x => x.Tus_usrseq_no = ScanSequanceNo);
                        //_nonserLst.ForEach(x => x.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim()));
                        //_nonserLst.ForEach(x => x.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty);
                        //_nonserLst.ForEach(x => x.Tus_ser_id = -1);
                        //_nonserLst.ForEach(x => x.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty);
                        //_nonserLst.ForEach(x => x.ItemType = _itm.Mi_itm_tp);
                        //_nonserLst.ForEach(x=>x.Tus_ser_1 = "N/A");
                        //_nonserLst.ForEach(x=>x.Tus_ser_2 = "N/A");
                        //_nonserLst.ForEach(x=>x.Tus_ser_3 = "N/A");
                        //_nonserLst.ForEach(x=>x.Tus_ser_4 = "N/A");
                        //_nonserLst.ForEach(x=>x.Tus_ser_id = 0);
                        //_nonserLst.ForEach(x=>x.Tus_serial_id = "0");
                        // _nonserLst.ForEach(x=>x.Tus_unit_cost = 0);
                        // _nonserLst.ForEach(x=>x.Tus_unit_price = 0);

                        //ScanSerialList.AddRange(_nonserLst);
                    }

                    gvPopSerial.DataSource = new List<ReptPickSerials>();
                    gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
                    var filenamesList = new BindingList<ReptPickSerials>(ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList());
                    gvGiftVoucher.DataSource = filenamesList;

                    if (_isFirstPriceComItem)
                    {
                        _isCombineAdding = false;
                        _isFirstPriceComItem = false;
                    }

                    if (IsGiftVoucher(_itm.Mi_itm_tp)) _isCombineAdding = true;
                }

                #endregion Adding Serial/Non Serial items

                bool _isDuplicate = false;
                if (InvoiceSerialList != null)
                    if (InvoiceSerialList.Count > 0)
                    { if (_itm.Mi_is_ser1 == 1) { var _dup = (from _i in InvoiceSerialList where _i.Sap_ser_1 == txtSerialNo.Text.Trim() && _i.Sap_itm_cd == txtItem.Text.Trim() select _i).ToList(); if (_dup != null)                                if (_dup.Count > 0)                                    _isDuplicate = true; } }
                if (_isDuplicate == false)
                {
                    InvoiceSerial _invser = new InvoiceSerial(); _invser.Sap_del_loc = BaseCls.GlbUserDefLoca;
                    _invser.Sap_itm_cd = txtItem.Text.Trim(); _invser.Sap_itm_line = _lineNo;
                    _invser.Sap_remarks = string.Empty; _invser.Sap_seq_no = Convert.ToInt32(SSPriceBookSequance);
                    _invser.Sap_ser_1 = txtSerialNo.Text; _invser.Sap_ser_line = _isCombineAdding ? Convert.ToInt32(SSCombineLine) : 0;
                    InvoiceSerialList.Add(_invser);
                }
                CalculateGrandTotal(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text), Convert.ToDecimal(txtTaxAmt.Text), true);
                if (_MainPriceCombinItem != null)
                {
                    string _combineStatus = string.Empty;
                    decimal _combineQty = 0;
                    bool _isSingleItemSerializedInCombine = true;
                    if (_MainPriceCombinItem.Count > 0 && _isCombineAdding == false)
                    {
                        _isCombineAdding = true;
                        if (string.IsNullOrEmpty(_combineStatus)) _combineStatus = cmbStatus.Text;
                        if (_combineQty == 0) _combineQty = Convert.ToDecimal(txtQty.Text);
                        if (chkDeliverLater.Checked == true || chkDeliverNow.Checked == true)
                        {
                            foreach (PriceCombinedItemRef _list in _MainPriceCombinItem)
                            {
                                string _originalItm = _list.Sapc_itm_cd; string _similerItem = _list.Similer_item;
                                _combineStatus = _list.Status; if (!string.IsNullOrEmpty(_similerItem)) txtItem.Text = _similerItem; else txtItem.Text = _list.Sapc_itm_cd;
                                if (_priceBookLevelRef.Sapl_is_serialized) txtSerialNo.Text = _list.Sapc_sub_ser;
                                LoadItemDetail(txtItem.Text.Trim());
                                if (IsGiftVoucher(_itemdetail.Mi_itm_tp))
                                {
                                    foreach (ReptPickSerials _lists in PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == txtItem.Text.Trim()).ToList())
                                    {
                                        txtSerialNo.Text = _lists.Tus_ser_1;
                                        ScanSerialNo = _lists.Tus_ser_1;
                                        string _originalItms = _lists.Tus_session_id;
                                        if (string.IsNullOrEmpty(_originalItm))
                                        {
                                            txtItem.Text = _lists.Tus_itm_cd; _serial2 = _lists.Tus_ser_2;
                                            _prefix = _lists.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                            cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                            decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
                                            txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                            if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((Qty)));
                                            txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                            txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                            CalculateItem(); AddItem(_isPromotion, string.Empty);
                                        }
                                        else
                                        {
                                            txtItem.Text = _lists.Tus_itm_cd; _serial2 = _lists.Tus_ser_2;
                                            _prefix = _lists.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                            cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                            decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum(); txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                            if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((Qty)));
                                            txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                            txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                            CalculateItem(); AddItem(_isPromotion, _originalItm);
                                        }
                                        _combineCounter += 1;
                                    }
                                }
                                else
                                {
                                    cmbStatus.Text = _combineStatus; txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_list.Sapc_price));
                                    if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty /* * _combineQty */))); else txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, _originalItm);
                                    _combineCounter += 1;
                                }
                            }
                        }
                        else
                        {
                            if (PriceCombinItemSerialList == null || PriceCombinItemSerialList.Count == 0) _isSingleItemSerializedInCombine = false;
                            foreach (ReptPickSerials _list in PriceCombinItemSerialList)
                            {
                                txtSerialNo.Text = _list.Tus_ser_1;
                                ScanSerialNo = _list.Tus_ser_1;
                                string _originalItm = _list.Tus_session_id;
                                _combineStatus = _list.Tus_itm_stus;
                                if (string.IsNullOrEmpty(_originalItm))
                                {
                                    txtItem.Text = _list.Tus_itm_cd; _serial2 = _list.Tus_ser_2;
                                    _prefix = _list.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                    cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                    decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
                                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice)); txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, string.Empty);
                                }
                                else
                                {
                                    txtItem.Text = _list.Tus_itm_cd; _serial2 = _list.Tus_ser_2;
                                    _prefix = _list.Tus_ser_3; LoadItemDetail(txtItem.Text.Trim());
                                    cmbStatus.Text = _combineStatus; decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
                                    decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
                                    var _Increaseable = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(x => x.Sapc_increse).Distinct().ToList();
                                    bool _isIncreaseable = Convert.ToBoolean(_Increaseable[0]); txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                    if (_isIncreaseable) txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((Qty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, _originalItm);
                                }
                                _combineCounter += 1;
                            }
                            foreach (PriceCombinedItemRef _list in _MainPriceCombinItem)
                            {
                                MasterItem _i = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _list.Sapc_itm_cd);
                                _combineStatus = _list.Status;
                                if (_i.Mi_is_ser1 != 1)
                                {
                                    string _originalItm = _list.Sapc_itm_cd; string _similerItem = _list.Similer_item;
                                    if (!string.IsNullOrEmpty(_similerItem)) txtItem.Text = _similerItem; else txtItem.Text = _list.Sapc_itm_cd;
                                    LoadItemDetail(txtItem.Text.Trim()); cmbStatus.Text = _combineStatus;
                                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_list.Sapc_price));
                                    if (_list.Sapc_increse) txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty * _combineQty))); else txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty)));
                                    txtDisRate.Text = FormatToCurrency("0"); txtDisAmt.Text = FormatToCurrency("0");
                                    txtTaxAmt.Text = FormatToCurrency("0"); txtLineTotAmt.Text = FormatToCurrency("0");
                                    CalculateItem(); AddItem(_isPromotion, _originalItm);
                                    _combineCounter += 1;
                                }
                            }
                        }

                        if (chkDeliverLater.Checked == true || chkDeliverNow.Checked == true)
                            if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes) ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory)) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }//hdnSerialNo.Value = ""
                        if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory))
                        {
                            if (_isSingleItemSerializedInCombine)
                            {
                                if (_combineCounter == PriceCombinItemSerialList.Count)
                                { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes)  ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false || (_isRegistrationMandatory)) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }
                                else if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes) ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }
                            }
                            else
                                if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; SSPromotionCode = string.Empty; ScanSerialNo = string.Empty; _serial2 = string.Empty; _prefix = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; _combineCounter = 0; _isCheckedPriceCombine = false; if (ucPayModes1.HavePayModes)  ucPayModes1.LoadData(); if (_isCombineAdding == false) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } } return; }//hdnSerialNo.Value = ""
                        }
                    }
                }

        #endregion Rooting for Invnetory Combine

                txtSerialNo.Text = "";
                ClearAfterAddItem();
                SSPriceBookSequance = "0";
                SSPriceBookItemSequance = "0";
                SSPriceBookPrice = 0;
                if (_isCombineAdding == false) SSPromotionCode = string.Empty;
                SSPRomotionType = 0;
                txtItem.Focus();
                BindAddItem();
                SetDecimalTextBoxForZero(true);
                decimal _tobepays = 0;
                if (lblSVatStatus.Text == "Available") _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                else _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                ucPayModes1.TotalAmount = _tobepays;
                ucPayModes1.InvoiceItemList = _invoiceItemList;
                ucPayModes1.SerialList = InvoiceSerialList;
                ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                ucPayModes1.IsTaxInvoice = chkTaxPayable.Checked;
                if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                    //    ucPayModes1.LoadData(); //-- COMMENT DARSAHNA 04-12-2015 TO SPEED UP ADD PROCESS
                    if (_loyaltyType != null)
                    {
                        ucPayModes1.LoyaltyCard = _loyaltyType.Salt_loty_tp;
                    }
                LookingForBuyBack();
                this.Cursor = Cursors.Default;
                if (_isCombineAdding == false && (!IsAddingEventItem)) { this.Cursor = Cursors.Default; if (MessageBox.Show("Do you need to add another item?", "Another Item", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false) { txtSerialNo.Focus(); } else { txtItem.Focus(); } } else { ucPayModes1.button1.Focus(); } }
            }
            catch (Exception ex)
            { CHNLSVC.CloseChannel(); this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); } return; }
        }

        protected void AddItem(Object sender, EventArgs e)
        {
            if (chkQuotation.Checked) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow to add additional items for the selected quotation.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }

            try
            {
                

                if (string.IsNullOrEmpty(txtItem.Text)) return;
                if (string.IsNullOrEmpty(txtQty.Text)) return;

                //kapila 23/2/2017
                MasterItem _masterItemDetails = new MasterItem();
                _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, txtItem.Text, 1);
                if (_masterItemDetails.Mi_cd == null)
                {
                    using (new CenterWinDialog(this)) { MessageBox.Show("Item is not allowed in this company. Contact Inventory Dept.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }

                if (Convert.ToDecimal(txtLineTotAmt.Text) < 0)
                {
                    using (new CenterWinDialog(this)) { MessageBox.Show("Amount cannot be less than zero.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }

                #region Check Customer has promotion voucher avoid the discount :: Chamal 04/Jul/2014

                if (!string.IsNullOrEmpty(txtCustomer.Text))
                {
                    if (txtCustomer.Text != "CASH")
                    {
                        if ((string.IsNullOrEmpty(txtDisRate.Text) && string.IsNullOrEmpty(txtDisAmt.Text)))
                        {
                            CashGeneralEntiryDiscountDef _discVou = CHNLSVC.Sales.CheckCustHaveDiscountPromoVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text, txtDate.Value.Date, cmbBook.Text, cmbLevel.Text, txtItem.Text, string.Empty, txtNIC.Text, txtMobile.Text);
                            if (_discVou != null)
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher discount available for this item", "Promotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                //return;
                            }
                        }
                        else
                        {
                            if (Convert.ToDecimal(txtDisRate.Text) <= 0 && Convert.ToDecimal(txtDisAmt.Text) <= 0)
                            {
                                CashGeneralEntiryDiscountDef _discVou = CHNLSVC.Sales.CheckCustHaveDiscountPromoVoucher(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text, txtDate.Value.Date, cmbBook.Text, cmbLevel.Text, txtItem.Text, string.Empty, txtNIC.Text, txtMobile.Text);
                                if (_discVou != null)
                                {
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher discount available for this item", "Promotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    // return;
                                }
                            }
                        }
                    }
                }

                #endregion Check Customer has promotion voucher avoid the discount :: Chamal 04/Jul/2014

                PriceDetailRef _lsts = CHNLSVC.Sales.GetPriceDetailByItemLineSeq(txtItem.Text.Trim(), Convert.ToInt32(SSPriceBookItemSequance), Convert.ToInt32(SSPriceBookSequance));

                if (_lsts != null)
                {
                    if (_lsts.Sapd_qty_from > Convert.ToDecimal(txtQty.Text))
                    {
                        using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty exceed promotion allow qty.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }
                    else if (_lsts.Sapd_qty_to < Convert.ToDecimal(txtQty.Text))
                    {
                        using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty exceed promotion allow qty.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }

                    //Updated by akila 2018/03/30
                    if ((!string.IsNullOrEmpty(_lsts.Sapd_customer_cd) && (_lsts.Sapd_customer_cd.ToUpper() != "N/A")) && (_lsts.Sapd_customer_cd != txtCustomer.Text.Trim()))
                    {
                        using (new CenterWinDialog(this)) { MessageBox.Show("Selected price not available for this customer" + Environment.NewLine + "Circular Code: " + _lsts.Sapd_circular_no, "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }
                }


                if (!string.IsNullOrEmpty(SSPromotionCode))
                {
                    //check promotion qty anr return
                    List<PriceDetailRef> _promoList = CHNLSVC.Sales.GetPriceByPromoCD(SSPromotionCode);
                    if (_promoList == null && _promoList.Count <= 0)
                    {
                        return;
                    }
                    else
                    {
                        decimal qty = _promoList[0].Sapd_qty_to;
                        List<InvoiceItem> _alredyAddList = (from _res in _invoiceItemList
                                                            where _res.Sad_itm_cd == txtItem.Text.Trim() && _res.Sad_itm_stus == cmbStatus.Text
                                                            select _res).ToList<InvoiceItem>();
                        if (_alredyAddList != null)
                        {
                            qty = qty + _alredyAddList.Count;
                        }
                        if (Convert.ToDecimal(txtQty.Text) > qty)
                        {
                            using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty exceed promotion allow qty.", "Add Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            return;
                        }

                        //free item check
                        //not define the process
                        //sachith 2014/01/29
                    }
                }

                List<MasterItemComponent> _com = CHNLSVC.Inventory.GetItemComponents(txtItem.Text.Trim());
                if (_com != null && _com.Count > 0)
                {
                    foreach (MasterItemComponent _itmCom in _com)
                    {
                        //REGISTRATION PROCESS
                        //ADDED 2013/12/10
                        //REGISTRATION PEOCESS CHECK
                        //ADDED 2013/12/06
                        //CHECK ITEM NEED REGISTRATION OR NOT
                        MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itmCom.ComponentItem.Mi_cd);
                        if (_isRegistrationMandatory)
                        {
                            if (_temItm.Mi_need_reg)
                            {
                                _isNeedRegistrationReciept = true;
                                lnkProcessRegistration.Visible = true;
                            }
                        }
                    }
                }
                else
                {
                    MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                    if (_isRegistrationMandatory)
                    {
                        if (_temItm.Mi_need_reg)
                        {
                            _isNeedRegistrationReciept = true;
                            lnkProcessRegistration.Visible = true;
                        }
                    }
                }
                //END
                //END

                this.Cursor = Cursors.WaitCursor;
                AddItem(SSPromotionCode == "0" || string.IsNullOrEmpty(SSPromotionCode) ? false : true, string.Empty);
                if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                {
                    if (_priceDetailRef[0].Sapd_customer_cd == txtCustomer.Text.Trim())
                    {
                        txtCustomer.ReadOnly = true;
                        btnSearch_Customer.Enabled = false;
                    }
                }
                txtQty.Text = FormatToQty("1");
                AddItemDisableCustomer(true);
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void SetDecimalTextBoxForZero(bool _isUnit)
        {
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtQty.Text = FormatToQty("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
            if (_isUnit) txtUnitPrice.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
        }

        private void gvPopComItem_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPopComItem.ColumnCount > 0)
                {
                    int _col = e.ColumnIndex;
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        string _item = gvPopComItem.Rows[_row].Cells["PopComItm_Item"].Value.ToString();
                        string _status = gvPopComItem.Text.Trim();
                        string _qty = gvPopComItem.Rows[_row].Cells["PopComItm_Qty"].Value.ToString();

                        if (chkDeliverLater.Checked == false)
                            LoadSelectedItemSerialForPriceComItemSerialGv(_item, _status, Convert.ToDecimal(_qty), false, _col);
                        if (chkDeliverLater.Checked)
                            return;
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPopComItemSerial_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPopComItemSerial.ColumnCount > 0)
                {
                    Int32 _row = e.RowIndex;
                    if (_row != -1)
                    {
                        DataGridViewCheckBoxCell _cell = gvPopComItemSerial.Rows[_row].Cells["PopComItmSer_Select"] as DataGridViewCheckBoxCell;
                        string _id = gvPopComItemSerial.Rows[_row].Cells["PopComItmSer_Serialid"].Value.ToString();
                        if (Convert.ToBoolean(_cell.Value) == true)
                        {
                            _cell.Value = false;
                            InventoryCombinItemSerialList.RemoveAll(x => x.Tus_ser_id == Convert.ToInt32(_id));
                        }
                        else
                        {
                            _cell.Value = true;
                            var _n = _promotionSerial.Where(x => x.Tus_ser_id == Convert.ToInt32(_id)).ToList();
                            _promotionSerialTemp.AddRange(_n);
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvPopComItemSerial_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPopComItemSerial.ColumnCount > 0)
                {
                    Int32 _rowindex = e.RowIndex;
                    if (_rowindex != -1)
                    {
                        for (int index = e.RowIndex; index <= e.RowIndex + e.RowCount - 1; index++)
                        {
                            string _item = gvPopComItemSerial.Rows[index].Cells["PopComItmSer_Item"].Value.ToString();
                            string _serialID = gvPopComItemSerial.Rows[index].Cells["PopComItmSer_Serialid"].Value.ToString();
                            DataGridViewCheckBoxCell _check = gvPopComItemSerial.Rows[index].Cells["PopComItmSer_Select"] as DataGridViewCheckBoxCell;

                            string _selectedid = string.Empty;
                            if (InventoryCombinItemSerialList != null)
                                if (InventoryCombinItemSerialList != null)
                                    if (InventoryCombinItemSerialList.Count > 0)
                                    {
                                        var _id = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _item && x.Tus_ser_id == Convert.ToInt32(_serialID)).Select(y => y.Tus_ser_id);
                                        if (_id != null)
                                            if (_id.Count() > 0)
                                            {
                                                foreach (var f in _id)
                                                    if (!string.IsNullOrEmpty(Convert.ToString(f)))
                                                        _check.Value = true;
                                            }
                                    }
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtInvComSerSearch_TextChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPopComItemSerial.ColumnCount > 0)
                {
                    if (!string.IsNullOrEmpty(txtInvComSerSearch.Text.Trim()))
                    {
                        var query = _promotionSerial.Where(x => x.Tus_ser_1.Contains(txtInvComSerSearch.Text.Trim())).ToList();
                        if (query != null)
                            if (query.Count() > 0)
                                gvPopComItemSerial.DataSource = query;
                            else
                                gvPopComItemSerial.DataSource = new List<ReptPickSerials>();
                        else
                            gvPopComItemSerial.DataSource = new List<ReptPickSerials>();
                    }
                    else
                    {
                        gvPopComItemSerial.DataSource = _promotionSerial;
                    }

                    foreach (DataGridViewRow _r in gvPopComItemSerial.Rows)
                    {
                        string _id = _r.Cells["PopComItmSer_Serialid"].Value.ToString();
                        DataGridViewCheckBoxCell _chk = _r.Cells["PopComItmSer_Select"] as DataGridViewCheckBoxCell;
                        if (_promotionSerialTemp != null)
                            if (_promotionSerialTemp.Count > 0)
                            {
                                var _exist = _promotionSerialTemp.Where(x => x.Tus_ser_id == Convert.ToInt32(_id)).ToList();
                                if (_exist != null)
                                    if (_exist.Count > 0)
                                        _chk.Value = true;
                            }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnInvCombineSerClose_Click(object sender, EventArgs e)
        {
            InventoryCombinItemSerialList = new List<ReptPickSerials>();
            _promotionSerial = new List<ReptPickSerials>();
            _promotionSerialTemp = new List<ReptPickSerials>();
            txtUnitPrice.Text = FormatToCurrency("0");
            CalculateItem();
            pnlMain.Enabled = true;
            pnlInventoryCombineSerialPick.Visible = false;
        }

        private void btnInvComSerClear_Click(object sender, EventArgs e)
        {
            txtInvComSerSearch.Clear();
        }

        private void btnInvComSerConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                txtInvComSerSearch.Text = string.Empty;
                decimal _serialcount = 0;
                decimal _promotionItemQty = Convert.ToDecimal(gvPopComItem.SelectedRows[0].Cells["PopComItm_Qty"].Value);
                string _promotionItem = gvPopComItem.SelectedRows[0].Cells["PopComItm_Item"].Value.ToString();
                foreach (DataGridViewRow _row in gvPopComItemSerial.Rows)
                {
                    if (Convert.ToBoolean(_row.Cells["PopComItmSer_Select"].Value) == true)
                        _serialcount += 1;
                }

                if (_serialcount != _promotionItemQty)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch. Item Qty - " + _promotionItemQty.ToString() + "but serials - " + _serialcount.ToString(), "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }
                if (_serialcount > _promotionItemQty)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Qty and the selected serials mismatch. Item Qty - " + _promotionItemQty.ToString() + "but serials - " + _serialcount.ToString(), "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                    return;
                }

                if (InventoryCombinItemSerialList != null)
                    if (InventoryCombinItemSerialList.Count > 0)
                    {
                        decimal _count = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _promotionItem).Count();
                        if (_count >= _promotionItemQty)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You already pick serials for the item", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                    }
                foreach (DataGridViewRow _r in gvPopComItemSerial.Rows)
                {
                    if (Convert.ToBoolean(_r.Cells["PopComItmSer_Select"].Value) == true)
                    {
                        string _item = Convert.ToString(_r.Cells["PopComItmSer_Item"].Value);
                        string _serial = Convert.ToString(_r.Cells["PopComItmSer_Serial1"].Value);

                        ReptPickSerials _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item, _serial);
                        if (_serLst != null)
                            if (_serLst.Tus_ser_1 != null || !string.IsNullOrEmpty(_serLst.Tus_ser_1))
                            {
                                if (InventoryCombinItemSerialList != null)
                                    if (InventoryCombinItemSerialList.Count > 0)
                                    {
                                        var _dup = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _serLst.Tus_itm_cd && x.Tus_ser_1 == _serLst.Tus_ser_1).ToList();
                                        if (_dup != null)
                                            if (_dup.Count > 0)
                                            {
                                                this.Cursor = Cursors.Default;
                                                using (new CenterWinDialog(this)) { MessageBox.Show("Selected serial is duplicating!", "Serial Duplication", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                                return;
                                            }
                                            else
                                                InventoryCombinItemSerialList.Add(_serLst);
                                        else
                                            InventoryCombinItemSerialList.Add(_serLst);
                                    }
                                    else
                                    {
                                        InventoryCombinItemSerialList.Add(_serLst);
                                    }
                                else
                                {
                                    InventoryCombinItemSerialList.Add(_serLst);
                                }
                            }
                    }
                }

                List<ReptPickSerials> _lst = new List<ReptPickSerials>();
                gvPopComItemSerial.DataSource = _lst;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnInvComSerTotConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (InventoryCombinItemSerialList != null)
                    if (InventoryCombinItemSerialList.Count > 0)
                    {
                        foreach (DataGridViewRow _r in gvPopComItem.Rows)
                        {
                            string _item = _r.Cells["PopComItm_Item"].Value.ToString();
                            decimal _qty = Convert.ToDecimal(_r.Cells["PopComItm_Qty"].Value.ToString());

                            var _serCount = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _item).Count();
                            if (_serCount > 0)
                            {
                                if (Convert.ToDecimal(_serCount) != _qty)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Scan Serial and the qty is mismatching. No of serials : " + FormatToQty(Convert.ToString(Convert.ToDecimal(_serCount))) + ", but approved only " + FormatToQty(Convert.ToString(_qty)), "Qty and Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    return;
                                }
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Scan Serial and the qty is mismatching. No of serials : " + FormatToQty(Convert.ToString(Convert.ToDecimal("0"))) + ", but approved only " + FormatToQty(Convert.ToString(_qty)), "Qty and Serial", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                        }
                        _promotionSerial = new List<ReptPickSerials>();
                        _promotionSerialTemp = new List<ReptPickSerials>();
                        pnlMain.Enabled = true;
                        pnlInventoryCombineSerialPick.Visible = false;
                        AddItem(false, string.Empty);
                    }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void DeleteIfPartlyAdded(int _joblineno, string _itemc, decimal _unitratec, string _bookc, string _levelc, decimal _qtyc, decimal _discountamt, decimal _taxamt, int _itmlineno, int _rowidx)
        {
            Int32 _combineLine = _joblineno;
            if (_MainPriceSerial != null)
                if (_MainPriceSerial.Count > 0)
                {
                    string _item = _itemc;
                    decimal _uRate = _unitratec;
                    string _pbook = _bookc;
                    string _level = _levelc;

                    List<PriceSerialRef> _tempSerial = _MainPriceSerial;
                    var _remove = from _list in _tempSerial
                                  where _list.Sars_itm_cd == _item && _list.Sars_itm_price == _uRate && _list.Sars_pbook == _pbook && _list.Sars_price_lvl == _level
                                  select _list;
                    foreach (PriceSerialRef _single in _remove)
                    {
                        _tempSerial.Remove(_single);
                    }

                    _MainPriceSerial = _tempSerial;
                }

            List<InvoiceItem> _tempList = _invoiceItemList;
            var _promo = (from _pro in _invoiceItemList
                          where _pro.Sad_job_line == _combineLine
                          select _pro).ToList();

            if (_promo.Count() > 0)
            {
                foreach (InvoiceItem code in _promo)
                {
                    CalculateGrandTotal(Convert.ToDecimal(code.Sad_qty), (decimal)code.Sad_unit_rt, (decimal)code.Sad_disc_amt, (decimal)code.Sad_itm_tax_amt, false);
                    ScanSerialList.RemoveAll(x => x.Tus_base_itm_line == code.Sad_itm_line);
                    InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == code.Sad_itm_line);
                }
                if (_tempList != null && _tempList.Count > 0)
                    _tempList.RemoveAll(x => x.Sad_job_line == _combineLine);
            }
            else
            {
                CalculateGrandTotal(_qtyc, _unitratec, _discountamt, _taxamt, false);
                InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == _itmlineno);
                if (_tempList != null && _tempList.Count > 0)
                    try
                    {
                        _tempList.RemoveAt(_rowidx);
                    }
                    catch
                    {
                    }
            }

            _invoiceItemList = _tempList;
            if (_invoiceItemList != null || _invoiceItemList.Count > 0) lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt))); else lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));

            Int32 _newLine = 1;
            List<InvoiceItem> _tempLists = _invoiceItemList;
            if (_tempLists != null)
                if (_tempLists.Count > 0)
                {
                    foreach (InvoiceItem _itm in _tempLists)
                    {
                        Int32 _line = _itm.Sad_itm_line;
                        _invoiceItemList.Where(Y => Y.Sad_itm_line == _line).ToList().ForEach(x => x.Sad_itm_line = _newLine);
                        InvoiceSerialList.Where(y => y.Sap_itm_line == _line).ToList().ForEach(x => x.Sap_itm_line = _newLine);
                        ScanSerialList.Where(y => y.Tus_base_itm_line == _line).ToList().ForEach(x => x.Tus_base_itm_line = _newLine);
                        _newLine += 1;
                    }
                    _lineNo = _newLine - 1;
                }
                else
                {
                    _lineNo = 0;
                }
            else
            {
                _lineNo = 0;
            }
            BindAddItem();
            gvPopSerial.DataSource = new List<ReptPickSerials>();
            gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
            gvGiftVoucher.DataSource = new List<ReptPickSerials>();
            gvGiftVoucher.DataSource = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();
            ucPayModes1.TotalAmount = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
            ucPayModes1.Amount.Text = FormatToCurrency(lblGrndTotalAmount.Text.Trim());
            ucPayModes1.LoadData();
        }

        private void CommonOutScan_AddSerialClick(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                List<ReptPickSerials> _ser = _commonOutScan.SelectedItemList;
                if (_ser != null && _ser.Count > 0)
                {
                    if (ScanSerialList != null && ScanSerialList.Count > 0)
                    {
                        string _dupsLst = string.Empty;
                        Parallel.ForEach(_ser, x => { var _dups = ScanSerialList.Where(y => y.Tus_ser_1 == x.Tus_ser_1 && y.Tus_itm_cd == x.Tus_itm_cd).Count(); if (_dups != 0) if (string.IsNullOrEmpty(_dupsLst)) _dupsLst = "Item : " + x.Tus_itm_cd + "/Serial : " + x.Tus_ser_1; else _dupsLst += ", Item : " + x.Tus_itm_cd + "/Serial : " + x.Tus_ser_1; });
                        if (!string.IsNullOrEmpty(_dupsLst))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Following Item/Serial(s) is duplicating!\n" + _dupsLst, "Duplicates", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            _commonOutScan._DoClose = false;
                            _commonOutScan.SelectedItemList = new List<ReptPickSerials>();
                            return;
                        }
                        else
                            ScanSerialList.AddRange(_ser);
                    }
                    else
                        ScanSerialList.AddRange(_ser);

                    _commonOutScan._DoClose = true;
                    gvPopSerial.DataSource = new List<ReptPickSerials>();
                    gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void gvInvoiceItem_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvInvoiceItem.ColumnCount > 0)
                {
                    Int32 _rowIndex = e.RowIndex;
                    Int32 _colIndex = e.ColumnIndex;
                    if (_rowIndex != -1)
                    {
                        #region Deleting Row

                        if (_colIndex == 0)
                        {
                            if (MessageBox.Show("Do you want to remove?", "Removing...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                            {
                                return;
                            }
                            if (_recieptItem != null)
                                if (_recieptItem.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("You have already payment added!", "Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                            int _combineLine = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_JobLine"].Value);
                            string _resNo = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_ResNo"].Value;//Add by Chamal 6-Jul-2014
                            int _resLine = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_ResLine"].Value);//Add by Chamal 6-Jul-2014

                            //updated by akila 2018/02/05
                            if (_InvEventItems != null && _InvEventList.Count > 0) 
                            {
                                string _deleteItem = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value;
                                string _deleteItmStatus = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Status"].Value;
                                _InvEventItems.RemoveAll(x => x.SERE_ITM_CD == _deleteItem && x.IsSelected == true);
                            }

                            if (_MainPriceSerial != null)
                                if (_MainPriceSerial.Count > 0)
                                {
                                    string _item = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value;
                                    decimal _uRate = (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_UPrice"].Value;
                                    string _pbook = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value;
                                    string _level = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value;

                                    List<PriceSerialRef> _tempSerial = _MainPriceSerial;
                                    var _remove = from _list in _tempSerial
                                                  where _list.Sars_itm_cd == _item && _list.Sars_itm_price == _uRate && _list.Sars_pbook == _pbook && _list.Sars_price_lvl == _level
                                                  select _list;

                                    foreach (PriceSerialRef _single in _remove)
                                    {
                                        _tempSerial.Remove(_single);
                                    }

                                    _MainPriceSerial = _tempSerial;
                                }

                            List<InvoiceItem> _tempList = _invoiceItemList;
                            var _promo = (from _pro in _invoiceItemList
                                          where _pro.Sad_job_line == _combineLine
                                          select _pro).ToList();
                            if (_promo.Count() > 0)
                            {
                                foreach (InvoiceItem code in _promo)
                                {
                                    CalculateGrandTotal(Convert.ToDecimal(code.Sad_qty), (decimal)code.Sad_unit_rt, (decimal)code.Sad_disc_amt, (decimal)code.Sad_itm_tax_amt, false);
                                    ScanSerialList.RemoveAll(x => x.Tus_base_itm_line == code.Sad_itm_line);
                                    InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == code.Sad_itm_line);
                                }
                                _tempList.RemoveAll(x => x.Sad_job_line == _combineLine);
                            }
                            else
                            {
                                CalculateGrandTotal(Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Qty"].Value), (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_UPrice"].Value, (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_DisAmt"].Value, (decimal)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_TaxAmt"].Value, false);
                                InvoiceSerialList.RemoveAll(x => x.Sap_itm_line == _tempList[_rowIndex].Sad_itm_line);
                                _tempList.RemoveAt(_rowIndex);
                            }
                            _invoiceItemList = _tempList;

                            if (_resNo == "PROMO_VOU" && _resLine == Convert.ToInt32(lblPromoVouNo.Text.ToString()))
                            {
                                //Add by Chamal 6-Jul-2014
                                //lblPromoVouUsedFlag.Text = "";    //kapila comented on 15/12/16
                                //lblPromoVouNo.Text = "";
                                //lblPVDisc.Text = "";
                                //lblPVTp.Text = "";
                                //lblPVBal.Text = "";

                                _proVouInvcItem = "";
                                _proVouInvcLine = 0;
                            }

                            int _newLine = 1;
                            List<InvoiceItem> _tempLists = _invoiceItemList;
                            if (_tempLists != null)
                                if (_tempLists.Count > 0)
                                {
                                    foreach (InvoiceItem _itm in _tempLists)
                                    {
                                        Int32 _line = _itm.Sad_itm_line;
                                        _invoiceItemList.Where(Y => Y.Sad_itm_line == _line).ToList().ForEach(x => x.Sad_itm_line = _newLine);
                                        InvoiceSerialList.Where(y => y.Sap_itm_line == _line).ToList().ForEach(x => x.Sap_itm_line = _newLine);
                                        ScanSerialList.Where(y => y.Tus_base_itm_line == _line).ToList().ForEach(x => x.Tus_base_itm_line = _newLine);

                                        _newLine += 1;
                                    }
                                    _lineNo = _newLine - 1;
                                }
                                else _lineNo = 0;
                            else _lineNo = 0;
                            BindAddItem();
                            if (_invoiceItemList != null || _invoiceItemList.Count > 0) lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt))); else lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0"));
                            gvPopSerial.DataSource = new List<ReptPickSerials>();
                            gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
                            gvGiftVoucher.DataSource = new List<ReptPickSerials>();
                            gvGiftVoucher.DataSource = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();

                            //update promotion
                            //update promotion
                            List<InvoiceItem> _temItems = (from _invItm in _invoiceItemList
                                                           where !string.IsNullOrEmpty(_invItm.Sad_promo_cd)
                                                           select _invItm).ToList<InvoiceItem>();
                            if (_temItems != null && _temItems.Count > 0)
                            {
                                ucPayModes1.ISPromotion = true;
                            }
                            else
                                ucPayModes1.ISPromotion = false;
                            ucPayModes1.TotalAmount = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                            ucPayModes1.Amount.Text = FormatToCurrency(lblGrndTotalAmount.Text.Trim());
                            ucPayModes1.LoadData();
                            LookingForBuyBack();

                            //REGISTRATION PROCESS
                            //ADDED 2013/12/06
                            //search invoice item list if registration item not found set visibility
                            if (_isRegistrationMandatory && _isNeedRegistrationReciept)
                            {
                                bool _isHaveReg = false;
                                if (_invoiceItemList != null && _invoiceItemList.Count > 0)
                                {
                                    foreach (InvoiceItem _invItm in _invoiceItemList)
                                    {
                                        //check item need registration
                                        MasterItem _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                                        if (_itm != null)
                                        {
                                            if (_itm.Mi_need_reg)
                                            {
                                                _isHaveReg = true;
                                                break;
                                            }
                                        }
                                    }
                                }

                                if (!_isHaveReg)
                                {
                                    _isNeedRegistrationReciept = false;
                                    lnkProcessRegistration.Visible = false;
                                }
                            }
                            //END

                            return;
                        }
                        if (_colIndex == 1)
                        {
                            return;
                        }
                        if (_colIndex == 7)// Nadeeka 23-09-2015
                        {
                            if (chkBasedOnAdvanceRecept.Checked)
                            {

                                decimal _prevousQty = Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Qty"].Value);
                                int _lineno0 = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_No"].Value);
                                string _book = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value);
                                string _level = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value);
                                string _item = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value);
                                string _status = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Status"].Value);
                                bool _isSerialized = false;

                            xy:
                                string _userQty = Microsoft.VisualBasic.Interaction.InputBox("Enter the invoice Qty", "Invoice Qty Change", Convert.ToString(_prevousQty), this.Width / 2, this.Height / 2);
                                if (string.IsNullOrEmpty(_userQty))
                                    return;
                                if (IsNumeric(_userQty) == false || Convert.ToDecimal(_userQty) < 0)
                                {
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid Qty", "Invalid Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    goto xy;
                                }
                                decimal _invQty = Convert.ToDecimal(_userQty);




                                if (_prevousQty < _invQty)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not qty   more than " + _prevousQty + ".", "Invoice Qty Change", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }


                                var _itm = _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList();
                                if (_item != null && _item.Count() > 0) foreach (InvoiceItem _one in _itm)
                                    {
                                        _one.Sad_qty = _invQty;

                                        decimal _unitRate = _one.Sad_unit_rt;
                                        decimal _unitAmt = (_one.Sad_unit_amt / _prevousQty) * _invQty;
                                        decimal _disVal = (_one.Sad_disc_amt / _prevousQty) * _invQty;
                                        decimal _vatPortion = (_one.Sad_itm_tax_amt / _prevousQty) * _invQty;
                                        decimal _lineamount = (_one.Sad_tot_amt / _prevousQty) * _invQty;
                                        decimal _newvatval = 0;
                                        CalculateGrandTotal(_one.Sad_qty, _one.Sad_unit_rt, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, false);
                                        bool _isTaxDiscount = chkTaxPayable.Checked ? true : (lblSVatStatus.Text == "Available") ? true : false;

                                        if (_disVal > 0)
                                        {
                                            _lineamount = FigureRoundUp(_unitRate * _one.Sad_qty + _vatPortion - _disVal, true);
                                            _vatPortion = FigureRoundUp(_newvatval, true);
                                        }
                                        else
                                        {
                                            _lineamount = FigureRoundUp(_unitRate * _one.Sad_qty + _vatPortion - _disVal, true);
                                        }


                                        _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_qty = _invQty);
                                        _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_unit_amt = _invQty * _unitRate);
                                        _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_disc_amt = _disVal);
                                        _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_itm_tax_amt = _vatPortion);
                                        _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_tot_amt = FigureRoundUp(_lineamount, true));
                                        BindAddItem();
                                        CalculateGrandTotal(_one.Sad_qty, _unitRate, _disVal, _vatPortion, true);
                                        decimal _tobepays = 0;
                                        if (lblSVatStatus.Text == "Available") _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()); else _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                                        ucPayModes1.TotalAmount = _tobepays;
                                        //update promotion
                                        List<InvoiceItem> _temItems = (from _invItm in _invoiceItemList
                                                                       where !string.IsNullOrEmpty(_invItm.Sad_promo_cd)
                                                                       select _invItm).ToList<InvoiceItem>();
                                        if (_temItems != null && _temItems.Count > 0)
                                        {
                                            ucPayModes1.ISPromotion = true;
                                        }
                                        else
                                            ucPayModes1.ISPromotion = false;
                                        ucPayModes1.InvoiceItemList = _invoiceItemList;
                                        ucPayModes1.SerialList = InvoiceSerialList;
                                        ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                                        if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                                            ucPayModes1.LoadData();
                                    }


                            }
                        }


                        if (_colIndex == 2 && chkDeliverLater.Checked == false)
                        {
                            string _item = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value;
                            string _status = (string)gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Status"].Value;
                            int _itemLineNo = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_No"].Value.ToString());
                            decimal _invoiceQty = Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Qty"].Value.ToString());
                            decimal _doQty = 0;
                            decimal _scanQty = 0;
                            if (ScanSerialList != null) _scanQty = ScanSerialList.Where(x => x.Tus_base_itm_line == _itemLineNo).Sum(x => x.Tus_qty);
                            string _priceBook = gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value.ToString();
                            string _priceLevel = gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value.ToString();
                            int pbCount = CHNLSVC.Sales.GetDOPbCount(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                            string _promotioncd = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_PromoCd"].Value);
                            bool _isAgePriceLevel = false;
                            int _ageingDays = -1;
                            MasterItem _itemM = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                            if (_itemM.Mi_is_ser1 == -1 || _itemM.Mi_is_ser1 == 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You do not need to pick non-serialized item.", "Non-Serialized", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                            DataTable _categoryDet = CHNLSVC.General.GetMainCategoryDetail(_itemM.Mi_cate_1);
                            List<PriceBookLevelRef> _level = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                            if (_level != null)
                                if (_level.Count > 0)
                                {
                                    var _lvl = _level.Where(x => x.Sapl_isage).ToList();
                                    if (_lvl != null) if (_lvl.Count() > 0)
                                            _isAgePriceLevel = true;
                                }

                            if (_categoryDet != null && _isAgePriceLevel)
                                if (_categoryDet.Rows.Count > 0)
                                {
                                    if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                                        _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                                    else _ageingDays = 0;
                                }
                            if ((_invoiceQty - _doQty) <= 0) return;
                            if ((_invoiceQty - _doQty) <= _scanQty) return;
                            _commonOutScan = new CommonSearch.CommonOutScan();
                            _commonOutScan._isWriteToTemporaryTable = false;
                            _commonOutScan.ModuleTypeNo = 1;
                            _commonOutScan.ScanDocument = "N/A";
                            _commonOutScan.DocumentType = "DO";
                            _commonOutScan.PopupItemCode = _item;
                            _commonOutScan.ItemStatus = _status;
                            _commonOutScan.ItemLineNo = _itemLineNo;
                            _commonOutScan.PopupQty = _invoiceQty - _doQty;
                            _commonOutScan.ApprovedQty = _doQty;
                            _commonOutScan.ScanQty = _scanQty;
                            _commonOutScan.IsAgePriceLevel = _isAgePriceLevel;
                            _commonOutScan.DocumentDate = txtDate.Value.Date;
                            _commonOutScan.NoOfDays = _ageingDays;
                            if (pbCount <= 0) _commonOutScan.IsCheckStatus = false;
                            else _commonOutScan.IsCheckStatus = true;
                            _commonOutScan.AddSerialClick += new EventHandler(CommonOutScan_AddSerialClick);
                            _commonOutScan.Location = new Point(((this.Width - _commonOutScan.Width) / 2), ((this.Height - _commonOutScan.Height) / 2) + 50);
                            _commonOutScan.ShowDialog();
                            return;
                        }
                        if (_colIndex == 10 && _isEditPrice == false)
                        {
                            decimal _prevousDisRate = Convert.ToDecimal(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_DisRate"].Value);
                            int _lineno0 = Convert.ToInt32(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_No"].Value);
                            string _book = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Book"].Value);
                            string _level = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Level"].Value);
                            string _item = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value);
                            string _status = Convert.ToString(gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Status"].Value);
                            bool _isSerialized = false;

                        xy:
                            string _userDisRate = Microsoft.VisualBasic.Interaction.InputBox("Enter the discount rate", "Discount", Convert.ToString(_prevousDisRate), this.Width / 2, this.Height / 2);
                            if (string.IsNullOrEmpty(_userDisRate))
                                return;
                            if (IsNumeric(_userDisRate) == false || Convert.ToDecimal(_userDisRate) > 100 || Convert.ToDecimal(_userDisRate) < 0)
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid discount rate", "Invalid Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                goto xy;
                            }
                            decimal _disRate = Convert.ToDecimal(_userDisRate);
                            bool _IsPromoVou = false;
                            if (GeneralDiscount == null) GeneralDiscount = new CashGeneralEntiryDiscountDef();
                            //GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(txtDate.Text.Trim()).Date, _book, _level, txtCustomer.Text.Trim(), _item, _isSerialized, false);

                            if (string.IsNullOrEmpty(lblPromoVouNo.Text))
                            {
                                GeneralDiscount = CHNLSVC.Sales.GetGeneralDiscountDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, Convert.ToDateTime(txtDate.Text.Trim()).Date, _book, _level, txtCustomer.Text.Trim(), _item, _isSerialized, false);
                            }
                            else
                            {
                                GeneralDiscount = CHNLSVC.Sales.GetPromoVoucherNoDefinition(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtCustomer.Text.Trim(), Convert.ToDateTime(txtDate.Text.Trim()).Date, _book, _level, _item, lblPromoVouNo.Text.Trim());
                                if (GeneralDiscount != null)
                                {
                                    _IsPromoVou = true;
                                    GeneralDiscount.Sgdd_seq = Convert.ToInt32(lblPromoVouNo.Text);
                                }
                            }


                            if (GeneralDiscount != null)
                            {
                                decimal vals = GeneralDiscount.Sgdd_disc_val;
                                decimal rates = GeneralDiscount.Sgdd_disc_rt;

                                if (lblPromoVouUsedFlag.Text.Contains("U") == true)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher already used!", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    txtDisRate.Text = FormatToCurrency("0");
                                    _isEditDiscount = false;
                                    return;
                                }
                                if (_IsPromoVou == true)
                                {
                                    if (rates == 0 && vals > 0)
                                    {
                                        // CalculateItem();
                                        if (Convert.ToDecimal(txtDisAmt.Text) > vals)
                                        {
                                            this.Cursor = Cursors.Default;
                                            using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discuount amount should be " + vals + ".\nNot allowed discount rate " + _disRate + "%", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                            // txtDisRate.Text = FormatToCurrency("0");
                                            // CalculateItem();
                                            _isEditDiscount = false;
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        //kapila 2/11/2016
                                        var _itm_ = _invoiceItemList.Where(x => x.Sad_disc_rt == rates).ToList();
                                        if (_itm_.Count > 0)
                                        {
                                            this.Cursor = Cursors.Default;
                                            using (new CenterWinDialog(this)) { MessageBox.Show("Already discount is used", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                            txtDisRate.Text = FormatToCurrency("0");
                                            CalculateItem();
                                            _isEditDiscount = false;
                                            return;
                                        }
                                        //kapila commented req by wathsala costing dept
                                        //if (rates != _disRate)
                                        //{
                                        //    // CalculateItem();
                                        //    this.Cursor = Cursors.Default;
                                        //    using (new CenterWinDialog(this)) { MessageBox.Show("Voucher discuount rate should be " + rates + "% !.\nNot allowed discount rate " + _disRate + "% discounted price is " + txtLineTotAmt.Text, "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                        //    //  txtDisRate.Text = FormatToCurrency("0");
                                        //    // CalculateItem();
                                        //    _isEditDiscount = false;
                                        //    return;
                                        //}
                                    }
                                }
                                else
                                {
                                    if (rates < _disRate)
                                    {
                                        this.Cursor = Cursors.Default;
                                        using (new CenterWinDialog(this)) { MessageBox.Show("You can not discount price more than " + rates + "%.", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                        return;
                                    }
                                }
                            }
                            else
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("You are not allow for apply discount", "Discount Rate", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return;
                            }

                            if (_isEditDiscount == true)
                            {
                                if (_IsPromoVou == true)
                                {
                                    //lblPromoVouUsedFlag.Text = "U";
                                    _proVouInvcItem = _item;
                                }
                            }

                            var _itm = _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList();
                            if (_item != null && _item.Count() > 0) foreach (InvoiceItem _one in _itm)
                                {
                                    CalculateGrandTotal(_one.Sad_qty, _one.Sad_unit_rt, _one.Sad_disc_amt, _one.Sad_itm_tax_amt, false);
                                    decimal _unitRate = _one.Sad_unit_rt;
                                    decimal _unitAmt = _one.Sad_unit_rt * _one.Sad_qty; //_one.Sad_unit_amt;
                                    decimal _disVal = 0;
                                    decimal _vatPortion = 0;
                                    decimal _lineamount = 0;
                                    decimal _newvatval = 0;

                                    bool _isTaxDiscount = chkTaxPayable.Checked ? true : (lblSVatStatus.Text == "Available") ? true : false;

                                    if (_isTaxDiscount)
                                    {
                                        _vatPortion = FigureRoundUp(TaxCalculation(_item, _status, _one.Sad_qty, _priceBookLevelRef, _unitRate, _disVal, _disRate, true), true);
                                        _disVal = FigureRoundUp(_unitAmt * _disRate / 100, true);
                                        _lineamount = FigureRoundUp(_unitAmt + _vatPortion - _disVal, true);
                                    }
                                    else
                                    {
                                        _vatPortion = FigureRoundUp(TaxCalculation(_item, _status, _one.Sad_qty, _priceBookLevelRef, _unitRate, _disVal, _disRate, true), true);
                                        _disVal = FigureRoundUp((_unitAmt + _vatPortion) * _disRate / 100, true);

                                        if (_disRate > 0)
                                        {
                                            //updated by akila 2017/11/07
                                            decimal _tmpUnitAmount = (_unitAmt + _vatPortion - _disVal);
                                            _newvatval = RecalculateTax(_tmpUnitAmount, _vatPortion, _item, _status, true);
                                            //List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, string.Empty);
                                            //if (_tax != null && _tax.Count > 0)
                                            //{
                                            //    _newvatval = ((_unitRate * _one.Sad_qty + _vatPortion - _disVal) * _tax[0].Mict_tax_rate) / (100 + _tax[0].Mict_tax_rate);
                                            //}
                                        }
                                        if (_disRate > 0)
                                        {
                                            _lineamount = FigureRoundUp(_unitAmt + _vatPortion - _disVal, true);
                                            _vatPortion = FigureRoundUp(_newvatval, true);
                                        }
                                        else
                                        {
                                            _disVal = 0;
                                            _lineamount = FigureRoundUp(_unitAmt + _vatPortion - _disVal, true);
                                        }
                                    }
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_disc_rt = _disRate);
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_disc_amt = _disVal);
                                    if (lblVatExemptStatus.Text!="Available")
                                    {
                                         _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_itm_tax_amt = _vatPortion);
                                    }
                                   // _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_itm_tax_amt = _vatPortion);
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_tot_amt = FigureRoundUp(_lineamount, true));
                                    if (_proVouInvcItem == txtItem.Text.ToString())
                                    {
                                        if (string.IsNullOrEmpty(lblPromoVouUsedFlag.Text) && !string.IsNullOrEmpty(lblPromoVouNo.Text))
                                        {
                                            lblPromoVouUsedFlag.Text = "U";
                                            _proVouInvcLine = _lineno0;
                                            _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_res_line_no = Convert.ToInt32(lblPromoVouNo.Text.ToString()));
                                            _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_res_no = "PROMO_VOU");
                                            _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_dis_seq = Convert.ToInt32(lblPromoVouNo.Text.ToString()));
                                            _invoiceItemList.Where(x => x.Sad_itm_line == _lineno0).ToList().ForEach(x => x.Sad_dis_type = "M");
                                            //_tempItem.Sad_res_line_no = Convert.ToInt32(lblPromoVouNo.Text.ToString());
                                            //_tempItem.Sad_res_no = "PROMO_VOU";
                                        }
                                    }
                                    BindAddItem();
                                    CalculateGrandTotal(_one.Sad_qty, _unitRate, _disVal, _vatPortion, true);
                                    decimal _tobepays = 0;
                                    if (lblSVatStatus.Text == "Available") _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim()); else _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                                    ucPayModes1.TotalAmount = _tobepays;
                                    //update promotion
                                    List<InvoiceItem> _temItems = (from _invItm in _invoiceItemList
                                                                   where !string.IsNullOrEmpty(_invItm.Sad_promo_cd)
                                                                   select _invItm).ToList<InvoiceItem>();
                                    if (_temItems != null && _temItems.Count > 0)
                                    {
                                        ucPayModes1.ISPromotion = true;
                                    }
                                    else
                                        ucPayModes1.ISPromotion = false;
                                    ucPayModes1.InvoiceItemList = _invoiceItemList;
                                    ucPayModes1.SerialList = InvoiceSerialList;
                                    ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                                    if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                                        ucPayModes1.LoadData();
                                }
                        }

                        #endregion Deleting Row
                    }

                    //add by akila 2017/08/14 - add reservation number. Reservation number will be added in line level. if reservation check box has tick user need to add reservation number when add item.
                    if ((_rowIndex != -1) && (_colIndex == 27))
                    {
                        if (MessageBox.Show("Do you want to add reservation #?", "Add Reservation", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                        {
                            if ((_invoiceItemList != null) && (_invoiceItemList.Count > 0))
                            {
                                pnlReservation.Visible = true;
                                // pnlRegistration.Size = new Size(310, 70);                            
                                _selectedItemLine = _invoiceItemList.Where(x => x.Sad_itm_cd == gvInvoiceItem.Rows[_rowIndex].Cells["InvItm_Item"].Value.ToString()).First().Sad_itm_line;
                            }                            
                        }
                    }                    
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private bool IsInvoiceItemNSerialListTally(out string _Item)
        {
            bool _tally = true;
            string _errorItem = string.Empty;
            if (IsPriceLevelAllowDoAnyStatus)
            {
                var _itemswitouthstatus = (from _l in _invoiceItemList where !IsGiftVoucher(_l.Sad_itm_tp) && !IsVirtual(_l.Sad_itm_tp) group _l by new { _l.Sad_itm_cd } into _i select new { Sad_itm_cd = _i.Key.Sad_itm_cd, Sad_qty = _i.Sum(p => p.Sad_qty) }).ToList();
                Parallel.ForEach(_itemswitouthstatus, _itm =>
                {
                    string _item = _itm.Sad_itm_cd;
                    decimal _qty = _itm.Sad_qty;

                    decimal _scanItemQty = (from _n in ScanSerialList where _n.Tus_itm_cd == _item select _n.Tus_qty).Sum();
                    if (_qty != _scanItemQty)
                    {
                        if (string.IsNullOrEmpty(_errorItem))
                            _errorItem = _item;
                        else
                            _errorItem += ", " + _item;
                        _tally = false;
                    }
                });
            }
            else
            {
                var _itemswithstatus = (from _l in _invoiceItemList where !IsGiftVoucher(_l.Sad_itm_tp) && !IsVirtual(_l.Sad_itm_tp) group _l by new { _l.Sad_itm_cd, _l.Sad_itm_stus } into _i select new { Sad_itm_cd = _i.Key.Sad_itm_cd, Sad_itm_stus = _i.Key.Sad_itm_stus, Sad_qty = _i.Sum(p => p.Sad_qty) }).ToList();
                Parallel.ForEach(_itemswithstatus, _itm =>
                {
                    string _item = _itm.Sad_itm_cd;
                    string _status = _itm.Sad_itm_stus;
                    decimal _qty = _itm.Sad_qty;

                    decimal _scanItemQty = (from _n in ScanSerialList where _n.Tus_itm_cd == _item && _n.Tus_itm_stus == _status select _n.Tus_qty).Sum();
                    if (_qty != _scanItemQty)
                    {
                        if (string.IsNullOrEmpty(_errorItem))
                            _errorItem = _item;
                        else
                            _errorItem += ", " + _item;
                        _tally = false;
                    }
                });
            }
            _Item = _errorItem;
            return _tally;
        }

        private bool IsInventoryBalanceNInvoiceItemTally(out string _NotTallyList)
        {
            bool availability = true;
            MasterItem _itm = null;
            string _itemList = string.Empty;

            var _modifySerialList = (from _l in ScanSerialList group _l by new { _l.Tus_itm_cd, _l.Tus_itm_stus, _l.Tus_ser_1 } into _new select new { Tus_itm_cd = _new.Key.Tus_itm_cd, Tus_itm_stus = _new.Key.Tus_itm_stus, Tus_ser_1 = _new.Key.Tus_ser_1, Tus_qty = _new.Sum(p => p.Tus_qty) }).ToList();

            foreach (var _serial in _modifySerialList)
            {
                _itm = null;
                string _item = _serial.Tus_itm_cd;
                string _serialno = _serial.Tus_ser_1;
                string _status = _serial.Tus_itm_stus;
                decimal _qty = _serial.Tus_qty;
                _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
                if (IsGiftVoucher(_itm.Mi_itm_tp)) continue;

                bool _isAgePriceLevel = false;
                int _noofDays = 0;
                DateTime _serialpickingdate = txtDate.Value.Date;
                CheckNValidateAgeItem(_item, _itm.Mi_cate_1, cmbBook.Text.Trim(), cmbLevel.Text.Trim(), _status, out _isAgePriceLevel, out _noofDays);
                if (_isAgePriceLevel) _serialpickingdate.AddDays(-_noofDays);
                if (_itm.Mi_is_ser1 == 1)
                {
                    //ReptPickSerials _chk = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, _item, _serialno);
                    ReptPickSerials _chk = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "-2", _item, _serialno);//add by tharanga 2018/04/25 get resave qty det
                    if (string.IsNullOrEmpty(_chk.Tus_com)) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                    else if (IsPriceLevelAllowDoAnyStatus == false)
                        if (_chk.Tus_itm_stus != _status) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                }
                else if (_itm.Mi_is_ser1 == 0)
                {
                    List<ReptPickSerials> _chk;
                    if (IsPriceLevelAllowDoAnyStatus == false)
                        _chk = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, _status, _qty, _serialpickingdate.Date);
                    else
                        _chk = CHNLSVC.Inventory.GetNonSerializedItemRandomlyByDate(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty, _qty, _serialpickingdate.Date);
                    if (_chk != null)
                        if (_chk.Count > 0)
                        {
                            if (IsPriceLevelAllowDoAnyStatus == false)
                            {
                                decimal _statuswiseqty = (from i in _chk where i.Tus_itm_cd == _item && i.Tus_itm_stus == _status select i.Tus_qty).Sum();
                                if (_statuswiseqty < _qty) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                            }
                            else
                                if (_chk.Count() < _qty) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                        }
                        else { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                    else { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                }
                else if (_itm.Mi_is_ser1 == -1)
                {
                    List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, string.Empty);

                    if (_inventoryLocation != null)
                        if (_inventoryLocation.Count > 0)
                        {
                            if (IsPriceLevelAllowDoAnyStatus == false)
                            {
                                decimal _statuswiseqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item && i.Inl_itm_stus == _status select i.Inl_free_qty).Sum();
                                if (_statuswiseqty < _qty) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                            }
                            else
                            {
                                decimal _withoustusqty = (from i in _inventoryLocation where i.Inl_itm_cd == _item select i.Inl_free_qty).Sum();
                                if (_withoustusqty < _qty) { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                            }
                        }
                        else { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                    else { availability = false; if (string.IsNullOrEmpty(_itemList)) _itemList = _item; else _itemList += "," + _item; }
                }
            }
            _NotTallyList = _itemList;
            return availability;
        }

        private void CollectBusinessEntity()
        {
            _businessEntity = new MasterBusinessEntity();
            _businessEntity.Mbe_act = true;
            _businessEntity.Mbe_add1 = txtAddress1.Text;
            _businessEntity.Mbe_add2 = txtAddress2.Text;

            //akila 2017/10/12
            if ((string.IsNullOrEmpty(txtCustomer.Text)) && (IsNewCustomer))
            {
                _businessEntity.Mbe_cd = "CASH"; //new customer
            }
            else
            {
                _businessEntity.Mbe_cd = txtCustomer.Text;
            }

            //_businessEntity.Mbe_cd = "c1";
            _businessEntity.Mbe_com = BaseCls.GlbUserComCode;
            _businessEntity.Mbe_contact = string.Empty;
            _businessEntity.Mbe_email = string.Empty;
            _businessEntity.Mbe_fax = string.Empty;
            _businessEntity.Mbe_is_tax = false;
            _businessEntity.Mbe_mob = txtMobile.Text;
            _businessEntity.Mbe_name = txtCusName.Text;
            _businessEntity.Mbe_nic = txtNIC.Text;
            _businessEntity.Mbe_tax_no = string.Empty;
            _businessEntity.Mbe_tel = string.Empty;
            _businessEntity.Mbe_tp = "C";
            _businessEntity.Mbe_pc_stus = "GOOD";
            _businessEntity.Mbe_ho_stus = "GOOD";
            _businessEntity.MBE_TIT = cmbTitle.Text;
            _businessEntity.Mbe_cate = "INDIVIDUAL";
            _businessEntity.Mbe_town_cd = txtPerTown.Text.ToUpper();// Nadeeka 

            _businessEntity.Mbe_cre_by = BaseCls.GlbUserID;
            _businessEntity.Mbe_mod_by = BaseCls.GlbUserID;
            _businessEntity.Mbe_mod_dt = DateTime.Now;
            _businessEntity.Mbe_mod_session = BaseCls.GlbUserSessionID;
            _businessEntity.Mbe_cre_session = BaseCls.GlbUserSessionID;
        }

        private Dictionary<string, string> GetInvoiceSerialnWarranty(string _invoiceno)
        {
            StringBuilder _serial = new StringBuilder();
            StringBuilder _warranty = new StringBuilder();
            Dictionary<string, string> _list = new Dictionary<string, string>();
            List<ReptPickSerials> _advSerial = CHNLSVC.Inventory.GetInvoiceAdvanceReceiptSerial(BaseCls.GlbUserComCode, _invoiceno);
            List<InventorySerialN> _invSerial = CHNLSVC.Inventory.GetDeliveredSerialDetail(BaseCls.GlbUserComCode, _invoiceno);

            if (_advSerial != null)
                if (_advSerial.Count > 0)
                {
                    foreach (ReptPickSerials _x in _advSerial)
                    {
                        if (string.IsNullOrEmpty(_serial.ToString()))
                        {
                            _serial.Append(_x.Tus_ser_1);
                            _serial.Append("/");
                            _serial.Append(_x.Tus_ser_2);
                            _warranty.Append(_x.Tus_warr_no);
                        }
                        else
                        {
                            _serial.Append(", " + _x.Tus_ser_1);
                            _serial.Append("/");
                            _serial.Append(_x.Tus_ser_2);
                            _warranty.Append(", " + _x.Tus_warr_no);
                        }
                    }
                }
            if (_invSerial != null)
                if (_invSerial.Count > 0)
                {
                    foreach (InventorySerialN _x in _invSerial)
                    {
                        if (string.IsNullOrEmpty(_serial.ToString()))
                        {
                            _serial.Append(_x.Ins_ser_1);
                            _serial.Append("/");
                            _serial.Append(_x.Ins_ser_2);
                            _warranty.Append(_x.Ins_warr_no);
                        }
                        else
                        {
                            _serial.Append(", " + _x.Ins_ser_1);
                            _serial.Append("/");
                            _serial.Append(_x.Ins_ser_2);
                            _warranty.Append(", " + _x.Ins_warr_no);
                        }
                    }
                }

            _list.Add(_serial.ToString(), _warranty.ToString());
            return _list;
        }

        private bool IsBackDateOk(bool _isDelverNow, bool _isBuyBackItemAvailable)
        {
            bool _isOK = true;
            _isBackDate = true;
            bool _allowCurrentTrans = false;
            if (IsAllowBackDateForModule(BaseCls.GlbUserComCode, string.Empty.ToUpper().ToString(), BaseCls.GlbUserDefProf, this.GlbModuleName, txtDate, lblBackDateInfor, txtDate.Value.Date.ToString(), out _allowCurrentTrans) == false)
            {
                if (_allowCurrentTrans == true)
                {
                    if (txtDate.Value.Date != DateTime.Now.Date)
                    {
                        //txtDate.Enabled = true;
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Back date not allow for selected date for the profit center " + BaseCls.GlbUserDefProf + "!.", "Process Terminated", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtDate.Focus();
                        _isOK = false;
                        _isBackDate = false;
                        return _isOK;
                    }
                }
                else
                {
                    //txtDate.Enabled = true;
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Back date not allow for selected date for the profit center " + BaseCls.GlbUserDefProf + "!.", "Process Terminated", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtDate.Focus();
                    _isOK = false;
                    _isBackDate = false;
                    return _isOK;
                }
            }
            return _isOK;
        }

        #region Rooting for Save Invoice

        public static string FormatDiscoutnItem(int Indent, string Value)
        {
            return new string('\t', Indent) + Value;
        }

        private VehicalRegistration AssingRegDetails(string _itm, decimal _reg, decimal _claim, string _engine, string _chassis)
        {
            VehicalRegistration _tempReg = new VehicalRegistration();
            MasterItem _itemList = new MasterItem();
            _itemList = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itm.Trim());

            _tempReg.P_seq = 1;
            _tempReg.P_srvt_ref_no = "na";
            _tempReg.P_svrt_com = BaseCls.GlbUserComCode;
            _tempReg.P_svrt_pc = BaseCls.GlbUserDefProf;
            _tempReg.P_svrt_dt = Convert.ToDateTime(txtDate.Value).Date;
            //_tempReg.P_svrt_inv_no = txtInvoice.Text.Trim();
            _tempReg.P_svrt_sales_tp = cmbInvType.SelectedValue.ToString();
            _tempReg.P_svrt_reg_val = _reg;
            _tempReg.P_svrt_claim_val = _claim;
            _tempReg.P_svrt_id_tp = "NIC";
            _tempReg.P_svrt_id_ref = txtNIC.Text.Trim();
            _tempReg.P_svrt_cust_cd = txtCustomer.Text.Trim();
            _tempReg.P_svrt_cust_title = "Mr.";
            _tempReg.P_svrt_last_name = txtCusName.Text.Trim();
            _tempReg.P_svrt_full_name = txtCusName.Text.Trim();
            _tempReg.P_svrt_initial = "";
            _tempReg.P_svrt_add01 = txtAddress1.Text;
            _tempReg.P_svrt_add02 = txtAddress2.Text.Trim();
            _tempReg.P_svrt_city = "";
            _tempReg.P_svrt_district = _masterBusinessCompany.Mbe_distric_cd;
            _tempReg.P_svrt_province = _masterBusinessCompany.Mbe_province_cd;
            _tempReg.P_svrt_contact = txtMobile.Text.Trim();
            _tempReg.P_svrt_model = _itemList.Mi_model;
            _tempReg.P_svrt_brd = _itemList.Mi_brand;
            _tempReg.P_svrt_chassis = _chassis;
            _tempReg.P_svrt_engine = _engine;
            _tempReg.P_svrt_color = _itemList.Mi_color_ext;
            _tempReg.P_svrt_fuel = "";
            _tempReg.P_svrt_capacity = 0;
            _tempReg.P_svrt_unit = "";
            _tempReg.P_svrt_horse_power = 0;
            _tempReg.P_svrt_wheel_base = 0;
            _tempReg.P_svrt_tire_front = "";
            _tempReg.P_svrt_tire_rear = "";
            _tempReg.P_svrt_weight = 0;
            _tempReg.P_svrt_man_year = 0;
            _tempReg.P_svrt_import = "";
            _tempReg.P_svrt_authority = "";
            _tempReg.P_svrt_country = _itemList.Mi_country_cd;
            _tempReg.P_svrt_custom_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_clear_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_declear_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_importer = "";
            _tempReg.P_svrt_importer_add01 = "";
            _tempReg.P_svrt_importer_add02 = "";
            _tempReg.P_svrt_cre_bt = BaseCls.GlbUserID;
            _tempReg.P_svrt_cre_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_prnt_stus = 0;
            _tempReg.P_svrt_prnt_by = "";
            _tempReg.P_svrt_prnt_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_srvt_rmv_stus = 0;
            _tempReg.P_srvt_rmv_by = "";
            _tempReg.P_srvt_rmv_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_veh_reg_no = "";
            _tempReg.P_svrt_reg_by = "";
            _tempReg.P_svrt_reg_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_svrt_image = "";
            _tempReg.P_srvt_cust_stus = 0;
            _tempReg.P_srvt_cust_by = "";
            _tempReg.P_srvt_cust_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_srvt_cls_stus = 0;
            _tempReg.P_srvt_cls_by = "";
            _tempReg.P_srvt_cls_dt = Convert.ToDateTime("31/Dec/2999");
            _tempReg.P_srvt_insu_ref = "";
            _tempReg.P_srvt_itm_cd = _itm;
            return _tempReg;
        }

        private void btnSave_Click(object sender, EventArgs e)
        {            
            button1.Focus();
            //kapila 25/2/2017
            if (CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 10156))
            {
                MessageBox.Show("You are not allowed to save the invoice. you have only viewing permission(10156)", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //add by akial 2017/010/16 to prevent invoic dupicate issue.
            if (IsInvoiceCompleted)
            {
                MessageBox.Show("This invoice is already done.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (btnSave.Enabled == false) return;
            _serialMatch = true;

            try
            {
                if (CheckServerDateTime() == false) return;

                string _mainInvTp = ""; //Sanjeewa 2017-12-13
                List<MasterInvoiceType> _list = CHNLSVC.Sales.GetAllInvoiceType();
                List<MasterInvoiceType> _list1 = new List<MasterInvoiceType>();
                _list1 = _list.OrderBy(x => x.Srtp_cd).Where(x => x.Srtp_cd == cmbInvType.Text.Trim()).ToList();
                foreach (MasterInvoiceType _tmp in _list1)
                {
                    _mainInvTp = _tmp.Srtp_main_tp;
                }
                if (_mainInvTp=="")
                {
                    _mainInvTp = "CASH";
                }
                //ADDED 2013/12/09
                //IF REGISTRATION NEED CAN NOT PROCEESS
                //WITHOUT REGISTRATION RECIEPT
                if (Convert.ToDecimal(lblGrndTotalAmount.Text) < 0)
                {
                    MessageBox.Show("Total invoice amount cannot be less than zero.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                //Akila 2017/10/26
                if ((!string.IsNullOrEmpty(txtCustomer.Text.Trim())) && (txtCustomer.Text != "CASH") && (BaseCls.GlbUserComCode != "AAL"))
                {
                    if (!IsCustCreditLimitIsValid())
                    {
                        return;
                    }
                }

                if (_isNeedRegistrationReciept)
                {
                    if (_List == null || _List.Count <= 0)
                    {
                        MessageBox.Show("Registration Details not found.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                    decimal _payAmt = ucPayModes2.RecieptItemList.Sum(x => x.Sard_settle_amt);
                    if (_payAmt < _totalRegistration)
                    {
                        MessageBox.Show("Please enter full Registration Amount.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }
                }

                //END

                if (string.IsNullOrEmpty(Convert.ToString(cmbExecutive.SelectedValue)))
                {
                    MessageBox.Show("Please select executive before save.", "Executive", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                ////updated by akila 2017/09/15 - if reservation availbale delivary location cannot be blank
                //if (_invoiceItemList != null)
                //{
                //    var _invItmsWithRes = _invoiceItemList.Where(c => !string.IsNullOrEmpty(c.Sad_res_no) && c.Sad_res_no != "N/A" && c.Sad_res_no != "PROMO_VOU").ToList();
                //    if (_invItmsWithRes != null && _invItmsWithRes.Count > 0)
                //    {
                //        if (string.IsNullOrEmpty(txtDelLocation.Text))
                //        {
                //            MessageBox.Show("Delivery location cannot be blank! Please select the delivery location", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //            return;
                //        }
                //    }
                //}



                //add by darshana on 12-Mar-2014 - To Gold operation totally operate as consignment base and no need to generate grn.
                MasterCompany _masterComp = null;
                _masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);

                if (_masterComp.Mc_anal13 == 0)
                {
                    #region Check Consignment Item has Quotation(s) :: Chamal 18-Sep-2013

                    string documntNo = string.Empty;
                    if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && ScanSerialList != null && ScanSerialList.Count > 0)
                        if (CHNLSVC.Inventory.Check_Cons_Item_has_Quo(BaseCls.GlbUserComCode, txtDate.Value.Date, ScanSerialList, out documntNo) < 0)
                        {
                            Cursor.Current = Cursors.Default;
                            MessageBox.Show(documntNo, "Quotation not define", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return;
                        }

                    #endregion Check Consignment Item has Quotation(s) :: Chamal 18-Sep-2013
                }
                // Nadeeka 30-07-2015
                if (string.IsNullOrEmpty(_masterComp.Mc_anal25) == false)
                {
                    if (_masterComp.Mc_anal25 == "Y")
                    {
                        if (string.IsNullOrEmpty(txtMobile.Text))
                        {
                            MessageBox.Show("Please enter customer mobile #", "Customer Mobile.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtMobile.Focus();
                            return;
                        }

                        if (string.IsNullOrEmpty(txtPerTown.Text))
                        {
                            MessageBox.Show("Please enter customer town", "Customer town.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtPerTown.Focus();
                            return;
                        }
                    }
                }
                //kapila 20/12/2016
                if (txtCustomer.Text == "CASH")
                {
                    if (string.IsNullOrEmpty(txtMobile.Text) && string.IsNullOrEmpty(txtNIC.Text))
                    {
                        MessageBox.Show("Please enter customer NIC/mobile #", "Customer NIC/Mobile.", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtMobile.Focus();
                        return;
                    }

                }


                if (chkDeliverLater.Checked)
                {
                    if (CHNLSVC.Sales.IsForwardSaleExceed(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("No of forward sales are restricted. Please contact inventory dept.", "Max. Forward Sale", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }
                }
                //if (cmbInvType.Text.Trim() == "CRED" && txtCustomer.Text.Trim() == "CASH")
                if (_mainInvTp == "CREDIT" && txtCustomer.Text.Trim() == "CASH") //Sanjeewa 2017-12-13
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not select customer as CASH, because your invoice type is " + cmbInvType.Text, "Credit Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtCustomer.Clear();
                    txtCustomer.Focus();
                    return;
                }
                if (chkManualRef.Checked && string.IsNullOrEmpty(txtManualRefNo.Text))
                {
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the manual no", "Manual No", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (chkTaxPayable.Checked == true)
                {// Nadeeka 30-12-2015
                    if (IsDiffTax(_invoiceItemList) == false)
                    {
                        using (new CenterWinDialog(this)) { MessageBox.Show("Two different tax rates are not allowed according to the new government procedures for tax invoices", "Tax Rates", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }
                }


                //if (cmbInvType.Text.Trim() == "CRED")
                if (_mainInvTp == "CREDIT")  //Sanjeewa 2017-12-13
                {
                    if (string.IsNullOrEmpty(txtPoNo.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the PO number", "Purchase Order Number", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtPoNo.Clear();
                        txtPoNo.Focus();
                        return;
                    }
                    else if (txtPoNo.Text.Trim() == "N/A" || txtPoNo.Text.Trim() == "NA" || txtPoNo.Text.Trim() == ".")
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid PO number", "Purchase Order Number", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtPoNo.Clear();
                        txtPoNo.Focus();
                        return;
                    }

                    //kapila 31/8/2015 check payment is exceeded the allowed
                    HpSystemParameters _SystemPara = new HpSystemParameters();
                    _SystemPara = CHNLSVC.Sales.GetSystemParameter("CHNL", BaseCls.GlbDefChannel, "CRDPAYRT", DateTime.Now.Date);
                    if (_SystemPara.Hsy_desc != null)
                    {
                        decimal _realTotal = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                        decimal _totalPaid = _recieptItem.Sum(x => x.Sard_settle_amt);

                        if ((_realTotal / 100 * _SystemPara.Hsy_val) <= _totalPaid)
                        {
                            MessageBox.Show("Settle amount is greater than allowed (Rate: " + _SystemPara.Hsy_val + ")", "Invoice", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                            return;
                        }
                    }
                }
                bool IsBuyBackItemAvailable = false;
                var _bbQty = _invoiceItemList.Where(x => x.Sad_merge_itm == "3" && x.Sad_unit_rt != 0).Sum(x => x.Sad_qty);
                if (_bbQty > 0)
                {
                    //kapila 15/2/2017
                    if (_grah_rcv_buyb == true)
                    {
                        if (BuyBackItemList == null || BuyBackItemList.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select the buy back item", "Buy Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            pnlBuyBack.Visible = true;
                            IsBuyBackItemAvailable = false;
                            return;
                        }
                        else
                        {
                            var _purBB = BuyBackItemList.Sum(x => x.Tus_qty);
                            if (_purBB != _bbQty)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Please select " + _bbQty.ToString() + " buy back item(s)", "Buy Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                pnlBuyBack.Visible = true;
                                IsBuyBackItemAvailable = false;
                                return;
                            }
                        }
                    }
                }
                else if (_bbQty <= 0 && BuyBackItemList != null)
                {
                    if (BuyBackItemList.Count > 0)
                    {
                        tabControl1.SelectedTab = tabPage4;
                        if (MessageBox.Show("There is no buy back promotion selected, but buy back return item already available. Do you need to remove selected return buy-back item and continue?", "Return Item - Buy Back", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            BuyBackItemList = null;
                        }
                        else
                        {
                            tabControl1.SelectedTab = tabPage4;
                            IsBuyBackItemAvailable = false;
                            return;
                        }

                        IsBuyBackItemAvailable = true;
                    }
                    else IsBuyBackItemAvailable = false;
                }
                else if (_bbQty > 0 && BuyBackItemList != null) if (BuyBackItemList.Count > 0) IsBuyBackItemAvailable = true;
                if (chkGiftVoucher.Checked)
                {
                    var _isExistGv = _invoiceItemList.Where(x => IsGiftVoucher(x.Sad_itm_tp)).Count();
                    if (_isExistGv <= 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You can't process without gift vouchers", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    string _notMapped = string.Empty;
                    var _gvitm = (from DataGridViewRow _row in gvGiftVoucher.Rows where _row.Index != -1 select _row).ToList();
                    Parallel.ForEach(_gvitm, _row => { var _isPromotion = _invoiceItemList.Where(x => x.Sad_itm_line == Convert.ToInt32(_row.Cells["gf_baseItemLine"].Value) && !string.IsNullOrEmpty(x.Sad_promo_cd)).Select(x => x.Sad_promo_cd).Count(); if (_isPromotion <= 0) { string _mappedItem = Convert.ToString(_row.Cells[7].EditedFormattedValue); string _gvNo = Convert.ToString(_row.Cells["gf_serial1"].EditedFormattedValue); if (string.IsNullOrEmpty(_mappedItem)) if (string.IsNullOrEmpty(_notMapped)) _notMapped = _gvNo; else _notMapped += ", " + _gvNo; } });
                    if (!string.IsNullOrEmpty(_notMapped))
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please attach the issuing item to the gift voucher for the following gift voucher(s). " + _notMapped + ".", "Attach Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } tabControl1.SelectedTab = tabPage3; return; }
                }
                if (pnlMain.Enabled == false) return;
                if (IsBackDateOk(chkDeliverLater.Checked, IsBuyBackItemAvailable) == false) return;
                bool _isHoldInvoiceProcess = false;
                InvoiceHeader _hdr = new InvoiceHeader();
                if (!string.IsNullOrEmpty(txtInvoiceNo.Text.Trim()))
                {
                    _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text.Trim());
                    if (_hdr != null)
                        if (_hdr.Sah_stus != "H")
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You can not edit already saved invoice", "Invoice Re-call", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                }
                if (_hdr != null && _hdr.Sah_stus == "H") _isHoldInvoiceProcess = true;
                //if (_isHoldInvoiceProcess && chkDeliverLater.Checked == false)
                //{
                //    this.Cursor = Cursors.Default;
                //    using (new CenterWinDialog(this)) { MessageBox.Show("You can not use 'Deliver Now!' option for hold invoice", "Invoice Hold", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                //    return;
                //}
                if (string.IsNullOrEmpty(cmbInvType.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbInvType.Focus();
                    return;
                }

                //if (string.IsNullOrEmpty(txtCustomer.Text))
                if (string.IsNullOrEmpty(txtCustomer.Text) && IsNewCustomer == false)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtCustomer.Focus();
                    return;
                }

                if (string.IsNullOrEmpty(cmbBook.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price book", "Price Book", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbBook.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(cmbLevel.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbLevel.Focus();
                    return;
                }
                if (_invoiceItemList.Count <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the items for invoice", "Invoice item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                bool _isExeMust = false;
                if (MasterChannel != null && MasterChannel.Rows.Count > 0)
                    _isExeMust = Convert.ToBoolean(MasterChannel.Rows[0].Field<Int16>("msc_needsalexe"));
                if (string.IsNullOrEmpty(txtExecutive.Text))
                {
                    if (_isExeMust)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the executive code", "Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtExecutive.Focus();
                        return;
                    }
                    else txtExecutive.Text = "N/A";
                }
                if (!string.IsNullOrEmpty(txtExecutive.Text) && _isExeMust)
                {
                    if (txtExecutive.Text.Trim().ToUpper() == "N/A" || txtExecutive.Text.Trim().ToUpper() == "NA")
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Sales executive is mandatory to this channel", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtExecutive.Clear();
                        txtExecutive.Focus();
                        cmbExecutive.Focus();
                        return;
                    }
                }
                if (string.IsNullOrEmpty(lblCurrency.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the currency code", "Currency", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    lblCurrency.Focus();
                    return;
                }
                if (_MasterProfitCenter.Mpc_check_pay && _recieptItem.Count <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("This profit center is not allow for raise invoice without payment. Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (string.IsNullOrEmpty(txtCusName.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer name", "Customer Name", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (string.IsNullOrEmpty(txtAddress1.Text) && string.IsNullOrEmpty(txtAddress2.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer address", "Customer Address", MessageBoxButtons.OK, MessageBoxIcon.Information); txtAddress1.Enabled = true; txtAddress2.Enabled = true; }
                    return;
                }
                //if (cmbInvType.Text == "CS")
                if (_mainInvTp == "CASH") //Sanjeewa 2017-12-13
                    if (_recieptItem == null)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }
                //if (cmbInvType.Text == "CS")
                  if (_mainInvTp == "CASH") //Sanjeewa 2017-12-13
                    if (_recieptItem != null)
                        if (_recieptItem.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                //if (cmbInvType.Text == "CRED" && _minDPRate > 0)      //kapila 14/1/2016
                  if (_mainInvTp == "CREDIT" && _minDPRate > 0)  //Sanjeewa 2017-12-13
                    if (_recieptItem != null)
                        if (_recieptItem.Count >= 0)
                        {
                            decimal _realPay = 0;
                            if (lblSVatStatus.Text == "Available")
                                _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                            else
                                _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());

                            decimal _totlaPay = _recieptItem.Sum(x => x.Sard_settle_amt);
                            if (_totlaPay < _realPay / 100 * _minDPRate)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Minimum down payment is not taken", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                        }

                //kapila 22/1/2016
                string _outMsg = "";
                bool _isPromoVouPara = false;

                if (!string.IsNullOrEmpty(lblPromoVouNo.Text))
                {
                    _isPromoVouPara = CHNLSVC.Sales.CheckPromoVoucherParaNo(BaseCls.GlbUserComCode, lblPromoVouNo.Text, "SALE", cmbInvType.Text.Trim(), 0, out _outMsg);
                    if (_isPromoVouPara == false)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Voucher parameter definition not match with the entered data !", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }

                    foreach (RecieptItem _itm in _recieptItem)
                    {
                        _isPromoVouPara = CHNLSVC.Sales.CheckPromoVoucherParaNo(BaseCls.GlbUserComCode, lblPromoVouNo.Text, "PAY", _itm.Sard_pay_tp, _itm.Sard_cc_period, out _outMsg);
                        if (_isPromoVouPara == false)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Voucher parameter definition not match with the entered data !", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }

                    }
                }

                //kapila 1/9/2016
                foreach (InvoiceItem _itm in _invoiceItemList)
                {
                    if (_itm.Sad_tot_amt > 0 && !string.IsNullOrEmpty(_itm.Sad_promo_cd))
                    {
                        List<PriceDetailRef> _promoLst = CHNLSVC.Sales.GetPriceByPromoCD(_itm.Sad_promo_cd);
                        if (_itm.Sad_qty >= _promoLst[0].Sapd_qty_from && _itm.Sad_qty <= _promoLst[0].Sapd_qty_to) { }
                        else
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty exceed promotion allow qty.", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                    }
                }
                //kapila 21/12/2016
                if (_isBOnCredNote)
                {
                    DataTable _dtReqApp = CHNLSVC.Sales.getReqAppByCrNo(BaseCls.GlbUserComCode, txtSrchCreditNote.Text, "EX-ISSUE(INV)");
                    if (_dtReqApp.Rows.Count > 0)
                    {
                        foreach (InvoiceItem _itm in _invoiceItemList)
                        {
                            if (_itm.Sad_tot_amt != 0)      //kapila 31/3/2017
                            {
                                bool exists = _dtReqApp.AsEnumerable().Where(c => c.Field<string>("grad_req_param").Equals(_itm.Sad_itm_cd)).Count() > 0;
                                if (exists == false)
                                {
                                    this.Cursor = Cursors.Default;
                                    using (new CenterWinDialog(this)) { MessageBox.Show(_itm.Sad_itm_cd + " not found in approval", "Based on Credit Note", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                    return;
                                }
                            }
                        }
                    }
                    else
                    {
                        decimal _appQty = 0;
                        _dtReqApp = CHNLSVC.Sales.getReqAppByCrNo(BaseCls.GlbUserComCode, txtSrchCreditNote.Text, "EX_ALW_QTY");
                        if (_dtReqApp.Rows.Count > 0)
                        {
                            _appQty = Convert.ToDecimal(_dtReqApp.Rows[0]["grad_val1"]);
                            foreach (InvoiceItem _itm in _invoiceItemList)
                            {
                                _appQty = _appQty - _itm.Sad_qty;
                            }
                            if (_appQty < 0)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Allowed maximum qty exceeded", "Based on Credit Note", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                        }
                    }
                }

                //if (cmbInvType.Text == "CS")
                if (_mainInvTp == "CASH") //Sanjeewa 2017-12-13
                    if (_recieptItem != null)
                        if (_recieptItem.Count >= 0)
                        {
                            decimal _realPay = 0;
                            if (lblSVatStatus.Text == "Available")
                                _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                            else
                                _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());

                            decimal _totlaPay = _recieptItem.Sum(x => x.Sard_settle_amt);
                            if (_totlaPay != _realPay)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                            string LoyaltyCard = "";
                            if (_loyaltyType != null)
                            {
                                LoyaltyCard = _loyaltyType.Salt_loty_tp;
                            }

                            //paymode restriction
                            //added 2014/03/26
                            List<PayTypeRestrict> _restrictList = new List<PayTypeRestrict>();
                            if (_invoiceItemList != null && _invoiceItemList.Count > 0)
                            {
                                foreach (InvoiceItem _itm in _invoiceItemList)
                                {
                                    /*
                                    itm,loty,promo - lv1
                                    itm,promo -lv2
                                    loty,promo-lv3
                                    itm,loty -lv4
                                    itm-lv5
                                    promo-lv6
                                    loty-lv7
                                     */
                                    List<PayTypeRestrict> _resPay = CHNLSVC.Sales.GetPaymodeRestriction(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtDate.Value.Date);
                                    if (_resPay != null && _resPay.Count > 0)
                                    {
                                        //lv 01
                                        List<PayTypeRestrict> _temp;
                                        _temp = (from _t in _resPay
                                                 where (_t.Stpr_itm == _itm.Sad_itm_cd || _t.Stpr_itm == "ALL") && (_t.Stpr_promo_cd == _itm.Sad_promo_cd || _t.Stpr_promo_cd == "ALL") && (_t.Stpr_loty == LoyaltyCard || _t.Stpr_loty == "ALL")
                                                 select _t).ToList<PayTypeRestrict>();

                                        if (_temp != null && _temp.Count > 0)
                                        {
                                            _restrictList.AddRange(_temp);
                                        }
                                        _temp = null;
                                        //lv 02
                                        _temp = (from _t in _resPay
                                                 where (_t.Stpr_itm == _itm.Sad_itm_cd || _t.Stpr_itm == "ALL") && (_t.Stpr_promo_cd == _itm.Sad_promo_cd || _t.Stpr_promo_cd == "ALL") && (string.IsNullOrEmpty(_t.Stpr_loty))
                                                 select _t).ToList<PayTypeRestrict>();

                                        if (_temp != null && _temp.Count > 0)
                                        {
                                            _restrictList.AddRange(_temp);
                                        }
                                        _temp = null;
                                        //lv 03
                                        _temp = (from _t in _resPay
                                                 where (string.IsNullOrEmpty(_t.Stpr_loty)) && (_t.Stpr_promo_cd == _itm.Sad_promo_cd || _t.Stpr_promo_cd == "ALL") && (string.IsNullOrEmpty(_t.Stpr_loty))
                                                 select _t).ToList<PayTypeRestrict>();

                                        if (_temp != null && _temp.Count > 0)
                                        {
                                            _restrictList.AddRange(_temp);
                                        }
                                        _temp = null;
                                        //lv 04
                                        _temp = (from _t in _resPay
                                                 where (_t.Stpr_itm == _itm.Sad_itm_cd || _t.Stpr_itm == "ALL") && (string.IsNullOrEmpty(_t.Stpr_promo_cd)) && (string.IsNullOrEmpty(_t.Stpr_loty))
                                                 select _t).ToList<PayTypeRestrict>();

                                        if (_temp != null && _temp.Count > 0)
                                        {
                                            _restrictList.AddRange(_temp);
                                        }
                                        _temp = null;
                                        //lv 05
                                        _temp = (from _t in _resPay
                                                 where (_t.Stpr_itm == _itm.Sad_itm_cd || _t.Stpr_itm == "ALL") && (string.IsNullOrEmpty(_t.Stpr_promo_cd)) && (string.IsNullOrEmpty(_t.Stpr_loty))
                                                 select _t).ToList<PayTypeRestrict>();

                                        if (_temp != null && _temp.Count > 0)
                                        {
                                            _restrictList.AddRange(_temp);
                                        }
                                        _temp = null;
                                        //lv 06
                                        _temp = (from _t in _resPay
                                                 where (string.IsNullOrEmpty(_t.Stpr_itm)) && (_t.Stpr_promo_cd == _itm.Sad_promo_cd || _t.Stpr_promo_cd == "ALL") && (string.IsNullOrEmpty(_t.Stpr_loty))
                                                 select _t).ToList<PayTypeRestrict>();

                                        if (_temp != null && _temp.Count > 0)
                                        {
                                            _restrictList.AddRange(_temp);
                                        }
                                        _temp = null;
                                        //lv 07
                                        _temp = (from _t in _resPay
                                                 where (string.IsNullOrEmpty(_t.Stpr_itm)) && (string.IsNullOrEmpty(_t.Stpr_promo_cd)) && (_t.Stpr_loty == LoyaltyCard || _t.Stpr_loty == "ALL")
                                                 select _t).ToList<PayTypeRestrict>();

                                        if (_temp != null && _temp.Count > 0)
                                        {
                                            _restrictList.AddRange(_temp);
                                        }
                                    }
                                }
                            }
                            if (_restrictList != null && _restrictList.Count > 0)
                            {
                                foreach (RecieptItem _recItm in _recieptItem)
                                {
                                    List<PayTypeRestrict> _tRes = (from _res in _restrictList
                                                                   where _res.Stpr_pay_mode == _recItm.Sard_pay_tp
                                                                   select _res).ToList<PayTypeRestrict>();
                                    if (_tRes != null && _tRes.Count > 0)
                                    {
                                        if (_recItm.Sard_pay_tp == "CRCD")
                                        {
                                            foreach (PayTypeRestrict _payres in _tRes)
                                            {
                                                if (_payres.Stpr_alw_non_promo)
                                                {
                                                    if (_recItm.Sard_cc_period > 0)
                                                    {
                                                        using (new CenterWinDialog(this)) { MessageBox.Show("Cannot process invoice paymode- " + _recItm.Sard_pay_tp + " restricted for promotions.\nPlease remove paymode and check again.", "Invoice Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                                        return;
                                                    }
                                                }
                                                else
                                                {
                                                    using (new CenterWinDialog(this)) { MessageBox.Show("Cannot process invoice paymode- " + _recItm.Sard_pay_tp + " restricted.\nPlease remove paymode and check again.", "Invoice Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                                    return;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            using (new CenterWinDialog(this)) { MessageBox.Show("Cannot process invoice paymode- " + _recItm.Sard_pay_tp + " restricted.\nPlease remove paymode and check again.", "Invoice Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                            return;
                                        }
                                    }
                                }
                            }
                            //end
                        }
                string _invoicePrefix = CHNLSVC.Sales.GetInvoicePrefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text);
                if (string.IsNullOrEmpty(_invoicePrefix))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Selected invoice no does not having a invoice prefix to generate invoice no. Please contact accounts department.", "Invoice Prefix", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                Int32 _count = 1;
                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                        _recieptItem.ForEach(x => x.Sard_line_no = _count++);
                _count = 1;
                List<InvoiceItem> _linedInvoiceItem = new List<InvoiceItem>();
                _invoiceItemList = _invoiceItemList.OrderBy(x => x.Sad_itm_line).ToList();
                ScanSerialList = ScanSerialList.OrderBy(x => x.Tus_base_itm_line).ToList();
                foreach (InvoiceItem _item in _invoiceItemList)
                {
                    Int32 _currentLine = _item.Sad_itm_line;
                    if (ScanSerialList != null)
                        if (ScanSerialList.Count > 0)
                            ScanSerialList.Where(x => x.Tus_base_itm_line == _currentLine).ToList().ForEach(x => x.Tus_base_itm_line = _count);
                    if (InvoiceSerialList != null)
                        if (InvoiceSerialList.Count > 0)
                            InvoiceSerialList.Where(x => x.Sap_itm_line == _currentLine).ToList().ForEach(x => x.Sap_itm_line = _count);
                    _item.Sad_itm_line = _count;
                    _linedInvoiceItem.Add(_item);
                    _count += 1;
                }



                _linedInvoiceItem.ForEach(x => x.Sad_isapp = true);
                _linedInvoiceItem.ForEach(x => x.Sad_iscovernote = true);
                _invoiceItemList = new List<InvoiceItem>();
                _invoiceItemList = _linedInvoiceItem;
                if (chkDeliverLater.Checked == false && IsReferancedDocDateAppropriate(ScanSerialList, Convert.ToDateTime(txtDate.Text).Date) == false)
                    return;


                //Tharaka 2015-09-17 check Advanced based receipt mandatory 
                if (chkBasedOnAdvanceRecept.Checked)
                {
                    if (_recieptItem != null && _recieptItem.Count > 0)
                    {
                        if (_recieptItem.FindAll(x => x.Sard_pay_tp == "ADVAN" && x.Sard_receipt_no == txtADVRNumber.Text.Trim()).Count == 0)
                        {
                            MessageBox.Show("Please add selected advance receipt to the payment", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                }

                //updated by akila 2018/03/19
                if (chkDeliverLater.Checked == false || chkDeliverNow.Checked)
                {
                    string _nottallylist = string.Empty;
                    bool _isTallywithinventory = IsInventoryBalanceNInvoiceItemTally(out _nottallylist);
                    if (_isTallywithinventory == false)
                    {
                        if (!chkDeliverNow.Checked)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Following item does not having inventory balance for raise delivery order; " + _nottallylist, "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                            _serialMatch = false;
                            return;
                        }
                        else
                        {
                            _serialMatch = false;
                        }
                    }

                    if (CheckItemAndSerials())
                    {
                        _serialMatch = false;
                    }

                    string _itmList = string.Empty;
                    bool _isqtyNserialOk = IsInvoiceItemNSerialListTally(out _itmList);
                    if (_isqtyNserialOk == false)
                    {
                        if (!chkDeliverNow.Checked)
                        {
                            if (chkBasedOnAdvanceRecept.Checked)
                            {
                                MessageBox.Show("Invoice qty and no. of serials are mismatched. Please check the following item for its serials and qty.\nItem List : " + _itmList, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                                dvDOItems.AutoGenerateColumns = false;
                                dvDOItems.DataSource = _invoiceItemList;
                                pnlDoNowItems.Visible = true;
                                pnlMain.Enabled = false;
                                return;
                            }

                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty and no. of serials are mismatched. Please check the following item for its serials and qty.\nItem List : " + _itmList, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                            _serialMatch = false;
                            return;
                        }
                        else
                        {
                            _serialMatch = false;
                        }
                    }
                }

                //commented by akila 2018/03/19
                //if (chkDeliverLater.Checked == false)
                //{
                //    string _itmList = string.Empty;
                //    bool _isqtyNserialOk = IsInvoiceItemNSerialListTally(out _itmList);

                //    if (_isqtyNserialOk == false)
                //    {
                //        if (!chkDeliverNow.Checked)
                //        {
                //            //Tharaka 2015-08-08
                //            if (chkBasedOnAdvanceRecept.Checked)
                //            {
                //                MessageBox.Show("Invoice qty and no. of serials are mismatched. Please check the following item for its serials and qty.\nItem List : " + _itmList, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                //                dvDOItems.AutoGenerateColumns = false;
                //                dvDOItems.DataSource = _invoiceItemList;
                //                pnlDoNowItems.Visible = true;
                //                pnlMain.Enabled = false;
                //                return;
                //            }
                //            this.Cursor = Cursors.Default;
                //            using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty and no. of serials are mismatched. Please check the following item for its serials and qty.\nItem List : " + _itmList, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                //            _serialMatch = false;
                //            return;
                //        }
                //        else
                //        {
                //            _serialMatch = false;
                //        }
                //    }
                //}
                //if (chkDeliverLater.Checked == false)
                //{
                //    string _nottallylist = string.Empty;
                //    bool _isTallywithinventory = IsInventoryBalanceNInvoiceItemTally(out _nottallylist);

                //    if (_isTallywithinventory == false)
                //    {
                //        if (!chkDeliverNow.Checked)
                //        {
                //            this.Cursor = Cursors.Default;
                //            using (new CenterWinDialog(this)) { MessageBox.Show("Following item does not having inventory balance for raise delivery order; " + _nottallylist, "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                //            _serialMatch = false;
                //            return;
                //        }
                //        else
                //        {
                //            _serialMatch = false;
                //        }
                //    }
                //}



                #region sachith/process serial select

                if (!_serialMatch)
                {
                    if (chkDeliverNow.Checked)
                    {
                        dvDOItems.AutoGenerateColumns = false;
                        dvDOItems.DataSource = _invoiceItemList;
                        pnlDoNowItems.Visible = true;
                        pnlMain.Enabled = false;

                        return;
                    }
                }

                #endregion sachith/process serial select

                MasterBusinessEntity _entity = new MasterBusinessEntity();
                InvoiceHeader _invheader = new InvoiceHeader();
                RecieptHeader _recHeader = new RecieptHeader();
                InventoryHeader invHdr = new InventoryHeader();
                InventoryHeader _buybackheader = new InventoryHeader();
                MasterAutoNumber _buybackAuto = new MasterAutoNumber();
                bool _isCustomerHasCompany = false;
                string _customerCompany = string.Empty;
                string _customerLocation = string.Empty;
                _entity = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                if (_entity != null)
                    if (_entity.Mbe_cd != null)
                        if (!string.IsNullOrEmpty(_entity.Mbe_cust_com) && !string.IsNullOrEmpty(_entity.Mbe_cust_loc))
                        { _isCustomerHasCompany = true; _customerCompany = _entity.Mbe_cust_com; _customerLocation = _entity.Mbe_cust_loc; }
                invHdr.Ith_loc = BaseCls.GlbUserDefLoca;
                invHdr.Ith_com = BaseCls.GlbUserComCode;
                invHdr.Ith_doc_tp = "DO";
                invHdr.Ith_doc_date = Convert.ToDateTime(txtDate.Text).Date;
                invHdr.Ith_doc_year = Convert.ToDateTime(txtDate.Text).Year;
                invHdr.Ith_cate_tp = cmbInvType.Text.Trim();
                invHdr.Ith_sub_tp = "DPS";
                invHdr.Ith_bus_entity = txtCustomer.Text.Trim();
                invHdr.Ith_del_add1 = txtDelAddress1.Text.Trim();
                invHdr.Ith_del_add1 = txtDelAddress2.Text.Trim();
                invHdr.Ith_is_manual = false;
                invHdr.Ith_stus = "A";
                invHdr.Ith_cre_by = BaseCls.GlbUserID;
                invHdr.Ith_mod_by = BaseCls.GlbUserID;
                invHdr.Ith_direct = false;
                invHdr.Ith_session_id = BaseCls.GlbUserSessionID;
                invHdr.Ith_manual_ref = txtManualRefNo.Text;
                invHdr.Ith_vehi_no = string.Empty;
                invHdr.Ith_remarks = string.Empty;
                MasterAutoNumber _masterAutoDo = new MasterAutoNumber();
                _masterAutoDo.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                _masterAutoDo.Aut_cate_tp = "LOC";
                _masterAutoDo.Aut_direction = 0;
                _masterAutoDo.Aut_moduleid = "DO";
                _masterAutoDo.Aut_start_char = "DO";
                _masterAutoDo.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                _invheader.Sah_com = BaseCls.GlbUserComCode;
                _invheader.Sah_cre_by = BaseCls.GlbUserID;
                _invheader.Sah_cre_when = DateTime.Now;
                _invheader.Sah_currency = "LKR";
                _invheader.Sah_cus_add1 = txtAddress1.Text.Trim();
                _invheader.Sah_cus_add2 = txtAddress2.Text.Trim();
                _invheader.gvo_cd = lblgvo.Text;
                //akila 2017/10/12
                if ((string.IsNullOrEmpty(txtCustomer.Text)) && IsNewCustomer)
                {
                    _invheader.Sah_cus_cd = "CASH"; //new customer
                }
                else
                {
                _invheader.Sah_cus_cd = txtCustomer.Text.Trim();
                }
                
                //_invheader.Sah_cus_cd = txtCustomer.Text.Trim();
                _invheader.Sah_cus_name = txtCusName.Text.Trim();
                _invheader.Sah_d_cust_add1 = txtDelAddress1.Text.Trim();
                _invheader.Sah_d_cust_add2 = txtDelAddress2.Text.Trim();
                _invheader.Sah_d_cust_cd = txtDelCustomer.Text.Trim();
                _invheader.Sah_d_cust_name = txtDelName.Text.Trim();
                _invheader.Sah_direct = true;

                _invheader.Sah_dt = Convert.ToDateTime(txtDate.Text);

                if (_isBOnCredNote == true)
                { _invheader.Sah_sah_date_new = _dtReqPara.Date;
                }
                else { _invheader.Sah_sah_date_new = _invheader.Sah_dt; }
                _invheader.Sah_epf_rt = 0;
                _invheader.Sah_esd_rt = 0;
                _invheader.Sah_ex_rt = 1;
                _invheader.Sah_inv_no = "na";
                _invheader.Sah_inv_sub_tp = "SA";
                _invheader.Sah_inv_tp = cmbInvType.Text.Trim();
                _invheader.Sah_is_acc_upload = false;
                _invheader.Sah_man_ref = txtManualRefNo.Text;
                _invheader.Sah_manual = chkManualRef.Checked ? true : false;
                _invheader.Sah_mod_by = BaseCls.GlbUserID;
                _invheader.Sah_mod_when = DateTime.Now;
                _invheader.Sah_pc = BaseCls.GlbUserDefProf;
                _invheader.Sah_pdi_req = 0;
                _invheader.Sah_ref_doc = txtDocRefNo.Text;
                _invheader.Sah_remarks = "";
                _invheader.Sah_sales_chn_cd = "";
                _invheader.Sah_sales_chn_man = "";
                _invheader.Sah_sales_ex_cd = txtExecutive.Text.Trim();
                _invheader.Sah_sales_region_cd = "";
                _invheader.Sah_sales_region_man = "";
                _invheader.Sah_sales_sbu_cd = "";
                _invheader.Sah_sales_sbu_man = "";
                _invheader.Sah_sales_str_cd = "";
                _invheader.Sah_sales_zone_cd = "";
                _invheader.Sah_sales_zone_man = "";
                _invheader.Sah_seq_no = 1;
                _invheader.Sah_session_id = BaseCls.GlbUserSessionID;
                _invheader.Sah_structure_seq = txtQuotation.Text.Trim();
                _invheader.Sah_stus = "A";
                if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && (_serialMatch))
                    _invheader.Sah_stus = "D";

                _invheader.Sah_town_cd = "";
                _invheader.Sah_tp = "INV";
                _invheader.Sah_wht_rt = 0;
                _invheader.Sah_direct = true;
                _invheader.Sah_tax_inv = chkTaxPayable.Checked ? true : false;
                _invheader.Sah_anal_11 = (chkDeliverLater.Checked || chkDeliverNow.Checked) ? 0 : 1;
                _invheader.Sah_del_loc = (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? BaseCls.GlbUserDefLoca : !string.IsNullOrEmpty(txtDelLocation.Text) ? txtDelLocation.Text : string.Empty;
                _invheader.Sah_grn_com = _customerCompany;
                _invheader.Sah_grn_loc = _customerLocation;
                _invheader.Sah_is_grn = _isCustomerHasCompany;
                _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
                _invheader.Sah_is_svat = lblSVatStatus.Text == "Available" ? true : false;
                _invheader.Sah_tax_exempted = lblVatExemptStatus.Text == "Available" ? true : false;
                _invheader.Sah_anal_4 = txtPoNo.Text.Trim();
                _invheader.Sah_anal_6 = txtLoyalty.Text.Trim();
                _invheader.Sah_man_cd = _MasterProfitCenter.Mpc_man;
                _invheader.Sah_is_dayend = 0;
                _invheader.Sah_remarks = txtRemarks.Text.Trim();
                //if (string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue))) _invheader.Sah_anal_1 = string.Empty;
                //else _invheader.Sah_anal_1 = Convert.ToString(cmbTechnician.SelectedValue);
                _invheader.Sah_anal_1 = txtPromotor.Text;
                if (_isHoldInvoiceProcess) _invheader.Sah_seq_no = Convert.ToInt32(txtInvoiceNo.Text.Trim());

                if (chkBasedOnAdvanceRecept.Checked)
                {
                    _invheader.Sah_anal_2 = "ADVR";
                }

                _recHeader.Sar_acc_no = "";
                _recHeader.Sar_act = true;
                _recHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                _recHeader.Sar_comm_amt = 0;
                _recHeader.Sar_create_by = BaseCls.GlbUserID;
                _recHeader.Sar_create_when = DateTime.Now;
                _recHeader.Sar_currency_cd = "LKR";
                _recHeader.Sar_debtor_add_1 = txtAddress1.Text;
                _recHeader.Sar_debtor_add_2 = txtAddress2.Text;
                _recHeader.Sar_debtor_cd = txtCustomer.Text;
                _recHeader.Sar_debtor_name = txtCusName.Text;
                _recHeader.Sar_direct = true;
                _recHeader.Sar_direct_deposit_bank_cd = "";
                _recHeader.Sar_direct_deposit_branch = "";
                _recHeader.Sar_epf_rate = 0;
                _recHeader.Sar_esd_rate = 0;
                _recHeader.Sar_is_mgr_iss = false;
                _recHeader.Sar_is_oth_shop = false;
                _recHeader.Sar_is_used = false;
                _recHeader.Sar_manual_ref_no = txtManualRefNo.Text;
                _recHeader.Sar_mob_no = txtMobile.Text;
                _recHeader.Sar_mod_by = BaseCls.GlbUserID;
                _recHeader.Sar_mod_when = DateTime.Now;
                _recHeader.Sar_nic_no = txtNIC.Text;
                _recHeader.Sar_oth_sr = "";
                _recHeader.Sar_prefix = "";
                _recHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                _recHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Text);
                _recHeader.Sar_receipt_no = "na";
                //_recHeader.Sar_receipt_type = cmbInvType.Text.Trim() == "CRED" ? "DEBT" : "DIR";
                _recHeader.Sar_receipt_type = _mainInvTp == "CREDIT" ? "DEBT" : "DIR"; //Sanjeewa 2017-12-13
                _recHeader.Sar_ref_doc = "";
                _recHeader.Sar_remarks = txtRemarks.Text;
                _recHeader.Sar_seq_no = 1;
                _recHeader.Sar_ser_job_no = "";
                _recHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                _recHeader.Sar_tel_no = txtMobile.Text;
                _recHeader.Sar_tot_settle_amt = 0;
                _recHeader.Sar_uploaded_to_finance = false;
                _recHeader.Sar_used_amt = 0;
                _recHeader.Sar_wht_rate = 0;

                MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                _invoiceAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                _invoiceAuto.Aut_cate_tp = "PRO";
                _invoiceAuto.Aut_direction = 1;
                _invoiceAuto.Aut_modify_dt = null;
                _invoiceAuto.Aut_moduleid = cmbInvType.Text;
                _invoiceAuto.Aut_number = 0;
                _invoiceAuto.Aut_start_char = _invoicePrefix;
                _invoiceAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                MasterAutoNumber _receiptAuto = null;
                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                    {
                        _receiptAuto = new MasterAutoNumber();
                        _receiptAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        _receiptAuto.Aut_cate_tp = "PRO";
                        _receiptAuto.Aut_direction = 1;
                        _receiptAuto.Aut_modify_dt = null;
                        _receiptAuto.Aut_moduleid = "RECEIPT";
                        _receiptAuto.Aut_number = 0;
                        _receiptAuto.Aut_start_char = "DIR";
                        _receiptAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                    }
                DataTable dt_location = CHNLSVC.Inventory.Get_location_by_code(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                foreach (DataRow r in dt_location.Rows)
                {
                    _buybackheader.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        _buybackheader.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        _buybackheader.Ith_channel = string.Empty;
                    }
                }
                _buybackheader.Ith_acc_no = "BB_INVC";
                _buybackheader.Ith_anal_1 = "";
                _buybackheader.Ith_anal_2 = "";
                _buybackheader.Ith_anal_3 = "";
                _buybackheader.Ith_anal_4 = "";
                _buybackheader.Ith_anal_5 = "";
                _buybackheader.Ith_anal_6 = 0;
                _buybackheader.Ith_anal_7 = 0;
                _buybackheader.Ith_anal_8 = DateTime.MinValue;
                _buybackheader.Ith_anal_9 = DateTime.MinValue;
                _buybackheader.Ith_anal_10 = false;
                _buybackheader.Ith_anal_11 = false;
                _buybackheader.Ith_anal_12 = false;
                _buybackheader.Ith_bus_entity = "";
                _buybackheader.Ith_cate_tp = "NOR";
                _buybackheader.Ith_com = BaseCls.GlbUserComCode;
                _buybackheader.Ith_com_docno = "";
                _buybackheader.Ith_cre_by = BaseCls.GlbUserID;
                _buybackheader.Ith_cre_when = DateTime.Now;
                _buybackheader.Ith_del_add1 = "";
                _buybackheader.Ith_del_add2 = "";
                _buybackheader.Ith_del_code = "";
                _buybackheader.Ith_del_party = "";
                _buybackheader.Ith_del_town = "";
                _buybackheader.Ith_direct = true;
                _buybackheader.Ith_doc_date = txtDate.Value.Date;
                _buybackheader.Ith_doc_no = string.Empty;
                _buybackheader.Ith_doc_tp = "ADJ";
                _buybackheader.Ith_doc_year = txtDate.Value.Date.Year;
                _buybackheader.Ith_entry_no = string.Empty;
                _buybackheader.Ith_entry_tp = "NOR";
                _buybackheader.Ith_git_close = true;
                _buybackheader.Ith_git_close_date = DateTime.MinValue;
                _buybackheader.Ith_git_close_doc = string.Empty;
                _buybackheader.Ith_isprinted = false;
                _buybackheader.Ith_is_manual = false;
                _buybackheader.Ith_job_no = string.Empty;
                _buybackheader.Ith_loading_point = string.Empty;
                _buybackheader.Ith_loading_user = string.Empty;
                _buybackheader.Ith_loc = BaseCls.GlbUserDefLoca;
                _buybackheader.Ith_manual_ref = string.Empty;
                _buybackheader.Ith_mod_by = BaseCls.GlbUserID;
                _buybackheader.Ith_mod_when = DateTime.Now;
                _buybackheader.Ith_noofcopies = 0;
                _buybackheader.Ith_oth_loc = string.Empty;
                _buybackheader.Ith_oth_docno = "N/A";
                _buybackheader.Ith_remarks = string.Empty;
                _buybackheader.Ith_session_id = BaseCls.GlbUserSessionID;
                _buybackheader.Ith_stus = "A";
                _buybackheader.Ith_sub_tp = "NOR";
                _buybackheader.Ith_vehi_no = string.Empty;
                _buybackAuto.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                _buybackAuto.Aut_cate_tp = "LOC";
                _buybackAuto.Aut_direction = null;
                _buybackAuto.Aut_modify_dt = null;
                _buybackAuto.Aut_moduleid = "ADJ";
                _buybackAuto.Aut_number = 5;
                _buybackAuto.Aut_start_char = "ADJ";
                _buybackAuto.Aut_year = null;
                _count = 1;
                string _bin = CHNLSVC.Inventory.GetDefaultBinCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                if (BuyBackItemList != null) if (BuyBackItemList.Count > 0)
                    {
                        BuyBackItemList.ForEach(X => X.Tus_bin = _bin);
                        BuyBackItemList.ForEach(X => X.Tus_itm_line = _count++);
                        BuyBackItemList.ForEach(X => X.Tus_serial_id = "N/A");
                        BuyBackItemList.ForEach(x => x.Tus_exist_grndt = Convert.ToDateTime(txtDate.Value).Date);
                        BuyBackItemList.ForEach(x => x.Tus_orig_grndt = Convert.ToDateTime(txtDate.Value).Date);
                    }
                if (txtCustomer.Text.Trim() != "CASH")
                {
                    MasterBusinessEntity _en = CHNLSVC.Sales.GetCustomerProfile(txtCustomer.Text.Trim(), string.Empty, string.Empty, string.Empty, string.Empty);
                    if (_en != null)
                        if (string.IsNullOrEmpty(_en.Mbe_com))
                        {
                            _invheader.Sah_tax_exempted = _en.Mbe_tax_ex;
                            _invheader.Sah_is_svat = _en.Mbe_is_svat;
                        }
                }
                else
                {
                    if (string.IsNullOrEmpty(txtNIC.Text) && string.IsNullOrEmpty(txtMobile.Text))
                    {
                        bool _promoVouApplied = false;
                        foreach (InvoiceItem _itm in _invoiceItemList)
                        {
                            MasterItem _mitm = CHNLSVC.Inventory.GetItem(_invheader.Sah_com, _itm.Sad_itm_cd);
                            if (_mitm.Mi_is_ser1 != -1)
                            {
                                for (int i = 1; i <= _itm.Sad_qty; i++)
                                {
                                    List<PromoVoucherDefinition> _proVouList = new List<PromoVoucherDefinition>();
                                    if (_isBOnCredNote == true)    //kapila 16/1/2017
                                        _proVouList = CHNLSVC.Sales.GetPromotionalVouchersDefinition(_invheader.Sah_com, _invheader.Sah_inv_tp, _invheader.Sah_pc, _dtReqPara, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, true);
                                    else
                                        _proVouList = CHNLSVC.Sales.GetPromotionalVouchersDefinition(_invheader.Sah_com, _invheader.Sah_inv_tp, _invheader.Sah_pc, _invheader.Sah_dt.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, true);

                                    if (_proVouList != null)
                                    {
                                        if (_proVouList.Count > 0)
                                        { _promoVouApplied = true; break; }
                                    }
                                }
                            }
                        }
                        if (_promoVouApplied == true)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Promotion voucher available! Please enter the customer NIC or Mobile No", "Prmotion Voucher", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                            return;
                        }
                    }
                }

                //Add by akila 2017/11/02
                if (string.IsNullOrEmpty(txtCustomer.Text.Trim()) && IsNewCustomer)
                {
                    _businessEntity = NewCustomer();
                }
                else
                {
                    CollectBusinessEntity();
                }
               // CollectBusinessEntity();
                string _invoiceNo = "";
                string _receiptNo = "";
                string _deliveryOrderNo = "";
                _invoiceItemListWithDiscount = new List<InvoiceItem>();
                List<InvoiceItem> _discounted = null;
                bool _isDifferent = false;
                decimal _tobepay = 0;
                decimal _tobepay1 = 0;
                bool _canSaveWithoutDiscount = false;
                try
                {
                    //Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                    //CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    //_invoiceItemListWithDiscount = _discounted;

                    Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                    if (_discountSequence == 0)
                    {
                        //updated by akila 2018/03/05                        
                        #region new code 

                        int _previousSeq = 0;
                        
                        #region Apply line level promotional discounts
                        foreach (InvoiceItem itm in _invoiceItemList)
                        {
                            bool isMulti;
                            int seq;
                            List<InvoiceItem> _item = new List<InvoiceItem>();
                            _item.Add(itm);
                            DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                            //show pop up
                            if (_discount == null)
                            {
                                _discountSequence = seq;
                                if (isMulti)
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                                else
                                {
                                    if (_discountSequence != -9999 && _discountSequence != 0)
                                    {
                                        _isDifferent = true;
                                        _discountSequence = seq;
                                        CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                                        if (_discountHdr != null)
                                        {
                                            _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                        }

                                        if (_discountHdr.ApplyForTotalInvoice != 1)
                                        {
                                            CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _item, out _discounted, out _isDifferent, out _tobepay1, _invheader);
                                            _invoiceItemListWithDiscount.AddRange(_discounted);
                                        }
                                    }
                                    else
                                    {
                                        if (!ucPayModes1.IsDiscounted)
                                        {
                                            _isDifferent = false;
                                            _discountSequence = -9999;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (_discount.Rows.Count > 0)
                                {
                                    pnlDiscount.Visible = true;
                                    pnlMain.Enabled = false;
                                    gvDiscount.DataSource = _discount;
                                    return;
                                }
                                else
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                            }
                        }
                        #endregion

                        #region Apply header level promotional discount

                        List<InvoiceItem> _mixItemList = new List<InvoiceItem>();

                        if(_invoiceItemListWithDiscount != null && _invoiceItemListWithDiscount.Count > 0)
                        {
                            foreach (InvoiceItem _invItem in _invoiceItemList)
                            {
                                var _tmpList = _invoiceItemListWithDiscount.Where(x => x.Sad_itm_cd == _invItem.Sad_itm_cd && x.Sad_itm_line == _invItem.Sad_itm_line).ToList();
                                if (_tmpList == null || _tmpList.Count < 1)
                                {
                                    _mixItemList.Add(_invItem);
                                }
                            }
                            _mixItemList.AddRange(_invoiceItemListWithDiscount);
                        }
                        else
                        {
                             _mixItemList = _invoiceItemList;
                        }


                        foreach (InvoiceItem itm in _mixItemList)
                        {
                            bool isMulti;
                            int seq;
                            List<InvoiceItem> _item = new List<InvoiceItem>();
                            _item.Add(itm);

                            DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                            //show pop up
                            if (_discount == null)
                            {
                                _discountSequence = seq;
                                if (isMulti)
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                                else
                                {
                                    if (_discountSequence != -9999 && _discountSequence != 0)
                                    {
                                        CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                                        if (_discountHdr != null)
                                        {
                                            _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                        }

                                        _isDifferent = true;
                                        _discountSequence = seq;

                                        //by akila 2018/03/05
                                        if (_discountHdr.ApplyForTotalInvoice == 1)
                                        {
                                            if ((_previousSeq != _discountSequence))
                                            {
                                                string _errorString = string.Empty;
                                                _invoiceItemListWithDiscount = new List<InvoiceItem>();
                                                _invoiceItemListWithDiscount.AddRange(CHNLSVC.Sales.GetGeneralDiscountForTotalInvoice(_discountSequence, BaseCls.GlbUserComCode, _mixItemList, out _isDifferent, out _tobepay1, _invheader, out _errorString));
                                                if (!string.IsNullOrEmpty(_errorString))
                                                {
                                                    MessageBox.Show("Can not process invoice! " + _errorString, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                    _isDifferent = false;
                                                    _discountSequence = 0;
                                                    return;
                                                }
                                                else
                                                {
                                                    _previousSeq = _discountSequence;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (!ucPayModes1.IsDiscounted)
                                        {
                                            _isDifferent = false;
                                            _discountSequence = -9999;

                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (_discount.Rows.Count > 0)
                                {
                                    pnlDiscount.Visible = true;
                                    pnlMain.Enabled = false;
                                    gvDiscount.DataSource = _discount;
                                    return;
                                }
                                else
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                            }
                        }
                        #endregion

                        #endregion

                        #region old code
                        //foreach (InvoiceItem itm in _invoiceItemList)
                        //{
                        //    bool isMulti;
                        //    int seq;
                        //    List<InvoiceItem> _item = new List<InvoiceItem>();
                        //    _item.Add(itm);
                        //    DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                        //    //show pop up
                        //    if (_discount == null)
                        //    {
                        //        _discountSequence = seq;
                        //        if (isMulti)
                        //        {
                        //            _isDifferent = false;
                        //            _discountSequence = -9999;
                        //        }
                        //        else
                        //        {
                        //            if (_discountSequence != -9999 && _discountSequence != 0)
                        //            {
                        //                // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        //                //  {
                        //                _isDifferent = true;
                        //                _discountSequence = seq;
                        //                CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _item, out _discounted, out _isDifferent, out _tobepay1, _invheader);
                        //                // _tobepay = _tobepay + _tobepay1;
                        //                _invoiceItemListWithDiscount.AddRange(_discounted);
                        //                CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                        //                if (_discountHdr != null)
                        //                {
                        //                    _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                        //                }
                        //                //    }
                        //            }
                        //            else
                        //            {
                        //                if (!ucPayModes1.IsDiscounted)
                        //                {
                        //                    _isDifferent = false;
                        //                    _discountSequence = -9999;
                        //                    //       if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                        //                    //       {
                        //                    // _discountSequence = 0;
                        //                    //  return;

                        //                    //    }
                        //                }
                        //            }
                        //        }
                        //    }
                        //    else
                        //    {
                        //        //  if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        //        //   {
                        //        if (_discount.Rows.Count > 0)
                        //        {
                        //            //show popup
                        //            pnlDiscount.Visible = true;
                        //            pnlMain.Enabled = false;
                        //            gvDiscount.DataSource = _discount;
                        //            return;
                        //        }
                        //        //      }
                        //        else
                        //        {
                        //            _isDifferent = false;
                        //            _discountSequence = -9999;
                        //        }
                        //    }
                        //}
                        #endregion
                    }
                    else if (_discountSequence != -9999)
                    {
                        //Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                        CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _invoiceItemList, out _discounted, out _isDifferent, out _tobepay, _invheader);

                        _invoiceItemListWithDiscount = _discounted;
                    }
                    if (_invoiceItemListWithDiscount != null && _invoiceItemListWithDiscount.Count > 0)
                    {
                        _isDifferent = true;
                        foreach (InvoiceItem invItm in _invoiceItemList)
                        {
                            List<InvoiceItem> _itmList = (from _res in _invoiceItemListWithDiscount
                                                          where _res.Mi_itm_stus == invItm.Mi_itm_stus && _res.Sad_itm_cd == invItm.Sad_itm_cd
                                                          select _res).ToList<InvoiceItem>();
                            if (_itmList == null || _itmList.Count <= 0)
                            {
                                _invoiceItemListWithDiscount.Add(invItm);
                            }
                        }
                        _tobepay = _invoiceItemListWithDiscount.Select(X => X.Sad_tot_amt).Sum();
                    }

                    //if ((_discountSequence == -9999 && _isDifferent) || (_discountSequence == -9999 && ucPayModes1.IsDiscounted))
                    //{
                    //    if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    //    {
                    //    }
                    //    else
                    //    {
                    //        _isDifferent = false;
                    //        _discountSequence = 0;
                    //    }
                    //}

                    //if (_discountSequence == -9999) {
                    //    CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    //    _invoiceItemListWithDiscount = _discounted;

                    //    if (_isDifferent) {
                    //        if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    //        {
                    //            _isDifferent = false;
                    //        }
                    //    }

                    //}

                    //added sachith
                    //2013/09/04

                    if (!_isDifferent && !ucPayModes1.IsDiscounted)
                    {
                        //credit note discount (if invoice pay mode has credit note and invoice don't have discount)
                        List<RecieptItem> _creditNote = (from _res in _recieptItem
                                                         where _res.Sard_pay_tp == "CRNOTE" || _res.Sard_pay_tp == "ADVAN"
                                                         select _res).ToList<RecieptItem>();
                        if (_creditNote != null && _creditNote.Count > 0)
                        {
                            Int32 _timeno1 = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                            CHNLSVC.Sales.GetGeneralPromotionDiscountAdvanCredit(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                            _invoiceItemListWithDiscount = _discounted;
                            foreach (InvoiceItem _invItm in _invoiceItemListWithDiscount)
                            {
                                if (_invItm.Sad_dis_type == "P")
                                {
                                    CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(_invItm.Sad_dis_seq);
                                    if (_discountHdr != null)
                                    {
                                        _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception exs)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(exs.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    CHNLSVC.CloseChannel();
                    return;
                }
                if (_isDifferent || ucPayModes1.IsDiscounted)
                {
                    if (MessageBox.Show("Discount applicable for selected paymodes,Do you want to ammend payments\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        btnClear.Enabled = false;
                        btnSave.Enabled = false;
                        btnHold.Enabled = false;
                        btnCancel.Enabled = false;                        
                    }
                    else
                    {
                        if (_canSaveWithoutDiscount)
                        {
                            if (MessageBox.Show("Invoice will save without Discount", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                _isDifferent = false;
                                _discountSequence = 0;
                            }
                            else
                            {
                                _isDifferent = false;
                                _discountSequence = 0;
                                return;
                            }
                            //return;
                        }
                        else
                        {
                            MessageBox.Show("Can not process invoice because discount circular not allow to process without discount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            _isDifferent = false;
                            _discountSequence = 0;
                            return;
                        }
                    }
                }
                else
                {
                    if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        _discountSequence = 0;
                        return;
                    }
                }

                if (_isDifferent)
                {
                    string _discountItem = FormatDiscoutnItem(0, "Item") + FormatDiscoutnItem(2, "Unit Amount") + FormatDiscoutnItem(2, "Dis. Rate") + FormatDiscoutnItem(2, "Dis. Amount") + FormatDiscoutnItem(2, "Total Amount") + "\n";
                    foreach (InvoiceItem i in _invoiceItemList)//.Where(x => x.Sad_disc_rt > 0).ToList()
                        _discountItem += FormatDiscoutnItem(0, i.Sad_itm_cd) + FormatDiscoutnItem(2, i.Sad_unit_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_rt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_tot_amt.ToString()) + "\n";

                    //if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    //{
                    if (lblSVatStatus.Text.Trim() == "Available" || lblVatExemptStatus.Text.Trim() == "Available")
                    {
                        decimal Vatsum = _invoiceItemListWithDiscount.Sum(x => x.Sad_itm_tax_amt);
                        _tobepay -= Vatsum;
                    }
                    lblRePayToBePay.Text = FormatToCurrency(_tobepay.ToString());
                    if (_recieptItem != null) if (_recieptItem.Count > 0)
                            if (_recieptItem.Count == 1)
                                _recieptItem.ForEach(x => x.Newpayment = Math.Round(_tobepay, 2));
                            else
                                _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                    DataTable _tbl = _recieptItem.ToDataTable();
                    gvRePayment.DataSource = _tbl;
                    _toBePayNewAmount = _tobepay;
                    //bool creditnote=false;
                    //foreach (DataGridViewRow grv in gvRePayment.Rows) {
                    //    string paytp = grv.Cells["repy_paymenttype"].Value.ToString();
                    //    if (paytp == "CRNOTE")
                    //    {
                    //        creditnote = true;
                    //        grv.ReadOnly = true;
                    //        gvRePayment.BeginEdit(true);
                    //    }

                    //}
                    pnlRePay.Visible = true;
                    pnlMain.Enabled = false;
                    //}
                    return;
                }
                if (ucPayModes1.IsDiscounted)
                {
                    _invoiceItemListWithDiscount = ucPayModes1.DiscountedInvoiceItem;
                    string _discountItem = FormatDiscoutnItem(0, "Item") + FormatDiscoutnItem(2, "Unit Amount") + FormatDiscoutnItem(2, "Dis. Rate") + FormatDiscoutnItem(2, "Dis. Amount") + FormatDiscoutnItem(2, "Total Amount") + "\n";
                    foreach (InvoiceItem i in _invoiceItemList)//.Where(x => x.Sad_disc_rt > 0).ToList()
                        _discountItem += FormatDiscoutnItem(0, i.Sad_itm_cd) + FormatDiscoutnItem(2, i.Sad_unit_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_rt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_tot_amt.ToString()) + "\n";
                    if (MessageBox.Show("Discount applicable for selected paymodes,Do you want to ammend payments?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        if (lblSVatStatus.Text.Trim() == "Available" || lblVatExemptStatus.Text.Trim() == "Available")
                        {
                            decimal Vatsum = ucPayModes1.DiscountedInvoiceItem.Sum(x => x.Sad_itm_tax_amt);
                            _tobepay = ucPayModes1.DiscountedValue - Vatsum;
                        }
                        else
                        {
                            _tobepay = ucPayModes1.DiscountedValue;
                        }
                        lblRePayToBePay.Text = FormatToCurrency(_tobepay.ToString());
                        if (_recieptItem != null) if (_recieptItem.Count > 0)
                                if (_recieptItem.Count == 1)
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(_tobepay, 2));
                                else
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                        DataTable _tbl = _recieptItem.ToDataTable();
                        gvRePayment.DataSource = _tbl;
                        _toBePayNewAmount = _tobepay;
                        //bool creditnote=false;
                        //foreach (DataGridViewRow grv in gvRePayment.Rows) {
                        //    string paytp = grv.Cells["repy_paymenttype"].Value.ToString();
                        //    if (paytp == "CRNOTE")
                        //    {
                        //        creditnote = true;
                        //        grv.ReadOnly = true;
                        //        gvRePayment.BeginEdit(true);
                        //    }

                        //}
                        pnlRePay.Visible = true;
                        pnlMain.Enabled = false;
                    }
                    return;
                }
                else
                {
                    //if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    //{
                    //    return;
                    //}
                }

                #region Gift Voucher - Parser

                List<InvoiceVoucher> _giftVoucher = null;
                List<ReptPickSerials> _giftVoucherSerial = null;
                List<ReptPickSerials> _gvLst = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();
                if (_gvLst != null)
                    if (_gvLst.Count > 0)
                    {
                        _giftVoucher = new List<InvoiceVoucher>();
                        Parallel.ForEach(_gvLst, _one =>
                        {
                            string _attachedItem = string.Empty;
                            if (gf_assignItem.Visible)
                            {
                                _attachedItem = (from DataGridViewRow _row in gvGiftVoucher.Rows where Convert.ToString(_row.Cells["gf_serial1"].Value) == _one.Tus_ser_1 && Convert.ToString(_row.Cells["gf_serial2"].Value) == _one.Tus_ser_2 && Convert.ToString(_row.Cells["gf_item"].Value) == _one.Tus_itm_cd select Convert.ToString(_row.Cells[7].Value)).ToList()[0];
                                if (string.IsNullOrEmpty(_attachedItem))
                                    _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];
                            }
                            else
                                _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];

                            InvoiceVoucher _gift = new InvoiceVoucher();
                            _gift.Stvo_bookno = Convert.ToInt32(_one.Tus_ser_2);
                            _gift.Stvo_cre_by = BaseCls.GlbUserID;
                            _gift.Stvo_cre_when = DateTime.Now;
                            _gift.Stvo_gv_itm = _one.Tus_itm_cd;
                            _gift.Stvo_inv_no = string.Empty;
                            _gift.Stvo_itm_cd = _attachedItem;
                            _gift.Stvo_pageno = Convert.ToInt32(_one.Tus_ser_1);
                            _gift.Stvo_prefix = _one.Tus_ser_3;
                            _gift.Stvo_price = _one.Tus_unit_price;
                            _giftVoucher.Add(_gift);
                            if (_giftVoucherSerial == null) _giftVoucherSerial = new List<ReptPickSerials>();
                            _giftVoucherSerial.Add(_one);
                            ScanSerialList.Remove(_one);
                        });
                    }

                #endregion Gift Voucher - Parser

                #region cr note warranty updation

                /* MODIFICATION 2014/02/08
                 * SACHITH
                 * ********* PROCESS ***************
                 *
                 * get all reciept types
                 * get credit notes in reciept types
                 * get all items in credit note
                 * get warranty in cr note
                 * update all new items with old warranty
                 *
                 * **IMPORTANT**
                 * if cr has multiple items and multiple warranty get maximum warranty
                 * first item 0 months
                 * second 12 months
                 * third 24 months
                 * new discount will be 24 month for all items
                 *
                 * **********************************
                 */

                //Check and apply warranty period and remarks - New
                foreach (InvoiceItem _itmWar in _invoiceItemList)
                {
                    //Check Selected price book and level is warranty base price level.
                    PriceBookLevelRef _pbLvl = CHNLSVC.Sales.GetPriceLevelForHp(BaseCls.GlbUserComCode, _itmWar.Sad_pbook, _itmWar.Sad_pb_lvl, _itmWar.Sad_itm_stus);
                    if (_pbLvl != null)
                    {
                        if (_pbLvl.Sapl_set_warr == true || txtDate.Value.Date != _serverDt)
                        {
                            if (CheckItemWarrantyNew(_itmWar.Sad_itm_cd, _itmWar.Sad_itm_stus, _itmWar.Sad_seq, _itmWar.Sad_itm_seq, _itmWar.Sad_pbook, _itmWar.Sad_pb_lvl, _pbLvl.Sapl_set_warr, _itmWar.Sad_unit_rt, _pbLvl.Sapl_warr_period))
                            {
                                MessageBox.Show(_itmWar.Sad_itm_cd + " item's warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            else
                            {
                                _itmWar.Sad_warr_period = WarrantyPeriod;
                                _itmWar.Sad_warr_remarks = WarrantyRemarks;
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("Cannot find valid warranty.Please contact IT Dept.", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                string _WarrFrom = "";
                string _CRNOTE = "";
                foreach (RecieptItem ritm in _recieptItem)
                {
                    if (ritm.Sard_pay_tp == "CRNOTE")
                    {
                        InvoiceHeader _invoice = CHNLSVC.Sales.GetInvoiceHeaderDetails(ritm.Sard_ref_no);
                        _CRNOTE = ritm.Sard_ref_no;
                        if (_invoice != null)
                        {
                            if (!string.IsNullOrEmpty(_invoice.Sah_anal_3))
                            {
                                DataTable _appReq = CHNLSVC.General.SearchrequestAppDetByRef(_invoice.Sah_anal_3);

                                if (_appReq.Rows.Count == 0)
                                {
                                    MessageBox.Show("Cannot find approval details.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                else
                                {
                                    
                                    foreach (DataRow row2 in _appReq.Rows)
                                    {
                                        if (row2["GRAD_ANAL11"] != null)
                                        {
                                            _WarrFrom = row2["GRAD_ANAL11"].ToString();
                                        }
                                    }
                                }
                            }
                            else
                            {
                                _WarrFrom = "CREDIT";
                            }
                        }

                        if (_WarrFrom != "NEWITEM")
                        {
                            List<InvoiceItem> _invItmList = new List<InvoiceItem>();
                            //get items from cr note
                            if (!string.IsNullOrEmpty(_CRNOTE))
                            {
                                _invItmList = CHNLSVC.Sales.GetInvoiceItems(_CRNOTE);
                            }
                            else
                            {
                                _invItmList = CHNLSVC.Sales.GetInvoiceItems(_invoice.Sah_ref_doc);
                            }
                           // List<InvoiceItem> _invItmList = CHNLSVC.Sales.GetInvoiceItems(_invoice.Sah_ref_doc);
                            int _proPd = 0;
                            string _warrRmk = "";
                            //get all discounts
                            foreach (InvoiceItem _tem in _invItmList)
                            {
                               // if (_tem.Sad_warr_period < _proPd)
                                if (_tem.Sad_warr_period != 0 && (_tem.Sad_warr_period < _proPd))
                                {
                                    _proPd = _tem.Sad_warr_period;
                                    _warrRmk = _tem.Sad_warr_remarks;
                                }
                            }
                            List<InvoiceItem> _invItmListtemp = new List<InvoiceItem>();  //add  by tharanga 2018/10/11
                            _invItmListtemp = _invItmList.Where(a => a.Sad_warr_period != 0).ToList();
                            if (_invItmListtemp.Count > 0)
                            {
                                _proPd = _invItmListtemp.Any() ? _invItmListtemp.Min(a => a.Sad_warr_period) : 0;

                            }

                            foreach (InvoiceItem _invWarr in _invoiceItemList)
                            {
                                //add  by tharanga 2018/10/11
                                List<InvoiceItem> _InvoiceItem = _invItmList.Where(r => r.Sad_itm_cd == _invWarr.Sad_itm_cd).ToList();
                                if (_InvoiceItem.Count > 0)
                                {
                                    _invWarr.Sad_warr_period = _InvoiceItem.First().Sad_warr_period;
                                    _invWarr.Sad_warr_remarks = null;
                                }
                                else
                                {
                                    _invWarr.Sad_warr_period = _proPd;
                                    _invWarr.Sad_warr_remarks = null;
                                }
                                //End 

                                //if (_invWarr.Sad_unit_rt > 0) //commnet by tharanga 2018/10/11
                                //{
                                //    _invWarr.Sad_warr_period = _proPd;
                                //    _invWarr.Sad_warr_remarks = null;
                                //}
                            }
                            //_invoiceItemList.ForEach(x => x.Sad_warr_period = _proPd);
                        }
                        //Comment by darshana 12-02-2015 after submint invoice copy 26H-CS-33176 mentionning system error by boss
                        // _invoiceItemList.ForEach(x => x.Sad_warr_remarks = _warrRmk);
                    }
                    //kapila 16/1/2017 - check reserve serial is available for advance receipt
                    //if (ritm.Sard_pay_tp == "ADVAN")
                    //{
                    //    if (_recHeader.Sar_subrec_tp == "INTR")
                    //    {
                    //        Boolean _isrecitemfound = false;
                    //        List<ReceiptItemDetails> oReceiptItemDetails = CHNLSVC.Sales.GetAdvanReceiptItems(ritm.Sard_ref_no);
                    //        foreach (ReceiptItemDetails itm in oReceiptItemDetails)
                    //        {
                    //            MasterItem _item = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, itm.Sari_item);
                    //            List<ReptPickSerials> _serials = new List<ReptPickSerials>();
                    //            if (_item.Mi_is_ser1 == 1)

                    //                _serials = (from _ser in ScanSerialList
                    //                            where _ser.Tus_itm_cd == itm.Sari_item && _ser.Tus_ser_1 == itm.Sari_serial
                    //                            select _ser).ToList<ReptPickSerials>();

                    //            else
                    //                _serials = (from _ser in ScanSerialList
                    //                            where _ser.Tus_itm_cd == itm.Sari_item
                    //                            select _ser).ToList<ReptPickSerials>();

                    //            if (_serials != null && _serials.Count > 0)
                    //            {
                    //                _isrecitemfound = true;
                    //            }
                    //        }
                    //        if (_isrecitemfound == false)
                    //        {
                    //            MessageBox.Show("Item/Serial mismatch with inter transfer advance receipt.", "Advance Receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //            return;
                    //        }
                    //    }
                    //}
                }

                //updated by akila 2017/08/22 - update reservation details
                if (!chkDeliverLater.Checked)
                {
                    if (_invoiceItemList != null)
                    {
                        var _invItmsWithRes = _invoiceItemList.Where(c => !string.IsNullOrEmpty(c.Sad_res_no) && c.Sad_res_no != "N/A" && c.Sad_res_no != "PROMO_VOU").ToList();
                        if (_invItmsWithRes != null && _invItmsWithRes.Count > 0)
                        {
                            foreach (var item in _invItmsWithRes)
                            {
                                foreach (var _pickSer in ScanSerialList)
                                {
                                    if (_pickSer.Tus_itm_cd == item.Sad_itm_cd && _pickSer.Tus_base_itm_line == item.Sad_itm_line)
                                    {
                                        _pickSer.Tus_resqty = _pickSer.Tus_qty;
                                    }
                                }
                            }
                            invHdr.UpdateResLog = true;
                        }
                    }
                }
                #endregion cr note warranty updation

                //Commented by tharaka on 2015-08-08
                //Check and valid date ADVANCE Receipt Item and invoice Item
                //if (_recieptItem != null)
                //{
                //    if (_recieptItem.Count > 0)
                //    {
                //        foreach (RecieptItem _itm in _recieptItem)
                //        {
                //            if (_itm.Sard_pay_tp == "ADVAN")
                //            {
                //                List<ReceiptItemDetails> _advRecItm = new List<ReceiptItemDetails>();
                //                _advRecItm = CHNLSVC.Sales.GetAdvanReceiptItems(_itm.Sard_ref_no);

                //                if (_advRecItm != null)
                //                {
                //                    if (_advRecItm.Count > 0)
                //                    {
                //                        foreach (ReceiptItemDetails _advItm in _advRecItm)
                //                        {
                //                            List<InvoiceItem> _foundItm = (from _res in _invoiceItemList
                //                                                           where _res.Sad_itm_cd == _advItm.Sari_item
                //                                                           select _res).ToList<InvoiceItem>();
                //                            if (_foundItm != null && _foundItm.Count > 0)
                //                            {

                //                            }
                //                            else
                //                            {
                //                                MessageBox.Show("Advance receipt item : " + _advItm.Sari_item + " not in invoice item list.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //                                return;
                //                            }
                //                        }
                //                    }
                //                }
                //            }
                //        }
                //    }
                //}

                int effect = -1;
                string _error = string.Empty;
                string _buybackadj = string.Empty;
                string _registration = "";
                try
                {
                    btnSave.Enabled = false;
                    _invoiceItemList.ForEach(x => x.Sad_srn_qty = 0);
                    List<RecieptItem> _registrationReciept = new List<RecieptItem>();
                    _registrationReciept = ucPayModes2.RecieptItemList;
                    List<VehicalRegistration> _registrationList = new List<VehicalRegistration>();
                    //2013/12/10
                    //ADDED REGISTRATION PROCESS

                    //add by akila - 2017/10/06 - send payment details to credit card  terminal  - only on-line card transactions
                    if (_recieptItem != null && _recieptItem.Count > 0)
                    {
                        var _onlineCardPayments = _recieptItem.Where(x => x.Sard_pay_tp == CommonUIDefiniton.PayMode.CRCD.ToString() && x.IsOnlineCardPayment == true).ToList();
                        if (_onlineCardPayments != null && _onlineCardPayments.Count > 0)
                        {
                            //if (ucPayModes1.CctIsOnline && CCTBaseComponent.CCTBase.IsCCTOnline)
                            //{
                                //if (cmbInvType.Items.Count > 0 && cmbInvType.Text == "CS")
                                if (cmbInvType.Items.Count > 0 && _mainInvTp == "CASH") //Sanjeewa 2017-12-13
                                {
                                    string _returnMsg = string.Empty;
                                    int _cctPaystatus = 1;

                                    _returnMsg = PayByCCT(_recieptItem, ref _cctPaystatus);
                                    if (_cctPaystatus != 0)
                                    {
                                        CCTBaseComponent.CCTBase.IsCCTOnline = false;
                                        MessageBox.Show(_returnMsg, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        btnSave.Enabled = true;
                                        effect = -1;
                                        return;
                                    }
                                    else
                                    {
                                        CCTBaseComponent.CCTBase.IsCCTOnline = true;
                                        //save CCT Trans Log details
                                        if (CreditCardTransLog != null)
                                        {
                                            _invheader.Sah_cct_tran_no = CreditCardTransLog.Sctl_rrn;
                                            string _errorrMsg = string.Empty;
                                            Int16 _affected = 0;
                                            _affected = CHNLSVC.Sales.SaveCctTransLog(CreditCardTransLog, ref _errorrMsg);
                                            if (_affected < 1)
                                            {
                                                throw new Exception(_errorrMsg);
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Can not process invoice - Credit card details not found", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            return;
                                        }
                                    }
                                }
                            //} 
                        }
                    }                                       

                    //updated by akila 2018/02/05
                    if (!_isHoldInvoiceProcess)
                    {
                        UpdateEventDetails();
                    }


                    if (_isNeedRegistrationReciept)
                    {
                        //reciept auto number
                        MasterAutoNumber masterAutoRecTp = new MasterAutoNumber();
                        masterAutoRecTp.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        masterAutoRecTp.Aut_cate_tp = "PC";
                        masterAutoRecTp.Aut_direction = null;
                        masterAutoRecTp.Aut_modify_dt = null;
                        masterAutoRecTp.Aut_moduleid = "RECEIPT";
                        masterAutoRecTp.Aut_number = 5;//what is Aut_number
                        masterAutoRecTp.Aut_start_char = "VHREG";
                        masterAutoRecTp.Aut_year = null;

                        RecieptHeader _ReceiptHeader = new RecieptHeader();
                        _ReceiptHeader.Sar_seq_no = -1; //CHNLSVC.Inventory.Generate_new_seq_num(GlbUserName, "RECEIPT", 1, BaseCls.GlbUserComCode);
                        _ReceiptHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                        _ReceiptHeader.Sar_receipt_type = "VHREG";
                        // _ReceiptHeader.Sar_receipt_no = txtRecNo.Text.Trim();

                        MasterReceiptDivision _RecDiv = new MasterReceiptDivision();
                        _RecDiv = CHNLSVC.Sales.GetDefRecDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                        if (_RecDiv.Msrd_cd != null)
                        {
                            _ReceiptHeader.Sar_prefix = _RecDiv.Msrd_cd;
                        }
                        else
                        {
                            _ReceiptHeader.Sar_prefix = "";
                        }
                        //_ReceiptHeader.Sar_prefix = txtDivision.Text.Trim();
                        // _ReceiptHeader.Sar_manual_ref_no = txtManual.Text.Trim();
                        _ReceiptHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Value).Date;
                        _ReceiptHeader.Sar_direct = true;
                        _ReceiptHeader.Sar_acc_no = "";
                        _ReceiptHeader.Sar_is_oth_shop = false;
                        _ReceiptHeader.Sar_oth_sr = "";
                        _ReceiptHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                        _ReceiptHeader.Sar_debtor_cd = txtCustomer.Text.Trim();
                        _ReceiptHeader.Sar_debtor_name = txtCusName.Text.Trim();
                        _ReceiptHeader.Sar_debtor_add_1 = txtAddress1.Text.Trim();
                        _ReceiptHeader.Sar_debtor_add_2 = txtAddress2.Text.Trim();
                        _ReceiptHeader.Sar_tel_no = "";
                        _ReceiptHeader.Sar_mob_no = txtMobile.Text.Trim();
                        _ReceiptHeader.Sar_nic_no = txtNIC.Text.Trim();
                        _ReceiptHeader.Sar_tot_settle_amt = ucPayModes2.RecieptItemList.Sum(x => x.Sard_settle_amt);
                        _ReceiptHeader.Sar_comm_amt = 0;
                        _ReceiptHeader.Sar_is_mgr_iss = false;
                        _ReceiptHeader.Sar_esd_rate = 0;
                        _ReceiptHeader.Sar_wht_rate = 0;
                        _ReceiptHeader.Sar_epf_rate = 0;
                        _ReceiptHeader.Sar_currency_cd = "LKR";
                        _ReceiptHeader.Sar_uploaded_to_finance = false;
                        _ReceiptHeader.Sar_act = true;
                        _ReceiptHeader.Sar_direct_deposit_bank_cd = "";
                        _ReceiptHeader.Sar_direct_deposit_branch = "";
                        // _ReceiptHeader.Sar_remarks = txtNote.Text.Trim();
                        _ReceiptHeader.Sar_is_used = false;
                        _ReceiptHeader.Sar_ref_doc = "";
                        _ReceiptHeader.Sar_ser_job_no = "";
                        _ReceiptHeader.Sar_used_amt = 0;
                        _ReceiptHeader.Sar_create_by = BaseCls.GlbUserID;
                        _ReceiptHeader.Sar_mod_by = BaseCls.GlbUserID;
                        _ReceiptHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                        _ReceiptHeader.Sar_anal_1 = cmbDistrict.Text;
                        _ReceiptHeader.Sar_anal_2 = txtProvince.Text.Trim();
                        if (string.IsNullOrEmpty(_businessEntity.Mbe_distric_cd))
                            _businessEntity.Mbe_distric_cd = cmbDistrict.Text;
                        if (string.IsNullOrEmpty(_businessEntity.Mbe_province_cd))
                            _businessEntity.Mbe_province_cd = txtProvince.Text;

                        if (cmbDistrict.SelectedValue != null)
                            _masterBusinessCompany.Mbe_distric_cd = cmbDistrict.SelectedValue.ToString();
                        _masterBusinessCompany.Mbe_province_cd = txtProvince.Text;

                        ReptPickHeader _SerHeader = new ReptPickHeader();
                        _SerHeader.Tuh_usrseq_no = -1;
                        _SerHeader.Tuh_usr_id = BaseCls.GlbUserID;
                        _SerHeader.Tuh_usr_com = BaseCls.GlbUserComCode;
                        _SerHeader.Tuh_session_id = BaseCls.GlbUserSessionID;
                        _SerHeader.Tuh_cre_dt = Convert.ToDateTime(txtDate.Value).Date;
                        _SerHeader.Tuh_doc_tp = "INV";
                        _SerHeader.Tuh_direct = false;
                        _SerHeader.Tuh_ischek_itmstus = true;
                        _SerHeader.Tuh_ischek_simitm = true;
                        _SerHeader.Tuh_ischek_reqqty = true;
                        _SerHeader.Tuh_doc_no = null;

                        // vehical regitration list
                        foreach (RegistrationList _reg in _List)
                        {
                            //get serials
                            List<ReptPickSerials> _serList = (from res in ScanSerialList
                                                              where res.Tus_itm_cd == _reg.Item && res.Tus_itm_stus == _reg.Stus
                                                              select res).ToList<ReptPickSerials>();
                            foreach (ReptPickSerials _serial in _serList)
                            {
                                VehicalRegistration _tem = AssingRegDetails(_reg.Item, _reg.Item_reg, _reg.Item_claim, _serial.Tus_ser_1, _serial.Tus_ser_2);
                                _registrationList.Add(_tem);
                            }
                        }
                        //save invoice with registration

                        effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransactionRegistration(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, _ReceiptHeader, masterAutoRecTp, _registrationList, _registrationReciept, _SerHeader, out _registration, ref IsInvoiceCompleted,null, CreditCardTransLog);

                        //if (effect == -1) {
                        //    MessageBox.Show("Error occured while processing !!\n" + _error, "Error");
                        //    return;

                        //}
                    }
                    //END
                    else
                    {
                        //ADDED 2014/02/26
                        bool _sucess = CheckGeneralDiscount();
                        if (_sucess == false)
                        {
                            return;
                        }
                        #region gvo validate and cust mobile validate //add by tharanga
                        foreach (InvoiceItem _itm in _invoiceItemList)
                        {
                            MasterItem _mitm = CHNLSVC.Inventory.GetItem(_invheader.Sah_com, _itm.Sad_itm_cd);
                            if (_mitm.Mi_is_ser1 != -1)
                            {
                                //for (int i = 1; i <= _itm.Sad_qty; i++)
                                //{
                                List<PromoVoucherDefinition> _proVouList = new List<PromoVoucherDefinition>();
                                _proVouList = CHNLSVC.Sales.GetPromotionalVouchersDefinition(_invheader.Sah_com, _invheader.Sah_inv_tp, _invheader.Sah_pc, _invheader.Sah_sah_date_new.Date, _itm.Sad_pbook, _itm.Sad_pb_lvl, _mitm.Mi_brand, _mitm.Mi_cate_1, _mitm.Mi_cate_2, _itm.Sad_itm_cd, true);
                                if (_proVouList != null && _proVouList.Count > 0) _VoucherPromotionnew = true;
                                //}
                            }
                        }
                        if (_VoucherPromotionnew == true)
                        {
                            if (ValidateMobileNo(_businessEntity.Mbe_mob) == false)
                            {
                                if (MessageBox.Show("Free voucher will not generate due to not available valid mobile number. Do you want to continue?", "Print", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No) return;

                            }
                        }
                        #endregion

                        effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransaction01(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, ref IsInvoiceCompleted, null, null, false, CreditCardTransLog);
                    }
                }
                catch (Exception ex)
                {
                    if (ex.Message.Contains("EMS.CHK_INLFREEQTY"))
                    {
                        MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Location Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); return;
                    }
                    else if (ex.Message.Contains("EMS.CHK_INBFREEQTY"))
                    {
                        MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Batch Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); ; this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); return;
                    }

                    if (_giftVoucher != null && _giftVoucher.Count > 0) { _giftVoucher = new List<InvoiceVoucher>(); ScanSerialList.AddRange(_giftVoucherSerial); _giftVoucherSerial = new List<ReptPickSerials>(); }
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                    CHNLSVC.CloseChannel();
                    return;
                }
                finally
                {
                    string Msg = string.Empty;

                    if (effect != -1)
                    {
                        //Send SMS to Customer -- Sanjeewa 2016-04-01
                        Service_Message_Template oTemplate = CHNLSVC.CustService.GetMessageTemplates_byID(BaseCls.GlbUserComCode, BaseCls.GlbDefSubChannel, 15);
                        if (oTemplate != null && oTemplate.Sml_templ_mail != null)
                        {
                            sendSMS(txtMobile.Text, oTemplate.Sml_templ_sms, 1);
                        }

                        if (chkDeliverLater.Checked == false || chkDeliverNow.Checked)
                        {
                            Msg = "Successfully Saved! Document No : " + _invoiceNo + " with Delivery Order :" + _deliveryOrderNo + ". ";
                        }
                        else
                        {
                            Msg = "Successfully Saved! Document No : " + _invoiceNo + ". ";
                        }

                        //if (cmbInvType.Text.Trim() == "CS")
                        if (_mainInvTp == "CASH") //Sanjeewa 2017-12-13
                        {
                            var _isCashPaymentExsit = _recieptItem.Where(x => x.Sard_pay_tp == "CASH").ToList();
                            if (_isCashPaymentExsit != null)
                                if (_isCashPaymentExsit.Count > 0)
                                {
                                    decimal _cashamt = _isCashPaymentExsit.Sum(x => x.Sard_settle_amt);
                                    string _customerGiven = PaymentBalanceConfirmation(Msg, _cashamt);
                                    if (!string.IsNullOrEmpty(_customerGiven.Trim()))
                                    {
                                        decimal _tmpCashGiven = 0;
                                        decimal.TryParse(_customerGiven, out _tmpCashGiven);
                                        this.Cursor = Cursors.Default;

                                        string BalanceToGive = FormatToCurrency(Convert.ToString(_tmpCashGiven - _cashamt));
                                        //string BalanceToGive = FormatToCurrency(Convert.ToString(Convert.ToDecimal(_customerGiven) - _cashamt));
                                        using (new CenterWinDialog(this)) { MessageBox.Show("You have to give back as balance " + BalanceToGive + "\n in " + lblCurrency.Text + ".", "Balance To Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    }
                                }
                        }
                        else
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(Msg, "Saved Documents", MessageBoxButtons.OK, MessageBoxIcon.Information); } }
                        BaseCls.GlbReportName = string.Empty;
                        GlbReportName = string.Empty;
                        MasterBusinessEntity _itm = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                        bool _isAskDO = false;
                        if (MasterChannel != null) if (MasterChannel.Rows.Count > 0) if (MasterChannel.Rows[0].Field<Int16>("msc_isprint_do") == 1) _isAskDO = true; else _isAskDO = false;

                        if (chkManualRef.Checked == false)
                        {
                            bool _isPrintElite = false;
                            if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_chnl))
                            {
                                if (_MasterProfitCenter.Mpc_chnl.Trim() == "ELITE" || _MasterProfitCenter.Mpc_chnl.Trim() == "RRC1" || _MasterProfitCenter.Mpc_chnl.Trim() == "RRE2" || _MasterProfitCenter.Mpc_chnl.Trim() == "APPLE" || _MasterProfitCenter.Mpc_chnl.Trim() == "APPIST")
                                {
                                    BaseCls.GlbReportDoc = _invoiceNo;
                                    clsSalesRep objSales = new clsSalesRep();
                                    if (objSales.checkIsDirectPrint() == true && objSales.removeIsDirectPrint() == false && lblSVatStatus.Text != "Available")
                                    {
                                        objSales.InvoicePrint_Direct();
                                        _isPrintElite = true;
                                    }
                                    else
                                    {
                                        BaseCls.GlbReportTp = "INV";
                                        ReportViewer _view = new ReportViewer();
                                        BaseCls.GlbReportName = string.Empty;
                                        GlbReportName = string.Empty;
                                        _view.GlbReportName = string.Empty;
                                        _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt";
                                        _view.GlbReportDoc = _invoiceNo;
                                        _view.Show(); _view = null; _isPrintElite = true;
                                    }
                                 } 
                            }
                            //AUTO_DEL
                            //get permission
                            bool _permission = CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 11055);
                            if (!_permission)
                            {
                                if (_MasterProfitCenter.Mpc_chnl.Trim() == "AUTO_DEL")
                                {
                                    if (cmbInvType.Text.Trim() == "CRED")
                                    {
                                        ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "DealerCreditInvoicePrints.rpt"; BaseCls.GlbReportName = "DealerCreditInvoicePrints.rpt"; _view.GlbReportDoc = _invoiceNo; BaseCls.GlbReportDoc = _invoiceNo; //DealerCreditInvoicePrints
                                        _view.Show(); _view = null; _isPrintElite = true;
                                    }
                                    else
                                    {
                                        ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "InvoiceHalfPrints.rpt"; BaseCls.GlbReportName = "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; BaseCls.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true;
                                    }
                                }
                            }
                            if (_isPrintElite == false)
                            {
                                if (_itm.Mbe_sub_tp != "C.") //updated by akila 2017/11/29
                                {
                                    if (_itm.Mbe_cate == "LEASE")
                                    {
                                        //Dealer
                                        ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : BaseCls.GlbUserComCode == "AST" ? "InvoicePrint_AST.rpt" : "InvoicePrintTax.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                        if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _viewt.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrint_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                    }
                                    else
                                    {
                                        //========================= INVOCIE  CASH/CREDIT/ HIRE
                                        if (chkTaxPayable.Checked == false)
                                        { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; }
                                        else
                                        {
                                            //Add Code by Chamal 27/04/2013
                                            //====================  TAX INVOICE
                                            ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : BaseCls.GlbUserComCode == "AST" ? "InvoicePrint_AST.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                            if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _viewt.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrintTax_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                            //====================  TAX INVOICE
                                        }
                                    }

                                    #region old code
                                    ////Showroom
                                    ////========================= INVOCIE  CASH/CREDIT/ HIRE
                                    //if (chkTaxPayable.Checked == false)
                                    //{ ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; }
                                    //else
                                    //{
                                    //    //Add Code by Chamal 27/04/2013
                                    //    //====================  TAX INVOICE
                                    //    ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : BaseCls.GlbUserComCode == "AST" ? "InvoicePrint_AST.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                    //    if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrintTax_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                    //    //====================  TAX INVOICE
                                    //}
                                    #endregion
                                }
                                else
                                {
                                    //Dealer
                                    ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : BaseCls.GlbUserComCode == "AST" ? "InvoicePrint_AST.rpt" : "InvoicePrintTax.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                    if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _viewt.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrint_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                }
                            }

                            if (BuyBackItemList != null)
                                if (BuyBackItemList.Count > 0)
                                {
                                    Reports.Inventory.ReportViewerInventory _viewBB = new Reports.Inventory.ReportViewerInventory();

                                    BaseCls.GlbReportName = string.Empty;
                                    GlbReportName = string.Empty;
                                    _viewBB.GlbReportName = string.Empty;
                                    BaseCls.GlbReportTp = "INWARD";
                                    if (BaseCls.GlbUserComCode == "SGL") //Sanjeewa 2014-01-07
                                        _viewBB.GlbReportName = "Inward_Docs.rpt";
                                    else if (BaseCls.GlbDefChannel == "AUTO_DEL") //Sanjeewa 2014-03-06
                                        _viewBB.GlbReportName = "Dealer_Inward_Docs.rpt";
                                    else
                                        _viewBB.GlbReportName = "Inward_Docs.rpt";
                                    _viewBB.GlbReportDoc = _buybackadj;
                                    _viewBB.Show();
                                    _viewBB = null;
                                }
                        }

                        //=========================DO
                        if (chkDeliverLater.Checked == false || chkDeliverNow.Checked)
                        {
                            if (_isAskDO)
                            {
                                if (MessageBox.Show("Do you need to print delivery order now?", "Print", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                {
                                    BaseCls.GlbReportDoc = _deliveryOrderNo;
                                    clsInventoryRep objInv = new clsInventoryRep();
                                    clsSalesRep objSales = new clsSalesRep();
                                    if (objSales.checkIsDirectPrintDO() == true && objSales.removeIsDirectPrint() == false && BaseCls.GlbDefChannel != "AUTO_DEL")
                                    {
                                        objInv.DoRecPrint_Direct();                                        
                                    }
                                    else
                                    {
                                        ReportViewerInventory _views = new ReportViewerInventory();
                                        BaseCls.GlbReportName = string.Empty;
                                        GlbReportName = string.Empty;
                                        _views.GlbReportName = string.Empty;
                                        BaseCls.GlbReportTp = "OUTWARD";
                                        _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt";
                                        _views.GlbReportDoc = _deliveryOrderNo;
                                        _views.Show();
                                        _views = null;
                                    }
                                }
                            }
                            else
                            { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _views.GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; }
                        }
                        if (_isNeedRegistrationReciept)
                        {
                            MasterBusinessEntity _tem = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");

                            if (_tem.Mbe_sub_tp == "C." || _itm.Mbe_cate == "LEASE") //updated by akila 2017/11/29
                            {
                                ReportViewer _view = new ReportViewer();
                                BaseCls.GlbReportName = string.Empty;
                                _view.GlbReportName = string.Empty;
                                _view.GlbReportName = "ReceiptPrintDealers.rpt";
                                _view.GlbReportDoc = _registration;
                                _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                                _view.Show();
                                _view = null;
                            }
                            else
                            {
                                ReportViewer _view = new ReportViewer();
                                BaseCls.GlbReportName = string.Empty;
                                _view.GlbReportName = string.Empty;
                                BaseCls.GlbReportTp = "REC";
                                _view.GlbReportName = "ReceiptPrints.rpt";
                                _view.GlbReportDoc = _registration;
                                _view.GlbReportProfit = BaseCls.GlbUserDefProf;
                                _view.Show();
                                _view = null;
                            }
                        }
                        btnClear_Click(null, null);
                        //change chk value
                        if (_MasterProfitCenter.Mpc_is_do_now == 0)
                        {
                            chkDeliverLater.Checked = false;
                            chkDeliverNow.Checked = false;
                            chkDeliverLater_CheckedChanged(null, null);
                        }
                        else if (_MasterProfitCenter.Mpc_is_do_now == 1)
                        {
                            chkDeliverNow.Checked = true;
                            chkDeliverLater.Checked = false;
                            chkDeliverNow_CheckedChanged(null, null);
                        }
                        else
                        {
                            chkDeliverLater.Checked = true;
                            chkDeliverNow.Checked = false;
                            chkDeliverLater_CheckedChanged(null, null);
                        }
                        //Tharanga 2017/06/07
                        string invNo = _invoiceNo;
                        DataTable odt = new DataTable();
                        odt = CHNLSVC.Sales.get_sar_provou_tp(BaseCls.GlbUserComCode, invNo);
                        if (odt.Rows.Count > 0)
                        {
                            ReportViewer _view1 = new ReportViewer();
                            BaseCls.GlbReportName = string.Empty;
                            _view1.GlbReportName = string.Empty;
                            BaseCls.GlbReportTp = "Print voucher separately";
                            _view1.GlbReportName = "giftvoucher.rpt";
                            _view1.GlbReportDoc = _invoiceNo;
                            _view1.GlbReportProfit = BaseCls.GlbUserDefProf;
                            _view1.Show();
                            _view1 = null;
                        }//End Tharanga
                    }
                    else
                    {
                        if (_error.Contains("EMS.CHK_INLFREEQTY"))
                        {
                            MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Location Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); 
                        }
                        else if (_error.Contains("EMS.CHK_INBFREEQTY"))
                        {
                            MessageBox.Show("There is no free stock balance available." + "\n" + "Please check the stock balances.", "No Free Batch Balance", MessageBoxButtons.OK, MessageBoxIcon.Warning); ; this.Cursor = Cursors.Default; CHNLSVC.CloseChannel(); 
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(_error))
                            { if (_giftVoucher != null && _giftVoucher.Count > 0) { _giftVoucher = new List<InvoiceVoucher>(); ScanSerialList.AddRange(_giftVoucherSerial); _giftVoucherSerial = new List<ReptPickSerials>(); } this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Generating Invoice is terminated due to following reason, " + _error, "Generated Error", MessageBoxButtons.OK, MessageBoxIcon.Hand); } }
                            CHNLSVC.CloseChannel();
                        }                        
                    }
                    CHNLSVC.CloseAllChannels();
                }

              

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + "\n" + ex.StackTrace);
                this.Cursor = Cursors.Default;
                CHNLSVC.CloseChannel();
            }
            finally
            {
                IsInvoiceCompleted = false;
                btnSave.Enabled = true;
                CHNLSVC.CloseAllChannels();
            }
        }

        private void sendSMS(string _mobile, string _msg, int _refno)
        {
            string mobilNo = null, msg = null;
            List<SmsOutMember> _smsOutLst = new List<SmsOutMember>();
            List<Sms_Ref_Log> _smsRefLog = new List<Sms_Ref_Log>();

            mobilNo = _mobile;
            msg = _msg;

            if (mobilNo != null)
            {
                string ValidaMobileNumber;
                ValidaMobileNumber = mobilNo;
                if (IsValidMobileNo(mobilNo, out ValidaMobileNumber, "", ""))
                {
                    OutSMS smsout = new OutSMS();
                    smsout.Msg = msg;
                    smsout.Receiver = BaseCls.GlbUserDefProf;
                    smsout.Receiverphno = ValidaMobileNumber;
                    smsout.Sender = BaseCls.GlbUserID;
                    smsout.Senderphno = ValidaMobileNumber;
                    smsout.Seqno = _refno;
                    smsout.Msgstatus = 1;
                    smsout.Msgtype = "GEN_E";
                    smsout.Createtime = DateTime.Now;

                    Int32 errroCode = CHNLSVC.General.SaveSMSOut(smsout);
                }
            }

            return;
        }

        private bool IsValidMobileNo(string _mobile, out string MobileNo, string jobNo, string customerName)
        {
            int _cnvMobileNo = 0;
            string _mobileNo = _mobile;
            //if (_mobile.Contains("+94"))
            //{
            //    _mobileNo =  _mobile.Replace("+94", "0");
            //}
            if (int.TryParse(_mobileNo, out _cnvMobileNo) | _mobileNo.Substring(0, 1).ToString() == "+")
            {
                string lterOne = _mobileNo.Substring(0, 1).ToString();
                switch (lterOne)
                {
                    case "0":
                        if (_mobileNo.Length == 10)
                        {
                            string lterTwo = _mobileNo.Substring(0, 2).ToString();
                            if (_mobileNo.Substring(0, 2).ToString() == "07")
                            {
                                _mobileNo = _mobileNo.Substring(0, 1).Replace("0", "+94") + _mobileNo.Substring(1, 9);
                                MobileNo = _mobileNo;
                                return true;
                            }
                        }
                        break;
                    case "7":
                        if (_mobileNo.Length == 9)
                        {
                            MobileNo = "+94" + _mobileNo;
                            return true;
                        }
                        break;
                    case "+":
                        if (_mobileNo.Length == 12)
                        {
                            MobileNo = _mobileNo;
                            return true;
                        }
                        break;

                    default:
                        MobileNo = null;
                        return false;
                }
            }

            MobileNo = null;
            return false;
        }


        private bool CheckGeneralDiscount()
        {
            string _cusCode = txtCustomer.Text.Trim();
            foreach (InvoiceItem _invItm in _invoiceItemList)
            {
                if (_invItm.Sad_dis_type == "M" && _invItm.Sad_disc_rt > 0)
                {
                    //get discount line
                    //validate data
                    CashGeneralEntiryDiscountDef _def = CHNLSVC.Sales.GetGeneralDiscountDefinitionBySequence(_invItm.Sad_dis_seq);
                    if (_def == null)
                    {
                        //using (new CenterWinDialog(this)) { MessageBox.Show("Item - " + _invItm.Sad_itm_cd + "\nGeneral Discount not found\nPlease contact IT Dept.", "General Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return true;
                    }
                    else
                    {
                        //Add by Chamal 22-Dec-2014
                        if (_def.Sgdd_stus == true && _def.Sgdd_from_dt.Date <= txtDate.Value.Date && _def.Sgdd_to_dt.Date >= txtDate.Value.Date && _def.Sgdd_com == BaseCls.GlbUserComCode)
                        {
                            if (txtCustomer.Text.Trim() != _def.Sgdd_cust_cd && !string.IsNullOrEmpty(_def.Sgdd_cust_cd))
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Item - " + _invItm.Sad_itm_cd + "\nGeneral Discount definition customer and invoice customer mismatch\nDefinition Customer - " + _def.Sgdd_cust_cd + "\nPlease contact IT Dept.", "General Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return false;
                            }
                            if (!string.IsNullOrEmpty(_def.Sgdd_itm) && (_invItm.Sad_itm_cd != _def.Sgdd_itm))
                            {
                                using (new CenterWinDialog(this)) { MessageBox.Show("Item - " + _invItm.Sad_itm_cd + "\nGeneral Discount definition item and invoice item mismatch\nDefinition item - " + _def.Sgdd_itm + "\nPlease contact IT Dept.", "General Discount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        }

        private string PaymentBalanceConfirmation(string Msg, decimal _cashamount)
        {
           resed_message:
            string _cashGiven = Microsoft.VisualBasic.Interaction.InputBox(Msg + "\nPlease enter customer tender amount.", "Balance", FormatToCurrency(Convert.ToString(_cashamount)), -1, -1);
            if (!string.IsNullOrEmpty(_cashGiven))
            {

                if (IsNumeric(_cashGiven) == false)
                {
                    Msg = "Invalid amount. ";
                    goto resed_message;
                    //PaymentBalanceConfirmation(Msg, _cashamount);
                }

                decimal _tmpCashGiven = 0;
                decimal.TryParse(_cashGiven, out _tmpCashGiven);
                if (Convert.ToDecimal(_tmpCashGiven) < _cashamount)
                {
                    Msg = "Invalid amount. ";
                    goto resed_message;
                    //PaymentBalanceConfirmation(Msg, _cashamount);
                }

                _cashGiven = _tmpCashGiven.ToString();
            }

            return _cashGiven;
        }

        #endregion Rooting for Save Invoice

        #region Rooting for Hold invoice

        private void Hold()
        {
            if (IsBackDateOk(false, false) == false) return;
            //if (chkDeliverLater.Checked == false)
            //{ this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Deliver Now is not allow for holding an invoice", "Hold Invoice", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
            if (string.IsNullOrEmpty(cmbInvType.Text))
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); } cmbInvType.Focus(); return; }

            if (string.IsNullOrEmpty(txtCustomer.Text) && IsNewCustomer == false) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCustomer.Focus(); return; }
            //if (string.IsNullOrEmpty(txtCustomer.Text)){ this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtCustomer.Focus(); return; }

            if (string.IsNullOrEmpty(txtCusName.Text))
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer name", "Customer Name", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            if (string.IsNullOrEmpty(txtAddress1.Text) && string.IsNullOrEmpty(txtAddress2.Text))
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer address", "Customer Address", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            if (_invoiceItemList.Count <= 0)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the items for invoice", "Invoice Item", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            bool _isExeMust = false;
            if (MasterChannel != null && MasterChannel.Rows.Count > 0)
                _isExeMust = Convert.ToBoolean(MasterChannel.Rows[0].Field<Int16>("msc_needsalexe"));
            if (string.IsNullOrEmpty(txtExecutive.Text))
            {
                if (_isExeMust)
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the executive code", "Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtExecutive.Focus(); return; }
                else txtExecutive.Text = "N/A";
            }
            if (!string.IsNullOrEmpty(txtExecutive.Text) && _isExeMust)
            {
                if (txtExecutive.Text.Trim().ToUpper() == "N/A" || txtExecutive.Text.Trim().ToUpper() == "NA")
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Sales executive is mandatory to this channel", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtExecutive.Clear(); txtExecutive.Focus(); }
            }
            if (string.IsNullOrEmpty(lblCurrency.Text))
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the currency code", "Currency", MessageBoxButtons.OK, MessageBoxIcon.Information); } lblCurrency.Focus(); return; }
            if (_recieptItem.Count > 0)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please remove the payment details.", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            Int32 _count = 1;
            _invoiceItemList.OrderBy(x => x.Sad_itm_line);
            InvoiceSerialList.OrderBy(x => x.Sap_itm_line);

            //System.IO.StreamWriter _file1 = new System.IO.StreamWriter(@"C:\text1.txt", true);
            //foreach (InvoiceItem _ser in _invoiceItemList)
            //{
            //    _file1.WriteLine(_ser.Sad_itm_line + "/t" + _ser.Sad_itm_cd);
            //}
            //_file1.Close(); 

            //System.IO.StreamWriter _file2 = new System.IO.StreamWriter(@"C:\text2.txt", true);
            //foreach (InvoiceSerial _ser in InvoiceSerialList)
            //{
            //    _file2.WriteLine(_ser.Sap_itm_line + "/t" + _ser.Sap_itm_cd);
            //}
            //_file2.Close(); 


            //_recieptItem.ForEach(x => x.Sard_line_no = _count++);
            //_count = 1;
            //_invoiceItemList.ForEach(x => x.Sad_itm_line = _count++);

            foreach (InvoiceItem _oneItm in _invoiceItemList)
            {
                Int32 _currentLine = _oneItm.Sad_itm_line;

                if (InvoiceSerialList != null)
                    if (InvoiceSerialList.Count > 0)
                        InvoiceSerialList.Where(x => x.Sap_itm_line == _currentLine).ToList().ForEach(x => x.Sap_itm_line = _count);

                _recieptItem.Where(x => x.Sard_line_no == _currentLine).ToList().ForEach(x => x.Sard_line_no = _count);
                _oneItm.Sad_itm_line = _currentLine;
                _count++;
            }

            InvoiceHeader _invheader = new InvoiceHeader();
            RecieptHeader _recHeader = new RecieptHeader();
            MasterBusinessEntity _entity = new MasterBusinessEntity();
            bool _isCustomerHasCompany = false;
            string _customerCompany = string.Empty;
            string _customerLocation = string.Empty;
            _entity = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
            if (_entity != null)
                if (_entity.Mbe_cd != null)
                    if (!string.IsNullOrEmpty(_entity.Mbe_cust_com) && !string.IsNullOrEmpty(_entity.Mbe_cust_loc))
                    { _isCustomerHasCompany = true; _customerCompany = _entity.Mbe_cust_com; _customerLocation = _entity.Mbe_cust_loc; }
            InvoiceHeader _hdr;
            _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text.Trim());
            if (_hdr == null) _hdr = new InvoiceHeader();
            if (_hdr.Sah_pc != null)
            {
                if (_hdr.Sah_dt.Date != Convert.ToDateTime(txtDate.Text.Trim()).Date)
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Hold invoice can only re-hold with in the date" + _hdr.Sah_dt.Date.ToShortDateString(), "Holding...", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); } return; }
                if (_hdr.Sah_stus != "H")
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You can not hold the invoice which already " + _hdr.Sah_stus == "C" ? "canceled." : _hdr.Sah_stus == "A" ? "approved." : _hdr.Sah_stus == "D" ? "delivered." : ".", "Hold Invoice", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            }
            _invheader.Sah_com = BaseCls.GlbUserComCode;
            _invheader.Sah_cre_by = BaseCls.GlbUserID;
            _invheader.Sah_cre_when = DateTime.Now;
            _invheader.Sah_currency = "LKR";
            _invheader.Sah_cus_add1 = txtAddress1.Text.Trim();
            _invheader.Sah_cus_add2 = txtAddress2.Text.Trim();

            //akila 2017/10/12
            if ((string.IsNullOrEmpty(txtCustomer.Text)) && IsNewCustomer)
            {
                _invheader.Sah_cus_cd = "CASH"; //new customer
            }
            else
            {
                _invheader.Sah_cus_cd = txtCustomer.Text.Trim();
            }

            //_invheader.Sah_cus_cd = txtCustomer.Text.Trim();
            _invheader.Sah_cus_name = txtCusName.Text.Trim();
            _invheader.Sah_d_cust_add1 = string.IsNullOrEmpty(txtDelAddress1.Text.Trim()) ? txtAddress1.Text.Trim() : txtDelAddress1.Text.Trim();
            _invheader.Sah_d_cust_add2 = string.IsNullOrEmpty(txtDelAddress2.Text.Trim()) ? txtAddress2.Text.Trim() : txtDelAddress2.Text.Trim();
            _invheader.Sah_d_cust_cd = txtDelCustomer.Text.Trim();
            _invheader.Sah_d_cust_name = string.IsNullOrEmpty(txtDelName.Text.Trim()) ? txtCusName.Text.Trim() : txtDelName.Text.Trim();
            _invheader.Sah_direct = true;
            _invheader.Sah_dt = Convert.ToDateTime(txtDate.Text);
            _invheader.Sah_epf_rt = 0;
            _invheader.Sah_esd_rt = 0;
            _invheader.Sah_ex_rt = 1;
            _invheader.Sah_inv_no = _hdr.Sah_pc != null ? Convert.ToString(_hdr.Sah_seq_no) : Convert.ToString(CHNLSVC.Inventory.GetSerialID());
            _invheader.Sah_inv_sub_tp = "SA";
            _invheader.Sah_inv_tp = cmbInvType.Text.Trim();
            _invheader.Sah_is_acc_upload = false;
            _invheader.Sah_man_cd = "";
            _invheader.Sah_man_ref = txtManualRefNo.Text;
            _invheader.Sah_manual = chkManualRef.Checked ? true : false;
            _invheader.Sah_mod_by = BaseCls.GlbUserID;
            _invheader.Sah_mod_when = DateTime.Now;
            _invheader.Sah_pc = BaseCls.GlbUserDefProf;
            _invheader.Sah_pdi_req = 0;
            _invheader.Sah_ref_doc = txtManualRefNo.Text;
            _invheader.Sah_remarks = "";
            _invheader.Sah_sales_chn_cd = "";
            _invheader.Sah_sales_chn_man = "";
            _invheader.Sah_sales_ex_cd = txtExecutive.Text.Trim();
            _invheader.Sah_sales_region_cd = "";
            _invheader.Sah_sales_region_man = "";
            _invheader.Sah_sales_sbu_cd = "";
            _invheader.Sah_sales_sbu_man = "";
            _invheader.Sah_sales_str_cd = "";
            _invheader.Sah_sales_zone_cd = "";
            _invheader.Sah_sales_zone_man = "";
            _invheader.Sah_seq_no = Convert.ToInt32(_invheader.Sah_inv_no);
            _invheader.Sah_session_id = BaseCls.GlbUserSessionID;
            _invheader.Sah_structure_seq = txtQuotation.Text.Trim();
            _invheader.Sah_stus = "H";
            _invheader.Sah_town_cd = "";
            _invheader.Sah_tp = "INV";
            _invheader.Sah_wht_rt = 0;
            _invheader.Sah_direct = true;
            _invheader.Sah_anal_1 = BaseCls.GlbUserDefLoca;
            _invheader.Sah_tax_inv = chkTaxPayable.Checked ? true : false;
            _invheader.Sah_anal_11 = chkDeliverLater.Checked ? 0 : 1;
            _invheader.Sah_del_loc = chkDeliverLater.Checked == false ? BaseCls.GlbUserDefLoca : !string.IsNullOrEmpty(txtDelLocation.Text) ? txtDelLocation.Text : string.Empty;
            _invheader.Sah_grn_com = _customerCompany;
            _invheader.Sah_grn_loc = _customerLocation;
            _invheader.Sah_is_grn = _isCustomerHasCompany;
            _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
            _invheader.Sah_is_svat = lblSVatStatus.Text == "Available" ? true : false;
            _invheader.Sah_tax_exempted = lblVatExemptStatus.Text == "Available" ? true : false;
            _invheader.Sah_anal_4 = txtPoNo.Text.Trim();
            _invheader.Sah_anal_6 = txtLoyalty.Text.Trim();
            _invheader.Sah_man_cd = _MasterProfitCenter.Mpc_man;
            _invheader.Sah_is_dayend = 0;
            _invheader.Sah_remarks = txtRemarks.Text.Trim();
            _invheader.Sah_anal_1 = txtPromotor.Text;
            //if (string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue))) _invheader.Sah_anal_1 = string.Empty;
            //else _invheader.Sah_anal_1 = Convert.ToString(cmbTechnician.SelectedValue);
            _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();

            if (chkBasedOnAdvanceRecept.Checked)
            {
                _invheader.Sah_anal_2 = "ADVR";
            }

            MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
            MasterAutoNumber _receiptAuto = new MasterAutoNumber();

            //Add by akila 2017/11/02
            if (string.IsNullOrEmpty(txtCustomer.Text.Trim()) && IsNewCustomer)
            {
                _businessEntity = NewCustomer();
            }
            else
            {
                CollectBusinessEntity();
            }
            //CollectBusinessEntity();
            string _invoiceNo = "";
            string _receiptNo = "";
            string _deliveryOrderNo = "";
            InventoryHeader _hdrs = new InventoryHeader();
            _hdrs.Ith_loc = BaseCls.GlbUserDefLoca;
            _hdrs.Ith_com = BaseCls.GlbUserComCode;
            //foreach (InvoiceItem _item in _invoiceItemList)
            //{
            //    Int32 _currentLine = _item.Sad_itm_line;

            //    if (InvoiceSerialList != null)
            //        if (InvoiceSerialList.Count > 0)
            //            InvoiceSerialList.Where(x => x.Sap_itm_line == _currentLine).ToList().ForEach(x => x.Sap_itm_line = _count);
            //}
            try
            {
                btnSave.Enabled = false;
                string _error = string.Empty;
                string _buybackno = string.Empty;
                int effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransaction01(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, _hdrs, null, null, _invoiceAuto, _receiptAuto, null, false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, true, false, out _error, null, null, null, null, out _buybackno, ref IsInvoiceCompleted, null, null, false, CreditCardTransLog, _InvEventList, _InvEventItems);
                if (string.IsNullOrEmpty(_error))
                {
                    btnHold.Enabled = true;
                    btnSave.Enabled = true;
                    string Msg = "Successfully Hold! Token No : " + _invoiceNo + ".";
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(Msg, "Hold", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    btnClear_Click(null, null);
                }
                else
                {
                    this.Cursor = Cursors.Default;
                    CHNLSVC.CloseChannel();
                    using (new CenterWinDialog(this)) { MessageBox.Show(_error, "Sever Not Responding", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message); }
                CHNLSVC.CloseChannel();
                return;
            }
            finally
            {
                btnHold.Enabled = true;
                btnSave.Enabled = true;
                CHNLSVC.CloseAllChannels();
            }
        }

        private void btnHold_Click(object sender, EventArgs e)
        {
            if (pnlMain.Enabled == false) return;
            //kapila 25/2/2017
            if (CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 10156))
            {
                MessageBox.Show("You are not allowed to hold the invoice. you have only viewing permission(10156)", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            if (CheckServerDateTime() == false) return;
            if (MessageBox.Show("Do you want to hold?", "Holding...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No) return;
            Hold();
        }

        #endregion Rooting for Hold invoice

        #region Rooting for Cancel Invoice

        private void Cancel()
        {
            if (IsBackDateOk(true, false) == false) return;
            if (string.IsNullOrEmpty(txtInvoiceNo.Text))
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice no", "Cancel", MessageBoxButtons.OK, MessageBoxIcon.Information); } txtInvoiceNo.Focus(); return; }
            List<InvoiceHeader> _header = CHNLSVC.Sales.GetPendingInvoices(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, string.Empty, txtInvoiceNo.Text.Trim(), "C", DateTime.MinValue.ToString(), DateTime.MinValue.ToString());
            if (_header.Count <= 0)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Selected invoice no already canceled or invalid.", "Invalid Invoice no", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            if ((_header[0].Sah_stus == "A" || _header[0].Sah_stus == "H"))
            { if (!IsFwdSaleCancelAllowUser) { MessageBox.Show("You are not allow to cancel this forward sale. Please make a request for the forward sale cancelation. Permission code | 10002", "Permission", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); return; } }
            if (_header[0].Sah_stus == "D")
            { if (!IsDlvSaleCancelAllowUser) { MessageBox.Show("You are not allow to cancel delivered sale. Please make a request for the delivered sale cancelation. Permission code | 10042", "Permission", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); return; } }
            if (_header[0].Sah_inv_sub_tp.Contains("CC"))
            { MessageBox.Show("Selected invoice belongs to a cash conversion. You cannot cancel  this invoice.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
            Int32 _isRegistered = CHNLSVC.Sales.CheckforInvoiceRegistration(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoiceNo.Text.Trim());
            if (_isRegistered != 1)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This invoice already registered!. You are not allow for cancelation.", "Registration Progress", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            Int32 _isInsured = CHNLSVC.Sales.CheckforInvoiceInsurance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoiceNo.Text.Trim());
            if (_isInsured != 1)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This invoice already insured!. You are not allow for cancelation.", "Insurance Progress", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            //:: Chamal 7-Jul-2014 | :: If promotion voucher no generated invoice, refer for another invoice
            bool _isPromoVou = CHNLSVC.Sales.CheckPromoVoucherInvoiceUsed(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtInvoiceNo.Text.Trim());
            if (_isPromoVou == true)
            { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("This invoice already used for promotion voucher invoice!. You are not allow for cancelation.", "Promotion Voucher Used", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
            Boolean status = true;
            load_cust_dt(txtCustomer.Text, txtInvoiceNo.Text, out status);
            if (status == false)
            {
                return;
            }
            try
            {
                DataTable _buybackdoc = CHNLSVC.Inventory.GetBuyBackInventoryDocument(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtInvoiceNo.Text.Trim());
                if (_buybackdoc != null)
                    if (_buybackdoc.Rows.Count > 0)
                    {
                        string _adjno = Convert.ToString(_buybackdoc.Rows[0].Field<string>("ith_doc_no"));
                        string _buybackloc = Convert.ToString(_buybackdoc.Rows[0].Field<string>("ith_loc"));
                        if (!string.IsNullOrEmpty(_adjno))
                        {
                            _header[0].Sah_del_loc = _buybackloc;
                            DataTable _referdoc = CHNLSVC.Inventory.CheckInwardDocumentUseStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _adjno);
                            if (_referdoc != null)
                                if (_referdoc.Rows.Count > 0)
                                {
                                    this.Cursor = Cursors.Default;
                                    string _referno = Convert.ToString(_referdoc.Rows[0].Field<string>("ith_doc_no"));
                                    using (new CenterWinDialog(this)) { MessageBox.Show("The invoice having buy back return item which already out from the location refer document " + _referno + ", buy back inventory no " + _adjno, "No Balance", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    return;
                                }
                        }
                    }
            }
            catch (Exception ex)
            {
                SystemErrorMessage(ex);
            }
            List<InventoryHeader> _cancelDocument = null;
            try
            {
                //DataTable _consignDocument = CHNLSVC.Inventory.GetConsginmentDocumentByInvoice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtInvoiceNo.Text.Trim());
                //kapila 21/3/2017
                DataTable _consignDocument = CHNLSVC.Inventory.Get_INTHDRByOthDoc(BaseCls.GlbUserComCode, "DO", txtInvoiceNo.Text.Trim());
                if (_consignDocument != null)
                    if (_consignDocument.Rows.Count > 0)
                    {
                        foreach (DataRow _r in _consignDocument.Rows)
                        {
                            InventoryHeader _one = new InventoryHeader();
                            if (_cancelDocument == null) _cancelDocument = new List<InventoryHeader>();
                            string _type = _r["ith_doc_tp"] == DBNull.Value ? string.Empty : Convert.ToString(_r["ith_doc_tp"]);
                            string _document = _r["ith_doc_no"] == DBNull.Value ? string.Empty : Convert.ToString(_r["ith_doc_no"]);
                            bool _direction = _r["ith_direct"] == DBNull.Value ? false : Convert.ToBoolean(_r["ith_direct"]);
                            _one.Ith_doc_no = _document;
                            _one.Ith_doc_tp = _type;
                            _one.Ith_direct = _direction;
                            _cancelDocument.Add(_one);
                        }
                    }
            }
            catch (Exception ex)
            {
                SystemErrorMessage(ex);
            }

            //Update by akila 2017/01/25
            try
            {
                this.Cursor = Cursors.WaitCursor;
                string _msg = "";
                Int32 _effect = CHNLSVC.Sales.InvoiceCancelation(_header[0], out _msg, _cancelDocument);
                this.Cursor = Cursors.Default;
                if (_effect == 1)
                {
                    _msg = "Successfully Canceled!";
                    using (new CenterWinDialog(this)) { MessageBox.Show(_msg, "Canceled", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    CancelCreditNote(txtInvoiceNo.Text.Trim().ToUpper());
                }
                else
                {
                    using (new CenterWinDialog(this)) { MessageBox.Show(_msg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                }
                this.Cursor = Cursors.Default;

                btnClear_Click(null, null);
            }
            catch (Exception ex)
            {
                CHNLSVC.CloseChannel();
                SystemErrorMessage(ex);
            }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            if (pnlMain.Enabled == false) return;
            var _returns = _invoiceItemList.Where(x => x.Sad_srn_qty > 0).ToList();
            if (_returns != null && _returns.Count > 0)
            {
                MessageBox.Show("This invoice already reversed. You can not cancel this invoice.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (CheckServerDateTime() == false) return;

            if (MessageBox.Show("Do you want to cancel?", "Canceling...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
            {
                return;
            }

            //Darshana - block if invoice deliver other location // 05-Apr-2018
            DataTable _invHdr = CHNLSVC.Inventory.Get_INTHDRByOthDoc(BaseCls.GlbUserComCode,"DO", txtInvoiceNo.Text.Trim());
            if (_invHdr != null && _invHdr.Rows.Count > 0)
            {
                foreach (DataRow r in _invHdr.Rows)
                {
                    if (BaseCls.GlbUserDefLoca != (string)r["ITH_LOC"])
                    {
                        MessageBox.Show("This invoice is deliverd from " + (string)r["ITH_LOC"] + "location. You are not allow to cancel.", "Other location delivery", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
            }

            //Added by Prabhath on 25/11/2013
            DataTable _chk = CHNLSVC.Sales.CheckTheDocument(BaseCls.GlbUserComCode, txtInvoiceNo.Text.Trim());
            if (_chk != null && _chk.Rows.Count > 0)
            {
                string _refDocument = _chk.Rows[0].Field<string>("itr_req_no");
                MessageBox.Show("This invoice is already picked for a inter-transfer. You are not allow to cancel this invoice until " + _refDocument + " inter-transfer settled.", "Picked Document", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            RecallInvoice();
            Cancel();
        }

        #endregion Rooting for Cancel Invoice

        #region Rooting for Invoice Item Additionals

        private void cmsInvoiceItem_Description_Click(object sender, EventArgs e)
        {
            if (cmsInvoiceItem_Description.CheckState == CheckState.Checked) gvInvoiceItem.Columns["InvItm_Description"].Visible = true; else gvInvoiceItem.Columns["InvItm_Description"].Visible = false;
        }

        private void cmsInvoiceItem_UnitAmt_Click(object sender, EventArgs e)
        {
            if (cmsInvoiceItem_UnitAmt.CheckState == CheckState.Checked) gvInvoiceItem.Columns["InvItm_UnitAmt"].Visible = true; else gvInvoiceItem.Columns["InvItm_UnitAmt"].Visible = false;
        }

        private void cmsInvoiceItem_DisRate_Click(object sender, EventArgs e)
        {
            if (cmsInvoiceItem_DisRate.CheckState == CheckState.Checked) gvInvoiceItem.Columns["InvItm_DisRate"].Visible = true; else gvInvoiceItem.Columns["InvItm_DisRate"].Visible = false;
        }

        private void cmsInvoiceItem_DisAmt_Click(object sender, EventArgs e)
        {
            if (cmsInvoiceItem_DisAmt.CheckState == CheckState.Checked) gvInvoiceItem.Columns["InvItm_DisAmt"].Visible = true; else gvInvoiceItem.Columns["InvItm_DisAmt"].Visible = false;
        }

        private void cmsInvoiceItem_TaxAmt_Click(object sender, EventArgs e)
        {
            if (cmsInvoiceItem_TaxAmt.CheckState == CheckState.Checked) gvInvoiceItem.Columns["InvItm_TaxAmt"].Visible = true; else gvInvoiceItem.Columns["InvItm_TaxAmt"].Visible = false;
        }

        private void cmsInvoiceItem_Book_Click(object sender, EventArgs e)
        {
            if (cmsInvoiceItem_Book.CheckState == CheckState.Checked) gvInvoiceItem.Columns["InvItm_Book"].Visible = true; else gvInvoiceItem.Columns["InvItm_Book"].Visible = false;
        }

        private void cmsInvoiceItem_Level_Click(object sender, EventArgs e)
        {
            if (cmsInvoiceItem_Level.CheckState == CheckState.Checked) gvInvoiceItem.Columns["InvItm_Level"].Visible = true; else gvInvoiceItem.Columns["InvItm_Level"].Visible = false;
        }

        private void cmsInvoiceItem_WarrantyPeriod_Click(object sender, EventArgs e)
        {
            if (cmsInvoiceItem_WarrantyPeriod.CheckState == CheckState.Checked) gvInvoiceItem.Columns["InvItm_WarraPeriod"].Visible = true; else gvInvoiceItem.Columns["InvItm_WarraPeriod"].Visible = false;
        }

        private void cmsInvoiceItem_WarrantyRemarks_Click(object sender, EventArgs e)
        {
            if (cmsInvoiceItem_WarrantyRemarks.CheckState == CheckState.Checked) gvInvoiceItem.Columns["InvItm_WarraRemarks"].Visible = true; else gvInvoiceItem.Columns["InvItm_WarraRemarks"].Visible = false;
        }

        private void gvPopSerial_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvPopSerial.ColumnCount > 0)
                {
                    Int32 _rowIndex = e.RowIndex;
                    Int32 _colIndex = e.ColumnIndex;
                    if (_rowIndex != -1)
                    {
                        if (_colIndex == 0)
                        {
                            if (_recieptItem != null)
                                if (_recieptItem.Count > 0) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You are already payment added!", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }

                            if (ScanSerialList != null)
                                if (ScanSerialList.Count > 0)
                                {
                                    int row_id = e.RowIndex;
                                    string _item = Convert.ToString(gvPopSerial.Rows[_rowIndex].Cells["popSer_Item"].Value);
                                    string _comline = Convert.ToString(gvPopSerial.Rows[_rowIndex].Cells["popSer_SerialID"].Value);
                                    Int32 _combineLine; if (string.IsNullOrEmpty(_comline)) _combineLine = -1; else _combineLine = Convert.ToInt32(gvPopSerial.Rows[_rowIndex].Cells["popSer_SerialID"].Value);
                                    decimal uPrice = Convert.ToDecimal(gvPopSerial.Rows[_rowIndex].Cells["popSer_UnitPrice"].Value);
                                    Int32 _invLine = Convert.ToInt32(gvPopSerial.Rows[_rowIndex].Cells["popSer_BaseItemLine"].Value);
                                    string _combineStatus = Convert.ToString(gvPopSerial.Rows[_rowIndex].Cells["popSer_Status"].Value);
                                    string _serialno = Convert.ToString(gvPopSerial.Rows[_rowIndex].Cells["popSer_Serial1"].Value);
                                    if (_combineLine == -1)
                                    {
                                        var _invoicelst = _invoiceItemList.Where(x => x.Sad_itm_line == _invLine).ToList();
                                        if (_invoicelst != null)
                                            if (_invoicelst.Count > 0)
                                            {
                                                foreach (InvoiceItem _itm in _invoicelst)
                                                {
                                                    if (_itm.Sad_qty == 1)
                                                    {
                                                        CalculateGrandTotal(Convert.ToDecimal(1), (decimal)_itm.Sad_unit_rt, (decimal)_itm.Sad_disc_amt, (decimal)_itm.Sad_itm_tax_amt, false);
                                                        _invoiceItemList.Remove(_itm);
                                                        ScanSerialList.RemoveAll(x => x.Tus_ser_1 == _serialno);
                                                        InvoiceSerialList.RemoveAll(x => x.Sap_ser_1 == _serialno);
                                                    }
                                                    else
                                                    {
                                                        InvoiceItem _myItem = new InvoiceItem();
                                                        _myItem = _itm;
                                                        decimal o_qty = _itm.Sad_qty;
                                                        decimal o_unitprice = _itm.Sad_unit_rt;
                                                        decimal o_unitamount = _itm.Sad_unit_amt;
                                                        decimal o_tax = _itm.Sad_itm_tax_amt;
                                                        decimal o_disamount = _itm.Sad_disc_amt;
                                                        decimal o_disrate = _itm.Sad_disc_rt;
                                                        decimal n_qty = 0;
                                                        decimal n_unitprice = 0;
                                                        decimal n_unitamount = 0;
                                                        decimal n_tax = 0;
                                                        decimal n_disamount = 0;
                                                        decimal n_disrate = 0;
                                                        decimal n_totalAmount = 0;
                                                        n_qty = _itm.Sad_qty - 1;
                                                        n_unitprice = _itm.Sad_unit_rt;
                                                        n_unitamount = n_qty * n_unitprice;
                                                        n_tax = (_itm.Sad_itm_tax_amt / _itm.Sad_qty) * n_qty;
                                                        n_disamount = (_itm.Sad_disc_amt / _itm.Sad_qty) * n_qty;
                                                        n_disrate = n_unitamount == 0 ? 0 : n_disamount / n_unitamount * 100;
                                                        n_totalAmount = n_unitamount + n_tax - n_disamount;
                                                        _itm.Sad_qty = n_qty;
                                                        _itm.Sad_unit_amt = n_unitamount;
                                                        _itm.Sad_itm_tax_amt = n_tax;
                                                        _itm.Sad_disc_amt = n_disamount;
                                                        _itm.Sad_disc_rt = n_disrate;
                                                        _itm.Sad_tot_amt = n_totalAmount;
                                                        CalculateGrandTotal(o_qty, o_unitprice, o_disamount, o_tax, false);
                                                        _invoiceItemList.Remove(_myItem);
                                                        CalculateGrandTotal(n_qty, n_unitprice, n_disamount, n_tax, true);
                                                        _invoiceItemList.Add(_itm);
                                                        InvoiceSerialList.RemoveAll(x => x.Sap_ser_1 == _serialno);
                                                        ScanSerialList.RemoveAll(x => x.Tus_ser_1 == _serialno);
                                                    }
                                                }
                                            }
                                    }
                                    else
                                    {
                                        var _serLst = ScanSerialList.Where(x => x.Tus_serial_id == Convert.ToString(_combineLine)).ToList();
                                        if (_serLst != null)
                                            if (_serLst.Count > 0)
                                            {
                                                foreach (ReptPickSerials _itms in _serLst)
                                                {
                                                    Int32 _invoiceline = _itms.Tus_base_itm_line;
                                                    var _invoiveLst = _invoiceItemList.Where(x => x.Sad_itm_line == _invoiceline).ToList();
                                                    if (_invoiveLst != null)
                                                        if (_invoiveLst.Count > 0)
                                                        {
                                                            foreach (InvoiceItem _itm in _invoiveLst)
                                                            {
                                                                if (_itm.Sad_qty == 1)
                                                                {
                                                                    CalculateGrandTotal(Convert.ToDecimal(1), (decimal)_itm.Sad_unit_rt, (decimal)_itm.Sad_disc_amt, (decimal)_itm.Sad_itm_tax_amt, false);
                                                                    _invoiceItemList.Remove(_itm);
                                                                }
                                                                else
                                                                {
                                                                    InvoiceItem _myItem = new InvoiceItem();
                                                                    _myItem = _itm;
                                                                    decimal o_qty = _itm.Sad_qty;
                                                                    decimal o_unitprice = _itm.Sad_unit_rt;
                                                                    decimal o_unitamount = _itm.Sad_unit_amt;
                                                                    decimal o_tax = _itm.Sad_itm_tax_amt;
                                                                    decimal o_disamount = _itm.Sad_disc_amt;
                                                                    decimal o_disrate = _itm.Sad_disc_rt;
                                                                    decimal n_qty = 0;
                                                                    decimal n_unitprice = 0;
                                                                    decimal n_unitamount = 0;
                                                                    decimal n_tax = 0;
                                                                    decimal n_disamount = 0;
                                                                    decimal n_disrate = 0;
                                                                    decimal n_totalAmount = 0;
                                                                    n_qty = _itm.Sad_qty - 1;
                                                                    n_unitprice = _itm.Sad_unit_rt;
                                                                    n_unitamount = n_qty * n_unitprice;
                                                                    n_tax = (_itm.Sad_itm_tax_amt / _itm.Sad_qty) * n_qty;
                                                                    n_disamount = (_itm.Sad_disc_amt / _itm.Sad_qty) * n_qty;
                                                                    n_disrate = n_unitamount == 0 ? 0 : n_disamount / n_unitamount * 100;
                                                                    n_totalAmount = n_unitamount + n_tax - n_disamount;
                                                                    _itm.Sad_qty = n_qty;
                                                                    _itm.Sad_unit_amt = n_unitamount;
                                                                    _itm.Sad_itm_tax_amt = n_tax;
                                                                    _itm.Sad_disc_amt = n_disamount;
                                                                    _itm.Sad_disc_rt = n_disrate;
                                                                    _itm.Sad_tot_amt = n_totalAmount;
                                                                    CalculateGrandTotal(o_qty, o_unitprice, o_disamount, o_tax, false);
                                                                    _invoiceItemList.Remove(_myItem);
                                                                    CalculateGrandTotal(n_qty, n_unitprice, n_disamount, n_tax, true);
                                                                    _invoiceItemList.Add(_itm);
                                                                }
                                                            }
                                                        }
                                                }
                                                ScanSerialList.RemoveAll(x => x.Tus_serial_id == Convert.ToString(_combineLine));
                                                InvoiceSerialList.RemoveAll(x => x.Sap_ser_line == Convert.ToInt32(_combineLine));
                                            }
                                    }

                                    Int32 _newLine = 1;
                                    List<InvoiceItem> _tempLists = _invoiceItemList;
                                    if (_tempLists != null)
                                        if (_tempLists.Count > 0)
                                        {
                                            foreach (InvoiceItem _itm in _tempLists)
                                            {
                                                Int32 _line = _itm.Sad_itm_line;
                                                _invoiceItemList.Where(Y => Y.Sad_itm_line == _line).ToList().ForEach(x => x.Sad_itm_line = _newLine);
                                                InvoiceSerialList.Where(y => y.Sap_itm_line == _line).ToList().ForEach(x => x.Sap_itm_line = _newLine);
                                                ScanSerialList.Where(y => y.Tus_base_itm_line == _line).ToList().ForEach(x => x.Tus_base_itm_line = _newLine);
                                                _newLine += 1;
                                            }
                                            _lineNo = _newLine - 1;
                                        }
                                        else
                                        {
                                            _lineNo = 0;
                                        }
                                    else
                                    {
                                        _lineNo = 0;
                                    }
                                    gvPopSerial.DataSource = new List<ReptPickSerials>();
                                    gvInvoiceItem.DataSource = new List<InvoiceItem>();
                                    if (ScanSerialList != null)
                                        if (ScanSerialList.Count > 0)
                                        {
                                            gvPopSerial.DataSource = ScanSerialList.Where(X => X.Tus_ser_1 != "N/A" && !IsGiftVoucher(X.ItemType)).ToList();
                                            gvGiftVoucher.DataSource = new List<ReptPickSerials>();
                                            gvGiftVoucher.DataSource = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();
                                            gvInvoiceItem.DataSource = _invoiceItemList;
                                        }
                                        else
                                            gvInvoiceItem.DataSource = _invoiceItemList;
                                }
                        }
                        else
                        {
                            string _item = Convert.ToString(gvPopSerial.Rows[_rowIndex].Cells["popSer_Item"].Value);
                            string _serialno = Convert.ToString(gvPopSerial.Rows[_rowIndex].Cells["popSer_Serial1"].Value);
                            Int32 _serialid = 0;
                            if (!string.IsNullOrEmpty(_serialno)) _serialid = ScanSerialList.Where(x => x.Tus_itm_cd == _item && x.Tus_ser_1 == _serialno).Select(x => x.Tus_ser_id).ToList()[0];
                            List<InventoryWarrantySubDetail> dt = CHNLSVC.Inventory.GetSubItemSerials(_item, _serialno, _serialid);
                            if (dt != null) if (dt.Count > 0)
                                {
                                    var _lst = new BindingList<InventoryWarrantySubDetail>(dt);
                                    gvSubSerial.AutoGenerateColumns = false;
                                    gvSubSerial.DataSource = _lst;
                                    if (_lst != null) if (_lst.Count > 0) pnlSubSerial.Visible = true;
                                        else pnlSubSerial.Visible = false;
                                }
                        }
                    }
                    LookingForBuyBack();
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally
            {
                if (_invoiceItemList != null || _invoiceItemList.Count > 0) lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString(_invoiceItemList.Sum(x => x.Sad_tot_amt))); else lblGrndTotalAmount.Text = FormatToCurrency(Convert.ToString("0")); ucPayModes1.TotalAmount = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                ucPayModes1.LoadData(); this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels();
            }
        }

        private void ClearTop1p0()
        {
            txtDate.Text = DateTime.Today.Date.ToString("dd/MM/yyyy");
            cmbInvType.Text = string.Empty;
            txtDocRefNo.Clear();
            txtInvoiceNo.Clear();
            lblCurrency.Text = "LKR - Sri Lankan Rupees";
            btnCustomer.Enabled = true;
            _dtReqPara = txtDate.Value.Date;
        }

        private void ClearTop2p0()
        {
            txtCustomer.Clear();
            txtNIC.Clear();
            txtMobile.Clear();
            txtLoyalty.Clear();
            txtCusName.Clear();
            txtAddress1.Clear();
            txtAddress2.Clear();
        }

        private void ClearTop2p1()
        {
            chkTaxPayable.Checked = false;
            lblSVatStatus.Text = string.Empty;
            lblVatExemptStatus.Text = string.Empty;
        }

        private void ClearTop2p2()
        {
            lblAccountBalance.Text = FormatToCurrency("0");
            lblAvailableCredit.Text = FormatToCurrency("0");
        }

        private void ClearRight1p0()
        {
            txtExecutive.Clear();
            txtPromotor.Clear();
            txtManualRefNo.Clear();
            chkManualRef.Checked = false;
            technicianCode = string.Empty;
        }

        private void ClearMiddle1p0()
        {
            txtSerialNo.Clear();
            txtItem.Clear();
            cmbBook.Text = string.Empty;
            cmbLevel.Text = string.Empty;
            cmbStatus.Text = string.Empty;
            txtQty.Text = FormatToQty("0");
            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
            gvInvoiceItem.DataSource = new List<InvoiceItem>();
            gvPopSerial.DataSource = new List<ReptPickSerials>();
            gvGiftVoucher.DataSource = new List<ReptPickSerials>();
            lblLvlMsg.Text = string.Empty;
        }

        private void ClearRight1p1()
        {
            lblGrndSubTotal.Text = FormatToCurrency("0");
            lblGrndDiscount.Text = FormatToCurrency("0");
            lblGrndAfterDiscount.Text = FormatToCurrency("0");
            lblGrndTax.Text = FormatToCurrency("0");
            lblGrndTotalAmount.Text = FormatToCurrency("0");
        }

        private void ClearPayMode()
        {
            ucPayModes1.ClearControls();
        }

        private void ClearConsumablePanle()
        {
            gvPopConsumPricePick.DataSource = new List<InventoryBatchRefN>();
        }

        private void ClearDeliveryInstructionPanel()
        {
            txtDelLocation.Clear();
            chkOpenDelivery.Checked = false;
            txtDelCustomer.Clear();
            txtDelName.Clear();
            txtDelAddress1.Clear();
            txtDelAddress2.Clear();
        }

        private void ClearInventoryCombineSerialPickPanel()
        {
            gvPopComItem.DataSource = new List<MasterItemComponent>();
            gvPopComItemSerial.DataSource = new List<ReptPickSerials>();
            txtInvComSerSearch.Clear();
        }

        private void ClearMultiCombinePanel()
        {
            gvMultiCombineItem.DataSource = new DataTable();
        }

        private void ClearMultiItemPanel()
        {
            gvMultipleItem.DataSource = new DataTable();
        }

        private void ClearPriceNPromotionPanel()
        {
            gvNormalPrice.DataSource = new List<PriceDetailRef>();
            gvPromotionPrice.DataSource = new List<PriceDetailRef>();
            gvPromotionItem.DataSource = new List<PriceCombinedItemRef>();
            gvPromotionSerial.DataSource = new List<ReptPickSerials>();
            txtPriNProSerialSearch.Clear();
            lblPriNProAvailableQty.Text = FormatToQty("0");
            lblPriNProAvailableStatusQty.Text = FormatToQty("0");
        }

        private void HideConsumerPricePanel()
        {
            pnlConsumerPrice.Visible = false;
            pnlMain.Enabled = true;
        }

        private void HideDeliveryInstructionPanel()
        {
            pnlDeliveryInstruction.Visible = false;
            pnlMain.Enabled = true;
        }

        private void HideInventoryCombineSerialPickPanel()
        {
            pnlInventoryCombineSerialPick.Visible = false;
            pnlMain.Enabled = true;
        }

        private void HideMultiCombinePanel()
        {
            pnlMultiCombine.Visible = false;
            pnlMain.Enabled = true;
        }

        private void HideMultipleItemPanel()
        {
            pnlMultipleItem.Visible = false;
            pnlMain.Enabled = true;
        }

        private void HidePriceNPromotionPanel()
        {
            pnlPriceNPromotion.Visible = false;
            pnlMain.Enabled = true;
        }

        private void HideRePaymentPanel()
        {
            pnlRePay.Visible = false;
            pnlMain.Enabled = true;
        }

        private void ClearVariable()
        {
            _InvEventList = new List<EventRegistry>();
            _InvEventItems = new List<EventItems>();
            IsAddingEventItem = false;
            btnClear.Enabled = true;
            btnHold.Enabled = true;
            btnCancel.Enabled = true;      

            btnSave.Enabled = true;
            txtInvoiceNo.Enabled = true;
            WarrantyRemarks = string.Empty;
            WarrantyPeriod = 0;
            ScanSequanceNo = 0;
            ScanSerialNo = string.Empty;
            SSPriceBookSequance = "0";
            SSPriceBookItemSequance = "0";
            SSPriceBookPrice = 0;
            _recieptItem = new List<RecieptItem>();
            ScanSerialList = new List<ReptPickSerials>();
            InventoryCombinItemSerialList = new List<ReptPickSerials>();
            ManagerDiscount = new Dictionary<decimal, decimal>();
            _invoiceItemList = new List<InvoiceItem>();
            InvoiceSerialList = new List<InvoiceSerial>();
            PriceCombinItemSerialList = new List<ReptPickSerials>();
            MainTaxConstant = new List<MasterItemTax>();
            _priceBookLevelRefList = new List<PriceBookLevelRef>();
            _lineNo = 1;
            _isEditPrice = false;
            _isEditDiscount = false;
            GrndSubTotal = 0;
            GrndDiscount = 0;
            GrndTax = 0;
            SSCombineLine = 1;
            _isCompleteCode = false;
            _serialMatch = true;
            _processMinusBalance = false;
            dvDOSerials.DataSource = null;
            dvDOItems.DataSource = null;
            _discountSequence = 0;
            _isRegistrationMandatory = false;
            _isNeedRegistrationReciept = false;
            _totalRegistration = 0;
            List<RegistrationList> _List = new List<RegistrationList>();
            _loyaltyType = null;
            IsNewCustomer = false;
        }

        private void ClearPriceTextBox()
        {
            txtUnitPrice.Text = FormatToCurrency("0");
            txtUnitAmt.Text = FormatToCurrency("0");
            txtDisRate.Text = FormatToCurrency("0");
            txtDisAmt.Text = FormatToCurrency("0");
            txtTaxAmt.Text = FormatToCurrency("0");
            txtLineTotAmt.Text = FormatToCurrency("0");
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            btnPickEvent.Enabled = true;
            IsInvoiceCompleted = false;
            IsOrgPriceEdited = false;
            CreditCardTransLog = null;
            LoadItemDetail(string.Empty);
            LoadBuyBackItemDetail(string.Empty);
            ClearVariable();
            ClearTop1p0();
            ClearTop2p0();
            ClearTop2p1();
            ClearTop2p2(); ClearRight1p0(); ClearMiddle1p0(); ClearRight1p1(); ClearPayMode(); ClearConsumablePanle(); ClearDeliveryInstructionPanel();
            ClearInventoryCombineSerialPickPanel(); ClearMultiCombinePanel(); ClearMultiItemPanel(); ClearPriceNPromotionPanel();
            HideConsumerPricePanel(); HideDeliveryInstructionPanel(); HideInventoryCombineSerialPickPanel(); HideMultiCombinePanel(); HideMultipleItemPanel(); HidePriceNPromotionPanel(); HideRePaymentPanel();
            InitializeValuesNDefaultValueSet();
            BackDatePermission(); //Add Chamal 02/04/2013
            gvAddBuyBack.Rows.Clear();
            gvBuyBack.DataSource = null;
            gvRePayment.DataSource = null;
            txtBBItem.Clear();
            txtBBQty.Clear();
            txtBBSerial1.Clear();
            txtBBSerial2.Clear();
            txtBBWarranty.Clear();
            btnBuyBack.BackColor = Color.White;
            pnlTokenItem.Visible = false;
            chkDeliverLater.Checked = false;
            txtRemarks.Clear();
            CHNLSVC.CloseAllChannels();
            btnSave.Enabled = true;
            txtItem.Enabled = true;
            txtSerialNo.Enabled = true;
            btnAddItem.Enabled = true;
            chkDeliverLater.Enabled = true;
            txtPoNo.Clear();
            _isCompleteCode = false;
            _IsVirtualItem = false;
            txtPromotor.Text = "";
            LoadExecutive();
            LoadPromotor();
            ucPayModes1.ClearControls();
            ucPayModes1.TotalAmount = 0;
            ucPayModes1.InvoiceItemList = null;
            ucPayModes1.SerialList = null;
            ucPayModes1.Amount.Text = "0";
            ucPayModes1.Mobile = string.Empty;
            ucPayModes1.Customer_Code = txtCustomer.Text.Trim();
            ucPayModes1.LoadData();
            txtLoyalty.BackColor = Color.White;
            CHNLSVC.CloseAllChannels();
            pnlDoNowItems.Visible = false;
            btnDoConfirm.Enabled = true;
            gvDiscount.DataSource = null;
            pnlDiscount.Visible = false;
            txtCustomer.ReadOnly = false;
            btnSearch_Customer.Enabled = true;
            lnkProcessRegistration.Visible = false;
            pnlRegistration.Visible = false;
            ucPayModes2.ClearControls();
            ucPayModes2.TotalAmount = 0;
            ucPayModes2.InvoiceItemList = null;
            ucPayModes2.SerialList = null;
            ucPayModes2.Amount.Text = "0";
            ucPayModes2.Mobile = string.Empty;
            ucPayModes2.Customer_Code = txtCustomer.Text.Trim();
            ucPayModes2.LoadData();
            gvRegistrationItems.DataSource = null;

            txtCusName.Enabled = true;
            txtAddress1.Enabled = true;
            txtAddress2.Enabled = true;
            txtMobile.Enabled = true;
            txtNIC.Enabled = true;

            chkBasedOnAdvanceRecept.Checked = false;
            pnlADVR.Visible = false;

            //kapila  4/3/2016
            chkCreditNote.Checked = false;
            pnlCreditNote.Visible = false;
            _isBOnCredNote = false;
            chkCreditNote.Enabled = true;
            _reqNo = string.Empty;
            _dtReqPara = txtDate.Value.Date;
            chkCreditNote.Text = "Based On Credit Note";
            pnlReservation.Visible = false;
            txtReservation.Text = null;
            _selectedItemLine = -1;
            chkDeliverLater.Enabled = true;
            lblgvo.Text = string.Empty;
            //chkReservation.Checked = false;
            //chkReservation.Enabled = true;

        }

        private void btnPrint_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (string.IsNullOrEmpty(txtInvoiceNo.Text)) return;
                MasterBusinessEntity _itm = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                BaseCls.GlbReportName = string.Empty;
                GlbReportName = string.Empty;
                bool _isAskDO = false;
                if (MasterChannel != null) if (MasterChannel.Rows.Count > 0) if (MasterChannel.Rows[0].Field<Int16>("msc_isprint_do") == 1) _isAskDO = true; else _isAskDO = false;
                if (chkManualRef.Checked == false)
                {
                    if (_itm.Mbe_sub_tp != "C.")
                    {
                        if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_chnl))
                        {
                            if (_MasterProfitCenter.Mpc_chnl.Trim() == "ELITE")
                            {
                                ReportViewer _view = new ReportViewer();
                                BaseCls.GlbReportTp = "INV";
                                _view.GlbReportName = "InvoiceHalfPrints.rpt";
                                _view.GlbReportDoc = txtInvoiceNo.Text;
                                _view.Show();
                                _view = null;
                            }
                            else
                            {
                                //Showroom
                                //========================= INVOCIE  CASH/CREDIT/ HIRE
                                if (chkTaxPayable.Checked == false)
                                {
                                    ReportViewer _view = new ReportViewer();
                                    BaseCls.GlbReportTp = "INV";
                                    _view.GlbReportName = "InvoiceHalfPrints.rpt";
                                    _view.GlbReportDoc = txtInvoiceNo.Text;
                                    _view.Show();
                                    _view = null;
                                }
                                else
                                {
                                    //Add Code by Chamal 27/04/2013
                                    //====================  TAX INVOICE
                                    ReportViewer _view = new ReportViewer();
                                    _view.GlbReportName = "InvoicePrintTax.rpt";
                                    _view.GlbReportDoc = txtInvoiceNo.Text;
                                    _view.Show();
                                    _view = null;

                                    if (_recieptItem != null)
                                        if (_recieptItem.Count > 0)
                                            if (_itm.Mbe_cate == "LEASE")
                                            {
                                                ReportViewer _viewt = new ReportViewer();
                                                _viewt.GlbReportName = "InvoicePrintTax_insus.rpt";
                                                _viewt.GlbReportDoc = txtInvoiceNo.Text;
                                                _viewt.Show();
                                                _viewt = null;
                                            }

                                    //====================  TAX INVOICE
                                }
                            }
                        }
                    }
                    else
                    {
                        //Dealer
                        ReportViewer _view = new ReportViewer();
                        _view.GlbReportName = "InvoicePrints.rpt";
                        _view.GlbReportDoc = txtInvoiceNo.Text;
                        _view.Show();
                        _view = null;

                        if (_recieptItem != null)
                            if (_recieptItem.Count > 0)
                                if (_itm.Mbe_cate == "LEASE")
                                {
                                    ReportViewer _viewt = new ReportViewer();
                                    _viewt.GlbReportName = "InvoicePrint_insus.rpt";
                                    _viewt.GlbReportDoc = txtInvoiceNo.Text;
                                    _viewt.Show();
                                    _viewt = null;
                                }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void ucPayModes1_ItemAdded(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _recieptItem = ucPayModes1.RecieptItemList;
                decimal _totlaPay = _recieptItem.Sum(x => x.Sard_settle_amt);
                if (_totlaPay == Convert.ToDecimal(lblGrndTotalAmount.Text))
                {
                    toolStrip1.Focus();
                    btnSave.Select();
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtAddress_GotFocus(object sender, EventArgs e)
        {
            TextBox _box = (TextBox)(sender);
            _box.SelectionStart = _box.Text.Length;
        }

        private void txtAddress_LostFocus(object sender, EventArgs e)
        {
            TextBox _box = (TextBox)(sender);
            _box.SelectionStart = 0;
        }

        private List<CashGeneralEntiryDiscountDef> _CashGeneralEntiryDiscount;

        private void pnlDiscountReqClose_Click(object sender, EventArgs e)
        {
            pnlDiscountRequest.Visible = false;
        }

        protected void BindGeneralDiscount()
        {
            gvDisItem.DataSource = new List<CashGeneralEntiryDiscountDef>();
        }

        private void btnDiscount_Click(object sender, EventArgs e)
        {
            if (pnlDiscountRequest.Visible)
            {
                pnlDiscountRequest.Visible = false;
                return;
            }
            else
                pnlDiscountRequest.Visible = true;

            try
            {
                this.Cursor = Cursors.WaitCursor;
                BindGeneralDiscount();
                ddlDisCategory.Text = "Customer";

                if (string.IsNullOrEmpty(txtCustomer.Text) && IsNewCustomer == false) { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                //if (string.IsNullOrEmpty(txtCustomer.Text)){ this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }

                if (txtCustomer.Text == "CASH")
                { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid customer. Customer should be registered.", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }

                if (_invoiceItemList != null)
                    if (_invoiceItemList.Count > 0)
                    {
                        ddlDisCategory.Enabled = true;
                    }
                    else
                    { ddlDisCategory.Text = "Customer"; ddlDisCategory.Enabled = false; }
                else { ddlDisCategory.Text = "Customer"; ddlDisCategory.Enabled = false; }

                if (_invoiceItemList != null)
                    if (_invoiceItemList.Count > 0)
                    {
                        _CashGeneralEntiryDiscount = new List<CashGeneralEntiryDiscountDef>();
                        foreach (InvoiceItem _i in _invoiceItemList)
                        {
                            CashGeneralEntiryDiscountDef _one = new CashGeneralEntiryDiscountDef();

                            var _dup = from _l in _CashGeneralEntiryDiscount
                                       where _l.Sgdd_itm == _i.Sad_itm_cd && _l.Sgdd_pb == _i.Sad_pbook && _l.Sgdd_pb_lvl == _i.Sad_pb_lvl
                                       select _l;

                            if (_dup == null || _dup.Count() <= 0)
                            {
                                _one.Sgdd_itm = _i.Sad_itm_cd;
                                _one.Sgdd_pb = _i.Sad_pbook;
                                _one.Sgdd_pb_lvl = _i.Sad_pb_lvl;

                                _CashGeneralEntiryDiscount.Add(_one);
                            }
                        }
                        gvDisItem.DataSource = _CashGeneralEntiryDiscount;
                    }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        protected void Category_onChange(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(ddlDisCategory.Text)) return;
            if (ddlDisCategory.Text.ToString() == "Customer")
            {
                gvDisItem.Enabled = false;
                txtDisAmount.Enabled = true;
            }
            else
            {
                gvDisItem.Enabled = true;
                txtDisAmount.Enabled = false;
            }
        }

        protected void SaveDiscountRequest(object sender, EventArgs e)
        {
            List<MsgInformation> _infor = CHNLSVC.General.GetMsgInformation(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SMSDocumentType.DISCOUNT.ToString());
            if (_infor == null)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Your location does not setup detail which the request need to corroborate. Please contact IT dept.", "Discount Request", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return;
            }
            if (_infor.Count <= 0)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Your location does not setup detail which the request need to corroborate. Please contact IT dept.", "Discount Request", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return;
            }
            var _available = _infor.Where(x => x.Mmi_msg_tp != "A" && x.Mmi_receiver == BaseCls.GlbUserID).ToList();
            if (_available == null || _available.Count <= 0)
            {
                this.Cursor = Cursors.Default;
                using (new CenterWinDialog(this)) { MessageBox.Show("Your user id does not setup detail which the request need to corroborate. Please contact IT dept.", "Discount Request", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                return;
            }
            List<CashGeneralEntiryDiscountDef> _list = new List<CashGeneralEntiryDiscountDef>();
            if (ddlDisCategory.Text == "Customer")
            {
                foreach (DataGridViewRow _r in gvDisItem.Rows)
                {
                    DataGridViewCheckBoxCell _chk = (DataGridViewCheckBoxCell)_r.Cells["DisItem_Select"];
                    if (Convert.ToBoolean(_chk.Value) == true)
                    {
                        _chk.Value = false;
                    }
                }

                if (string.IsNullOrEmpty(txtDisAmount.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the discount rate", "Discount Request", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }

                if (IsNumeric(txtDisAmount.Text) == false)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid discount rate", "Discount Request", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }

                if (Convert.ToDecimal(txtDisAmount.Text.Trim()) > 100)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Discount rate can not exceed the 100%", "Discount Request", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }

                if (Convert.ToDecimal(txtDisAmount.Text.Trim()) == 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Discount rate can not exceed the 0%", "Discount Request", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
            }
            if (ddlDisCategory.Text == "Item")
            {
                if (gvDisItem.Rows.Count > 0)
                {
                    bool _isCheckSingle = false;
                    foreach (DataGridViewRow _r in gvDisItem.Rows)
                    {
                        DataGridViewCheckBoxCell _chk = (DataGridViewCheckBoxCell)_r.Cells["DisItem_Select"];
                        if (Convert.ToBoolean(_chk.Value) == true)
                        {
                            _isCheckSingle = true;
                            break;
                        }
                    }

                    if (_isCheckSingle == false)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the item which you need to request", "Discount Request", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }
                }

                txtDisAmount.Clear();
            }
            string _customer = txtCustomer.Text;
            string _customerReq = "DISREQ" + Convert.ToString(CHNLSVC.Inventory.GetSerialID());
            bool _isSuccessful = true;
            if (gvDisItem.Rows.Count > 0 && ddlDisCategory.Text == "Item")
            {
                foreach (DataGridViewRow _r in gvDisItem.Rows)
                {
                    DataGridViewCheckBoxCell _chk = (DataGridViewCheckBoxCell)_r.Cells["DisItem_Select"];
                    if (Convert.ToBoolean(_chk.Value) == true)
                    {
                        string _item = Convert.ToString(_r.Cells["DisItem_Item"].Value); //item code
                        DataGridViewComboBoxCell _type = (DataGridViewComboBoxCell)_r.Cells["DisItem_Type"];
                        DataGridViewTextBoxCell _amt = (DataGridViewTextBoxCell)_r.Cells["DisItem_Amount"];
                        string _pricebook = Convert.ToString(_r.Cells["DisItem_Book"].Value);
                        string _pricelvl = Convert.ToString(_r.Cells["DisItem_Level"].Value);

                        if (string.IsNullOrEmpty(Convert.ToString(_amt.Value).Trim()))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select the amount for " + _item, "Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            _isSuccessful = false;
                            break;
                        }

                        if (!IsNumeric(Convert.ToString(_amt.Value).Trim()))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid amount for " + _item, "Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            _isSuccessful = false;
                            break;
                        }
                        if (Convert.ToDecimal(Convert.ToString(_amt.Value).Trim()) <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid amount for " + _item, "Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            _isSuccessful = false;
                            break;
                        }
                        if (Convert.ToDecimal(Convert.ToString(_amt.Value).Trim()) > 100 && _type.Value.ToString().Contains("Rate"))
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Rate can not be exceed the 100% in " + _item, "Amount", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            _isSuccessful = false;
                            break;
                        }
                        CashGeneralEntiryDiscountDef _discount = new CashGeneralEntiryDiscountDef();
                        _discount.Sgdd_com = BaseCls.GlbUserComCode;
                        _discount.Sgdd_cre_by = BaseCls.GlbUserID;
                        _discount.Sgdd_cre_dt = DateTime.Now.Date;
                        _discount.Sgdd_cust_cd = _customer;
                        if (_type.Value.ToString().Contains("Rate"))
                            _discount.Sgdd_disc_rt = Convert.ToDecimal(_amt.Value.ToString().Trim());
                        else
                            _discount.Sgdd_disc_val = Convert.ToDecimal(_amt.Value.ToString().Trim());
                        _discount.Sgdd_from_dt = Convert.ToDateTime(txtDate.Text);
                        _discount.Sgdd_itm = _item;
                        _discount.Sgdd_mod_by = BaseCls.GlbUserID;
                        _discount.Sgdd_mod_dt = DateTime.Now.Date;
                        _discount.Sgdd_no_of_times = 1;
                        _discount.Sgdd_no_of_used_times = 0;
                        _discount.Sgdd_pb = _pricebook;
                        _discount.Sgdd_pb_lvl = _pricelvl;
                        _discount.Sgdd_pc = BaseCls.GlbUserDefProf;
                        _discount.Sgdd_req_ref = _customerReq;
                        _discount.Sgdd_sale_tp = cmbInvType.Text.Trim();
                        _discount.Sgdd_seq = 0;
                        _discount.Sgdd_stus = false;
                        _discount.Sgdd_to_dt = Convert.ToDateTime(txtDate.Text);
                        _list.Add(_discount);
                    }
                }
            }
            else
            {
                CashGeneralEntiryDiscountDef _discount = new CashGeneralEntiryDiscountDef();
                _discount.Sgdd_com = BaseCls.GlbUserComCode;
                _discount.Sgdd_cre_by = BaseCls.GlbUserID;
                _discount.Sgdd_cre_dt = DateTime.Now.Date;
                _discount.Sgdd_cust_cd = _customer;
                _discount.Sgdd_disc_rt = Convert.ToDecimal(txtDisAmount.Text.Trim());
                _discount.Sgdd_from_dt = Convert.ToDateTime(txtDate.Text);
                _discount.Sgdd_itm = string.Empty;
                _discount.Sgdd_mod_by = BaseCls.GlbUserID;
                _discount.Sgdd_mod_dt = DateTime.Now.Date;
                _discount.Sgdd_no_of_times = 1;
                _discount.Sgdd_no_of_used_times = 0;
                _discount.Sgdd_pb = cmbBook.Text.Trim();
                _discount.Sgdd_pb_lvl = cmbLevel.Text.Trim();
                _discount.Sgdd_pc = BaseCls.GlbUserDefProf;
                _discount.Sgdd_req_ref = _customerReq;
                _discount.Sgdd_sale_tp = cmbInvType.Text.Trim();
                _discount.Sgdd_seq = 0;
                _discount.Sgdd_stus = false;
                _discount.Sgdd_to_dt = Convert.ToDateTime(txtDate.Text);
                _list.Add(_discount);
            }

            if (_isSuccessful)
            {
                if (string.IsNullOrEmpty(txtDisAmount.Text)) txtDisAmount.Text = "0.0";
                try
                {
                    int _effect = CHNLSVC.Sales.SaveCashGeneralEntityDiscountWindows(CommonUIDefiniton.SMSDocumentType.DISCOUNT.ToString(), BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, _customerReq, BaseCls.GlbUserID, _list, txtCustomer.Text.Trim(), Convert.ToDecimal(txtDisAmount.Text.Trim()), txtDisReqRem.Text);
                    string Msg = string.Empty;
                    if (_effect > 0)
                    {
                        Msg = "Successfully Saved! Document No : " + _customerReq + ".";
                    }
                    else
                    {
                        Msg = "Document not processed! please try again.";
                    }
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(Msg, "Discount Request", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                }
                catch (Exception ex)
                {
                    this.Cursor = Cursors.Default;
                    CHNLSVC.CloseChannel();
                    using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                }
                finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
            }
        }

        private Point disReqPoint = new Point();

        private void pnlDiscountRequest_MouseDown(object sender, MouseEventArgs e)
        {
            disReqPoint.X = e.X;
            disReqPoint.Y = e.Y;
        }

        private void pnlDiscountRequest_MouseUp(object sender, MouseEventArgs e)
        {
            pnlDiscountRequest.Location = new Point(e.X - disReqPoint.X + pnlDiscountRequest.Location.X, e.Y - disReqPoint.Y + pnlDiscountRequest.Location.Y);
        }

        private void btnCustomer_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                General.CustomerCreation _CusCre = new General.CustomerCreation();
                _CusCre._isFromOther = true;
                _CusCre.obj_TragetTextBox = txtCustomer;
                this.Cursor = Cursors.Default;
                _CusCre.ShowDialog();
                txtCustomer.Select();
                if (chkDeliverLater.Checked) txtItem.Focus(); else txtSerialNo.Focus();
            }
            catch (Exception ex)
            { txtCustomer.Clear(); this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void Invoice_FormClosing(object sender, FormClosingEventArgs e)
        { _invoiceItemList = null; _invoiceItemListWithDiscount = null; _recieptItem = null; _newRecieptItem = null; _businessEntity = null; _masterItemComponent = null; _priceBookLevelRef = null; _priceBookLevelRefList = null; _priceDetailRef = null; _masterBusinessCompany = null; _MainPriceSerial = null; _tempPriceSerial = null; _MainPriceCombinItem = null; _tempPriceCombinItem = null; ScanSerialList = null; InvoiceSerialList = null; InventoryCombinItemSerialList = null; PriceCombinItemSerialList = null; ManagerDiscount = null; _itemdetail = null; MainTaxConstant = null; _promotionSerial = null; _promotionSerialTemp = null; _MasterProfitCenter = null; _PriceDefinitionRef = null; CHNLSVC.CloseAllChannels(); GC.Collect(); }

        #endregion Rooting for Invoice Item Additionals

        #region Rooting for Change Invoice Type

        private void cmbInvType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbInvType.Text == "CRED")
                btnCustomer.Enabled = false;
            else
                btnCustomer.Enabled = true;
        }

        private void btnRePayCancel_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do you need to cancel this invoice save process?", "Cancel", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                pnlMain.Enabled = true;
                pnlRePay.Visible = false;
                btnClear_Click(null, null);
            }
        }

        protected void btnConfirm_CheckUserNewPaymentAmount()
        {
            if (chkDeliverNow.Checked)
                SaveWithoutSerial();

            decimal _gridTotal = 0;
            this.Cursor = Cursors.WaitCursor;

            #region Deliver Now! - Check for serialied item qty with it's scan serial count

            if (chkDeliverLater.Checked == false)
            {
                string _itmList = string.Empty;
                bool _isqtyNserialOk = IsInvoiceItemNSerialListTally(out _itmList);
                if (_isqtyNserialOk == false)
                {
                    if (!chkDeliverNow.Checked)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Invoice qty and no. of serials are mismatched. Please check the following item for its serials and qty.\nItem List : " + _itmList, "Qty & Serial", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        _serialMatch = false;
                        return;
                    }
                    else
                    {
                        _serialMatch = false;
                    }
                }
            }

            if (chkDeliverLater.Checked == false)
            {
                string _nottallylist = string.Empty;
                bool _isTallywithinventory = IsInventoryBalanceNInvoiceItemTally(out _nottallylist);

                if (_isTallywithinventory == false)
                {
                    if (!chkDeliverNow.Checked)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Following item does not having inventory balance for raise delivery order; " + _nottallylist, "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Stop); }
                        _serialMatch = false;
                        return;
                    }
                    else
                    {
                        _serialMatch = false;
                    }
                }
            }

            if (chkGiftVoucher.Checked)
            {
                var _isExistGv = _invoiceItemList.Where(x => IsGiftVoucher(x.Sad_itm_tp)).Count();
                if (_isExistGv <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You can't process without gift vouchers", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                string _notMapped = string.Empty;
                foreach (DataGridViewRow _row in gvGiftVoucher.Rows)
                {
                    var _isPromotion = _invoiceItemList.Where(x => x.Sad_itm_line == Convert.ToInt32(_row.Cells["gf_baseItemLine"].Value) && !string.IsNullOrEmpty(x.Sad_promo_cd)).Select(x => x.Sad_promo_cd).Count();
                    if (_isPromotion <= 0)
                    {
                        string _mappedItem = Convert.ToString(_row.Cells[7].EditedFormattedValue);
                        string _gvNo = Convert.ToString(_row.Cells["gf_serial1"].EditedFormattedValue);
                        if (string.IsNullOrEmpty(_mappedItem)) if (string.IsNullOrEmpty(_notMapped)) _notMapped = _gvNo; else _notMapped += ", " + _gvNo;
                    }
                }
                if (!string.IsNullOrEmpty(_notMapped))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please attach the issuing item to the gift voucher for the following gift voucher(s). " + _notMapped + ".", "Attach Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    tabControl1.SelectedTab = tabPage3;
                    return;
                }
            }
            List<InvoiceVoucher> _giftVoucher = null;
            List<ReptPickSerials> _gvLst = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();
            if (_gvLst != null)
                if (_gvLst.Count > 0)
                {
                    _giftVoucher = new List<InvoiceVoucher>();
                    foreach (ReptPickSerials _one in _gvLst)
                    {
                        string _attachedItem = string.Empty;
                        if (gf_assignItem.Visible)
                        {
                            _attachedItem = (from DataGridViewRow _row in gvGiftVoucher.Rows where Convert.ToString(_row.Cells["gf_serial1"].Value) == _one.Tus_ser_1 && Convert.ToString(_row.Cells["gf_serial2"].Value) == _one.Tus_ser_2 && Convert.ToString(_row.Cells["gf_item"].Value) == _one.Tus_itm_cd select Convert.ToString(_row.Cells[7].Value)).ToList()[0];
                            if (string.IsNullOrEmpty(_attachedItem))
                                _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];
                        }
                        else
                            _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];
                        InvoiceVoucher _gift = new InvoiceVoucher();
                        _gift.Stvo_bookno = Convert.ToInt32(_one.Tus_ser_2);
                        _gift.Stvo_cre_by = BaseCls.GlbUserID;
                        _gift.Stvo_cre_when = DateTime.Now;
                        _gift.Stvo_gv_itm = _one.Tus_itm_cd;
                        _gift.Stvo_inv_no = string.Empty;
                        _gift.Stvo_itm_cd = _attachedItem;
                        _gift.Stvo_pageno = Convert.ToInt32(_one.Tus_ser_1);
                        _gift.Stvo_prefix = _one.Tus_ser_3;
                        _gift.Stvo_price = _one.Tus_unit_price;
                        _giftVoucher.Add(_gift);
                        ScanSerialList.Remove(_one);
                    }
                }
            bool _isHoldInvoiceProcess = false;
            InvoiceHeader _hdr = new InvoiceHeader();
            if (!string.IsNullOrEmpty(txtInvoiceNo.Text.Trim()))
            {
                _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text.Trim());
                if (_hdr != null)
                    if (_hdr.Sah_stus != "H")
                    {
                        this.Cursor = Cursors.Default;
                        MessageBox.Show("You can not edit already saved invoice", "Invoice Re-call", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        return;
                    }
            }
            if (_hdr != null && _hdr.Sah_stus == "H") _isHoldInvoiceProcess = true;
            if (_isHoldInvoiceProcess && chkDeliverLater.Checked == false)
            {
                this.Cursor = Cursors.Default;
                MessageBox.Show("You can not use 'Deliver Now!' option for hold invoice", "Invoice Hold", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            #endregion Deliver Now! - Check for serialied item qty with it's scan serial count

            string _value = string.Empty;
            string paytp = "";
            if (gvRePayment.Rows.Count > 0)
            {
                foreach (DataGridViewRow _r in gvRePayment.Rows)
                {
                    _value = Convert.ToString(_r.Cells["repy_collectamt"].Value);
                    decimal amount = Convert.ToDecimal(_r.Cells["repy_settleamt"].Value);
                    paytp = _r.Cells["repy_paymenttype"].Value.ToString();
                    int _lineno = Convert.ToInt32(_r.Cells["repy_lineno"].Value);
                    if (string.IsNullOrEmpty(_value)) { pnlRePay.Visible = true; continue; }
                    if (!IsNumeric(_value))
                    { this.Cursor = Cursors.Default; MessageBox.Show("Please select the valid amount!", "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); _value = string.Empty; pnlRePay.Visible = true; break; }
                    if (paytp == "CRNOTE" && Convert.ToDecimal(_value) > amount)
                    { MessageBox.Show("You can not exceed credit note value", "Re-Settle", MessageBoxButtons.OK, MessageBoxIcon.Warning); return; }
                    _gridTotal += Convert.ToDecimal(_value);
                }

                if (_gridTotal == 0) { pnlRePay.Visible = true; return; }
                if (_gridTotal > 0 && _toBePayNewAmount > 0)
                {
                    if (Math.Round(_gridTotal, 2) < Math.Round(_toBePayNewAmount, 2))
                    {
                        this.Cursor = Cursors.Default;
                        if (paytp != "CRNOTE")
                        { MessageBox.Show("Still need to pay - " + FormatToCurrency(Convert.ToString(Math.Round(_toBePayNewAmount, 2) - Math.Round(_gridTotal, 2))), "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); pnlRePay.Visible = true; return; }
                        else
                        { MessageBox.Show("Still need to pay - " + FormatToCurrency(Convert.ToString(Math.Round(_toBePayNewAmount, 2) - Math.Round(_gridTotal, 2))) + "\n Please add payments to settle full amount.", "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); pnlRePay.Visible = true; return; }
                    }
                    foreach (DataGridViewRow _r in gvRePayment.Rows)
                    {
                        _value = Convert.ToString(_r.Cells["repy_collectamt"].Value);
                        int _lineno = Convert.ToInt32(_r.Cells["repy_lineno"].Value);

                        _recieptItem.Where(x => x.Sard_line_no == Convert.ToInt32(_lineno)).ToList().ForEach(x => x.Sard_anal_3 = (x.Sard_anal_3 / x.Sard_settle_amt) * Convert.ToDecimal(_value));
                        _recieptItem.Where(x => x.Sard_line_no == Convert.ToInt32(_lineno)).ToList().ForEach(x => x.Sard_settle_amt = Convert.ToDecimal(_value));
                    }
                    if (Math.Round(_gridTotal, 2) > Math.Round(_toBePayNewAmount, 2)) { this.Cursor = Cursors.Default; MessageBox.Show("To be paid amount exceed the current payment", "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); pnlRePay.Visible = true; _value = string.Empty; return; }
                    if (Math.Round(_gridTotal, 2) == Math.Round(_toBePayNewAmount, 2))
                    {
                        _invoiceItemList = _invoiceItemListWithDiscount;
                        string _invoicePrefix = CHNLSVC.Sales.GetInvoicePrefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text);
                        if (string.IsNullOrEmpty(_invoicePrefix))
                        { this.Cursor = Cursors.Default; MessageBox.Show("Selected invoice no does not having a invoice prefix to generate invoice no. Please contact accounts dept.", "Re-Payment", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                        InvoiceHeader _invheader = new InvoiceHeader();
                        RecieptHeader _recHeader = new RecieptHeader();
                        InventoryHeader invHdr = new InventoryHeader();
                        MasterBusinessEntity _entity = new MasterBusinessEntity();
                        InventoryHeader _buybackheader = new InventoryHeader();
                        MasterAutoNumber _buybackAuto = new MasterAutoNumber();
                        bool _isCustomerHasCompany = false;
                        string _customerCompany = string.Empty;
                        string _customerLocation = string.Empty;
                        _entity = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                        if (_entity != null)
                            if (_entity.Mbe_cd != null)
                                if (!string.IsNullOrEmpty(_entity.Mbe_cust_com) && !string.IsNullOrEmpty(_entity.Mbe_cust_loc))
                                { _isCustomerHasCompany = true; _customerCompany = _entity.Mbe_cust_com; _customerLocation = _entity.Mbe_cust_loc; }
                        invHdr.Ith_loc = BaseCls.GlbUserDefLoca;
                        invHdr.Ith_com = BaseCls.GlbUserComCode;
                        invHdr.Ith_doc_tp = "DO";
                        invHdr.Ith_doc_date = Convert.ToDateTime(txtDate.Text).Date;
                        invHdr.Ith_doc_year = Convert.ToDateTime(txtDate.Text).Year;
                        invHdr.Ith_cate_tp = cmbInvType.Text.Trim();
                        invHdr.Ith_sub_tp = "DPS";
                        invHdr.Ith_bus_entity = txtCustomer.Text.Trim();
                        invHdr.Ith_del_add1 = txtDelAddress1.Text.Trim();
                        invHdr.Ith_del_add1 = txtDelAddress2.Text.Trim();
                        invHdr.Ith_is_manual = false;
                        invHdr.Ith_stus = "A";
                        invHdr.Ith_cre_by = BaseCls.GlbUserID;
                        invHdr.Ith_mod_by = BaseCls.GlbUserID;
                        invHdr.Ith_direct = false;
                        invHdr.Ith_session_id = BaseCls.GlbUserSessionID;
                        invHdr.Ith_manual_ref = txtManualRefNo.Text;
                        invHdr.Ith_vehi_no = string.Empty;
                        invHdr.Ith_remarks = string.Empty;
                        MasterAutoNumber _masterAutoDo = new MasterAutoNumber();
                        _masterAutoDo.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                        _masterAutoDo.Aut_cate_tp = "LOC";
                        _masterAutoDo.Aut_direction = 0;
                        _masterAutoDo.Aut_moduleid = "DO";
                        _masterAutoDo.Aut_start_char = "DO";
                        _masterAutoDo.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                        _invheader.Sah_com = BaseCls.GlbUserComCode;
                        _invheader.Sah_cre_by = BaseCls.GlbUserID;
                        _invheader.Sah_cre_when = DateTime.Now;
                        _invheader.Sah_currency = "LKR";//Currency.Text;
                        _invheader.Sah_cus_add1 = txtAddress1.Text.Trim();
                        _invheader.Sah_cus_add2 = txtAddress2.Text.Trim();

                        //akila 2017/10/12
                        if ((string.IsNullOrEmpty(txtCustomer.Text)) && IsNewCustomer)
                        {
                            _invheader.Sah_cus_cd = "CASH"; //new customer
                        }
                        else
                        {
                            _invheader.Sah_cus_cd = txtCustomer.Text.Trim();
                        }

                        //_invheader.Sah_cus_cd = txtCustomer.Text.Trim();
                        _invheader.Sah_cus_name = txtCusName.Text.Trim();
                        _invheader.Sah_d_cust_add1 = txtDelAddress1.Text.Trim();
                        _invheader.Sah_d_cust_add2 = txtDelAddress2.Text.Trim();
                        _invheader.Sah_d_cust_cd = txtDelCustomer.Text.Trim();
                        _invheader.Sah_d_cust_name = txtDelName.Text.Trim();
                        _invheader.Sah_direct = true;
                        _invheader.Sah_dt = Convert.ToDateTime(txtDate.Text);
                        _invheader.Sah_epf_rt = 0;
                        _invheader.Sah_esd_rt = 0;
                        _invheader.Sah_ex_rt = 1;
                        _invheader.Sah_inv_no = string.Empty;
                        _invheader.Sah_inv_sub_tp = "SA";
                        _invheader.Sah_inv_tp = cmbInvType.Text.Trim();
                        _invheader.Sah_is_acc_upload = false;
                        _invheader.Sah_man_cd = "";
                        _invheader.Sah_man_ref = txtManualRefNo.Text;
                        _invheader.Sah_manual = chkManualRef.Checked ? true : false;
                        _invheader.Sah_mod_by = BaseCls.GlbUserID;
                        _invheader.Sah_mod_when = DateTime.Now;
                        _invheader.Sah_pc = BaseCls.GlbUserDefProf;
                        _invheader.Sah_pdi_req = 0;
                        _invheader.Sah_ref_doc = txtDocRefNo.Text;
                        _invheader.Sah_remarks = "";
                        _invheader.Sah_sales_chn_cd = "";
                        _invheader.Sah_sales_chn_man = "";
                        _invheader.Sah_sales_ex_cd = txtExecutive.Text.Trim();
                        _invheader.Sah_sales_region_cd = "";
                        _invheader.Sah_sales_region_man = "";
                        _invheader.Sah_sales_sbu_cd = "";
                        _invheader.Sah_sales_sbu_man = "";
                        _invheader.Sah_sales_str_cd = "";
                        _invheader.Sah_sales_zone_cd = "";
                        _invheader.Sah_sales_zone_man = "";
                        _invheader.Sah_seq_no = 1;
                        _invheader.Sah_session_id = BaseCls.GlbUserSessionID;
                        _invheader.Sah_structure_seq = txtQuotation.Text.Trim();
                        _invheader.Sah_stus = "A";
                        if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && (!_processMinusBalance)) _invheader.Sah_stus = "D";
                        _invheader.Sah_town_cd = "";
                        _invheader.Sah_tp = "INV";
                        _invheader.Sah_wht_rt = 0;
                        _invheader.Sah_direct = true;
                        _invheader.Sah_tax_inv = chkTaxPayable.Checked ? true : false;
                        _invheader.Sah_anal_11 = chkDeliverLater.Checked ? 0 : 1;
                        _invheader.Sah_del_loc = chkDeliverLater.Checked == false ? BaseCls.GlbUserDefLoca : !string.IsNullOrEmpty(txtDelLocation.Text) ? txtDelLocation.Text : string.Empty;
                        _invheader.Sah_grn_com = _customerCompany;
                        _invheader.Sah_grn_loc = _customerLocation;
                        _invheader.Sah_is_grn = _isCustomerHasCompany;
                        _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
                        _invheader.Sah_is_svat = lblSVatStatus.Text == "Available" ? true : false;
                        _invheader.Sah_tax_exempted = lblVatExemptStatus.Text == "Available" ? true : false;
                        _invheader.Sah_anal_4 = txtPoNo.Text.Trim();
                        _invheader.Sah_anal_6 = txtLoyalty.Text.Trim();
                        _invheader.Sah_remarks = txtRemarks.Text.Trim();
                        _invheader.Sah_man_cd = _MasterProfitCenter.Mpc_man;
                        _invheader.Sah_is_dayend = 0;
                        _invheader.Sah_remarks = txtRemarks.Text.Trim();
                        _invheader.Sah_anal_1 = txtPromotor.Text;
                        //if (string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue))) _invheader.Sah_anal_1 = string.Empty;
                        //else _invheader.Sah_anal_1 = Convert.ToString(cmbTechnician.SelectedValue);
                        if (_isHoldInvoiceProcess) _invheader.Sah_seq_no = Convert.ToInt32(txtInvoiceNo.Text.Trim());

                        if (chkBasedOnAdvanceRecept.Checked)
                        {
                            _invheader.Sah_anal_2 = "ADVR";
                        }

                        _recHeader.Sar_acc_no = "";
                        _recHeader.Sar_act = true;
                        _recHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                        _recHeader.Sar_comm_amt = 0;
                        _recHeader.Sar_create_by = BaseCls.GlbUserID;
                        _recHeader.Sar_create_when = DateTime.Now;
                        _recHeader.Sar_currency_cd = "LKR";
                        _recHeader.Sar_debtor_add_1 = txtAddress1.Text;
                        _recHeader.Sar_debtor_add_2 = txtAddress2.Text;
                        _recHeader.Sar_debtor_cd = txtCustomer.Text;
                        _recHeader.Sar_debtor_name = txtCusName.Text;
                        _recHeader.Sar_direct = true;
                        _recHeader.Sar_direct_deposit_bank_cd = "";
                        _recHeader.Sar_direct_deposit_branch = "";
                        _recHeader.Sar_epf_rate = 0;
                        _recHeader.Sar_esd_rate = 0;
                        _recHeader.Sar_is_mgr_iss = false;
                        _recHeader.Sar_is_oth_shop = false;
                        _recHeader.Sar_is_used = false;
                        _recHeader.Sar_manual_ref_no = txtManualRefNo.Text;
                        _recHeader.Sar_mob_no = txtMobile.Text;
                        _recHeader.Sar_mod_by = BaseCls.GlbUserID;
                        _recHeader.Sar_mod_when = DateTime.Now;
                        _recHeader.Sar_nic_no = txtNIC.Text;
                        _recHeader.Sar_oth_sr = "";
                        _recHeader.Sar_prefix = "";
                        _recHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                        _recHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Text);
                        _recHeader.Sar_receipt_no = "na";
                        _recHeader.Sar_receipt_type = "DIR";
                        _recHeader.Sar_ref_doc = "";
                        _recHeader.Sar_remarks = "";
                        _recHeader.Sar_seq_no = 1;
                        _recHeader.Sar_ser_job_no = "";
                        _recHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                        _recHeader.Sar_tel_no = txtMobile.Text;
                        _recHeader.Sar_tot_settle_amt = 0;
                        _recHeader.Sar_uploaded_to_finance = false;
                        _recHeader.Sar_used_amt = 0;
                        _recHeader.Sar_wht_rate = 0;
                        MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                        _invoiceAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        _invoiceAuto.Aut_cate_tp = "PRO";
                        _invoiceAuto.Aut_direction = 1;
                        _invoiceAuto.Aut_modify_dt = null;
                        _invoiceAuto.Aut_moduleid = cmbInvType.Text;
                        _invoiceAuto.Aut_number = 0;
                        _invoiceAuto.Aut_start_char = _invoicePrefix;
                        _invoiceAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                        MasterAutoNumber _receiptAuto = new MasterAutoNumber();
                        _receiptAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        _receiptAuto.Aut_cate_tp = "PRO";
                        _receiptAuto.Aut_direction = 1;
                        _receiptAuto.Aut_modify_dt = null;
                        _receiptAuto.Aut_moduleid = "RECEIPT";
                        _receiptAuto.Aut_number = 0;
                        _receiptAuto.Aut_start_char = "DIR";
                        _receiptAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                        DataTable dt_location = CHNLSVC.Inventory.Get_location_by_code(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                        foreach (DataRow r in dt_location.Rows)
                        { _buybackheader.Ith_sbu = (string)r["ML_OPE_CD"]; if (System.DBNull.Value != r["ML_CATE_2"]) { _buybackheader.Ith_channel = (string)r["ML_CATE_2"]; } else { _buybackheader.Ith_channel = string.Empty; } }
                        _buybackheader.Ith_acc_no = "BB_ADJ";
                        _buybackheader.Ith_anal_1 = "";
                        _buybackheader.Ith_anal_2 = "";
                        _buybackheader.Ith_anal_3 = "";
                        _buybackheader.Ith_anal_4 = "";
                        _buybackheader.Ith_anal_5 = "";
                        _buybackheader.Ith_anal_6 = 0;
                        _buybackheader.Ith_anal_7 = 0;
                        _buybackheader.Ith_anal_8 = DateTime.MinValue;
                        _buybackheader.Ith_anal_9 = DateTime.MinValue;
                        _buybackheader.Ith_anal_10 = false;
                        _buybackheader.Ith_anal_11 = false;
                        _buybackheader.Ith_anal_12 = false;
                        _buybackheader.Ith_bus_entity = "";
                        _buybackheader.Ith_cate_tp = "NOR";
                        _buybackheader.Ith_com = BaseCls.GlbUserComCode;
                        _buybackheader.Ith_com_docno = "";
                        _buybackheader.Ith_cre_by = BaseCls.GlbUserID;
                        _buybackheader.Ith_cre_when = DateTime.Now;
                        _buybackheader.Ith_del_add1 = "";
                        _buybackheader.Ith_del_add2 = "";
                        _buybackheader.Ith_del_code = "";
                        _buybackheader.Ith_del_party = "";
                        _buybackheader.Ith_del_town = "";
                        _buybackheader.Ith_direct = true;
                        _buybackheader.Ith_doc_date = txtDate.Value.Date;
                        _buybackheader.Ith_doc_no = string.Empty;
                        _buybackheader.Ith_doc_tp = "ADJ";
                        _buybackheader.Ith_doc_year = txtDate.Value.Date.Year;
                        _buybackheader.Ith_entry_no = string.Empty;
                        _buybackheader.Ith_entry_tp = "NOR";
                        _buybackheader.Ith_git_close = true;
                        _buybackheader.Ith_git_close_date = DateTime.MinValue;
                        _buybackheader.Ith_git_close_doc = string.Empty;
                        _buybackheader.Ith_isprinted = false;
                        _buybackheader.Ith_is_manual = false;
                        _buybackheader.Ith_job_no = string.Empty;
                        _buybackheader.Ith_loading_point = string.Empty;
                        _buybackheader.Ith_loading_user = string.Empty;
                        _buybackheader.Ith_loc = BaseCls.GlbUserDefLoca;
                        _buybackheader.Ith_manual_ref = string.Empty;
                        _buybackheader.Ith_mod_by = BaseCls.GlbUserID;
                        _buybackheader.Ith_mod_when = DateTime.Now;
                        _buybackheader.Ith_noofcopies = 0;
                        _buybackheader.Ith_oth_loc = string.Empty;
                        _buybackheader.Ith_oth_docno = "N/A";
                        _buybackheader.Ith_remarks = string.Empty;
                        _buybackheader.Ith_session_id = BaseCls.GlbUserSessionID;
                        _buybackheader.Ith_stus = "A";
                        _buybackheader.Ith_sub_tp = "NOR";
                        _buybackheader.Ith_vehi_no = string.Empty;
                        _buybackAuto.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                        _buybackAuto.Aut_cate_tp = "LOC";
                        _buybackAuto.Aut_direction = null;
                        _buybackAuto.Aut_modify_dt = null;
                        _buybackAuto.Aut_moduleid = "ADJ";
                        _buybackAuto.Aut_number = 5;
                        _buybackAuto.Aut_start_char = "ADJ";
                        _buybackAuto.Aut_year = null;

                        //Add by akila 2017/11/02
                        if (string.IsNullOrEmpty(txtCustomer.Text.Trim()) && IsNewCustomer)
                        {
                            _businessEntity = NewCustomer();
                        }
                        else
                        {
                            CollectBusinessEntity();
                        }

                        //CollectBusinessEntity();
                        string _invoiceNo = "";
                        string _receiptNo = "";
                        string _deliveryOrderNo = "";
                        int effect = 0;
                        string _error = string.Empty;
                        string _buybackadj = string.Empty;
                        _invoiceItemList.ForEach(X => X.Sad_isapp = true);
                        _invoiceItemList.ForEach(X => X.Sad_iscovernote = true);
                        try
                        {
                            btnRePayConfirm.Enabled = false;
                            _invoiceItemList.ForEach(x => x.Sad_srn_qty = 0);
                            List<RecieptItem> _registrationReciept = new List<RecieptItem>();
                            _registrationReciept = ucPayModes2.RecieptItemList;
                            List<VehicalRegistration> _registrationList = new List<VehicalRegistration>();
                            //2013/12/10
                            //ADDED REGISTRATION PROCESS


                            //add by akila - 2017/10/06 - send payment details to credit card  terminal  - only on-line card transactions
                            if (_recieptItem != null && _recieptItem.Count > 0)
                            {
                                var _onlineCardPayments = _recieptItem.Where(x => x.Sard_pay_tp == CommonUIDefiniton.PayMode.CRCD.ToString() && x.IsOnlineCardPayment == true).ToList();
                                if (_onlineCardPayments != null && _onlineCardPayments.Count > 0)
                                {
                                    //if (ucPayModes1.CctIsOnline && CCTBaseComponent.CCTBase.IsCCTOnline)
                                    //{
                                        if (cmbInvType.Items.Count > 0 && cmbInvType.Text == "CS")
                                        {
                                            string _returnMsg = string.Empty;
                                            int _cctPaystatus = 1;

                                            _returnMsg = PayByCCT(_recieptItem, ref _cctPaystatus);
                                            if (_cctPaystatus != 0)
                                            {
                                                CCTBaseComponent.CCTBase.IsCCTOnline = false;
                                                MessageBox.Show(_returnMsg, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                btnSave.Enabled = true;
                                                effect = -1;
                                                return;
                                            }
                                            else
                                            {
                                                CCTBaseComponent.CCTBase.IsCCTOnline = true;
                                                //save CCT Trans Log details
                                                if (CreditCardTransLog != null)
                                                {
                                                    _invheader.Sah_cct_tran_no = CreditCardTransLog.Sctl_rrn;
                                                    string _errorrMsg = string.Empty;
                                                    Int16 _affected = 0;
                                                    _affected = CHNLSVC.Sales.SaveCctTransLog(CreditCardTransLog, ref _errorrMsg);
                                                    if (_affected < 1)
                                                    {
                                                        throw new Exception(_errorrMsg);
                                                    }
                                                }
                                                else
                                                {
                                                    MessageBox.Show("Can not process invoice - Credit card details not found", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                    return;
                                                }
                                            }
                                        }
                                    //}
                                }
                            }
                            
                            //updated by akila 2018/02/05
                            if (!_isHoldInvoiceProcess)
                            {
                                UpdateEventDetails();
                            }

                            if (_isNeedRegistrationReciept)
                            {
                                //reciept auto number
                                MasterAutoNumber masterAutoRecTp = new MasterAutoNumber();
                                masterAutoRecTp.Aut_cate_cd = BaseCls.GlbUserDefProf;
                                masterAutoRecTp.Aut_cate_tp = "PC";
                                masterAutoRecTp.Aut_direction = null;
                                masterAutoRecTp.Aut_modify_dt = null;
                                masterAutoRecTp.Aut_moduleid = "RECEIPT";
                                masterAutoRecTp.Aut_number = 5;//what is Aut_number
                                masterAutoRecTp.Aut_start_char = "VHREG";
                                masterAutoRecTp.Aut_year = null;

                                RecieptHeader _ReceiptHeader = new RecieptHeader();
                                _ReceiptHeader.Sar_seq_no = -1; //CHNLSVC.Inventory.Generate_new_seq_num(GlbUserName, "RECEIPT", 1, BaseCls.GlbUserComCode);
                                _ReceiptHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                                _ReceiptHeader.Sar_receipt_type = "VHREG";
                                // _ReceiptHeader.Sar_receipt_no = txtRecNo.Text.Trim();

                                MasterReceiptDivision _RecDiv = new MasterReceiptDivision();
                                _RecDiv = CHNLSVC.Sales.GetDefRecDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                                if (_RecDiv.Msrd_cd != null)
                                {
                                    _ReceiptHeader.Sar_prefix = _RecDiv.Msrd_cd;
                                }
                                else
                                {
                                    _ReceiptHeader.Sar_prefix = "";
                                }
                                //_ReceiptHeader.Sar_prefix = txtDivision.Text.Trim();
                                // _ReceiptHeader.Sar_manual_ref_no = txtManual.Text.Trim();
                                _ReceiptHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Value).Date;
                                _ReceiptHeader.Sar_direct = true;
                                _ReceiptHeader.Sar_acc_no = "";
                                _ReceiptHeader.Sar_is_oth_shop = false;
                                _ReceiptHeader.Sar_oth_sr = "";
                                _ReceiptHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                                _ReceiptHeader.Sar_debtor_cd = txtCustomer.Text.Trim();
                                _ReceiptHeader.Sar_debtor_name = txtCusName.Text.Trim();
                                _ReceiptHeader.Sar_debtor_add_1 = txtAddress1.Text.Trim();
                                _ReceiptHeader.Sar_debtor_add_2 = txtAddress2.Text.Trim();
                                _ReceiptHeader.Sar_tel_no = "";
                                _ReceiptHeader.Sar_mob_no = txtMobile.Text.Trim();
                                _ReceiptHeader.Sar_nic_no = txtNIC.Text.Trim();
                                _ReceiptHeader.Sar_tot_settle_amt = ucPayModes2.RecieptItemList.Sum(x => x.Sard_settle_amt);
                                _ReceiptHeader.Sar_comm_amt = 0;
                                _ReceiptHeader.Sar_is_mgr_iss = false;
                                _ReceiptHeader.Sar_esd_rate = 0;
                                _ReceiptHeader.Sar_wht_rate = 0;
                                _ReceiptHeader.Sar_epf_rate = 0;
                                _ReceiptHeader.Sar_currency_cd = "LKR";
                                _ReceiptHeader.Sar_uploaded_to_finance = false;
                                _ReceiptHeader.Sar_act = true;
                                _ReceiptHeader.Sar_direct_deposit_bank_cd = "";
                                _ReceiptHeader.Sar_direct_deposit_branch = "";
                                // _ReceiptHeader.Sar_remarks = txtNote.Text.Trim();
                                _ReceiptHeader.Sar_is_used = false;
                                _ReceiptHeader.Sar_ref_doc = "";
                                _ReceiptHeader.Sar_ser_job_no = "";
                                _ReceiptHeader.Sar_used_amt = 0;
                                _ReceiptHeader.Sar_create_by = BaseCls.GlbUserID;
                                _ReceiptHeader.Sar_mod_by = BaseCls.GlbUserID;
                                _ReceiptHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                                _ReceiptHeader.Sar_anal_1 = cmbDistrict.Text;
                                _ReceiptHeader.Sar_anal_2 = txtProvince.Text.Trim();
                                if (string.IsNullOrEmpty(_businessEntity.Mbe_distric_cd))
                                    _businessEntity.Mbe_distric_cd = cmbDistrict.Text;
                                if (string.IsNullOrEmpty(_businessEntity.Mbe_province_cd))
                                    _businessEntity.Mbe_province_cd = txtProvince.Text;

                                if (cmbDistrict.SelectedValue != null)
                                    _masterBusinessCompany.Mbe_distric_cd = cmbDistrict.SelectedValue.ToString();
                                _masterBusinessCompany.Mbe_province_cd = txtProvince.Text;

                                ReptPickHeader _SerHeader = new ReptPickHeader();
                                _SerHeader.Tuh_usrseq_no = -1;
                                _SerHeader.Tuh_usr_id = BaseCls.GlbUserID;
                                _SerHeader.Tuh_usr_com = BaseCls.GlbUserComCode;
                                _SerHeader.Tuh_session_id = BaseCls.GlbUserSessionID;
                                _SerHeader.Tuh_cre_dt = Convert.ToDateTime(txtDate.Value).Date;
                                _SerHeader.Tuh_doc_tp = "INV";
                                _SerHeader.Tuh_direct = false;
                                _SerHeader.Tuh_ischek_itmstus = true;
                                _SerHeader.Tuh_ischek_simitm = true;
                                _SerHeader.Tuh_ischek_reqqty = true;
                                _SerHeader.Tuh_doc_no = null;

                                // vehical regitration list
                                foreach (RegistrationList _reg in _List)
                                {
                                    //get serials
                                    List<ReptPickSerials> _serList = (from res in ScanSerialList
                                                                      where res.Tus_itm_cd == _reg.Item && res.Tus_itm_stus == _reg.Stus
                                                                      select res).ToList<ReptPickSerials>();
                                    foreach (ReptPickSerials _serial in _serList)
                                    {
                                        VehicalRegistration _tem = AssingRegDetails(_reg.Item, _reg.Item_reg, _reg.Item_claim, _serial.Tus_ser_1, _serial.Tus_ser_2);
                                        _registrationList.Add(_tem);
                                    }
                                }
                                //save invoice with registration
                                string _registration;
                                effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransactionRegistration(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, _ReceiptHeader, masterAutoRecTp, _registrationList, _registrationReciept, _SerHeader, out _registration, ref IsInvoiceCompleted);

                                //if (effect == -1) {
                                //    MessageBox.Show("Error occured while processing !!\n" + _error, "Error");
                                //    return;

                                //}
                            }
                            //END
                            else
                            {
                                //ADDED 2014/02/26
                                bool _sucess = CheckGeneralDiscount();
                                if (_sucess == false)
                                {
                                    return;
                                }
                                //

                                effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransaction01(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, chkDeliverLater.Checked == false ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, null, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, ref IsInvoiceCompleted, null, null, false, CreditCardTransLog, _InvEventList, _InvEventItems);
                            }
                        }
                        catch (Exception ex)
                        {
                            this.Cursor = Cursors.Default;
                            MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            CHNLSVC.CloseChannel();
                            btnRePayConfirm.Enabled = true;
                            return;
                        }
                        finally
                        {
                            string Msg = string.Empty;
                            btnRePayConfirm.Enabled = true;
                            this.Cursor = Cursors.Default;

                            if (effect != -1)
                            {
                                if (chkDeliverLater.Checked == false) Msg = "Successfully Saved! Document No : " + _invoiceNo + " with Delivery Order :" + _deliveryOrderNo + ". ";
                                else Msg = "Successfully Saved! Document No : " + _invoiceNo + ". ";
                                if (cmbInvType.Text.Trim() == "CS")
                                {
                                    var _isCashPaymentExsit = _recieptItem.Where(x => x.Sard_pay_tp == "CASH").ToList();
                                    if (_isCashPaymentExsit != null)
                                        if (_isCashPaymentExsit.Count > 0)
                                        {
                                            decimal _cashamt = _isCashPaymentExsit.Sum(x => x.Sard_settle_amt);
                                            string _customerGiven = PaymentBalanceConfirmation(Msg, _cashamt);
                                            if (!string.IsNullOrEmpty(_customerGiven.Trim()))
                                            {
                                                decimal _tmpCashGiven = 0;
                                                decimal.TryParse(_customerGiven, out _tmpCashGiven);
                                                //this.Cursor = Cursors.Default;

                                                string BalanceToGive = FormatToCurrency(Convert.ToString(_tmpCashGiven - _cashamt));

                                                //string BalanceToGive = FormatToCurrency(Convert.ToString(Convert.ToDecimal(_customerGiven) - _cashamt));
                                                this.Cursor = Cursors.Default;
                                                MessageBox.Show("You have to give back as balance " + BalanceToGive + "\n in " + lblCurrency.Text + ".", "Balance To Customer", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            }
                                        }
                                }
                                else
                                {
                                    this.Cursor = Cursors.Default;
                                    MessageBox.Show(Msg, "Saved Documents", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                                BaseCls.GlbReportName = string.Empty;
                                GlbReportName = string.Empty;
                                MasterBusinessEntity _itm = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                                bool _isAskDO = false;
                                if (MasterChannel != null) if (MasterChannel.Rows.Count > 0) if (MasterChannel.Rows[0].Field<Int16>("msc_isprint_do") == 1) _isAskDO = true; else _isAskDO = false;
                                if (chkManualRef.Checked == false)
                                {
                                    bool _isPrintElite = false;
                                    if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_chnl))
                                    { if (_MasterProfitCenter.Mpc_chnl.Trim() == "ELITE") { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true; } }
                                    //AUTO_DEL
                                    //get permission
                                    bool _permission = CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 11055);
                                    if (!_permission)
                                    {
                                        { if (_MasterProfitCenter.Mpc_chnl.Trim() == "AUTO_DEL") { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "DealerInvoicePrints.rpt"; BaseCls.GlbReportName = "DealerInvoicePrints.rpt"; _view.GlbReportDoc = _invoiceNo; BaseCls.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true; } }
                                    }
                                    if (_isPrintElite == false)
                                    {
                                        if (_itm.Mbe_sub_tp != "C.")
                                        {
                                            //Showroom
                                            //========================= INVOCIE  CASH/CREDIT/ HIRE
                                            if (chkTaxPayable.Checked == false)
                                            { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; }
                                            else
                                            {
                                                //Add Code by Chamal 27/04/2013
                                                //====================  TAX INVOICE
                                                ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "InvoicePrintTax.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                                if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrintTax_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                                //====================  TAX INVOICE
                                            }
                                        }
                                        else
                                        {
                                            //Dealer
                                            ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "InvoicePrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                            if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrint_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                        }
                                    }
                                    //Buyback Print
                                    if (BuyBackItemList != null) if (BuyBackItemList.Count > 0) { Reports.Inventory.ReportViewerInventory _viewBB = new Reports.Inventory.ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _viewBB.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INWARD"; _viewBB.GlbReportName = BaseCls.GlbUserComCode.Contains("SGL") ? "Inward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Inward_Docs.rpt" : "Inward_Docs.rpt"; _viewBB.GlbReportDoc = _buybackadj; _viewBB.Show(); _viewBB = null; }
                                }

                                //=========================DO
                                if (chkDeliverLater.Checked == false)
                                {
                                    if (_isAskDO)
                                    { if (MessageBox.Show("Do you need to print delivery order now?", "Print", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes) { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = string.Empty; _views.GlbReportName = BaseCls.GlbUserComCode.Contains("SGL") ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; } }
                                    else { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _views.GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; }
                                }
                                btnClear_Click(null, null);
                                //change chk value
                                if (_MasterProfitCenter.Mpc_is_do_now == 0)
                                {
                                    chkDeliverLater.Checked = false;
                                    chkDeliverNow.Checked = false;
                                    chkDeliverLater_CheckedChanged(null, null);
                                }
                                else if (_MasterProfitCenter.Mpc_is_do_now == 1)
                                {
                                    chkDeliverNow.Checked = true;
                                    chkDeliverLater.Checked = false;
                                    chkDeliverNow_CheckedChanged(null, null);
                                }
                                else
                                {
                                    chkDeliverLater.Checked = true;
                                    chkDeliverNow.Checked = false;
                                    chkDeliverLater_CheckedChanged(null, null);
                                }
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(_error))
                                { this.Cursor = Cursors.Default; MessageBox.Show("Generating Invoice is terminated due to following reason, " + _error, "Generated Error", MessageBoxButtons.OK, MessageBoxIcon.Hand); }
                                CHNLSVC.CloseChannel();
                            }
                        }
                    }
                }
            }
        }

        private void btnRePayConfirm_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                btnConfirm_CheckUserNewPaymentAmount();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnRePayClose_Click(object sender, EventArgs e)
        {
            btnRePayCancel_Click(null, null);
        }

        private void gvRePayment_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (gvRePayment.Rows.Count > 0) if (e.RowIndex != -1) if (e.ColumnIndex == 5)
                    {
                        gvRePayment.ReadOnly = false;
                        repy_collectamt.ReadOnly = false;
                        gvRePayment.CurrentCellChanged += delegate
                        {
                            DataGridViewRow row = gvRePayment.CurrentRow;
                            bool readOnly = row == null || row.Index != gvRePayment.NewRowIndex;
                            gvRePayment.ReadOnly = readOnly;
                        };
                    }
        }

        private bool IsVirtual(string _type)
        { if (_type == "V") { _IsVirtualItem = true; return true; } else { _IsVirtualItem = false; return false; } }

        #endregion Rooting for Change Invoice Type

        #region Rooting for Gift Voucher

        private bool _isGiftVoucherMsgPopup = false;

        private void chkGiftVoucher_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (chkGiftVoucher.Checked && gvInvoiceItem.Rows.Count > 0)
                {
                    this.Cursor = Cursors.Default;
                    MessageBox.Show("You can not change the invoice into gift voucher in the middle of the transaction. Please clear the screen and select you required option.", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    btnClear_Click(null, null);
                    _isGiftVoucherMsgPopup = true;
                    chkGiftVoucher.Checked = false;
                    return;
                }
                _isGiftVoucherCheckBoxClick = true;
                chkDeliverLater.Checked = true;
                chkDeliverNow.Checked = false;
                chkPickGV.Checked = false;
                if (chkGiftVoucher.Checked) { chkPickGV.Enabled = true; chkDeliverLater.Enabled = false; }
                else { chkPickGV.Enabled = false; chkDeliverLater.Enabled = true; chkDeliverLater.Checked = false; }
                _isGiftVoucherCheckBoxClick = false;
                if (chkGiftVoucher.Checked)
                {
                    if (chkDeliverLater.Checked)
                    {
                        chkOpenDelivery.Enabled = true;
                        txtDelLocation.Enabled = true;
                        btnSearchDelLocation.Enabled = true;
                    }
                    else
                    {
                        chkOpenDelivery.Enabled = false;
                        txtDelLocation.Enabled = false;
                        btnSearchDelLocation.Enabled = false;
                    }
                    gf_assignItem.Visible = true;
                }
                else { gf_assignItem.Visible = false; if (!_isGiftVoucherMsgPopup) btnClear_Click(null, null); if (_isGiftVoucherMsgPopup) _isGiftVoucherMsgPopup = false; }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private bool IsGiftVoucher(string _type)
        {
            if (_type == "G")
                return true;
            else
                return false;
        }

        private void txtSerialNo_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (chkPickGV.Checked)
            {
                IsDecimalAllow(false, sender, e);
            }
        }

        private void PrepareMultiItemGrid(bool _isGiftVoucher)
        {
            if (_isGiftVoucher)
            {
                MuItm_Item.DataPropertyName = "gvp_gv_cd";
                MuItm_Description.DataPropertyName = "mi_longdesc";
                MuItm_Model.DataPropertyName = "mi_model";
                MuItm_Brand.DataPropertyName = "mi_brand";
                MuItm_Serial.DataPropertyName = "gvp_book";
                MuItm_Serial.HeaderText = "Page";
                MuItm_Warranty.DataPropertyName = "gvp_book";
                MuItm_Warranty.HeaderText = "Book";
            }
            else
            {
                MuItm_Item.DataPropertyName = "Item";
                MuItm_Description.DataPropertyName = "Description";
                MuItm_Model.DataPropertyName = "Model";
                MuItm_Brand.DataPropertyName = "Brand";
                MuItm_Serial.DataPropertyName = "Serial";
                MuItm_Serial.HeaderText = "Serial";
                MuItm_Warranty.DataPropertyName = "Warranty";
                MuItm_Warranty.HeaderText = "Warranty";
            }
        }

        private void gvGiftVoucher_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (gvGiftVoucher.RowCount > 0)
                {
                    if (e.RowIndex != -1)
                    {
                        var _Item = _invoiceItemList.Where(x => !IsGiftVoucher(x.Sad_itm_tp)).Select(x => x.Sad_itm_cd).Distinct().ToList();
                        _Item.Add(string.Empty);
                        if (e.ColumnIndex == 7)
                        {
                            string _currentSelection = string.Empty;
                            DataGridViewComboBoxCell _comboColumn = (DataGridViewComboBoxCell)(gvGiftVoucher.Rows[e.RowIndex].Cells["gf_assignItem"]);
                            int _baseline = Convert.ToInt32(gvGiftVoucher.Rows[e.RowIndex].Cells["gf_baseItemLine"].Value);
                            var _isPromotion = _invoiceItemList.Where(x => x.Sad_itm_line == _baseline && !string.IsNullOrEmpty(x.Sad_promo_cd)).Select(x => x.Sad_promo_cd).Count();
                            if (_isPromotion > 0)
                            { this.Cursor = Cursors.Default; MessageBox.Show("This gift voucher belongs to a promotion.", "Promotion Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }

                            if (_comboColumn.DataSource != null)
                                _currentSelection = Convert.ToString(_comboColumn.EditedFormattedValue);
                            _comboColumn.DataSource = _Item;
                            _comboColumn.Value = _currentSelection;
                        }
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnBBClose_Click(object sender, EventArgs e)
        {
            pnlBuyBack.Visible = false;
        }

        private void btnSearchBB_Item_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.BuyBackItem);
                DataTable _result = CHNLSVC.CommonSearch.SearchBuyBackItem(_commonSearch.SearchParams, null, null);
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtBBItem;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtBBItem.Select();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtBBItem_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearchBB_Item_Click(null, null);
        }

        private void txtBBItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2)
                btnSearchBB_Item_Click(null, null);
            if (e.KeyCode == Keys.Enter)
                txtBBQty.Focus();
        }

        private void txtBBItem_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtBBItem.Text.Trim())) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (!LoadBuyBackItemDetail(txtBBItem.Text.Trim()))
                {
                    this.Cursor = Cursors.Default;
                    MessageBox.Show("Please check the buy back item code", "Invalid Item", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtBBItem.Clear();
                    txtBBItem.Focus();
                    return;
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtBBQty_KeyPress(object sender, KeyPressEventArgs e)
        {
            IsDecimalAllow(false, sender, e);
        }

        private void txtBBSerial1_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtBBSerial1.Text)) return;
            if (string.IsNullOrEmpty(txtBBItem.Text)) { this.Cursor = Cursors.Default; MessageBox.Show("Please select the item code", "Item Code", MessageBoxButtons.OK, MessageBoxIcon.Information); txtBBSerial1.Clear(); txtBBItem.Clear(); txtBBItem.Focus(); return; }
            if (txtBBSerial1.Text.Trim().ToUpper() == "N/A" || txtBBSerial1.Text.Trim().ToUpper() == "NA") return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                DataTable _availability = CHNLSVC.Inventory.CheckSerialAvailability("SERIAL1", txtBBItem.Text, txtBBSerial1.Text);
                if (_availability != null)
                    if (_availability.Rows.Count > 0)
                    {
                        this.Cursor = Cursors.Default;
                        string _location = Convert.ToString(_availability.Rows[0]["ins_loc"]);
                        MessageBox.Show("This serial already available in " + _location + " location. Please check the serial", "Serial Available", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtBBSerial1.Clear();
                        txtBBSerial1.Focus();
                        return;
                    }

                txtBBQty.Text = FormatToQty("1");
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtBBSerial2_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtBBSerial2.Text)) return;
            if (txtBBSerial2.Text.Trim().ToUpper() == "N/A" || txtBBSerial2.Text.Trim().ToUpper() == "NA") return;
            if (string.IsNullOrEmpty(txtBBItem.Text)) { MessageBox.Show("Please select the item code", "Item Code", MessageBoxButtons.OK, MessageBoxIcon.Information); txtBBSerial2.Clear(); txtBBItem.Clear(); txtBBItem.Focus(); return; }
            try
            {
                this.Cursor = Cursors.WaitCursor;
                DataTable _availability = CHNLSVC.Inventory.CheckSerialAvailability("SERIAL2", txtBBItem.Text, txtBBSerial2.Text);
                if (_availability != null)
                    if (_availability.Rows.Count > 0)
                    {
                        this.Cursor = Cursors.Default;
                        string _location = Convert.ToString(_availability.Rows[0]["ins_loc"]);
                        MessageBox.Show("This serial already available in " + _location + " location. Please check the serial", "Serial Available", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtBBSerial2.Clear();
                        txtBBSerial2.Focus();
                        return;
                    }
                txtBBQty.Text = FormatToQty("1");
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private List<ReptPickSerials> AddBuyBackItem(DataGridViewRow _row)
        {
            ReptPickSerials _one = null;
            List<ReptPickSerials> _return = null;
            decimal _qty = Convert.ToDecimal(_row.Cells["bb_qty"].Value);
            if (_qty > 1)
            {
                for (int i = 1; i <= _qty; i++)
                {
                    _one = new ReptPickSerials();
                    _one.Tus_itm_cd = Convert.ToString(_row.Cells["bb_item"].Value);
                    _one.Tus_itm_desc = Convert.ToString(_row.Cells["bb_description"].Value);
                    _one.Tus_itm_model = Convert.ToString(_row.Cells["bb_model"].Value);
                    _one.Tus_itm_stus = Convert.ToString(_row.Cells["bb_status"].Value);
                    _one.Tus_qty = 1;
                    _one.Tus_ser_1 = Convert.ToString(_row.Cells["bb_serial1"].Value);
                    _one.Tus_ser_2 = Convert.ToString(_row.Cells["bb_serial2"].Value);
                    _one.Tus_ser_id = CHNLSVC.Inventory.GetSerialID();
                    _one.Tus_unit_cost = 0;
                    _one.Tus_unit_price = 0;
                    _one.Tus_warr_no = Convert.ToString(_row.Cells["bb_warranty"].Value);
                    _one.Tus_seq_no = 0;
                    _one.Tus_itm_line = 0;
                    _one.Tus_batch_line = 0;
                    _one.Tus_ser_line = 0;
                    _one.Tus_com = BaseCls.GlbUserComCode;
                    _one.Tus_loc = BaseCls.GlbUserDefLoca;
                    _one.Tus_cre_by = BaseCls.GlbUserID;
                    _one.Tus_cre_dt = DateTime.Now.Date;
                    _one.Tus_session_id = BaseCls.GlbUserSessionID;
                    if (_return == null || _return.Count <= 0) _return = new List<ReptPickSerials>();
                    _return.Add(_one);
                }
            }
            else if (_qty == 1)
            {
                _one = new ReptPickSerials();
                _one.Tus_itm_cd = Convert.ToString(_row.Cells["bb_item"].Value);
                _one.Tus_itm_desc = Convert.ToString(_row.Cells["bb_description"].Value);
                _one.Tus_itm_model = Convert.ToString(_row.Cells["bb_model"].Value);
                _one.Tus_itm_stus = Convert.ToString(_row.Cells["bb_status"].Value);
                _one.Tus_qty = 1;
                _one.Tus_ser_1 = Convert.ToString(_row.Cells["bb_serial1"].Value);
                _one.Tus_ser_2 = Convert.ToString(_row.Cells["bb_serial2"].Value);
                _one.Tus_ser_id = CHNLSVC.Inventory.GetSerialID();
                _one.Tus_unit_cost = 0;
                _one.Tus_unit_price = 0;
                _one.Tus_warr_no = Convert.ToString(_row.Cells["bb_warranty"].Value);
                _one.Tus_seq_no = 0;
                _one.Tus_itm_line = 0;
                _one.Tus_batch_line = 0;
                _one.Tus_ser_line = 0;
                _one.Tus_com = BaseCls.GlbUserComCode;
                _one.Tus_loc = BaseCls.GlbUserDefLoca;
                _one.Tus_cre_by = BaseCls.GlbUserID;
                _one.Tus_cre_dt = DateTime.Now.Date;
                _one.Tus_session_id = BaseCls.GlbUserSessionID;
                if (_return == null || _return.Count <= 0) _return = new List<ReptPickSerials>();
                _return.Add(_one);
            }
            return _return;
        }

        private void btnBBAddItem_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtBBItem.Text)) { this.Cursor = Cursors.Default; MessageBox.Show("Please select the buy back item.", "Buy Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); txtBBItem.Clear(); txtBBItem.Focus(); return; }
            if (string.IsNullOrEmpty(txtQty.Text)) { this.Cursor = Cursors.Default; MessageBox.Show("Please select the qty", "Qty", MessageBoxButtons.OK, MessageBoxIcon.Information); txtBBQty.Clear(); txtBBQty.Focus(); return; }
            try
            {
                this.Cursor = Cursors.WaitCursor;
                var _bbQty = _invoiceItemList.Where(x => x.Sad_merge_itm == "3").Sum(x => x.Sad_qty);
                if (_bbQty == 0) { this.Cursor = Cursors.Default; MessageBox.Show("There is no buy back promotion.", "Buy-Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                var _pickedBBitem = (from DataGridViewRow _row in gvAddBuyBack.Rows
                                     select _row).Sum(x => Convert.ToDecimal(x.Cells["bb_qty"].Value));
                if (_bbQty < _pickedBBitem + Convert.ToDecimal(txtQty.Text)) { this.Cursor = Cursors.Default; MessageBox.Show("Can not exceed the buy-back promotion qty with returning qty.", "Qty Exceeds", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
                MasterItem _item = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtBBItem.Text.Trim());

                var _duplicate = (from DataGridViewRow _row in gvAddBuyBack.Rows
                                  where Convert.ToString(_row.Cells["bb_item"].Value) == txtBBItem.Text.Trim() && Convert.ToString(_row.Cells["bb_serial1"].Value) == txtBBSerial1.Text.Trim() && Convert.ToString(_row.Cells["bb_serial2"].Value) == txtBBSerial2.Text.Trim() && (Convert.ToString(_row.Cells["bb_serial1"].Value) != "N/A" || Convert.ToString(_row.Cells["bb_serial1"].Value) != "NA") && (Convert.ToString(_row.Cells["bb_serial2"].Value) != "N/A" || Convert.ToString(_row.Cells["bb_serial2"].Value) != "NA")
                                  select _row).Count();
                if (_duplicate > 0) { this.Cursor = Cursors.Default; MessageBox.Show("Selected item/serial already added!", "Duplicate", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }

                txtBBSerial1.Text = txtBBSerial1.Text.Replace("'", "").ToString();
                txtBBSerial2.Text = txtBBSerial2.Text.Replace("'", "").ToString();
                txtBBWarranty.Text = txtBBWarranty.Text.Replace("'", "").ToString();

                gvAddBuyBack.AllowUserToAddRows = true;
                object[] _obj = new object[13];
                _obj.SetValue(txtBBItem.Text.Trim(), 1);
                _obj.SetValue(_itemdetail.Mi_longdesc, 2);
                _obj.SetValue(_itemdetail.Mi_model, 3);
                _obj.SetValue("BB", 4);
                _obj.SetValue(txtBBQty.Text.Trim(), 5);
                _obj.SetValue(string.IsNullOrEmpty(txtBBSerial1.Text.Trim()) ? "N/A" : txtBBSerial1.Text.Trim(), 6);
                _obj.SetValue(string.IsNullOrEmpty(txtBBSerial2.Text.Trim()) ? "N/A" : txtBBSerial2.Text.Trim(), 7);
                _obj.SetValue(string.IsNullOrEmpty(txtBBWarranty.Text.Trim()) ? "N/A" : txtBBWarranty.Text.Trim(), 8);
                _obj.SetValue("1", 9);
                _obj.SetValue("-1", 10);
                _obj.SetValue("-1", 11);
                _obj.SetValue("-1", 12);
                gvAddBuyBack.Rows.Insert(gvAddBuyBack.NewRowIndex, _obj);
                gvAddBuyBack.AllowUserToAddRows = false;

                txtBBItem.Clear();
                txtBBQty.Text = "1";
                txtBBSerial1.Clear();
                txtBBSerial2.Clear();
                txtBBWarranty.Clear();
                LoadBuyBackItemDetail(string.Empty);
                txtBBItem.Focus();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnBBConfirm_Click(object sender, EventArgs e)
        {
            if (gvAddBuyBack.Rows.Count <= 0) { this.Cursor = Cursors.Default; MessageBox.Show("Please select the buy back item", "Buy-Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }
            try
            {
                this.Cursor = Cursors.WaitCursor;
                var _bbQty = _invoiceItemList.Where(x => x.Sad_merge_itm == "3" && x.Sad_unit_rt != 0).Sum(x => x.Sad_qty);
                var _pickedBBitem = (from DataGridViewRow _row in gvAddBuyBack.Rows
                                     select _row).Sum(x => Convert.ToDecimal(x.Cells["bb_qty"].Value));
                var _alreadyPick = (from DataGridViewRow _row in gvBuyBack.Rows
                                    select _row).Sum(x => Convert.ToDecimal(x.Cells["obb_Qty"].Value));

                if (_bbQty != _pickedBBitem + _alreadyPick) { this.Cursor = Cursors.Default; MessageBox.Show("Please check the buy-back return item qty with promotion qty. Promotion qty : " + _bbQty.ToString() + " and return qty " + (_pickedBBitem + _alreadyPick).ToString(), "Qty Exceeds", MessageBoxButtons.OK, MessageBoxIcon.Information); return; }

                foreach (DataGridViewRow _row in gvAddBuyBack.Rows)
                {
                    if (BuyBackItemList == null) BuyBackItemList = new List<ReptPickSerials>();
                    BuyBackItemList.AddRange(AddBuyBackItem(_row));
                }
                var _bind = new BindingList<ReptPickSerials>(BuyBackItemList);
                gvBuyBack.DataSource = _bind;

                txtBBItem.Clear();
                txtBBQty.Text = "1";
                txtBBSerial1.Clear();
                txtBBSerial2.Clear();
                txtBBWarranty.Clear();
                gvAddBuyBack.Rows.Clear();
                LoadBuyBackItemDetail(string.Empty);
                pnlBuyBack.Visible = false;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnBuyBack_Click(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                if (pnlBuyBack.Visible) pnlBuyBack.Visible = false; else pnlBuyBack.Visible = true;
                gvAddBuyBack.Rows.Clear();
                txtBBItem.Clear();
                txtBBQty.Text = "1";
                txtBBSerial1.Clear();
                txtBBSerial2.Clear();
                txtBBWarranty.Clear();
                LoadBuyBackItemDetail(string.Empty);
                txtBBItem.Focus();
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void txtBBQty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtBBSerial1.Focus();
        }

        private void txtBBSerial1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtBBSerial2.Focus();
        }

        private void txtBBSerial2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                txtBBWarranty.Focus();
        }

        private void txtBBWarranty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                btnBBAddItem.Focus();
        }

        private void gvAddBuyBack_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (gvAddBuyBack.Rows.Count > 0)
                if (e.RowIndex != -1)
                    if (e.ColumnIndex == 0)
                        if (MessageBox.Show("Do you want to remove this item?", "Remove", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                            gvAddBuyBack.Rows.RemoveAt(e.RowIndex);
        }

        private void gvBuyBack_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (gvBuyBack.Rows.Count > 0) if (e.RowIndex != -1) if (e.ColumnIndex == 0) if (MessageBox.Show("Do you need to remove this buy-back return item?", "Buy-Back Return", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            BuyBackItemList.RemoveAt(e.RowIndex);
                            var _bind = new BindingList<ReptPickSerials>(BuyBackItemList);
                            gvBuyBack.DataSource = _bind;
                        }
        }

        private void btnPnlSubSerialClose_Click(object sender, EventArgs e)
        {
            pnlSubSerial.Visible = false;
        }

        private void SetDateTopPayMode()
        {
            ucPayModes1.Date = Convert.ToDateTime(txtDate.Value.Date);
            //kapila 18/11/2016
            ucPayModes1.TransDate.Text = txtDate.Value.Date.ToShortDateString();
            ucPayModes1.IsBOCN = chkCreditNote.Checked ? 1 : 0;
            LoadPayMode();
            ucPayModes1.PaySource = "INV"; //added By Wimal @ 17/09/2018
        }

        private void txtDate_Leave(object sender, EventArgs e)
        {
            SetDateTopPayMode();
            //Akila 2017/10/26
            if ((!string.IsNullOrEmpty(txtCustomer.Text.Trim())) && (txtCustomer.Text != "CASH") && (BaseCls.GlbUserComCode != "AAL"))
            {
                if (!IsValidCustomer(txtCustomer.Text.Trim(), cmbInvType.SelectedValue.ToString()))
                {
                    return;
                }
        }
        }

        #endregion Rooting for Gift Voucher

        #region Rooting for Loyalty Process

        private string ReturnLoyaltyNo()
        {
            string _no = string.Empty;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCard);
                DataTable _result = CHNLSVC.CommonSearch.SearchLoyaltyCard(_commonSearch.SearchParams, null, null);
                if (_result != null && _result.Rows.Count > 0)
                {
                    if (_result.Rows.Count > 1)
                    {
                        MessageBox.Show("Customer having multiple loyalty cards. Please select one of them.", "Loyalty Card", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtLoyalty.BackColor = Color.White;
                        return _no;
                    }
                    _no = _result.Rows[0].Field<string>("Card No");
                    txtLoyalty.BackColor = Color.Red;
                }
                else txtLoyalty.BackColor = Color.White;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
            return _no;
        }

        private void txtLoyalty_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtLoyalty.Text)) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCard);
                DataTable _result = CHNLSVC.CommonSearch.SearchLoyaltyCard(_commonSearch.SearchParams, null, null);
                if (_result != null) if (_result.Rows.Count > 0)
                    {
                        var _results = _result.AsEnumerable().ToList().Where(x => x.Field<string>("Card No") == txtLoyalty.Text.Trim()).ToList();
                        if (_results == null || _results.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            MessageBox.Show("Please check the loyalty card", "Invalid Card", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtLoyalty.Clear();
                            txtLoyalty.Focus();
                            return;
                        }
                        else
                        {
                            string _tem = _results.AsEnumerable().Select(x => x.Field<string>("Type")).ToList()[0];
                            _loyaltyType = CHNLSVC.Sales.GetLoyaltyType(_tem);
                            if (_loyaltyType == null)
                            {
                                MessageBox.Show("Loyalty Card Type not found", "Invalid Card", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                txtLoyalty.Clear();
                            }
                            else
                            {
                                ucPayModes1.LoyaltyCard = _loyaltyType.Salt_loty_tp;
                            }
                        }
                    }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        #endregion Rooting for Loyalty Process

        #region Rooting for Ageing Policy

        private void CheckNValidateAgeItem(string _itemc, string _itemcategory, string _bookc, string _levelc, string _status, out bool IsAgePriceLevel, out int AgeDays)
        {
            bool _isAgePriceLevel = false;
            int _ageingDays = -1;
            MasterItem _item = null;
            if (string.IsNullOrEmpty(_itemcategory))
            { _item = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itemc); if (_item != null) _itemcategory = _item.Mi_cate_1; }
            List<PriceBookLevelRef> _level = _priceBookLevelRefList;
            if (_level != null)
                if (_level.Count > 0)
                {
                    var _lvl = _level.Where(x => x.Sapl_isage && x.Sapl_itm_stuts == _status).ToList();
                    if (_lvl != null) if (_lvl.Count() > 0)
                            _isAgePriceLevel = true;
                }
            if (_isAgePriceLevel)
            {
                DataTable _categoryDet = CHNLSVC.General.GetMainCategoryDetail(_itemcategory);
                if (_categoryDet != null && _categoryDet.Rows.Count > 0)
                {
                    if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                        _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                    else _ageingDays = 0;
                }
            }

            IsAgePriceLevel = _isAgePriceLevel;
            AgeDays = _ageingDays;
        }

        private List<ReptPickSerials> GetAgeItemList(DateTime _date, bool _isAgePriceLevel, int _noOfDays, List<ReptPickSerials> _referance)
        {
            List<ReptPickSerials> _ageLst = new List<ReptPickSerials>();
            if (_isAgePriceLevel)
                _ageLst = _referance.Where(x => x.Tus_exist_grndt <= _date.AddDays(-_noOfDays)).ToList();
            else
                _ageLst = _referance;
            return _ageLst;
        }

        private void txtQuotation_Leave(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(txtQuotation.Text.Trim())) return;
            try
            {
                this.Cursor = Cursors.WaitCursor;
                //kapila
                QuotationHeader _quoHdr = new QuotationHeader();
                _quoHdr = CHNLSVC.Sales.Get_Quotation_HDR(txtQuotation.Text.Trim());

                if (_quoHdr.Qh_no != null)
                {
                    txtCustomer.Text = _quoHdr.Qh_party_cd;
                    txtCusName.Text = _quoHdr.Qh_party_name;
                    txtAddress1.Text = _quoHdr.Qh_add1;
                    txtAddress2.Text = _quoHdr.Qh_add2;
                    txtMobile.Text = _quoHdr.Qh_mobi;

                    txtDelCustomer.Text = _quoHdr.Qh_del_cuscd;
                    txtDelName.Text = _quoHdr.Qh_del_cusname;
                    txtDelAddress1.Text = _quoHdr.Qh_del_cusadd1;
                    txtDelAddress2.Text = _quoHdr.Qh_del_cusadd2;

                }
                else
                {
                    this.Cursor = Cursors.Default;
                    MessageBox.Show("Invalid Quotation No ", "Quotation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    _invoiceItemList = new List<InvoiceItem>();
                    var _nulllst = new BindingList<InvoiceItem>(_invoiceItemList);
                    gvInvoiceItem.DataSource = _nulllst;

                    txtCustomer.Text = "";
                    txtCusName.Text = "";
                    txtAddress1.Text = "";
                    txtAddress2.Text = "";
                    txtMobile.Text = "";

                    txtDelCustomer.Text = "";
                    txtDelName.Text = "";
                    txtDelAddress1.Text = "";
                    txtDelAddress2.Text = "";
                }

                if (_quoHdr.Qh_quo_base == 0)     //kapila 14/3/2016
                {
                    _invoiceItemList = CHNLSVC.Sales.GetQuotationDetail(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtQuotation.Text.Trim(), Convert.ToDateTime(txtDate.Value.Date).Date);
                    //get serial
                    List<QuotationSerial> _serialList = CHNLSVC.Sales.GetQuoSerials(txtQuotation.Text.Trim());
                    if (_invoiceItemList != null && _invoiceItemList.Count > 0)
                    {
                        _invoiceItemList.ForEach(X => X.Sad_job_line = X.Sad_itm_line);

                        #region Check For Inventory Balance if Delivered Now

                        if (chkDeliverLater.Checked == false)
                        {
                            bool _isPricelevelallowforDOanystatus = false;
                            string _balanceexceedList = string.Empty;
                            foreach (InvoiceItem _itm in _invoiceItemList)
                            {
                                //------------------------------------------------------------------------------------------------
                                if (!string.IsNullOrEmpty(_itm.Sad_pbook) && !string.IsNullOrEmpty(_itm.Sad_pb_lvl))
                                {
                                    List<PriceBookLevelRef> _lvl = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _itm.Sad_pbook, _itm.Sad_pb_lvl);
                                    if (_lvl != null)
                                        if (_lvl.Count > 0)
                                        {
                                            var _bool = from _l in _lvl where _l.Sapl_chk_st_tp == true select _l.Sapl_chk_st_tp;
                                            if (_bool != null) if (_bool.Count() > 0) _isPricelevelallowforDOanystatus = false; else _isPricelevelallowforDOanystatus = true; else _isPricelevelallowforDOanystatus = true;
                                        }
                                }
                                else
                                    _isPricelevelallowforDOanystatus = true;

                                //------------------------------------------------------------------------------------------------
                                decimal _pickQty = 0;
                                if (_isPricelevelallowforDOanystatus)
                                    _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _itm.Sad_itm_cd).ToList().Select(x => x.Sad_qty).Sum();
                                else
                                    _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _itm.Sad_itm_cd && x.Mi_itm_stus == _itm.Mi_itm_stus).ToList().Select(x => x.Sad_qty).Sum();

                                _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
                                List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Sad_itm_cd, _itm.Mi_itm_stus);

                                if (_inventoryLocation != null && _inventoryLocation.Count > 0)
                                {
                                    decimal _invBal = _inventoryLocation[0].Inl_qty;
                                    if (_pickQty > _invBal)

                                        if (string.IsNullOrEmpty(_balanceexceedList))
                                            _balanceexceedList = _itm.Sad_itm_cd;
                                        else
                                            _balanceexceedList = ", " + _itm.Sad_itm_cd;
                                }
                                else
                                    if (string.IsNullOrEmpty(_balanceexceedList))
                                        _balanceexceedList = _itm.Sad_itm_cd;
                                    else
                                        _balanceexceedList = ", " + _itm.Sad_itm_cd;
                            }

                            if (!string.IsNullOrEmpty(_balanceexceedList))
                            {
                                _invoiceItemList = new List<InvoiceItem>();
                                ScanSerialList = new List<ReptPickSerials>();
                                InvoiceSerialList = new List<InvoiceSerial>();
                                this.Cursor = Cursors.Default;
                                MessageBox.Show(_balanceexceedList + " item(s) inventory balance exceeds", "Inventory Balance", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            InvItm_SerialAdd.Visible = true;
                        }

                        #endregion Check For Inventory Balance if Delivered Now

                        GrndSubTotal = 0;
                        GrndDiscount = 0;
                        GrndTax = 0;

                        foreach (InvoiceItem itm in _invoiceItemList)
                        { CalculateGrandTotal(itm.Sad_qty, itm.Sad_unit_rt, itm.Sad_disc_amt, itm.Sad_itm_tax_amt, true); _lineNo += 1; SSCombineLine += 1; }

                        var _invlst = new BindingList<InvoiceItem>(_invoiceItemList);
                        gvInvoiceItem.DataSource = _invlst;

                        ScanSerialList = new List<ReptPickSerials>();
                        string _defbin = CHNLSVC.Inventory.GetDefaultBinCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);

                        #region item detail
                        foreach (InvoiceItem _itm in _invoiceItemList)
                        {
                            MasterItem _item = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itm.Sad_itm_cd);
                            if (_item.Mi_is_ser1 != -1)
                            {
                                MasterLocation _MasterLocation = CHNLSVC.General.GetAllLocationByLocCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, 0);

                                if (_MasterLocation.Ml_is_serial == false)
                                {
                                    MessageBox.Show("This Location is not setup for serial maintain Pls. contact Inventory Department. ", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                            }
                            if (_item.Mi_is_ser1 == 0)
                            {
                                List<ReptPickSerials> _nonserLst = null;
                                if (IsPriceLevelAllowDoAnyStatus == false)
                                    _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomly(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Sad_itm_cd, _itm.Sad_itm_stus, Convert.ToDecimal(_itm.Sad_qty));
                                else
                                    _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomly(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _itm.Sad_itm_cd, string.Empty, Convert.ToDecimal(_itm.Sad_qty));
                                _nonserLst.ForEach(x => x.Tus_base_doc_no = Convert.ToString(-100));
                                _nonserLst.ForEach(x => x.Tus_base_itm_line = _itm.Sad_itm_line);
                                _nonserLst.ForEach(x => x.Tus_usrseq_no = -100);
                                _nonserLst.ForEach(x => x.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim()));
                                _nonserLst.ForEach(x => x.Tus_serial_id = string.Empty);
                                _nonserLst.ForEach(x => x.Tus_ser_id = -1);
                                _nonserLst.ForEach(x => x.Tus_new_status = string.Empty);
                                ScanSerialList.AddRange(_nonserLst);
                            }
                            else if (_item.Mi_is_ser1 == -1)
                            {
                                ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                                _reptPickSerial_.Tus_com = BaseCls.GlbUserComCode;
                                _reptPickSerial_.Tus_base_doc_no = Convert.ToString(-100);
                                _reptPickSerial_.Tus_base_itm_line = _itm.Sad_itm_line;
                                _reptPickSerial_.Tus_bin = _defbin;
                                _reptPickSerial_.Tus_cre_by = BaseCls.GlbUserID;
                                _reptPickSerial_.Tus_cre_dt = DateTime.Now;
                                _reptPickSerial_.Tus_cross_batchline = 0;
                                _reptPickSerial_.Tus_cross_itemline = 0;
                                _reptPickSerial_.Tus_cross_seqno = 0;
                                _reptPickSerial_.Tus_cross_serline = 0;
                                _reptPickSerial_.Tus_doc_dt = Convert.ToDateTime(txtDate.Text);
                                _reptPickSerial_.Tus_doc_no = string.Empty;
                                _reptPickSerial_.Tus_exist_grncom = string.Empty;
                                _reptPickSerial_.Tus_isapp = 1;
                                _reptPickSerial_.Tus_iscovernote = 1;
                                _reptPickSerial_.Tus_itm_brand = _itm.Mi_brand;
                                _reptPickSerial_.Tus_itm_cd = _itm.Sad_itm_cd;
                                _reptPickSerial_.Tus_itm_desc = _itm.Mi_longdesc;
                                _reptPickSerial_.Tus_itm_line = 0;
                                _reptPickSerial_.Tus_itm_model = _itm.Mi_model;
                                _reptPickSerial_.Tus_itm_stus = _itm.Sad_itm_stus;
                                _reptPickSerial_.Tus_loc = BaseCls.GlbUserDefLoca;
                                _reptPickSerial_.Tus_new_status = string.Empty;
                                _reptPickSerial_.Tus_qty = _itm.Sad_qty;
                                _reptPickSerial_.Tus_ser_1 = "N/A";
                                _reptPickSerial_.Tus_ser_2 = "N/A";
                                _reptPickSerial_.Tus_ser_id = 0;
                                _reptPickSerial_.Tus_ser_line = 0;
                                _reptPickSerial_.Tus_session_id = BaseCls.GlbUserSessionID;
                                _reptPickSerial_.Tus_unit_cost = 0;
                                _reptPickSerial_.Tus_unit_price = 0;
                                _reptPickSerial_.Tus_usrseq_no = -100;
                                _reptPickSerial_.Tus_warr_no = "N/A";
                                _reptPickSerial_.Tus_warr_period = 0;
                                _reptPickSerial_.Tus_new_remarks = string.Empty;
                                ScanSerialList.Add(_reptPickSerial_);
                            }
                            else
                            {
                                //get serial
                                if (_serialList != null && _serialList.Count > 0)
                                {
                                    List<QuotationSerial> _itmSerial = (from _res in _serialList
                                                                        where _res.Qs_item == _itm.Sad_itm_cd && _res.Qs_main_line == _itm.Sad_itm_line
                                                                        select _res).ToList<QuotationSerial>();
                                    if (_itmSerial != null && _itmSerial.Count > 0)
                                    {
                                        //get reserved serial
                                        List<InventorySerialRefN> _invSerials = CHNLSVC.Inventory.GetSerialByID(_itmSerial[0].Qs_ser_id.ToString(), BaseCls.GlbUserDefLoca);
                                        if (_invSerials == null && _invSerials.Count <= 0)
                                        {
                                            MessageBox.Show("Quotation serial id not found on inventory\n" + " SERIAL ID - " + _itmSerial[0].Qs_ser_id, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            return;
                                        }
                                        //_invSerials = (from _res in _invSerials
                                        //               where _res.Ins_available == -1 
                                        //               select _res).ToList<InventorySerialRefN>();
                                        _invSerials = (from _res in _invSerials
                                                       where _res.Ins_available == -1 || _res.Ins_available == 1 // added by Nadeeka
                                                       select _res).ToList<InventorySerialRefN>();
                                        if (_invSerials != null && _invSerials.Count > 0)
                                        {
                                            ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                                            _reptPickSerial_.Tus_com = BaseCls.GlbUserComCode;
                                            _reptPickSerial_.Tus_base_doc_no = Convert.ToString(-100);
                                            _reptPickSerial_.Tus_base_itm_line = _itm.Sad_itm_line;
                                            _reptPickSerial_.Tus_bin = _invSerials[0].Ins_bin;
                                            _reptPickSerial_.Tus_cre_by = BaseCls.GlbUserID;
                                            _reptPickSerial_.Tus_cre_dt = DateTime.Now;
                                            _reptPickSerial_.Tus_cross_batchline = _invSerials[0].Ins_cross_batchline;
                                            _reptPickSerial_.Tus_cross_itemline = _invSerials[0].Ins_cross_itmline;
                                            _reptPickSerial_.Tus_cross_seqno = _invSerials[0].Ins_cross_seqno;
                                            _reptPickSerial_.Tus_cross_serline = _invSerials[0].Ins_cross_serline;
                                            _reptPickSerial_.Tus_doc_dt = _invSerials[0].Ins_doc_dt;
                                            _reptPickSerial_.Tus_doc_no = _invSerials[0].Ins_doc_no;
                                            _reptPickSerial_.Tus_exist_grncom = _invSerials[0].Ins_exist_grncom;
                                            _reptPickSerial_.Tus_isapp = 1;
                                            _reptPickSerial_.Tus_iscovernote = 1;
                                            _reptPickSerial_.Tus_itm_brand = _itm.Mi_brand;
                                            _reptPickSerial_.Tus_itm_cd = _itm.Sad_itm_cd;
                                            _reptPickSerial_.Tus_itm_desc = _itm.Mi_longdesc;
                                            _reptPickSerial_.Tus_itm_line = 0;
                                            _reptPickSerial_.Tus_itm_model = _itm.Mi_model;
                                            _reptPickSerial_.Tus_itm_stus = _itm.Sad_itm_stus;
                                            _reptPickSerial_.Tus_loc = BaseCls.GlbUserDefLoca;
                                            _reptPickSerial_.Tus_new_status = string.Empty;
                                            _reptPickSerial_.Tus_qty = _itm.Sad_qty;
                                            _reptPickSerial_.Tus_ser_1 = _invSerials[0].Ins_ser_1;
                                            _reptPickSerial_.Tus_ser_2 = _invSerials[0].Ins_ser_2;
                                            _reptPickSerial_.Tus_ser_id = _invSerials[0].Ins_ser_id;
                                            _reptPickSerial_.Tus_ser_line = _invSerials[0].Ins_ser_line;
                                            _reptPickSerial_.Tus_session_id = BaseCls.GlbUserSessionID;
                                            _reptPickSerial_.Tus_unit_cost = _invSerials[0].Ins_unit_cost;
                                            _reptPickSerial_.Tus_unit_price = _invSerials[0].Ins_unit_price;
                                            _reptPickSerial_.Tus_usrseq_no = -100;
                                            _reptPickSerial_.Tus_warr_no = _invSerials[0].Ins_warr_no;
                                            _reptPickSerial_.Tus_warr_period = _invSerials[0].Ins_warr_period;
                                            _reptPickSerial_.Tus_new_remarks = string.Empty;
                                            ScanSerialList.Add(_reptPickSerial_);
                                            //ScanSerialList.AddRange(_invSerials);
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        var _serlst = new BindingList<ReptPickSerials>(ScanSerialList);
                        gvPopSerial.DataSource = _serlst;

                        decimal _tobepays = 0;
                        if (lblSVatStatus.Text == "Available") _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                        else _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                        ucPayModes1.TotalAmount = _tobepays;
                        ucPayModes1.InvoiceItemList = _invoiceItemList;
                        ucPayModes1.SerialList = InvoiceSerialList;
                        ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                        ucPayModes1.IsTaxInvoice = chkTaxPayable.Checked;
                        if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                            ucPayModes1.LoadData();

                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        MessageBox.Show("Invalid Quotation No ", "Quotation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        _invoiceItemList = new List<InvoiceItem>();
                        var _nulllst = new BindingList<InvoiceItem>(_invoiceItemList);
                        gvInvoiceItem.DataSource = _nulllst;

                        txtCustomer.Text = "";
                        txtCusName.Text = "";
                        txtAddress1.Text = "";
                        txtAddress2.Text = "";
                        txtMobile.Text = "";

                        txtDelCustomer.Text = "";
                        txtDelName.Text = "";
                        txtDelAddress1.Text = "";
                        txtDelAddress2.Text = "";
                    }
                }
                else
                {
                    MessageBox.Show("This quotation has selected quotation based price level.\n You have to add item details", "Quotation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void cmbLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                this.Cursor = Cursors.WaitCursor;
                LoadPriceLevelMessage();

            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void chkQuotation_CheckedChanged(object sender, EventArgs e)
        {
            if (chkQuotation.Checked)
                txtQuotation.Enabled = true;
            else
                txtQuotation.Enabled = false; btnClear_Click(null, null);
        }

        private void label98_Click(object sender, EventArgs e)
        {
            if (chkQuotation.Checked) chkQuotation.Checked = false; else chkQuotation.Checked = true;
        }

        private void txtQuotation_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                btnAddItem.Focus();
        }

        #endregion Rooting for Ageing Policy

        #region Rooting for Token Process

        private void lblInvoice_Click(object sender, EventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            lblInvoice.BackColor = Color.SteelBlue;
            lblInvoice.ForeColor = Color.White;
            lblToken.BackColor = Color.White;
            lblToken.ForeColor = Color.Black;
            btnClear_Click(null, null);
            IsToken = false;
            btnSearch_Invoice.Visible = true;
            btnTokenDetail.Visible = false;
            this.Cursor = Cursors.Default;
        }

        private void lblToken_Click(object sender, EventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            lblInvoice.BackColor = Color.White;
            lblInvoice.ForeColor = Color.Black;
            lblToken.BackColor = Color.SteelBlue;
            lblToken.ForeColor = Color.White;
            btnClear_Click(null, null);
            this.Cursor = Cursors.Default;
            btnSearch_Invoice.Visible = false;
            btnTokenDetail.Visible = true;
            IsToken = true;
        }

        private void btnTokenDetail_Click(object sender, EventArgs e)
        {
            if (pnlTokenItem.Visible)
                pnlTokenItem.Visible = false;
            else
                pnlTokenItem.Visible = true;
        }

        #endregion Rooting for Token Process

        #region Rooting for Center the Message Box into the parent form

        private class CenterWinDialog : IDisposable
        {
            private int mTries = 0;
            private Form mOwner;

            public CenterWinDialog(Form owner)
            {
                mOwner = owner;
                owner.BeginInvoke(new MethodInvoker(findDialog));
            }

            private void findDialog()
            {
                // Enumerate windows to find the message box
                if (mTries < 0) return;
                EnumThreadWndProc callback = new EnumThreadWndProc(checkWindow);
                if (EnumThreadWindows(GetCurrentThreadId(), callback, IntPtr.Zero))
                {
                    if (++mTries < 10) mOwner.BeginInvoke(new MethodInvoker(findDialog));
                }
            }

            private bool checkWindow(IntPtr hWnd, IntPtr lp)
            {
                // Checks if <hWnd> is a dialog
                StringBuilder sb = new StringBuilder(260);
                GetClassName(hWnd, sb, sb.Capacity);
                if (sb.ToString() != "#32770") return true;
                // Got it
                Rectangle frmRect = new Rectangle(mOwner.Location, mOwner.Size);
                RECT dlgRect;
                GetWindowRect(hWnd, out dlgRect);
                MoveWindow(hWnd,
                    frmRect.Left + (frmRect.Width - dlgRect.Right + dlgRect.Left) / 2,
                    frmRect.Top + (frmRect.Height - dlgRect.Bottom + dlgRect.Top) / 2,
                    dlgRect.Right - dlgRect.Left,
                    dlgRect.Bottom - dlgRect.Top, true);
                return false;
            }

            public void Dispose()
            {
                mTries = -1;
            }

            // P/Invoke declarations
            private delegate bool EnumThreadWndProc(IntPtr hWnd, IntPtr lp);

            [DllImport("user32.dll")]
            private static extern bool EnumThreadWindows(int tid, EnumThreadWndProc callback, IntPtr lp);

            [DllImport("kernel32.dll")]
            private static extern int GetCurrentThreadId();

            [DllImport("user32.dll")]
            private static extern int GetClassName(IntPtr hWnd, StringBuilder buffer, int buflen);

            [DllImport("user32.dll")]
            private static extern bool GetWindowRect(IntPtr hWnd, out RECT rc);

            [DllImport("user32.dll")]
            private static extern bool MoveWindow(IntPtr hWnd, int x, int y, int w, int h, bool repaint);

            private struct RECT { public int Left; public int Top; public int Right; public int Bottom; }
        }

        #endregion Rooting for Center the Message Box into the parent form

        private void btnClsDoItems_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do you want to terminate invoice save process!!!", "Save", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                btnClear_Click(null, null);
            }
        }

        #region Rooting for Go Home and Fly a Kite

        private void clearPayments()
        {
            if (ucPayModes1.RecieptItemList != null && ucPayModes1.RecieptItemList.Count > 0)
            {
                var _cash = ucPayModes1.RecieptItemList.Where(x => x.Sard_pay_tp == "CASH").ToList();
                Int32 _payment = ucPayModes1.RecieptItemList.Count;

                if (_payment == 1 && _cash != null && _cash.Count > 0) return;
            }
        }

        #endregion Rooting for Go Home and Fly a Kite

        private void dvDOItems_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.ColumnIndex == 0 && e.RowIndex != -1)
                {
                    //process serial pick

                    if (e.ColumnIndex == 0)
                    {
                        //MessageBox.Show(dvDOItems.Rows[e.RowIndex].Cells["sad_itm_line"].Value.ToString());
                        string _invoiceNo = dvDOItems.Rows[e.RowIndex].Cells["SAD_INV_NO"].Value.ToString();
                        int _itemLineNo = Convert.ToInt32(dvDOItems.Rows[e.RowIndex].Cells["sad_itm_line"].Value.ToString());
                        string _itemCode = dvDOItems.Rows[e.RowIndex].Cells["Sad_itm_cd"].Value.ToString();
                        MasterItem _masterItemDetails = new MasterItem();
                        _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, _itemCode, 1);
                        if (_masterItemDetails.Mi_is_ser1 != -1)
                        {
                            MasterLocation _MasterLocation = CHNLSVC.General.GetAllLocationByLocCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, 0);

                            if (_MasterLocation.Ml_is_serial == false)
                            {
                                MessageBox.Show("This Location is not setup for serial maintain Pls. contact Inventory Department. ", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                        }
                        string _similaritemCode = dvDOItems.Rows[e.RowIndex].Cells["Sad_sim_itm_cd"].Value.ToString();
                        if (!string.IsNullOrEmpty(_similaritemCode))
                        {
                            if (_itemCode != _similaritemCode)
                            {
                                _itemCode = _similaritemCode;
                            }
                        }
                        string _itemstatus = dvDOItems.Rows[e.RowIndex].Cells["Sad_itm_stus"].Value.ToString();
                        decimal _invoiceQty = Convert.ToDecimal(dvDOItems.Rows[e.RowIndex].Cells["Sad_qty"].Value.ToString());
                        decimal _doQty = Convert.ToDecimal(dvDOItems.Rows[e.RowIndex].Cells["Sad_do_qty"].Value.ToString());
                        decimal _scanQty = Convert.ToDecimal(dvDOItems.Rows[e.RowIndex].Cells["PickQty"].Value.ToString());
                        string _priceBook = dvDOItems.Rows[e.RowIndex].Cells["sad_pbook"].Value.ToString();
                        string _priceLevel = dvDOItems.Rows[e.RowIndex].Cells["sad_pb_lvl"].Value.ToString();
                        int pbCount = CHNLSVC.Sales.GetDOPbCount(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                        string _promotioncd = Convert.ToString(dvDOItems.Rows[e.RowIndex].Cells["SAD_PROMO_CD"].Value.ToString());
                        bool _isAgePriceLevel = false;
                        int _ageingDays = -1;

                        MasterItem _item = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itemCode);
                        DataTable _categoryDet = CHNLSVC.General.GetMainCategoryDetail(_item.Mi_cate_1);
                        List<PriceBookLevelRef> _level = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                        if (_level != null)
                            if (_level.Count > 0)
                            {
                                var _lvl = _level.Where(x => x.Sapl_isage).ToList();
                                if (_lvl != null) if (_lvl.Count() > 0)
                                        _isAgePriceLevel = true;
                            }

                        if (_categoryDet != null && _isAgePriceLevel)
                            if (_categoryDet.Rows.Count > 0)
                            {
                                if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                                    _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                                else _ageingDays = 0;
                            }

                        if ((_invoiceQty - _doQty) <= 0) return;
                        if ((_invoiceQty - _doQty) <= _scanQty) { MessageBox.Show("You have picked full quantity"); return; }
                        if (Convert.ToBoolean(dvDOItems.Rows[e.RowIndex].Cells["SAD_ISAPP"].Value) != true || Convert.ToBoolean(dvDOItems.Rows[e.RowIndex].Cells["SAD_ISCOVERNOTE"].Value) != true)
                        {
                            MessageBox.Show("Item is not approved for delivery!", "Permission", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        //DataTable dt = CHNLSVC.Sales.GetPendingInvoiceItemsByItemDT(_invoiceNo, _itemCode);
                        //if (dt.Rows.Count > 0)
                        //{
                        //    if (Convert.ToInt32(dt.Rows[0]["SAD_ISAPP"]) != 1 || Convert.ToInt32(dt.Rows[0]["SAD_ISCOVERNOTE"]) != 1)
                        //    {
                        //        //CanSave = false;
                        //        MessageBox.Show("Not Approved to release item", "Permission", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //        return;
                        //    }
                        //}
                        /*
                         if (_item.Mi_itm_tp == "G" && !string.IsNullOrEmpty(_promotioncd))
                         {
                             MessageBox.Show("This gift voucher referring promotion", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Information);
                             return;
                         }
                         else if (chkChangeSimilarItem.Checked == false)
                         {
                             CommonSearch.CommonOutScan _commonOutScan = new CommonSearch.CommonOutScan();
                             _commonOutScan.PriceBook = _priceBook;
                             _commonOutScan.PriceLevel = _priceLevel;
                             _commonOutScan.ModuleTypeNo = 1;
                             _commonOutScan.ScanDocument = _invoiceNo;
                             _commonOutScan.DocumentType = "DO";
                             _commonOutScan.PopupItemCode = _itemCode;
                             _commonOutScan.ItemStatus = _itemstatus;
                             _commonOutScan.ItemLineNo = _itemLineNo;
                             _commonOutScan.PopupQty = _invoiceQty - _doQty;
                             _commonOutScan.ApprovedQty = _doQty;
                             _commonOutScan.ScanQty = _scanQty;
                             _commonOutScan.IsAgePriceLevel = _isAgePriceLevel;
                             _commonOutScan.DocumentDate = dtpDODate.Value.Date;
                             _commonOutScan.NoOfDays = _ageingDays;
                             if (pbCount <= 0) _commonOutScan.IsCheckStatus = false;
                             else _commonOutScan.IsCheckStatus = true;

                             _commonOutScan.Location = new Point(((this.Width - _commonOutScan.Width) / 2), ((this.Height - _commonOutScan.Height) / 2) + 50);
                             //this.Enabled = false;
                             _commonOutScan.ShowDialog();
                             //this.Enabled = true;
                         }
                         else if (chkChangeSimilarItem.Checked)
                         {
                             DataTable _dtTable;
                             //Add Chamal 29/03/2013
                             decimal _balQty = _invoiceQty - _doQty;
                             if (_isAgePriceLevel == false)
                                 _dtTable = CHNLSVC.Inventory.GetItemInventoryBalanceStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, dvDOItems.Rows[e.RowIndex].Cells["Sad_itm_cd"].Value.ToString(), string.Empty);
                             else
                                 _dtTable = CHNLSVC.Inventory.GetInventoryBalanceByBatch(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, Convert.ToString(dvDOItems.Rows[e.RowIndex].Cells["Sad_itm_cd"].Value), string.Empty);

                             if (_dtTable != null)
                             {
                                 if (_dtTable.Rows.Count > 0)
                                 {
                                     //foreach (DataRow dtRow in _dtTable.Rows)
                                     //{
                                     //    foreach (DataColumn dc in _dtTable.Columns)
                                     //    {
                                     //        var field1 = dtRow[dc].ToString();
                                     //    }
                                     //}
                                     bool _isInventoryBalanceAvailable = false;

                                     if (_isAgePriceLevel == false)
                                         _isInventoryBalanceAvailable = true;
                                     else
                                     {
                                         var _isChkStus = _level.Where(x => x.Sapl_chk_st_tp).Count();
                                         if (_isChkStus > 0)
                                         {
                                             var _isAvailable = _dtTable.AsEnumerable().Where(x => x.Field<string>("inb_itm_stus") == _itemstatus && x.Field<DateTime>("inb_doc_dt").Date <= Convert.ToDateTime(dtpDODate.Value.Date).Date.AddDays(-_ageingDays)).Count();
                                             if (_isAvailable > 0) _isInventoryBalanceAvailable = true;
                                         }
                                         else
                                         {
                                             var _isAvailable = _dtTable.AsEnumerable().Where(x => x.Field<DateTime>("inb_doc_dt").Date <= Convert.ToDateTime(dtpDODate.Value.Date).Date.AddDays(-_ageingDays)).Count();
                                             if (_isAvailable > 0) _isInventoryBalanceAvailable = true;
                                         }
                                     }

                                     if (_isInventoryBalanceAvailable)
                                     {
                                         MessageBox.Show("Cannot select the similar item! Because stock balance are available for invoice item", "Similar Item", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                         return;
                                     }
                                 }
                             }
                         */
                        CommonSearch.CommonOutScan _commonOutScan = new CommonSearch.CommonOutScan();
                        _commonOutScan.PriceBook = _priceBook;
                        _commonOutScan.PriceLevel = _priceLevel;
                        _commonOutScan.ModuleTypeNo = 5;
                        _commonOutScan.ScanDocument = _invoiceNo;
                        _commonOutScan.DocumentType = "InvoiceSerial";
                        _commonOutScan.PopupItemCode = _itemCode;
                        _commonOutScan.ItemStatus = _itemstatus;
                        _commonOutScan.ItemLineNo = _itemLineNo;
                        _commonOutScan.PopupQty = _invoiceQty - _doQty;
                        _commonOutScan.ApprovedQty = _doQty;
                        _commonOutScan.ScanQty = _scanQty;
                        _commonOutScan.IsAgePriceLevel = _isAgePriceLevel;
                        _commonOutScan.DocumentDate = txtDate.Value.Date;
                        _commonOutScan.NoOfDays = _ageingDays;
                        _commonOutScan.SelectedItemList = new List<ReptPickSerials>();
                        _commonOutScan.IsCheckStatus = !IsPriceLevelAllowDoAnyStatus;

                        //if (pbCount <= 0) _commonOutScan.IsCheckStatus = false;
                        //else _commonOutScan.IsCheckStatus = true;

                        _commonOutScan.Location = new Point(((this.Width - _commonOutScan.Width) / 2), ((this.Height - _commonOutScan.Height) / 2) + 50);
                        //this.Enabled = false;
                        _commonOutScan.ShowDialog();

                        foreach (ReptPickSerials ser in _commonOutScan.SelectedItemList)
                        {
                            List<ReptPickSerials> dup = (from _res in ScanSerialList
                                                         where _res.Tus_itm_cd == ser.Tus_itm_cd && _res.Tus_ser_1 == ser.Tus_ser_1
                                                           && _res.Tus_ser_id == ser.Tus_ser_id
                                                         select _res).ToList<ReptPickSerials>();
                            if (dup != null && dup.Count > 0)
                            {
                                MessageBox.Show("Selected Serial Already in the list", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            if (!IsPriceLevelAllowDoAnyStatus && _itemstatus != ser.Tus_itm_stus)
                            {
                                if (ser.Tus_itm_stus == "CONS")
                                {
                                    (from res in _invoiceItemList
                                     where res.Sad_itm_cd == _itemCode && res.Sad_itm_line == _itemLineNo //&& res.Sad_itm_stus == _itemstatus
                                     select res).ToList<InvoiceItem>().ForEach(x => x.Sad_itm_stus = ser.Tus_itm_stus);
                                }
                            }
                            ScanSerialList.Add(ser);
                            InvoiceSerial _invser = new InvoiceSerial(); _invser.Sap_del_loc = BaseCls.GlbUserDefLoca;
                            _invser.Sap_itm_cd = ser.Tus_itm_cd; _invser.Sap_itm_line = _itemLineNo;
                            _invser.Sap_remarks = string.Empty; _invser.Sap_seq_no = Convert.ToInt32(SSPriceBookSequance);
                            _invser.Sap_ser_1 = ser.Tus_ser_1; _invser.Sap_ser_line = _isCombineAdding ? Convert.ToInt32(SSCombineLine) : 0;
                            InvoiceSerialList.Add(_invser);
                        }
                        //ScanSerialList.AddRange(_commonOutScan.SelectedItemList);
                        //update scan qty
                        (from res in _invoiceItemList
                         where res.Sad_itm_cd == _itemCode && res.Sad_itm_line == _itemLineNo //&& res.Sad_itm_stus == _itemstatus
                         select res).ToList<InvoiceItem>().ForEach(x => x.Sad_srn_qty = _commonOutScan.ScanQty);

                        dvDOSerials.AutoGenerateColumns = false;
                        BindingSource _source = new BindingSource();
                        _source.DataSource = ScanSerialList;
                        dvDOSerials.DataSource = _source;

                        dvDOItems.AutoGenerateColumns = false;
                        BindingSource _source1 = new BindingSource();
                        _source1.DataSource = _invoiceItemList;
                        dvDOItems.DataSource = _source1;
                        int line = _itemLineNo;
                        line++;
                        //change selected item
                        List<InvoiceItem> _tem = (from _res in _invoiceItemList
                                                  where _res.Sad_itm_line == line
                                                  select _res).ToList<InvoiceItem>();
                        if (_tem != null && _tem.Count > 0)
                        {
                            dvDOItems.Rows[line - 1].Selected = true;
                        }

                        gvPopSerial.DataSource = ScanSerialList;
                    }

                    //LoadInvoiceItems(_invoiceNo, _profitCenter);
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void btnDoCancel_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do you want to terminate invoice save process!!!", "Save", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                btnClear_Click(null, null);
            }
        }

        private void btnDoConfirm_Click(object sender, EventArgs e)
        {
            btnDoConfirm.Enabled = false;
            pnlDoNowItems.Visible = false;
            pnlMain.Enabled = true;
            SaveWithoutSerial();
            btnDoConfirm.Enabled = true;
        }

        private void SaveWithoutSerial()
        {
            button1.Focus();
            _serialMatch = true;
            _processMinusBalance = false;
            try
            {
                if (CheckServerDateTime() == false) return;

                if (chkDeliverLater.Checked)
                {
                    if (CHNLSVC.Sales.IsForwardSaleExceed(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("No of forward sales are restricted. Please contact inventory dept.", "Max. Forward Sale", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        return;
                    }
                }
                if (cmbInvType.Text.Trim() == "CRED" && txtCustomer.Text.Trim() == "CASH")
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not select customer as CASH, because your invoice type is " + cmbInvType.Text, "Credit Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtCustomer.Clear();
                    txtCustomer.Focus();
                    return;
                }
                if (chkManualRef.Checked && string.IsNullOrEmpty(txtManualRefNo.Text))
                {
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the manual no", "Manual No", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (cmbInvType.Text.Trim() == "CRED")
                    if (string.IsNullOrEmpty(txtPoNo.Text))
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the PO number", "Purchase Order Number", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtPoNo.Clear();
                        txtPoNo.Focus();
                        return;
                    }
                    else if (txtPoNo.Text.Trim() == "N/A" || txtPoNo.Text.Trim() == "NA" || txtPoNo.Text.Trim() == ".")
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the valid PO number", "Purchase Order Number", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtPoNo.Clear();
                        txtPoNo.Focus();
                        return;
                    }
                bool IsBuyBackItemAvailable = false;
                var _bbQty = _invoiceItemList.Where(x => x.Sad_merge_itm == "3" && x.Sad_unit_rt != 0).Sum(x => x.Sad_qty);
                if (_bbQty > 0)
                {
                    if (BuyBackItemList == null || BuyBackItemList.Count <= 0)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the buy back item", "Buy Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        pnlBuyBack.Visible = true;
                        IsBuyBackItemAvailable = false;
                        return;
                    }
                    else
                    {
                        var _purBB = BuyBackItemList.Sum(x => x.Tus_qty);
                        if (_purBB != _bbQty)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please select " + _bbQty.ToString() + " buy back item(s)", "Buy Back Item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                            pnlBuyBack.Visible = true;
                            IsBuyBackItemAvailable = false;
                            return;
                        }
                    }
                }
                else if (_bbQty <= 0 && BuyBackItemList != null)
                {
                    if (BuyBackItemList.Count > 0)
                    {
                        tabControl1.SelectedTab = tabPage4;
                        if (MessageBox.Show("There is no buy back promotion selected, but buy back return item already available. Do you need to remove selected return buy-back item and continue?", "Return Item - Buy Back", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            BuyBackItemList = null;
                        }
                        else
                        {
                            tabControl1.SelectedTab = tabPage4;
                            IsBuyBackItemAvailable = false;
                            return;
                        }

                        IsBuyBackItemAvailable = true;
                    }
                    else IsBuyBackItemAvailable = false;
                }
                else if (_bbQty > 0 && BuyBackItemList != null) if (BuyBackItemList.Count > 0) IsBuyBackItemAvailable = true;
                if (chkGiftVoucher.Checked)
                {
                    var _isExistGv = _invoiceItemList.Where(x => IsGiftVoucher(x.Sad_itm_tp)).Count();
                    if (_isExistGv <= 0)
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("You can't process without gift vouchers", "Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } return; }
                    string _notMapped = string.Empty;
                    var _gvitm = (from DataGridViewRow _row in gvGiftVoucher.Rows where _row.Index != -1 select _row).ToList();
                    Parallel.ForEach(_gvitm, _row => { var _isPromotion = _invoiceItemList.Where(x => x.Sad_itm_line == Convert.ToInt32(_row.Cells["gf_baseItemLine"].Value) && !string.IsNullOrEmpty(x.Sad_promo_cd)).Select(x => x.Sad_promo_cd).Count(); if (_isPromotion <= 0) { string _mappedItem = Convert.ToString(_row.Cells[7].EditedFormattedValue); string _gvNo = Convert.ToString(_row.Cells["gf_serial1"].EditedFormattedValue); if (string.IsNullOrEmpty(_mappedItem)) if (string.IsNullOrEmpty(_notMapped)) _notMapped = _gvNo; else _notMapped += ", " + _gvNo; } });
                    if (!string.IsNullOrEmpty(_notMapped))
                    { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Please attach the issuing item to the gift voucher for the following gift voucher(s). " + _notMapped + ".", "Attach Gift Voucher", MessageBoxButtons.OK, MessageBoxIcon.Information); } tabControl1.SelectedTab = tabPage3; return; }
                }
                if (pnlMain.Enabled == false) return;
                if (IsBackDateOk(chkDeliverLater.Checked, IsBuyBackItemAvailable) == false) return;
                bool _isHoldInvoiceProcess = false;
                InvoiceHeader _hdr = new InvoiceHeader();
                if (!string.IsNullOrEmpty(txtInvoiceNo.Text.Trim()))
                {
                    _hdr = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtInvoiceNo.Text.Trim());
                    if (_hdr != null)
                        if (_hdr.Sah_stus != "H")
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("You can not edit already saved invoice", "Invoice Re-call", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                }
                if (_hdr != null && _hdr.Sah_stus == "H") _isHoldInvoiceProcess = true;
                if (_isHoldInvoiceProcess && chkDeliverLater.Checked == false)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("You can not use 'Deliver Now!' option for hold invoice", "Invoice Hold", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (string.IsNullOrEmpty(cmbInvType.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the invoice type", "Invoice Type", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbInvType.Focus();
                    return;
                }

                //if (string.IsNullOrEmpty(txtCustomer.Text))
                if (string.IsNullOrEmpty(txtCustomer.Text) && IsNewCustomer == false)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    txtCustomer.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(cmbBook.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price book", "Price Book", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbBook.Focus();
                    return;
                }
                if (string.IsNullOrEmpty(cmbLevel.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the price level", "Price Level", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    cmbLevel.Focus();
                    return;
                }
                if (_invoiceItemList.Count <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the items for invoice", "Invoice item", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                bool _isExeMust = false;
                if (MasterChannel != null && MasterChannel.Rows.Count > 0)
                    _isExeMust = Convert.ToBoolean(MasterChannel.Rows[0].Field<Int16>("msc_needsalexe"));

                //Oracle SQL Fine Tuning
                if (string.IsNullOrEmpty(txtExecutive.Text))
                {
                    if (_isExeMust)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the executive code", "Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtExecutive.Focus();
                        return;
                    }
                    else txtExecutive.Text = "N/A";
                }
                if (!string.IsNullOrEmpty(txtExecutive.Text) && _isExeMust)
                {
                    if (txtExecutive.Text.Trim().ToUpper() == "N/A" || txtExecutive.Text.Trim().ToUpper() == "NA")
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Sales executive is mandatory to this channel", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtExecutive.Clear();
                        txtExecutive.Focus();
                        cmbExecutive.Focus();
                        return;
                    }
                }
                if (string.IsNullOrEmpty(lblCurrency.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please select the currency code", "Currency", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    lblCurrency.Focus();
                    return;
                }
                if (_MasterProfitCenter.Mpc_check_pay && _recieptItem.Count <= 0)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("This profit center is not allow for raise invoice without payment. Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (string.IsNullOrEmpty(txtCusName.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer name", "Customer Name", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                if (string.IsNullOrEmpty(txtAddress1.Text) && string.IsNullOrEmpty(txtAddress2.Text))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the customer address", "Customer Address", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }

                #region Check for payment if the invoice type is cash

                if (cmbInvType.Text == "CS")
                    if (_recieptItem == null)
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                        return;
                    }

                if (cmbInvType.Text == "CS")
                    if (_recieptItem != null)
                        if (_recieptItem.Count <= 0)
                        {
                            this.Cursor = Cursors.Default;
                            using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                            return;
                        }
                if (cmbInvType.Text == "CS")
                    if (_recieptItem != null)
                        if (_recieptItem.Count >= 0)
                        {
                            decimal _realPay = 0;
                            if (lblSVatStatus.Text == "Available")
                                _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                            else
                                _realPay = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());

                            decimal _totlaPay = _recieptItem.Sum(x => x.Sard_settle_amt);
                            //if (_totlaPay != Convert.ToDecimal(lblGrndTotalAmount.Text))
                            if (_totlaPay != _realPay)
                            {
                                this.Cursor = Cursors.Default;
                                using (new CenterWinDialog(this)) { MessageBox.Show("Please enter the payment detail", "Payments", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); }
                                return;
                            }
                        }

                #endregion Check for payment if the invoice type is cash

                #region Check for availability of the invoice prefix

                string _invoicePrefix = CHNLSVC.Sales.GetInvoicePrefix(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text);

                if (string.IsNullOrEmpty(_invoicePrefix))
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show("Selected invoice no does not having a invoice prefix to generate invoice no. Please contact accounts department.", "Invoice Prefix", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    return;
                }
                Int32 _count = 1;
                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                        _recieptItem.ForEach(x => x.Sard_line_no = _count++);
                _count = 1;
                List<InvoiceItem> _linedInvoiceItem = new List<InvoiceItem>();
                foreach (InvoiceItem _item in _invoiceItemList)
                {
                    Int32 _currentLine = _item.Sad_itm_line;
                    if (ScanSerialList != null)
                        if (ScanSerialList.Count > 0)
                            ScanSerialList.Where(x => x.Tus_base_itm_line == _currentLine).ToList().ForEach(x => x.Tus_base_itm_line = _count);
                    if (InvoiceSerialList != null)
                        if (InvoiceSerialList.Count > 0)
                            InvoiceSerialList.Where(x => x.Sap_itm_line == _currentLine).ToList().ForEach(x => x.Sap_itm_line = _count);
                    _item.Sad_itm_line = _count;
                    _linedInvoiceItem.Add(_item);
                    _count += 1;
                }

                _linedInvoiceItem.ForEach(x => x.Sad_isapp = true);
                _linedInvoiceItem.ForEach(x => x.Sad_iscovernote = true);
                _invoiceItemList = new List<InvoiceItem>();
                _invoiceItemList = _linedInvoiceItem;

                if (chkDeliverLater.Checked == false && IsReferancedDocDateAppropriate(ScanSerialList, Convert.ToDateTime(txtDate.Text).Date) == false)
                    return;

                //commented by akila 2018/03/19
                //if (chkDeliverLater.Checked == false)
                //{
                //    string _itmList = string.Empty;
                //    bool _isqtyNserialOk = IsInvoiceItemNSerialListTally(out _itmList);

                //    if (_isqtyNserialOk == false)
                //    {
                //        if (chkDeliverNow.Checked)
                //        {
                //            _processMinusBalance = true;
                //            if (MessageBox.Show("Below items qty and serial qty do not match\n" + _itmList + "\nDo you want to proceed?", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.No)
                //            {
                //                pnlDoNowItems.Visible = true;
                //                pnlMain.Enabled = false;
                //                return;
                //            }
                //        }
                //    }
                //}

                //added by akila 2018/03/19
                if (chkDeliverLater.Checked == false && chkDeliverNow.Checked)
                {
                    string _nottallylist = string.Empty;
                    bool _isTallywithinventory = IsInventoryBalanceNInvoiceItemTally(out _nottallylist);
                    if (_isTallywithinventory == false)
                    {
                        _processMinusBalance = true;
                    }

                    if (CheckItemAndSerials())
                    {
                        _processMinusBalance = true;
                    }

                    string _itmList = string.Empty;
                    bool _isqtyNserialOk = IsInvoiceItemNSerialListTally(out _itmList);
                    if (_isqtyNserialOk == false)
                    {
                        _processMinusBalance = true;
                        if (MessageBox.Show("Below items qty and serial qty do not match\n" + _itmList + "\nDo you want to proceed?", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == DialogResult.No)
                        {
                            pnlDoNowItems.Visible = true;
                            pnlMain.Enabled = false;
                            return;
                        }
                    }
                    else { _processMinusBalance = false; }
                }
                else { _processMinusBalance = false; }

                if (chkDeliverLater.Checked == false && chkDeliverNow.Checked)
                {
                    //add by darshana on 12-Mar-2014 - To Gold operation totally operate as consignment base and no need to generate grn.
                    MasterCompany _masterComp = new MasterCompany();
                    _masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);

                    if (_masterComp.Mc_anal13 == 0)
                    {
                        #region Check Consignment Item has Quotation(s) :: Chamal 18-Sep-2013

                        string documntNo = string.Empty;
                        if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && ScanSerialList != null && ScanSerialList.Count > 0)
                            if (CHNLSVC.Inventory.Check_Cons_Item_has_Quo(BaseCls.GlbUserComCode, txtDate.Value.Date, ScanSerialList, out documntNo) < 0)
                            {
                                Cursor.Current = Cursors.Default;
                                MessageBox.Show(documntNo, "Quotation not define", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }

                        #endregion Check Consignment Item has Quotation(s) :: Chamal 18-Sep-2013
                    }

                    //check invoice item and serial count match
                    decimal itemCount = _invoiceItemList.Sum(x => x.Sad_qty);
                    decimal serialCount = ScanSerialList.Count;
                    if (serialCount > itemCount)
                    {
                        MessageBox.Show("Serial Count exceeds item count\nSerial - " + serialCount + " " + " Item - " + itemCount + "\nPlease select Serials again", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        ScanSerialList = new List<ReptPickSerials>();

                        dvDOSerials.AutoGenerateColumns = false;
                        BindingSource _source = new BindingSource();
                        _source.DataSource = ScanSerialList;
                        dvDOSerials.DataSource = _source;
                        _invoiceItemList.ForEach(x => x.Sad_srn_qty = 0);
                        pnlDoNowItems.Visible = true;
                        pnlMain.Enabled = false;
                        return;
                    }
                }

                //commented by akila 2018/03/19
                //if (chkDeliverLater.Checked == false)
                //{
                //    string _nottallylist = string.Empty;
                //    bool _isTallywithinventory = IsInventoryBalanceNInvoiceItemTally(out _nottallylist);

                //    if (_isTallywithinventory == false)
                //    {
                //        if (chkDeliverNow.Checked)
                //        {
                //            _processMinusBalance = true;
                //        }
                //    }
                //}
                //if (chkDeliverNow.Checked)
                //{
                //    _processMinusBalance = CheckItemAndSerials();
                //}

                if (ScanSerialList == null || ScanSerialList.Count <= 0)
                {
                    MessageBox.Show("Please select atleast one serial before save or select deliver later option", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                #endregion Check for availability of the invoice prefix

                MasterBusinessEntity _entity = new MasterBusinessEntity();
                InvoiceHeader _invheader = new InvoiceHeader();
                RecieptHeader _recHeader = new RecieptHeader();
                InventoryHeader invHdr = new InventoryHeader();
                InventoryHeader _buybackheader = new InventoryHeader();
                MasterAutoNumber _buybackAuto = new MasterAutoNumber();

                #region Showroom manager having a company, and its to take the company to GRN in the DO stage

                bool _isCustomerHasCompany = false;
                string _customerCompany = string.Empty;
                string _customerLocation = string.Empty;

                _entity = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                if (_entity != null)
                    if (_entity.Mbe_cd != null)
                        if (!string.IsNullOrEmpty(_entity.Mbe_cust_com) && !string.IsNullOrEmpty(_entity.Mbe_cust_loc))
                        { _isCustomerHasCompany = true; _customerCompany = _entity.Mbe_cust_com; _customerLocation = _entity.Mbe_cust_loc; }

                #endregion Showroom manager having a company, and its to take the company to GRN in the DO stage

                #region Inventory Header Value Assign

                invHdr.Ith_loc = BaseCls.GlbUserDefLoca;
                invHdr.Ith_com = BaseCls.GlbUserComCode;
                invHdr.Ith_doc_tp = "DO";
                invHdr.Ith_doc_date = Convert.ToDateTime(txtDate.Text).Date;
                invHdr.Ith_doc_year = Convert.ToDateTime(txtDate.Text).Year;
                //invHdr.Ith_cate_tp = "DPS";
                invHdr.Ith_cate_tp = cmbInvType.Text.Trim();
                invHdr.Ith_sub_tp = "DPS";
                invHdr.Ith_bus_entity = txtCustomer.Text.Trim();
                invHdr.Ith_del_add1 = txtDelAddress1.Text.Trim();
                invHdr.Ith_del_add1 = txtDelAddress2.Text.Trim();
                invHdr.Ith_is_manual = false;
                invHdr.Ith_stus = "A";
                invHdr.Ith_cre_by = BaseCls.GlbUserID;
                invHdr.Ith_mod_by = BaseCls.GlbUserID;
                invHdr.Ith_direct = false;
                invHdr.Ith_session_id = BaseCls.GlbUserSessionID;
                invHdr.Ith_manual_ref = txtManualRefNo.Text;
                invHdr.Ith_vehi_no = string.Empty;
                invHdr.Ith_remarks = string.Empty;
                invHdr.Ith_entry_tp = "DWS";
                MasterAutoNumber _masterAutoDo = new MasterAutoNumber();
                _masterAutoDo.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                _masterAutoDo.Aut_cate_tp = "LOC";
                _masterAutoDo.Aut_direction = 0;
                _masterAutoDo.Aut_moduleid = "DO";
                _masterAutoDo.Aut_start_char = "DO";
                _masterAutoDo.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                _invheader.Sah_com = BaseCls.GlbUserComCode;
                _invheader.Sah_cre_by = BaseCls.GlbUserID;
                _invheader.Sah_cre_when = DateTime.Now;
                _invheader.Sah_currency = "LKR";//Currency.Text;
                _invheader.Sah_cus_add1 = txtAddress1.Text.Trim();
                _invheader.Sah_cus_add2 = txtAddress2.Text.Trim();

                //akila 2017/10/12
                if ((string.IsNullOrEmpty(txtCustomer.Text)) && IsNewCustomer)
                {
                    _invheader.Sah_cus_cd = "CASH"; //new customer
                }
                else
                {
                    _invheader.Sah_cus_cd = txtCustomer.Text.Trim();
                }

                //_invheader.Sah_cus_cd = txtCustomer.Text.Trim();
                _invheader.Sah_cus_name = txtCusName.Text.Trim();
                _invheader.Sah_d_cust_add1 = txtDelAddress1.Text.Trim();
                _invheader.Sah_d_cust_add2 = txtDelAddress2.Text.Trim();
                _invheader.Sah_d_cust_cd = txtDelCustomer.Text.Trim();
                _invheader.Sah_d_cust_name = txtDelName.Text.Trim();
                _invheader.Sah_direct = true;
                _invheader.Sah_dt = Convert.ToDateTime(txtDate.Text);
                _invheader.Sah_epf_rt = 0;
                _invheader.Sah_esd_rt = 0;
                _invheader.Sah_ex_rt = 1;
                _invheader.Sah_inv_no = "na";
                _invheader.Sah_inv_sub_tp = "SA";
                _invheader.Sah_inv_tp = cmbInvType.Text.Trim();
                _invheader.Sah_is_acc_upload = false;
                _invheader.Sah_man_ref = txtManualRefNo.Text;
                _invheader.Sah_manual = chkManualRef.Checked ? true : false;
                _invheader.Sah_mod_by = BaseCls.GlbUserID;
                _invheader.Sah_mod_when = DateTime.Now;
                _invheader.Sah_pc = BaseCls.GlbUserDefProf;
                _invheader.Sah_pdi_req = 0;
                _invheader.Sah_ref_doc = txtDocRefNo.Text;
                _invheader.Sah_remarks = "";
                _invheader.Sah_sales_chn_cd = "";
                _invheader.Sah_sales_chn_man = "";
                _invheader.Sah_sales_ex_cd = txtExecutive.Text.Trim();
                _invheader.Sah_sales_region_cd = "";
                _invheader.Sah_sales_region_man = "";
                _invheader.Sah_sales_sbu_cd = "";
                _invheader.Sah_sales_sbu_man = "";
                _invheader.Sah_sales_str_cd = "";
                _invheader.Sah_sales_zone_cd = "";
                _invheader.Sah_sales_zone_man = "";
                _invheader.Sah_seq_no = 1;
                _invheader.Sah_session_id = BaseCls.GlbUserSessionID;
                _invheader.Sah_structure_seq = txtQuotation.Text.Trim();
                _invheader.Sah_stus = "A";
                if ((chkDeliverNow.Checked || !chkDeliverLater.Checked) && (!_processMinusBalance)) _invheader.Sah_stus = "D";
                _invheader.Sah_town_cd = "";
                _invheader.Sah_tp = "INV";
                _invheader.Sah_wht_rt = 0;
                _invheader.Sah_direct = true;
                _invheader.Sah_tax_inv = chkTaxPayable.Checked ? true : false;
                _invheader.Sah_anal_11 = 0;
                if (_isBOnCredNote == true)
                {
                    _invheader.Sah_sah_date_new = _dtReqPara.Date;
                }
                else { _invheader.Sah_sah_date_new = _invheader.Sah_dt; }
                //if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && !_processMinusBalance) _invheader.Sah_anal_11 = 1;
                //if (chkDeliverLater.Checked)
                //{
                //    _invheader.Sah_anal_11 = 0;
                //}
                //else if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && !_processMinusBalance) {
                //    _invheader.Sah_anal_11 = 1;
                //}
                //else if ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && _processMinusBalance) {
                //    _invheader.Sah_anal_11 = 0;
                //}
                //else if (chkDeliverLater.Checked == false && chkDeliverNow.Checked == false)
                //{
                //    _invheader.Sah_anal_11 = 1;
                //}
                _invheader.Sah_del_loc = ((chkDeliverLater.Checked == false || chkDeliverNow.Checked) && !_processMinusBalance) ? BaseCls.GlbUserDefLoca : !string.IsNullOrEmpty(txtDelLocation.Text) ? txtDelLocation.Text : string.Empty;
                _invheader.Sah_grn_com = _customerCompany;
                _invheader.Sah_grn_loc = _customerLocation;
                _invheader.Sah_is_grn = _isCustomerHasCompany;

                _invheader.Sah_grup_cd = string.IsNullOrEmpty(txtGroup.Text.Trim()) ? string.Empty : txtGroup.Text.Trim();
                _invheader.Sah_is_svat = lblSVatStatus.Text == "Available" ? true : false;
                _invheader.Sah_tax_exempted = lblVatExemptStatus.Text == "Available" ? true : false;
                _invheader.Sah_anal_4 = txtPoNo.Text.Trim();
                _invheader.Sah_anal_6 = txtLoyalty.Text.Trim();
                _invheader.Sah_man_cd = _MasterProfitCenter.Mpc_man;
                _invheader.Sah_is_dayend = 0;
                _invheader.Sah_remarks = txtRemarks.Text.Trim();
                _invheader.Sah_anal_1 = txtPromotor.Text;
                //if (string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue))) _invheader.Sah_anal_1 = string.Empty;
                //else _invheader.Sah_anal_1 = Convert.ToString(cmbTechnician.SelectedValue);
                if (_isHoldInvoiceProcess) _invheader.Sah_seq_no = Convert.ToInt32(txtInvoiceNo.Text.Trim());

                if (chkBasedOnAdvanceRecept.Checked)
                {
                    _invheader.Sah_anal_2 = "ADVR";
                }

                _recHeader.Sar_acc_no = "";
                _recHeader.Sar_act = true;
                _recHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                _recHeader.Sar_comm_amt = 0;
                _recHeader.Sar_create_by = BaseCls.GlbUserID;
                _recHeader.Sar_create_when = DateTime.Now;
                _recHeader.Sar_currency_cd = "LKR";//txtCurrency.Text;
                _recHeader.Sar_debtor_add_1 = txtAddress1.Text;
                _recHeader.Sar_debtor_add_2 = txtAddress2.Text;
                _recHeader.Sar_debtor_cd = txtCustomer.Text;
                _recHeader.Sar_debtor_name = txtCusName.Text;
                _recHeader.Sar_direct = true;
                _recHeader.Sar_direct_deposit_bank_cd = "";
                _recHeader.Sar_direct_deposit_branch = "";
                _recHeader.Sar_epf_rate = 0;
                _recHeader.Sar_esd_rate = 0;
                _recHeader.Sar_is_mgr_iss = false;
                _recHeader.Sar_is_oth_shop = false;
                _recHeader.Sar_is_used = false;
                _recHeader.Sar_manual_ref_no = txtManualRefNo.Text;
                _recHeader.Sar_mob_no = txtMobile.Text;
                _recHeader.Sar_mod_by = BaseCls.GlbUserID;
                _recHeader.Sar_mod_when = DateTime.Now;
                _recHeader.Sar_nic_no = txtNIC.Text;
                _recHeader.Sar_oth_sr = "";
                _recHeader.Sar_prefix = "";
                _recHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                _recHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Text);
                _recHeader.Sar_receipt_no = "na";
                _recHeader.Sar_receipt_type = cmbInvType.Text.Trim() == "CRED" ? "DEBT" : "DIR";
                _recHeader.Sar_ref_doc = "";
                _recHeader.Sar_remarks = string.Empty;// txtPayRemarks.Text;
                _recHeader.Sar_seq_no = 1;
                _recHeader.Sar_ser_job_no = "";
                _recHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                _recHeader.Sar_tel_no = txtMobile.Text;
                _recHeader.Sar_tot_settle_amt = 0;
                _recHeader.Sar_uploaded_to_finance = false;
                _recHeader.Sar_used_amt = 0;
                _recHeader.Sar_wht_rate = 0;
                MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                _invoiceAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                _invoiceAuto.Aut_cate_tp = "PRO";
                _invoiceAuto.Aut_direction = 1;
                _invoiceAuto.Aut_modify_dt = null;
                _invoiceAuto.Aut_moduleid = cmbInvType.Text;
                _invoiceAuto.Aut_number = 0;
                _invoiceAuto.Aut_start_char = _invoicePrefix;
                _invoiceAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                MasterAutoNumber _receiptAuto = null;
                if (_recieptItem != null)
                    if (_recieptItem.Count > 0)
                    {
                        _receiptAuto = new MasterAutoNumber();
                        _receiptAuto.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        _receiptAuto.Aut_cate_tp = "PRO";
                        _receiptAuto.Aut_direction = 1;
                        _receiptAuto.Aut_modify_dt = null;
                        _receiptAuto.Aut_moduleid = "RECEIPT";
                        _receiptAuto.Aut_number = 0;
                        _receiptAuto.Aut_start_char = "DIR";
                        _receiptAuto.Aut_year = Convert.ToDateTime(txtDate.Text).Year;
                    }
                DataTable dt_location = CHNLSVC.Inventory.Get_location_by_code(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                foreach (DataRow r in dt_location.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    _buybackheader.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        _buybackheader.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        _buybackheader.Ith_channel = string.Empty;
                    }
                }
                _buybackheader.Ith_acc_no = "BB_INVC";
                _buybackheader.Ith_anal_1 = "";
                _buybackheader.Ith_anal_2 = "";
                _buybackheader.Ith_anal_3 = "";
                _buybackheader.Ith_anal_4 = "";
                _buybackheader.Ith_anal_5 = "";
                _buybackheader.Ith_anal_6 = 0;
                _buybackheader.Ith_anal_7 = 0;
                _buybackheader.Ith_anal_8 = DateTime.MinValue;
                _buybackheader.Ith_anal_9 = DateTime.MinValue;
                _buybackheader.Ith_anal_10 = false;
                _buybackheader.Ith_anal_11 = false;
                _buybackheader.Ith_anal_12 = false;
                _buybackheader.Ith_bus_entity = "";
                _buybackheader.Ith_cate_tp = "NOR";
                _buybackheader.Ith_com = BaseCls.GlbUserComCode;
                _buybackheader.Ith_com_docno = "";
                _buybackheader.Ith_cre_by = BaseCls.GlbUserID;
                _buybackheader.Ith_cre_when = DateTime.Now;
                _buybackheader.Ith_del_add1 = "";
                _buybackheader.Ith_del_add2 = "";
                _buybackheader.Ith_del_code = "";
                _buybackheader.Ith_del_party = "";
                _buybackheader.Ith_del_town = "";
                _buybackheader.Ith_direct = true;
                _buybackheader.Ith_doc_date = txtDate.Value.Date;
                _buybackheader.Ith_doc_no = string.Empty;
                _buybackheader.Ith_doc_tp = "ADJ";
                _buybackheader.Ith_doc_year = txtDate.Value.Date.Year;
                _buybackheader.Ith_entry_no = string.Empty;
                _buybackheader.Ith_entry_tp = "NOR";
                _buybackheader.Ith_git_close = true;
                _buybackheader.Ith_git_close_date = DateTime.MinValue;
                _buybackheader.Ith_git_close_doc = string.Empty;
                _buybackheader.Ith_isprinted = false;
                _buybackheader.Ith_is_manual = false;
                _buybackheader.Ith_job_no = string.Empty;
                _buybackheader.Ith_loading_point = string.Empty;
                _buybackheader.Ith_loading_user = string.Empty;
                _buybackheader.Ith_loc = BaseCls.GlbUserDefLoca;
                _buybackheader.Ith_manual_ref = string.Empty;
                _buybackheader.Ith_mod_by = BaseCls.GlbUserID;
                _buybackheader.Ith_mod_when = DateTime.Now;
                _buybackheader.Ith_noofcopies = 0;
                _buybackheader.Ith_oth_loc = string.Empty;
                _buybackheader.Ith_oth_docno = "N/A";
                _buybackheader.Ith_remarks = string.Empty;
                _buybackheader.Ith_session_id = BaseCls.GlbUserSessionID;
                _buybackheader.Ith_stus = "A";
                _buybackheader.Ith_sub_tp = "NOR";
                _buybackheader.Ith_vehi_no = string.Empty;
                _buybackAuto.Aut_cate_cd = BaseCls.GlbUserDefLoca;
                _buybackAuto.Aut_cate_tp = "LOC";
                _buybackAuto.Aut_direction = null;
                _buybackAuto.Aut_modify_dt = null;
                _buybackAuto.Aut_moduleid = "ADJ";
                _buybackAuto.Aut_number = 5;//what is Aut_number
                _buybackAuto.Aut_start_char = "ADJ";
                _buybackAuto.Aut_year = null;
                _count = 1;
                string _bin = CHNLSVC.Inventory.GetDefaultBinCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca);
                if (BuyBackItemList != null) if (BuyBackItemList.Count > 0)
                    {
                        BuyBackItemList.ForEach(X => X.Tus_bin = _bin);
                        BuyBackItemList.ForEach(X => X.Tus_itm_line = _count++);
                        BuyBackItemList.ForEach(X => X.Tus_serial_id = "N/A");
                        BuyBackItemList.ForEach(x => x.Tus_exist_grndt = Convert.ToDateTime(txtDate.Value).Date);
                        BuyBackItemList.ForEach(x => x.Tus_orig_grndt = Convert.ToDateTime(txtDate.Value).Date);
                    }
                if (txtCustomer.Text.Trim() != "CASH")
                {
                    MasterBusinessEntity _en = CHNLSVC.Sales.GetCustomerProfile(txtCustomer.Text.Trim(), string.Empty, string.Empty, string.Empty, string.Empty);
                    if (_en != null)
                        if (string.IsNullOrEmpty(_en.Mbe_com))
                        {
                            _invheader.Sah_tax_exempted = _en.Mbe_tax_ex;
                            _invheader.Sah_is_svat = _en.Mbe_is_svat;
                        }
                }

                //Add by akila 2017/11/02
                if (string.IsNullOrEmpty(txtCustomer.Text.Trim()) && IsNewCustomer)
                {
                    _businessEntity = NewCustomer();
                }
                else
                {
                    CollectBusinessEntity();
                }
                //CollectBusinessEntity();
                string _invoiceNo = "";
                string _receiptNo = "";
                string _deliveryOrderNo = "";
                _invoiceItemListWithDiscount = new List<InvoiceItem>();
                List<InvoiceItem> _discounted = null;
                bool _isDifferent = false;
                decimal _tobepay = 0;
                decimal _tobepay1 = 0;
                bool _canSaveWithoutDiscount = false;
                try
                {
                    // Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                    // CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    //_invoiceItemListWithDiscount = _discounted;
                    Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                    if (_discountSequence == 0)
                    {
                        foreach (InvoiceItem itm in _invoiceItemList)
                        {
                            bool isMulti;
                            int seq;
                            List<InvoiceItem> _item = new List<InvoiceItem>();
                            _item.Add(itm);
                            DataTable _discount = CHNLSVC.Sales.GetPromotionalDiscountSequences(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _item, _recieptItem, _invheader, out isMulti, out seq);
                            //show pop up
                            if (_discount == null)
                            {
                                _discountSequence = seq;
                                if (isMulti)
                                {
                                    _isDifferent = false;
                                    _discountSequence = -9999;
                                }
                                else
                                {
                                    if (_discountSequence != -9999 && _discountSequence != 0)
                                    {
                                        //if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                        //  {
                                        _isDifferent = true;
                                        _discountSequence = seq;
                                        CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _item, out _discounted, out _isDifferent, out _tobepay1, _invheader);
                                        _invoiceItemListWithDiscount.AddRange(_discounted);
                                        CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(seq);
                                        if (_discountHdr != null)
                                        {
                                            _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                        }
                                        // }
                                    }
                                    else
                                    {
                                        if (!ucPayModes1.IsDiscounted)
                                        {
                                            _isDifferent = false;
                                            _discountSequence = -9999;
                                            // if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                                            //  {
                                            //   _discountSequence = 0;
                                            // return;
                                            //  }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                //  {
                                //show popup
                                pnlDiscount.Visible = true;
                                pnlMain.Enabled = false;
                                gvDiscount.DataSource = _discount;
                                return;
                                //   }
                                //else
                                //{
                                //    _isDifferent = false;
                                //    _discountSequence = -9999;
                                //}
                            }
                        }
                    }
                    else if (_discountSequence != -9999)
                    {
                        //Int32 _timeno = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                        CHNLSVC.Sales.GetGeneralPromotionProcess(_discountSequence, BaseCls.GlbUserComCode, _invoiceItemList, out _discounted, out _isDifferent, out _tobepay, _invheader);
                        _invoiceItemListWithDiscount = _discounted;
                    }
                    if (_invoiceItemListWithDiscount != null && _invoiceItemListWithDiscount.Count > 0)
                    {
                        _isDifferent = true;
                        foreach (InvoiceItem invItm in _invoiceItemList)
                        {
                            List<InvoiceItem> _itmList = (from _res in _invoiceItemListWithDiscount
                                                          where _res.Mi_itm_stus == invItm.Mi_itm_stus && _res.Sad_itm_cd == invItm.Sad_itm_cd
                                                          select _res).ToList<InvoiceItem>();
                            if (_itmList == null || _itmList.Count <= 0)
                            {
                                _invoiceItemListWithDiscount.Add(invItm);
                            }
                        }
                        _tobepay = _invoiceItemListWithDiscount.Select(X => X.Sad_tot_amt).Sum();
                    }
                    //if ((_discountSequence == -9999 && _isDifferent) || (_discountSequence == -9999 && ucPayModes1.IsDiscounted)) {
                    //    if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    //    {
                    //    }
                    //    else
                    //    {
                    //        _isDifferent = false;
                    //        _discountSequence = 0;
                    //    }
                    //}
                    //if (_discountSequence == -9999)
                    //{
                    //    CHNLSVC.Sales.GetGeneralPromotionDiscount(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                    //    _invoiceItemListWithDiscount = _discounted;

                    //    if (_isDifferent)
                    //    {
                    //        if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    //        {
                    //            _isDifferent = false;
                    //        }
                    //    }

                    //}
                    //added sachith
                    //2013/09/04
                    if (!_isDifferent && !ucPayModes1.IsDiscounted)
                    {
                        //credit note discount (if invoice pay mode has credit note and invoice don't have discount)
                        List<RecieptItem> _creditNote = (from _res in _recieptItem
                                                         where _res.Sard_pay_tp == "CRNOTE" || _res.Sard_pay_tp == "ADVAN"
                                                         select _res).ToList<RecieptItem>();
                        if (_creditNote != null && _creditNote.Count > 0)
                        {
                            Int32 _timeno1 = Convert.ToInt32(DateTime.Now.ToString("HHmmss"));
                            CHNLSVC.Sales.GetGeneralPromotionDiscountAdvanCredit(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _timeno, Convert.ToDateTime(txtDate.Text.Trim()).DayOfWeek.ToString().ToUpper(), Convert.ToDateTime(txtDate.Text.Trim()), _invoiceItemList, _recieptItem, out _discounted, out _isDifferent, out _tobepay, _invheader);
                            _invoiceItemListWithDiscount = _discounted;
                            foreach (InvoiceItem _invItm in _invoiceItemListWithDiscount)
                            {
                                if (_invItm.Sad_dis_type == "P")
                                {
                                    CashPromotionDiscountHeader _discountHdr = CHNLSVC.General.GetPromotionalDiscountBySeq(_invItm.Sad_dis_seq);
                                    if (_discountHdr != null)
                                    {
                                        _canSaveWithoutDiscount = _discountHdr.Spdh_is_alw_normal;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception exs)
                {
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(exs.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                    CHNLSVC.CloseChannel();
                    return;
                }
                if (_isDifferent || ucPayModes1.IsDiscounted)
                {
                    if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                    }
                    else
                    {
                        if (_canSaveWithoutDiscount)
                        {
                            if (MessageBox.Show("Invoice will save without Discount", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                            {
                                _isDifferent = false;
                                _discountSequence = 0;
                            }
                            else
                            {
                                _isDifferent = false;
                                _discountSequence = 0;
                                return;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Can not process invoice because discount circular not allow to process without discount", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            _isDifferent = false;
                            _discountSequence = 0;
                            return;
                        }
                    }
                }
                else
                {
                    if (MessageBox.Show("There is no specific discount promotion available. Do you want to save?", "Saving...", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        _discountSequence = 0;
                        return;
                    }
                }

                if (_isDifferent)
                {
                    string _discountItem = FormatDiscoutnItem(0, "Item") + FormatDiscoutnItem(2, "Unit Amount") + FormatDiscoutnItem(2, "Dis. Rate") + FormatDiscoutnItem(2, "Dis. Amount") + FormatDiscoutnItem(2, "Total Amount") + "\n";
                    foreach (InvoiceItem i in _invoiceItemList)//.Where(x => x.Sad_disc_rt > 0).ToList()
                        _discountItem += FormatDiscoutnItem(0, i.Sad_itm_cd) + FormatDiscoutnItem(2, i.Sad_unit_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_rt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_tot_amt.ToString()) + "\n";

                    // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    // {
                    if (lblSVatStatus.Text.Trim() == "Available" || lblVatExemptStatus.Text.Trim() == "Available")
                    {
                        decimal Vatsum = _invoiceItemListWithDiscount.Sum(x => x.Sad_itm_tax_amt);
                        _tobepay -= Vatsum;
                    }
                    lblRePayToBePay.Text = FormatToCurrency(_tobepay.ToString());
                    if (_recieptItem != null) if (_recieptItem.Count > 0)
                            if (_recieptItem.Count == 1)
                                if (_recieptItem[0].Sard_pay_tp != "CRNOTE")
                                {
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(_tobepay, 2));
                                }
                                else
                                {
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                                }
                            else
                                _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                    DataTable _tbl = _recieptItem.ToDataTable();
                    gvRePayment.DataSource = _tbl;
                    _toBePayNewAmount = _tobepay;
                    //bool creditnote=false;
                    //foreach (DataGridViewRow grv in gvRePayment.Rows) {
                    //    string paytp = grv.Cells["repy_paymenttype"].Value.ToString();
                    //    if (paytp == "CRNOTE")
                    //    {
                    //        creditnote = true;
                    //        grv.ReadOnly = true;
                    //        gvRePayment.BeginEdit(true);
                    //    }

                    //}

                    pnlRePay.Visible = true;
                    pnlMain.Enabled = false;

                    // }

                    return;
                }
                if (ucPayModes1.IsDiscounted)
                {
                    _invoiceItemListWithDiscount = ucPayModes1.DiscountedInvoiceItem;
                    string _discountItem = FormatDiscoutnItem(0, "Item") + FormatDiscoutnItem(2, "Unit Amount") + FormatDiscoutnItem(2, "Dis. Rate") + FormatDiscoutnItem(2, "Dis. Amount") + FormatDiscoutnItem(2, "Total Amount") + "\n";
                    foreach (InvoiceItem i in _invoiceItemList)//.Where(x => x.Sad_disc_rt > 0).ToList()
                        _discountItem += FormatDiscoutnItem(0, i.Sad_itm_cd) + FormatDiscoutnItem(2, i.Sad_unit_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_rt.ToString()) + FormatDiscoutnItem(2, i.Sad_disc_amt.ToString()) + FormatDiscoutnItem(2, i.Sad_tot_amt.ToString()) + "\n";

                    // if (MessageBox.Show("There is a discount apply for the current payment. Do you need to re-settle the payment?\n", "Re-Settle", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    // {
                    if (lblSVatStatus.Text.Trim() == "Available" || lblVatExemptStatus.Text.Trim() == "Available")
                    {
                        decimal Vatsum = ucPayModes1.DiscountedInvoiceItem.Sum(x => x.Sad_itm_tax_amt);
                        _tobepay = ucPayModes1.DiscountedValue - Vatsum;
                    }
                    else
                    {
                        _tobepay = ucPayModes1.DiscountedValue;
                    }
                    lblRePayToBePay.Text = FormatToCurrency(_tobepay.ToString());
                    if (_recieptItem != null) if (_recieptItem.Count > 0)
                            if (_recieptItem.Count == 1)
                                if (_recieptItem[0].Sard_pay_tp != "CRNOTE")
                                {
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(_tobepay, 2));
                                }
                                else
                                {
                                    _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                                }
                            else
                                _recieptItem.ForEach(x => x.Newpayment = Math.Round(x.Sard_settle_amt, 2));
                    DataTable _tbl = _recieptItem.ToDataTable();
                    gvRePayment.DataSource = _tbl;
                    _toBePayNewAmount = _tobepay;
                    //bool creditnote=false;
                    //foreach (DataGridViewRow grv in gvRePayment.Rows) {
                    //    string paytp = grv.Cells["repy_paymenttype"].Value.ToString();
                    //    if (paytp == "CRNOTE")
                    //    {
                    //        creditnote = true;
                    //        grv.ReadOnly = true;
                    //        gvRePayment.BeginEdit(true);
                    //    }

                    //}

                    pnlRePay.Visible = true;
                    pnlMain.Enabled = false;

                    // }

                    return;
                }
                else
                {
                }

                #endregion Inventory Header Value Assign

                #region Gift Voucher - Parser

                List<InvoiceVoucher> _giftVoucher = null;
                List<ReptPickSerials> _giftVoucherSerial = null;
                List<ReptPickSerials> _gvLst = ScanSerialList.Where(x => IsGiftVoucher(x.ItemType)).ToList();
                if (_gvLst != null)
                    if (_gvLst.Count > 0)
                    {
                        _giftVoucher = new List<InvoiceVoucher>();
                        Parallel.ForEach(_gvLst, _one =>
                        {
                            string _attachedItem = string.Empty;
                            if (gf_assignItem.Visible)
                            {
                                _attachedItem = (from DataGridViewRow _row in gvGiftVoucher.Rows where Convert.ToString(_row.Cells["gf_serial1"].Value) == _one.Tus_ser_1 && Convert.ToString(_row.Cells["gf_serial2"].Value) == _one.Tus_ser_2 && Convert.ToString(_row.Cells["gf_item"].Value) == _one.Tus_itm_cd select Convert.ToString(_row.Cells[7].Value)).ToList()[0];
                                if (string.IsNullOrEmpty(_attachedItem))
                                    _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];
                            }
                            else
                                _attachedItem = _invoiceItemList.Where(y => y.Sad_job_line == (_invoiceItemList.Where(x => x.Sad_itm_line == _one.Tus_base_itm_line).ToList()[0].Sad_job_line) && y.Sad_itm_tp == "M").Select(y => y.Sad_itm_cd).Distinct().ToList()[0];

                            InvoiceVoucher _gift = new InvoiceVoucher();
                            _gift.Stvo_bookno = Convert.ToInt32(_one.Tus_ser_2);
                            _gift.Stvo_cre_by = BaseCls.GlbUserID;
                            _gift.Stvo_cre_when = DateTime.Now;
                            _gift.Stvo_gv_itm = _one.Tus_itm_cd;
                            _gift.Stvo_inv_no = string.Empty;
                            _gift.Stvo_itm_cd = _attachedItem;
                            _gift.Stvo_pageno = Convert.ToInt32(_one.Tus_ser_1);
                            _gift.Stvo_prefix = _one.Tus_ser_3;
                            _gift.Stvo_price = _one.Tus_unit_price;
                            _giftVoucher.Add(_gift);
                            if (_giftVoucherSerial == null) _giftVoucherSerial = new List<ReptPickSerials>();
                            _giftVoucherSerial.Add(_one);
                            ScanSerialList.Remove(_one);
                        });
                    }

                #endregion Gift Voucher - Parser

                #region cr note warranty updation

                /* MODIFICATION 2014/02/08
                 * SACHITH
                 * ********* PROCESS ***************
                 *
                 * get all reciept types
                 * get credit notes in reciept types
                 * get all items in credit note
                 * get warranty in cr note
                 * update all new items with old warranty
                 *
                 * **IMPORTANT**
                 * if cr has multiple items and multiple warranty get maximum warranty
                 * first item 0 months
                 * second 12 months
                 * third 24 months
                 * new discount will be 24 month for all items
                 *
                 * **********************************
                 */

                //Check and apply warranty period and remarks - New
                foreach (InvoiceItem _itmWar in _invoiceItemList)
                {
                    //Check Selected price book and level is warranty base price level.
                    PriceBookLevelRef _pbLvl = CHNLSVC.Sales.GetPriceLevelForHp(BaseCls.GlbUserComCode, _itmWar.Sad_pbook, _itmWar.Sad_pb_lvl, _itmWar.Sad_itm_stus);
                    if (_pbLvl != null)
                    {
                        if (_pbLvl.Sapl_set_warr == true || txtDate.Value.Date != _serverDt)
                        {
                            if (CheckItemWarrantyNew(_itmWar.Sad_itm_cd, _itmWar.Sad_itm_stus, _itmWar.Sad_seq, _itmWar.Sad_itm_seq, _itmWar.Sad_pbook, _itmWar.Sad_pb_lvl, _pbLvl.Sapl_set_warr, _itmWar.Sad_unit_rt, _pbLvl.Sapl_warr_period))
                            {
                                MessageBox.Show(_itmWar.Sad_itm_cd + " item's warranty period not setup by the inventory department. Please contact inventory department", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                return;
                            }
                            else
                            {
                                _itmWar.Sad_warr_period = WarrantyPeriod;
                                _itmWar.Sad_warr_remarks = WarrantyRemarks;
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("Cannot find valid warranty.Please contact IT Dept.", "Warranty Setup", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                string _WarrFrom = "";

                foreach (RecieptItem ritm in _recieptItem)
                {
                    if (ritm.Sard_pay_tp == "CRNOTE")
                    {
                        InvoiceHeader _invoice = CHNLSVC.Sales.GetInvoiceHeaderDetails(ritm.Sard_ref_no);
                        if (_invoice != null)
                        {
                            if (!string.IsNullOrEmpty(_invoice.Sah_anal_3))
                            {
                                DataTable _appReq = CHNLSVC.General.SearchrequestAppDetByRef(_invoice.Sah_anal_3);

                                if (_appReq.Rows.Count == 0)
                                {
                                    MessageBox.Show("Cannot find approval details.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                else
                                {
                                    foreach (DataRow row2 in _appReq.Rows)
                                    {
                                        if (row2["GRAD_ANAL11"] != null)
                                        {
                                            _WarrFrom = row2["GRAD_ANAL11"].ToString();
                                        }
                                    }
                                }
                            }
                            else
                            {
                                _WarrFrom = "CREDIT";
                            }
                        }

                        if (_WarrFrom != "NEWITEM")
                        {
                            //get items from cr note
                            List<InvoiceItem> _invItmList = CHNLSVC.Sales.GetInvoiceItems(ritm.Sard_ref_no);
                            int _proPd = 0;
                            string _warrRmk = "";
                            //get all discounts
                            foreach (InvoiceItem _tem in _invItmList)
                            {
                                if (_tem.Sad_warr_period > _proPd)
                                {
                                    _proPd = _tem.Sad_warr_period;
                                    _warrRmk = _tem.Sad_warr_remarks;
                                }
                            }


                            foreach (InvoiceItem _invWarr in _invoiceItemList)
                            {
                                if (_invWarr.Sad_unit_rt > 0)
                                {
                                    _invWarr.Sad_warr_period = _proPd;
                                    _invWarr.Sad_warr_remarks = null;
                                }
                            }
                            //_invoiceItemList.ForEach(x => x.Sad_warr_period = _proPd);
                        }
                        //Comment by darshana 12-02-2015 after submint invoice copy 26H-CS-33176 mentionning system error by boss
                        // _invoiceItemList.ForEach(x => x.Sad_warr_remarks = _warrRmk);
                    }
                }

                #endregion cr note warranty updation


                int effect = -1;
                string _error = string.Empty;
                string _buybackadj = string.Empty;
                try
                {
                    btnSave.Enabled = false;
                    //update srn qty
                    _invoiceItemList.ForEach(x => x.Sad_srn_qty = 0);
                    List<RecieptItem> _registrationReciept = new List<RecieptItem>();
                    _registrationReciept = ucPayModes2.RecieptItemList;
                    List<VehicalRegistration> _registrationList = new List<VehicalRegistration>();
                    //2013/12/10
                    //ADDED REGISTRATION PROCESS

                    //updated by akila 2018/02/05
                    if (!_isHoldInvoiceProcess)
                    {
                        UpdateEventDetails();
                    }

                    if (_isNeedRegistrationReciept)
                    {
                        //reciept auto number
                        MasterAutoNumber masterAutoRecTp = new MasterAutoNumber();
                        masterAutoRecTp.Aut_cate_cd = BaseCls.GlbUserDefProf;
                        masterAutoRecTp.Aut_cate_tp = "PC";
                        masterAutoRecTp.Aut_direction = null;
                        masterAutoRecTp.Aut_modify_dt = null;
                        masterAutoRecTp.Aut_moduleid = "RECEIPT";
                        masterAutoRecTp.Aut_number = 5;//what is Aut_number
                        masterAutoRecTp.Aut_start_char = "VHREG";
                        masterAutoRecTp.Aut_year = null;

                        RecieptHeader _ReceiptHeader = new RecieptHeader();
                        _ReceiptHeader.Sar_seq_no = -1; //CHNLSVC.Inventory.Generate_new_seq_num(GlbUserName, "RECEIPT", 1, BaseCls.GlbUserComCode);
                        _ReceiptHeader.Sar_com_cd = BaseCls.GlbUserComCode;
                        _ReceiptHeader.Sar_receipt_type = "VHREG";
                        // _ReceiptHeader.Sar_receipt_no = txtRecNo.Text.Trim();

                        MasterReceiptDivision _RecDiv = new MasterReceiptDivision();
                        _RecDiv = CHNLSVC.Sales.GetDefRecDivision(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);
                        if (_RecDiv.Msrd_cd != null)
                        {
                            _ReceiptHeader.Sar_prefix = _RecDiv.Msrd_cd;
                        }
                        else
                        {
                            _ReceiptHeader.Sar_prefix = "";
                        }
                        //_ReceiptHeader.Sar_prefix = txtDivision.Text.Trim();
                        // _ReceiptHeader.Sar_manual_ref_no = txtManual.Text.Trim();
                        _ReceiptHeader.Sar_receipt_date = Convert.ToDateTime(txtDate.Value).Date;
                        _ReceiptHeader.Sar_direct = true;
                        _ReceiptHeader.Sar_acc_no = "";
                        _ReceiptHeader.Sar_is_oth_shop = false;
                        _ReceiptHeader.Sar_oth_sr = "";
                        _ReceiptHeader.Sar_profit_center_cd = BaseCls.GlbUserDefProf;
                        _ReceiptHeader.Sar_debtor_cd = txtCustomer.Text.Trim();
                        _ReceiptHeader.Sar_debtor_name = txtCusName.Text.Trim();
                        _ReceiptHeader.Sar_debtor_add_1 = txtAddress1.Text.Trim();
                        _ReceiptHeader.Sar_debtor_add_2 = txtAddress2.Text.Trim();
                        _ReceiptHeader.Sar_tel_no = "";
                        _ReceiptHeader.Sar_mob_no = txtMobile.Text.Trim();
                        _ReceiptHeader.Sar_nic_no = txtNIC.Text.Trim();
                        _ReceiptHeader.Sar_tot_settle_amt = ucPayModes2.RecieptItemList.Sum(x => x.Sard_settle_amt);
                        _ReceiptHeader.Sar_comm_amt = 0;
                        _ReceiptHeader.Sar_is_mgr_iss = false;
                        _ReceiptHeader.Sar_esd_rate = 0;
                        _ReceiptHeader.Sar_wht_rate = 0;
                        _ReceiptHeader.Sar_epf_rate = 0;
                        _ReceiptHeader.Sar_currency_cd = "LKR";
                        _ReceiptHeader.Sar_uploaded_to_finance = false;
                        _ReceiptHeader.Sar_act = true;
                        _ReceiptHeader.Sar_direct_deposit_bank_cd = "";
                        _ReceiptHeader.Sar_direct_deposit_branch = "";
                        // _ReceiptHeader.Sar_remarks = txtNote.Text.Trim();
                        _ReceiptHeader.Sar_is_used = false;
                        _ReceiptHeader.Sar_ref_doc = "";
                        _ReceiptHeader.Sar_ser_job_no = "";
                        _ReceiptHeader.Sar_used_amt = 0;
                        _ReceiptHeader.Sar_create_by = BaseCls.GlbUserID;
                        _ReceiptHeader.Sar_mod_by = BaseCls.GlbUserID;
                        _ReceiptHeader.Sar_session_id = BaseCls.GlbUserSessionID;
                        _ReceiptHeader.Sar_anal_1 = cmbDistrict.Text;
                        _ReceiptHeader.Sar_anal_2 = txtProvince.Text.Trim();
                        if (string.IsNullOrEmpty(_businessEntity.Mbe_distric_cd))
                            _businessEntity.Mbe_distric_cd = cmbDistrict.Text;
                        if (string.IsNullOrEmpty(_businessEntity.Mbe_province_cd))
                            _businessEntity.Mbe_province_cd = txtProvince.Text;

                        if (cmbDistrict.SelectedValue != null)
                            _masterBusinessCompany.Mbe_distric_cd = cmbDistrict.SelectedValue.ToString();
                        _masterBusinessCompany.Mbe_province_cd = txtProvince.Text;

                        ReptPickHeader _SerHeader = new ReptPickHeader();
                        _SerHeader.Tuh_usrseq_no = -1;
                        _SerHeader.Tuh_usr_id = BaseCls.GlbUserID;
                        _SerHeader.Tuh_usr_com = BaseCls.GlbUserComCode;
                        _SerHeader.Tuh_session_id = BaseCls.GlbUserSessionID;
                        _SerHeader.Tuh_cre_dt = Convert.ToDateTime(txtDate.Value).Date;
                        _SerHeader.Tuh_doc_tp = "INV";
                        _SerHeader.Tuh_direct = false;
                        _SerHeader.Tuh_ischek_itmstus = true;
                        _SerHeader.Tuh_ischek_simitm = true;
                        _SerHeader.Tuh_ischek_reqqty = true;
                        _SerHeader.Tuh_doc_no = null;

                        // vehical regitration list
                        foreach (RegistrationList _reg in _List)
                        {
                            //get serials
                            List<ReptPickSerials> _serList = (from res in ScanSerialList
                                                              where res.Tus_itm_cd == _reg.Item && res.Tus_itm_stus == _reg.Stus
                                                              select res).ToList<ReptPickSerials>();
                            foreach (ReptPickSerials _serial in _serList)
                            {
                                VehicalRegistration _tem = AssingRegDetails(_reg.Item, _reg.Item_reg, _reg.Item_claim, _serial.Tus_ser_1, _serial.Tus_ser_2);
                                _registrationList.Add(_tem);
                            }
                        }
                        //save invoice with registration
                        string _registration;
                        effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransactionRegistration(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, _ReceiptHeader, masterAutoRecTp, _registrationList, _registrationReciept, _SerHeader, out _registration, ref IsInvoiceCompleted);

                        //if (effect == -1) {
                        //    MessageBox.Show("Error occured while processing !!\n" + _error, "Error");
                        //    return;

                        //}
                    }
                    //END
                    else
                    {
                        //ADDED 2014/02/26
                        bool _sucess = CheckGeneralDiscount();
                        if (_sucess == false)
                        {
                            return;
                        }
                        //

                        effect = CHNLSVC.Sales.SaveInvoiceDuplicateWithTransaction01(_invheader, _invoiceItemList, InvoiceSerialList, _recHeader, _recieptItem, invHdr, ScanSerialList, null, _invoiceAuto, _receiptAuto, _masterAutoDo, (chkDeliverLater.Checked == false || chkDeliverNow.Checked) ? true : false, out _invoiceNo, out _receiptNo, out _deliveryOrderNo, _businessEntity, false, _isHoldInvoiceProcess, out _error, _giftVoucher, _buybackheader, _buybackAuto, BuyBackItemList, out _buybackadj, ref IsInvoiceCompleted, null, null, false, CreditCardTransLog, _InvEventList, _InvEventItems);
                    }
                }
                catch (Exception ex)
                {
                    if (_giftVoucher != null && _giftVoucher.Count > 0) { _giftVoucher = new List<InvoiceVoucher>(); ScanSerialList.AddRange(_giftVoucherSerial); _giftVoucherSerial = new List<ReptPickSerials>(); }
                    this.Cursor = Cursors.Default;
                    using (new CenterWinDialog(this)) { MessageBox.Show(ex.Message, "System Error", MessageBoxButtons.OK, MessageBoxIcon.Error); }
                    CHNLSVC.CloseChannel();
                    return;
                }
                finally
                {
                    string Msg = string.Empty;
                    btnSave.Enabled = true;

                    if (effect != -1)
                    {
                        if (chkDeliverLater.Checked == false || chkDeliverNow.Checked)
                        {
                            Msg = "Successfully Saved! Document No : " + _invoiceNo + " with Delivery Order :" + _deliveryOrderNo + ". ";
                        }
                        else
                        {
                            Msg = "Successfully Saved! Document No : " + _invoiceNo + ". ";
                        }

                        if (cmbInvType.Text.Trim() == "CS")
                        {
                            var _isCashPaymentExsit = _recieptItem.Where(x => x.Sard_pay_tp == "CASH").ToList();
                            if (_isCashPaymentExsit != null)
                                if (_isCashPaymentExsit.Count > 0)
                                {
                                    decimal _cashamt = _isCashPaymentExsit.Sum(x => x.Sard_settle_amt);
                                    string _customerGiven = PaymentBalanceConfirmation(Msg, _cashamt);
                                    if (!string.IsNullOrEmpty(_customerGiven))
                                    {
                                        decimal _tmpCashGiven = 0;
                                        decimal.TryParse(_customerGiven, out _tmpCashGiven);
                                        this.Cursor = Cursors.Default;

                                        string BalanceToGive = FormatToCurrency(Convert.ToString(_tmpCashGiven - _cashamt));

                                        //this.Cursor = Cursors.Default;
                                        //string BalanceToGive = FormatToCurrency(Convert.ToString(Convert.ToDecimal(_customerGiven) - _cashamt));
                                        using (new CenterWinDialog(this)) { MessageBox.Show("You have to give back as balance " + BalanceToGive + "\n in " + lblCurrency.Text + ".", "Balance To Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                                    }
                                }
                        }
                        else
                        { this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show(Msg, "Saved Documents", MessageBoxButtons.OK, MessageBoxIcon.Information); } }

                        BaseCls.GlbReportName = string.Empty;
                        GlbReportName = string.Empty;
                        MasterBusinessEntity _itm = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, txtCustomer.Text, string.Empty, string.Empty, "C");
                        bool _isAskDO = false;
                        if (MasterChannel != null) if (MasterChannel.Rows.Count > 0) if (MasterChannel.Rows[0].Field<Int16>("msc_isprint_do") == 1) _isAskDO = true; else _isAskDO = false;
                        if (chkManualRef.Checked == false)
                        {
                            bool _isPrintElite = false;
                            if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_chnl))
                            {
                                if (_MasterProfitCenter.Mpc_chnl.Trim() == "ELITE" || _MasterProfitCenter.Mpc_chnl.Trim() == "RRC1" || _MasterProfitCenter.Mpc_chnl.Trim() == "RRE2" || _MasterProfitCenter.Mpc_chnl.Trim() == "APPLE" || _MasterProfitCenter.Mpc_chnl.Trim() == "APPIST") 
                                { 
                                    BaseCls.GlbReportDoc = _invoiceNo;
                                    clsSalesRep objSales = new clsSalesRep();
                                    if (objSales.checkIsDirectPrint() == true && objSales.removeIsDirectPrint() == false)
                                    {
                                        objSales.InvoicePrint_Direct();
                                        _isPrintElite = true;
                                    }
                                    else
                                    {
                                        ReportViewer _view = new ReportViewer();
                                        BaseCls.GlbReportName = string.Empty;
                                        GlbReportName = string.Empty;
                                        _view.GlbReportName = string.Empty;
                                        BaseCls.GlbReportTp = "INV";
                                        _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt";
                                        _view.GlbReportDoc = _invoiceNo;
                                        _view.Show(); _view = null;
                                        _isPrintElite = true;
                                    }
                                } 
                            }
                            //AUTO_DEL
                            //get permission
                            bool _permission = CHNLSVC.Security.Is_OptionPerimitted(BaseCls.GlbUserComCode, BaseCls.GlbUserID, 11055);
                            if (!_permission)
                            {
                                { if (_MasterProfitCenter.Mpc_chnl.Trim() == "AUTO_DEL") { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _view.GlbReportName = "DealerInvoicePrints.rpt"; BaseCls.GlbReportName = "DealerInvoicePrints.rpt"; _view.GlbReportDoc = _invoiceNo; BaseCls.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; _isPrintElite = true; } }
                            }
                            if (_isPrintElite == false)
                            {
                                if (_itm.Mbe_sub_tp != "C.")
                                {
                                    //Showroom
                                    //========================= INVOCIE  CASH/CREDIT/ HIRE
                                    if (chkTaxPayable.Checked == false)
                                    { ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null; }
                                    else
                                    {
                                        //Add Code by Chamal 27/04/2013
                                        //====================  TAX INVOICE
                                        ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoiceHalfPrints.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                        if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrintTax_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                        //====================  TAX INVOICE
                                    }
                                }
                                else
                                {
                                    //Dealer
                                    ReportViewer _view = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; BaseCls.GlbReportTp = "INV"; _view.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "InvoiceHalfPrints.rpt" : BaseCls.GlbUserComCode == "GCL" ? "InvoicePrints_Gold.rpt" : "InvoicePrintTax.rpt"; _view.GlbReportDoc = _invoiceNo; _view.Show(); _view = null;
                                    if (_recieptItem != null) if (_recieptItem.Count > 0) if (_itm.Mbe_cate == "LEASE") { ReportViewer _viewt = new ReportViewer(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; _view.GlbReportName = string.Empty; _viewt.GlbReportName = "InvoicePrint_insus.rpt"; _viewt.GlbReportDoc = _invoiceNo; _viewt.Show(); _viewt = null; }
                                }
                            }

                            if (BuyBackItemList != null)
                                if (BuyBackItemList.Count > 0)
                                {
                                    Reports.Inventory.ReportViewerInventory _viewBB = new Reports.Inventory.ReportViewerInventory();

                                    BaseCls.GlbReportName = string.Empty;
                                    GlbReportName = string.Empty;
                                    _viewBB.GlbReportName = string.Empty;
                                    BaseCls.GlbReportTp = "INWARD";
                                    _viewBB.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Inward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Inward_Docs.rpt" : "Inward_Docs.rpt";
                                    _viewBB.GlbReportDoc = _buybackadj;
                                    _viewBB.Show();
                                    _viewBB = null;
                                }
                        }

                        //=========================DO
                        if (chkDeliverLater.Checked == false || chkDeliverNow.Checked)
                        {
                            if (_isAskDO)
                            {
                                if (MessageBox.Show("Do you need to print delivery order now?", "Print", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                                { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = string.Empty; _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; }
                            }
                            else
                            { ReportViewerInventory _views = new ReportViewerInventory(); BaseCls.GlbReportName = string.Empty; GlbReportName = string.Empty; BaseCls.GlbReportTp = "OUTWARD"; _views.GlbReportName = string.Empty; _views.GlbReportName = BaseCls.GlbUserComCode == "SGL" ? "Outward_Docs.rpt" : BaseCls.GlbDefChannel == "AUTO_DEL" ? "Dealer_Outward_Docs.rpt" : "Outward_Docs.rpt"; _views.GlbReportDoc = _deliveryOrderNo; _views.Show(); _views = null; }
                        }
                        btnClear_Click(null, null);
                        //change chk value
                        if (_MasterProfitCenter.Mpc_is_do_now == 0)
                        {
                            chkDeliverLater.Checked = false;
                            chkDeliverNow.Checked = false;
                            chkDeliverLater_CheckedChanged(null, null);
                        }
                        else if (_MasterProfitCenter.Mpc_is_do_now == 1)
                        {
                            chkDeliverNow.Checked = true;
                            chkDeliverLater.Checked = false;
                            chkDeliverNow_CheckedChanged(null, null);
                        }
                        else
                        {
                            chkDeliverLater.Checked = true;
                            chkDeliverNow.Checked = false;
                            chkDeliverLater_CheckedChanged(null, null);
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(_error))
                        { if (_giftVoucher != null && _giftVoucher.Count > 0) { _giftVoucher = new List<InvoiceVoucher>(); ScanSerialList.AddRange(_giftVoucherSerial); _giftVoucherSerial = new List<ReptPickSerials>(); } this.Cursor = Cursors.Default; using (new CenterWinDialog(this)) { MessageBox.Show("Generating Invoice is terminated due to following reason, " + _error, "Generated Error", MessageBoxButtons.OK, MessageBoxIcon.Hand); } }
                        CHNLSVC.CloseChannel();
                    }
                    CHNLSVC.CloseAllChannels();
                }
            }
            catch
            {
                this.Cursor = Cursors.Default;
                CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void dvDOSerials_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (e.RowIndex != -1)
                {
                    if (MessageBox.Show("Are you sure?", "Question", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        (from res in _invoiceItemList
                         where res.Sad_itm_cd == ScanSerialList[e.RowIndex].Tus_itm_cd && res.Sad_itm_line == ScanSerialList[e.RowIndex].Tus_base_itm_line //&& res.Sad_itm_stus == ScanSerialList[e.RowIndex].Tus_itm_stus
                         select res).ToList<InvoiceItem>().ForEach(x => x.Sad_srn_qty = x.Sad_srn_qty - 1);
                        ScanSerialList.RemoveAt(e.RowIndex);
                        InvoiceSerialList.RemoveAt(e.RowIndex);
                        BindingSource _source = new BindingSource();
                        _source.DataSource = ScanSerialList;
                        dvDOSerials.DataSource = _source;

                        gvPopSerial.DataSource = ScanSerialList;
                    }
                }
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
        }

        private void dvDOItems_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                DataGridViewRow row = this.dvDOItems.SelectedRows[0];
                if (row != null && row.Index != -1)
                {
                    try
                    {
                        //MessageBox.Show(dvDOItems.Rows[e.RowIndex].Cells["sad_itm_line"].Value.ToString());
                        string _invoiceNo = dvDOItems.Rows[row.Index].Cells["SAD_INV_NO"].Value.ToString();
                        int _itemLineNo = Convert.ToInt32(dvDOItems.Rows[row.Index].Cells["sad_itm_line"].Value.ToString());
                        string _itemCode = dvDOItems.Rows[row.Index].Cells["Sad_itm_cd"].Value.ToString();
                        string _similaritemCode = dvDOItems.Rows[row.Index].Cells["Sad_sim_itm_cd"].Value.ToString();
                        if (!string.IsNullOrEmpty(_similaritemCode))
                        {
                            if (_itemCode != _similaritemCode)
                            {
                                _itemCode = _similaritemCode;
                            }
                        }
                        string _itemstatus = dvDOItems.Rows[row.Index].Cells["Sad_itm_stus"].Value.ToString();
                        decimal _invoiceQty = Convert.ToDecimal(dvDOItems.Rows[row.Index].Cells["Sad_qty"].Value.ToString());
                        decimal _doQty = Convert.ToDecimal(dvDOItems.Rows[row.Index].Cells["Sad_do_qty"].Value.ToString());
                        decimal _scanQty = Convert.ToDecimal(dvDOItems.Rows[row.Index].Cells["PickQty"].Value.ToString());
                        string _priceBook = dvDOItems.Rows[row.Index].Cells["sad_pbook"].Value.ToString();
                        string _priceLevel = dvDOItems.Rows[row.Index].Cells["sad_pb_lvl"].Value.ToString();
                        int pbCount = CHNLSVC.Sales.GetDOPbCount(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                        string _promotioncd = Convert.ToString(dvDOItems.Rows[row.Index].Cells["SAD_PROMO_CD"].Value.ToString());
                        bool _isAgePriceLevel = false;
                        int _ageingDays = -1;

                        MasterItem _item = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itemCode);
                        DataTable _categoryDet = CHNLSVC.General.GetMainCategoryDetail(_item.Mi_cate_1);
                        List<PriceBookLevelRef> _level = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, _priceBook, _priceLevel);
                        if (_level != null)
                            if (_level.Count > 0)
                            {
                                var _lvl = _level.Where(x => x.Sapl_isage).ToList();
                                if (_lvl != null) if (_lvl.Count() > 0)
                                        _isAgePriceLevel = true;
                            }

                        if (_categoryDet != null && _isAgePriceLevel)
                            if (_categoryDet.Rows.Count > 0)
                            {
                                if (_categoryDet.Rows[0]["ric1_age"] != DBNull.Value)
                                    _ageingDays = Convert.ToInt32(_categoryDet.Rows[0].Field<Int16>("ric1_age"));
                                else _ageingDays = 0;
                            }

                        if ((_invoiceQty - _doQty) <= 0) return;
                        if ((_invoiceQty - _doQty) <= _scanQty) { MessageBox.Show("You have picked full quantity"); return; }
                        if (Convert.ToBoolean(dvDOItems.Rows[row.Index].Cells["SAD_ISAPP"].Value) != true || Convert.ToBoolean(dvDOItems.Rows[row.Index].Cells["SAD_ISCOVERNOTE"].Value) != true)
                        {
                            MessageBox.Show("Item is not approved for delivery!", "Permission", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        //DataTable dt = CHNLSVC.Sales.GetPendingInvoiceItemsByItemDT(_invoiceNo, _itemCode);
                        //if (dt.Rows.Count > 0)
                        //{
                        //    if (Convert.ToInt32(dt.Rows[0]["SAD_ISAPP"]) != 1 || Convert.ToInt32(dt.Rows[0]["SAD_ISCOVERNOTE"]) != 1)
                        //    {
                        //        //CanSave = false;
                        //        MessageBox.Show("Not Approved to release item", "Permission", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //        return;
                        //    }
                        //}
                        /*
                         if (_item.Mi_itm_tp == "G" && !string.IsNullOrEmpty(_promotioncd))
                         {
                             MessageBox.Show("This gift voucher referring promotion", "Promotion Item", MessageBoxButtons.OK, MessageBoxIcon.Information);
                             return;
                         }
                         else if (chkChangeSimilarItem.Checked == false)
                         {
                             CommonSearch.CommonOutScan _commonOutScan = new CommonSearch.CommonOutScan();
                             _commonOutScan.PriceBook = _priceBook;
                             _commonOutScan.PriceLevel = _priceLevel;
                             _commonOutScan.ModuleTypeNo = 1;
                             _commonOutScan.ScanDocument = _invoiceNo;
                             _commonOutScan.DocumentType = "DO";
                             _commonOutScan.PopupItemCode = _itemCode;
                             _commonOutScan.ItemStatus = _itemstatus;
                             _commonOutScan.ItemLineNo = _itemLineNo;
                             _commonOutScan.PopupQty = _invoiceQty - _doQty;
                             _commonOutScan.ApprovedQty = _doQty;
                             _commonOutScan.ScanQty = _scanQty;
                             _commonOutScan.IsAgePriceLevel = _isAgePriceLevel;
                             _commonOutScan.DocumentDate = dtpDODate.Value.Date;
                             _commonOutScan.NoOfDays = _ageingDays;
                             if (pbCount <= 0) _commonOutScan.IsCheckStatus = false;
                             else _commonOutScan.IsCheckStatus = true;

                             _commonOutScan.Location = new Point(((this.Width - _commonOutScan.Width) / 2), ((this.Height - _commonOutScan.Height) / 2) + 50);
                             //this.Enabled = false;
                             _commonOutScan.ShowDialog();
                             //this.Enabled = true;
                         }
                         else if (chkChangeSimilarItem.Checked)
                         {
                             DataTable _dtTable;
                             //Add Chamal 29/03/2013
                             decimal _balQty = _invoiceQty - _doQty;
                             if (_isAgePriceLevel == false)
                                 _dtTable = CHNLSVC.Inventory.GetItemInventoryBalanceStatus(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, dvDOItems.Rows[e.RowIndex].Cells["Sad_itm_cd"].Value.ToString(), string.Empty);
                             else
                                 _dtTable = CHNLSVC.Inventory.GetInventoryBalanceByBatch(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, Convert.ToString(dvDOItems.Rows[e.RowIndex].Cells["Sad_itm_cd"].Value), string.Empty);

                             if (_dtTable != null)
                             {
                                 if (_dtTable.Rows.Count > 0)
                                 {
                                     //foreach (DataRow dtRow in _dtTable.Rows)
                                     //{
                                     //    foreach (DataColumn dc in _dtTable.Columns)
                                     //    {
                                     //        var field1 = dtRow[dc].ToString();
                                     //    }
                                     //}
                                     bool _isInventoryBalanceAvailable = false;

                                     if (_isAgePriceLevel == false)
                                         _isInventoryBalanceAvailable = true;
                                     else
                                     {
                                         var _isChkStus = _level.Where(x => x.Sapl_chk_st_tp).Count();
                                         if (_isChkStus > 0)
                                         {
                                             var _isAvailable = _dtTable.AsEnumerable().Where(x => x.Field<string>("inb_itm_stus") == _itemstatus && x.Field<DateTime>("inb_doc_dt").Date <= Convert.ToDateTime(dtpDODate.Value.Date).Date.AddDays(-_ageingDays)).Count();
                                             if (_isAvailable > 0) _isInventoryBalanceAvailable = true;
                                         }
                                         else
                                         {
                                             var _isAvailable = _dtTable.AsEnumerable().Where(x => x.Field<DateTime>("inb_doc_dt").Date <= Convert.ToDateTime(dtpDODate.Value.Date).Date.AddDays(-_ageingDays)).Count();
                                             if (_isAvailable > 0) _isInventoryBalanceAvailable = true;
                                         }
                                     }

                                     if (_isInventoryBalanceAvailable)
                                     {
                                         MessageBox.Show("Cannot select the similar item! Because stock balance are available for invoice item", "Similar Item", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                         return;
                                     }
                                 }
                             }
                         */
                        CommonSearch.CommonOutScan _commonOutScan = new CommonSearch.CommonOutScan();
                        _commonOutScan.PriceBook = _priceBook;
                        _commonOutScan.PriceLevel = _priceLevel;
                        _commonOutScan.ModuleTypeNo = 5;
                        _commonOutScan.ScanDocument = _invoiceNo;
                        _commonOutScan.DocumentType = "InvoiceSerial";
                        _commonOutScan.PopupItemCode = _itemCode;
                        _commonOutScan.ItemStatus = _itemstatus;
                        _commonOutScan.ItemLineNo = _itemLineNo;
                        _commonOutScan.PopupQty = _invoiceQty - _doQty;
                        _commonOutScan.ApprovedQty = _doQty;
                        _commonOutScan.ScanQty = _scanQty;
                        _commonOutScan.IsAgePriceLevel = _isAgePriceLevel;
                        _commonOutScan.DocumentDate = txtDate.Value.Date;
                        _commonOutScan.NoOfDays = _ageingDays;
                        _commonOutScan.SelectedItemList = new List<ReptPickSerials>();
                        _commonOutScan.IsCheckStatus = !IsPriceLevelAllowDoAnyStatus;

                        //if (pbCount <= 0) _commonOutScan.IsCheckStatus = false;
                        //else _commonOutScan.IsCheckStatus = true;

                        _commonOutScan.Location = new Point(((this.Width - _commonOutScan.Width) / 2), ((this.Height - _commonOutScan.Height) / 2) + 50);
                        //this.Enabled = false;
                        _commonOutScan.ShowDialog();

                        foreach (ReptPickSerials ser in _commonOutScan.SelectedItemList)
                        {
                            List<ReptPickSerials> dup = (from _res in ScanSerialList
                                                         where _res.Tus_itm_cd == ser.Tus_itm_cd && _res.Tus_ser_1 == ser.Tus_ser_1
                                                           && _res.Tus_ser_id == ser.Tus_ser_id
                                                         select _res).ToList<ReptPickSerials>();
                            if (dup != null && dup.Count > 0)
                            {
                                MessageBox.Show("Selected Serial Already in the list", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return;
                            }
                            if (!IsPriceLevelAllowDoAnyStatus && _itemstatus != ser.Tus_itm_stus)
                            {
                                if (ser.Tus_itm_stus == "CONS")
                                {
                                    (from res in _invoiceItemList
                                     where res.Sad_itm_cd == _itemCode && res.Sad_itm_line == _itemLineNo //&& res.Sad_itm_stus == _itemstatus
                                     select res).ToList<InvoiceItem>().ForEach(x => x.Sad_itm_stus = ser.Tus_itm_stus);
                                }
                            }
                            ScanSerialList.Add(ser);
                            InvoiceSerial _invser = new InvoiceSerial(); _invser.Sap_del_loc = BaseCls.GlbUserDefLoca;
                            _invser.Sap_itm_cd = ser.Tus_itm_cd; _invser.Sap_itm_line = _itemLineNo;
                            _invser.Sap_remarks = string.Empty; _invser.Sap_seq_no = Convert.ToInt32(SSPriceBookSequance);
                            _invser.Sap_ser_1 = ser.Tus_ser_1; _invser.Sap_ser_line = _isCombineAdding ? Convert.ToInt32(SSCombineLine) : 0;
                            InvoiceSerialList.Add(_invser);
                        }
                        //ScanSerialList.AddRange(_commonOutScan.SelectedItemList);
                        //update scan qty
                        (from res in _invoiceItemList
                         where res.Sad_itm_cd == _itemCode && res.Sad_itm_line == _itemLineNo //&& res.Sad_itm_stus == _itemstatus
                         select res).ToList<InvoiceItem>().ForEach(x => x.Sad_srn_qty = _commonOutScan.ScanQty);

                        dvDOSerials.AutoGenerateColumns = false;
                        BindingSource _source = new BindingSource();
                        _source.DataSource = ScanSerialList;
                        dvDOSerials.DataSource = _source;

                        dvDOItems.AutoGenerateColumns = false;
                        BindingSource _source1 = new BindingSource();
                        _source1.DataSource = _invoiceItemList;
                        dvDOItems.DataSource = _source1;
                        int line = _itemLineNo;
                        line++;
                        //change selected item
                        List<InvoiceItem> _tem = (from _res in _invoiceItemList
                                                  where _res.Sad_itm_line == line
                                                  select _res).ToList<InvoiceItem>();
                        if (_tem != null && _tem.Count > 0)
                        {
                            dvDOItems.Rows[line - 1].Selected = true;
                        }

                        gvPopSerial.DataSource = ScanSerialList;
                    }

                            //LoadInvoiceItems(_invoiceNo, _profitCenter);
                    catch (Exception ex)
                    { this.Cursor = Cursors.Default; SystemErrorMessage(ex); }
                    finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
                }
            }
        }

        private void btnClsPromotion_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do you want to terminate invoice save process!!!", "Save", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                btnClear_Click(null, null);
            }
        }

        private void btnCancelPromotion_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Do you want to terminate invoice save process!!!", "Save", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                btnClear_Click(null, null);
            }
        }

        private void pnlConfirmPromotion_Click(object sender, EventArgs e)
        {
        }

        private void gevDiscount_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1 && e.ColumnIndex == 0)
            {
                _discountSequence = Convert.ToInt32(gvDiscount.Rows[e.RowIndex].Cells[1].Value);
                pnlDiscount.Visible = false;
                pnlMain.Enabled = true;
                btnSave_Click(null, null);
            }
        }

        public struct RegistrationList
        {
            private string item;

            public string Item
            {
                get { return item; }
                set { item = value; }
            }

            private string stus;

            public string Stus
            {
                get { return stus; }
                set { stus = value; }
            }

            private decimal qty;

            public decimal Qty
            {
                get { return qty; }
                set { qty = value; }
            }

            private decimal total_value;

            public decimal Total_value
            {
                get { return total_value; }
                set { total_value = value; }
            }

            private decimal item_reg;

            public decimal Item_reg
            {
                get { return item_reg; }
                set { item_reg = value; }
            }

            private decimal item_claim;

            public decimal Item_claim
            {
                get { return item_claim; }
                set { item_claim = value; }
            }

            private decimal registrationAmt;

            public decimal RegistrationAmt
            {
                get { return registrationAmt; }
                set { registrationAmt = value; }
            }

            private decimal claimAmt;

            public decimal ClaimAmt
            {
                get { return claimAmt; }
                set { claimAmt = value; }
            }
        }

        protected void GetProvince()
        {
            if (string.IsNullOrEmpty(cmbDistrict.Text)) return;
            DistrictProvince _type = CHNLSVC.Sales.GetDistrict(cmbDistrict.Text.Trim())[0];
            if (_type.Mds_district == null)
            {
                MessageBox.Show("Invalid district selected.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            txtProvince.Text = _type.Mds_province;
        }

        private void Load_District()
        {
            cmbDistrict.DataSource = new List<DistrictProvince>();
            List<DistrictProvince> _district = CHNLSVC.Sales.GetDistrict("");
            var _final = (from _lst in _district
                          select _lst.Mds_district).ToList();

            cmbDistrict.DataSource = _final.ToList();
        }

        private void lnkProcessRegistration_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            pnlMain.Enabled = false;
            pnlRegistration.Visible = true;

            //load district
            Load_District();

            //BindingSource _source = new BindingSource();
            //_source.DataSource = ScanSerialList;
            _totalRegistration = 0;
            //gvRegistrationItems.DataSource = _source;
            bool _regFound = false;
            _List = new List<RegistrationList>();
            //item
            //status
            //qty
            //item reg
            //itm claim
            //total amount
            //registration amount
            //claim amount

            //hold total registration amount

            foreach (InvoiceItem _invItm in _invoiceItemList)
            {
                decimal _invRegAllowQty = _invItm.Sad_qty;
                decimal _invRegAllowVal = _invItm.Sad_tot_amt;
                decimal _invItmQty = _invItm.Sad_qty;
                decimal _invItmVal = _invItm.Sad_tot_amt;
                string _invTp = cmbInvType.SelectedValue.ToString();
                string _cusTp = _masterBusinessCompany.Mbe_cate;
                string _pbook = _invItm.Sad_pbook;
                string _plvl = _invItm.Sad_pb_lvl;
                decimal _regValue = 0;
                decimal _claimAmt = 0;
                decimal _itmReg = 0;
                decimal _itmClaim = 0;
                MasterItem _mItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _invItm.Sad_itm_cd.Trim());
                if (_mItem != null && _mItem.Mi_need_reg == true)
                {
                    VehicalRegistrationDefnition _vehDef = new VehicalRegistrationDefnition();
                    bool _isLease = (_masterBusinessCompany.Mbe_cate == "LEASE") ? true : false;

                    if (_isLease == false)
                    {
                        List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                        if (_Saleshir.Count > 0)
                        {
                            foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                            {
                                _regFound = false;
                                string _type = _one.Mpi_cd;
                                string _value = _one.Mpi_val;

                                //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirect(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE", txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date);
                                _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, _invTp, _invItm.Sad_itm_cd.Trim(), Convert.ToDateTime(txtDate.Value).Date, null, _invItmQty, _invItmVal, _pbook, _plvl, "N/A");

                                if (_vehDef.Svrd_itm != null)
                                {
                                    _regValue = _vehDef.Svrd_val;
                                    _itmReg = _vehDef.Svrd_val;
                                    _regValue = _regValue * _invItm.Sad_qty;
                                    _totalRegistration = _totalRegistration + _regValue;
                                    _claimAmt = _vehDef.Svrd_claim_val;
                                    _claimAmt = _claimAmt * _invItm.Sad_qty;
                                    _itmClaim = _vehDef.Svrd_claim_val;
                                    _regFound = true;
                                    goto L3;
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Hirarchy not define.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        if (_regFound == false)
                        {
                            MessageBox.Show("Registration amount definitions not set. For Item " + _invItm.Sad_itm_cd, "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            return;
                        }
                    L3: Int32 i = 1;
                        //_vehDef = CHNLSVC.Sales.GetVehRegDef(BaseCls.GlbUserComCode, txtInvoice.Text.Trim(), txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date);

                        //if (_vehDef.Svrd_itm != null)
                        //{
                        //    txtBalance.Text = _vehDef.Svrd_val.ToString("0.00");
                        //    txtPayment.Text = _vehDef.Svrd_val.ToString("0.00");
                        //    _regAmt = _vehDef.Svrd_claim_val;
                        //}
                        //else
                        //{
                        //    MessageBox.Show("Registration amount definitions not set.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //    txtItem.Text = "";
                        //    txtBalance.Text = "0.00";
                        //    txtPayment.Text = "0.00";
                        //    _regAmt = 0;
                        //    txtItem.Focus();
                        //    return;
                        //}
                    }
                    else if (_isLease == true)
                    {
                        List<MasterSalesPriorityHierarchy> _Saleshir = CHNLSVC.Sales.GetSalesPriorityHierarchy(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, CommonUIDefiniton.SalesPriorityHierarchyCategory.PC_PRIT_HIERARCHY.ToString(), CommonUIDefiniton.SalesPriorityHierarchyType.PC.ToString());

                        if (_Saleshir.Count > 0)
                        {
                            foreach (MasterSalesPriorityHierarchy _one in _Saleshir)
                            {
                                _regFound = false;
                                string _type = _one.Mpi_cd;
                                string _value = _one.Mpi_val;

                                //_vehDef = CHNLSVC.Sales.GetVehRegAmtDirect(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "LEASE", txtItem.Text.Trim(), Convert.ToDateTime(dtpRecDate.Value).Date);
                                _vehDef = CHNLSVC.Sales.GetVehRegAmtDirectNew(_type, _value, "LEASE", _invItm.Sad_itm_cd.Trim(), Convert.ToDateTime(txtDate.Value).Date, null, _invItmQty, _invItmVal, _pbook, _plvl, "N/A");

                                if (_vehDef.Svrd_itm != null)
                                {
                                    _regValue = _vehDef.Svrd_val;
                                    _itmReg = _vehDef.Svrd_val;
                                    _regValue = _regValue * _invItm.Sad_qty;
                                    _totalRegistration = _totalRegistration + _regValue;
                                    _claimAmt = _vehDef.Svrd_claim_val;
                                    _claimAmt = _claimAmt * _invItm.Sad_qty;
                                    _itmClaim = _vehDef.Svrd_claim_val;
                                    _regFound = true;
                                    goto L2;
                                }
                            }
                        }
                        else
                        {
                            MessageBox.Show("Hirarchy not define.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        if (_regFound == false)
                        {
                            MessageBox.Show("Registration amount definitions not set for leasing company.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            txtItem.Text = "";

                            return;
                        }
                    L2: Int32 i = 1;
                    }

                    //check registartion amount edit profit center
                    bool _isAllowEdit = CHNLSVC.Sales.IsCheckAllowFunction(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, "VHREG", "ALWEDIT");
                    if (_isAllowEdit == true)
                    {
                        gvRegistrationItems.Columns["registration"].ReadOnly = false;
                    }
                    else
                    {
                        gvRegistrationItems.Columns["registration"].ReadOnly = true;
                    }
                    RegistrationList _reg = new RegistrationList();
                    _reg.Item = _invItm.Sad_itm_cd;
                    _reg.Stus = _invItm.Sad_itm_stus;
                    _reg.Qty = _invItm.Sad_qty;
                    _reg.Total_value = _invItm.Sad_tot_amt;
                    _reg.Item_reg = _itmReg;
                    _reg.Item_claim = _itmClaim;
                    _reg.RegistrationAmt = _regValue;
                    _reg.ClaimAmt = _claimAmt;
                    _List.Add(_reg);
                }
                else
                {
                    //MessageBox.Show("This item is not allow to regiration process.", "Receipt Entry", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //txtItem.Text = "";
                    //txtItem.Focus();
                    //return;
                }
                //add to list
                //item
                //status
                //qty
                //total amount
                //registration amount
                //claim amount
            }

            gvRegistrationItems.AutoGenerateColumns = false;
            BindingSource _source1 = new BindingSource();
            _source1.DataSource = _List;
            gvRegistrationItems.DataSource = _source1;

            //set pay mode total
            ucPayModes1.Date = Convert.ToDateTime(txtDate.Value.Date);
            ucPayModes2.TotalAmount = _totalRegistration;
            ucPayModes2.Customer_Code = txtCustomer.Text;
            ucPayModes2.IsZeroAllow = true;
            ucPayModes2.InvoiceType = "VHREG";
            ucPayModes2.LoadData();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            pnlMain.Enabled = true;
            pnlRegistration.Visible = false;
        }

        private void btnRegCancel_Click(object sender, EventArgs e)
        {
            pnlMain.Enabled = true;
            pnlRegistration.Visible = false;
        }

        private void btnRegOk_Click(object sender, EventArgs e)
        {
            pnlMain.Enabled = true;
            pnlRegistration.Visible = false;
        }

        private void gvRegistrationItems_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            //get registration amount accoding to definition
        }

        private void cmbDistrict_SelectedIndexChanged(object sender, EventArgs e)
        {
            GetProvince();
        }

        private void gvRegistrationItems_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                RegistrationList _reg = _List[e.RowIndex];
                decimal _regAmount;
                //change registration
                try
                {
                    _regAmount = Convert.ToDecimal(gvRegistrationItems.Rows[e.RowIndex].Cells["registration"].Value);
                }
                catch (Exception) { return; }

                _reg.Item_reg = _regAmount;
                _reg.RegistrationAmt = _regAmount;

                gvRegistrationItems.AutoGenerateColumns = false;
                BindingSource _source1 = new BindingSource();
                _source1.DataSource = _List;
                gvRegistrationItems.DataSource = _source1;

                //change total
                _totalRegistration = _List.Sum(x => x.Item_reg);

                //load paymodes
                ucPayModes1.Date = Convert.ToDateTime(txtDate.Value.Date);
                ucPayModes2.TotalAmount = _totalRegistration;
                ucPayModes2.Customer_Code = txtCustomer.Text;
                ucPayModes2.IsZeroAllow = true;
                ucPayModes2.InvoiceType = "VHREG";
                ucPayModes2.LoadData();
            }
        }

        private void EnableDisableCustomer()
        {
            if (txtCustomer.Text == "CASH")
            {
                txtCustomer.Enabled = true;
                txtCusName.Enabled = true;
                txtAddress1.Enabled = true;
                txtAddress2.Enabled = true;
                txtMobile.Enabled = true;
                txtNIC.Enabled = true;

                btnSearch_NIC.Enabled = true;
                btnSearch_Customer.Enabled = true;
                btnSearch_Mobile.Enabled = true;
            }
            else
            {
                if (string.IsNullOrEmpty(txtCustomer.Text.Trim()))
                {
                    if ((!string.IsNullOrEmpty(txtCusName.Text.Trim())) && (!string.IsNullOrEmpty(txtNIC.Text.Trim()) || !string.IsNullOrEmpty(txtMobile.Text.Trim())))                    {
                        txtCustomer.Enabled = false;
                        txtCusName.Enabled = false;
                        txtAddress1.Enabled = false;
                        txtAddress2.Enabled = false;
                        txtMobile.Enabled = false;
                        txtNIC.Enabled = false;

                        btnSearch_NIC.Enabled = false;
                        btnSearch_Customer.Enabled = false;
                        btnSearch_Mobile.Enabled = false;
                        IsNewCustomer = true;
                    }
                    else
                    {
                        IsNewCustomer = true;
                        txtCustomer.Enabled = false;
                        txtNIC.Enabled = true;
                        txtMobile.Enabled = true;
                        cmbTitle.Enabled = true;
                        txtCusName.Enabled = true;
                        txtAddress1.Enabled = true;
                        txtAddress2.Enabled = true;
                    }                    
                }
                else
                {
                    IsNewCustomer = false;
                    //txtCustomer.Enabled = false;
                    txtCusName.Enabled = false;
                    txtAddress1.Enabled = false;
                    txtAddress2.Enabled = false;
                    txtMobile.Enabled = false;
                    txtNIC.Enabled = false;
                    txtCustomer.Enabled = false;

                    btnSearch_NIC.Enabled = false;
                    btnSearch_Customer.Enabled = false;
                    btnSearch_Mobile.Enabled = false;
                }
            }
        }

        private void AddItemDisableCustomer(bool _disable)
        {
            //Add by Chamal 14-jul-2014
            if (_disable == false)
            {
                txtCustomer.Enabled = true;
                btnSearch_NIC.Enabled = true;
                btnSearch_Customer.Enabled = true;
                btnSearch_Mobile.Enabled = true;
                txtDate.Enabled = true;
            }
            else
            {
                if (txtCustomer.Text.ToString() != "CASH")
                {
                    txtCustomer.Enabled = false;
                    btnSearch_NIC.Enabled = false;
                    btnSearch_Customer.Enabled = false;
                    btnSearch_Mobile.Enabled = false;
                }
                txtDate.Enabled = false;
            }
        }

        private bool CheckItemAndSerials()
        {
            bool result = false;
            if (_invoiceItemList == null || _invoiceItemList.Count <= 0)
            {
                result = false;
            }
            else
            {
                foreach (InvoiceItem itm in _invoiceItemList)
                {
                    List<ReptPickSerials> _serials = (from _ser in ScanSerialList
                                                      where _ser.Tus_itm_cd == itm.Sad_itm_cd && _ser.Tus_itm_stus == itm.Sad_itm_stus
                                                      select _ser).ToList<ReptPickSerials>();

                    if (_serials != null && _serials.Count > 0)
                    {
                        if (itm.Sad_qty == _serials.Count)
                        {
                            result = false;
                        }
                        else
                        {
                            result = true;
                        }
                    }
                    else
                    {
                        result = true;
                    }
                }
            }
            return result;
        }

        private void txtDelLocation_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtDelLocation.Text))
            {
                DataTable _dt = CHNLSVC.Sales.getLocDesc(BaseCls.GlbUserComCode, "LOC", txtDelLocation.Text);
                if (_dt == null || _dt.Rows.Count <= 0)
                {
                    MessageBox.Show("Invalid location", "Delivery Location", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtDelLocation.Clear();
                    txtDelLocation.Focus();
                    return;
                }
            }
        }

        #region Prmotion Voucher :: Chamal 28-Jun-2014

        private void btnPromoVoucher_Click(object sender, EventArgs e)
        {
            if (txtCusName.Enabled == true && txtCustomer.Text != "CASH")
            {
                MessageBox.Show("Please select the customer", "Customer", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (!string.IsNullOrEmpty(lblPromoVouNo.Text))
            {
                MessageBox.Show("Voucher no already select!", "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            if (lblPromoVouUsedFlag.Text.Contains("U") == true)
            {
                MessageBox.Show("Voucher no already used!", "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (pnlPromoVouNo.Visible)
            {
                pnlPromoVouNo.Visible = false;
                pnlMain.Enabled = true;
            }
            else
            {
                pnlPromoVouNo.Visible = true;
                pnlMain.Enabled = false;
                txtPromoVouNo.Focus();
                txtPromoVouNo.Clear();
            }
        }

        private void btnPromoVouClose_Click(object sender, EventArgs e)
        {
            if (pnlPromoVouNo.Visible)
            {
                pnlPromoVouNo.Visible = false;
                pnlMain.Enabled = true;
            }
            else
            {
                pnlPromoVouNo.Visible = true;
                pnlMain.Enabled = false;
                txtPromoVouNo.Focus();
                txtPromoVouNo.Clear();
                lblgvo.Text = string.Empty;
            }
        }

        private void btnPromoVou_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtPromoVouNo.Text))
            {
                int val;
                if (!int.TryParse(txtPromoVouNo.Text, out val))
                {
                    MessageBox.Show("Invalid Voucher No", "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtPromoVouNo.Clear();
                    txtPromoVouNo.Focus();
                    return;
                }

                string _vouMsg = string.Empty;
                if (CHNLSVC.Sales.CheckPromoVoucherNo(BaseCls.GlbUserComCode, txtCustomer.Text, txtNIC.Text, txtMobile.Text, txtDate.Value.Date, Convert.ToInt32(txtPromoVouNo.Text), out _vouMsg) == false)
                {
                    DataTable _dtVou = CHNLSVC.Sales.GetPromoVoucherNo(BaseCls.GlbUserComCode, txtCustomer.Text, txtNIC.Text, txtMobile.Text, txtDate.Value.Date, Convert.ToInt32(txtPromoVouNo.Text));
                    if (_dtVou.Rows.Count > 0)
                    {
                        pnl_gvo.Visible = true;
                        gvgvo.AutoGenerateColumns = false;
                        gvgvo.DataSource = _dtVou;
                    }
                    else
                    {
                        MessageBox.Show(_vouMsg, "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtPromoVouNo.Clear();
                        txtPromoVouNo.Focus();
                    }
                }
                else
                {
                    lblPromoVouNo.Text = txtPromoVouNo.Text;
                    //kapila 2/11/2016
                    DataTable _dtVou = CHNLSVC.Sales.GetPromoVoucherNo(BaseCls.GlbUserComCode, txtCustomer.Text, txtNIC.Text, txtMobile.Text, txtDate.Value.Date, Convert.ToInt32(txtPromoVouNo.Text));
                  
                    lblPVTp.Text = _dtVou.Rows[0]["gvp_gv_tp"].ToString();
                    lblgvo.Text = _dtVou.Rows[0]["gvp_gv_cd"].ToString();
                    if (lblPVTp.Text == "RATE")
                        lblPVDisc.Text = _dtVou.Rows[0]["gvp_amt"].ToString();
                    else
                    {
                        lblPVDisc.Text = _dtVou.Rows[0]["gvp_bal_amt"].ToString();
                        lblPVBal.Text = _dtVou.Rows[0]["gvp_bal_amt"].ToString();
                    }

                    btnPromoVouClose_Click(null, null);
                }
            }
            else
            {
                MessageBox.Show("Please enter the promotion voucher no", "Voucher No", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtPromoVouNo.Focus();
            }
        }

        private void txtPromoVouNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                if (!string.IsNullOrEmpty(txtPromoVouNo.Text))
                {
                    btnPromoVou.Focus();
                }
            }
        }

        #endregion Prmotion Voucher :: Chamal 28-Jun-2014

        #region Text Box Focus Colour Change

        private void txtBox_GotFocus(object sender, EventArgs e)
        {
            TextBox _box = (TextBox)(sender);
            _box.BackColor = Color.LightYellow;

            var c = GetAll(this, typeof(TextBox));
            foreach (TextBox t in c)
            {
                if (t.Name != _box.Name)
                    t.BackColor = Color.White;
            }
        }

        public IEnumerable<Control> GetAll(Control control, Type type)
        {
            var controls = control.Controls.Cast<Control>();

            return controls.SelectMany(ctrl => GetAll(ctrl, type))
                                      .Concat(controls)
                                      .Where(c => c.GetType() == type);
        }

        private void TextBoxGotFocus()
        {
            txtCusName.GotFocus += txtBox_GotFocus;
            txtRemarks.GotFocus += txtBox_GotFocus;
            txtDocRefNo.GotFocus += txtBox_GotFocus;
            txtCustomer.GotFocus += txtBox_GotFocus;
            txtDelAddress1.GotFocus += txtBox_GotFocus;
            txtDelAddress2.GotFocus += txtBox_GotFocus;
            txtDelCustomer.GotFocus += txtBox_GotFocus;
            txtDelLocation.GotFocus += txtBox_GotFocus;
            txtDelName.GotFocus += txtBox_GotFocus;
            txtDisAmount.GotFocus += txtBox_GotFocus;
            txtDisAmt.GotFocus += txtBox_GotFocus;
            txtDisRate.GotFocus += txtBox_GotFocus;
            txtDocRefNo.GotFocus += txtBox_GotFocus;
            txtInvoiceNo.GotFocus += txtBox_GotFocus;
            txtItem.GotFocus += txtBox_GotFocus;
            txtLineTotAmt.GotFocus += txtBox_GotFocus;
            txtManualRefNo.GotFocus += txtBox_GotFocus;
            txtMobile.GotFocus += txtBox_GotFocus;
            txtNIC.GotFocus += txtBox_GotFocus;
            txtQty.GotFocus += txtBox_GotFocus;
            txtRemarks.GotFocus += txtBox_GotFocus;
            txtSerialNo.GotFocus += txtBox_GotFocus;
            txtTaxAmt.GotFocus += txtBox_GotFocus;
            txtUnitAmt.GotFocus += txtBox_GotFocus;
            txtUnitPrice.GotFocus += txtBox_GotFocus;
            txtPromoVouNo.GotFocus += txtBox_GotFocus;
        }

        #endregion Text Box Focus Colour Change

        private void cmbTechnician_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue)))
            {
                txtPromotor.Text = Convert.ToString(cmbTechnician.SelectedValue);
            }
            else
            {
                txtPromotor.Text = "";
            }
        }

        private void cmbTechnician_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(Convert.ToString(cmbTechnician.SelectedValue)))
            {
                if (_tblPromotor != null)
                {
                    var _find = (from DataRow _l in _tblPromotor.Rows where _l.Field<string>("mpp_promo_name") == cmbTechnician.Text select _l).ToList();
                    if (_find != null && _find.Count > 0)
                    {
                        txtPromotor.Text = Convert.ToString(cmbTechnician.SelectedValue);
                    }
                    else
                    {
                        this.Cursor = Cursors.Default;
                        using (new CenterWinDialog(this)) { MessageBox.Show("Please select the correct sales promotor.", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                        txtPromotor.Text = string.Empty;
                        cmbTechnician.SelectedIndex = 0;
                    }
                }
            }
            else
            {
                this.Cursor = Cursors.Default;
                //using (new CenterWinDialog(this)) { MessageBox.Show("Please select the correct sales executive", "Sales Executive", MessageBoxButtons.OK, MessageBoxIcon.Information); }
                txtPromotor.Text = string.Empty;
                cmbTechnician.SelectedIndex = -1;
            }
        }

        private void toolStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {

        }

        private void txtQuotation_TextChanged(object sender, EventArgs e)
        {

        }

        private void btnPerTown_Click(object sender, EventArgs e)
        {
            try
            {
                CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();

                _CommonSearch.ReturnIndex = 0;
                _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.Town);
                DataTable _result = CHNLSVC.CommonSearch.GetTown(_CommonSearch.SearchParams, null, null);
                _CommonSearch.dvResult.DataSource = _result;
                _CommonSearch.BindUCtrlDDLData(_result);
                _CommonSearch.obj_TragetTextBox = txtPerTown;
                _CommonSearch.ShowDialog();
                txtPerTown.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error Occurred while processing...\n" + ex.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); CHNLSVC.CloseChannel();
            }
            finally
            {
                CHNLSVC.CloseAllChannels();
            }
        }

        private void txtPerTown_Leave(object sender, EventArgs e)
        {


            if (!string.IsNullOrEmpty(txtPerTown.Text))
            {
                DataTable dt = new DataTable();

                dt = CHNLSVC.General.Get_DetBy_town(txtPerTown.Text.Trim().ToUpper());
                if (dt != null)
                {
                    if (dt.Rows.Count > 0)
                    {

                    }
                    else
                    {
                        MessageBox.Show("Invalid town.", "Customer Creation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtPerTown.Text = "";
                        txtPerTown.Focus();
                    }
                }
                else
                {
                    MessageBox.Show("Invalid town.", "Customer Creation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtPerTown.Text = "";
                    txtPerTown.Focus();
                }
            }
        }

        private void btnClosepnlADV_Click(object sender, EventArgs e)
        {
            pnlADVR.Visible = false;
            chkBasedOnAdvanceRecept.Checked = false;
        }

        private void chkBasedOnAdvanceRecept_CheckedChanged(object sender, EventArgs e)
        {
            if (chkBasedOnAdvanceRecept.Checked)
            {
                //chkDeliverNow.Checked = true;
                //chkDeliverNow_CheckedChanged(null, null);
                pnlADVR.Size = new System.Drawing.Size(255, 53);
                txtADVRNumber.Text = "";
                pnlADVR.Visible = true;
                txtADVRNumber.Focus();
            }
            else
            {
                //chkDeliverNow.Checked = false;
                //chkDeliverNow_CheckedChanged(null, null);
                pnlADVR.Visible = false;
            }
        }

        private void btnSearchADVR_Click(object sender, EventArgs e)
        {
            txtADVRNumber.Text = "";
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.PendADVNum);
            DataTable _result = CHNLSVC.CommonSearch.Get_PendingDoc_ByRefNo(_CommonSearch.SearchParams, null, null);
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.IsSearchEnter = true;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtADVRNumber;
            _CommonSearch.ShowDialog();
            txtADVRNumber.Focus();
        }

        private void txtADVRNumber_KeyPress(object sender, KeyPressEventArgs e)
        {

        }

        private void txtADVRNumber_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnLoadADV_Click(null, null);
            }
            else if (e.KeyCode == Keys.F2)
            {
                btnSearchADVR_Click(null, null);
            }
        }

        private void btnLoadADV_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtADVRNumber.Text))
            {
                Decimal _validDays = 0;
                List<Hpr_SysParameter> para = CHNLSVC.Sales.GetAll_hpr_Para("ADPROMAXDT", "COM", BaseCls.GlbUserComCode);
                if (para.Count > 0)
                {
                    _validDays = para[0].Hsy_val;
                }



                List<ReceiptItemDetails> oReceiptItemDetails = CHNLSVC.Sales.GetAdvanReceiptItems(txtADVRNumber.Text.Trim());
                RecieptHeader oRecieptHeader = CHNLSVC.Sales.GetReceiptHeaderByType(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, txtADVRNumber.Text.Trim(), "ADVAN");
                if (oRecieptHeader == null || string.IsNullOrEmpty(oRecieptHeader.Sar_receipt_no))
                {
                    MessageBox.Show("Please select a valid receipt advance number", "Invoice - Advance receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                if (oRecieptHeader.SAR_VALID_TO.Date < DateTime.Now.Date)
                {
                    MessageBox.Show("Selected receipt is expired", "Invoice - Advance receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    pnlADVR.Size = new System.Drawing.Size(255, 153);
                    dgvReceiptItems.DataSource = oReceiptItemDetails;
                    return;
                }

                if ((DateTime.Now.Date - oRecieptHeader.Sar_receipt_date).TotalDays > Convert.ToDouble(_validDays))
                {
                    MessageBox.Show("Selected receipt is expired", "Invoice - Advance receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    pnlADVR.Size = new System.Drawing.Size(255, 153);
                    dgvReceiptItems.DataSource = oReceiptItemDetails;
                    return;
                }

                cmbInvType.SelectedItem = oRecieptHeader.Sar_inv_type;
                cmbInvType_Leave(null, null);

                txtCustomer.Text = oRecieptHeader.Sar_debtor_cd;
                LoadCustomerDetailsByCustomer(null, null);

                _invoiceItemList = new List<InvoiceItem>();
                int itmLine = 0;
                if (oReceiptItemDetails == null)
                {
                    MessageBox.Show("No items to load", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                foreach (ReceiptItemDetails item in oReceiptItemDetails)
                {
                    MasterItem oMasterItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, item.Sari_item);
                    itmLine = itmLine + 1;
                    InvoiceItem oNewItem = new InvoiceItem();
                    oNewItem.Sad_alt_itm_cd = item.Sari_item;
                    oNewItem.Sad_alt_itm_desc = item.Sari_item_desc;
                    oNewItem.Sad_comm_amt = 0;
                    oNewItem.Sad_disc_amt = 0;
                    oNewItem.Sad_disc_rt = 0;
                    oNewItem.Sad_do_qty = 0;
                    oNewItem.Sad_fws_ignore_qty = 0;
                    oNewItem.Sad_inv_no = string.Empty;
                    oNewItem.Sad_is_promo = false;
                    oNewItem.Sad_itm_cd = item.Sari_item;
                    oNewItem.Sad_itm_line = itmLine;
                    oNewItem.Sad_itm_seq = 0;
                    oNewItem.Sad_itm_stus = item.Sari_sts;
                    oNewItem.Sad_itm_tax_amt = item.Sari_tax_amt;
                    oNewItem.Sad_itm_tp = oMasterItem.Mi_itm_tp;
                    //oNewItem.Sad_job_line = 0;
                    oNewItem.Sad_job_no = string.Empty;
                    oNewItem.Sad_merge_itm = string.Empty;
                    oNewItem.Sad_outlet_dept = string.Empty;
                    oNewItem.Sad_pbook = item.Sari_pb;
                    oNewItem.Sad_pb_lvl = item.Sari_pb_lvl;
                    oNewItem.Sad_pb_price = 0;
                    oNewItem.Sad_print_stus = false;
                    oNewItem.Sad_promo_cd = string.Empty;
                    oNewItem.Sad_qty = item.Sari_qty;
                    oNewItem.Sad_res_line_no = 0;
                    oNewItem.Sad_res_no = string.Empty;
                    oNewItem.Sad_seq = 0;
                    oNewItem.Sad_seq_no = 0;
                    oNewItem.Sad_sim_itm_cd = string.Empty;
                    oNewItem.Sad_srn_qty = 0;
                    oNewItem.Sad_tot_amt = item.Sari_unit_amt;
                    oNewItem.Sad_trd_svc_chrg = 0;
                    oNewItem.Sad_unit_amt = item.Sari_unit_amt;
                    oNewItem.Sad_unit_rt = item.Sari_unit_rate;
                    oNewItem.Sad_uom = oMasterItem.Mi_itm_uom;
                    oNewItem.Sad_warr_based = false;
                    oNewItem.Sad_warr_period = 0;
                    oNewItem.Sad_warr_remarks = string.Empty;
                    oNewItem.Sad_isapp = false;
                    oNewItem.Sad_iscovernote = false;
                    _invoiceItemList.Add(oNewItem);

                    if (!String.IsNullOrEmpty(item.Sari_serial))
                    {
                       
                        if (oMasterItem.Mi_is_ser1 != -1)
                        {
                            MasterLocation _MasterLocation = CHNLSVC.General.GetAllLocationByLocCode(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, 0);

                            if (_MasterLocation.Ml_is_serial == false)
                            {
                                MessageBox.Show("This Location is not setup for serial maintain Pls. contact Inventory Department. ", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                _invoiceItemList = new List<InvoiceItem>();
                                return;
                            }

                        }
                        _lineNo += 1;
                        ReptPickSerials _serLst = null;
                        //_serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, item.Sari_item.Trim(), item.Sari_serial.Trim());
                        _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, "-2", item.Sari_item.Trim(), item.Sari_serial.Trim()); //add by tharanga get resave item
                        if (!string.IsNullOrEmpty(_serLst.Tus_itm_cd))
                        {
                            if (oMasterItem.Mi_is_ser1 == 1)
                            {
                                _serLst.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
                                _serLst.Tus_base_itm_line = _lineNo;
                                _serLst.Tus_usrseq_no = ScanSequanceNo;
                                _serLst.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
                                _serLst.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty;
                                _serLst.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty;
                                _serLst.ItemType = oMasterItem.Mi_itm_tp;
                                ScanSerialList.Add(_serLst);
                            }
                        }
                    }

                    CalculateGrandTotal(item.Sari_qty, item.Sari_unit_rate, 0, item.Sari_tax_amt, true);
                }

                gvPopSerial.DataSource = new List<ReptPickSerials>();
                gvPopSerial.DataSource = ScanSerialList.Where(x => x.Tus_ser_1 != "N/A" && !IsGiftVoucher(x.ItemType)).ToList();
                BindAddItem();

                decimal _tobepays = 0;
                if (lblSVatStatus.Text == "Available") _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim()) - Convert.ToDecimal(lblGrndTax.Text.Trim());
                else _tobepays = Convert.ToDecimal(lblGrndTotalAmount.Text.Trim());
                ucPayModes1.TotalAmount = _tobepays;
                ucPayModes1.InvoiceItemList = _invoiceItemList;
                ucPayModes1.SerialList = InvoiceSerialList;
                ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                ucPayModes1.IsTaxInvoice = chkTaxPayable.Checked;

                if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                    ucPayModes1.LoadData();
                if (_loyaltyType != null)
                {
                    ucPayModes1.LoyaltyCard = _loyaltyType.Salt_loty_tp;
                }
                //btnAddItem.Enabled = false;
                //txtSerialNo.Enabled = false;
                //txtItem.Enabled = false;
                //btnSearch_Serial.Enabled = false;
                //btnSearch_Item.Enabled = false;
                ucPayModes1.PayModeCombo.SelectedItem = "ADVAN";
                ucPayModes1.ComboChange(txtADVRNumber.Text.Trim());






            }
        }

        private void txtADVRNumber_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnSearchADVR_Click(null, null);
        }

        private void dgvReceiptItems_CellContentDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                String itemCode = dgvReceiptItems.SelectedRows[0].Cells["sari_item"].Value.ToString();
                String Serial = dgvReceiptItems.SelectedRows[0].Cells["sari_serial"].Value.ToString();
                String Qty = dgvReceiptItems.SelectedRows[0].Cells["sari_qty"].Value.ToString();

                if (!String.IsNullOrEmpty(Serial))
                {
                    txtSerialNo.Text = Serial;
                    CheckSerialAvailability(null, null);
                }
                else
                {
                    txtItem.Text = itemCode;
                    CheckItemCode(null, null);
                }
                txtQty.Text = Qty;
                txtQty_Leave(null, null);
                ucPayModes1.PayModeCombo.SelectedItem = "ADVAN";
                ucPayModes1.ComboChange(txtADVRNumber.Text.Trim());
            }

        }

        private void gvInvoiceItem_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void gvInvoiceItem_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {

        }
        private Boolean IsDiffTax(List<InvoiceItem> _ItemList)
        {// Nadeeka 30-12-2015
            decimal _taxRate = -1;
            Boolean _retVal = true;
            List<MasterItemTax> _itmTax = new List<MasterItemTax>();

            MasterCompany _masterComp = null;
            _masterComp = CHNLSVC.General.GetCompByCode(BaseCls.GlbUserComCode);
            if (_masterComp.Mc_resmultaxinv == 1)
            {
                foreach (InvoiceItem _itm in _ItemList.Where(x => x.Sad_unit_rt > 0))
                {

                    _itmTax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                    foreach (MasterItemTax _one in _itmTax.Where(x => x.Mict_tax_cd == "VAT"))
                    {
                        if (_taxRate == -1)
                        {
                            _taxRate = _one.Mict_tax_rate;
                        }
                        if (_taxRate != _one.Mict_tax_rate)
                        {
                            _retVal = false;
                        }

                    }

                }
            }

            return _retVal;
        }

        private void chkCreditNote_CheckedChanged(object sender, EventArgs e)
        {
            SetDateTopPayMode();
            if (chkCreditNote.Checked)
            {
                pnlCreditNote.Size = new System.Drawing.Size(248, 51);
                txtSrchCreditNote.Text = "";
                pnlCreditNote.Visible = true;
                txtSrchCreditNote.Focus();
            }
            else
            {
                pnlCreditNote.Visible = false;
            }
        }

        private void btn_close_credit_note_Click(object sender, EventArgs e)
        {
            pnlCreditNote.Visible = false;
        }

        private void btn_srch_credit_note_Click(object sender, EventArgs e)
        {
            CommonSearch.CommonSearch _CommonSearch = new CommonSearch.CommonSearch();
            _CommonSearch.ReturnIndex = 0;
            _CommonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.CreditNote);
            DataTable _result = CHNLSVC.CommonSearch.GetCreditNote(_CommonSearch.SearchParams, null, null);
            _CommonSearch.IsSearchEnter = true;
            _CommonSearch.dvResult.DataSource = _result;
            _CommonSearch.BindUCtrlDDLData(_result);
            _CommonSearch.obj_TragetTextBox = txtSrchCreditNote;
            _CommonSearch.ShowDialog();
            txtSrchCreditNote.Select();

        }


        private void btnCreditNote_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtSrchCreditNote.Text))
            {
                loadCredNote();
            }
        }

        private void loadCredNote()
        {
            InvoiceHeader _invoice = CHNLSVC.Sales.GetInvoiceHeaderDetails(txtSrchCreditNote.Text);
            if (_invoice != null)
            {
                if (_invoice.Sah_inv_tp == "RVT")
                {
                    MessageBox.Show("This credit note is not valid for re-sales ", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtSrchCreditNote.Text = string.Empty;
                    return;
                }
                //validate
                if (_invoice.Sah_direct)
                {
                    return;
                }
                if (_invoice.Sah_stus == "C")
                {
                    return;
                }


                if (_invoice.Sah_com != BaseCls.GlbUserComCode)// Nadeeka 17-07-2015 (Requested by Dilanda)
                {
                    MessageBox.Show("Credit Note is not available in this company", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if ((_invoice.Sah_anal_7 - _invoice.Sah_anal_8) * _invoice.Sah_ex_rt <= 0)
                {
                    MessageBox.Show("No credit note balance", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtSrchCreditNote.Text = "";
                    return;
                }

                decimal _tobepays = Convert.ToDecimal((_invoice.Sah_anal_7 - _invoice.Sah_anal_8) * _invoice.Sah_ex_rt);

                txtCustomer.Text = _invoice.Sah_cus_cd;
                _reqNo = _invoice.Sah_anal_3;
                LoadCustomerDetailsByCustomer(null, null);

                ucPayModes1.TotalAmount = _tobepays;

                ucPayModes1.Amount.Text = FormatToCurrency(Convert.ToString(_tobepays));
                ucPayModes1.IsTaxInvoice = chkTaxPayable.Checked;

                if (ucPayModes1.HavePayModes && _isCombineAdding == false)
                    ucPayModes1.LoadData();

                ucPayModes1.PayModeCombo.SelectedItem = "CRNOTE";
                ucPayModes1.ComboChange(txtSrchCreditNote.Text.Trim());


                //  chkCreditNote.Text = ("Based On Credit Note-" + txtSrchCreditNote.Text).ToString();
                pnlCreditNote.Visible = false;
                _isBOnCredNote = true;
                chkCreditNote.Enabled = false;

                DataTable _dtReq = CHNLSVC.General.SearchrequestAppDetByRef(_reqNo);
                if (_dtReq.Rows.Count > 0)
                    _dtReqPara = Convert.ToDateTime(_dtReq.Rows[0]["grad_date_param"]);
                else
                    _dtReqPara = txtDate.Value.Date;

            }
        }

        private void CancelCreditNote(string _invoiceNo)
        {
            try
            {
                if (!string.IsNullOrEmpty(_invoiceNo))
                {
                    DataTable _creditNotes = new DataTable();
                    _creditNotes = CHNLSVC.Financial.GetCreditNotesbyInvoice(_invoiceNo);
                    if (_creditNotes.Rows.Count > 0)
                    {
                        foreach (DataRow _creditNote in _creditNotes.Rows)
                        {
                            CHNLSVC.Financial.ActivateCreditNote(_creditNote["SARD_REF_NO"].ToString(), "CANCEL", BaseCls.GlbUserID);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                CHNLSVC.CloseChannel();
                MessageBox.Show("System error. Credit note couldn't cancel" + Environment.NewLine + ex.Message, "Invoice Cancellation", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            
        }

        private void pnlReservation_Paint(object sender, PaintEventArgs e)
        {

        }

        private void btnCloseReservation_Click(object sender, EventArgs e)
        {
            pnlReservation.Visible = false;
        }

        private void btnAddReservation_Click(object sender, EventArgs e)
        {
            try
            {
                if (!string.IsNullOrEmpty(txtReservation.Text))
                {
                    if ((_invoiceItemList == null) || (_invoiceItemList.Count == 0))
                    {
                        MessageBox.Show("Please add an item", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return;
                    }

                    if (string.IsNullOrEmpty(txtDelLocation.Text)) { MessageBox.Show("Delivery location cannot be blank! Please select the delivery location", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return; }

                    bool _custAvailableForResNo = CHNLSVC.Sales.Check_resno(BaseCls.GlbUserComCode, txtReservation.Text, txtCustomer.Text, BaseCls.GlbUserDefLoca);
                    if (!_custAvailableForResNo)
                    {
                        //update by akila 2017/08/30 - check reservation hdr
                        List<INR_RES> _reservations = new List<INR_RES>();
                        INR_RES _resavationHdr = new INR_RES();
                        _resavationHdr.IRS_COM = BaseCls.GlbUserComCode;
                        _resavationHdr.IRS_RES_NO = txtReservation.Text.ToUpper().Trim();

                        _reservations = CHNLSVC.Inventory.GET_INR_RES_DATA(_resavationHdr);
                        if (_reservations != null && _reservations.Count > 0)
                        {
                            string _tmpCustomer = _reservations.First().IRS_CUST_CD;
                            if (_tmpCustomer != "CASH" && _tmpCustomer != "NA" && _tmpCustomer != "N/A")
                            {
                                MessageBox.Show("Invalid reservation #." + Environment.NewLine + "This reservation # not belongs to selected customer !", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                Cursor = DefaultCursor;
                                return;
                            }
                        }
                        else 
                        {
                            MessageBox.Show("Invalid reservation #." + Environment.NewLine + "This reservation # not belongs to selected customer !", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            Cursor = DefaultCursor;
                            return;
                        }
                        
                    }

                    List<INR_RES_DET> _reservationDetList = new List<INR_RES_DET>();
                    _reservationDetList = CHNLSVC.Sales.GET_RESERVATION_DET(0, txtReservation.Text);
                    if (_reservationDetList != null && _reservationDetList.Count > 0)
                    {
                        string _itemCode = _invoiceItemList.Where(x => x.Sad_itm_line == _selectedItemLine).First().Sad_itm_cd;
                        decimal _balanceQty = _reservationDetList.Sum(x => x.IRD_RES_BQTY);
                        //decimal _resQty = _reservationDetList.Where(x => x.IRD_ITM_CD == _item.Mi_cd).Select(x => x.IRD_RES_QTY - (x.IRD_RES_CQTY + x.Ird_so_mrn_bqty)).First();

                        if (_invoiceItemList.Where(x => x.Sad_itm_line == _selectedItemLine).First().Sad_qty > _balanceQty)
                        {
                            MessageBox.Show("Selected item quantity has exceeded the reservation quantity!", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return;
                        }

                                                int _existItmCount = _reservationDetList.Where(x => x.IRD_ITM_CD == _itemCode).ToList().Count;
                        //if (_reservationDetList[0].IRD_ITM_CD == _itemCode)
                        if (_existItmCount > 0)
                        {
                            List<INR_RES_LOG> _reservvationLogDet = new List<INR_RES_LOG>();
                            INR_RES_LOG _log = new INR_RES_LOG();
                            _log.IRL_RES_NO = txtReservation.Text;
                            _log.IRL_CURT_COM = BaseCls.GlbUserComCode;
                            _log.IRL_CURT_LOC = txtDelLocation.Text.Trim().ToUpper(); //BaseCls.GlbUserDefLoca;
                            _log.IRL_CURT_DOC_TP = "INV";
                            _log.IRL_ITM_CD = _itemCode;
                            //_log.IRL_ITM_STUS = cmbStatus.Text.Trim();
                            _log.IRL_ACT = 1;

                            _reservvationLogDet = CHNLSVC.Inventory.GET_INR_RES_LOG_DATA_NEW(_log);
                            if ((_reservvationLogDet != null) && (_reservvationLogDet.Count > 0))
                            {
                                _balanceQty = _reservvationLogDet.Sum(x => x.IRL_RES_BQTY);
                                if (_invoiceItemList.Where(x => x.Sad_itm_line == _selectedItemLine).First().Sad_qty > _balanceQty)
                                {
                                    MessageBox.Show("Selected item quantity has exceeded the reservation quantity!", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return;
                                }

                                if (_reservvationLogDet.FirstOrDefault().IRL_ITM_STUS != cmbStatus.Text.Trim())
                                {
                                    MessageBox.Show("Selected item status not match with reservation item. (" + _reservvationLogDet.FirstOrDefault().IRL_ITM_STUS + ")", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return;
                                }

                                if ((_invoiceItemList != null) && (_invoiceItemList.Count > 0))
                                {
                                    _invoiceItemList.Where(x => x.Sad_itm_line == _selectedItemLine).ToList().ForEach(x => { x.Sad_res_no = txtReservation.Text.ToUpper().Trim(); x.sad_resupdate = 1; });
                                    BindingSource _bindSource = new BindingSource();
                                    _bindSource.DataSource = _invoiceItemList;
                                    gvInvoiceItem.DataSource = _bindSource;

                                    MessageBox.Show("Reservation # has been updated", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    txtReservation.Text = null;
                                    pnlReservation.Visible = false;
                                }
                            }
                            else { MessageBox.Show("Reservation log details not found. Please check your dispatch location", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return; }
                        }
                        else { MessageBox.Show("Invalid item code. Selected item doesn't have a reservation", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return; }
                    }
                    else { MessageBox.Show("Please check your dispatch location", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return; }
                    
                }
                else { MessageBox.Show("Please add reservation #", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); Cursor = DefaultCursor; return; }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while adding reservation #" + Environment.NewLine + ex.Message, "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Error);
                CHNLSVC.CloseAllChannels();
                Cursor = DefaultCursor;                
            }            
        }

        private void chkReservation_CheckedChanged(object sender, EventArgs e)
        {
            //if (chkReservation.Checked) { chkReservation.Enabled = false; }
            //else { chkReservation.Enabled = true; }
        }

        private void btnSearchReservation_Click(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(txtCustomer.Text))
                {
                    MessageBox.Show("Please select a customer", "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    return;
                }

                _commonSearch = new CommonSearch.CommonSearch();
                this.Cursor = Cursors.WaitCursor;
                _commonSearch.ReturnIndex = 0;
                _commonSearch.IsSearchEnter = true;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.ReservationNo);
                DataTable _result = new DataTable();

                if (string.IsNullOrEmpty(txtCustomer.Text))
                {
                    _result = CHNLSVC.CommonSearch.Search_INT_RES(_commonSearch.SearchParams, null, null);
                }
                else { _result = CHNLSVC.CommonSearch.Search_INT_RES(_commonSearch.SearchParams, "CUSTOMER", txtCustomer.Text); }
                
                _commonSearch.dvResult.DataSource = _result;
                _commonSearch.BindUCtrlDDLData(_result);
                _commonSearch.obj_TragetTextBox = txtReservation;
                this.Cursor = Cursors.Default;
                _commonSearch.ShowDialog();
                txtReservation.Select();
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while load reservation details." + Environment.NewLine + ex.Message, "Add Reservation", MessageBoxButtons.OK, MessageBoxIcon.Error);
                CHNLSVC.CloseAllChannels();
                Cursor = DefaultCursor;
            }            
        }

        private MasterBusinessEntity NewCustomer()
        {
            MasterBusinessEntity _newCustomer = new MasterBusinessEntity();
            //MasterBusinessEntity _newCustomer = GetExistingCustomer(txtCustomer.Text, txtNIC.Text, txtMobile.Text);
            //if (_newCustomer != null)
            //{
            //    bool _hasChanged = false;
            //    if (_newCustomer.Mbe_nic != txtNIC.Text.Trim().ToUpper())
            //    {
            //        _hasChanged = true;
            //    }
            //    else if (_newCustomer.Mbe_mob != txtMobile.Text.Trim().ToUpper())
            //    {
            //        _hasChanged = true;
            //    }
            //    else if (_newCustomer.Mbe_add1 != txtAddress1.Text.Trim().ToUpper())
            //    {
            //        _hasChanged = true;
            //    }
            //    else if (_newCustomer.Mbe_add2 != txtAddress2.Text.Trim().ToUpper())
            //    {
            //        _hasChanged = true;
            //    }

            //    if (_hasChanged) 
            //    {
            //        DialogResult _result = MessageBox.Show("Customer details have been changed. Do you want to save?", "Sales Invoice - Save Customer", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            //        if (_result == System.Windows.Forms.DialogResult.No) { return null; }
            //    }

            //    _newCustomer.Mbe_nic = txtNIC.Text;
            //    _newCustomer.Mbe_mob = txtMobile.Text;
            //    _newCustomer.Mbe_add1 = txtAddress1.Text;
            //    _newCustomer.Mbe_add2 = txtAddress2.Text;
            //}
            //else
            //{
            _newCustomer = new MasterBusinessEntity();
            _newCustomer.Mbe_acc_cd = null;
            _newCustomer.Mbe_act = true;
            _newCustomer.Mbe_add1 = txtAddress1.Text.Trim();
            _newCustomer.Mbe_add2 = txtAddress2.Text.Trim();
            _newCustomer.Mbe_agre_send_sms = false;

            //akila 2017/10/12
            if ((string.IsNullOrEmpty(txtCustomer.Text)) && (IsNewCustomer))
            {
                _newCustomer.Mbe_cd = "CASH"; //new customer
            }
            else
            {
                _newCustomer.Mbe_cd = txtCustomer.Text.Trim();
            }
            //_newCustomer.Mbe_cd = null;
            _newCustomer.Mbe_com = BaseCls.GlbUserComCode;
            _newCustomer.Mbe_contact = null;
            _newCustomer.Mbe_cr_add1 = txtAddress1.Text.Trim();
            _newCustomer.Mbe_cr_add2 = txtAddress1.Text.Trim();
            _newCustomer.Mbe_cr_email = null;
            _newCustomer.Mbe_cr_fax = null;
            _newCustomer.Mbe_cre_by = BaseCls.GlbUserID;
            _newCustomer.Mbe_cre_dt = Convert.ToDateTime(DateTime.Today).Date;
            _newCustomer.Mbe_cre_pc = BaseCls.GlbUserDefProf;
            _newCustomer.Mbe_cust_com = BaseCls.GlbUserComCode;
            _newCustomer.Mbe_cust_loc = BaseCls.GlbUserDefLoca;
            _newCustomer.Mbe_fax = null;
            _newCustomer.Mbe_ho_stus = "GOOD";
            _newCustomer.Mbe_income_grup = null;
            _newCustomer.Mbe_intr_com = false;
            _newCustomer.Mbe_is_suspend = false;
            _newCustomer.Mbe_is_svat = false;
            _newCustomer.Mbe_is_tax = false;
            _newCustomer.Mbe_mob = txtMobile.Text.Trim();
            _newCustomer.Mbe_name = txtCusName.Text.Trim();
            _newCustomer.Mbe_nic = txtNIC.Text.Trim();
            _newCustomer.Mbe_oth_id_no = null;
            _newCustomer.Mbe_oth_id_tp = null;
            _newCustomer.Mbe_pc_stus = "GOOD";
            _newCustomer.Mbe_sub_tp = null;
            _newCustomer.Mbe_tax_ex = false;
            _newCustomer.Mbe_town_cd = txtPerTown.Text.Trim();
            _newCustomer.Mbe_tp = "C";
            _newCustomer.Mbe_wr_country_cd = null;
            _newCustomer.Mbe_wr_distric_cd = null;
            _newCustomer.Mbe_wr_proffesion = null;
            _newCustomer.Mbe_wr_province_cd = null;
            _newCustomer.Mbe_wr_town_cd = null;
            _newCustomer.MBE_FNAME = txtCusName.Text.Trim();
            _newCustomer.MBE_TIT = cmbTitle.Text.Trim();
            _newCustomer.Mbe_agre_send_email = false;
            _newCustomer.Mbe_cate = "INDIVIDUAL";
            _newCustomer.Mbe_town_cd = txtPerTown.Text.ToUpper();
            _newCustomer.Mbe_cre_by = BaseCls.GlbUserID;
            _newCustomer.Mbe_mod_by = BaseCls.GlbUserID;
            _newCustomer.Mbe_mod_dt = DateTime.Now;
            _newCustomer.Mbe_mod_session = BaseCls.GlbUserSessionID;
            _newCustomer.Mbe_cre_session = BaseCls.GlbUserSessionID;
            //}
            //mbe_cre_by,mbe_mod_by,mbe_mod_dt,mbe_mod_session,mbe_cre_session
            return _newCustomer;
        }

        //add by akila 2017/10/16 - Backward tax calculation
        private decimal GetItemUnitPrice(decimal _unitAmount, decimal _taxAmt, string _item, string _itmStatus, bool _isTaxfaction)
        {
            decimal _unitPrice = 0;

            try
            {
                bool _isTaxExempted = (lblVatExemptStatus.Text == "Available") ? true : false;
                bool _isCurrentDayTransaction = (txtDate.Value.Date == _serverDt) ? true : false;


                if (!_isTaxExempted)
                {
                    List<MasterItemTax> _taxDetails = new List<MasterItemTax>();
                    MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);

                    if (_isCurrentDayTransaction)
                    {
                        if (_isTaxfaction == false)
                        {
                            if (_isStrucBaseTax == true)
                            {
                                _taxDetails = CHNLSVC.Sales.GetTax_strucbase(BaseCls.GlbUserComCode, _item, _itmStatus, null, null, _mstItem.Mi_anal1);
                            }
                            else
                                _taxDetails = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, _itmStatus);
                        }
                        else
                        {
                            if (_isStrucBaseTax == true)
                            {
                                _taxDetails = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _itmStatus, string.Empty, "VAT", _mstItem.Mi_anal1);
                            }
                            else
                                _taxDetails = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _itmStatus, string.Empty, "VAT");
                        }
                    }
                    else
                    {
                        if (_isTaxfaction == false)
                        {
                            _taxDetails = CHNLSVC.Sales.GetTaxEffDt(BaseCls.GlbUserComCode, _item, _itmStatus, txtDate.Value.Date);
                        }
                        else
                        {
                            _taxDetails = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, _item, _itmStatus, string.Empty, "VAT", txtDate.Value.Date);
                        }

                        if (_taxDetails == null || _taxDetails.Count < 1)
                        {
                            List<LogMasterItemTax> _taxsEffDt = new List<LogMasterItemTax>();
                            if (_isTaxfaction == false)
                            {
                                _taxsEffDt = CHNLSVC.Sales.GetTaxLog(BaseCls.GlbUserComCode, _item, _itmStatus, txtDate.Value.Date);
                            }
                            else
                            {
                                _taxsEffDt = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, _item, _itmStatus, string.Empty, "VAT", txtDate.Value.Date);
                            }

                            if (_taxsEffDt != null && _taxsEffDt.Count > 0)
                            {
                                foreach (LogMasterItemTax logTax in _taxsEffDt)
                                {
                                    MasterItemTax _masterTax = new MasterItemTax();
                                    _masterTax.Mict_act = logTax.Lict_act;
                                    _masterTax.Mict_com = logTax.Lict_com;
                                    _masterTax.Mict_effct_dt = logTax.Lict_effect_dt;
                                    _masterTax.Mict_itm_cd = logTax.Lict_itm_cd;
                                    _masterTax.Mict_stus = logTax.Lict_stus;
                                    _masterTax.Mict_tax_cd = logTax.Lict_tax_cd;
                                    _masterTax.Mict_tax_rate = logTax.Lict_tax_rate;
                                    _masterTax.Mict_taxrate_cd = logTax.Lict_taxrate_cd;
                                    _taxDetails.Add(_masterTax);
                                }
                            }
                        }                            
                    }

                    if (_taxDetails != null && _taxDetails.Count > 0)
                    {
                        //calculate unit price without vat
                        var _vat = _taxDetails.Where(x => x.Mict_tax_cd == "VAT").SingleOrDefault();
                        if (_vat != null)
                        {
                            _unitPrice = (_unitAmount * 100) / (100 + _vat.Mict_tax_rate);//price with nbt
                        }

                        var _nbt = _taxDetails.Where(x => x.Mict_tax_cd == "NBT").SingleOrDefault();
                        if (_nbt != null)
                        {
                            _unitPrice = (_unitPrice * 100) / (100 + _nbt.Mict_tax_rate);//price without nbt
                        }
                    }
                    else { _unitPrice = _unitAmount; }
                }
                else { _unitPrice = _unitAmount; }

                return _unitPrice;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void BackwardTaxCalculation()
        {
            try
            {
                //add by akila  2017/10/17
                if (_priceBookLevelRef != null && _priceBookLevelRef.Sapl_vat_calc && _priceBookLevelRef.Sapl_tax_cal_method == 1)
                {
                    decimal _tmpPrice = 0;
                    decimal _taxAmt = 0;

                    decimal.TryParse(txtTaxAmt.Text, out _taxAmt);
                    decimal.TryParse(txtUnitPrice.Text.Trim(), out _tmpPrice);

                    if (_tmpPrice > 0)
                    {
                        if (Math.Round(_tmpPrice) != Math.Round(SSPriceBookPrice))
                        {
                            //decimal _unitPrice = FigureRoundUp(RecalculateTax(_tmpPrice, _taxAmt, txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString(), true), false);
                            decimal _unitPrice = FigureRoundUp(GetItemUnitPrice(_tmpPrice, _taxAmt, txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString(), true), false);
                            txtUnitPrice.Text = FormatToCurrency(_unitPrice.ToString());
                            txtUnitPrice.ReadOnly = true;
                            IsOrgPriceEdited = true;
                        }
                    }                                             
                }
            }
            catch (Exception)
            {
                txtUnitPrice.Text = FormatToCurrency(SSPriceBookPrice.ToString()); 
                throw;
            }
        }

        //private void LoadCustomer(string _customerCode, string _nicNo, string _mobileNo)
        //{
        //    try
        //    {
        //        if (!string.IsNullOrEmpty(txtCustomer.Text))
        //        {
        //            if (string.IsNullOrEmpty(txtCustomer.Text)) return;

        //            if (cmbInvType.Text.Trim() == "CRED" && txtCustomer.Text.Trim() == "CASH")
        //            {
        //                this.Cursor = Cursors.Default;
        //                using (new CenterWinDialog(this)) { MessageBox.Show("You can not select customer as CASH, because your invoice type is " + cmbInvType.Text, "Credit Customer", MessageBoxButtons.OK, MessageBoxIcon.Information); }
        //                ClearCustomer(false);
        //                txtCustomer.Focus();
        //                return;
        //            }

        //        }
        //        else if (!string.IsNullOrEmpty(txtNIC.Text))
        //        {

        //        }
        //        else if(!string.IsNullOrEmpty(txtMobile.Text))
        //        {

        //        }
        //    }
        //    catch (Exception)
        //    {

        //        throw;
        //    }
        //}

        //private MasterBusinessEntity GetCustomerDetails(string _customerCode, string _nicNo, string _mobileNo)
        //{
        //    MasterBusinessEntity _customer = null;
        //    try
        //    {
        //        if (!string.IsNullOrEmpty(txtCustomer.Text))
        //        {
        //            _customer = CHNLSVC.Sales.GetCustomerProfileByCom(txtCustomer.Text, null, null, null, null, BaseCls.GlbUserComCode);
        //        }
        //        else if (!string.IsNullOrEmpty(txtNIC.Text))
        //        {
        //            _customer = CHNLSVC.Sales.GetCustomerProfileByCom(null, txtNIC.Text, null, null, null, BaseCls.GlbUserComCode);
        //        }
        //        else if(!string.IsNullOrEmpty(txtMobile.Text))
        //        {
        //            _customer = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, string.Empty, string.Empty, txtMobile.Text, "C");
        //        }

        //        if (_customer != null && !string.IsNullOrEmpty(_customer.Mbe_cd)) { IsNewCustomer = false; } else { IsNewCustomer = true; _customer = null; }
        //    }
        //    catch (Exception ex)
        //    {
        //        IsNewCustomer = false;
        //        MessageBox.Show("An error occurred while loading customer information!" + Environment.NewLine + ex.Message,"Sales Invoice - Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }
        //    return _customer;
        //}

        //by akila 2017/09/18
        //private GroupBussinessEntity GetGroupCustomerDetails(string _customerCode, string _nic, string _mobNo)
        //{
        //    GroupBussinessEntity _customer = null;

        //    try
        //    {
        //        if (!string.IsNullOrEmpty(txtCustomer.Text))
        //        {
        //            _customer = CHNLSVC.Sales.GetCustomerProfileByCom(txtCustomer.Text, null, null, null, null, BaseCls.GlbUserComCode);
        //        }
        //        else if (!string.IsNullOrEmpty(txtNIC.Text))
        //        {
        //            _customer = CHNLSVC.Sales.GetCustomerProfileByCom(null, txtNIC.Text, null, null, null, BaseCls.GlbUserComCode);
        //        }
        //        else if (!string.IsNullOrEmpty(txtMobile.Text))
        //        {
        //            _customer = CHNLSVC.Sales.GetActiveBusinessCompanyDetail(BaseCls.GlbUserComCode, string.Empty, string.Empty, txtMobile.Text, "C");
        //        }

        //        if (_customer != null && !string.IsNullOrEmpty(_customer.Mbe_cd)) { IsNewCustomer = false; } else { IsNewCustomer = true; _customer = null; }
        //    }
        //    catch (Exception ex)
        //    {
        //        IsNewCustomer = false;
        //        MessageBox.Show("An error occurred while loading customer information!" + Environment.NewLine + ex.Message, "Sales Invoice - Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }
        //    return _customer;
        //}
        
        
        private void txtUnitAmt_Leave(object sender, EventArgs e)
        {

            //decimal _unitAmount = 0;
            //decimal.TryParse(txtUnitAmt.Text, out _unitAmount);
            //if (_unitAmount > 0)
            //{
            //    //add by akila  2017/10/17
            //    if (_priceBookLevelRef != null && _priceBookLevelRef.Sapl_vat_calc && _priceBookLevelRef.Sapl_tax_cal_method == 1)
            //    {
            //        decimal _unitAmt = 0;
            //        decimal _taxAmt = 0;

            //        decimal.TryParse(txtUnitAmt.Text, out _unitAmt);
            //        decimal.TryParse(txtTaxAmt.Text, out _taxAmt);

            //        decimal _unitPrice = FigureRoundUp(GetItemUnitPrice(_unitAmt, _taxAmt, txtItem.Text.Trim(), cmbStatus.SelectedValue.ToString(), true), false);
            //        txtUnitPrice.Text = FormatToCurrency(_unitPrice.ToString());
            //        txtUnitAmt.Text = FormatToCurrency(Convert.ToString(FigureRoundUp(Convert.ToDecimal(txtUnitPrice.Text.Trim()) * Convert.ToDecimal(txtQty.Text.Trim()), true)));
            //    }
            //}
            //else { txtUnitPrice.Text = "0.00"; }
        }

        //By akila 2017/09/28 - Use CCT pay by credit card
        private string PayByCCT(List<RecieptItem> _paymentDetails, ref int _status)
        {
            string _returnMsg = string.Empty;
            decimal _payAmount = 0;
            CreditCardTransLog = ucPayModes1.CreditCardTransLog;

            try
            {
                if (_paymentDetails != null && _paymentDetails.Count > 0)
                {
                    var _payments = _paymentDetails.Where(x => x.Sard_pay_tp == "CRCD").GroupBy(grp => new { grp.Sard_credit_card_bank, grp.Sard_cc_tp }).Select(x => new { x.Key.Sard_credit_card_bank, x.Key.Sard_cc_tp, Amount = x.Sum(y => y.Sard_settle_amt) }).ToList();
                    if (_payments != null && _payments.Count > 0)
                    {
                        if (_payments.Count > 1)
                        {
                            CreditCardTransLog.Sctl_app_amt = -1;

                            Regex _digitOnlyNo = new Regex("[^0-9]+");
                            CCTBaseComponent.CCTBase.PayAmount = _digitOnlyNo.Replace(_payAmount.ToString("N0"), string.Empty);
                            _returnMsg = CCTBaseComponent.CCTBase.ProcessPayment(ref _status);

                            _status = 1;
                            return  "Multiple card payment not allow";
                        }
                        else
                        {
                            _payAmount = Convert.ToDecimal(_payments.Sum(x => x.Amount));
                        }

                        if (_payAmount > 0)
                        {
                            CreditCardTransLog.Sctl_app_amt = _payAmount;
                            _payAmount = _payAmount * 100;

                            Regex _digitOnlyNo = new Regex("[^0-9]+");
                            CCTBaseComponent.CCTBase.PayAmount = _digitOnlyNo.Replace(_payAmount.ToString("N0"),string.Empty);
                            _returnMsg = CCTBaseComponent.CCTBase.ProcessPayment(ref _status);
                            if (CCTBaseComponent.CCTBase.IsCCTOnline)
                            {
                                CreditCardTransLog.Sctl_cus_name = CCTBaseComponent.CCTBase.CardHolderName;
                                CreditCardTransLog.Sctl_app_cd = CCTBaseComponent.CCTBase.AppovelCode;
                                CreditCardTransLog.Sctl_rrn = CCTBaseComponent.CCTBase.RetrevelRefNo;
                                CreditCardTransLog.Sctl_trans_trace = CCTBaseComponent.CCTBase.TransTrace;
                                CreditCardTransLog.Sctl_batch_no = CCTBaseComponent.CCTBase.BatchNo;
                                CreditCardTransLog.Sctl_termianl_id = CCTBaseComponent.CCTBase.TerminalId;
                                CreditCardTransLog.Sctl_mer_id = CCTBaseComponent.CCTBase.MerchantId;
                                CreditCardTransLog.Sctl_aid = CCTBaseComponent.CCTBase.Aid;
                                CreditCardTransLog.Sctl_trans_crypto = CCTBaseComponent.CCTBase.TransCryptogram;
                                CreditCardTransLog.Sctl_cre_by = BaseCls.GlbUserID;
                                CreditCardTransLog.Sctl_session_id = BaseCls.GlbUserSessionID;
                            }
                            else { CreditCardTransLog = null; }
                        }
                        else
                        {
                           return "Invalid payment. Please check the amount";
                        }

                    }
                }                
            }
            catch (Exception ex)
            {
                _returnMsg = "Pay by CCT error " + ex.Message;
            } 
            return _returnMsg;
        }

        //by akila 2017/10/10
        //private List<PcAllowBanks> LoadPcAllowBanks(string _comCode, string _profitCenter)
        //{
        //    List<PcAllowBanks> _pcAllowBanks = new List<PcAllowBanks>();

        //    try
        //    {
        //        _pcAllowBanks = CHNLSVC.General.GetPcAllowBanks(_comCode, _profitCenter);                
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show("An error occurred while loading PC allow bank details "  + ex.Message, "PC Allow Banks", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }

        //    if (_pcAllowBanks != null && _pcAllowBanks.Count > 0)
        //    {
        //        CCTBaseComponent.CCTBase.IsCCTOnline = true;
        //    }
        //    else
        //    {
        //        CCTBaseComponent.CCTBase.IsCCTOnline = false;
        //    }

        //    return _pcAllowBanks;
        //}

        private bool IsValidCustomer(string _customerCode, string _invType, decimal _invAmount = 0)
        {
            bool _returnStatus = true;

            try
            {
                if (string.IsNullOrEmpty(_invType))
                {
                    MessageBox.Show("Invalid invoice type", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    cmbInvType.Focus();
                    return false;
                }
                else if (string.IsNullOrEmpty(_customerCode))
                {
                    MessageBox.Show("Please select a customer!", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtCustomer.Focus();
                    return false;
                }
                else
                {
                    //Get allowed types for selected inv type--------------------------
                    sar_tp _allowInvType = new sar_tp();
                    _allowInvType.srtp_cd = _invType;
                    _allowInvType = CHNLSVC.General.GetMasterPrefixData(_allowInvType);

                    if (_allowInvType != null)
                    {
                        if (_allowInvType.srtp_main_tp == "CREDIT")
                        {
                            //get customer allow inv types---------------------------
                            DataTable _cutomerAllowInvTypes = new DataTable();
                            _cutomerAllowInvTypes = CHNLSVC.Sales.GetCustomerAllowInvoiceTypeNew(BaseCls.GlbUserComCode, _customerCode);
                            if (_cutomerAllowInvTypes.Rows.Count > 0)
                            {
                                List<MasterInvoiceType> SalesTypes = new List<MasterInvoiceType>();
                                foreach (DataRow _row in _cutomerAllowInvTypes.Rows)
                                {
                                    MasterInvoiceType _type = new MasterInvoiceType();
                                    _type.Srtp_cd = _row["Srtp_cd"].ToString();
                                    _type.Srtp_desc = _row["SRTP_DESC"].ToString();
                                    _type.Srtp_valid_from_dt = _row["MBSA_VALID_FRM_DT"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(_row["MBSA_VALID_FRM_DT"]).Date;
                                    _type.Srtp_valid_to_dt = _row["MBSA_VALID_TO_DT"] == DBNull.Value ? DateTime.MinValue : Convert.ToDateTime(_row["MBSA_VALID_TO_DT"]).Date;
                                    SalesTypes.Add(_type);
                                }

                                if (SalesTypes != null && SalesTypes.Count > 0)
                                {
                                    //check selected invtype is allow----------------------------------
                                    var _selectedTypes = SalesTypes.Where(x => x.Srtp_cd == _invType).ToList();
                                    if (_selectedTypes != null && _selectedTypes.Count > 0)
                                    {
                                        //check invoice type valid period----------------------------------------
                                        var _tmpResult = SalesTypes.Where(x => x.Srtp_cd == _invType && x.Srtp_valid_from_dt <= txtDate.Value.Date && x.Srtp_valid_to_dt >= txtDate.Value.Date).ToList();
                                        if (_tmpResult == null || _tmpResult.Count < 1)
                                        {
                                            MessageBox.Show("Customer is not in valid date range for enter transaction under selected invoice type.!", "Invoice Types", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            ClearCustomer(true);
                                            cmbInvType.Focus();
                                            return false;
                                        }
                                        else
                                        {
                                            return true;
                                        }
                                    }
                                    else { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type.", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); ClearCustomer(true); txtCustomer.Focus(); return false; }
                                }
                            }
                            else { MessageBox.Show("Selected Customer is not allow for enter transaction under selected invoice type!", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); ClearCustomer(true); cmbInvType.Focus(); return false; }
                        }
                        else { return true; }
                    }
                    else { MessageBox.Show("Invoice types not found", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning); ClearCustomer(true); cmbInvType.Focus(); return false; }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while validating customer details. " + Environment.NewLine + ex.Message, "Invoice Types", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                ClearCustomer(true);
                txtCustomer.Focus();
                _returnStatus = false;
            }

            return _returnStatus;
        }

        private bool IsCustCreditLimitIsValid()
        {
            bool _isValid = false;
            try
            {
                string _invType = cmbInvType.Items.Count > 0 ? cmbInvType.SelectedValue.ToString() : string.Empty;

                //Get allowed types for selected inv type--------------------------
                sar_tp _allowInvType = new sar_tp();
                _allowInvType.srtp_cd = _invType;
                _allowInvType = CHNLSVC.General.GetMasterPrefixData(_allowInvType);

                decimal _invoiceAmount = 0;
                decimal.TryParse(lblGrndTotalAmount.Text, out _invoiceAmount);

                if (_allowInvType != null)
                {
                    if (_allowInvType.srtp_main_tp == "CREDIT")
                    {
                        if (_invoiceAmount > 0)
                        {
                            //check customer allow credit limit

                            if (!string.IsNullOrEmpty(txtCustomer.Text.Trim()))
                            {
                                CustomerAccountRef _custAccount = CHNLSVC.Sales.GetCustomerAccount(BaseCls.GlbUserComCode, txtCustomer.Text.Trim());
                                if (_custAccount != null && _custAccount.Saca_com_cd != null)
                                {
                                    DataTable _custInvBalance = new DataTable();
                                    _custInvBalance = CHNLSVC.Sales.GetCustomerInvoiceBalance(BaseCls.GlbUserComCode, txtCustomer.Text.Trim(), _invType);
                                    if (_custInvBalance.Rows.Count > 0)
                                    {
                                        decimal _availableBalance = 0;
                                        decimal.TryParse(_custInvBalance.Rows[0]["BalanceAmt"].ToString(), out _availableBalance);
                                        decimal _tmptotalBalance = _availableBalance + _invoiceAmount;
                                        decimal _creditLimit = _custAccount.Saca_crdt_lmt;
                                        if (_tmptotalBalance > _creditLimit)
                                        {
                                            MessageBox.Show("Customer credit limit has exceeded", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            return false;
                                        }
                                        else { return true; }
                                    }
                                    else
                                    {
                                        MessageBox.Show("Customer due invoice balance not found", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return false;
                                    }
                                }
                                else
                                {
                                    MessageBox.Show("Customer credit limit information not found", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return false;
                                }
                            }
                            else
                            {
                                MessageBox.Show("Please select a customer", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                return false;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Invalid invoice amount", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            return false;
                        }
                    }
                    else
                    {
                        return true;
                    }
                }
                else
                {
                    MessageBox.Show("Allowed invoice type not found", "Sales Invoice - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred while validating customer credit limit. " + Environment.NewLine + ex.Message, "Invoice Types", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                _isValid = false;
            }
            return _isValid;
        }

        private decimal RecalculateTax(decimal _unitAmount, decimal _taxAmt, string _item, string _itmStatus, bool _isTaxfaction)
        {
            decimal _tax = 0;

            try
            {
                bool _isTaxExempted = (lblVatExemptStatus.Text == "Available") ? true : false;
                bool _isCurrentDayTransaction = (txtDate.Value.Date == _serverDt) ? true : false;


                if (!_isTaxExempted)
                {
                    List<MasterItemTax> _taxDetails = new List<MasterItemTax>();
                    MasterItem _mstItem = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);

                    if (_isCurrentDayTransaction)
                    {
                        if (_isTaxfaction == false)
                        {
                            if (_isStrucBaseTax == true)
                            {
                                _taxDetails = CHNLSVC.Sales.GetTax_strucbase(BaseCls.GlbUserComCode, _item, _itmStatus, null, null, _mstItem.Mi_anal1);
                            }
                            else
                                _taxDetails = CHNLSVC.Sales.GetTax(BaseCls.GlbUserComCode, _item, _itmStatus);
                        }
                        else
                        {
                            if (_isStrucBaseTax == true)
                            {
                                _taxDetails = CHNLSVC.Sales.GetItemTax_strucbase(BaseCls.GlbUserComCode, _item, _itmStatus, string.Empty, "VAT", _mstItem.Mi_anal1);
                            }
                            else
                                _taxDetails = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _itmStatus, string.Empty, "VAT");
                        }
                    }
                    else
                    {
                        if (_isTaxfaction == false)
                        {
                            _taxDetails = CHNLSVC.Sales.GetTaxEffDt(BaseCls.GlbUserComCode, _item, _itmStatus, txtDate.Value.Date);
                        }
                        else
                        {
                            _taxDetails = CHNLSVC.Sales.GetItemTaxEffDt(BaseCls.GlbUserComCode, _item, _itmStatus, string.Empty, "VAT", txtDate.Value.Date);
                        }

                        if (_taxDetails == null || _taxDetails.Count < 1)
                        {
                            List<LogMasterItemTax> _taxsEffDt = new List<LogMasterItemTax>();
                            if (_isTaxfaction == false)
                            {
                                _taxsEffDt = CHNLSVC.Sales.GetTaxLog(BaseCls.GlbUserComCode, _item, _itmStatus, txtDate.Value.Date);
                            }
                            else
                            {
                                _taxsEffDt = CHNLSVC.Sales.GetItemTaxLog(BaseCls.GlbUserComCode, _item, _itmStatus, string.Empty, "VAT", txtDate.Value.Date);
                            }

                            if (_taxsEffDt != null && _taxsEffDt.Count > 0)
                            {
                                foreach (LogMasterItemTax logTax in _taxsEffDt)
                                {
                                    MasterItemTax _masterTax = new MasterItemTax();
                                    _masterTax.Mict_act = logTax.Lict_act;
                                    _masterTax.Mict_com = logTax.Lict_com;
                                    _masterTax.Mict_effct_dt = logTax.Lict_effect_dt;
                                    _masterTax.Mict_itm_cd = logTax.Lict_itm_cd;
                                    _masterTax.Mict_stus = logTax.Lict_stus;
                                    _masterTax.Mict_tax_cd = logTax.Lict_tax_cd;
                                    _masterTax.Mict_tax_rate = logTax.Lict_tax_rate;
                                    _masterTax.Mict_taxrate_cd = logTax.Lict_taxrate_cd;
                                    _taxDetails.Add(_masterTax);
                                }
                            }
                        }
                    }

                    if (_taxDetails != null && _taxDetails.Count > 0)
                    {
                        //calculate unit price without vat
                        var _vat = _taxDetails.Where(x => x.Mict_tax_cd == "VAT").SingleOrDefault();
                        if (_vat != null)
                        {
                            _tax += (_unitAmount * _vat.Mict_tax_rate) / (100 + _vat.Mict_tax_rate);//price with nbt
                        }

                        var _nbt = _taxDetails.Where(x => x.Mict_tax_cd == "NBT").SingleOrDefault();
                        if (_nbt != null)
                        {
                            _tax += ((_unitAmount - _tax) * _nbt.Mict_tax_rate) / (100 + _nbt.Mict_tax_rate);//price with nbt

                        }
                    }
                    else { _tax = _unitAmount; }
                }
                else { _tax = _unitAmount; }

                return _tax;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void gvgvo_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (gvgvo.ColumnCount > 0)
                {
                    Int32 _rowIndex = e.RowIndex;
                    Int32 _colIndex = 0;
                    if (_rowIndex != -1)
                    {
                        if (_colIndex == 0)
                        {

                            string gv_code = (string)gvgvo.Rows[_rowIndex].Cells["gv_code"].Value;
                            gvp_gv_cd = (string)gvgvo.Rows[_rowIndex].Cells["gv_code"].Value;
                            lblgvo.Text = gvp_gv_cd;
                            Int32 page_no = Convert.ToInt32(gvgvo.Rows[_rowIndex].Cells["page_no"].Value);
                            DataTable _dtVou = new DataTable();
                            _dtVou = CHNLSVC.Sales.GetPromoVoucherNo(BaseCls.GlbUserComCode, txtCustomer.Text, txtNIC.Text, txtMobile.Text, txtDate.Value.Date, page_no, gv_code);
                            lblgvo.Text = gvp_gv_cd.ToString();
                            if (_dtVou.Rows.Count > 0)
                            {
                                lblPVTp.Text = _dtVou.Rows[0]["gvp_gv_tp"].ToString();
                                lblPromoVouNo.Text = _dtVou.Rows[0]["gvp_page"].ToString();

                                if (lblPVTp.Text == "RATE")
                                    lblPVDisc.Text = _dtVou.Rows[0]["gvp_amt"].ToString();
                                else
                                {
                                    lblPVDisc.Text = _dtVou.Rows[0]["gvp_bal_amt"].ToString();
                                    lblPVBal.Text = _dtVou.Rows[0]["gvp_bal_amt"].ToString();
                                }
                            }
                            else
                            {
                                MessageBox.Show("Couldn't find gift voucher details !", "Select GV - Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                lblgvo.Text = string.Empty;
                                pnl_gvo.Visible = false;
                                Cursor = DefaultCursor;
                            }
                        }
                    }
                    pnl_gvo.Visible = false;
                    gvgvo.DataSource = null;
                    btnPromoVouClose_Click(null, null);
                }
            }
            catch (Exception)
            {
                MessageBox.Show("An error occurred while validating gift voucher details !", "Select GV - Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                pnl_gvo.Visible = false;
                Cursor = DefaultCursor;
            }

        }

        private void btnPickEvent_Click(object sender, EventArgs e)
        {
            if (_recieptItem != null && _recieptItem.Count > 0) { return; }

            frmEventRegistry _eventRegistry = new frmEventRegistry();
            _eventRegistry.PickedEvents = _InvEventList;
            _eventRegistry.PickedEventItem = _InvEventItems;
            _eventRegistry.ShowDialog();
            if (_eventRegistry.IsAddItem)
            {
                _InvEventItems = _eventRegistry.PickedEventItem;
                _InvEventList = _eventRegistry.PickedEvents;

                if ((_InvEventItems != null && _InvEventItems.Count > 0) && (_InvEventList != null && _InvEventList.Count > 0))
                {
                    chkDeliverLater.Checked = true;
                    chkDeliverNow.Checked = false;

                    if (_InvEventList != null && _InvEventList.Count > 0)
                    {
                        txtCustomer.Text = _InvEventList[0].SERE_CUST_CD;
                        LoadCustomerDetailsByCustomer(null, null);
                        txtDelCustomer.Text = _InvEventList[0].SERE_CUST_CD;
                        txtDelAddress1.Text = _InvEventList[0].SERE_DEL_ADDRESS;
                        EnableDisableCustomer();
                        Application.DoEvents();

                        if (_InvEventItems != null && _InvEventItems.Count > 0)
                        {
                            IsAddingEventItem = true;

                            List<EventItems> _tmpSingleItem = new List<EventItems>();
                            _tmpSingleItem = _InvEventItems.Where(x => x.IsSelected == true && x.SelectedQty > 0).ToList();

                            //if user has selected only one item, then item will be added & allow user to change item status, pb & level
                            if (_tmpSingleItem != null && _tmpSingleItem.Count > 0 && _tmpSingleItem.Count == 1)
                            {
                                foreach (EventItems _single in _tmpSingleItem)
                                {
                                    txtItem.Text = _single.SERE_ITM_CD;
                                    txtQty.Text = _single.SelectedQty.ToString();
                                    txtItem.Focus();
                                }                                
                            }
                            else
                            {
                                foreach (EventItems _item in _InvEventItems)
                                {
                                    if (_item.IsSelected)
                                    {
                                        int _existingCount = 0;
                                        if (_invoiceItemList != null && _invoiceItemList.Count > 0)
                                        {
                                            _existingCount = _invoiceItemList.Where(x => x.Sad_itm_cd == _item.SERE_ITM_CD).ToList().Count();
                                        }
                                        if (_existingCount == 0)
                                        {
                                            txtItem.Text = _item.SERE_ITM_CD;
                                            txtQty.Text = _item.SelectedQty.ToString();
                                            bool _isItemAdded = AddEventItems(_item.SERE_ITM_CD, _item.SERE_ITM_PRICE);
                                            if (_isItemAdded)
                                            {
                                                AddventItemToList(_item.SERE_ITM_CD);

                                                //If item has not added to invoice list selected item will be updated.
                                                if (_invoiceItemList != null && _invoiceItemList.Count > 0)
                                                {
                                                    var _existingItem = _invoiceItemList.Where(x => x.Sad_itm_cd == _item.SERE_ITM_CD && x.Sad_qty >= _item.SelectedQty).ToList();
                                                    if (_existingItem == null || _existingItem.Count == 0)
                                                    {
                                                        _item.IsSelected = false;
                                                        _item.SelectedQty = 0;
                                                    }
                                                }
                                                else
                                                {
                                                    _item.IsSelected = false;
                                                    _item.SelectedQty = 0;
                                                }
                                            }
                                            else
                                            {
                                                _item.IsSelected = false;
                                                _item.SelectedQty = 0;
                                            }
                                        }
                                    }
                                }
                            }


                            Application.DoEvents();
                        }
                    }
                    IsAddingEventItem = false;
                }
            }            
        }

        private bool AddEventItems(string _itemCode, decimal _selectedPrice)
        {
            bool _isadded = false;
            try
            {
                if (!string.IsNullOrEmpty(_itemCode))
                {
                    string _userMessage = string.Empty;
                    bool _isValid = LoadItemDetail(_itemCode);
                    if (!_isValid)
                    {
                        _userMessage = string.Format("Item - {0}, is a invalid item",_itemCode);
                        MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (_itemdetail.Mi_is_ser1 == 1 && IsGiftVoucher(_itemdetail.Mi_itm_tp))
                    {
                        _userMessage = string.Format("Gift voucher - {0}, cannot add without a serial", _itemCode);
                        MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if ((_itemdetail.Mi_is_ser1 == 1 && chkDeliverLater.Checked == true && chkDeliverNow.Checked == false && string.IsNullOrEmpty(txtSerialNo.Text.Trim()) && _priceBookLevelRef.Sapl_is_serialized == false) && _isRegistrationMandatory)
                    {
                        _userMessage = string.Format("Registration is mandatory for item - {0}. Can not save without serial", _itemCode);
                        MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(cmbBook.Text))
                    {
                        _userMessage = string.Format("Price book details not found for item - {0}", _itemCode);
                        MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(cmbLevel.Text))
                    {
                        _userMessage = string.Format("Price level details not found for item - {0}", _itemCode);
                        MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (string.IsNullOrEmpty(cmbStatus.Text))
                    {
                        _userMessage = string.Format("Item status couldn't find for item - {0}", _itemCode);
                        MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                    }
                    else if (_isCombineAdding == false)
                    {
                        CheckItemTax(txtItem.Text.Trim());

                        if (CheckTaxAvailability())
                        {
                            _userMessage = string.Format("Tax rates hasn't defined for item - {0}", _itemCode);
                            MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (CheckProfitCenterAllowForWithoutPrice())
                        {
                            _userMessage = string.Format("Item - {0}, is a invalid item", _itemCode);
                            MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (ConsumerItemProduct())
                        {
                            _isadded = false;
                        }
                    }

                    _priceDetailRef = new List<PriceDetailRef>();
                    if (_isBOnCredNote == true) 
                        _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), _dtReqPara);
                    else
                        _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(txtDate.Text));
                        
                    if (_priceDetailRef.Count <= 0)
                    {
                        _userMessage = string.Format("Price details not found for item - {0}", _itemCode);
                        MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return false;
                        SetDecimalTextBoxForZero(true, false, true);
                    }
                    else if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                    {
                        #region check price
                        var _isSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
                        if (_isSuspend > 0)
                        {
                            _userMessage = string.Format("Price of item - {0} has been suspended", _itemCode);
                            MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return false;
                        }
                        else if (_priceDetailRef.Count == 1)
                        {
                            if (Math.Round(_priceDetailRef[0].Sapd_itm_price) != Math.Round(_selectedPrice))
                            {
                                _userMessage = string.Format("Selected item - {0} price({1}) is not match with current price({2})). Do you want to continue ? ", _itemCode, _selectedPrice, _priceDetailRef[0].Sapd_itm_price);
                                DialogResult _result =  MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                                if (_result == System.Windows.Forms.DialogResult.No)
                                {
                                    return false;
                                }                                
                            }

                            var _one = from _itm in _priceDetailRef
                                        select _itm;
                            int _priceType = 0;
                            foreach (var _single in _one)
                            {
                                _priceType = _single.Sapd_price_type;
                                PriceTypeRef _promotion = TakePromotion(_priceType);

                                decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
                                txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
                                WarrantyRemarks = _single.Sapd_warr_remarks;
                                SetSSPriceDetailVariable(_single.Sapd_circular_no, Convert.ToString(_single.Sapd_seq_no), Convert.ToString(_single.Sapd_pb_seq), Convert.ToString(_single.Sapd_itm_price), _single.Sapd_promo_cd, Convert.ToString(_single.Sapd_price_type));
                                    
                                Int32 _pbSq = _single.Sapd_pb_seq;
                                Int32 _pbiSq = _single.Sapd_seq_no;
                                string _mItem = _single.Sapd_itm_cd;

                            }
                            _isEditPrice = false;
                            _isEditDiscount = false;
                            if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");
                            decimal vals = Convert.ToDecimal(txtQty.Text);
                            txtQty.Text = FormatToQty(Convert.ToString(vals));
                            CalculateItem();

                            //get price for priority pb
                            if (_priorityPriceBook != null && cmbBook.SelectedValue.ToString() != _priorityPriceBook.Sppb_pb && cmbBook.SelectedValue.ToString() != _priorityPriceBook.Sppb_pb_lvl)
                            {
                                decimal normalPrice = Convert.ToDecimal(txtLineTotAmt.Text);

                                if (_isBOnCredNote == true) 
                                    _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _priorityPriceBook.Sppb_pb, _priorityPriceBook.Sppb_pb_lvl, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), _dtReqPara);
                                else
                                    _priceDetailRef = CHNLSVC.Sales.GetPrice_01(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, _priorityPriceBook.Sppb_pb, _priorityPriceBook.Sppb_pb_lvl, txtCustomer.Text, txtItem.Text, Convert.ToDecimal(txtQty.Text), Convert.ToDateTime(txtDate.Text));
                                    
                                string _unitPrice = "";
                                if (_priceDetailRef ==  null ||_priceDetailRef.Count <= 1)
                                {
                                    if (!_isCompleteCode)
                                    {
                                        return true;
                                    }
                                    else
                                    {
                                        _unitPrice = FormatToCurrency("0");
                                    }
                                }
                                else
                                {
                                    if (_isCompleteCode)
                                    {
                                        List<PriceDetailRef> _new = _priceDetailRef;
                                        _priceDetailRef = new List<PriceDetailRef>();
                                        var _p = _new.Where(x => x.Sapd_price_type == 0 || x.Sapd_price_type == 4).ToList();
                                        if (_p != null)
                                            if (_p.Count > 0)
                                            {
                                                if (_p.Count > 1) _p = _p.Where(x => x.Sapd_price_type == 0).ToList();
                                                _priceDetailRef.Add(_p[0]);
                                            }
                                    }
                                    if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                                    {
                                        var _hasSuspend = _priceDetailRef.Where(x => x.Sapd_price_stus == "S").Count();
                                        if (_isSuspend > 0)
                                        {
                                            _userMessage = string.Format("Price of item - {0} has been suspended", _itemCode);
                                            MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                            return false;
                                        }
                                    }
                                    if (_priceDetailRef.Count > 1)
                                    {
                                        return true;
                                    }
                                    else if (_priceDetailRef.Count == 1)
                                    {
                                        if (Math.Round(_priceDetailRef[0].Sapd_itm_price) != Math.Round(_selectedPrice))
                                        {
                                            _userMessage = string.Format("Selected item - {0} price({1}) is not match with current price({2})). Do you want to continue ? ", _itemCode, _selectedPrice, _priceDetailRef[0].Sapd_itm_price);
                                            DialogResult _result = MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                                            if (_result == System.Windows.Forms.DialogResult.No)
                                            {
                                                return false;
                                            }
                                        }

                                        var _tmpPriceDet = from _itm in _priceDetailRef
                                                    select _itm;

                                        int _type = 0;
                                        foreach (var _single in _one)
                                        {
                                            _priceType = _single.Sapd_price_type;
                                            PriceTypeRef _promotion = TakePromotion(_priceType);
                                            decimal UnitPrice = FigureRoundUp(TaxCalculation(txtItem.Text.Trim(), cmbStatus.Text.Trim(), Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, _single.Sapd_itm_price, Convert.ToDecimal(txtDisAmt.Text.Trim()), Convert.ToDecimal(txtDisRate.Text), false), true);
                                            _unitPrice = FormatToCurrency(Convert.ToString(UnitPrice));
                                            WarrantyRemarks = _single.Sapd_warr_remarks;
                                                
                                            Int32 _pbSq = _single.Sapd_pb_seq;
                                            Int32 _pbiSq = _single.Sapd_seq_no;
                                            string _mItem = _single.Sapd_itm_cd;

                                            if (gvPromotionPrice.RowCount <1)
                                            {
                                                if (_isCombineAdding == false) txtUnitPrice.Focus();
                                            }
                                        }
                                    }
                                }

                                _isEditPrice = false;
                                _isEditDiscount = false;

                                if (string.IsNullOrEmpty(txtQty.Text)) txtQty.Text = FormatToQty("0");

                                decimal vals1 = Convert.ToDecimal(txtQty.Text);
                                txtQty.Text = FormatToQty(Convert.ToString(vals1));
                                decimal otherPrice = 0;

                                if (!string.IsNullOrEmpty(txtQty.Text) && !string.IsNullOrEmpty(_unitPrice))
                                {
                                    decimal _disRate = 0;
                                    decimal _disAmt = 0;
                                    if (!string.IsNullOrEmpty(txtDisRate.Text))
                                    {
                                        _disRate = Convert.ToDecimal(txtDisRate.Text);
                                    }
                                    if (!string.IsNullOrEmpty(txtDisAmt.Text))
                                    {
                                        _disAmt = Convert.ToDecimal(txtDisAmt.Text);
                                    }

                                    otherPrice = CalculateItemTem(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(_unitPrice), _disAmt, _disRate);
                                }
                                else
                                    return false;

                                if (otherPrice < normalPrice)
                                {
                                    DialogResult _result = new DialogResult();
                                    using (new CenterWinDialog(this)) { _result = MessageBox.Show(_priorityPriceBook.Sppb_pb + " " + _priorityPriceBook.Sppb_pb_lvl + " Price - " + FormatToCurrency(otherPrice.ToString()) + "\nDo you want to select " + _priorityPriceBook.Sppb_pb + " Price?", "Price", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1); }

                                    if (_result == DialogResult.Yes)
                                    {
                                        txtUnitPrice.Text = FormatToCurrency("0");
                                        txtUnitAmt.Text = FormatToCurrency("0");
                                        txtDisRate.Text = FormatToCurrency("0");
                                        txtDisAmt.Text = FormatToCurrency("0");
                                        txtTaxAmt.Text = FormatToCurrency("0");
                                        txtLineTotAmt.Text = FormatToCurrency("0");
                                        cmbBook.Text = _priorityPriceBook.Sppb_pb;
                                        cmbLevel.Text = _priorityPriceBook.Sppb_pb_lvl;
                                        CheckQty(false);
                                    }
                                    else
                                    {
                                        SSPRomotionType = 0;
                                        SSPromotionCode = string.Empty;
                                    }
                                }
                            }
                        }
                        #endregion
                    }                    
                }
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                _isadded = false;
                MessageBox.Show("Error occurred while adding event items" + Environment.NewLine + ex.Message, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            return _isadded;
        }

        private void AddventItemToList(string _itemCode)
        {
            string _userMessage = string.Empty;

            try
            {
                 #region add item to gird
                        MasterItem _masterItemDetails = new MasterItem();
                        _masterItemDetails = CHNLSVC.Sales.getMasterItemDetails(BaseCls.GlbUserComCode, txtItem.Text, 1);
                        if (_masterItemDetails.Mi_cd == null)
                        {
                            _userMessage = string.Format("Item - {0} is not allowed in this company", _itemCode);
                            MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        if (Convert.ToDecimal(txtLineTotAmt.Text) < 0)
                        {
                            _userMessage = string.Format("Item - {0} is invalid. Amount cannot be less than zero.", _itemCode);
                            MessageBox.Show(_userMessage, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return ;
                        }

                        List<MasterItemComponent> _com = CHNLSVC.Inventory.GetItemComponents(txtItem.Text.Trim());
                        if (_com != null && _com.Count > 0)
                        {
                            foreach (MasterItemComponent _itmCom in _com)
                            {
                                MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _itmCom.ComponentItem.Mi_cd);
                                if (_isRegistrationMandatory)
                                {
                                    if (_temItm.Mi_need_reg)
                                    {
                                        _isNeedRegistrationReciept = true;
                                        lnkProcessRegistration.Visible = true;
                                    }
                                }
                            }
                        }
                        else
                        {
                            MasterItem _temItm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
                            if (_isRegistrationMandatory)
                            {
                                if (_temItm.Mi_need_reg)
                                {
                                    _isNeedRegistrationReciept = true;
                                    lnkProcessRegistration.Visible = true;
                                }
                            }
                        }

                        this.Cursor = Cursors.WaitCursor;
                        AddItem(SSPromotionCode == "0" || string.IsNullOrEmpty(SSPromotionCode) ? false : true, string.Empty);
                        if (_priceDetailRef != null && _priceDetailRef.Count > 0)
                        {
                            if (_priceDetailRef[0].Sapd_customer_cd == txtCustomer.Text.Trim())
                            {
                                txtCustomer.ReadOnly = true;
                                btnSearch_Customer.Enabled = false;
                            }
                        }
                        txtQty.Text = FormatToQty("1");
                        AddItemDisableCustomer(true);

                        #endregion
            }
            catch (Exception ex)
            {
                this.Cursor = Cursors.Default;
                MessageBox.Show("Error occurred while adding event items" + Environment.NewLine + ex.Message, "Add Event Items", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void UpdateEventDetails()
        {
            try
            {
                if (_InvEventItems != null && _InvEventList.Count > 0)
                {

                    //check whether all item has updated
                    var _eventItmSum = _InvEventItems
                        .GroupBy(g => g.SERE_EVE_CD)
                        .Select(y =>
                            new 
                            {
                                _eventId = y.Key,
                                _availabeQty = y.Sum(s => s.SERE_ITM_QTY - (s.SERE_ITM_SOLD + s.SelectedQty))}).ToList();

                    if (_eventItmSum != null && _eventItmSum.Count > 0)
                    {
                        foreach (var det in _eventItmSum)
                        {
                            if (det._availabeQty < 1)
                            {
                                if (_InvEventList != null && _InvEventList.Count > 0)
                                {
                                    _InvEventList.Where(x => x.SERE_EVE_CD == det._eventId).ToList()
                                        .ForEach(y =>
                                        {
                                            y.SERE_UPDATE = 1;
                                            y.SERE_UPDATE_BY = BaseCls.GlbUserID;
                                            y.SERE_UPDATE_DT = DateTime.Now;
                                            y.SERE_UPDATE_SESSION = GlbUserSessionID;
                                        });
                                }
                            }
                            else
                            {
                                if (_InvEventList != null && _InvEventList.Count > 0)
                                {
                                    _InvEventList.Where(x => x.SERE_EVE_CD == det._eventId).ToList()
                                        .ForEach(y =>
                                        {
                                            y.SERE_UPDATE = 0;
                                            y.SERE_UPDATE_BY = BaseCls.GlbUserID;
                                            y.SERE_UPDATE_DT = DateTime.Now;
                                            y.SERE_UPDATE_SESSION = GlbUserSessionID;
                                        });
                                }
                            }  
                        }                            
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        private bool ValidateMobileNo(string num)
        {
            int intNum = 0;
            //check only contain degits
            if (!int.TryParse(num, out intNum))
                return false;
            //check for length
            else
            {
                if (num.Length < 10)
                {
                    return false;
                }
                //check for first three chars
                else
                {
                    string firstChar = num.Substring(0, 3);
                    if (firstChar != "070" && firstChar != "071" && firstChar != "077" && firstChar != "078" && firstChar != "072" && firstChar != "075" && firstChar != "076" && firstChar != "074")
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        private void txtSerialNo_TextChanged(object sender, EventArgs e)
        {

        }

        private void dgvReceiptItems_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
        private void load_cust_dt(string _custcd, string _invno, out Boolean status)
        {
            status = true;
            _masterBusinessCompany = CHNLSVC.Sales.GetCustomerProfileByCom(_custcd, null, null, null, null, BaseCls.GlbUserComCode);
            string txtLoyalty = ReturnLoyaltyNo_new();
            LoyaltyMemeber _LoyaltyDetails = CHNLSVC.Sales.getLoyaltyDetails(_custcd, txtLoyalty);
            InvoiceLoyalty _tInvoiceLoyalty = CHNLSVC.Sales.GetInvoiceLoyalty(_invno);
            if (_LoyaltyDetails != null && _tInvoiceLoyalty != null)
            {
                if (_LoyaltyDetails.Salcm_bal_pt < _tInvoiceLoyalty.Stlt_pt)
                {
                    if (MessageBox.Show("Sorry, Your Loyalty poins are not enough to Reverse this invoice. Do you want to Continue?", "Loyalty Card", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                    {
                        //MessageBox.Show("Sorry, Your Loyalty poins are not enough to Reverse this invoice", "Loyalty Card", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        btnClear_Click(null, null);
                        status = false;
                    }
                }

            }

        }
        private string ReturnLoyaltyNo_new()
        {
            string _no = string.Empty;
            try
            {
                CommonSearch.CommonSearch _commonSearch = new CommonSearch.CommonSearch();

                this.Cursor = Cursors.WaitCursor;
                _commonSearch = new CommonSearch.CommonSearch();
                _commonSearch.ReturnIndex = 0;
                _commonSearch.SearchParams = SetCommonSearchInitialParameters(CommonUIDefiniton.SearchUserControlType.SearchLoyaltyCard);
                DataTable _result = CHNLSVC.CommonSearch.SearchLoyaltyCard(_commonSearch.SearchParams, null, null);
                if (_result != null && _result.Rows.Count > 0)
                {
                    if (_result.Rows.Count > 1)
                    {
                        MessageBox.Show("Sorry, Your Loyalty poins are not enough to Reverse this invoice", "Loyalty Card", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtLoyalty.BackColor = Color.White;
                        return _no;
                    }
                    _no = _result.Rows[0].Field<string>("Card No");
                    txtLoyalty.BackColor = Color.Red;
                }
                else txtLoyalty.BackColor = Color.White;
            }
            catch (Exception ex)
            { this.Cursor = Cursors.Default; }
            finally { this.Cursor = Cursors.Default; CHNLSVC.CloseAllChannels(); }
            return _no;
        }

        private void txtDate_ValueChanged(object sender, EventArgs e)
        {
            
        }

    }
}

//private void AddItem(bool _isPromotion)
//{
//    ReptPickSerials _serLst = null;
//    List<ReptPickSerials> _nonserLst = null;
//    MasterItem _itm = null;

//    #region Priority Base Validation
//    if (CheckDiscountAmount() == false)
//    {
//        MessageBox.Show("Please check the discount amount.");
//        return;
//    }
//    if (CheckDiscountRate() == false)
//    {
//        MessageBox.Show("Please check the discount rate.");
//        return;
//    }

//    if (_masterBusinessCompany.Mbe_cd != null && _masterBusinessCompany.Mbe_sub_tp == "C")
//        if ((Convert.ToDecimal(lblAvailableCredit.Text) - Convert.ToDecimal(txtLineTotAmt.Text) - Convert.ToDecimal(lblGrndTotalAmount.Text) < 0) && txtCustomer.Text != "CASH")
//        {
//            MessageBox.Show("Please check the account balance");
//            return;
//        }
//    #endregion

//    #region Scan By Serial - check for serial
//    //Scan By Serial ------------------start--------------------------

//    if (string.IsNullOrEmpty(ScanSerialNo))
//    {
//        _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());
//        if (_itm.Mi_is_ser1 == 1 && chkDeliverLater.Checked == false)
//        {
//            MessageBox.Show("Please select the serial no");
//            txtSerialNo.Focus();
//            return;
//        }
//    }

//    //Scan By Serial -------------------end-------------------------
//    #endregion

//    #region Price Combine Checking Process
//    if (_isCheckedPriceCombine == false)
//        if (_MainPriceCombinItem != null)
//            if (_MainPriceCombinItem.Count > 0)
//            {
//                string _serialiNotpick = string.Empty;
//                string _serialDuplicate = string.Empty;
//                string _taxNotdefine = string.Empty;
//                string _noInventoryBalance = string.Empty;
//                string _noWarrantySetup = string.Empty;

//                string _mItem = txtItem.Text.Trim();
//                _priceDetailRef = new List<PriceDetailRef>();
//                _priceDetailRef = CHNLSVC.Sales.GetPrice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCustomer.Text, _mItem, Convert.ToDecimal(txtQty.Text.Trim()), Convert.ToDateTime(txtDate.Text));

//                if (_priceDetailRef.Count <= 0)
//                {
//                    _isCheckedPriceCombine = false;
//                    MessageBox.Show(_mItem + " does not having price. Please contact costing dept.");
//                    return;
//                }

//                var _dupsMain = ScanSerialList.Where(x => x.Tus_itm_cd == _mItem && x.Tus_ser_1 == ScanSerialNo);
//                if (_dupsMain != null)
//                    if (_dupsMain.Count() > 0)
//                    {
//                        _isCheckedPriceCombine = false;
//                        MessageBox.Show(_mItem + " serial " + ScanSerialNo + " is already picked!");
//                        return;
//                    }

//                if (CheckItemWarranty(_mItem, cmbStatus.Text.Trim()))
//                {
//                    _isCheckedPriceCombine = false;
//                    MessageBox.Show(txtItem.Text + " warranty period not setup");
//                    return;
//                }

//                foreach (PriceCombinedItemRef _ref in _MainPriceCombinItem)
//                {
//                    string _item = _ref.Sapc_itm_cd;
//                    decimal _qty = _ref.Sapc_qty;
//                    string _status = cmbStatus.Text.Trim();

//                    List<MasterItemTax> _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _item, _status, string.Empty, string.Empty);
//                    if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
//                    { if (string.IsNullOrEmpty(_taxNotdefine)) _taxNotdefine = _item; else _taxNotdefine += "," + _item; }

//                    if (CheckItemWarranty(_mItem, cmbStatus.Text.Trim()))
//                    { if (string.IsNullOrEmpty(_noWarrantySetup)) _noWarrantySetup = _item; else _noWarrantySetup += "," + _item; }

//                    if (chkDeliverLater.Checked == false && _isCheckedPriceCombine == false)
//                    {
//                        _isCheckedPriceCombine = true;
//                        _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item);
//                        if (_itm.Mi_is_ser1 == 1)
//                        {
//                            var _exist = PriceCombinItemSerialList.Where(x => x.Tus_itm_cd == _item);

//                            if (_qty > _exist.Count())
//                            { if (string.IsNullOrEmpty(_serialiNotpick)) _serialiNotpick = _item; else _serialiNotpick += "," + _item; }

//                            foreach (ReptPickSerials _p in _exist)
//                            {
//                                string _serial = _p.Tus_ser_1;
//                                var _dup = ScanSerialList.Where(x => x.Tus_ser_1 == _serial);

//                                if (_dup != null)
//                                    if (_dup.Count() > 0)
//                                    {
//                                        if (string.IsNullOrEmpty(_serialDuplicate)) _serialDuplicate = _item + "/" + _serial;
//                                        else _serialDuplicate = "," + _item + "/" + _serial;
//                                    }
//                            }
//                        }

//                        decimal _pickQty = 0;
//                        if (IsPriceLevelAllowDoAnyStatus)
//                            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item).ToList().Select(x => x.Sad_qty).Sum();
//                        else
//                            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _item && x.Mi_itm_stus == cmbStatus.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();

//                        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
//                        List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _item, cmbStatus.Text.Trim());

//                        if (_inventoryLocation != null)
//                            if (_inventoryLocation.Count > 0)
//                            {
//                                decimal _invBal = _inventoryLocation[0].Inl_qty;
//                                if (_pickQty > _invBal)
//                                {
//                                    if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item;
//                                    else _noInventoryBalance = "," + _item;
//                                }
//                            }
//                            else
//                            {
//                                if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item;
//                                else _noInventoryBalance = "," + _item;
//                            }
//                        else
//                        {
//                            if (string.IsNullOrEmpty(_noInventoryBalance)) _noInventoryBalance = _item;
//                            else _noInventoryBalance = "," + _item;
//                        }
//                    }
//                }

//                if (!string.IsNullOrEmpty(_taxNotdefine))
//                {
//                    _isCheckedPriceCombine = false;
//                    MessageBox.Show(_taxNotdefine + " does not have setup tax definition for the selected status. Please contact Inventory dept.");
//                    return;
//                }

//                if (!string.IsNullOrEmpty(_serialiNotpick))
//                {
//                    _isCheckedPriceCombine = false;
//                    MessageBox.Show("Item Qty and picked serial mismatch for the following item(s) " + _serialiNotpick);
//                    return;
//                }

//                if (!string.IsNullOrEmpty(_serialDuplicate))
//                {
//                    _isCheckedPriceCombine = false;
//                    MessageBox.Show("Serial duplicating for the following item(s) " + _serialDuplicate);
//                    return;
//                }
//                if (!string.IsNullOrEmpty(_noInventoryBalance))
//                {
//                    _isCheckedPriceCombine = false;
//                    MessageBox.Show(_noInventoryBalance + " item(s) does not having inventory balance for give.");
//                    return;
//                }

//                if (!string.IsNullOrEmpty(_noWarrantySetup))
//                {
//                    _isCheckedPriceCombine = false;
//                    MessageBox.Show(_noWarrantySetup + " item(s) warranty not define.");
//                    return;
//                }

//                _isFirstPriceComItem = true;
//                _isCheckedPriceCombine = true;
//            }

//    #endregion

//    #region  Adding Com Items - Inventory Comcodes

//    if (_isCompleteCode && _isInventoryCombineAdded == false) BindItemComponent(txtItem.Text);

//    if (_masterItemComponent.Count > 0 && _isInventoryCombineAdded == false)
//    {
//        //InventoryCombinItemSerialList = new List<ReptPickSerials>();
//        string _combineStatus = string.Empty;
//        decimal _discountRate = -1;
//        decimal _combineQty = 0;

//        _isInventoryCombineAdded = true; _isCombineAdding = true;
//        if (string.IsNullOrEmpty(_combineStatus)) _combineStatus = cmbStatus.Text;
//        if (_combineQty == 0) _combineQty = Convert.ToDecimal(txtQty.Text);
//        if (_discountRate == -1) _discountRate = Convert.ToDecimal(txtDisRate.Text);

//        List<MasterItemComponent> _comItem = new List<MasterItemComponent>();

//        #region Com item check after pick serial (check com main item seperatly, coz its serial already in txtSerialNo textbox)

//        foreach (string _item in _masterItemComponent.Select(x => x.ComponentItem.Mi_cd))
//            _masterItemComponent.Where(s => s.ComponentItem.Mi_cd == _item).ToList().ForEach(y => y.ComponentItem.Mi_itm_tp = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _item).Mi_itm_tp);

//        var _item_ = (from _n in _masterItemComponent where _n.ComponentItem.Mi_itm_tp == "M" select _n.ComponentItem.Mi_cd).ToList();
//        if (!string.IsNullOrEmpty(_item_[0]))
//        {
//            string _mItem = Convert.ToString(_item_[0]);
//            _priceDetailRef = new List<PriceDetailRef>();
//            _priceDetailRef = CHNLSVC.Sales.GetPrice(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf, cmbInvType.Text, cmbBook.Text, cmbLevel.Text, txtCustomer.Text, _mItem, _combineQty, Convert.ToDateTime(txtDate.Text));

//            if (_priceDetailRef.Count <= 0)
//            {
//                MessageBox.Show(_item_[0].ToString() + " does not having price. Please contact costing dept.");
//                return;
//            }
//        }

//        bool _isMainSerialCheck = false;
//        if (ScanSerialList != null && chkDeliverLater.Checked == false)
//        {
//            //check main item serial duplicates
//            if (ScanSerialList.Count > 0)
//            {
//                if (_isMainSerialCheck == false)
//                {
//                    var _dup = ScanSerialList.Where(x => x.Tus_itm_cd == _item_[0].ToString() && x.Tus_ser_1 == ScanSerialNo);
//                    if (_dup != null)
//                        if (_dup.Count() > 0)
//                        {
//                            MessageBox.Show(_item_[0].ToString() + " serial " + ScanSerialNo + " is already picked!");
//                            return;
//                        }
//                    _isMainSerialCheck = true;
//                }

//                //Check scan item duplicates

//                foreach (MasterItemComponent _com in _masterItemComponent)
//                {
//                    string _serial = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _com.ComponentItem.Mi_cd).Select(y => y.Tus_ser_1).ToString();
//                    var _dup = ScanSerialList.Where(x => x.Tus_ser_1 == _serial && x.Tus_itm_cd == _com.ComponentItem.Mi_cd);

//                    if (_dup != null)
//                        if (_dup.Count() > 0)
//                        {
//                            MessageBox.Show("Item " + _com.ComponentItem.Mi_cd + "," + _serial + " serial is already picked!");
//                            return;
//                        }
//                }
//            }

//        }
//        #endregion

//        #region Com item check for its serial status
//        if (InventoryCombinItemSerialList.Count == 0)
//        {
//            _isCombineAdding = true;
//            foreach (MasterItemComponent _com in _masterItemComponent)
//            {
//                List<MasterItemTax> _taxs = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd, _combineStatus, string.Empty, string.Empty);
//                if (_taxs.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
//                {
//                    MessageBox.Show(_com.ComponentItem.Mi_cd + " does not have setup tax definition for the selected status. Please contact Inventory dept.");
//                    return;
//                }

//                if (chkDeliverLater.Checked == false)
//                {
//                    decimal _pickQty = 0;
//                    if (IsPriceLevelAllowDoAnyStatus)
//                        _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _com.ComponentItem.Mi_cd).ToList().Select(x => x.Sad_qty).Sum();
//                    else
//                        _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == _com.ComponentItem.Mi_cd && x.Mi_itm_stus == cmbStatus.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();

//                    _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
//                    List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _com.ComponentItem.Mi_cd, cmbStatus.Text.Trim());

//                    if (_inventoryLocation != null)
//                        if (_inventoryLocation.Count > 0)
//                        {
//                            decimal _invBal = _inventoryLocation[0].Inl_qty;
//                            if (_pickQty > _invBal)
//                            {
//                                MessageBox.Show(_com.ComponentItem.Mi_cd + " item inventory balance exceeds");
//                                return;
//                            }
//                        }
//                        else
//                        {
//                            MessageBox.Show(_com.ComponentItem.Mi_cd + " item inventory balance exceeds");
//                            return;
//                        }
//                    else
//                    {
//                        MessageBox.Show(_com.ComponentItem.Mi_cd + " item inventory balance exceeds");
//                        return;
//                    }
//                }

//                _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _com.ComponentItem.Mi_cd);

//                if (_itm.Mi_is_ser1 == 1 && chkDeliverLater.Checked == false)
//                {
//                    _comItem.Add(_com);
//                }
//            }

//            if (_comItem.Count > 1 && chkDeliverLater.Checked == false)
//            {//hdnItemCode.value
//                ReptPickSerials _pick = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
//                if (_pick != null)
//                    if (!string.IsNullOrEmpty(_pick.Tus_itm_cd))
//                    {
//                        var _dup = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _pick.Tus_itm_cd && x.Tus_ser_1 == _pick.Tus_ser_1).ToList();
//                        if (_dup != null)
//                            if (_dup.Count <= 0)
//                            {
//                                InventoryCombinItemSerialList.Add(_pick);
//                            }
//                    }

//                _comItem.ForEach(x => x.Micp_itm_cd = _combineStatus);
//                gvPopComItem.DataSource = _comItem;
//                _isInventoryCombineAdded = false;
//                return;
//            }
//            else if (_comItem.Count == 1 && chkDeliverLater.Checked == false)
//            {//hdnItemCode.Value
//                ReptPickSerials _pick = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
//                if (_pick != null)
//                    if (!string.IsNullOrEmpty(_pick.Tus_itm_cd))
//                    {
//                        var _dup = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _pick.Tus_itm_cd && x.Tus_ser_1 == _pick.Tus_ser_1).ToList();
//                        if (_dup != null)
//                            if (_dup.Count <= 0)
//                            {
//                                InventoryCombinItemSerialList.Add(_pick);
//                            }
//                    }
//            }
//        }
//        #endregion

//        #region  Adding Com items to grid after pick all items (non serialized added randomly,bt check it if deliver now!)
//        SSCombineLine += 1;
//        foreach (MasterItemComponent _com in _masterItemComponent)
//        {
//            //If going to deliver now
//            if (chkDeliverLater.Checked == false && InventoryCombinItemSerialList.Count > 0)
//            {
//                var _comItemSer = InventoryCombinItemSerialList.Where(x => x.Tus_itm_cd == _com.ComponentItem.Mi_cd).ToList();
//                if (_comItemSer != null)
//                    if (_comItemSer.Count > 0)
//                    {
//                        foreach (ReptPickSerials _serItm in _comItemSer)
//                        {
//                            txtSerialNo.Text = _serItm.Tus_ser_1;
//                            ScanSerialNo = txtSerialNo.Text;
//                            //hdnSerialNo.Value = ScanSerialNo;
//                            txtSerialNo.Text = ScanSerialNo;
//                            txtItem.Text = _com.ComponentItem.Mi_cd;
//                            //txtDescription.Text = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text).Mi_longdesc;
//                            LoadItemDetail(txtItem.Text);
//                            cmbStatus.Text = _combineStatus;
//                            txtQty.Text = FormatToQty("1");
//                            CheckQty();
//                            txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate));
//                            txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
//                            txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, cmbStatus.Text, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), true)));
//                            txtLineTotAmt.Text = FormatToCurrency("0");
//                            CalculateItem();
//                            AddItem(false);
//                            ScanSerialNo = string.Empty;
//                            txtSerialNo.Text = string.Empty;
//                            //hdnSerialNo.Value = "";
//                            txtSerialNo.Text = string.Empty;
//                        }
//                        _combineCounter += 1;
//                    }
//                    else
//                    {
//                        txtItem.Text = _com.ComponentItem.Mi_cd;
//                        //txtDescription.Text = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text).Mi_longdesc;
//                        LoadItemDetail(txtItem.Text);
//                        cmbStatus.Text = _combineStatus;
//                        txtQty.Text = FormatToQty(Convert.ToString(_com.Micp_qty * _combineQty));
//                        CheckQty();
//                        txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate));
//                        txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
//                        txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, cmbStatus.Text, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), true)));
//                        txtLineTotAmt.Text = FormatToCurrency("0");
//                        CalculateItem();
//                        AddItem(false);
//                        ScanSerialNo = string.Empty;
//                        txtSerialNo.Text = string.Empty;
//                        //hdnSerialNo.Value = "";
//                        txtSerialNo.Text = string.Empty;

//                        _combineCounter += 1;
//                    }

//            }
//            //If deliver later
//            else if (chkDeliverLater.Checked && InventoryCombinItemSerialList.Count == 0)
//            {
//                txtItem.Text = _com.ComponentItem.Mi_cd;
//                //txtDescription.Text = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text).Mi_longdesc;
//                LoadItemDetail(txtItem.Text.Trim());
//                cmbStatus.Text = _combineStatus;
//                txtQty.Text = FormatToQty(Convert.ToString(_com.Micp_qty * _combineQty));
//                CheckQty();
//                txtDisRate.Text = FormatToCurrency(Convert.ToString(_discountRate));
//                txtDisAmt.Text = FormatToCurrency(Convert.ToString(Convert.ToDecimal(txtUnitPrice.Text) * Convert.ToDecimal(txtQty.Text) * _discountRate / 100));
//                txtTaxAmt.Text = FormatToCurrency(Convert.ToString(TaxCalculation(txtItem.Text, cmbStatus.Text, Convert.ToDecimal(txtQty.Text), _priceBookLevelRef, Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text.Trim()), true)));
//                txtLineTotAmt.Text = FormatToCurrency("0");
//                CalculateItem();
//                AddItem(false);
//                _combineCounter += 1;
//            }

//        }
//        #endregion

//        if (_combineCounter == _masterItemComponent.Count) { _masterItemComponent = new List<MasterItemComponent>(); _isCompleteCode = false; _isInventoryCombineAdded = false; _isCombineAdding = false; ScanSerialNo = string.Empty; txtSerialNo.Text = ""; InventoryCombinItemSerialList = new List<ReptPickSerials>(); txtSerialNo.Text = string.Empty; return; } //hdnSerialNo.Value = ""
//    }

//    #endregion

//    #region Check item with serial status & load particular serial details
//    _itm = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text.Trim());

//    if (chkDeliverLater.Checked == false)
//    {
//        if (_itm.Mi_is_ser1 == 1)
//        {
//            if (string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
//            {
//                MessageBox.Show("Please select the serial no");
//                txtSerialNo.Focus();
//                return;
//            }
//            _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
//        }
//        else if (_itm.Mi_is_ser1 == 0)
//        {
//            _nonserLst = CHNLSVC.Inventory.GetNonSerializedItemRandomly(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()));
//        }
//    }
//    #endregion

//    #region Check for fulfilment before adding
//    if (SSPriceBookSequance == "0" || string.IsNullOrEmpty(SSPriceBookSequance))
//    {
//        if (!_isCombineAdding) { MessageBox.Show("Please select the valid price"); return; }

//    }
//    if (string.IsNullOrEmpty(txtQty.Text.Trim())) { MessageBox.Show("Please select the valid qty"); return; }
//    if (Convert.ToDecimal(txtQty.Text) == 0) { MessageBox.Show("Please select the valid qty"); return; }
//    if (Convert.ToDecimal(txtQty.Text.Trim()) <= 0) { MessageBox.Show("Please select the valid qty"); return; }

//    if (string.IsNullOrEmpty(txtUnitPrice.Text.Trim())) { MessageBox.Show("Please select the valid unit price"); return; }

//    if (string.IsNullOrEmpty(cmbInvType.Text))
//    {
//        MessageBox.Show("Please select the invoice type");
//        cmbInvType.Focus();
//        return;
//    }

//    if (string.IsNullOrEmpty(txtCustomer.Text))
//    {
//        MessageBox.Show("Please select the customer");
//        txtCustomer.Focus();
//        return;
//    }
//    if (string.IsNullOrEmpty(txtItem.Text))
//    {
//        MessageBox.Show("Please select the item");
//        txtItem.Focus();
//        return;
//    }

//    if (string.IsNullOrEmpty(cmbBook.Text))
//    {
//        MessageBox.Show("Please select the price book");
//        cmbBook.Focus();
//        return;
//    }

//    if (string.IsNullOrEmpty(cmbLevel.Text))
//    {
//        MessageBox.Show("Please select the price level");
//        cmbLevel.Focus();
//        return;
//    }

//    if (string.IsNullOrEmpty(cmbStatus.Text))
//    {
//        MessageBox.Show("Please select the item status");
//        cmbStatus.Focus();
//        return;
//    }

//    if (string.IsNullOrEmpty(txtQty.Text))
//    {
//        MessageBox.Show("Please select the qty");
//        txtQty.Focus();
//        return;
//    }

//    if (string.IsNullOrEmpty(txtUnitPrice.Text))
//    {
//        MessageBox.Show("Please select the unit price");
//        txtUnitPrice.Focus();
//        return;
//    }

//    if (string.IsNullOrEmpty(txtDisRate.Text))
//    {
//        MessageBox.Show("Please select the discount pecentage");
//        txtDisRate.Focus();
//        return;
//    }

//    if (string.IsNullOrEmpty(txtDisAmt.Text))
//    {
//        MessageBox.Show("Please select the discount amount");
//        txtDisAmt.Focus();
//        return;
//    }

//    if (string.IsNullOrEmpty(txtTaxAmt.Text))
//    {
//        MessageBox.Show("Please select the VAT amount");
//        txtTaxAmt.Focus();
//        return;
//    }

//    List<MasterItemTax> _tax = CHNLSVC.Sales.GetItemTax(BaseCls.GlbUserComCode, txtItem.Text.Trim(), cmbStatus.Text.Trim(), string.Empty, string.Empty);
//    if (_tax.Count <= 0 && _priceBookLevelRef.Sapl_vat_calc == true)
//    {
//        MessageBox.Show("Selected item does not have setup tax definition for the selected status. Please contact inventory dept.");
//        cmbStatus.Focus();
//        return;
//    }

//    if (Convert.ToDecimal(txtUnitPrice.Text.Trim()) == 0 && _isCombineAdding == false)
//    {
//        bool _isTerminate = CheckQty();
//        if (_isTerminate) return;
//    }

//    PriceDetailRef _lsts = CHNLSVC.Sales.GetPriceDetailByItemLineSeq(txtItem.Text.Trim(), Convert.ToInt32(SSPriceBookItemSequance), Convert.ToInt32(SSPriceBookSequance));
//    if (_lsts != null && _isCombineAdding == false)
//    {
//        if (string.IsNullOrEmpty(_lsts.Sapd_itm_cd))
//        {
//            MessageBox.Show(txtItem.Text + " price not available. Please contact costing dept.");
//            return;
//        }
//        else
//        {
//            decimal sysUPrice = _lsts.Sapd_itm_price * MainTaxConstant[0].Mict_tax_rate;
//            decimal pickUPrice = Convert.ToDecimal(txtUnitPrice.Text);
//            _priceBookLevelRef = CHNLSVC.Sales.GetPriceLevel(BaseCls.GlbUserComCode, cmbBook.Text, cmbLevel.Text);
//            _MasterProfitCenter = CHNLSVC.Sales.GetProfitCenter(BaseCls.GlbUserComCode, BaseCls.GlbUserDefProf);

//            if (_MasterProfitCenter != null && _priceBookLevelRef != null)
//                if (!string.IsNullOrEmpty(_MasterProfitCenter.Mpc_com) && !string.IsNullOrEmpty(_priceBookLevelRef.Sapl_com_cd))

//                    if (!_MasterProfitCenter.Mpc_without_price && !_priceBookLevelRef.Sapl_is_without_p)
//                        if (!_MasterProfitCenter.Mpc_edit_price)
//                        {
//                            if (sysUPrice != pickUPrice)
//                            {
//                                MessageBox.Show("Price Book price and the unit price is different. Please check the price you selected!");
//                                return;
//                            }
//                        }
//                        else
//                        {
//                            if (sysUPrice != pickUPrice)
//                                if (sysUPrice > pickUPrice)
//                                {
//                                    decimal sysEditRate = _MasterProfitCenter.Mpc_edit_rate;
//                                    decimal ddUprice = sysUPrice - ((sysUPrice * sysEditRate) / 100);
//                                    if (ddUprice > pickUPrice)
//                                    {
//                                        MessageBox.Show("Price Book price and the unit price is different. Please check the price you selected!");
//                                        return;
//                                    }
//                                }

//                        }
//        }
//    }
//    else
//    {
//        if (_isCombineAdding == false)
//        {
//            MessageBox.Show(txtItem.Text + " price not available. Please contact costing dept.");
//            return;
//        }
//    }

//    #endregion

//    #region Check Item Serial pick or not (function for common item - not for comcode items, but its go through here also

//    if (chkDeliverLater.Checked == false)
//    {
//        if (_itm.Mi_is_ser1 == 1)
//        {
//            var _dup = ScanSerialList.Where(x => x.Tus_itm_cd == txtItem.Text && x.Tus_ser_1 == ScanSerialNo).ToList();
//            if (_dup != null)
//                if (_dup.Count > 0)
//                {
//                    MessageBox.Show(ScanSerialNo + " serial is already picked!");
//                    txtSerialNo.Focus();
//                    return;
//                }
//        }

//        if (!IsPriceLevelAllowDoAnyStatus)
//        {
//            if (_serLst != null)
//                if (string.IsNullOrEmpty(_serLst.Tus_com))
//                {
//                    if (_serLst.Tus_itm_stus != cmbStatus.Text.Trim())
//                    {
//                        MessageBox.Show(ScanSerialNo + " serial status is not match with the price level status");
//                        txtSerialNo.Focus();
//                        return;
//                    }
//                }
//        }

//    }
//    #endregion

//    CalculateItem();

//    #region Check Inventory Balance if deliver now!

//    //check balance ----------------------
//    if (chkDeliverLater.Checked == false)
//    {
//        decimal _pickQty = 0;
//        if (IsPriceLevelAllowDoAnyStatus)
//            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == txtItem.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();
//        else
//            _pickQty = _invoiceItemList.Where(x => x.Sad_itm_cd == txtItem.Text.Trim() && x.Mi_itm_stus == cmbStatus.Text.Trim()).ToList().Select(x => x.Sad_qty).Sum();

//        _pickQty += Convert.ToDecimal(txtQty.Text.Trim());
//        List<InventoryLocation> _inventoryLocation = CHNLSVC.Inventory.GetItemInventoryBalance(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), cmbStatus.Text.Trim());

//        if (_inventoryLocation != null)
//            if (_inventoryLocation.Count > 0)
//            {
//                decimal _invBal = _inventoryLocation[0].Inl_qty;
//                if (_pickQty > _invBal)
//                {
//                    MessageBox.Show(txtItem.Text + " item inventory balance exceeds");
//                    return;
//                }
//            }
//            else
//            {
//                MessageBox.Show(txtItem.Text + " item inventory balance exceeds");
//                return;
//            }
//        else
//        {
//            MessageBox.Show(txtItem.Text + " item inventory balance exceeds");
//            return;
//        }

//        if (_itm.Mi_is_ser1 == 1 && ScanSerialList.Count > 0)
//        {
//            var _serDup = (from _lst in ScanSerialList
//                           where _lst.Tus_ser_1 == txtSerialNo.Text.Trim() && _lst.Tus_itm_cd == txtItem.Text.Trim()
//                           select _lst).ToList();

//            if (_serDup != null)
//                if (_serDup.Count > 0)
//                {
//                    MessageBox.Show("Serial duplicating.");
//                    return;
//                }

//        }

//    }
//    //check balance ----------------------
//    #endregion

//    #region Get/Check Warranty Period and Remarks
//    //Get Warranty Details --------------------------
//    List<PriceBookLevelRef> _lvl = CHNLSVC.Sales.GetPriceLevelList(BaseCls.GlbUserComCode, cmbBook.Text.Trim(), cmbLevel.Text.Trim());
//    if (_lvl != null)
//        if (_lvl.Count > 0)
//        {
//            var _lst = (from _l in _lvl where _l.Sapl_itm_stuts == cmbStatus.Text.Trim() select _l).ToList();
//            if (_lst != null)
//                if (_lst.Count > 0)
//                {
//                    if (_lst[0].Sapl_set_warr == true)
//                    {
//                        WarrantyPeriod = _lst[0].Sapl_warr_period;
//                    }
//                    else
//                    {
//                        MasterItemWarrantyPeriod _period = CHNLSVC.Inventory.GetItemWarrantyDetail(txtItem.Text.Trim(), cmbStatus.Text.Trim());
//                        if (_period != null)
//                        {
//                            WarrantyPeriod = _period.Mwp_val;
//                            WarrantyRemarks = _period.Mwp_rmk;
//                        }
//                        else
//                        {
//                            MessageBox.Show("Warranty period not setup");
//                            return;
//                        }
//                    }
//                }
//        }
//    //Get Warranty Details --------------------------
//    #endregion

//    bool _isDuplicateItem = false;
//    Int32 _duplicateComLine = 0;
//    Int32 _duplicateItmLine = 0;

//    #region Adding Invoice Item
//    //Adding Items to grid goes here ----------------------------------------------------------------------
//    if (_invoiceItemList == null || _invoiceItemList.Count <= 0)
//    //No Records
//    {
//        _isDuplicateItem = false;
//        _lineNo += 1;
//        if (!_isCombineAdding) SSCombineLine += 1;//_lineNo;
//        _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itm));
//    }
//    else
//    //Having some records
//    {
//        var _similerItem = from _list in _invoiceItemList
//                           where _list.Sad_itm_cd == txtItem.Text && _list.Sad_itm_stus == cmbStatus.Text && _list.Sad_pbook == cmbBook.Text && _list.Sad_pb_lvl == cmbLevel.Text && _list.Sad_unit_rt == Convert.ToDecimal(txtUnitPrice.Text)
//                           select _list;

//        if (_similerItem.Count() > 0)
//        //Similer item available
//        {
//            _isDuplicateItem = true;
//            foreach (var _similerList in _similerItem)
//            {
//                _duplicateComLine = _similerList.Sad_job_line;
//                _duplicateItmLine = _similerList.Sad_itm_line;
//                _similerList.Sad_disc_amt = Convert.ToDecimal(_similerList.Sad_disc_amt) + Convert.ToDecimal(txtDisAmt.Text);
//                _similerList.Sad_itm_tax_amt = Convert.ToDecimal(_similerList.Sad_itm_tax_amt) + Convert.ToDecimal(txtTaxAmt.Text);
//                _similerList.Sad_qty = Convert.ToDecimal(_similerList.Sad_qty) + Convert.ToDecimal(txtQty.Text);
//                _similerList.Sad_tot_amt = Convert.ToDecimal(_similerList.Sad_tot_amt) + Convert.ToDecimal(txtLineTotAmt.Text);

//            }
//        }
//        else
//        //No similer item found
//        {
//            _isDuplicateItem = false;
//            _lineNo += 1;
//            if (!_isCombineAdding) SSCombineLine += 1;//_lineNo;
//            _invoiceItemList.Add(AssignDataToObject(_isPromotion, _itm));
//        }

//    }
//    //Adding Items to grid end here ----------------------------------------------------------------------
//    #endregion

//    #region Adding Serial/Non Serial items
//    //Scan By Serial ----------start----------------------------------
//    if (chkDeliverLater.Checked == false)
//    {
//        if (_isFirstPriceComItem)
//            _isCombineAdding = true;

//        if (ScanSequanceNo == 0) ScanSequanceNo = -100;

//        //Serialized
//        if (_itm.Mi_is_ser1 == 1)
//        {
//            //ReptPickSerials _serLst = CHNLSVC.Inventory.Get_all_details_on_serial(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, string.Empty, txtItem.Text.Trim(), txtSerialNo.Text.Trim());
//            _serLst.Tus_base_doc_no = Convert.ToString(ScanSequanceNo);
//            _serLst.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine;
//            _serLst.Tus_usrseq_no = ScanSequanceNo;
//            _serLst.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim());
//            _serLst.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty;
//            _serLst.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty;
//            ScanSerialList.Add(_serLst);
//        }

//        //Non-Serialized but serial ID 8523
//        if (_itm.Mi_is_ser1 == 0)
//        {
//            //List<ReptPickSerials> _serLst = CHNLSVC.Inventory.GetNonSerializedItemRandomly(BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, txtItem.Text.Trim(), Convert.ToDecimal(txtQty.Text.Trim()));
//            if (_nonserLst.Count < Convert.ToDecimal(txtQty.Text.Trim()))
//            {
//                MessageBox.Show(txtItem.Text + " item qty is exceeds available qty");
//                return;
//            }
//            _nonserLst.ForEach(x => x.Tus_base_doc_no = Convert.ToString(ScanSequanceNo));
//            _nonserLst.ForEach(x => x.Tus_base_itm_line = _isDuplicateItem == false ? _lineNo : _duplicateItmLine);
//            _nonserLst.ForEach(x => x.Tus_usrseq_no = ScanSequanceNo);
//            _nonserLst.ForEach(x => x.Tus_unit_price = Convert.ToDecimal(txtUnitPrice.Text.Trim()));
//            _nonserLst.ForEach(x => x.Tus_serial_id = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty);
//            _nonserLst.ForEach(x => x.Tus_ser_id = -1);
//            _nonserLst.ForEach(x => x.Tus_new_status = _isCombineAdding == true ? "C" : string.Empty);
//            ScanSerialList.AddRange(_nonserLst);
//        }

//        gvPopSerial.DataSource = ScanSerialList;//.Where(x => x.Tus_ser_1 != "N/A").ToList();

//        if (_isFirstPriceComItem)
//        {
//            _isCombineAdding = false;
//            _isFirstPriceComItem = false;
//        }
//    }
//    //Scan By Serial ----------end----------------------------------
//    #endregion

//    #region Add Invoice Serial Detail
//    //if (!string.IsNullOrEmpty(txtSerialNo.Text.Trim()))
//    //{
//    bool _isDuplicate = false;
//    if (InvoiceSerialList != null)
//        if (InvoiceSerialList.Count > 0)
//        {
//            if (_itm.Mi_is_ser1 == 1)
//            {//hdnItemCode.Value
//                var _dup = (from _i in InvoiceSerialList where _i.Sap_ser_1 == txtSerialNo.Text.Trim() && _i.Sap_itm_cd == txtItem.Text.Trim() select _i).ToList();
//                if (_dup != null)
//                    if (_dup.Count > 0)
//                        _isDuplicate = true;
//            }
//        }

//    if (_isDuplicate == false)
//    {
//        //hdnItemCode.Value.ToString()
//        InvoiceSerial _invser = new InvoiceSerial();
//        _invser.Sap_del_loc = BaseCls.GlbUserDefLoca;
//        _invser.Sap_itm_cd = txtItem.Text.Trim();
//        _invser.Sap_itm_line = _lineNo;
//        _invser.Sap_remarks = string.Empty;
//        _invser.Sap_seq_no = Convert.ToInt32(SSPriceBookSequance);
//        _invser.Sap_ser_1 = txtSerialNo.Text;
//        _invser.Sap_ser_2 = _isCombineAdding ? Convert.ToString(SSCombineLine) : string.Empty;
//        InvoiceSerialList.Add(_invser);
//    }
//    //}
//    #endregion

//    CalculateGrandTotal(Convert.ToDecimal(txtQty.Text), Convert.ToDecimal(txtUnitPrice.Text), Convert.ToDecimal(txtDisAmt.Text), Convert.ToDecimal(txtTaxAmt.Text), true);

//    #region  Adding Combine Items - Price Combine
//    if (_MainPriceCombinItem != null)
//    {
//        string _combineStatus = string.Empty;
//        decimal _combineQty = 0;

//        if (_MainPriceCombinItem.Count > 0 && _isCombineAdding == false)
//        {
//            _isCombineAdding = true;
//            if (string.IsNullOrEmpty(_combineStatus)) _combineStatus = cmbStatus.Text;
//            if (_combineQty == 0) _combineQty = Convert.ToDecimal(txtQty.Text);
//            if (chkDeliverLater.Checked == true)
//            {
//                foreach (PriceCombinedItemRef _list in _MainPriceCombinItem)
//                {
//                    txtItem.Text = _list.Sapc_itm_cd;
//                    //txtDescription.Text = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text).Mi_longdesc;
//                    LoadItemDetail(txtItem.Text.Trim());
//                    cmbStatus.Text = _combineStatus;
//                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_list.Sapc_price));
//                    txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty * _combineQty)));
//                    txtDisRate.Text = FormatToCurrency("0");
//                    txtDisAmt.Text = FormatToCurrency("0");
//                    txtTaxAmt.Text = FormatToCurrency("0");
//                    txtLineTotAmt.Text = FormatToCurrency("0");
//                    CalculateItem();
//                    AddItem(_isPromotion);
//                    _combineCounter += 1;
//                }
//            }
//            else
//            {
//                foreach (ReptPickSerials _list in PriceCombinItemSerialList)
//                {
//                    txtSerialNo.Text = _list.Tus_ser_1;
//                    ScanSerialNo = _list.Tus_ser_1;
//                    txtItem.Text = _list.Tus_itm_cd;
//                    //txtDescription.Text = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text).Mi_longdesc;
//                    LoadItemDetail(txtItem.Text.Trim());
//                    cmbStatus.Text = _combineStatus;
//                    decimal UnitPrice = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_price).Sum();
//                    decimal Qty = _MainPriceCombinItem.Where(x => x.Sapc_itm_cd == txtItem.Text.Trim()).Select(y => y.Sapc_qty).Sum();
//                    txtUnitPrice.Text = FormatToCurrency(Convert.ToString(UnitPrice));
//                    txtQty.Text = FormatToQty(Convert.ToString((Qty * _combineQty)));
//                    txtDisRate.Text = FormatToCurrency("0");
//                    txtDisAmt.Text = FormatToCurrency("0");
//                    txtTaxAmt.Text = FormatToCurrency("0");
//                    txtLineTotAmt.Text = FormatToCurrency("0");
//                    CalculateItem();
//                    AddItem(_isPromotion);
//                    _combineCounter += 1;
//                }

//                foreach (PriceCombinedItemRef _list in _MainPriceCombinItem)
//                {
//                    MasterItem _i = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, _list.Sapc_itm_cd);

//                    if (_i.Mi_is_ser1 != 1)
//                    {
//                        txtItem.Text = _list.Sapc_itm_cd;
//                        //txtDescription.Text = CHNLSVC.Inventory.GetItem(BaseCls.GlbUserComCode, txtItem.Text).Mi_longdesc;
//                        LoadItemDetail(txtItem.Text.Trim());
//                        cmbStatus.Text = _combineStatus;
//                        txtUnitPrice.Text = FormatToCurrency(Convert.ToString(_list.Sapc_price));
//                        txtQty.Text = FormatToQty(Convert.ToString((_list.Sapc_qty * _combineQty)));
//                        txtDisRate.Text = FormatToCurrency("0");
//                        txtDisAmt.Text = FormatToCurrency("0");
//                        txtTaxAmt.Text = FormatToCurrency("0");
//                        txtLineTotAmt.Text = FormatToCurrency("0");
//                        CalculateItem();
//                        AddItem(_isPromotion);
//                        _combineCounter += 1;
//                    }
//                }

//            }

//            if (chkDeliverLater.Checked == true)
//                if (_combineCounter == _MainPriceCombinItem.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; ScanSerialNo = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; return; }//hdnSerialNo.Value = ""
//            if (chkDeliverLater.Checked == false)
//                if (_combineCounter == PriceCombinItemSerialList.Count) { _MainPriceCombinItem = new List<PriceCombinedItemRef>(); PriceCombinItemSerialList = new List<ReptPickSerials>(); _isCombineAdding = false; ScanSerialNo = string.Empty; txtSerialNo.Text = ""; txtSerialNo.Text = string.Empty; SSCombineLine += 1; return; }//hdnSerialNo.Value = ""
//        }

//    }
//    #endregion

//    txtSerialNo.Text = "";
//    //hdnSerialNo.Value = "";
//    ClearAfterAddItem();

//    SSPriceBookSequance = "0";
//    SSPriceBookItemSequance = "0";
//    SSPriceBookPrice = 0;

//    txtItem.Focus();
//    BindAddItem();
//    SetDecimalTextBoxForZero(true);

//    #region Set Default Paymode if available
//    List<PaymentType> _tp = CHNLSVC.Sales.GetPossiblePaymentTypes(BaseCls.GlbUserDefProf, cmbInvType.Text.Trim(), Convert.ToDateTime(txtDate.Text.Trim()));
//    //if (_tp != null)
//    //    if (_tp.Count > 0)
//    //    {
//    //        var Mod = _tp.Where(x => x.Stp_def == true).Select(y => y.Stp_pay_tp);
//    //        if (Mod != null)
//    //            if (Mod.Count() > 0)
//    //            {
//    //                foreach (string v in Mod)
//    //                    _paymodedef = v;

//    //                if (ddlPayMode.Items.Count > 1)
//    //                    ddlPayMode.SelectedValue = _paymodedef;
//    //            }
//    //    }
//    #endregion
//}
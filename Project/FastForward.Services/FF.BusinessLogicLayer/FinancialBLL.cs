using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using FF.DataAccessLayer;
using FF.BusinessObjects;
using FF.Interfaces;
using System.Data;
using System.DirectoryServices;
using System.Net;
using System.Transactions;
using System.Globalization;
using System.ServiceModel;
using System.Net.Mail;
using FF.BusinessObjects.Financial;
using FF.BusinessObjects.General;
using FF.BusinessObjects.BITool;
using FF.BusinessObjects.Commission;
using FF.BusinessObjects.Sales;
using System.IO;
using FF.BusinessObjects.Account;

namespace FF.BusinessLogicLayer
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    public class FinancialBLL : IFinancial
    {

        FinancialDAL _financialDAL = null;
        InventoryDAL _inventoryDAL = null;
        GeneralDAL _generalDAL = null;
        SalesDAL _salesDAL = null;
        ReptCommonDAL _inventoryRepDAL = null;
        ReptDAL _reportDAL = null;
        SecurityDAL _securityDAL = null;
        CommonSearchDAL _commonSearchDAL = null;
        CustServiceDAL _cusserDal = null;
        MsgPortalBLL msg = null;
        InventoryBLL invtbll = null;


        //kapila
        public Int32 SaveExcsShortSettlement(ExcessShortTrna _excsShortRem, ExcessShortDet _excsShortDet, RemitanceSummaryDetail _remsumdet, out string _msg)
        {
            Int32 result = 0;
            _msg = "";
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            try
            {
                _financialDAL.SaveExcessTrans(_excsShortRem);
                _financialDAL.SaveRemSummaryDetails(_remsumdet);
                _financialDAL.UpdateExcsShortOthRem(_excsShortDet.Esrd_id, _excsShortDet.Esrd_week, _excsShortDet.Esrd_sec, _excsShortDet.Esrd_cd, _excsShortDet.Esrd_set_amt);
                _financialDAL.TransactionCommit();
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _msg = ex.Message;
                _financialDAL.TransactionRollback();
            }
            return result;
        }

        //kapila
        public int GetRemSumDetWOCurDt(string _com, DateTime _fromdate, DateTime _todate, DateTime _date, string _sec, string _code, string _pc, out Decimal _value, out Decimal _valueFinal)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRemSumDetWOCurDt(_com, _fromdate, _todate, _date, _sec, _code, _pc, out  _value, out  _valueFinal);
        }
        //kapila
        public DataTable get_rem_sum_rep_recon(string _com, string _user, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("RemSumRecon") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.get_rem_sum_rep_recon(_com, _user, _from, _to);
        }
        //kapila
        public Decimal Get_Inr_sys_para(string _com, string _loc, string _item, string _itmstus, Int32 _qty)
        {
            Decimal _effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _effect = _financialDAL.Get_Inr_sys_para(_com, _loc, _item, _itmstus, _qty);

            _financialDAL.ConnectionClose();
            return _effect;
        }
        public DataTable GetAccVoucher(string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAccVoucher(_ref);
        }
        public DataTable GetCostByOthDoc(string _com, string _othdoc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostByOthDoc(_com, _othdoc);
        }
        public decimal GetOriginalAccInsurance(string _com, string _revno)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetOriginalAccInsurance(_com, _revno);
        }
        public DataTable Get_credit_Outs_ByInv(string _com, string _pc, string _inv, string _user, Int32 _isOuts)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_credit_Outs_ByInv(_com, _pc, _inv, _user, _isOuts);
        }
        public Boolean isGVFound(string _ref, string _cust)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.isGVFound(_ref, _cust);
        }
        public DataTable getVouDetByCode(string _vou)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getVouDetByCode(_vou);
        }
        public DataTable getMyAbVouTypes()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getMyAbVouTypes();
        }
        public DataTable RegistrationProcessReport(string _com, string _loc, DateTime _from, DateTime _to, Int32 _opt, string _fincomp)
        {   // kapila
            _salesDAL = new SalesDAL();
            return _salesDAL.RegisProcessReport(_com, _loc, _from, _to, _opt, _fincomp);
        }

        public DataTable getVehRegComDetails(string _com, string _recno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getVehRegComDetails(_com, _recno);
        }
        public DataTable processIntroduComm(string _com, string _pc, DateTime _date, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.processIntroduComm(_com, _pc, _date, _user);
        }
        public Boolean IsChkVehRelease(string _inv)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsChkVehRelease(_inv);
        }
        public int UpdateCardMemberSerial(string _ser, string _cus, string _no, Int32 _isact)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.UpdateCardMemberSerial(_ser, _cus, _no, _isact);
            _financialDAL.ConnectionClose();
            return effect;
        }
        public int UpdatePromotCommHdr(string _circ, DateTime _todate, string _user)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.UpdatePromotCommHdr(_circ, _todate, _user);
            _financialDAL.ConnectionClose();
            return effect;
        }
        public Int32 UpdateCashConvInv(string _accno, string _reqno)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.UpdateCashConvInv(_accno, _reqno);

            return effect;
        }

        public int GetReversedCredVal(string _invno, decimal _revAmt, out Decimal _value)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetReversedCredVal(_invno, _revAmt, out  _value);
        }

        //kapila
        public Int32 SavePromotCommDefi(PromotComHdr _lstHdr, List<PromotComItem> _lstItem, List<PromotComSch> _lstSch, List<PromotComParty> _lstParty, List<PromotComDet> _lstDet)
        {
            Int32 effect = 0;
            Int32 _line = 1;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 _seqNo = _financialDAL.GetSerialID();

                _lstHdr.Hpch_seq = _seqNo;
                effect = _financialDAL.SavePromotCommHdr(_lstHdr);

                foreach (PromotComItem _lstItm in _lstItem)
                {
                    _lstItm.Hpci_seq = _seqNo;
                    effect = _financialDAL.SavePromotCommItem(_lstItm);
                }
                foreach (PromotComSch _lstSchm in _lstSch)
                {
                    _lstSchm.Hpcs_seq = _seqNo;
                    effect = _financialDAL.SavePromotCommSch(_lstSchm);
                }
                foreach (PromotComParty _lstPrty in _lstParty)
                {
                    _lstPrty.Hpcp_seq = _seqNo;
                    effect = _financialDAL.SavePromotCommParty(_lstPrty);
                }
                //foreach (PromotComDet _lstDt in _lstDet)
                //{
                //    _lstDt.Hpcd_seq = _seqNo;
                //    _lstDt.Hpcd_line = _line;
                //    effect = _financialDAL.SavePromotCommDet(_lstDt);
                //    _line++;
                //}

                _financialDAL.TransactionCommit();

            }
            catch (Exception err)
            {
                effect = -1;

                _financialDAL.TransactionRollback();

            }

            return effect;
        }
        public List<MasterInvoiceType> GetAllMainInvType()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAllMainInvType();
        }
        public DataTable GetPromotCommHdr(string _com, string _circ)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPromotCommHdr(_com, _circ);
        }
        public DataTable GetPromotCommParty(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPromotCommParty(_seq);
        }
        public DataTable GetPromotCommSaleTp(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPromotCommSaleTp(_seq);
        }
        public DataTable GetPromotCommDet(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPromotCommDet(_seq);
        }
        public DataTable GetPromotCommSch(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPromotCommSch(_seq);
        }

        public DataTable GetPromotCommDetails(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPromotCommDetails(_seq);
        }
        public int GetNonUtiRecTotal(string _com, string _pc, string _accno, out Decimal _value)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetNonUtiRecTotal(_com, _pc, _accno, out  _value);
        }

        public DataTable IsDoDaysExceed(string _com, string _pc, Int32 _val)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsDoDaysExceed(_com, _pc, _val);
        }

        public int GetTotSadQty(string _com, string _pc, out Decimal _tot_qty)
        {
            _financialDAL = new FinancialDAL();
            int result = _financialDAL.GetTotSadQty(_com, _pc, out  _tot_qty);
            return result;
        }

        public DataTable GetAddRecDetails(string _recno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAddRecDetails(_recno);
        }

        public string GetConsignmentDetails(DateTime _fromDate, DateTime _toDate, string _com, string _User, string _PB, string _pblevel, string _doctp, out string _err)
        {   // kapila
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _User);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            _dtResults = _financialDAL.GetConsignmentDetails(_fromDate, _toDate, _com, _PB, _pblevel, _doctp, _User);
            GLOB_DataTable.Merge(_dtResults);
            in_ISlast = in_ISlast + 1;
            //    }
            //}

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _User, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //kapila
        public DataTable GetVehRegPayTracker(string _com, string _pc, Int32 _withDtRange, DateTime _from, DateTime _to, string _invoice, string _engine, string _cust, string _chassis, string _reciept, string _vehNo, Int32 _stus)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("VehRegPayTracker") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.GetVehRegPayTracker(_com, _pc, _withDtRange, _from, _to, _invoice, _engine, _cust, _chassis, _reciept, _vehNo, _stus);
        }
        //kapila
        public Boolean IsInvalidAccount(string _invno, DateTime _dt)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsInvalidAccount(_invno, _dt);
        }

        //kapila
        public int SaveInsuHistory(MasterInsuHistory _mstInsuHis)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int _ef = _financialDAL.SaveInsuHistory(_mstInsuHis);
            _financialDAL.ConnectionClose();
            return _ef;
        }
        //kapila
        public DataTable GetInsuHistory(string Com, string _mloc, string _sloc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetInsuHistory(Com, _mloc, _sloc);
        }
        //kapila
        public List<PromotionVoucherPara> getProVouPara(string _vouCd)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getProVouPara(_vouCd);
        }
        //kapila
        public string Process_No_of_pending_app(string _com, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();

            _financialDAL.ConnectionOpen();
            //if (_securityDAL.Is_Report_DR("AgeAnalysisOfDebtorsArrearsDetail") == true)
            //{
            //    _financialDAL.ConnectionOpen_DR();
            //    _salesDAL.ConnectionOpen_DR();
            //}

            DataTable GLOB_DataTable = new DataTable();

            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DeptwisePendingApproval") == true) _financialDAL.ConnectionOpen_DR();
            _dtResults = _financialDAL.Process_No_of_pending_app();
            GLOB_DataTable.Merge(_dtResults);

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;

        }
        //kapila
        public Int32 SaveDenominationDet(List<DenomiDet> _lstDenomination, List<DenomiSum> _lstDenomiSum)
        {
            Int32 effect = 0;
            Int32 _detLine = 1;
            Int32 _seq = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                foreach (DenomiDet _lst in _lstDenomination)
                {
                    _lst.Gdd_det_line = _detLine;

                    effect = _financialDAL.SaveDenominationDet(_lst.Gdd_seq, _lst.Gdd_sum_line, _detLine, _lst.Gdd_pay_tp, _lst.Gdd_pay_subtp, _lst.Gdd_unit, _lst.Gdd_amt, _lst.Gdd_cre_by, _lst.Gdd_mod_by);
                    _detLine = _detLine + 1;
                    _seq = _lst.Gdd_seq;
                }
                _detLine = 1;
                foreach (DenomiSum _lstSum in _lstDenomiSum)
                {
                    _lstSum.Gds_line_no = _detLine;

                    effect = _financialDAL.SaveDenominationSum(_lstSum.Gds_seq_no, _lstSum.Gds_line_no, _lstSum.Gds_cashier, _lstSum.Gds_pay_tp, _lstSum.Gds_phy_amt, _lstSum.Gds_sys_amt, _lstSum.Gds_cre_by, _lstSum.Gds_mod_by);
                    _detLine = _detLine + 1;
                }
                Int32 _eff = _financialDAL.UpdateSignoffByDenom(_seq);

                _financialDAL.TransactionCommit();

            }
            catch (Exception err)
            {
                effect = -1;

                _financialDAL.TransactionRollback();

            }

            return effect;
        }
        //kapila  30/9/2015
        public int ProcessVehInsPayReq(string _com, string _pc, string _accno, DateTime _dt, Decimal _amt, string _user, DataTable _dtDet, out string _msg)
        {
            int effect = 0;
            Int32 _seq = 0;
            _financialDAL = new FinancialDAL(); _inventoryDAL = new InventoryDAL();
            _financialDAL.ConnectionOpen(); _inventoryDAL.ConnectionOpen(); _financialDAL.BeginTransaction(); _inventoryDAL.BeginTransaction();

            try
            {
                _seq = _inventoryDAL.GetSerialID();
                _financialDAL.Save_Veh_Ins_Pay_Req_Hdr(_seq, _com, _pc, _accno, _dt, _amt, _user);
                foreach (DataRow _exp in _dtDet.Rows)
                {
                    _financialDAL.Save_Veh_Ins_Pay_Req_Det(_seq, _exp.Field<string>("recno"), _exp.Field<DateTime>("recdate"), _exp.Field<decimal>("recamt"), _exp.Field<decimal>("amt"));
                    _financialDAL.UpdateRecByVehInsPayReq(_com, _pc, _exp.Field<string>("recno"));
                }

                _financialDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                effect = 1;
                _msg = string.Empty;
            }
            catch (Exception ex)
            {
                effect = -1;
                _msg = ex.Message;
                _financialDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }
        public DataTable getPendingDenom(string _com, string _pc, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getPendingDenom(_com, _pc, _user);
        }
        public DataTable getSignOnBySeq(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getSignOnBySeq(_seq);
        }
        public DataTable getUserTotalSales(string _com, string _pc, DateTime _date, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getUserTotalSales(_com, _pc, _date, _user);
        }
        public DataTable getDenominationDet(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getDenominationDet(_seq);
        }

        public DataTable get_pro_dis_def_by_seq(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_pro_dis_def_by_seq(_seq);
        }
        public DataTable getDenominationSum(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getDenominationSum(_seq);
        }
        public DataTable get_denom_types(string _com, Int32 _isCash)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_denom_types(_com, _isCash);
        }

        public DataTable get_PrintSignOn(Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_PrintSignOn(_seq);
        }
        public DataTable get_SignOn(string _com, string _pc, string _user, DateTime _dt)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_SignOn(_com, _pc, _user, _dt);
        }
        public int GetOpenBal(string _com, string _pc, DateTime _from, DateTime _to, string _user, out Decimal _opBal, out Decimal _closeBal, string _stus)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetOpenBal(_com, _pc, _from, _to, _user, out  _opBal, out  _closeBal, _stus);
        }
        public DataTable getPromotorTrans(string _cd)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getPromotorTrans(_cd);
        }

        public DataTable getPromotorRedeems(string _cd)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getPromotorRedeems(_cd);
        }
        public int GetCashRefundTot(DateTime _fromdate, DateTime _todate, string _pc, string _com, out Decimal _value)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCashRefundTot(_fromdate, _todate, _pc, _com, out  _value);
        }
        public int GetCreditNoteTot(DateTime _fromdate, DateTime _todate, string _pc, string _com, out Decimal _value)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCreditNoteTot(_fromdate, _todate, _pc, _com, out  _value);
        }
        public DataTable getShortSetle(string _com, string _pc, DateTime _month, Int32 _week)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getShortSetle(_com, _pc, _month, _week);
        }

        public Int32 UpdateIsSUNUpload(string _com, string _pc, DateTime _from, DateTime _to, Int32 _week)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.UpdateIsSUNUpload(_com, _pc, _from, _to, _week);
            _financialDAL.ConnectionClose();
            return _eff;

        }

        public Boolean checkDocrealized(string _com, string _pc, DateTime _dt, string _doctp, string _accno, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.checkDocrealized(_com, _pc, _dt, _doctp, _accno, _ref);
        }

        //kapila
        public DataTable ProcessSUNUpload_BankCharges(DateTime _from, DateTime _to, string _com, string _user, string _chanel, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_BankCharges(_from, _to, _com, _user, _chanel, _acc_period, _sunID, _file);
        }

        //kapila
        public Boolean checkDocBankState(string _pc, DateTime _dt, string _doctp, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.checkDocBankState(_pc, _dt, _doctp, _ref);
        }

        //kapila
        public Boolean isValidReqType(string _code)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.isValidReqType(_code);
        }

        public Int32 CancelApprovedRequest(string _ref, string _user)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.CancelApprovedRequest(_ref, _user);
            _financialDAL.ConnectionClose();
            return _eff;

        }

        public Int32 UpdateBankAdjPC(string _com, string _pc, DateTime _date, string _accno, string _adjtp, string _ref, string _newpc, Decimal _val, string _newrem)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.UpdateBankAdjPC(_com, _pc, _date, _accno, _adjtp, _ref, _newpc, _val, _newrem);
            _financialDAL.ConnectionClose();
            return _eff;

        }

        //kapila
        public Int32 SaveBankAdj(ScanPhysicalDocReceiveDet _doc, string _bsta_com, string _bsta_pc, DateTime _bsta_dt, string _bsta_accno, string _bsta_adj_tp, string _bsta_adj_tp_desc, Decimal _bsta_amt, string _bsta_refno, string _bsta_rem, string _bsta_cre_by, DateTime _month, Int32 _week, string _bnk_id, string _bnk_cd, string _mid)
        {
            Int32 effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                //GNT_BNK_STMNT_ADJ
                int X = _financialDAL.SaveBankAdj(_bsta_com, _bsta_pc, _bsta_dt, _bsta_accno, _bsta_adj_tp, _bsta_amt, _bsta_refno, _bsta_rem, _bsta_cre_by, _mid);

                //GNT_BNK_STMNT_DET || if p_adj_tp in ('DEPOSIT','CHEQUE','CS_CHEQUE') GNT_RCV_DSK_DOC
                effect = _financialDAL.SaveBankAdjDet(_bsta_com, _bsta_pc, _bsta_dt, _bsta_accno, _bsta_adj_tp, _bsta_adj_tp_desc, _bsta_refno, _bsta_amt, 1, _bsta_dt, 1, _bsta_cre_by, _month, _week, _bnk_id, _bnk_cd, _bsta_rem, _mid, _doc.Grdd_doc_bank_branch, _doc.BSTD_SUN_ACC);


                _financialDAL.TransactionCommit();

            }
            catch (Exception err)
            {
                effect = -1;
                _financialDAL.TransactionRollback();

            }

            return effect;
        }
        //kapila
        public DataTable GetBankAdj(string _com, DateTime _date, string _accno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBankAdj(_com, _date, _accno);
        }
        //kapila
        public DataTable GetBankStmntDetails(string _docTp, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBankStmntDetails(_docTp, _ref);
        }
        //kapila 4/11/2013
        public int GetIncSchPsnCatDesc(string _cd, out string _desc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetIncSchPsnCatDesc(_cd, out  _desc);
        }

        public int GetCCRecTot(string _com, DateTime _date, string _accno, out decimal _val)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCCRecTot(_com, _date, _accno, out  _val);
        }

        public DataTable Process_AgeOfDebtors_Arrears_Chanel(DateTime _asatdate, string _com, string _pc, string _user, string _scheme, string _item, string _cat1, string _cat2, string _cat3, string _model, string _brand, Boolean _Isdetail)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgeOfDebtorsArrearsChnl") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.Process_AgeOfDebtors_Arrears_Chanel(_asatdate, _com, _pc, _user, _scheme, _item, _cat1, _cat2, _cat3, _model, _brand, _Isdetail);
        }

        public List<RemSection> GetSection()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSection();
        }
        public List<RemSection> GetAuthorizeTansactions(string _user_id)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAuthorizeTansactions(_user_id);
        }
        public DataTable GetRemSumHeadingBySec(string _section)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRemSumHeadingBySec(_section);
        }


        public RemitanceSumHeading GetRemitanceData(string _sec, string _code)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRemitanceData(_sec, _code);
        }

        public int SaveRemSumHeading(RemitanceSumHeading _remsumheading)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int X = _financialDAL.SaveRemSumHeading(_remsumheading);
            _financialDAL.ConnectionClose();
            return X;
        }

        public int SaveRemSummaryDetails(RemitanceSummaryDetail _remsumdet)
        {
            int effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();

                // Add by tharindu due to save record in gnt_rcv_dsk_doc
                int X = _financialDAL.SaveRemSummaryDetails(_remsumdet);
                if (X == 1)
                {
                    int Y = _financialDAL.SaveInternalVoucherClaim(_remsumdet);
                }
                //kapila 27/11/2013 internal payment voucher updation
                if (_remsumdet.Rem_sec == "05" && _remsumdet.Rem_cd == "002")
                {
                    int Y = _financialDAL.UpdateIntVoucher(_remsumdet.Rem_com, _remsumdet.Rem_ref_no, 1, _remsumdet.Rem_com, _remsumdet.Rem_pc);
                }

                //5/9/2014 collection bonus updation
                if (_remsumdet.Rem_sec == "02" && _remsumdet.Rem_cd == "013")
                {
                    int Z = _financialDAL.UpdateColBonusVoucher(_remsumdet.Rem_com, _remsumdet.Rem_pc, _remsumdet.Rem_ref_no, 1, _remsumdet.Rem_cre_by);
                }

                _financialDAL.ConnectionClose();

            }
            catch (Exception err)
            {
                effect = -1;
                _financialDAL.TransactionRollback();

            }
            return effect;
        }

        public int SaveRemSumLimitations(RemSumDefinitions _remsumdef)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();

            Int32 _seqNo = _inventoryDAL.GetSerialID();
            _remsumdef.Rsmd_seq = _seqNo;
            int X = _financialDAL.SaveRemSumLimitations(_remsumdef);
            _financialDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return X;
        }

        public List<MasterCompany> GetALLMasterCompaniesDat()
        {
            throw new NotImplementedException();
        }

        public List<RemitanceSumHeading> get_rem_type_by_sec(string _sec, int p_fix)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_rem_type_by_sec(_sec, p_fix);
        }

        public DataTable GetRemSumLimitations(string _type, string _code, string _sec, string _remcode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRemSumLimitations(_type, _code, _sec, _remcode);
        }

        public List<RemitanceSummaryDetail> GetRemitanceSumDetail(DateTime _remDate, string _pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRemitanceSumDetail(_remDate, _pc);
        }

        public DataTable GetRemitanceSumDet(DateTime _remDate, string _pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRemitanceSumDet(_remDate, _pc);
        }

        public DataTable GetBanks()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBanks();
        }
        public List<RemSection> GetDistinctSartMainTP(string _user_id)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetDistinctSartMainTP(_user_id);
        }
        public DataTable GetReturnCheques(string _loc, string _ref, string _bCode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetReturnCheques(_loc, _ref, _bCode);
        }

        public Int32 UpdateVehRegDefin(Int32 _seq)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.UpdateVehRegDefin(_seq);

            return effect;
        }

        public Int32 UpdateReturnCheques(string _ref, string _oldRef, string _bCode, string _oldBcode, string _branch, DateTime _date, string _com, string _pc)
        {
            Int32 effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                effect = _financialDAL.UpdateReturnCheques(_ref, _oldRef, _bCode, _oldBcode, _branch, _date);

                if (effect == 0)
                {
                    effect = _financialDAL.UpdateRemRtnChq(_ref, _bCode, _com, _pc, "05", "003", _oldRef, _oldBcode, _date, _branch);
                }

                _financialDAL.TransactionCommit();
            }
            catch (Exception err)
            {
                effect = -1;
                _financialDAL.TransactionRollback();

            }
            return effect;
        }

        public DataTable GetReturnChequeCount(string _ref, string _bCode, string _loc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetReturnChequeCount(_ref, _bCode, _loc);
        }

        public Int32 SaveReturnCheque(ChequeReturn _chequeReturn)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.SaveReturnCheque(_chequeReturn);
        }

        public DataTable GetReturnChequeDetails()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetReturnChequeDetails();
        }

        //kapila
        public DataTable ProcessDayEnd(DateTime _date, string _com, string _pc, Int32 _week, string _user, string _insTp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessDayEnd(_date, _com, _pc, _week, _user, _insTp);
            //delete from table


        }

        //kapila
        public DataTable get_Rem_Sum_Rep_View(DateTime _date, string _com, string _pc, string _user, string _sec, Decimal _comm, string _insTp)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            List<DayEnd> _list = new List<DayEnd>();
            _generalDAL = new GeneralDAL();
            //comented by kapila 12/10/2016 (reason excess remitance calc error)
            //MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc); //kapila 12/12/2015
            //if (_mpc.MPC_GRADE != "XXX")
            //{
            //    if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _date.Date < DateTime.Now.Date)
            //    {
            //        _list = _financialDAL.GetDayEnds(_com, _pc, _date, _date);       //kapila 1/12/2015
            //        foreach (DayEnd day in _list)
            //        {
            //            if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
            //                _financialDAL.ConnectionOpen_DR();
            //        }
            //    }
            //}
            DataTable X = _financialDAL.get_Rem_Sum_Rep_View(_date, _com, _pc, _user, _sec, _comm, _insTp);
            _financialDAL.ConnectionClose();
            return X;
        }

        //kapila
        public DataTable get_Rem_Sum_Rep_View_dt_range(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _sec, Decimal _comm, string _insTp)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            List<DayEnd> _list = new List<DayEnd>();     //kapila add to logical stand by 21/9/2015
            _generalDAL = new GeneralDAL();
            MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc); //kapila 12/12/2015
            if (_mpc.MPC_GRADE != "XXX")
            {
                if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _to.Date < DateTime.Now.Date)
                {
                    _list = _financialDAL.GetDayEnds(_com, _pc, _to, _to);       //kapila 1/12/2015
                    foreach (DayEnd day in _list)
                    {
                        if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
                            _financialDAL.ConnectionOpen_DR();
                    }
                }
            }
            DataTable X = _financialDAL.get_Rem_Sum_Rep_View_dt_range(_from, _to, _com, _pc, _user, _sec, _comm, _insTp);
            _financialDAL.ConnectionClose();
            return X;
        }

        //kapila
        public DataTable GetRemSummaryReport(string _com, string _pc, DateTime _fromDate, DateTime _toDate, string _sec, out Decimal _totval, out Decimal _totvalFinal)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 21/9/2015
            List<DayEnd> _list = new List<DayEnd>();
            _generalDAL = new GeneralDAL();
            MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc); //kapila 12/12/2015
            if (_mpc.MPC_GRADE != "XXX")
            {
                if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _toDate.Date < DateTime.Now.Date)
                {
                    _list = _financialDAL.GetDayEnds(_com, _pc, _toDate, _toDate);       //kapila 1/12/2015
                    foreach (DayEnd day in _list)
                    {
                        if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
                            _financialDAL.ConnectionOpen_DR();
                    }
                }
            }
            DataTable X = _financialDAL.GetRemSummaryReport(_com, _pc, _fromDate, _toDate, _sec, out _totval, out _totvalFinal);
            _financialDAL.ConnectionClose();
            return X;
        }

        //kapila
        public DataTable GetRemSummaryReport_Win(string _com, string _pc, DateTime _fromDate, DateTime _toDate, string _sec, out Decimal _totval, out Decimal _totvalFinal)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 21/9/2015
            List<DayEnd> _list = new List<DayEnd>();
            _generalDAL = new GeneralDAL();
            //comented by kapila 12/10/2016 (reason excess remitance calc error)
            //MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc); //kapila 12/12/2015
            //if (_mpc.MPC_GRADE != "XXX")
            //{
            //    if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _toDate.Date < DateTime.Now.Date)
            //    {
            //        _list = _financialDAL.GetDayEnds(_com, _pc, _toDate, _toDate);       //kapila 1/12/2015
            //        foreach (DayEnd day in _list)
            //        {
            //            if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
            //                _financialDAL.ConnectionOpen_DR();
            //        }
            //    }
            //}
            DataTable X = _financialDAL.GetRemSummaryReport_Win(_com, _pc, _fromDate, _toDate, _sec, out _totval, out _totvalFinal);
            _financialDAL.ConnectionClose();
            return X;
        }
        //kapila
        public Boolean IsRemHeadFixed(string _sec, string _code)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsRemHeadFixed(_sec, _code);
        }

        //kapila 8/8/2012
        public int SaveRemAdjustment(RemitanceAdjustment _remAdj, MasterAutoNumber _masterAutoNumber)
        {
            Int16 effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();

            Int32 _seqNo = _inventoryDAL.GetSerialID();
            _remAdj.Adr_seq_no = _seqNo;

            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
            string _documentNo = _remAdj.Adr_pc + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("0000000", CultureInfo.InvariantCulture);
            _remAdj.Adr_adj_no = _documentNo;
            effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

            int X = _financialDAL.SaveRemAdjustment(_remAdj, _masterAutoNumber);
            _financialDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return X;
        }

        //kapila 8/8/2012
        public int GetTotRemitance(string _com, DateTime _from, DateTime _to, string _pc, out Decimal _totvalue)
        {
            Decimal _totval = 0;
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 13/7/2016
            List<DayEnd> _list = new List<DayEnd>();

            //comented by kapila 12/10/2016 (reason excess remitance calc error)
            //reun-comented kapila 30/6/2017 req by dilanda
            if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _to.Date < DateTime.Now.Date)
            {
                Boolean _isOvrFound = _financialDAL.check_overwriten_dayend(_com, _pc, _from, _to);
                if (_isOvrFound == true)
                    _financialDAL.ConnectionOpen_DR();

            }

            _financialDAL.GetTotRemitance(_com, _from, _to, _pc, out  _totval);

            _totvalue = _totval;
            return 1;

        }

        //kapila 8/8/2012
        public int GetPrvDayExcess(DateTime _date, string _pc, string _com, out Decimal _value)
        {
            Decimal _totval = 0;
            _financialDAL = new FinancialDAL();
            //_securityDAL = new SecurityDAL();   //kapila 22/8/2016
            //if (_securityDAL.Is_Report_DR("GetPrvDayExcess") == true) _financialDAL.ConnectionOpen_DR();
            _financialDAL.GetPrvDayExcess(_date, _pc, _com, out  _totval);

            _value = _totval;
            return 1;

        }

        //kapila 9/8/2012
        public int SaveDayEnd(DayEnd _dayEnd)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            _financialDAL.SaveDayEnd(_dayEnd);

            _financialDAL.ConnectionClose();
            return 1;

        }

        //kapila 9/8/2012
        public Boolean IsValidDayEndDate(DateTime _date, string _pc, out DateTime _invalidDate)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            _invalidDate = Convert.ToDateTime("31/Dec/9999");
            Boolean X = _financialDAL.IsInvalidDayEndDate_1(_date, _pc);
            if (X == true)
            {
                DataTable _dt = _financialDAL.getInvalidDate(_date, _pc);
                if (_dt.Rows.Count > 0)
                {
                    _invalidDate = Convert.ToDateTime(_dt.Rows[0]["upd_dt"]);
                }
                _financialDAL.ConnectionClose();
                return false;
            }
            else
            {
                Boolean Y = _financialDAL.IsInvalidDayEndDate_2(_date, _pc);
                if (Y == true)
                {
                    Boolean Z = _financialDAL.IsInvalidDayEndDate_3(_date, _pc);
                    if (Z == true)
                    {
                        _financialDAL.ConnectionClose();
                        return true;
                    }
                    else
                    {
                        _financialDAL.ConnectionClose();
                        return false;
                    }
                }
            }

            _financialDAL.ConnectionClose();
            return true;

        }

        public int GetDayEndInit(DateTime _fromdate, DateTime _todate, string _sec, string _code, string _type, string _pc, string _com, out Decimal _value, out Decimal _CIH)
        {
            Decimal _valFin = 0;
            _financialDAL = new FinancialDAL();
            //      _financialDAL.ConnectionOpen();

            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 21/9/2015
            List<DayEnd> _list = new List<DayEnd>();
            _generalDAL = new GeneralDAL();
            MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc); //kapila 12/12/2015
            if (_mpc.MPC_GRADE != "XXX")
            {
                if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _todate.Date < DateTime.Now.Date)
                {
                    _list = _financialDAL.GetDayEnds(_com, _pc, _todate, _todate);       //kapila 1/12/2015
                    foreach (DayEnd day in _list)
                    {
                        if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
                            _financialDAL.ConnectionOpen_DR();
                    }
                }
            }
            _financialDAL.GetRemSumDet_new(_fromdate, _todate, _sec, _code, _pc, _com, out _value, out _valFin);
            _financialDAL.GetRemAdj(_fromdate, _todate, "06", "001", _pc, out  _CIH);
            //      _financialDAL.ConnectionClose();
            return 1;
        }

        //public List<RemAdjTypes> GetAdjTypes()
        //{
        //    _financialDAL = new FinancialDAL();
        //    return _financialDAL.GetAdjTypes();
        //}

        public List<MasterOutsideParty> GetBusCom(string _type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBusCom(_type);
        }

        //kapila
        public int GetTotDeductions(DateTime _from, DateTime _to, string _pc, out Decimal _value)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetTotDeductions(_from, _to, _pc, out  _value);
        }

        //kapila
        public Boolean IsTxnFoundAfterDayEnd(string _com, string _pc, DateTime _date, string _type)
        {
            _financialDAL = new FinancialDAL();
            Boolean _IsSales = _financialDAL.IsTxnFoundAfterDayEnd(_com, _pc, _date, "SALE");
            if (_IsSales == false)
            {
                Boolean _IsRec = _financialDAL.IsTxnFoundAfterDayEnd(_com, _pc, _date, "REC");
                if (_IsRec == false)
                {
                    Boolean _IsRvt = _financialDAL.IsTxnFoundAfterDayEnd(_com, _pc, _date, "RVT");
                    if (_IsRec == false)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return true;
            }
        }

        //kapila 
        public int GetTotRemAdj(DateTime _from, DateTime _to, string _sec, string _code, string _pc, out Decimal _totamt)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.GetRemAdj(_from, _to, "05", "001", _pc, out  _totamt);
            return 1;
        }

        public int GetQuotationTotal(string _qno, out Decimal _totamt)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.GetQuotationTotal(_qno, out  _totamt);
            return 1;
        }
        public int GetQuotationDPTotal(string _qno, out Decimal _totamt)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.GetQuotationDPTotal(_qno, out  _totamt);
            return 1;
        }

        //kapila 
        public int GetTotCollBonus(DateTime _from, DateTime _to, string _sec, string _code, string _pc, out Decimal _totamt)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.GetRemAdj(_from, _to, _sec, _code, _pc, out  _totamt);
            return 1;
        }

        public Int32 DeleteRemSum(string _com, string _pc, DateTime _date, string _sec, string _code, string _ref)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 X = _financialDAL.DeleteRemSum(_com, _pc, _date, _sec, _code, _ref);
            //kapila 27/11/2013
            if (_sec == "05" && _code == "002")
            {
                int Y = _financialDAL.UpdateIntVoucher(_com, _ref, 0, _com, _pc);
            }
            if (_sec == "02" && _code == "013")
            {
                int Y = _financialDAL.UpdateColBonusVoucher(_com, _pc, _ref, 0, "");
            }
            _financialDAL.ConnectionClose();
            return X;
        }

        public Int32 CancelExcessShortFinal(string _pc, DateTime _month, string _user)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 X = _financialDAL.CancelExcessShortFinal(_pc, _month, _user);
            _financialDAL.ConnectionClose();
            return X;
        }

        public Int32 CancelCashControlFinal(string _com, string _pc, DateTime _month, string _user)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 X = _financialDAL.CancelCashControlFinal(_com, _pc, _month, _user);
            _financialDAL.ConnectionClose();
            return X;
        }

        //kapila
        public DataTable GetRemSummaryReport_without_comm_withdraw(string _com, string _pc, DateTime _fromDate, DateTime _toDate, string _sec, out Decimal _totval, out Decimal _totvalFinal, Int32 _type)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 21/9/2015
            List<DayEnd> _list = new List<DayEnd>();
            _generalDAL = new GeneralDAL();
            MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc); //kapila 12/12/2015
            if (_mpc.MPC_GRADE != "XXX")
            {
                if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _toDate.Date < DateTime.Now.Date)
                {
                    _list = _financialDAL.GetDayEnds(_com, _pc, _toDate, _toDate);       //kapila 1/12/2015
                    foreach (DayEnd day in _list)
                    {
                        if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
                            _financialDAL.ConnectionOpen_DR();
                    }
                }
            }
            DataTable X = _financialDAL.GetRemSummaryReport_without_comm_withdraw(_com, _pc, _fromDate, _toDate, _sec, out _totval, out _totvalFinal, _type);
            _financialDAL.ConnectionClose();
            return X;
        }
        //kapila
        public DataTable GetRemSummaryReport_without_comm_withdraw_win(string _com, string _pc, DateTime _fromDate, DateTime _toDate, string _sec, out Decimal _totval, out Decimal _totvalFinal, Int32 _type)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 21/9/2015
            List<DayEnd> _list = new List<DayEnd>();
            _generalDAL = new GeneralDAL();
            MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc); //kapila 12/12/2015
            if (_mpc.MPC_GRADE != "XXX")
            {
                if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _toDate.Date < DateTime.Now.Date)
                {
                    _list = _financialDAL.GetDayEnds(_com, _pc, _toDate, _toDate);       //kapila 1/12/2015
                    foreach (DayEnd day in _list)
                    {
                        if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
                            _financialDAL.ConnectionOpen_DR();
                    }
                }
            }
            DataTable X = _financialDAL.GetRemSummaryReport_without_comm_withdraw_win(_com, _pc, _fromDate, _toDate, _sec, out _totval, out _totvalFinal, _type);
            _financialDAL.ConnectionClose();
            return X;
        }
        //kapila
        public DataTable ProcessSOS(DateTime _from, DateTime _to, string _com, string _pc, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSOS(_from, _to, _com, _pc, _user);
        }

        public List<QoutationDetails> GetSupQoutation(string _com, string _pc, string _quot)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSupQoutation(_com, _pc, _quot);
        }
        //kapila 27/8/2012
        public int GetRemSumDet(DateTime _fromdate, DateTime _todate, string _sec, string _code, string _pc, string _com, out Decimal _value, out Decimal _valueFinal)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 21/9/2015
            List<DayEnd> _list = new List<DayEnd>();
            _generalDAL = new GeneralDAL();
            MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc); //kapila 12/12/2015
            if (_mpc.MPC_GRADE != "XXX")
            {
                if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _todate.Date < DateTime.Now.Date)
                {
                    _list = _financialDAL.GetDayEnds(_com, _pc, _todate, _todate);       //kapila 1/12/2015
                    foreach (DayEnd day in _list)
                    {
                        if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
                            _financialDAL.ConnectionOpen_DR();
                    }
                }
            }
            _financialDAL.GetRemSumDet_new(_fromdate, _todate, _sec, _code, _pc, _com, out _value, out _valueFinal);
            _financialDAL.ConnectionClose();
            return 1;
        }

        public int GetTotDisbForCalc_Excess(DateTime _from, DateTime _to, string _pc, out Decimal _value)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetTotDisbForCalc_Excess(_from, _to, _pc, out  _value);
        }

        //kapila
        public Boolean IsOnceRemType(string _sec, string _code)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsOnceRemType(_sec, _code);
        }
        public Boolean IsInvReversed(string _com, string _pc, string _invno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsInvReversed(_com, _pc, _invno);
        }

        public Boolean IsOnceRemDataExist(string _com, string _pc, string _sec, string _code, DateTime _month)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsOnceRemDataExist(_com, _pc, _sec, _code, _month);
        }
        //kapila
        public DataTable ProcessRemDetail(DateTime _from, DateTime _to, string _com, string _pc, string _user)
        {
            _financialDAL = new FinancialDAL();

            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 3/12/2015
            _generalDAL = new GeneralDAL();
            MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc);
            if (_mpc.MPC_GRADE != "XXX")
            {
                List<DayEnd> _list = new List<DayEnd>();
                if (_securityDAL.Is_Report_DR("RemittanceDetail") == true && _to.Date < DateTime.Now.Date)
                {
                    _list = _financialDAL.GetDayEnds(_com, _pc, _to, _to);       //kapila 1/12/2015
                    foreach (DayEnd day in _list)
                    {
                        if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
                            _financialDAL.ConnectionOpen_DR();
                    }
                }
            }
            return _financialDAL.ProcessRemDetail(_from, _to, _com, _pc, _user);
        }

        //kapila 13/9/2012
        public DataTable ProcessSUNUpload(string _month, DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, string _sun_user, string _file, string _insuTp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload(_month, _from, _to, _com, _pc, _user, _acc_period, _sun_user, _file, _insuTp);
        }
        //dilshan 31/10/2017
        public DataTable EvaluationSUNUpload(string _month, DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, string _sun_user, string _doctype)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ValuationSunUpload") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.EvaluationSUNUpload(_month, _from, _to, _com, _pc, _user, _acc_period, _sun_user, _doctype);
        }

        public DataTable EvaluationSUNUpload2(string _month, DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, string _sun_user, string _doctype)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.EvaluationSUNUpload2(_month, _from, _to, _com, _pc, _user, _acc_period, _sun_user, _doctype);
        }

        public DataTable GetUploadForwardSalesDetails(DateTime _asAtDate, string _User, string _brand, string _model, string _itemcode, string _itemcat1, string _itemcat2, string _itemcat3, string _agetp, decimal _age, string _com, string _pc, string _latestcost, string _otherloc, string _customer, string _user, string _acc_period, string _sun_user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetUploadForwardSalesDetails(_asAtDate, _User, _brand, _model, _itemcode, _itemcat1, _itemcat2, _itemcat3, _agetp, _age, _com, _pc, _latestcost, _otherloc, _customer, _user, _acc_period, _sun_user);
        }

        public int Get_prv_day_CIH(DateTime _date, string _com, string _pc, out Decimal _value)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_prv_day_CIH(_date, _com, _pc, out _value);
        }

        public int Generate_SOS_Text_File(string _month, DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, string _sun_user, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Generate_SOS_Text_File(_month, _from, _to, _com, _pc, _user, _acc_period, _sun_user, _file);
        }

        public DataTable ProcessFinalReminder(string _accno, string _type, DateTime _due)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessFinalReminder(_accno, _type, _due);
        }
        public DataTable ProcessHPArrearsPrint(string _accno, string _type, DateTime _due)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessHPArrearsPrint(_accno, _type, _due);
        }
        public DataTable ProcessSUNUpload_Receipt(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_Receipt(_from, _to, _com, _pc, _user, _acc_period, _sunID, _file);
        }

        public DataTable ProcessSUNUpload_JAD(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_JAD(_from, _to, _com, _pc, _user, _acc_period, _sunID, _file);
        }

        public DataTable ProcessSUNUpload_Invoice(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, Int32 _is_dealer, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_Invoice(_from, _to, _com, _pc, _user, _acc_period, _is_dealer, _sunID, _file);
        }

        public DataTable ProcessSUNUpload_Common(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, string _type, string _sbtype, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_Common(_from, _to, _com, _pc, _user, _acc_period, _type, _sbtype, _sunID, _file);
        }

        public DataTable ProcessSUNUpload_PBonus(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, Int32 _is_dealer, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_PBonus(_from, _to, _com, _pc, _user, _acc_period, _is_dealer, _sunID, _file);
        }

        public DataTable ProcessReceipt_Listing(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _recType)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessReceipt_Listing(_from, _to, _com, _pc, _user, _recType);
        }

        public int ProcessProductBonus(string _com, string _circ, string _ref, DateTime _from, DateTime _to, string _user)
        {
            _financialDAL = new FinancialDAL();
            DataTable _DT = _financialDAL.ProcessProductBonus(_com, _circ, _ref, _from, _to, _user);
            //for (int i = 0; i < _DT.Rows.Count; i++)
            //{

            //}
            return 1;
        }

        public Boolean IsCommCalculated(string _invno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsCommCalculated(_invno);
        }
        public DataTable ProcessReceipt_Listing_win(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _recType, string _prefix, string _payType, Int32 _iswithtime, DateTime _filterfromdt, DateTime _filtertodt)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            //if (_securityDAL.Is_Report_DR("Receipt_Listing_win") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.ProcessReceipt_Listing_win(_from, _to, _com, _pc, _user, _recType, _prefix, _payType, _iswithtime, _filterfromdt, _filtertodt);
        }


        public int Print_HP_Agreement(string _accNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Print_HP_Agreement(_accNo);
        }

        public DataTable Process_AgeOfDebtors_Arrears(DateTime _asatdate, string _com, string _pc, string _user, string _scheme)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DataTable X = _financialDAL.Process_AgeOfDebtors_Arrears(_asatdate, _com, _pc, _user, _scheme);
            _financialDAL.ConnectionClose();
            return X;
        }

        public DataTable get_Rem_Sum_Rep(string _com, string _pc, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();   //kapila add to logical stand by 21/9/2015
            _generalDAL = new GeneralDAL();
            MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(_com, _pc); //kapila 12/12/2015
            if (_mpc.MPC_GRADE != "XXX")
            {
                List<DayEnd> _list = new List<DayEnd>();
                if (_securityDAL.Is_Report_DR("RemittanceSummary") == true && _to.Date < DateTime.Now.Date)
                {
                    _list = _financialDAL.GetDayEnds(_com, _pc, _to, _to);       //kapila 1/12/2015
                    foreach (DayEnd day in _list)
                    {
                        if (Convert.ToDateTime(day.Upd_cre_dt).Date < DateTime.Now.Date)
                            _financialDAL.ConnectionOpen_DR();
                    }
                }
            }
            DataTable X = _financialDAL.get_Rem_Sum_Rep(_com, _pc, _from, _to);
            _financialDAL.ConnectionClose();
            return X;
        }
        public DataTable get_Trans_Variation(string _com, DateTime _from, DateTime _to, string _type, string _user, string _perm)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DataTable X = _financialDAL.get_Trans_Variation(_com, _from, _to, _type, _user, _perm);
            _financialDAL.ConnectionClose();
            return X;
        }

        public DataTable get_Rtn_Chq(string _pc, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DataTable X = _financialDAL.get_Rtn_Chq(_pc, _from, _to);
            _financialDAL.ConnectionClose();
            return X;
        }

        public DataTable GetSalesPromoterDet(string _com, string _pc, string _code)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSalesPromoterDet(_com, _pc, _code);
        }
        public DataTable GetLastRegDetails(string _engine, string _item, string _com, string _inv)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetLastRegDetails(_engine, _item, _com, _inv);
        }
        public DataTable Getrevertregistrationcharge(string _com, string _ptyTp, string _ptyCd, string _salesTp, string _itm, string _cat1, string _cat2, string _cat3, string _brand, string _fromPro, string _toPro, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Getrevertregistrationcharge(_com, _ptyTp, _ptyCd, _salesTp, _itm, _cat1, _cat2, _cat3, _brand, _fromPro, _toPro, _date);
        }
        public Boolean IsRevertAccount(string _com, string _pc, string _invno, DateTime _dt)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsRevertAccount(_com, _pc, _invno, _dt);
        }
        public DataTable get_bank_realization_det(string _com, string _pc, DateTime _date, string _accno, string _doctp, Decimal _amtfrom, Decimal _amtto, Int32 _is_real_stus, Int32 _nt_in_state, Int32 _oth_bank, Int32 _withNIS, string _ref)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();   //kapila 5/5/2016
            if (_securityDAL.Is_Report_DR("get_bank_realization_det") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.get_bank_realization_det(_com, _pc, _date, _accno, _doctp, _amtfrom, _amtto, _is_real_stus, _nt_in_state, _oth_bank, _withNIS, _ref);
        }
        public DataTable get_bank_realization_Hdr(string _com, DateTime _date, string _accno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_bank_realization_Hdr(_com, _date, _accno);
        }

        public DataTable Process_Debtor_Sales_Settlement(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _checkfromdt, Int32 _isOuts, string _cusdcd)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();   //kapila 30/11/2015
            if (_securityDAL.Is_Report_DR("DebtorSalesSettlement") == true) _financialDAL.ConnectionOpen_DR();
            DataTable X = _financialDAL.Process_Debtor_Sales_Settlement(_from, _to, _com, _pc, _user, _checkfromdt, _cusdcd, _isOuts);
            _financialDAL.ConnectionClose();
            return X;
        }

        public DataTable Process_Debtor_Sales_Receipts(DateTime _from, DateTime _to, string _com, string _pc, string _user)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();   //kapila 30/11/2015
            if (_securityDAL.Is_Report_DR("DebtorSalesReceipts") == true) _financialDAL.ConnectionOpen_DR();
            DataTable X = _financialDAL.Process_Debtor_Sales_Receipts(_from, _to, _com, _pc, _user);
            _financialDAL.ConnectionClose();
            return X;
        }

        public Decimal Get_Arrears(string _pc, string _accNo, DateTime _arrDate, DateTime _supDate)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Decimal _Val = _financialDAL.Get_Arrears(_pc, _accNo, _arrDate, _supDate);
            _financialDAL.ConnectionClose();
            return _Val;
        }

        public DataTable Process_Age_Anal_Debt_Outstand(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _cust, Int32 _tp)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();   //kapila 30/11/2015
            if (_securityDAL.Is_Report_DR("AgeAnalDebtOutstand") == true) _financialDAL.ConnectionOpen_DR();
            DataTable X = _financialDAL.Process_Age_Anal_Debt_Outstand(_from, _to, _com, _pc, _user, _cust, _tp);
            _financialDAL.ConnectionClose();
            return X;
        }

        public DataTable Process_Age_Anal_Debt_OutstandDCN(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _cust, Int32 _tp)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();   //kapila 30/11/2015
            if (_securityDAL.Is_Report_DR("AgeAnalDebtOutstand") == true) _financialDAL.ConnectionOpen_DR();
            DataTable X = _financialDAL.Process_Age_Anal_Debt_OutstandDCN(_from, _to, _com, _pc, _user, _cust, _tp);
            _financialDAL.ConnectionClose();
            return X;
        }

        public RemitanceSummaryDetail GetRemitanceAdjesmentDetails(string _com, string _pc, DateTime _date, string _section, string _code, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRemitanceAdjesmentDetails(_com, _pc, _date, _section, _code, _ref);
        }

        public Int32 UpdateRemitanceAdjusment(RemitanceSummaryDetail _remSum)
        {
            _financialDAL = new FinancialDAL();
            int result = 0;
            _financialDAL.ConnectionOpen();
            result = _financialDAL.UpdateRemitanceAdjusment(_remSum);
            _financialDAL.ConnectionClose();
            return result;
        }
        //kapila        
        public Int32 deleteRedeemPoints(Int32 _seq, string _mgrCode)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 X = _financialDAL.deleteRedeemPoints(_seq, _mgrCode);
            _financialDAL.ConnectionClose();
            return X;
        }

        //kapila
        public Int32 UpdateRedeemPromotor(string _mpr_cd, Decimal _mpr_red_pt, Decimal _mpr_red_cs, string _user, string _rem)
        {
            _financialDAL = new FinancialDAL();
            int result = 0;
            _financialDAL.ConnectionOpen();
            result = _financialDAL.UpdateRedeemPromotor(_mpr_cd, _mpr_red_pt, _mpr_red_cs, _user, _rem);
            _financialDAL.ConnectionClose();
            return result;
        }
        public Int32 CalcAddiProdComm(string _com, string _pc, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            int result = 0;
            _financialDAL.ConnectionOpen();
            result = _financialDAL.CalcAddiProdComm(_com, _pc, _from, _to);
            _financialDAL.ConnectionClose();
            return result;
        }

        public List<RemitanceSummaryDetail> GetRemitanceSumDetailAdjusment(DateTime _remDate, string _pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRemitanceSumDetailAdjusment(_remDate, _pc);
        }

        public Int32 SaveRemitanceStatus(RemitanceStatus _remSta)
        {
            _financialDAL = new FinancialDAL();
            _inventoryDAL = new InventoryDAL();
            int result = 0;
            using (TransactionScope _scope = new TransactionScope())
            {
                _inventoryDAL.ConnectionOpen();
                _financialDAL.ConnectionOpen();
                _remSta.Gpac_seq = _inventoryDAL.GetSerialID();
                result = _financialDAL.SaveRemitanceStatus(_remSta);
                _financialDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _scope.Complete();
            }
            return result;
        }

        public Int32 SaveExcessTrans(ExcessShortTrna _excsShortRem)
        {
            Int32 result = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.SaveExcessTrans(_excsShortRem);
            _financialDAL.ConnectionClose();
            return result;
        }

        public Int32 FinalizeDayEnd(RemitanceStatus _remSta, DateTime _from, DateTime _to, string _com, string _pc, string _user, out string _msg)
        {
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryDAL = new InventoryDAL();

                _financialDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                DataTable tmp_user_pc = _inventoryRepDAL.GetTempUserPcRptDB(_com, _user);

                if (tmp_user_pc.Rows.Count > 0)
                {
                    foreach (DataRow drow in tmp_user_pc.Rows)
                    {
                        _financialDAL.FinalizeDayEnd(_from, _to, _com, drow["tpl_pc"].ToString(), _user);
                        _remSta.Gpac_pc = drow["tpl_pc"].ToString();
                        _remSta.Gpac_seq = _inventoryDAL.GetSerialID();
                        _financialDAL.SaveRemitanceStatus(_remSta);
                    }
                }

                _financialDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                _msg = "";
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _msg = ex.Message;
                _financialDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
            }
            return result;
        }
        public DataTable GetExcsSettlementDridData(string _pc, DateTime _mnth)
        {
            DataTable DT;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DT = _financialDAL.GetExcsSettlementDridData(_pc, _mnth);
            _financialDAL.ConnectionClose();
            return DT;
        }

        public DataTable GetExcsBalanceDridData(string _com, string _pc)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DataTable DT = _financialDAL.GetExcsBalanceDridData(_com, _pc);
            _financialDAL.ConnectionClose();
            return DT;
        }

        public Int32 DeleteExcsSettlement(string _com, string _pc, DateTime _month, DateTime _txnDate)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 result = _financialDAL.DeleteExcsSettlement(_com, _pc, _month, _txnDate);
            _financialDAL.ConnectionClose();
            return result;
        }

        public DataTable GetExcessBalance(string _com, string _pc, DateTime _month, out Decimal _totval)
        {
            _financialDAL = new FinancialDAL();
            DataTable result = _financialDAL.GetExcessBalance(_com, _pc, _month, out  _totval);
            return result;
        }

        public List<ExcessRemitTypes> GetExcsShortRemitType(Int16 _isExcess)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetExcsShortRemitType(_isExcess);
        }

        public DataTable PrintDiriyaFund(string _com, DateTime _from, DateTime _to, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintDiriyaFund(_com, _from, _to, _user);
        }

        public Int32 Process_OtherLocation_Selling_Comm(DateTime _from, DateTime _to, string _com, string _loc, string _defPC, Int32 _week, string _user)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 X = _financialDAL.Process_OtherLocation_Selling_Comm(_from, _to, _com, _loc, _defPC, _week, _user);
            _financialDAL.ConnectionClose();
            return X;
        }
        public Int32 IsValidWeekDataRange(Int32 _year, Int32 _month, DateTime _from, DateTime _to, string _com)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 X = _financialDAL.IsValidWeekDataRange(_year, _month, _from, _to, _com);
            _financialDAL.ConnectionClose();
            return X;
        }


        public DataTable GetExcsStatus(string _pc, DateTime _month, out string _status, out string _id)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetExcsStatus(_pc, _month, out  _status, out _id);
        }

        public DataTable PrintAdvReceiptRegistry(string _com, DateTime _from, DateTime _to, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintAdvReceiptRegistry(_com, _from, _to, _user);
        }

        public int ProcessExcessShort(string _com, string _pc, Int32 _year, Int32 _month, string _ID, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessExcessShort(_com, _pc, _year, _month, _ID, _user);
        }

        public int GetTotalSettlements(string _com, string _pc, DateTime _month, Int32 _week, out Decimal _value)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetTotalSettlements(_com, _pc, _month, _week, out  _value);
        }

        public int ConfirmExcessShort(string _com, string _pc, DateTime _month, DateTime _date, string _ID, string _desc, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ConfirmExcessShort(_com, _pc, _month, _date, _ID, _desc, _user);
        }

        public DataTable GetcashControlAdj(string _com, string _pc, DateTime _month)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetcashControlAdj(_com, _pc, _month);
        }
        public DataTable GetApprovedRequests(string _com, string _pc, DateTime _from, DateTime _to, Int32 _isAllDate, string _reqTp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetApprovedRequests(_com, _pc, _from, _to, _isAllDate, _reqTp);
        }
        public Boolean CheckAppReqCancelPerm(string _user, string _reqtp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CheckAppReqCancelPerm(_user, _reqtp);
        }
        public DataTable GetcashControl(string _com, string _pc, DateTime _month)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetcashControl(_com, _pc, _month);
        }
        public Int32 SaveExcessHeader(ExcessShortHeader _excsShortHead)
        {
            Int32 result = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.SaveExcessHeader(_excsShortHead);
            _financialDAL.ConnectionClose();
            return result;
        }

        public Int32 SaveExcessDetails(ExcessShortDet _excsShortDet)
        {
            Int32 result = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.SaveExcessDetails(_excsShortDet);
            _financialDAL.ConnectionClose();
            return result;
        }

        public Int32 DeleteExcsShortDetail(string _ID)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 result = _financialDAL.DeleteExcsShortDetail(_ID);
            _financialDAL.ConnectionClose();
            return result;
        }

        public Int32 DeleteExcsShortOthRem(string _ID, Int32 _week, string _sec, string _code)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 result = _financialDAL.DeleteExcsShortOthRem(_ID, _week, _sec, _code);
            _financialDAL.ConnectionClose();
            return result;
        }

        public DataTable GetExcsShortGridData(string _com, string _pc, DateTime _month)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetExcsShortGridData(_com, _pc, _month);
        }

        public DataTable getVehInsReceipts(string _com, string _pc, DateTime _date, string _invno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getVehInsReceipts(_com, _pc, _date, _invno);
        }
        public DataTable getVehInsReceipts4Payment(string _com, string _pc, DateTime _date, string _invno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getVehInsReceipts4Payment(_com, _pc, _date, _invno);
        }

        public DataTable GetExcsShortOthRemGridData(string _ID)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetExcsShortOthRemGridData(_ID);
        }

        public Boolean IsDayEndDone(string _com, string _pc, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsDayEndDone(_com, _pc, _from, _to);
        }

        public Boolean IsDayEndDone_win(string _com, string _pc, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsDayEndDone_Win(_com, _pc, _from, _to);
        }

        public Boolean IsPrvDayTxnsFound_DO(string _com, string _loc, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsPrvDayTxnsFound_DO(_com, _loc, _date);
        }

        public Boolean IsPrvDayTxnsFound_DO_Rcc(string _com, string _loc, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            Boolean _IsPrvDayTxnsFound_Rec = _financialDAL.IsPrvDayTxnsFound_rcc(_com, _loc, _date);
            if (_IsPrvDayTxnsFound_Rec == false)
            {
                Boolean _IsPrvDayTxnsFound_Remit = _financialDAL.IsPrvDayTxnsFound_DO(_com, _loc, _date);
                if (_IsPrvDayTxnsFound_Remit == false)
                {
                    Boolean _IsPrvDayTxnsFound_Req = _financialDAL.IsPrvDayTxnsFound_Req(_com, _loc, _date);
                    if (_IsPrvDayTxnsFound_Req == false)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return true;
            }

        }

        public Boolean IsPrvDayTxnsFound_Sale_Rec(string _com, string _pc, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            Boolean _IsPrvDayTxnsFound = _financialDAL.IsPrvDayTxnsFound(_com, _pc, _date);
            if (_IsPrvDayTxnsFound == false)
            {
                Boolean _IsPrvDayTxnsFound_Rec = _financialDAL.IsPrvDayTxnsFound_rec(_com, _pc, _date);
                if (_IsPrvDayTxnsFound_Rec == false)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return true;
            }
        }
        public Boolean IsPrvDayTxnsFound_Sale_DO(string _com, string _pc, string _loc, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            Boolean _IsPrvDayTxnsFound = _financialDAL.IsPrvDayTxnsFound(_com, _pc, _date);
            if (_IsPrvDayTxnsFound == false)
            {
                Boolean _IsPrvDayTxnsFound_Rec = _financialDAL.IsPrvDayTxnsFound_DO(_com, _loc, _date);
                if (_IsPrvDayTxnsFound_Rec == false)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return true;
            }
        }

        public Boolean IsPrvDayTxnsFound(string _com, string _pc, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            Boolean _IsPrvDayTxnsFound = _financialDAL.IsPrvDayTxnsFound(_com, _pc, _date);
            if (_IsPrvDayTxnsFound == false)
            {
                Boolean _IsPrvDayTxnsFound_Rec = _financialDAL.IsPrvDayTxnsFound_rec(_com, _pc, _date);
                if (_IsPrvDayTxnsFound_Rec == false)
                {
                    Boolean _IsPrvDayTxnsFound_Remit = _financialDAL.IsPrvDayTxnsFound_Remit(_com, _pc, _date);
                    if (_IsPrvDayTxnsFound_Remit == false)
                    {
                        return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return true;
            }
        }

        //public Boolean IsPrvDayTxnsFound_rec(string _com, string _pc, DateTime _date)
        //{
        //    _financialDAL = new FinancialDAL();
        //    return _financialDAL.IsPrvDayTxnsFound_rec(_com, _pc, _date);
        //}

        public Int32 ProcessFinalizeDayEnd(DateTime _date, string _com, string _pc)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int X = _financialDAL.ProcessFinalizeDayEnd(_date, _com, _pc);
            return X;
        }

        public string GetExcessShortID(string _Com, string _pc, DateTime _date)
        {
            string X = "";
            _financialDAL = new FinancialDAL();
            DataTable dt_doctp = _financialDAL.GetExcessShortID(_Com, _pc, _date);
            if (dt_doctp.Rows.Count > 0)
            {
                foreach (DataRow drow in dt_doctp.Rows)
                {
                    X = drow["esrh_id"].ToString();
                }
            }

            return X;
        }

        public int PrintExcessShort(string _com, string _pc, string _ID, DateTime _date, string _status, string _user, out Decimal _prvBal, out Decimal _curBal)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int X = _financialDAL.PrintExcessShort(_com, _pc, _ID, _date, _status, _user);

            Decimal _prevBal = 0;
            int Y = _financialDAL.GetExcessShortPrvBalance(_com, _pc, _date, out _prevBal);
            _prvBal = _prevBal;

            Decimal _currBal = 0;
            int Z = _financialDAL.GetExcessShortCurBalance(_ID, out _currBal);
            _curBal = _currBal;

            _financialDAL.ConnectionClose();
            return X;
        }

        //kapila 6/11/2012
        public int GetClosingBalance(DateTime _asAtDate, string _accno, out Decimal _value)
        {
            Decimal _totval = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.GetClosingBalance(_asAtDate, _accno, out  _totval);

            _value = _totval;
            return 1;

        }

        //kapila 9/11/2012
        public int Process_Excess_short_statement(DateTime _date, string _com, string _pc, string _user)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int X = _financialDAL.Process_Excess_short_statement(_date, _com, _pc, _user);
            _financialDAL.ConnectionClose();
            return X;
        }

        public int GetFirstDayEndDate(string _com, string _pc, DateTime _from, DateTime _to, out DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int X = _financialDAL.GetFirstDayEndDate(_com, _pc, _from, _to, out  _date);
            _financialDAL.ConnectionClose();
            return X;
        }


        public int GetLastDayEndDate(string _com, string _pc, DateTime _from, out DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int X = _financialDAL.GetLastDayEndDate(_com, _pc, _from, out  _date);
            _financialDAL.ConnectionClose();
            return X;
        }

        public int ProcessNoOfAccounts(DateTime _from, DateTime _to, DateTime _from1, string _com, string _user, Int32 _status)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int X = _financialDAL.ProcessNoOfAccounts(_from, _to, _from1, _com, _user, _status);
            _financialDAL.ConnectionClose();
            return X;
        }

        //kapila 21/11/2012
        public int Process_daily_trans_sum(DateTime _from, DateTime _to, string _com, string _pc, string _user)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int X = _financialDAL.Process_daily_trans_sum(_from, _to, _com, _pc, _user);
            _financialDAL.ConnectionClose();
            return X;
        }

        #region Scan/Physical Document
        //Shani 23-10-2012
        public DataTable GetWeeks_on_month(Int32 month, Int32 year, Int32 weekNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetWeeks_on_month(month, year, weekNo);
        }

        public DataTable Get_GNT_RCV_DSK_DOC(string com, string pc, DateTime monthYear, Int32 week, string doc_tp, Int32 _isDocRec)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_GNT_RCV_DSK_DOC(com, pc, monthYear, week, doc_tp, _isDocRec);
        }
        public DataTable Get_GNT_RCV_DSK_DOC_onDateRange(string com, string pc, DateTime fromDt, DateTime toDt, string doc_tp, Int32 _isDocRec)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_GNT_RCV_DSK_DOC_onDateRange(com, pc, fromDt, toDt, doc_tp, _isDocRec);
        }
        public DataTable Get_SunUploaded_gnt_rcv_dsk_doc(string com, string pc, DateTime monthYear, Int32 week, string doc_tp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_SunUploaded_gnt_rcv_dsk_doc(com, pc, monthYear, week, doc_tp);
        }
        public Int32 Process_bank_realization(string _com, string _pc, DateTime _date, string _accno, Int32 _isall, string _user, DateTime _month, Int32 _week)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.Process_bank_realization(_com, _pc, _date, _accno, _isall, _user, _month, _week);
            _financialDAL.ConnectionClose();
            return _eff;

        }
        public Int32 Update_GNT_RCV_DSK_DOC(List<ScanPhysicalDocReceiveDet> updateDoc_list, Int32 isa_scanUpdate, Int32 isa_sunUpdate, Int32 isa_rcvUpdate)
        {

            _financialDAL = new FinancialDAL();
            try
            {
                using (TransactionScope _scope = new TransactionScope())
                {
                    _financialDAL.ConnectionOpen();
                    foreach (ScanPhysicalDocReceiveDet _doc in updateDoc_list)
                    {
                        Int32 eff = _financialDAL.Update_GNT_RCV_DSK_DOC(_doc, isa_scanUpdate, isa_sunUpdate, isa_rcvUpdate);
                    }
                    _financialDAL.ConnectionClose();
                    _scope.Complete();
                }
            }
            catch (Exception ex)
            {
                return -1;
            }
            return 1;
        }
        public Int32 Save_GNT_RCV_DSK_DOC(string createBy, DateTime createDt, string com, string pc, Int32 month, Int32 year, Int32 week, DateTime monthYear)
        {
            _financialDAL = new FinancialDAL();
            try
            {
                _financialDAL.ConnectionOpen();
                _financialDAL.Save_GNT_RCV_DSK_DOC(createBy, createDt, com, pc, month, year, week, monthYear);
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                return -1;
            }
            return 1;
        }
        public Int32 new_Save_GNT_RCV_DSK_DOC(string createBy, DateTime createDt, string com, string pc, Int32 WEEK, DateTime frmDt, DateTime toDt, string _type, DateTime _month)
        {
            _financialDAL = new FinancialDAL();
            try
            {
                _financialDAL.ConnectionOpen();
                _financialDAL.new_Save_GNT_RCV_DSK_DOC(createBy, createDt, com, pc, WEEK, frmDt, toDt, _type, _month);
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                return -1;
            }
            return 1;
        }

        public Int32 Delete_GNT_RCV_DSK_DOC_new(string _com, string _pc, DateTime fromDt, DateTime toDt)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 result = _financialDAL.Delete_GNT_RCV_DSK_DOC_new(_com, _pc, fromDt, toDt);
            _financialDAL.ConnectionClose();
            return result;
        }

        public Int32 UpdateBankRealizationDetails(ScanPhysicalDocReceiveDet _doc, List<BankRealDet> _bnkRlsList, out string _msg)
        {
            Int32 result = 0;
            _msg = "";
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                if (_doc != null)
                {
                    Int32 ef = _financialDAL.Save_doc_GNT_RCV_DSK_DOC(_doc);
                    ef = _financialDAL.Update_GNT_RCV_DSK_DOC(_doc, 0, 0, 1);
                }

                foreach (BankRealDet _lst in _bnkRlsList)
                {
                    // result = _financialDAL.SaveBankAdj(_lst);
                }

                _financialDAL.TransactionCommit();
                result = 1;
                _msg = string.Empty;

            }
            catch (Exception ex)
            {
                result = -1;
                _msg = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }
            return result;
        }

        public Int32 UpdateBankRealizationDet(List<BankRealDet> _bnkRlsList, string _Bsth_com, DateTime _Bsth_dt, string _Bsth_accno, Decimal _Bsth_opbal, Decimal _Bsth_realizes, Decimal _Bsth_prv_realize, Decimal _Bsth_cc, Decimal _Bsth_adj, Decimal _Bsth_clbal, Decimal _Bsth_state_bal, string _Bsth_stus, string _Bsth_cre_by, out string _msg)
        {
            Int32 result = 0;
            _msg = "";
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                foreach (BankRealDet _lst in _bnkRlsList)
                {
                    result = _financialDAL.UpdateBankRealizationDetails(_lst);      //gnt_bnk_stmnt_det
                }
                //gnt_bnk_stmnt_hdr
                Int32 _eff = _financialDAL.UpdateBankRealizationHdr(_Bsth_com, _Bsth_dt, _Bsth_accno, _Bsth_opbal, _Bsth_realizes, _Bsth_prv_realize, _Bsth_cc, _Bsth_adj, _Bsth_clbal, _Bsth_state_bal, _Bsth_stus, _Bsth_cre_by);

                _financialDAL.TransactionCommit();
                result = 1;
                _msg = string.Empty;
            }
            catch (Exception ex)
            {
                result = -1;
                _msg = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }
            return result;
        }

        public Int32 UpdateBankRealHdr(string _Bsth_com, DateTime _Bsth_dt, string _Bsth_accno, Decimal _Bsth_opbal, Decimal _Bsth_realizes, Decimal _Bsth_prv_realize, Decimal _Bsth_cc, Decimal _Bsth_adj, Decimal _Bsth_clbal, Decimal _Bsth_state_bal, string _Bsth_stus, string _Bsth_cre_by)
        {
            Int32 result = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            result = _financialDAL.UpdateBankRealizationHdr(_Bsth_com, _Bsth_dt, _Bsth_accno, _Bsth_opbal, _Bsth_realizes, _Bsth_prv_realize, _Bsth_cc, _Bsth_adj, _Bsth_clbal, _Bsth_state_bal, _Bsth_stus, _Bsth_cre_by);

            _financialDAL.ConnectionClose();
            return result;
        }


        public Int32 FinalizeBankRealization(string _Bsth_com, DateTime _Bsth_dt, string _Bsth_accno, string _user, List<BankRealDet> _bnkRlsList = null)
        {
            Int32 result = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            if (_bnkRlsList != null)
            {
                foreach (BankRealDet _lst in _bnkRlsList)
                {
                    result = _financialDAL.upd_bank_REALIZED(_lst);      //gnt_bnk_stmnt_det
                }
            }

            result = _financialDAL.FinalizeBankRealization(_Bsth_com, _Bsth_dt, _Bsth_accno, _user);

            _financialDAL.ConnectionClose();
            return result;
        }

        public DataTable getBankRlsHeader(string _com, DateTime _date, string _accno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getBankRlsHeader(_com, _date, _accno);
        }

        public Int32 UpdateBankRealizationHdr(string _Bsth_com, DateTime _Bsth_dt, string _Bsth_accno, Decimal _Bsth_opbal, Decimal _Bsth_realizes, Decimal _Bsth_prv_realize, Decimal _Bsth_cc, Decimal _Bsth_adj, Decimal _Bsth_clbal, Decimal _Bsth_state_bal, string _Bsth_stus, string _Bsth_cre_by)
        {
            Int32 result = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            result = _financialDAL.UpdateBankRealizationHdr(_Bsth_com, _Bsth_dt, _Bsth_accno, _Bsth_opbal, _Bsth_realizes, _Bsth_prv_realize, _Bsth_cc, _Bsth_adj, _Bsth_clbal, _Bsth_state_bal, _Bsth_stus, _Bsth_cre_by);

            _financialDAL.ConnectionClose();
            return result;
        }


        public Int32 Delete_GNT_RCV_DSK_DOC(string _com, string _pc, DateTime monthYear, Int32 week)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 result = _financialDAL.Delete_GNT_RCV_DSK_DOC(_com, _pc, monthYear, week);
            _financialDAL.ConnectionClose();
            return result;
        }
        public Dictionary<string, Decimal> Get_RemDet(string com, string pc, DateTime date)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Dictionary<string, Decimal> _ValList = _financialDAL.Get_RemDet(com, pc, date);
            _financialDAL.ConnectionClose();
            return _ValList;
        }

        public DataTable Get_ShortBankDocs(string com, string pc, DateTime monthYear, Int32 week, string doc_tp, string _accno, Int32 _withdtrange, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_ShortBankDocs(com, pc, monthYear, week, doc_tp, _accno, _withdtrange, _from, _to);
        }

        public ScanPhysicalDocReceiveDet Get_GNT_RCV_DSK_DOC_on_Seq(Int32 seqNum)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_GNT_RCV_DSK_DOC_on_Seq(seqNum);
        }
        public Int32 Save_doc_GNT_RCV_DSK_DOC(ScanPhysicalDocReceiveDet _doc)
        {//saves only one doc
            Int32 result = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.Save_doc_GNT_RCV_DSK_DOC(_doc);
            _financialDAL.ConnectionClose();
            return result;
        }
        public Int32 saveExtraDoc(ScanPhysicalDocReceiveDet _doc, Boolean isShortBank)
        {
            _financialDAL = new FinancialDAL();
            using (TransactionScope _scope = new TransactionScope())
            {
                _financialDAL.ConnectionOpen();
                Int32 ef = _financialDAL.Save_doc_GNT_RCV_DSK_DOC(_doc);
                if (isShortBank == true)
                {
                    _doc.Grdd_short_ref = _doc.Grdd_seq;
                    _doc.Grdd_seq = ef;
                }

                //_financialDAL.Update_GNT_RCV_DSK_DOC(_doc, 0, 0, 1);
                ef = _financialDAL.Update_GNT_RCV_DSK_DOC(_doc, 0, 0, 1);

                _financialDAL.ConnectionClose();
                _scope.Complete();
            }
            return 1;
        }

        public DataTable Get_GNR_RCV_DSK_DOC_Types()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_GNR_RCV_DSK_DOC_Types();
        }

        public DataTable GET_BANKS_of_PC_on_docType(string com, string pc, string doc_tp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_BANKS_of_PC_on_docType(com, pc, doc_tp);
        }

        #endregion  Scan/Physical Document

        public Boolean IsPeriodClosed(string _com, string _pc, string type, DateTime _date)
        {
            Boolean isClosed = false;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            isClosed = _financialDAL.IsPeriodClosed(_com, _pc, type, _date);
            _financialDAL.ConnectionClose();

            return isClosed;
        }


        #region  Monthly Summary Period Definition
        public Int32 Save_gnr_week(Int32 _Gw_year, Int32 _Gw_month, Int32 _Gw_week, DateTime _Gw_from_dt, DateTime _Gw_to_dt, string _Gw_cre_by, List<string> _company)
        {

            try
            {
                _financialDAL = new FinancialDAL();
                //using (TransactionScope _scope = new TransactionScope())
                //{
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                //foreach (GnrWeek gnr in _gnrweek_list)
                //{
                //    Int32 eff = _financialDAL.Save_gnr_week(gnr);
                //}
                foreach (string _n in _company) _financialDAL.Save_gnr_week(_Gw_year, _Gw_month, _Gw_week, _Gw_from_dt, _Gw_to_dt, _Gw_cre_by, _n.Trim());
                _financialDAL.TransactionCommit();
                //_scope.Complete();
                //}

            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                return -1;
            }
            return 1;
        }

        public List<GnrWeek> Get_ListOfWeeks_on_month(Int32 month, Int32 year, Int32 weekNo, string _com)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_ListOfWeeks_on_month(month, year, weekNo, _com);
        }
        public List<ArrearsDateDef> Get_ArrearsDateDef(string com, DateTime arrDt, string partyTp, string partyCode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_ArrearsDateDef(com, arrDt, partyTp, partyCode);

        }
        public Int32 Save_hpr_ars_dt_defn(List<ArrearsDateDef> _defHeader)
        {
            _financialDAL = new FinancialDAL();
            try
            {
                using (TransactionScope _scope = new TransactionScope())
                {
                    _financialDAL.ConnectionOpen();
                    foreach (ArrearsDateDef def in _defHeader)
                    {
                        Int32 eff = _financialDAL.Save_hpr_ars_dt_defn(def);
                    }
                    _financialDAL.ConnectionClose();
                    _scope.Complete();
                }

            }
            catch (Exception ex)
            {
                return -1;
            }
            return 1;
        }
        #endregion Monthly Summary Period Definition


        //Shani 10-01-2013
        public Int32 Save_AC_Job_ManagerClaim_Remitance(RemitanceSummaryDetail _remSumDet)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            Int32 eff = _financialDAL.UpdateRemitanceAdjusment(_remSumDet);
            if (eff < 1)
            {
                eff = _financialDAL.SaveRemSummaryDetails(_remSumDet);
            }
            _financialDAL.ConnectionClose();
            return eff;
        }
        //Shani 10-01-2013
        public DataTable GetRemSummary(string _pc, DateTime _fromDate, DateTime _toDate, string _sec)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            DataTable dt = new DataTable();
            dt = _financialDAL.GetRemSummary(_pc, _fromDate, _toDate, _sec);

            _financialDAL.ConnectionClose();
            return dt;
        }

        //kapila 17/1/2013
        public DataTable Process_AgeOfDebtors_Arrears_Win(DateTime _asatdate, string _com, string _pc, string _user, string _scheme, string _item, string _cat1, string _cat2, string _cat3, string _model, string _brand, Boolean _Isdetail, string _showJobs, out DataTable _jobs)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgeOfDebtorsArrearsWin") == true) _financialDAL.ConnectionOpen_DR();
            DataTable X = _financialDAL.Process_AgeOfDebtors_Arrears_Win(_asatdate, _com, _pc, _user, _scheme, _item, _cat1, _cat2, _cat3, _model, _brand, _Isdetail);

            _jobs = null;
            DataTable _jobs1 = new DataTable();
            DataRow dr;

            _jobs1.Clear();
            _jobs1.Columns.Add("LOC_CODE", typeof(string));
            _jobs1.Columns.Add("LOC_DESC", typeof(string));
            _jobs1.Columns.Add("ACC_NO", typeof(string));
            _jobs1.Columns.Add("JOB_NO", typeof(string));
            _jobs1.Columns.Add("JOB_DATE", typeof(DateTime));
            _jobs1.Columns.Add("SERVICE_LOC", typeof(string));
            _jobs1.Columns.Add("SERVICE_LOC_DESC", typeof(string));
            _jobs1.Columns.Add("REMARKS", typeof(string));

            if (_showJobs == "Y")
            {
                if (X.Rows.Count > 0)
                {
                    foreach (DataRow drow in X.Rows)
                    {
                        DataTable _jobs2 = _financialDAL.getAccountServiceDetail(drow["ar_acc_no"].ToString());

                        if (_jobs2.Rows.Count > 0)
                        {
                            foreach (DataRow drow1 in _jobs2.Rows)
                            {
                                dr = _jobs1.NewRow();
                                dr["LOC_CODE"] = drow1["loc_code"].ToString();
                                dr["LOC_DESC"] = drow1["loc_desc"].ToString();
                                dr["ACC_NO"] = drow1["acc_no"].ToString();
                                dr["JOB_NO"] = drow1["job_no"].ToString();
                                dr["JOB_DATE"] = Convert.ToDateTime(drow1["job_dt"]).Date;
                                dr["SERVICE_LOC"] = drow1["service_loc"].ToString();
                                dr["SERVICE_LOC_DESC"] = drow1["service_loc_desc"].ToString();
                                dr["REMARKS"] = drow1["remarks"].ToString();
                                _jobs1.Rows.Add(dr);
                            }
                        }
                    }

                }

            }
            _jobs = _jobs1;
            _jobs.TableName = "JOBS";

            _financialDAL.ConnectionClose();
            return X;
        }

        public string Process_AgeOfDebtors_Arrears36(DateTime _asatdate, string _com, string _user, string _scheme, string _item, string _cat1, string _cat2, string _cat3, string _model, string _brand, Int16 _noof_months, Boolean _Isdetail, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();

            _financialDAL.ConnectionOpen();
            if (_securityDAL.Is_Report_DR("AgeAnalysisOfDebtorsArrearsDetail") == true)
            {
                _financialDAL.ConnectionOpen_DR();
                _salesDAL.ConnectionOpen_DR();
            }

            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.Process_AgeOfDebtors_Arrears36(_asatdate, _com, drow["tpl_pc"].ToString(), _user, _scheme, _item, _cat1, _cat2, _cat3, _model, _brand, _noof_months, _Isdetail);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;

        }

        //Sanjeewa
        public string Process_GivenPaymode_Collection(DateTime _fromdate, DateTime _todate, string _com, string _paymode, string _user, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            _securityDAL = new SecurityDAL();

            _financialDAL.ConnectionOpen();
            if (_securityDAL.Is_Report_DR("GivenPaymodeColl") == true)
            {
                _financialDAL.ConnectionOpen_DR();
                _salesDAL.ConnectionOpen_DR();
            }

            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.Process_GivenPaymode_Collection(_fromdate, _todate, _com, drow["tpl_pc"].ToString(), _paymode, _user);
                    GLOB_DataTable.Merge(_dtResults);
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _filePath;

        }

        //kapila
        public DataTable Print_RCC_Receipt(string _rccNo)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DataTable X = _financialDAL.Print_RCC_Receipt(_rccNo);
            _financialDAL.ConnectionClose();
            return X;
        }
        public DataTable Print_ACInsNote(string _rccNo)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DataTable X = _financialDAL.Print_ACInsNote(_rccNo);
            _financialDAL.ConnectionClose();
            return X;
        }

        //kapila
        public DataTable Print_RCC_Ret_Condition(string _rccNo)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DataTable X = _financialDAL.Print_RCC_Ret_Condition(_rccNo);
            _financialDAL.ConnectionClose();
            return X;
        }

        //kapila 17/1/2013
        public DataTable Process_AgeOfDebtors_Arrears_Sum(DateTime _asatdate, string _com, string _pc, string _user, string _scheme, string _item, string _cat1, string _cat2, string _cat3, string _model, string _brand, Boolean _Isdetail)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgeOfDebtorsArrearsSum") == true) _financialDAL.ConnectionOpen_DR();
            DataTable X = _financialDAL.Process_AgeOfDebtors_Arrears_Sum(_asatdate, _com, _pc, _user, _scheme, _item, _cat1, _cat2, _cat3, _model, _brand, _Isdetail);
            _financialDAL.ConnectionClose();
            return X;
        }

        public DataTable getPOSAcInvoiceDet(string InvoiceNo, string serial)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            DataTable dt = new DataTable();
            dt.TableName = "tbl";
            // return _financialDAL.getPOSAcInvoiceDet( InvoiceNo, serial);
            return dt;
            // _financialDAL.ConnectionClose();
            // return dt;
        }

        public Int32 ChequeReturn(RecieptHeader recieptHeadder, RecieptItem recieptItem, ChequeReturn chequeReturn)
        {
            _salesDAL = new SalesDAL();
            _financialDAL = new FinancialDAL();
            using (TransactionScope tr = new TransactionScope())
            {
                _salesDAL.ConnectionOpen();
                _financialDAL.ConnectionOpen();
                Int32 eff = 0;
                eff = _salesDAL.SaveReceiptHeader(recieptHeadder);
                eff = _salesDAL.SaveReceiptItem(recieptItem);
                eff = _financialDAL.SaveReturnCheque(chequeReturn);
                _salesDAL.ConnectionClose();
                _financialDAL.ConnectionClose();
                tr.Complete();
            }


            return 1;

        }

        public Boolean IsRemLimitFound(string _ptype, string _pcode, DateTime _date, string _sec, string _code, out DateTime _from, out DateTime _to, out Decimal _val)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsRemLimitFound(_ptype, _pcode, _date, _sec, _code, out  _from, out  _to, out  _val);
        }


        public DataTable ProcessPersonalChequeStatement(string _user_id, DateTime _fromdate, DateTime _toDate, string _Company, string _pc)
        {// Nadeeka 20-03-13
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("Personalchequestatement") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.ProcessPersonalChequeStatement(_user_id, _fromdate, _toDate, _Company, _pc);

        }

        //darshana 07-09-2013
        public DataTable ProcessSUNUpload_RtnCheque(DateTime _from, DateTime _to, string _com, string _user, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_RtnCheque(_from, _to, _com, _user, _acc_period, _sunID, _file);
        }

        //darshana 09-09-2013
        public DataTable ProcessSUNUpload_RtnChequeSettlement(DateTime _from, DateTime _to, string _com, string _user, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_RtnChequeSettlement(_from, _to, _com, _user, _acc_period, _sunID, _file);
        }

        public DataTable ProcessSunUploadElite(string _user_id, DateTime _fromdate, DateTime _toDate, string _Company, string _Profit)
        {// Nadeeka 25-06-13
            _financialDAL = new FinancialDAL();

            return _financialDAL.ProcessSunUploadElite(_user_id, _fromdate, _toDate, _Company, _Profit);


        }
        public DataTable ProcessSunUploadDutyFree(string _user_id, DateTime _fromdate, DateTime _toDate, string _Company, string _Profit)
        {// Nadeeka 25-06-13
            _financialDAL = new FinancialDAL();

            return _financialDAL.ProcessSunUploadDutyFree(_user_id, _fromdate, _toDate, _Company, _Profit);


        }
        public DataTable ProcessSunUploadLoyalty(string _user_id, DateTime _fromdate, DateTime _toDate)
        {// Nadeeka 25-06-13
            _financialDAL = new FinancialDAL();

            return _financialDAL.ProcessSunUploadLoyalty(_user_id, _fromdate, _toDate);


        }



        public DataTable GetADLoanSettDetails(DateTime _fromDate, DateTime _toDate, string _User)
        {   // Sanjeewa
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetADLoanSettDetails(_fromDate, _toDate, _User);
        }

        public DataTable GetESDStatement(DateTime _fromDate, DateTime _toDate, string _User, string _com, string _pc)
        {   // Sanjeewa
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetESDStatement(_fromDate, _toDate, _User, _com, _pc);
        }

        public string GetCollBonusDtl(DateTime _fromDate, DateTime _toDate, string _com, string _status, string _User, out string _err)
        {   // Sanjeewa
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _User);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.GetCollBonusDtl(_fromDate, _toDate, _com, drow["tpl_pc"].ToString(), _status, _User);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _User, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public DataTable GetRcvDskProcessed(DateTime _fromDate, DateTime _toDate, string _User, string _com, string _pc)
        {   // Sanjeewa
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRcvDskProcessed(_fromDate, _toDate, _User, _com, _pc);
        }

        public DataTable GetESDRecon(DateTime _month, string _User, string _com, string _pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetESDRecon(_month, _User, _com, _pc);
        }

        public DataTable GetRcvDeskRemSumDetails(int _Year, int _Month, int NoofMonth, string _User, string _Com, string _Pc)
        {   // Sanjeewa
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();   //kapila 5/5/2016
            if (_securityDAL.Is_Report_DR("RcvDeskRemSumDetails") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.GetRcvDeskRemSumDetails(_Year, _Month, NoofMonth, _User, _Com, _Pc);
        }

        public DataTable GetShortSettDetails(DateTime _fromDate, DateTime _toDate, string _User, string _Com, string _Pc)
        {   // Sanjeewa
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetShortSettDetails(_fromDate, _toDate, _User, _Com, _Pc);
        }

        public DataTable GetClaimExpVoucherDetails(DateTime _fromDate, DateTime _toDate, string _User)
        {   // Sanjeewa
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetClaimExpVoucherDetails(_fromDate, _toDate, _User);
        }

        public Int32 Cancel_ReturnChequesSettlement(string _ref, Int32 _seq, Decimal _reductAmt)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 eff = _financialDAL.Cancel_ReturnChequesSettlement(_ref, _seq, _reductAmt);
            _financialDAL.ConnectionClose();
            return eff;
        }
        public DataTable get_Rtn_Chq_DET(string _pc, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DataTable X = _financialDAL.get_Rtn_Chq_DET(_pc, _from, _to);
            _financialDAL.ConnectionClose();
            return X;

        }
        public DataTable get_rtn_chq_byBankChqNo(string p_bank, string p_chqNo)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            DataTable X = _financialDAL.get_rtn_chq_byBankChqNo(p_bank, p_chqNo);
            _financialDAL.ConnectionClose();
            return X;
        }

        public int SaveVoucherExpenseDefinition(List<VoucherPrintExpenseDefinition> _expense)
        {
            _financialDAL = new FinancialDAL();
            _inventoryDAL = new InventoryDAL();
            int result = 0;
            using (TransactionScope tr = new TransactionScope())
            {
                _financialDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                foreach (VoucherPrintExpenseDefinition _exp in _expense)
                {
                    _exp.Gved_seq = _inventoryDAL.GetSerialID();
                    result = result + _financialDAL.SaveVoucherExpenseDefinition(_exp);
                }
                _financialDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                tr.Complete();
            }
            return result;
        }

        public VoucherPrintExpenseDefinition GetVoucherExpense(string _com, string _expense)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetVoucherExpense(_com, _expense);

        }

        public VoucherHeader GetValidVoucher(DateTime _date, string _com, string _vou)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetValidVoucher(_date, _com, _vou);
        }

        public List<VoucherPrintExpenseDefinition> GetVoucherExpenseByCode(string _expense)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetVoucherExpenseByCode(_expense);

        }

        public DataTable Process_Short_Rem_statement(string _user, string _com, DateTime _asatdate, Int32 _isAsAt, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();   //kapila 3/12/2015
            if (_securityDAL.Is_Report_DR("ShortRemStatement") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.Process_Short_Rem_statement(_user, _com, _asatdate, _isAsAt, _from, _to);
        }
        public DataTable Process_Excess_Rem_statement(string _user, string _com, DateTime _asatdate, Int32 _isAsAt, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Process_Excess_Rem_statement(_user, _com, _asatdate, _isAsAt, _from, _to);
        }
        public int SaveShortBanking(Short_Banking _short_Banking)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int i = _financialDAL.SaveShortBanking(_short_Banking);
            _financialDAL.ConnectionClose();
            return i;
        }

        public List<VoucherPrintExpenseDefinition> GetAllVoucherExpense(string _com, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAllVoucherExpense(_com, _date);

        }

        public int SaveVoucherHeader(VoucherHeader _voucher)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int result = _financialDAL.SaveVoucherHeader(_voucher);
            _financialDAL.ConnectionClose();
            return result;
        }

        public int SaveVoucherDefinition(VoucherDetails _voucher)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int result = _financialDAL.SaveVoucherDefinition(_voucher);
            _financialDAL.ConnectionClose();
            return result;

        }

        public int SaveVoucher(VoucherHeader _voucherHeader, List<VoucherDetails> _voucherDetails, MasterAutoNumber _voucherAuto, out string _docNo)
        {
            int result = 0;
            _financialDAL = new FinancialDAL();
            _inventoryDAL = new InventoryDAL();
            using (TransactionScope tr = new TransactionScope())
            {
                _financialDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();

                MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_voucherAuto.Aut_moduleid, _voucherAuto.Aut_direction, _voucherAuto.Aut_start_char, _voucherAuto.Aut_cate_tp, _voucherAuto.Aut_cate_cd, _voucherAuto.Aut_modify_dt, _voucherAuto.Aut_year);
                _reversInv.Aut_modify_dt = null;
                _reversInv.Aut_year = null;
                string _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_reversInv);

                _voucherHeader.Givh_seq = _inventoryDAL.GetSerialID();
                _voucherHeader.Givh_vou_no = _vouNo;
                _docNo = _vouNo;
                //save voucher
                result = _financialDAL.SaveVoucherHeader(_voucherHeader);

                //save voucher details
                foreach (VoucherDetails _vou in _voucherDetails)
                {
                    _vou.Givd_seq = _voucherHeader.Givh_seq;
                    _vou.Givd_vou_no = _vouNo;
                    result = result + _financialDAL.SaveVoucherDefinition(_vou);
                }

                _financialDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                tr.Complete();
            }
            return result;

        }

        public VoucherHeader GetVoucher(string _com, string _vou)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetVoucher(_com, _vou);

        }

        public List<VoucherDetails> GetVoucherDetail(string _vou)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetVoucherDetail(_vou);
        }

        public Int32 UPDATE_VOUCHER_END(string _com, string _vou, DateTime _dt, string _user)
        {
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.UPDATE_VOUCHER_END(_com, _vou, _dt, _user);

                _financialDAL.TransactionCommit();
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }
            return result;
        }
        public int CancelVoucher(string _com, string _vou, Int32 act, Int32 print, string mod_by, DateTime mod_dt)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int result = _financialDAL.CancelVoucher(_com, _vou, act, print, mod_by, mod_dt);
            _financialDAL.ConnectionClose();
            return result;
        }

        public List<VoucherHeader> GetVoucherSearch(int cancel, int print, string _com, DateTime _from, DateTime _to, string _vou)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetVoucherSearch(cancel, print, _com, _from, _to, _vou);
        }

        public Int32 DeleteRemSummary(string _com, string _pc, DateTime _date, string _sec, string _code)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _x = _financialDAL.DeleteRemSummary(_com, _pc, _date, _sec, _code);
            _financialDAL.ConnectionClose();
            return _x;
        }
        public DataTable GetManualDocCheckListPrint(string _com, string _pc, DateTime _month, Int32 _week)
        {   // kapila
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetManualDocCheckListPrint(_com, _pc, _month, _week);
        }

        public DataTable CashControlPrint(string _user, string _com, string _pc, Int32 _year, Int32 _month, DateTime _from, DateTime _to, string _stus)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();   //kapila 30/11/2015
            if (_securityDAL.Is_Report_DR("CashControlPrint") == true)
                if (_stus == "F")    //kapila 3/12/2015
                    _financialDAL.ConnectionOpen_DR();
            return _financialDAL.CashControlPrint(_user, _com, _pc, _year, _month, _from, _to, _stus);
        }
        public DataTable CashControlCashPrint(string _user, string _com, string _pc, Int32 _year, Int32 _month, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CashControlCashPrint(_user, _com, _pc, _year, _month, _from, _to);
        }
        public DataTable CashControlReconPrint(string _user, string _com, string _pc, DateTime _month)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CashControlReconPrint(_user, _com, _pc, _month);
        }
        public DataTable CrcdReconciliationDetails(DateTime _asatdate, string _account, string _com, string _pc, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CrcdReconciliationDetails(_asatdate, _account, _com, _pc, _user);
        }

        public string CrcdReconciliation1Details(DateTime _asatdate, string _account, string _com, string _user, out string _err)
        {   // Sanjeewa
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _financialDAL.CrcdReconciliationDetails(_asatdate, _account, _com, drow["tpl_pc"].ToString(), _user);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        public DataTable RemitanceCheckListPrint(string _user, string _com, string _pc, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.RemitanceCheckListPrint(_user, _com, _pc, _from, _to);
        }
        public DataTable ProcessSUNUpload_ScanDocs(DateTime _month, Int32 _week, DateTime _fromdate, DateTime _to, string _com, string _user, string _acc_period, string _sunID, string _type, string _mnth_str, string _insuTp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_ScanDocs(_month, _week, _fromdate, _to, _com, _user, _acc_period, _sunID, _type, _mnth_str, _insuTp);
        }
        //----------------------------------------------------------------
        public Int32 SaveReturnCheque_NEW(RecieptHeader receiptHdr, Deposit_Bank_Pc_wise objDeposit, List<RecieptItem> receiptItmList, ChequeReturn _chequeReturn, List<ReturnChequeCalInterest> _IntCal, RemitanceSummaryDetail _remsumdet, out string RtnReceiptNo)
        {
            //_salesDAL = new SalesDAL();
            //_financialDAL = new FinancialDAL();

            //_salesDAL.ConnectionOpen();
            //_financialDAL.ConnectionOpen();
            //return _financialDAL.SaveReturnCheque(_chequeReturn);

            //--------------------------------------
            int effect = 0;
            int X = 0;
            _salesDAL = new SalesDAL();
            _financialDAL = new FinancialDAL();
            //using (TransactionScope tr = new TransactionScope())
            try
            {
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 eff = 0;
                Int32 _line = 0;
                int seqNo = receiptHdr.Sar_seq_no;
                string _cusNo = receiptHdr.Sar_receipt_no;
                RtnReceiptNo = _cusNo;
                eff = _salesDAL.SaveReceiptHeader(receiptHdr);
                foreach (RecieptItem ri in receiptItmList)
                {
                    ri.Sard_seq_no = seqNo;
                    _line = _line + 1;
                    ri.Sard_line_no = _line;    //kapila 13/6/2017
                    ri.Sard_receipt_no = _cusNo;
                    eff = _salesDAL.SaveReceiptItem(ri);
                }
                eff = _financialDAL.SaveReturnCheque(_chequeReturn);

                if (_IntCal != null)
                {
                    foreach (ReturnChequeCalInterest r2 in _IntCal)
                    {
                        eff = _financialDAL.SaveRtnCalIntrest(r2);
                    }
                }
                if (_remsumdet != null)
                    X = _financialDAL.SaveRemSummaryDetails(_remsumdet);

                //_salesDAL.ConnectionClose();
                //_financialDAL.ConnectionClose();

                if (objDeposit != null)
                    eff = _salesDAL.InsertTo_sat_Adj(objDeposit);

                _salesDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
                effect = 1;
                //tr.Complete();
            }
            catch (Exception err)
            {
                effect = -1;
                RtnReceiptNo = "ERROR : " + err.Message.ToString();
                //_plusDocNo = "ERROR : " + err.Message.ToString();
                //_errorList = "ERROR : " + err.Message.ToString();
                _salesDAL.TransactionRollback();
                _financialDAL.TransactionRollback();

            }

            return effect;
        }
        //----------------------------------------------------------------

        public Boolean IsWeekDefFound(Int32 _year, Int32 _month, Int32 _week, string _com)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsWeekDefFound(_year, _month, _week, _com);
        }

        public Boolean IsCashControlFinalized(string _com, string _pc, DateTime _month)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsCashControlFinalized(_com, _pc, _month);
        }

        public DataTable PrintSignOff(string _com, string _pc, DateTime _from, DateTime _to, string _user, Int32 _isGroup, Int32 _isAll)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintSignOff(_com, _pc, _from, _to, _user, _isGroup, _isAll);
        }

        public DataTable PrintAdvReceiptRecon(string _com, string _pc, DateTime _from, DateTime _to, string _user)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AdvRecRecon") == true) _financialDAL.ConnectionOpen_DR(); //19/2/2016
            return _financialDAL.PrintAdvReceiptRecon(_com, _pc, _from, _to, _user);
        }

        public DataTable PrintCancelInvs(string _com, string _pc, DateTime _from, DateTime _to, string _user, Int32 _isGroup, Int32 _isAll)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintCancelInvs(_com, _pc, _from, _to, _user, _isGroup, _isAll);
        }

        public DataTable PrintReverseInv(string _com, string _pc, DateTime _from, DateTime _to, string _user, Int32 _isGroup, Int32 _isAll)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintReverseInv(_com, _pc, _from, _to, _user, _isGroup, _isAll);
        }

        public DataTable PrintAdvReceipts(string _com, string _pc, DateTime _from, DateTime _to, string _user, Int32 _isGroup, Int32 _isAll)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintAdvReceipts(_com, _pc, _from, _to, _user, _isGroup, _isAll);
        }
        public DataTable PrintCreditInvoices(string _com, string _pc, DateTime _from, DateTime _to, string _user, Int32 _isGroup, Int32 _isAll)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintCreditInvoices(_com, _pc, _from, _to, _user, _isGroup, _isAll);
        }

        public DataTable PrintCashRefunds(string _com, string _pc, DateTime _from, DateTime _to, string _user, Int32 _isGroup, Int32 _isAll)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintCashRefunds(_com, _pc, _from, _to, _user, _isGroup, _isAll);
        }

        public DataTable getProductBonusDetails(string _user, DateTime _from, DateTime _to, string _com, string _pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getProductBonusDetails(_user, _from, _to, _com, _pc);
        }

        public DataTable get_SignOff_Rec(string _user, string _pc, DateTime _from, DateTime _to, out Decimal _cashtotal)
        {
            Decimal _totval = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.get_SignOff_Cash_Tot(_pc, _from, _to, out  _totval);
            _cashtotal = _totval;
            return _financialDAL.get_SignOff_Rec(_user, _pc, _from, _to);
        }


        public DataTable get_SignOff_less(string _pc, DateTime _from, DateTime _to)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_SignOff_less(_pc, _from, _to);
        }

        public Boolean Is_PC_Finalized(string _com, string _pc, DateTime date)
        {
            Boolean isClosed = false;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            isClosed = _financialDAL.Is_PC_Finalized(_com, _pc, date);
            _financialDAL.ConnectionClose();

            return isClosed;
        }

        public DataTable get_non_post_txns(string _com, string _pc, DateTime _from, DateTime _to, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_non_post_txns(_com, _pc, _from, _to, _user);
        }
        public DataTable Print_RCC_Listing_Report(string _com, string _pc, DateTime _from, DateTime _to, string _user, string _rcctp, string _agent, string _colMethod, string _closeTp, string _status, string _cat1, string _cat2, string _cat3, string _brand, string _model, string _item)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("RCCListing") == true) _financialDAL.ConnectionOpen_DR(); //19/2/2016
            return _financialDAL.Print_RCC_Listing_Report(_com, _pc, _from, _to, _user, _rcctp, _agent, _colMethod, _closeTp, _status, _cat1, _cat2, _cat3, _brand, _model, _item);
        }
        public DataTable Print_RCC_Job_Report(string _com, string _pc, DateTime _from, DateTime _to, string _user)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("RCCListing") == true) _financialDAL.ConnectionOpen_DR(); //19/2/2016
            return _financialDAL.Print_RCC_Job_Report(_com, _pc, _from, _to, _user);
        }

        public Int32 UpdatePrvDayCIH(string _user, string _com, string _pc, DateTime _date, Int32 _week)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 x = _financialDAL.UpdatePrvDayCIH(_user, _com, _pc, _date, _week);
            _financialDAL.ConnectionClose();
            return x;
        }

        public DataTable GetIncSch(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetIncSch(_circular, _ref);
        }
        public DataTable GetIncSchDet(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetIncSchDet(_circular, _ref);
        }
        public DataTable GetIncSchPerson(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetIncSchPerson(_circular, _ref);
        }
        public DataTable GetIncSchPC(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetIncSchPC(_circular, _ref);
        }
        public DataTable GetIncSchSalesTp(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetIncSchSalesTp(_circular, _ref);
        }
        public DataTable GetIncSchInc(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetIncSchInc(_circular, _ref);
        }
        public DataTable GetIncSchIncDt(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetIncSchIncDt(_circular, _ref);
        }

        public DataTable GetFromCurr_to_ToCurr(string _fromCur, string to_curr, DateTime TODAY, string company)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetFromCurr_to_ToCurr(_fromCur, to_curr, TODAY, company);
        }

        public List<ReturnChequeCalInterest> get_calrtn_int(string _com, string _pc, string _ref, string _bank, Int32 _from, Int32 _to, DateTime _AsAtDat)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_calrtn_int(_com, _pc, _ref, _bank, _from, _to, _AsAtDat);
        }
        public DataTable PrintOverandShort(string _com, DateTime _date, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintOverandShort(_com, _date, _user);
        }
        public DataTable PrintOverandShortDetail(string _pc, string _com, DateTime _dateFrom, DateTime _dateTo, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintOverandShortDetail(_pc, _com, _dateFrom, _dateTo, _user);
        }
        public DataTable PrintOverandShortMovement(string _pc, string _com, DateTime _dateFrom, DateTime _dateTo, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintOverandShortMovement(_pc, _com, _dateFrom, _dateTo, _user);
        }
        public DataTable PrintOverandShortSum(string _pc, string _com, DateTime _dateFrom, DateTime _dateTo, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintOverandShortSum(_pc, _com, _dateFrom, _dateTo, _user);
        }
        public DataTable PrintCashCommDefHead(string _user, DateTime _from, DateTime _to, string _circ)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintCashCommDefHead(_user, _from, _to, _circ);
        }
        public DataTable PrintCashCommDefDet(string _user, DateTime _from, DateTime _to, string _circ)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintCashCommDefDet(_user, _from, _to, _circ);
        }
        public Int16 Is_Prod_Bonus_Finish(string _userID)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.Is_Prod_Bonus_Finish(_userID);
        }

        public DataTable PrintDeliveredSalesForComm(DateTime _from, DateTime _to, string _com, string _user)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintDeliveredSalesForComm(_from, _to, _com, _user);
        }

        public DataTable PrintHPInformation(DateTime _from, DateTime _to, string _com, string _user, string _pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintHPInformation(_from, _to, _com, _user, _pc);
        }

        //29-10-2013
        public DataTable GetReturnChequesFromRemSum(string _pc, string _ref, string _bCode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetReturnChequesFromRemSum(_pc, _ref, _bCode);
        }

        //09-11-2013 darshana
        public DataTable GetChequesFromRemDet(string _com, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetChequesFromRemDet(_com, _ref);
        }

        public int UpdateSalesSummary(string _company, string _profitcenter, DateTime _fromdate, DateTime _todate, string _user, out string _msg)
        {
            int effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();

            try
            {
                DataTable _tbl = _financialDAL.GetScanDocumentSummary(_company, _profitcenter, _fromdate, _todate);
                if (_tbl != null && _tbl.Rows.Count > 0)
                {
                    _financialDAL.RemoveScanDocumentDetail(_company, _profitcenter, _fromdate, _todate);
                    foreach (DataRow r in _tbl.Rows)
                    {
                        Int32 _seqno = _financialDAL.GetScanDocumentID();
                        ScanPhysicalDocReceiveDet _one = new ScanPhysicalDocReceiveDet();
                        _one.Grdd_com = _company;
                        _one.Grdd_cre_by = _user;
                        _one.Grdd_cre_dt = DateTime.Now.Date;
                        _one.Grdd_deposit_bank = string.Empty;
                        _one.Grdd_doc_bank = r.Field<string>("grdd_doc_bank");
                        _one.Grdd_doc_bank_branch = r.Field<string>("grdd_doc_bank_branch");
                        _one.Grdd_doc_bank_cd = r.Field<string>("grdd_doc_bank_cd");
                        _one.Grdd_doc_desc = r.Field<string>("grdd_doc_desc");
                        _one.Grdd_doc_rcv = false;
                        _one.Grdd_doc_ref = r.Field<string>("grdd_doc_ref");
                        _one.Grdd_doc_tp = r.Field<string>("grdd_doc_tp");
                        _one.Grdd_doc_val = r.Field<decimal>("grdd_doc_val");
                        _one.Grdd_dt = r.Field<DateTime>("grdd_dt");
                        _one.Grdd_is_extra = false;
                        _one.Grdd_is_realized = false;
                        _one.Grdd_month = r.Field<DateTime>("grdd_month");
                        _one.Grdd_pc = _profitcenter;
                        _one.Grdd_rcv_by = string.Empty;
                        //_one.Grdd_rcv_dt =  null;
                        _one.Grdd_realized_dt = Convert.ToDateTime(r.Field<string>("grdd_realized_dt")).Date;
                        _one.Grdd_remarks = string.Empty;
                        _one.Grdd_rmk = string.Empty;
                        _one.Grdd_scan_by = string.Empty;
                        //_one.Grdd_scan_dt =  r.Field<DateTime>("");
                        _one.Grdd_scan_rcv = false;
                        _one.Grdd_seq = _seqno;
                        _one.Grdd_short_ref = 0;
                        _one.Grdd_sun_up_by = string.Empty;
                        // _one.Grdd_sun_up_dt =  r.Field<DateTime>("");
                        _one.Grdd_sun_upload = false;
                        _one.Grdd_sys_val = r.Field<decimal>("grdd_sys_val");
                        _one.Grdd_week = r.Field<Int16>("grdd_week");
                        _financialDAL.Save_doc_GNT_RCV_DSK_DOC(_one);
                        _financialDAL.UpdateChequeTotal(_company, _profitcenter, _fromdate, _todate, _one.Grdd_doc_ref, _one.Grdd_doc_bank_cd, _one.Grdd_doc_bank_branch);
                    }

                }
                _financialDAL.TransactionCommit();
                effect = 1;
                _msg = string.Empty;
            }
            catch (Exception ex)
            {
                effect = -1;
                _msg = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }


            return effect;
        }

        public DataTable Get_veh_ins_renewal_hdr(string com, string pc, string accno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_veh_ins_renewal_hdr(com, pc, accno);
        }
        //kapila 30/7/2014
        public int ProcessVehInsRentPay(string _com, string _pc, string _accno, DateTime _dt, Decimal _amt, string _user, string _chqno, string _chqbank, string _chqbranch, DateTime _chqdate, string _depbank, string _depbranch, DataTable _dtDet, out string _msg)
        {
            int effect = 0;
            Int32 _seq = 0;
            _financialDAL = new FinancialDAL(); _inventoryDAL = new InventoryDAL();
            _financialDAL.ConnectionOpen(); _inventoryDAL.ConnectionOpen(); _financialDAL.BeginTransaction(); _inventoryDAL.BeginTransaction();

            try
            {
                _seq = _inventoryDAL.GetSerialID();
                _financialDAL.Save_Veh_Ins_Rent_Pay_Hdr(_seq, _com, _pc, _accno, _dt, _amt, _user);
                _financialDAL.UpdateInsReqHdrStatus(_com, _pc, _accno, "F");
                foreach (DataRow _exp in _dtDet.Rows)
                {
                    _financialDAL.Save_Veh_Ins_Rent_Pay_Det(_seq, _exp.Field<string>("recno"), _chqno, _chqbank, _chqbranch, _chqdate, _depbank, _depbranch, _exp.Field<Decimal>("amt"));
                    _financialDAL.UpdateReceiptByVehInsRentPay(_com, _pc, _exp.Field<string>("recno"), _exp.Field<Decimal>("balamt"), _exp.Field<Decimal>("amt"));
                }

                _financialDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                effect = 1;
                _msg = string.Empty;
            }
            catch (Exception ex)
            {
                effect = -1;
                _msg = ex.Message;
                _financialDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
            }
            return effect;
        }

        public DataTable GetScanChequeDetail(string _company, string _profitcenter, DateTime _fromdate, DateTime _todate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetScanDocumentSummary(_company, _profitcenter, _fromdate, _todate);
        }

        public DataTable Get_gnt_inc_calc(string _circular, string _ref)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.Get_gnt_inc_calc(_circular, _ref);
        }
        public DataTable Get_dt_inc_calc_dt(string _circular, string _ref)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.Get_dt_inc_calc_dt(_circular, _ref);
        }
        public DataTable Get_dt_inc_calc_inc(string _circular, string _ref)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.Get_dt_inc_calc_inc(_circular, _ref);
        }
        public DataTable Get_dt_inc_calc_inv(string _circular, string _ref)
        {
            _inventoryRepDAL = new ReptCommonDAL();
            return _inventoryRepDAL.Get_dt_inc_calc_inv(_circular, _ref);
        }
        public DataTable Get_dt_inc_sch_inc(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_dt_inc_sch_inc(_circular, _ref);
        }
        public DataTable Get_dt_inc_sch_inc_dt(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_dt_inc_sch_inc_dt(_circular, _ref);
        }
        public DataTable Get_dt_inc_sch_dt(string _circular, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_dt_inc_sch_dt(_circular, _ref);
        }
        public Int32 Process_group_sale_Selling_Comm(string _com, string _pc, DateTime _date)
        {
            Int32 x;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            x = _financialDAL.Process_group_sale_Selling_Comm(_com, _pc, _date);
            _financialDAL.ConnectionClose();
            return x;
        }

        public Int32 UpdateCashControl(string _com, string _pc, DateTime _month)
        {
            Int32 x;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            x = _financialDAL.UpdateCashControl(_com, _pc, _month);
            _financialDAL.ConnectionClose();
            return x;
        }

        public Int32 confirm_inc_sch(string _circ, string _user)
        {
            Int32 x;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            x = _financialDAL.confirm_inc_sch(_circ, _user);
            _financialDAL.ConnectionClose();
            return x;
        }

        public DataTable ProcessSUNUpload_PayVouEntry(DateTime _from, DateTime _to, string _com, string _user, string _chanel, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_PayVouEntry(_from, _to, _com, _user, _chanel, _acc_period, _sunID, _file);
        }
        public DataTable ProcessSUNUpload_PayVouClaim(DateTime _from, DateTime _to, string _com, string _user, string _chanel, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_PayVouClaim(_from, _to, _com, _user, _chanel, _acc_period, _sunID, _file);
        }

        public Int32 GetReportAllowPeriod(string _com, Int32 _id)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetReportAllowPeriod(_com, _id);
        }

        public int getHPAccValue(string _com, string _pc, string _acc, out Decimal _val)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getHPAccValue(_com, _pc, _acc, out _val);
        }
        public Int16 IsHOFinalized(string _com, string _pc, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsHOFinalized(_com, _pc, _date);
        }

        public DataTable Get_PBonus_VOu(string _ref, string _com, string _pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_PBonus_VOu(_ref, _com, _pc);
        }

        public Int32 UpdatePBDeductions(string _vRef, Decimal _vgross, Decimal _vccDed, string _vccRem, string _vccUpdBy, Decimal _vcrdDed, string _vcrdRem, string _vcrdUpdBy, Decimal _vnet, string _usrType, List<PBonusVouDedc> _vouDed)
        {
            Int32 result = 0;
            Int32 x = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            if (_vouDed.Count > 0)
            {
                foreach (PBonusVouDedc _ded in _vouDed)
                {
                    result = _financialDAL.Save_PBonus_Vou_Ded(_ded);
                    x = _financialDAL.UpdatePBVoucherHeader(_vRef, _vgross, _vccDed, _vccRem, _vccUpdBy, _vcrdDed, _vcrdRem, _vcrdUpdBy, _vnet, _usrType);
                }
            }
            _financialDAL.ConnectionClose();
            return result;
        }

        public Int32 UpdatePBonusVoucher(MasterAutoNumber _masterAutoNumber, string _com, List<PBonusVouHeader> _vouHeader, List<PBonusVouDetail> _vouDet, List<PBonusVouDedc> _vouDed, List<PBonusVouDedc> _vouRef, out string _docNo)
        {
            Int32 result = 0;
            string _vouNo = "";
            string _doc = "0";
            _financialDAL = new FinancialDAL();
            _inventoryDAL = new InventoryDAL();
            _financialDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();

            foreach (PBonusVouHeader _Hdr in _vouHeader)
            {
                MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, 1, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year);
                _reversInv.Aut_modify_dt = null;
                _reversInv.Aut_year = null;
                _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                Int32 effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                _doc = _vouNo;

                _Hdr.Pbph_vou_ref = _vouNo;
                result = _financialDAL.Save_PBonus_Vou_Header(_Hdr);
            }
            _docNo = _doc;

            if (_vouDet.Count > 0)
            {
                foreach (PBonusVouDetail _det in _vouDet)
                {
                    _det.Pbpd_vou_ref = _vouNo;
                    result = _financialDAL.Save_PBonus_Vou_Det(_det);
                }
            }
            if (_vouDed.Count > 0)
            {
                foreach (PBonusVouDedc _ded in _vouDed)
                {
                    _ded.Pbpdd_vou_ref = _vouNo;
                    result = _financialDAL.Save_PBonus_Vou_Ded(_ded);
                }
            }
            if (_vouRef.Count > 0)
            {
                foreach (PBonusVouDedc _ref in _vouRef)
                {
                    _ref.Pbpdd_vou_ref = _vouNo;
                    result = _financialDAL.Save_PBonus_Vou_Ded(_ref);
                }
            }
            _financialDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return result;

            //Int32 x;
            //_financialDAL = new FinancialDAL();
            //_financialDAL.ConnectionOpen();
            //x= _financialDAL.UpdatePBonusVoucher(_com,  _pc,  _circ,  _sch,  _pbih_refund,  _pbih_refund_rem,  _pbih_refund_upd_by,  _pbih_acc_ded,  _pbih_acc_rem,  _pbih_acc_upd_by,  _pbih_cc_ded,  _pbih_cc_rem,  _pbih_cc_upd_by,  _pbih_crd_ded,  _pbih_crd_rem,  _pbih_crd_upd_by,  _pbih_net,  _pbih_prep_by,  _pbih_chk_by,  _pbih_auth_by,_man);
            //_financialDAL.ConnectionClose();
            //return x;
        }
        public Int32 ConfirmPBonusVoucher(string _sch, Int32 _isAcc, Int32 _isCC, Int32 _isCrd)
        {
            Int32 x;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            x = _financialDAL.ConfirmPBonusVoucher(_sch, _isAcc, _isCC, _isCrd);
            _financialDAL.ConnectionClose();
            return x;
        }

        public DataTable GetValidPBVoucher(DateTime _date, string _com, string _pc, string _vou)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetValidPBVoucher(_date, _com, _pc, _vou);
        }

        public DataTable GetValidColBonusVoucher(string _com, string _pc, string _vou)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetValidColBonusVoucher(_com, _pc, _vou);
        }
        public DataTable PrintPBonusVoucher(string _ref, string _com, string _pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.PrintPBonusVoucher(_ref, _com, _pc);
        }

        public Int32 savePromoterDetails(MasterAutoNumber _masterAutoNumber, SalesPromotor _salesPromot, List<string> pc_List, out string _docNo)
        {
            Int32 result = 0;
            string _vouNo = "";
            string _doc = "0";
            _docNo = "";
            try
            {
                _financialDAL = new FinancialDAL(); _inventoryDAL = new InventoryDAL();
                _financialDAL.ConnectionOpen(); _inventoryDAL.ConnectionOpen();
                _financialDAL.BeginTransaction(); _inventoryDAL.BeginTransaction();
                // Nadeeka 11-05-2015  modified promotor assignment 
                //if (string.IsNullOrEmpty(_salesPromot.Mpp_promo_cd))
                //{
                //    MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, 1, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _salesPromot.Mpp_pc, _masterAutoNumber.Aut_modify_dt, DateTime.Now.Year);
                //    _masterAutoNumber.Aut_modify_dt = null;
                //    _masterAutoNumber.Aut_year = DateTime.Now.Year;
                //    _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_cate_cd + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                //    Int32 effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                //    _doc = _vouNo;

                //    _salesPromot.Mpp_promo_cd = _vouNo;


                //}
                foreach (string pc_ in pc_List)
                {
                    result = _financialDAL.savePromoterDetails(_salesPromot, pc_);
                }
                _docNo = _doc;


                _financialDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                result = 1;

            }
            catch (Exception err)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();

            }
            return result;

        }

        public Int32 savePromoter(MasterAutoNumber _masterAutoNumber, MST_PROMOTOR _salesPromot, out string _docNo, out string _msg)
        {
            Int32 result = 0;
            string _vouNo = "";
            string _doc = "0";
            _docNo = "";
            _msg = "";
            int _isavailable = 0;
            try
            {
                _financialDAL = new FinancialDAL(); _inventoryDAL = new InventoryDAL();
                _financialDAL.ConnectionOpen(); _inventoryDAL.ConnectionOpen();
                _financialDAL.BeginTransaction(); _inventoryDAL.BeginTransaction();

                if (string.IsNullOrEmpty(_salesPromot.Mpr_cd))
                {
                    MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, 1, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, DateTime.Now.Year);
                    _masterAutoNumber.Aut_modify_dt = null;
                    _masterAutoNumber.Aut_year = DateTime.Now.Year;
                    _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_cate_cd + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    Int32 effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                    _doc = _vouNo;

                    _salesPromot.Mpr_cd = _vouNo;

                    _isavailable = 0;
                }
                else
                {
                    _isavailable = 1;
                    _doc = _salesPromot.Mpr_cd;
                }
                result = _financialDAL.savePromoter(_salesPromot);
                _docNo = _doc;

                if (_isavailable == 1)
                {
                    _msg = "  Successfully Updated! " + _doc;
                    _docNo = _doc;
                }
                else
                {
                    _msg = "  Successfully Inserted! " + _doc;
                    _docNo = _doc;
                }

                _financialDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                result = 1;

            }
            catch (Exception err)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();

            }
            return result;

        }
        public Int32 Save_PBonus_Vou_Header(PBonusVouHeader _PBVouHdr)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Save_PBonus_Vou_Header(_PBVouHdr);
        }

        public Int32 Save_PBonus_Vou_Det(PBonusVouDetail _PBVouDet)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Save_PBonus_Vou_Det(_PBVouDet);
        }
        public DataTable Get_PBVoucher_header(string voucherNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_PBVoucher_header(voucherNo);
        }
        public DataTable Get_PBVoucher_detail(string voucherNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_PBVoucher_detail(voucherNo);
        }
        public Int32 UpdateShortSettlement(Int32 _seq, Decimal _val, Int32 _isSUN, string _rem, DateTime _month, Int32 _week, string _user, DateTime _date)
        {
            Int32 x;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            x = _financialDAL.UpdateShortSettlement(_seq, _val, _isSUN, _rem, _month, _week, _user, _date);
            _financialDAL.ConnectionClose();
            return x;
        }

        public DataTable getRevertChargeDef(string com, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getRevertChargeDef(com, _date);
        }
        public Int16 confirmPBVoucher(string _com, string _pc, string _vou, Int32 _isChk, Int32 _isAuth)
        {
            Int16 x;
            _financialDAL = new FinancialDAL();
            _generalDAL = new GeneralDAL();
            _financialDAL.ConnectionOpen();
            _generalDAL.ConnectionOpen();
            x = _financialDAL.confirmPBVoucher(_vou, _isChk, _isAuth);

            //if (_isAuth == 1)
            //{
            //    string _emailAddr = string.Empty;
            //    MasterProfitCenter _masterPC = new MasterProfitCenter();
            //    _masterPC = _generalDAL.GetPCByPCCode(_com, _pc);
            //    if (_masterPC != null)
            //    {
            //        _emailAddr = _masterPC.Mpc_email;
            //    }
            //    else
            //    {
            //        _emailAddr = "";
            //    }

            //    if (!string.IsNullOrEmpty(_emailAddr))
            //    {
            //        SmtpClient smtpClient = new SmtpClient();
            //        MailMessage message = new MailMessage();

            //        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

            //        smtpClient.Host = _generalDAL.GetMailHost();
            //        smtpClient.Port = 25;
            //        message.From = fromAddress;

            //        string _email = "";

            //        _email = "Dear Sir/Madam, \n\n" + _email;
            //        _email += "Product Bonus Voucher is generated for the profit center :" + _pc + " \n";
            //        _email += "\n  Voucher # : " + _vou + "\n";

            //        _email += _generalDAL.GetMailFooterMsg();

            //        message.To.Add("asha@abansgroup.com");
            //        //message.To.Add(_emailAddr);
            //        message.Subject = "Product Bonus Voucher";
            //        message.IsBodyHtml = false;
            //        message.Body = _email;
            //        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

            //        // Send SMTP mail
            //        smtpClient.Send(message);
            //    }
            //}

            _financialDAL.ConnectionClose();
            _generalDAL.ConnectionClose();
            return x;
        }

        public DataTable getDocSettle(string com, string pc, DateTime _from, DateTime _to, Int32 _week, string doc_tp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getDocSettle(com, pc, _from, _to, _week, doc_tp);
        }

        public Int32 Save_Short_Settlements(string createBy, DateTime createDt, string com, string pc, Int32 WEEK, DateTime frmDt, DateTime toDt, string _type)
        {
            Int32 x;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            x = _financialDAL.Save_Short_Settlements(createBy, createDt, com, pc, WEEK, frmDt, toDt, _type);
            _financialDAL.ConnectionClose();
            return x;
        }

        public DataTable ProcessSUNUpload_AOAInvoice(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, Int32 _is_dealer, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_AOAInvoice(_from, _to, _com, _pc, _user, _acc_period, _is_dealer, _sunID, _file);
        }

        public DataTable GetESDDetails(DateTime _fromDate, DateTime _toDate, string _Exec, string _Com, string _Pc, string _RepTp, string _User)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetESDDetails(_fromDate, _toDate, _Exec, _Com, _Pc, _RepTp, _User);
        }

        public DataTable GetInternalPayVouDetails(DateTime _fromDate, DateTime _toDate, string _Exec, string _Com, string _Pc, string _RepTp, string _User, out string _err, out string _filePath)
        {   // Sanjeewa
            DataTable _dtResults;
            _financialDAL = new FinancialDAL();
            _dtResults = _financialDAL.GetInternalPayVouDetails(_fromDate, _toDate, _Exec, _Com, _Pc, _RepTp, _User);

            _err = "";
            _filePath = "";

            _filePath = ExportExcel2007(_Com, _User, _dtResults, out _err);

            if (_dtResults.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            return _dtResults;
        }

        #region Brand Reports

        public DataTable GetBrandRep01Details(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Com, string _Pc, string _User, string _repTp, out string _err, out string _filePath)
        {   // Sanjeewa
            DataTable _dtResults;
            _reportDAL = new ReptDAL();
            _dtResults = _reportDAL.GetBrandRep01Details(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Com, _Pc, _User, _repTp);

            _err = "";
            _filePath = "";

            _filePath = ExportExcel2007(_Com, _User, _dtResults, out _err);

            return _dtResults;
        }


        public string ExportExcel2007(string _com, string _user, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }

        #endregion

        public DataTable GetChequeVoucherAccount(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetChequeVoucherAccount(_initialSearchParams, _searchCatergory, _searchText);
        }

        public DataTable GetInvoiceForChqEntry(string _com, string _PC)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetInvoiceForChqEntry(_com, _PC);
        }

        //Tharaka 09-09-2014
        public DataTable GET_ACC_DETAILS(string P_COM, string P_ACC)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_ACC_DETAILS(P_COM, P_ACC);
        }

        public int SaveJournalVouvher(VoucherHeader _voucherHeader, List<InterVoucherDetails> _voucherDetails, MasterAutoNumber _voucherAuto, out string _docNo, bool isSingleCheque)
        {
            int result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _inventoryDAL = new InventoryDAL();
                using (TransactionScope tr = new TransactionScope())
                {
                    if (_voucherHeader.Givh_vou_tp != "FUND")
                    {
                        if (isSingleCheque)
                        {
                            #region MyRegion
                            //string[] CreditorList = _voucherDetails.Select(X => X.GIVD_EXPE_CD).Distinct().ToArray();

                            //if (CreditorList.Length > 0)
                            //{
                            //    _financialDAL.ConnectionOpen();
                            //    _inventoryDAL.ConnectionOpen();

                            //    string decNumbers = string.Empty;

                            //    for (int i = 0; i < CreditorList.Length; i++)
                            //    {
                            //        MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_voucherAuto.Aut_moduleid, _voucherAuto.Aut_direction, _voucherAuto.Aut_start_char, _voucherAuto.Aut_cate_tp, _voucherAuto.Aut_cate_cd, _voucherAuto.Aut_modify_dt, _voucherAuto.Aut_year);
                            //        _reversInv.Aut_modify_dt = null;
                            //        _reversInv.Aut_year = null;
                            //        string _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                            //        _inventoryDAL.UpdateAutoNumber(_reversInv);

                            //        _voucherHeader.Givh_seq = _inventoryDAL.GetSerialID();
                            //        _voucherHeader.Givh_vou_no = _vouNo;
                            //        if (i != 0)
                            //        {
                            //            _voucherHeader.Givh_cheque_no = -1;
                            //        }

                            //        decNumbers += _vouNo + "|";

                            //        string[] AccountCodeList = _voucherDetails.Where(x => x.GIVD_EXPE_CD == CreditorList[i]).Select(x => x.GIVD_EXPE_CD).ToArray();
                            //        DataTable dtAccountCodes = _financialDAL.GetChqVoucherAccount(_voucherHeader.Givh_com, DateTime.Today).Select("CHQ_ISS = 1 AND TYPE = 'S'").CopyToDataTable();
                            //        string[] AccountCodeList2 = dtAccountCodes.AsEnumerable().Select(r => r.Field<string>("CODE")).ToArray();
                            //        string[] arr = AccountCodeList.Intersect(AccountCodeList2).ToArray();

                            //        if (arr.Length > 0)
                            //        {
                            //            _voucherHeader.Givh_emp_cd = arr[0].ToString();
                            //        }
                            //        _voucherHeader.Givh_emp_cd = CreditorList[i].ToString();

                            //        result = _financialDAL.SaveVoucherHeader(_voucherHeader);

                            //        List<InterVoucherDetails> selectedList = new List<InterVoucherDetails>();
                            //        selectedList = _voucherDetails.FindAll(x => x.GIVD_EXPE_CD == CreditorList[i]);

                            //        foreach (InterVoucherDetails _vou in selectedList)
                            //        {
                            //            _vou.GIVD_SEQ = _voucherHeader.Givh_seq;
                            //            _vou.GIVD_VOU_NO = _vouNo;
                            //            result = result + _financialDAL.SaveVoucherDefinitionAllDetails(_vou);
                            //        }
                            //    }

                            //    _docNo = decNumbers;

                            //    _financialDAL.ConnectionClose();
                            //    _inventoryDAL.ConnectionClose();

                            //    tr.Complete();
                            //}
                            //else
                            //{
                            //    _docNo = string.Empty;
                            //} 
                            #endregion
                            string[] supplierList = _voucherDetails.Select(X => X.DefaultSupplier).Distinct().ToArray();

                            if (supplierList.Length > 0)
                            {
                                //bool isExist = false;
                                //foreach (string item in supplierList)
                                //{
                                //    if (item ==     string.Empty )
                                //    {
                                //        isExist = true;
                                //    }
                                //}


                                _financialDAL.ConnectionOpen();
                                _inventoryDAL.ConnectionOpen();

                                string decNumbers = string.Empty;

                                for (int i = 0; i < supplierList.Length; i++)
                                {
                                    MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_voucherAuto.Aut_moduleid, _voucherAuto.Aut_direction, _voucherAuto.Aut_start_char, _voucherAuto.Aut_cate_tp, _voucherAuto.Aut_cate_cd, _voucherAuto.Aut_modify_dt, _voucherAuto.Aut_year);
                                    _reversInv.Aut_modify_dt = null;
                                    _reversInv.Aut_year = null;
                                    string _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                                    _inventoryDAL.UpdateAutoNumber(_reversInv);

                                    _voucherHeader.Givh_seq = _inventoryDAL.GetSerialID();
                                    _voucherHeader.Givh_vou_no = _vouNo;
                                    if (i != 0)
                                    {
                                        _voucherHeader.Givh_cheque_no = -1;
                                    }

                                    decNumbers += _vouNo + "|";

                                    decimal cdt = 0;
                                    decimal dbt = 0;
                                    decimal total = 0;
                                    string accountCode = supplierList[i];

                                    cdt = _voucherDetails.Where(x => x.GIVD_EXPE_CD == supplierList[i] && x.GIVD_EXPE_DIRECT == 1).Sum(x => x.GIVD_EXPE_VAL);
                                    dbt = _voucherDetails.Where(x => x.GIVD_EXPE_CD == supplierList[i] && x.GIVD_EXPE_DIRECT == 0).Sum(x => x.GIVD_EXPE_VAL);
                                    total = cdt - dbt;
                                    _voucherHeader.Givh_val = total;

                                    _voucherHeader.Givh_emp_cd = accountCode;

                                    result = _financialDAL.SaveVoucherHeader(_voucherHeader);

                                    List<InterVoucherDetails> selectedList = new List<InterVoucherDetails>();
                                    selectedList = _voucherDetails.FindAll(x => x.DefaultSupplier == supplierList[i]);

                                    foreach (InterVoucherDetails _vou in selectedList)
                                    {
                                        _vou.GIVD_SEQ = _voucherHeader.Givh_seq;
                                        _vou.GIVD_VOU_NO = _vouNo;
                                        result = result + _financialDAL.SaveVoucherDefinitionAllDetails(_vou);
                                    }
                                }

                                _docNo = decNumbers;

                                _financialDAL.ConnectionClose();
                                _inventoryDAL.ConnectionClose();

                                tr.Complete();
                            }
                            else
                            {
                                _docNo = string.Empty;
                            }
                        }
                        else
                        {
                            string[] InvoiceNums = _voucherDetails.Select(X => X.GIVD_ANAL8).Distinct().ToArray();

                            if (InvoiceNums.Length > 0)
                            {
                                _financialDAL.ConnectionOpen();
                                _inventoryDAL.ConnectionOpen();

                                string decNumbers = string.Empty;

                                for (int i = 0; i < InvoiceNums.Length; i++)
                                {
                                    MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_voucherAuto.Aut_moduleid, _voucherAuto.Aut_direction, _voucherAuto.Aut_start_char, _voucherAuto.Aut_cate_tp, _voucherAuto.Aut_cate_cd, _voucherAuto.Aut_modify_dt, _voucherAuto.Aut_year);
                                    _reversInv.Aut_modify_dt = null;
                                    _reversInv.Aut_year = null;
                                    string _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                                    _inventoryDAL.UpdateAutoNumber(_reversInv);

                                    _voucherHeader.Givh_seq = _inventoryDAL.GetSerialID();
                                    _voucherHeader.Givh_vou_no = _vouNo;

                                    decimal cdt = 0;
                                    decimal dbt = 0;
                                    decimal total = 0;
                                    string accountCode = _voucherDetails.Find(x => x.GIVD_ANAL8 == InvoiceNums[i] && x.isSupplierPrint == 1).GIVD_EXPE_CD;

                                    cdt = _voucherDetails.Where(x => x.GIVD_ANAL8 == InvoiceNums[i] && x.GIVD_EXPE_DIRECT == 1 && x.GIVD_EXPE_CD == accountCode).Sum(x => x.GIVD_EXPE_VAL);
                                    dbt = _voucherDetails.Where(x => x.GIVD_ANAL8 == InvoiceNums[i] && x.GIVD_EXPE_DIRECT == 0 && x.GIVD_EXPE_CD == accountCode).Sum(x => x.GIVD_EXPE_VAL);
                                    total = cdt - dbt;
                                    _voucherHeader.Givh_val = total;

                                    decNumbers += _vouNo + "|";

                                    //string[] AccountCodeList = _voucherDetails.Where(x => x.GIVD_ANAL8 == InvoiceNums[i]).Select(x => x.GIVD_EXPE_CD).ToArray();
                                    //DataTable dtAccountCodes = _financialDAL.GetChqVoucherAccount(_voucherHeader.Givh_com, DateTime.Today).Select("CHQ_ISS = 1 AND TYPE = 'S'").CopyToDataTable();
                                    //string[] AccountCodeList2 = dtAccountCodes.AsEnumerable().Select(r => r.Field<string>("CODE")).ToArray();
                                    //string[] arr = AccountCodeList.Intersect(AccountCodeList2).ToArray();

                                    //if (arr.Length > 0)
                                    //{
                                    //    _voucherHeader.Givh_emp_cd = arr[0].ToString();
                                    //}

                                    _voucherHeader.Givh_emp_cd = accountCode;
                                    result = _financialDAL.SaveVoucherHeader(_voucherHeader);

                                    List<InterVoucherDetails> selectedList = new List<InterVoucherDetails>();
                                    selectedList = _voucherDetails.FindAll(x => x.GIVD_ANAL8 == InvoiceNums[i]);

                                    foreach (InterVoucherDetails _vou in selectedList)
                                    {
                                        _vou.GIVD_SEQ = _voucherHeader.Givh_seq;
                                        _vou.GIVD_VOU_NO = _vouNo;
                                        result = result + _financialDAL.SaveVoucherDefinitionAllDetails(_vou);
                                    }
                                }

                                _docNo = decNumbers;

                                _financialDAL.ConnectionClose();
                                _inventoryDAL.ConnectionClose();

                                tr.Complete();
                            }
                            else
                            {
                                _docNo = string.Empty;
                            }
                        }
                    }
                    else
                    {
                        #region MyRegion
                        _financialDAL.ConnectionOpen();
                        _inventoryDAL.ConnectionOpen();

                        MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_voucherAuto.Aut_moduleid, _voucherAuto.Aut_direction, _voucherAuto.Aut_start_char, _voucherAuto.Aut_cate_tp, _voucherAuto.Aut_cate_cd, _voucherAuto.Aut_modify_dt, _voucherAuto.Aut_year);
                        _reversInv.Aut_modify_dt = null;
                        _reversInv.Aut_year = null;
                        string _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_reversInv);

                        _voucherHeader.Givh_seq = _inventoryDAL.GetSerialID();
                        _voucherHeader.Givh_vou_no = _vouNo;
                        _docNo = _vouNo;

                        //string[] AccountCodeList = _voucherDetails.Select(x => x.GIVD_EXPE_CD).ToArray();
                        //DataTable dtAccountCodes = _financialDAL.GetChqVoucherAccount(_voucherHeader.Givh_com, DateTime.Today).Select("CHQ_ISS = 1").CopyToDataTable();
                        //string[] AccountCodeList2 = dtAccountCodes.AsEnumerable().Select(r => r.Field<string>("CODE")).ToArray();
                        //string[] arr = AccountCodeList.Intersect(AccountCodeList2).ToArray();
                        //if (arr.Length > 0)
                        //{
                        //    _voucherHeader.Givh_emp_cd = arr[0].ToString();
                        //}
                        //save voucher
                        result = _financialDAL.SaveVoucherHeader(_voucherHeader);

                        //save voucher details
                        foreach (InterVoucherDetails _vou in _voucherDetails)
                        {
                            _vou.GIVD_SEQ = _voucherHeader.Givh_seq;
                            _vou.GIVD_VOU_NO = _vouNo;
                            result = result + _financialDAL.SaveVoucherDefinitionAllDetails(_vou);
                        }

                        _financialDAL.ConnectionClose();
                        _inventoryDAL.ConnectionClose();
                        tr.Complete();
                        #endregion

                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                result = -1;
                _docNo = ex.Message;
                return result;
            }

        }

        //Tharaka 16-09-2014
        public List<InterVoucherDetails> GetChequeVoucherDetail(string _vou)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetChequeVoucherDetail(_vou);
        }

        //kapila
        public DataTable GetReceiptByRefNo(string _com, string _pc, DateTime _from, DateTime _to, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetReceiptByRefNo(_com, _pc, _from, _to, _ref);
        }

        public int UpdateChequeVoucher(VoucherHeader _voucherHeader, List<InterVoucherDetails> _voucherDetails)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            int result = 0;
            try
            {
                result = _financialDAL.UpdateVoucherHeader(_voucherHeader);

                _financialDAL.InactiveAllVoucherDetails(_voucherHeader);

                foreach (InterVoucherDetails item in _voucherDetails)
                {
                    item.GIVD_ANAL12 = 0;
                    result += _financialDAL.UpdateChequeVoucherDetails(item);
                }
                _financialDAL.ConnectionClose();
                _financialDAL.TransactionCommit();
                return result;
            }
            catch (Exception ex)
            {
                result = -1;
                return result;

            }

        }

        //Tharaka 17-09-2014
        public int UpdateVoucherHeader(VoucherHeader _voucher)
        {
            Int32 x;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                x = _financialDAL.UpdateVoucherHeader(_voucher);
                _financialDAL.ConnectionClose();
                return x;
            }
            catch (Exception ex)
            {
                x = -1;
                return x;

            }

        }

        public int UpdateVoucherChequeNumber(string com, string chequeNUm, string user, string voucherNum)
        {
            int result = 0;
            _financialDAL = new FinancialDAL();
            VoucherHeader hdr = _financialDAL.GetVoucher(com, voucherNum);
            hdr.Givh_cheque_no = Convert.ToInt32(chequeNUm);
            hdr.Givh_mod_by = user;
            hdr.Givh_mod_dt = DateTime.Today.Date;
            result = UpdateVoucherHeader(hdr);

            return result;
        }

        //Tharaka 23-09-2014
        public bool ValidateVoucherUser(string User, DateTime date)
        {
            bool result = false;
            DataTable dtTemp = new DataTable();
            _financialDAL = new FinancialDAL();
            dtTemp = _financialDAL.ValidateVoucherUser(User, date.Date);

            if (dtTemp != null && dtTemp.Rows.Count > 0)
            {
                result = true;
            }
            return result;
        }
        //Shalika 01/10/2014
        public Int32 Process_bank_realization_crcd(string _com, string _pc, DateTime _date, string _accno, Int32 _isall, string _user, DateTime _month, Int32 _week)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.Process_bank_realization_crcd(_com, _pc, _date, _accno, _isall, _user, _month, _week);
            _financialDAL.ConnectionClose();
            return _eff;

        }
        //Shalika 01/10/2014
        public DataTable get_crcd_realization_det(string _com, string _pc, DateTime _date, string _accno, string _doctp, Decimal _amtfrom, Decimal _amtto, Int32 _is_real_stus, Int32 _nt_in_state, Int32 _oth_bank, Int32 _withNIS, string MID)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_crcd_realization_det(_com, _pc, _date, _accno, _doctp, _amtfrom, _amtto, _is_real_stus, _nt_in_state, _oth_bank, _withNIS, MID);
        }
        //Shalika 02/10/2014
        public Int32 UpdateCRCDRealizationDet(List<BankRealDet> _bnkRlsList, out string _msg)
        {
            Int32 result = 0;
            _msg = "";
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                foreach (BankRealDet _lst in _bnkRlsList)
                {
                    result = _financialDAL.UpdateCRCDRealizationDet(_lst);
                }
                _financialDAL.TransactionCommit();
                result = 1;
                _msg = string.Empty;
            }
            catch (Exception ex)
            {
                result = -1;
                _msg = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }
            return result;
        }

        public Int32 Update_hpr_ars_dt_defn(List<ArrearsDateDef> _LstdefHeader)
        {
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                foreach (ArrearsDateDef _lst in _LstdefHeader)
                {
                    result = _financialDAL.Update_hpr_ars_dt_defn(_lst);
                }
                _financialDAL.TransactionCommit();
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }
            return result;
        }


        public List<VoucherHeader> GetVoucherSearchToPrint(int cancel, int print, string _com, DateTime _from, DateTime _to, string _vou)
        {
            List<VoucherHeader> oVoucherHeaders = new List<VoucherHeader>();

            _financialDAL = new FinancialDAL();

            oVoucherHeaders = _financialDAL.GetVoucherSearch(cancel, print, _com, _from, _to, _vou);
            if (oVoucherHeaders != null && oVoucherHeaders.Count > 0)
            {
                foreach (VoucherHeader item in oVoucherHeaders)
                {
                    item.Givh_val = _financialDAL.getVoucherTotal(item.Givh_vou_no);
                }
            }
            return oVoucherHeaders;
        }

        //shanuka perera 14-10-2014
        public DataTable ProcessSUNUpload_ChequePrnt(DateTime _from, DateTime _to, string _com, string _user, string accNo, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_ChequePrnt(_from, _to, _com, _user, accNo, _acc_period, _sunID, _file);
        }

        //Tharaka 2014-10-15
        public DataTable GetChqVoucherAccount(string com, DateTime date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetChqVoucherAccount(com, date);
        }
        //shanuka perera 16-10-2014
        public DataTable ProcessSUNUpload_Fund(DateTime _from, DateTime _to, string _com, string _user, string accNo, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_Fund(_from, _to, _com, _user, accNo, _acc_period, _sunID, _file);
        }
        //Shalika 22/10/2014
        public DataTable chkIsFinalize(string acc, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.chkIsFinalize(acc, _date);
        }
        //shanuka perera 16-10-2014
        public DataTable ProcessSUNUpload_Loyalty(DateTime _from, DateTime _to, string _com, string _user, string pc, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_Loyalty(_from, _to, _com, _user, pc, _acc_period, _sunID, _file);
        }

        //Tharaka 2014-11-26
        public int UPDATE_VOUCHER_STATUS(string _com, string _vou, Int32 act, Int32 print, string mod_by, DateTime mod_dt)
        {
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.UPDATE_VOUCHER_STATUS(_com, _vou, act, print, mod_by, mod_dt);

                _financialDAL.TransactionCommit();
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }
            return result;
        }

        //Wimal @ 30/11/2015
        public DataTable GetSipmentDetails(string _comCode, DateTime _fromDate, DateTime _toDate, string _blNo, string _manualNo, string _tobondNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getShipmentDetails(_comCode, _fromDate, _toDate, _blNo, _manualNo, _tobondNo);
        }


        //Wimal @ 05/12/2015
        public DataTable getImpCstAnalDetails(string _comCode, DateTime _fromDate, DateTime _toDate, string _blNo, string _tobondNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getImpCstAnalDetails(_comCode, _fromDate, _toDate, _blNo, _tobondNo);
        }

        //Wimal @ 09/12/201545
        public DataTable getImpCstinfomation(string _comCode, DateTime _fromDate, DateTime _toDate)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("CostInfoSum") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.getImpCstinfomation(_comCode, _fromDate, _toDate);
        }

        //Wimal @ 09/12/2015
        public DataTable getImportRegister(string _comCode, DateTime _fromDate, DateTime _toDate, string _blNo, string _tobondNo, string _fromfile, string _tofile)
        {
            _financialDAL = new FinancialDAL();

            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ImportRegister") == true) _financialDAL.ConnectionOpen_DR();

            return _financialDAL.getImportRegister(_comCode, _fromDate, _toDate, _blNo, _tobondNo, _fromfile, _tofile);

        }

        //Wimal @ 09/12/2015
        public DataTable getSLPARegister(string _filefrom, string _fileto, string _com, string _user)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SLPARegister") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.getSLPARegister(_filefrom, _fileto, _com, _user);
        }

        #region Imports

        public List<MasterBusinessEntity> GetCustomerDetailList(string company, string customerCode, string nic, string mobile, string customerType)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCustomerDetailList(company, customerCode, nic, mobile, customerType);
        }

        public DataTable GetSupplierPorts(string p_mspr_com, string p_mspr_cd)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSupplierPorts(p_mspr_com, p_mspr_cd);
        }

        public DataTable GetSupplierETA(string p_mspr_com, string p_mspr_cd, string p_mspr_frm_port)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSupplierETA(p_mspr_com, p_mspr_cd, p_mspr_frm_port);
        }

        /*Rukshan-*/
        public ImportPIHeader GetPIByPIID(string _PIID)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPIByPIID(_PIID);
        }
        /*Rukshan*/
        public DataTable GetDPIByPIID(string _PIID)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetDPIByPIID(_PIID);
        }
        /*Rukshan*/

        public MasterAutoNumber GetAutoNumber(string _module, Int16? _direction, string _startChar, string _catType, string _catCode, DateTime? _modifyDate, Int32? _year)
        {
            MasterAutoNumber _masterAutoNumber = new MasterAutoNumber();
            _financialDAL = new FinancialDAL();
            _masterAutoNumber = _financialDAL.GetAutoNumber(_module, _direction, _startChar, _catType, _catCode, _modifyDate, _year);
            if (_masterAutoNumber == null)
            {
                _masterAutoNumber.Aut_cate_cd = _catCode;
                _masterAutoNumber.Aut_cate_tp = _catType;
                _masterAutoNumber.Aut_direction = _direction;
                _masterAutoNumber.Aut_modify_dt = _modifyDate;
                _masterAutoNumber.Aut_moduleid = _module;
                _masterAutoNumber.Aut_number = 1;
                _masterAutoNumber.Aut_start_char = _startChar;
                _masterAutoNumber.Aut_year = _year;
            }
            else
            {
            }

            return _masterAutoNumber;
        }
        public Int32 Update_Approval_Cancel(Order_Financing _OrderFinancing, out string err)
        {
            Int32 _effect = 0;
            err = string.Empty;
            try
            {

                _financialDAL = new FinancialDAL();

                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                _effect = _financialDAL.Update_Approval_Cancel(_OrderFinancing);
                _effect = _financialDAL.UPDATE_BANK_ACC_BAL(_OrderFinancing.If_com, _OrderFinancing.If_bank_cd, _OrderFinancing.If_bank_acc_no, _OrderFinancing.If_tot_amt_deal, _OrderFinancing.If_stus);

                _financialDAL.TransactionCommit();
                return _effect;
            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                err = ex.Message;
            }
            return _effect;
        }
        /*Rukshan*/
        public int Update_Cost_Inactive(OrderFinancingcost _Cost)
        {
            Int32 _effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            _effect = _financialDAL.Update_Cost_Inactive(_Cost);
            _financialDAL.TransactionCommit();
            return _effect;
        }
        public int Update_PI_ACtive(PIOrderFinancing _Cost)
        {
            Int32 _effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            _effect = _financialDAL.Update_PI_ACtive(_Cost);
            _financialDAL.TransactionCommit();
            return _effect;
        }
        public DataTable GetMaxPILineNo(string _Doc)
        {
            DataTable _result;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            _result = _financialDAL.GetMaxPILineNo(_Doc);
            _financialDAL.TransactionCommit();
            return _result;
        }
        public Int32 UpdateNewOrderFinancing(Order_Financing _OrderFinancing, DataTable _DelPI, PIOrderFinancing _PIData, DataTable _PINO, DataTable _newAPI, OrderFinancingAmd _Amendment, OrderFinancingcost _Cost, DataTable _CostTbl, DataTable _DelCost, ImportFINPay _ImportFINPay, DataTable _Pay, bool ISAMD)
        {
            Int32 _effect = 0;
            Tuple<int, int> _effect2;
            int i = 1;
            try
            {
                _financialDAL = new FinancialDAL();

                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                if (ISAMD == false)
                {
                    _effect = _financialDAL.UpdateNewOrderFinancing(_OrderFinancing);
                    if (_Pay != null)
                    {
                        int j = 1;
                        foreach (DataRow paydr in _Pay.Rows)
                        {

                            _ImportFINPay.Ify_amt = Convert.ToDecimal(paydr[2].ToString());
                            _ImportFINPay.Ify_amt_deal = Convert.ToDecimal(paydr[3].ToString());
                            //_ImportFINPay.Ify_anal_1 = paydr[4].ToString();
                            _ImportFINPay.Ify_act = true;
                            _ImportFINPay.Ify_anal_1 = paydr[1].ToString();
                            _ImportFINPay.Ify_tp = paydr[0].ToString();
                            // _ImportFINPay.Ify_seq_no = Int32.Parse(paydr[5].ToString());
                            _effect = _financialDAL.Update_FINPAYSTATUS(_ImportFINPay);
                        }
                        foreach (DataRow paydr in _Pay.Rows)
                        {
                            j = _ImportFINPay.Ify_line + 1;
                            _ImportFINPay.Ify_line = j;
                            _ImportFINPay.Ify_amt = Convert.ToDecimal(paydr[2].ToString());
                            _ImportFINPay.Ify_amt_deal = Convert.ToDecimal(paydr[3].ToString());
                            // _ImportFINPay.Ify_anal_2 = paydr[4].ToString();
                            _ImportFINPay.Ify_act = true;
                            _ImportFINPay.Ify_anal_1 = paydr[1].ToString();
                            _ImportFINPay.Ify_tp = paydr[0].ToString();
                            _effect = _financialDAL.SaveFinPay(_ImportFINPay);
                            j++;
                        }
                    }
                }
                else if (ISAMD == true)
                {

                    DataTable Result = GetMaxPILineNo(_PIData.Ifp_doc_no);
                    if (Result.Rows.Count > 0)
                    {
                        int LineNo = Convert.ToInt32(Result.Rows[0][0]);
                        _PIData.Ifp_line = LineNo + 1;
                    }
                    foreach (DataRow dr in _PINO.Rows)
                    {
                        // _PIData.Ifp_line = int.Parse(dr[2].ToString());
                        int Actvalue = Convert.ToInt32(dr[9].ToString());
                        if (Actvalue == 0)
                        {
                            _PIData.Ifp_act = 1;
                        }
                        _PIData.Ifp_pi_no = dr[0].ToString();
                        _PIData.Ifp_pi_seq_no = Convert.ToInt32(dr[6].ToString());
                        _PIData.Ifp_is_pi_amd = false;
                        _PIData.Ifp_tot_amt = Convert.ToDecimal(dr[5].ToString());
                        _PIData.Ifp_tot_amt_deal = Convert.ToDecimal(dr[5].ToString());

                        _effect = _financialDAL.SavePIFinanc(_PIData);
                        i++;
                    }

                    if (_newAPI != null)
                    {
                        //Pi Number Amendment run loop
                        DataTable MaxPILine = _financialDAL.GetMaxPILine(_PIData.Ifp_doc_no);
                        int j = 1;
                        foreach (DataRow dr in _newAPI.Rows)
                        {


                            _PIData.Ifp_pi_seq_no = Convert.ToInt32(dr[6].ToString());
                            _PIData.Ifp_pi_no = dr[0].ToString();

                            int value = Convert.ToInt32(MaxPILine.Rows[0][0].ToString());
                            _PIData.Ifp_line = value + j;
                            _PIData.Ifp_act = 1;
                            _PIData.Ifp_is_pi_amd = false;
                            _PIData.Ifp_tot_amt = Convert.ToInt32(dr[5].ToString());
                            _PIData.Ifp_tot_amt_deal = Convert.ToInt32(dr[5].ToString());
                            _effect = _financialDAL.SaveNewAmdPIFinanc(_PIData);
                            j++;
                        }
                    }
                    if (_DelPI != null)
                    {
                        foreach (DataRow dr in _DelPI.Rows)
                        {
                            _PIData.Ifp_act = 0;
                            _PIData.Ifp_line = Convert.ToInt32(dr[0].ToString());
                            _PIData.Ifp_doc_no = dr[1].ToString();
                            _PIData.Ifp_pi_no = dr[2].ToString();
                            _effect = _financialDAL.Update_PI_ACtive(_PIData);
                        }
                    }


                    _effect = _financialDAL.SaveFinancAmendment(_Amendment);
                    foreach (DataRow dr in _CostTbl.Rows)
                    {
                        //_Cost.Ifc_line = i;
                        _Cost.Ifc_ele_cd = dr[0].ToString();
                        _Cost.Ifc_amt = Convert.ToDecimal(dr[1].ToString());
                        _Cost.Ifc_amt_deal = Convert.ToDecimal(dr[2].ToString());
                        //_Cost.Ifc_line = Convert.ToInt32(dr[3].ToString());
                        _Cost.Ifc_act = true;
                        _effect = _financialDAL.SaveFinancCost(_Cost);
                        i++;
                    }

                    if (_DelCost != null)
                    {
                        foreach (DataRow dr in _DelCost.Rows)
                        {
                            _Cost.Ifc_act = false;
                            _Cost.Ifc_doc_no = dr[0].ToString();
                            _Cost.Ifc_ele_cd = dr[1].ToString();
                            _effect = _financialDAL.Update_Cost_Inactive(_Cost);
                        }
                    }

                    if (_Pay != null)
                    {
                        int j = 1;
                        foreach (DataRow paydr in _Pay.Rows)
                        {

                            _ImportFINPay.Ify_amt = Convert.ToDecimal(paydr[2].ToString());
                            _ImportFINPay.Ify_amt_deal = Convert.ToDecimal(paydr[3].ToString());
                            //_ImportFINPay.Ify_anal_1 = paydr[4].ToString();
                            _ImportFINPay.Ify_act = true;
                            _ImportFINPay.Ify_anal_1 = paydr[1].ToString();
                            _ImportFINPay.Ify_tp = paydr[0].ToString();
                            // _ImportFINPay.Ify_seq_no = Int32.Parse(paydr[5].ToString());
                            _effect = _financialDAL.Update_FINPAYSTATUS(_ImportFINPay);
                        }
                        foreach (DataRow paydr in _Pay.Rows)
                        {
                            j = _ImportFINPay.Ify_line + 1;
                            _ImportFINPay.Ify_line = j;
                            _ImportFINPay.Ify_amt = Convert.ToDecimal(paydr[2].ToString());
                            _ImportFINPay.Ify_amt_deal = Convert.ToDecimal(paydr[3].ToString());
                            //_ImportFINPay.Ify_anal_2 = paydr[4].ToString();
                            _ImportFINPay.Ify_act = true;
                            _ImportFINPay.Ify_anal_1 = paydr[1].ToString();
                            _ImportFINPay.Ify_tp = paydr[0].ToString();
                            _effect = _financialDAL.SaveFinPay(_ImportFINPay);
                            j++;
                        }
                    }
                    _effect = _financialDAL.UpdateNewOrderFinancing(_OrderFinancing);
                }
                ////SAVE SUN LC
                //CHECK SUN LC1
                DataTable DTsunlc1 = _financialDAL.CheckSUNLC(_OrderFinancing.If_com.ToString(), "M2", _OrderFinancing.If_othdoc_no);
                if (DTsunlc1.Rows.Count == 0)
                {
                    SunLC obsunlc = new SunLC();
                    obsunlc.sun_db = _OrderFinancing.If_com.ToString();
                    obsunlc.category = "M2";//or "T2"
                    //obsunlc.code = _OrderFinancing.If_othdoc_no;
                    //substring last 15 charactors
                    if (_OrderFinancing.If_othdoc_no.Length > 15)
                    {
                        obsunlc.code = _OrderFinancing.If_othdoc_no.Substring((_OrderFinancing.If_othdoc_no.Length - 15), 15);
                    }
                    else
                    {
                        obsunlc.code = _OrderFinancing.If_othdoc_no;
                    }
                    obsunlc.lookup = _OrderFinancing.If_bank_cd;
                    obsunlc.updated = _OrderFinancing.If_doc_dt.ToString("yyyyMMdd");
                    obsunlc.name = _OrderFinancing.If_ref_no;
                    obsunlc.budget_check = " ";
                    obsunlc.budget_stop = " ";
                    obsunlc.data_1 = " ";
                    obsunlc.prohb_post = " ";
                    _effect = _financialDAL.SaveSunLCCost(obsunlc);
                }
                //CHECK SUN LC2
                DataTable DTsunlc2 = _financialDAL.CheckSUNLC(_OrderFinancing.If_com.ToString(), "T2", _OrderFinancing.If_othdoc_no);
                if (DTsunlc1.Rows.Count == 0)
                {
                    SunLC obsunlc = new SunLC();
                    obsunlc.sun_db = _OrderFinancing.If_com.ToString();
                    obsunlc.category = "T2";//or "T2"
                    //substring last 15 charactors
                    if (_OrderFinancing.If_othdoc_no.Length > 15)
                    {
                        obsunlc.code = _OrderFinancing.If_othdoc_no.Substring((_OrderFinancing.If_othdoc_no.Length - 15), 15);
                    }
                    else
                    {
                        obsunlc.code = _OrderFinancing.If_othdoc_no;
                    }
                    obsunlc.lookup = _OrderFinancing.If_bank_cd;
                    obsunlc.updated = _OrderFinancing.If_doc_dt.ToString("yyyyMMdd");
                    obsunlc.name = _OrderFinancing.If_ref_no;
                    obsunlc.budget_check = " ";
                    obsunlc.budget_stop = " ";
                    obsunlc.data_1 = " ";
                    obsunlc.prohb_post = " ";
                    _effect = _financialDAL.SaveSunLCCost(obsunlc);
                }

                _financialDAL.TransactionCommit();
                _effect = 1;
            }
            catch (Exception err)
            {
                _effect = -1;
                // _docNo = "ERROR : " + err.Message.ToString();
                _financialDAL.TransactionRollback();
            }

            return _effect;
        }
        public Int32 DeleteFinPay(ImportFINPay _ImportFINPay)
        {
            _financialDAL = new FinancialDAL();
            Int32 _effect = 0;
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            _effect = _financialDAL.Update_FINPAYSTATUS(_ImportFINPay);
            _financialDAL.TransactionCommit();
            return _effect;
        }

        public Tuple<int, string> SaveNewOrderFinancing(Order_Financing _OrderFinancing, MasterAutoNumber _masterAutoNumber, PIOrderFinancing _PIData, DataTable _PINO, OrderFinancingAmd _Amendment, OrderFinancingcost _Cost, DataTable _CostTbl, ImportFINPay _ImportFINPay, DataTable _Pay)
        {
            Int32 _effect = 0;

            Tuple<int, int> _effect2;
            string _documentNo = string.Empty;
            try
            {

                _financialDAL = new FinancialDAL();

                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_masterAutoNumber.Aut_year).Remove(0, 2) + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);


                // _documentNo = _inventoryMovementHeader.Ith_loc + _locaSeparater + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_inventoryMovementHeader.Ith_doc_date.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                _effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);

                _OrderFinancing.If_doc_no = _documentNo;
                _PIData.Ifp_doc_no = _documentNo;
                _Amendment.Ifa_doc_no = _documentNo;
                _Cost.Ifc_doc_no = _documentNo;
                _ImportFINPay.Ify_doc_no = _documentNo;
                //foreach (ReptPickSerials pickserials in PickSerials)
                //{
                //    if (string.IsNullOrEmpty(pickserials.Tus_base_doc_no))
                //    {
                //        pickserials.Tus_base_doc_no = "N/A";
                //    }
                //}

                _effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                _effect2 = _financialDAL.SaveNewOrderFinancing(_OrderFinancing);
                if (_OrderFinancing.If_stus == "A")
                {
                    _effect = _financialDAL.UPDATE_BANK_ACC_BAL(_OrderFinancing.If_com, _OrderFinancing.If_bank_cd, _OrderFinancing.If_bank_acc_no, _OrderFinancing.If_tot_amt_deal, _OrderFinancing.If_stus);
                }
                int _seq = Convert.ToInt32(_effect2.Item2);
                _PIData.Ifp_seq_no = _seq;
                _Amendment.Ifa_seq_no = _seq;
                _Cost.Ifc_seq_no = _seq;
                _ImportFINPay.Ify_seq_no = _seq;
                int i = 1;
                foreach (DataRow dr in _PINO.Rows)
                {
                    _PIData.Ifp_line = i;
                    _PIData.Ifp_pi_seq_no = Convert.ToInt32(dr[6].ToString());
                    _PIData.Ifp_pi_no = dr[0].ToString();
                    _PIData.Ifp_act = 1;
                    _PIData.Ifp_is_pi_amd = false;
                    _PIData.Ifp_tot_amt = Convert.ToDecimal(dr[5].ToString());
                    _PIData.Ifp_tot_amt_deal = Convert.ToDecimal(dr[5].ToString());
                    _effect = _financialDAL.SavePIFinanc(_PIData);
                    i++;
                }

                _effect = _financialDAL.SaveFinancAmendment(_Amendment);
                int c = 1;
                foreach (DataRow dr in _CostTbl.Rows)
                {
                    _Cost.Ifc_line = c;
                    _Cost.Ifc_ele_cd = dr[0].ToString();
                    _Cost.Ifc_amt = Convert.ToDecimal(dr[1].ToString());
                    _Cost.Ifc_amt_deal = Convert.ToDecimal(dr[2].ToString());
                    _Cost.Ifc_act = true;
                    _effect = _financialDAL.SaveFinancCost(_Cost);
                    c++;
                }
                if (_Pay != null)
                {
                    int j = 1;
                    foreach (DataRow paydr in _Pay.Rows)
                    {

                        _ImportFINPay.Ify_line = j;
                        _ImportFINPay.Ify_amt = Convert.ToDecimal(paydr[2].ToString());
                        _ImportFINPay.Ify_amt_deal = Convert.ToDecimal(paydr[3].ToString());
                        // 
                        //_ImportFINPay.Ify_anal_1 = paydr[4].ToString();
                        _ImportFINPay.Ify_act = true;
                        _ImportFINPay.Ify_anal_1 = paydr[1].ToString();
                        _ImportFINPay.Ify_tp = paydr[0].ToString();

                        _effect = _financialDAL.SaveFinPay(_ImportFINPay);
                        j++;
                    }
                }
                ////SAVE SUN LC
                //CHECK SUN LC1
                DataTable DTsunlc1 = _financialDAL.CheckSUNLC(_OrderFinancing.If_com.ToString(), "M2", _OrderFinancing.If_othdoc_no);
                if (DTsunlc1.Rows.Count == 0)
                {
                    SunLC obsunlc = new SunLC();
                    obsunlc.sun_db = _OrderFinancing.If_com.ToString();
                    obsunlc.category = "M2";//or "T2"

                    //substring last 15 charactors
                    if (_OrderFinancing.If_othdoc_no.Length > 15)
                    {
                        obsunlc.code = _OrderFinancing.If_othdoc_no.Substring((_OrderFinancing.If_othdoc_no.Length - 15), 15);
                    }
                    else
                    {
                        obsunlc.code = _OrderFinancing.If_othdoc_no;
                    }
                    obsunlc.lookup = _OrderFinancing.If_bank_cd;
                    obsunlc.updated = _OrderFinancing.If_doc_dt.ToString("yyyyMMdd");
                    obsunlc.name = _OrderFinancing.If_ref_no;
                    obsunlc.budget_check = " ";
                    obsunlc.budget_stop = " ";
                    obsunlc.data_1 = " ";
                    obsunlc.prohb_post = " ";
                    _effect = _financialDAL.SaveSunLCCost(obsunlc);
                }
                //CHECK SUN LC2
                DataTable DTsunlc2 = _financialDAL.CheckSUNLC(_OrderFinancing.If_com.ToString(), "T2", _OrderFinancing.If_othdoc_no);
                if (DTsunlc2.Rows.Count == 0)
                {
                    SunLC obsunlc = new SunLC();
                    obsunlc.sun_db = _OrderFinancing.If_com.ToString();
                    obsunlc.category = "T2";//or "T2"
                    //substring last 15 charactors
                    if (_OrderFinancing.If_othdoc_no.Length > 15)
                    {
                        obsunlc.code = _OrderFinancing.If_othdoc_no.Substring((_OrderFinancing.If_othdoc_no.Length - 15), 15);
                    }
                    else
                    {
                        obsunlc.code = _OrderFinancing.If_othdoc_no;
                    }
                    obsunlc.lookup = _OrderFinancing.If_bank_cd;
                    obsunlc.updated = _OrderFinancing.If_doc_dt.ToString("yyyyMMdd");
                    obsunlc.name = _OrderFinancing.If_ref_no;
                    obsunlc.budget_check = " ";
                    obsunlc.budget_stop = " ";
                    obsunlc.data_1 = " ";
                    obsunlc.prohb_post = " ";
                    _effect = _financialDAL.SaveSunLCCost(obsunlc);
                }
                _financialDAL.TransactionCommit();
                // _financialDAL.ConnectionClose();
                _effect = 1;
            }
            catch (Exception err)
            {
                _effect = -1;
                _documentNo = err.Message;
                // _docNo = "ERROR : " + err.Message.ToString();
                _financialDAL.TransactionRollback();
            }
            string _documentNoret = _documentNo;
            return new Tuple<int, string>(_effect, _documentNoret);
            // return _effect;
        }

        public DataTable GetExchangeRate(string p_com, string p_scur, string p_ccur)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetExchangeRate(p_com, p_scur, p_ccur);
        }

        public DataTable GetOrderPeriod(string opNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetOrderPeriod(opNo);
        }
        /*PEMIL 24-Sep-2015*/
        public DataTable GetOrderPeriodALL(string opNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetOrderPeriodALL(opNo);
        }

        public DataTable GetOrderItem(string opNo, int year, int month)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetOrderItem(opNo, year, month);
        }

        public Tuple<int, string> PlaceOrder(OrderPlanHeader orderplan, MasterAutoNumber _masterAutoNumber, List<ImportsBLContainer> orderplancontanier)
        {
            Int32 _effect = 0;
            Tuple<int, int> _effect2;
            string docno = string.Empty;

            try
            {
                string _documentNo = string.Empty;
                _financialDAL = new FinancialDAL();

                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                //_documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_masterAutoNumber.Aut_year).Remove(0, 2) + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                _effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);

                orderplan.IO_OP_NO = _documentNo;

                _effect2 = _financialDAL.PlaceOrder(orderplan);
                int _seq = Convert.ToInt32(_effect2.Item2);
                orderplan.IO_SEQ_NO = _seq;
                _effect = _seq;

                docno = _documentNo;

                if (orderplancontanier != null)
                {
                    int line = 1;
                    foreach (var item in orderplancontanier)
                    {
                        ImportsBLContainer _obj = new ImportsBLContainer();
                        _obj.Ibc_cre_by = orderplan.IO_CRE_BY;
                        _obj.Ibc_desc = item.Ibc_desc;
                        _obj.Ibc_unit = item.Ibc_unit;
                        _obj.Ibc_doc_no = docno;
                        _obj.Ibc_line = line;
                        _obj.Ibc_tp = item.Ibc_tp;
                        _obj.Ibc_seq_no = _seq;
                        _obj.Ibc_act = 1;
                        int _val = _financialDAL.SaveOPContanier(_obj);
                        if (_val < 0)
                        {
                            _effect = -1;
                            _financialDAL.TransactionRollback();
                            return new Tuple<int, string>(_effect, docno);
                        }
                        line++;
                    }
                }





                _financialDAL.TransactionCommit();
                return new Tuple<int, string>(_effect, docno);

            }
            catch (Exception err)
            {
                _effect = -1;
                docno = "ERROR : " + err.Message.ToString();
                _financialDAL.TransactionRollback();
                return new Tuple<int, string>(_effect, docno);
            }
            finally
            {
                _financialDAL.ConnectionClose();
            }
        }

        public Int32 SaveOPItems(OrderPlanItem orderplanItem)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SaveOPItems(orderplanItem);
        }

        //Tharaka 2015-07-04
        public Order_Financing GET_IMP_FIN_HDR_BY_DOC(String Com, String DocNum)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_FIN_HDR_BY_DOC(Com, DocNum);
        }

        public Int32 SavePI(ImportPIHeader pih, DataTable dtItem, DataTable dtPIKit, DataTable dtpic, MasterAutoNumber mastAutoNo, out string msg)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                documentNo = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(mastAutoNo.Aut_year).Remove(0, 2) + "-" + autoNo.ToString("0000", CultureInfo.InvariantCulture);

                if (string.IsNullOrEmpty(documentNo))
                {
                    msg = "PI DocumentNo Empty";
                    return -1;
                }

                int effect = -1;
                effect = _financialDAL.UpdateAutoNumber(mastAutoNo);

                if (effect < 0)
                {
                    msg = "autoNo Update fail.";
                    return -1;
                }

                pih.IP_PI_NO = documentNo;

                seqNo = _financialDAL.SavePIHeader(pih);

                if (seqNo < 0)
                {
                    msg = "PI Header Insert fail.";
                    return -1;
                }

                if (dtPIKit != null)
                {
                    ImportPIKit pikit = new ImportPIKit();
                    int countkit = dtPIKit.Rows.Count;
                    for (int i = 0; i < countkit; i++)
                    {
                        int opLine;
                        if (dtItem.Rows[i]["KITCODE"].ToString() == dtPIKit.Rows[i]["IPK_ITM_CD"].ToString())
                        {
                            int.TryParse(dtItem.Rows[i]["IOI_LINE"].ToString(), out opLine);

                            pikit.IPK_SEQ_NO = seqNo;
                            pikit.IPK_PI_NO = documentNo;
                            pikit.IPK_LINE = i + 1;
                            pikit.IPK_REF_LINE = i + 1;
                            pikit.IPK_F_LINE = i + 1;
                            pikit.IPK_OP_LINE = opLine;
                            pikit.IPK_STUS = 1;
                            pikit.IPK_ITM_CD = dtItem.Rows[i]["IOI_ITM_CD"].ToString();
                            pikit.IPK_ITM_STUS = "GOD";
                            pikit.IPK_QTY = Convert.ToDouble(dtItem.Rows[i]["IOI_BAL_QTY"]);
                            pikit.IPK_BAL_QTY = Convert.ToDouble(dtItem.Rows[i]["IOI_BAL_QTY"]);
                            pikit.IPK_UOM = dtItem.Rows[i]["IOI_UOM"].ToString();
                            pikit.IPK_UNIT_RT = Convert.ToDouble(dtItem.Rows[i]["IOI_UNIT_RT"]);
                            pikit.IPK_SI_QTY = 0;
                            pikit.IPK_CRE_BY = pih.IP_CRE_BY;
                            pikit.IPK_CRE_DT = pih.IP_CRE_DT;
                            pikit.IPK_MOD_BY = pih.IP_MOD_BY;
                            pikit.IPK_MOD_DT = pih.IP_MOD_DT;

                            result = _financialDAL.SavePIKit(pikit);

                            if (result != 1)
                            {
                                msg = "PI Kit Insert fail.";
                                return -1;
                            }
                        }
                    }
                }

                ImportPIDetails pid = new ImportPIDetails();
                int count = dtItem.Rows.Count;
                for (int i = 0; i < count; i++)
                {
                    int opLine;
                    int.TryParse(dtItem.Rows[i]["LINE"].ToString(), out opLine);

                    pid.IPI_SEQ_NO = seqNo;
                    pid.IPI_PI_NO = documentNo;
                    pid.IPI_LINE = i + 1;
                    pid.IPI_REF_LINE = i + 1;
                    pid.IPI_F_LINE = i + 1;
                    pid.IPI_OP_LINE = opLine;
                    pid.IPI_STUS = 1;
                    pid.IPI_ITM_CD = dtItem.Rows[i]["IOI_ITM_CD"].ToString();
                    pid.IPI_ITM_STUS = "GOD";
                    pid.IPI_MODEL = dtItem.Rows[i]["IOI_MODEL"].ToString();
                    pid.IPI_BRAND = dtItem.Rows[i]["IOI_MODEL"].ToString();
                    pid.IPI_DESC = dtItem.Rows[i]["IOI_DESC"].ToString();
                    pid.IPI_ITM_TP = dtItem.Rows[i]["IOI_ITM_TP"].ToString();
                    pid.IPI_COLOR = dtItem.Rows[i]["IOI_COLOR"].ToString();
                    pid.IPI_MFC = "";
                    pid.IPI_QTY = Convert.ToDecimal(dtItem.Rows[i]["IOI_BAL_QTY"]);
                    pid.IPI_BAL_QTY = Convert.ToDecimal(dtItem.Rows[i]["IOI_BAL_QTY"]);
                    pid.IPI_UOM = dtItem.Rows[i]["IOI_UOM"].ToString();
                    pid.IPI_UNIT_RT = Convert.ToDecimal(dtItem.Rows[i]["IOI_UNIT_RT"]);
                    pid.IPI_SI_QTY = 0;
                    pid.IPI_KIT_LINE = 0;//set in sp 
                    pid.IPI_KIT_ITM_CD = dtItem.Rows[i]["KITCODE"].ToString();
                    pid.IPI_CRE_BY = pih.IP_CRE_BY;
                    pid.IPI_CRE_DT = pih.IP_CRE_DT;
                    pid.IPI_MOD_BY = pih.IP_MOD_BY;
                    pid.IPI_MOD_DT = pih.IP_MOD_DT;
                    pid.IPI_SESSION_ID = pih.IP_MOD_BY;

                    result = _financialDAL.SavePIIDetails(pid);

                    if (result == 1)
                    {
                        result = 0;
                        result = _financialDAL.UPDATE_OP_PI_QTY(pih.IP_OP_NO, dtItem.Rows[i]["IOI_ITM_CD"].ToString(), opLine, Convert.ToDecimal(dtItem.Rows[i]["IOI_BAL_QTY"]));
                    }
                    else
                    {
                        msg = "PI Item Insert Fail.";
                        return -1;
                    }

                    //if (result != 1)
                    //{
                    //    msg = "OP Item Update Fail.";
                    //    return -1;
                    //}
                }

                result = 0;
                IMP_PI_COST pc = new IMP_PI_COST();
                int countpc = dtpic.Rows.Count;
                for (int i = 0; i < countpc; i++)
                {
                    pc.IPC_SEQ_NO = seqNo;
                    pc.IPC_PI_NO = documentNo;
                    pc.IPC_LINE = i + 1;
                    pc.IPC_ELE_CAT = dtpic.Rows[i]["ELEMENT CATERGORY"].ToString();
                    pc.IPC_ELE_TP = dtpic.Rows[i]["ELEMENT TYPE"].ToString();
                    pc.IPC_ELE_CD = dtpic.Rows[i]["CODE"].ToString();
                    pc.IPC_AMT = Convert.ToDecimal(dtpic.Rows[i]["Value"].ToString());
                    //pc.IPC_AMT_DEAL   = ;
                    pc.IPC_EX_RT = Convert.ToDecimal(pih.IP_EX_RT);
                    pc.IPC_ACT = 1;
                    //pc.IPC_ANAL_1     = ;
                    //pc.IPC_ANAL_2     = ;
                    //pc.IPC_ANAL_3     = ;
                    //pc.IPC_ANAL_4     = ;
                    //pc.IPC_ANAL_5     = ;
                    pc.IPC_CRE_BY = pih.IP_CRE_BY;
                    pc.IPC_CRE_DT = pih.IP_CRE_DT;
                    pc.IPC_SESSION_ID = pih.IP_SESSION_ID;

                    result = _financialDAL.Save_PI_COST(pc);

                    if (result != 1)
                    {
                        msg = "PI Cost Save Fail.";
                        return -1;
                    }
                }

                int update = _financialDAL.UPDATE_OP_IO_STUS(pih.IP_OP_NO);

                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }

            msg = documentNo;
            return result;
        }

        public Int32 UpdatePI(ImportPIHeader pih, DataTable dtItem, DataTable dtpic, out string msg)
        {
            Int32 seqNo = 0;
            Int32 result = 0;
            string documentNo = null;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                seqNo = _financialDAL.UpdatePIHeader(pih);

                if (seqNo < 0)
                {
                    msg = "PI Header Update fail.";
                    return -1;
                }

                ImportPIDetails pid = new ImportPIDetails();
                ImportPIKit pikit = new ImportPIKit();
                int count = dtItem.Rows.Count;
                for (int i = 0; i < count; i++)
                {
                    if (dtItem.Rows[i]["KIT"].ToString() == "1")
                    {
                        pikit.IPK_SEQ_NO = seqNo;
                        pikit.IPK_PI_NO = documentNo;
                        pikit.IPK_LINE = i + 1;
                        pikit.IPK_REF_LINE = i + 1;
                        pikit.IPK_F_LINE = i + 1;
                        pikit.IPK_OP_LINE = 1;
                        pikit.IPK_STUS = 1;
                        pikit.IPK_ITM_CD = dtItem.Rows[i]["IOI_ITM_CD"].ToString();
                        pikit.IPK_ITM_STUS = "GOD";
                        pikit.IPK_QTY = Convert.ToDouble(dtItem.Rows[i]["IOI_BAL_QTY"]);
                        pikit.IPK_BAL_QTY = Convert.ToDouble(dtItem.Rows[i]["IOI_BAL_QTY"]);
                        pikit.IPK_UOM = dtItem.Rows[i]["IOI_UOM"].ToString();
                        pikit.IPK_UNIT_RT = Convert.ToDouble(dtItem.Rows[i]["IOI_UNIT_RT"]);
                        pikit.IPK_SI_QTY = 0;
                        pikit.IPK_CRE_BY = pih.IP_CRE_BY;
                        pikit.IPK_CRE_DT = pih.IP_CRE_DT;
                        pikit.IPK_MOD_BY = pih.IP_MOD_BY;
                        pikit.IPK_MOD_DT = pih.IP_MOD_DT;

                        result = _financialDAL.UpdatePIKit(pikit);
                    }
                    if (dtItem.Rows[i]["OP_LINE"].ToString() == "1" || dtItem.Rows[i]["DELETE"].ToString() == "1")
                    {
                        pid.IPI_SEQ_NO = pih.IP_SEQ_NO;
                        pid.IPI_PI_NO = pih.IP_PI_NO;
                        pid.IPI_LINE = Convert.ToInt32(dtItem.Rows[i]["LINE"].ToString());
                        pid.IPI_REF_LINE = i + 1;
                        pid.IPI_F_LINE = i + 1;
                        pid.IPI_OP_LINE = i + 1;
                        pid.IPI_STUS = 1;
                        pid.IPI_ITM_CD = dtItem.Rows[i]["IOI_ITM_CD"].ToString();
                        pid.IPI_ITM_STUS = "GOD";
                        pid.IPI_MODEL = dtItem.Rows[i]["IOI_MODEL"].ToString();
                        pid.IPI_BRAND = dtItem.Rows[i]["IOI_MODEL"].ToString();
                        pid.IPI_DESC = dtItem.Rows[i]["IOI_DESC"].ToString();
                        pid.IPI_ITM_TP = dtItem.Rows[i]["IOI_ITM_TP"].ToString();
                        pid.IPI_COLOR = dtItem.Rows[i]["IOI_COLOR"].ToString();
                        pid.IPI_MFC = "";
                        pid.IPI_QTY = Convert.ToDecimal(dtItem.Rows[i]["IOI_BAL_QTY"]);
                        pid.IPI_BAL_QTY = Convert.ToDecimal(dtItem.Rows[i]["IOI_BAL_QTY"]);
                        pid.IPI_UOM = dtItem.Rows[i]["IOI_UOM"].ToString();
                        pid.IPI_UNIT_RT = Convert.ToDecimal(dtItem.Rows[i]["IOI_UNIT_RT"]);
                        pid.IPI_SI_QTY = 0;
                        pid.IPI_KIT_LINE = 0;
                        pid.IPI_KIT_ITM_CD = "";
                        pid.IPI_CRE_BY = pih.IP_CRE_BY;
                        pid.IPI_CRE_DT = pih.IP_CRE_DT;
                        pid.IPI_MOD_BY = pih.IP_MOD_BY;
                        pid.IPI_MOD_DT = pih.IP_MOD_DT;
                        pid.IPI_SESSION_ID = pih.IP_MOD_BY;

                        result = _financialDAL.UpdatePIIDetails(pid);

                        if (result != 1)
                        {
                            msg = "PI Item Insert fail.";
                            return -1;
                        }
                    }
                }

                result = 0;
                IMP_PI_COST pc = new IMP_PI_COST();
                int countpc = dtpic.Rows.Count;
                for (int i = 0; i < countpc; i++)
                {
                    pc.IPC_SEQ_NO = pih.IP_SEQ_NO;
                    pc.IPC_PI_NO = pih.IP_PI_NO;
                    pc.IPC_LINE = i + 1;
                    pc.IPC_ELE_CAT = dtpic.Rows[i]["ELEMENT CATERGORY"].ToString();
                    pc.IPC_ELE_TP = dtpic.Rows[i]["ELEMENT TYPE"].ToString();
                    pc.IPC_ELE_CD = dtpic.Rows[i]["CODE"].ToString();
                    pc.IPC_AMT = Convert.ToDecimal(dtpic.Rows[i]["Value"]);
                    //pc.IPC_AMT_DEAL   = ;
                    pc.IPC_EX_RT = Convert.ToDecimal(pih.IP_EX_RT);
                    pc.IPC_ACT = 1;
                    //pc.IPC_ANAL_1     = ;
                    //pc.IPC_ANAL_2     = ;
                    //pc.IPC_ANAL_3     = ;
                    //pc.IPC_ANAL_4     = ;
                    //pc.IPC_ANAL_5     = ;
                    pc.IPC_CRE_BY = pih.IP_CRE_BY;
                    pc.IPC_CRE_DT = pih.IP_CRE_DT;
                    pc.IPC_SESSION_ID = pih.IP_SESSION_ID;

                    result = _financialDAL.Update_PI_COST(pc);

                    if (result != 1)
                    {
                        msg = "PI Cost Update Fail.";
                        return -1;
                    }
                }

                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }

            msg = documentNo;
            return result;
        }

        public Int32 UpdateOrderHeader(OrderPlanHeader orderplan)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.UpdateOrderHeader(orderplan);
        }

        public Int32 UpdateOPItems(OrderPlanItem orderplanItem)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.UpdateOPItems(orderplanItem);
        }

        public Int32 UpdateOPStatus(OrderPlanHeader OpHeader)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.UpdateOPStatus(OpHeader);
        }

        public Int32 SaveKitItems(OrderPlanKitItem orderplanKitItem)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SaveKitItems(orderplanKitItem);
        }

        public DataTable GetItemLines(string p_ioi_op_no, Int32 p_ioi_seq_no, Int32 p_ioi_line)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetItemLines(p_ioi_op_no, p_ioi_seq_no, p_ioi_line);
        }

        public DataTable GetItemRowCount(string p_ioi_op_no, Int32 p_ioi_seq_no)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetItemRowCount(p_ioi_op_no, p_ioi_seq_no);
        }

        public ImportPIHeader GET_IMP_PI(String pi)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_PI(pi);
        }

        public List<ImportPIDetails> GET_IMP_PIITEM(String pi)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_PIITEM(pi);
        }
        public List<ImportPIKit> GET_IMP_PIKITITEM(String pi)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_PIKITITEM(pi);
        }

        //PEMIL 24-Sep-2015
        public DataTable GET_IMP_PI_COST(String pi)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_PI_COST(pi);
        }

        public DataTable ChkItem(string cd)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ChkItem(cd);
        }

        public DataTable GetKitItem(string cd)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetKitItem(cd);
        }

        public DataTable GetItemDetails(string cd)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetItemDetails(cd);
        }

        //Tharaka 2015-07-07
        public List<PIOrderFinancing> GET_IMP_FIN_PI_BY_DOC(String DocNum)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_FIN_PI_BY_DOC(DocNum);
        }

        //Tharaka 2015-07-07
        public List<ImportPIDetails> GET_IMP_PI_ITM_BY_PINO(String DocNum, Int32 seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_PI_ITM_BY_PINO(DocNum, seq);
        }

        public DataTable GetCost(string com, string cat, string tp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCost(com, cat, tp);
        }

        public Int32 UpdateKitItems(OrderPlanKitItem orderplanKitItem)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.UpdateKitItems(orderplanKitItem);
        }

        //Master Data 
        public Int32 SaveCostCatergoryMaster(ImportCostCatergoryMaster _ImportCostCatergoryMaster)
        {
            Int32 _effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            _effect = _financialDAL.SaveCostCatergoryMaster(_ImportCostCatergoryMaster);
            _financialDAL.TransactionCommit();
            return _effect;
        }
        public DataTable GetCostCatergoryMaster(string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostCatergoryMaster(_searchCatergory, _searchText);
        }

        public DataTable GetCostCMasterBYID(string _CODE)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostCMasterBYID(_CODE);
        }
        public Int32 SaveCostSegmentMaster(ImportCostSegmentMaster _ImportCostSegmentMaster)
        {
            Int32 _effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            _effect = _financialDAL.SaveCostSegmentMaster(_ImportCostSegmentMaster);
            _financialDAL.TransactionCommit();
            return _effect;
        }
        public DataTable GetCostSegementMaster(string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostSegmentMaster(_searchCatergory, _searchText);
        }
        public DataTable GetCostSegmentMaster_CODE(string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostSegmentMaster_CODE(_searchText);
        }

        public Int32 SaveCostTypeMaster(ImportCostType _ImportCostType, DataTable _CostTypeTbl, ImpoertCostElement _ImpoertCostElement, DataTable _CostElementTbl)
        {
            Int32 _effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();

            foreach (DataRow dr in _CostTypeTbl.Rows)
            {
                _ImportCostType.Mcat_cd = dr[0].ToString();
                _ImportCostType.Mcat_act = (Convert.ToBoolean(dr[1]));

                _effect = _financialDAL.SaveCostTypeMaster(_ImportCostType);
            }
            if ((_CostElementTbl != null) && (_CostElementTbl.Rows.Count > 0))
            {
                foreach (DataRow ddr in _CostElementTbl.Rows)
                {
                    _ImpoertCostElement.Mcae_cd = ddr[2].ToString();
                    _ImpoertCostElement.Mcae_ele_cat = ddr[0].ToString();
                    _ImpoertCostElement.Mcae_ele_tp = ddr[1].ToString();
                    _ImpoertCostElement.Mcae_is_edit = (Convert.ToBoolean(ddr[3]));
                    _ImpoertCostElement.Mcae_act = (Convert.ToBoolean(ddr[4]));

                    _effect = _financialDAL.SaveCostElement(_ImpoertCostElement);
                }
            }

            _financialDAL.TransactionCommit();
            return _effect;
        }

        public DataTable GetCostType_CODE(string _CATCD, string _CD)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostType_CODE(_CATCD, _CD);
        }

        public DataTable GetCostELEMaster_CODE(string _initialSearchParams)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostELEMaster_CODE(_initialSearchParams);
        }

        //Tharaka 2015-07-10
        public List<MST_CONTAINER_TP> GET_CONTAINER_TYPES()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_CONTAINER_TYPES();
        }

        //Tharaka 2015-07-10
        public List<MST_COST_ELE> GET_COST_ELE(String Com, String Type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_COST_ELE(Com, Type);
        }

        //Tharaka 2015-07-13
        public Int32 SaveBillOfLading(ImportsBLHeader oHeader, List<ImportsBLItems> oImportsBLItems, List<ImportsBLSInvoice> OImportsBLSInvoice, List<ImportsBLContainer> oImportsBLContainers, List<ImportsBLCost> oImportsBLCosts, MasterAutoNumber _masterAuto, bool isNewRecord, out String Error, out String BLNumber)
        {
            Int32 result = 0;
            Error = string.Empty;
            BLNumber = string.Empty;
            Int32 oBLSeqNumber = 0;
            String oBLDocnumber = string.Empty;

            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                if (isNewRecord)
                {
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);
                    // oBLDocnumber = _masterAuto.Aut_cate_cd + "-" + _masterAuto.Aut_start_char + "-" + Convert.ToString(_masterAuto.Aut_year).Remove(0, 2) + "-" + string.Format("{0:0000}", _number.Aut_number);
                    oBLDocnumber = _masterAuto.Aut_cate_cd + _masterAuto.Aut_start_char +
                        Convert.ToString(_masterAuto.Aut_year).Remove(0, 2) + string.Format("{0:0000}", _number.Aut_number);
                    _inventoryDAL.UpdateAutoNumber(_masterAuto);
                    oHeader.Ib_doc_no = oBLDocnumber;
                    BLNumber = oBLDocnumber;
                }
                //Add bt Lakshan
                Int32 _ib_si_seq_no = 0;
                if (oImportsBLItems != null)
                {
                    if (oImportsBLItems.Count > 0)
                    {
                        try
                        {
                            _ib_si_seq_no = (from tab1 in oImportsBLItems
                                             select Convert.ToInt32(tab1.Ibi_anal_1)).Max();
                        }
                        catch (Exception)
                        {
                            _ib_si_seq_no = 0;
                        }

                    }
                }
                oHeader.Ib_si_seq_no = _ib_si_seq_no;
                //End
                result = _financialDAL.SaveBLHeader(oHeader, out oBLSeqNumber);

                if (result > 0)
                {
                    foreach (ImportsBLItems oitem in oImportsBLItems)
                    {

                        List<MasterItem> masteitm = _inventoryDAL.GetAllItemByModel(oitem.Ibi_model);
                        if (masteitm == null)
                        {
                            result = -1;
                            Error = "Please Check Model For Item :" + oitem.Ibi_itm_cd;
                            _inventoryDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            return result;
                        }
                        masteitm = masteitm.Where(a => a.Mi_cd == oitem.Ibi_itm_cd).ToList();
                        if (masteitm == null)
                        {
                            result = -1;
                            Error = "Item Code and Model MissMatch Item :" + oitem.Ibi_itm_cd + " Model : " + oitem.Ibi_model;
                            _inventoryDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            return result;

                        }
                        else
                        {
                            if (masteitm.Count == 0)
                            {
                                result = -1;
                                Error = "Item Code and Model MissMatch Item :" + oitem.Ibi_itm_cd + " Model : " + oitem.Ibi_model;
                                _inventoryDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                return result;
                            }
                        }

                        int Line = oImportsBLItems.IndexOf(oitem) + 1;
                        oitem.Ibi_seq_no = oBLSeqNumber;
                        oitem.Ibi_doc_no = oBLDocnumber.Trim();
                        oitem.Ibi_line = Line;
                        oitem.Ibi_ref_line = Line;
                        oitem.Ibi_anal_5 = string.Empty;
                        #region chg by lakshan 27 Apr 2017 to issue fix SI pi_line update incorrectly
                        result = _financialDAL.UPDATE_BAL_QTY_BY_BL(oitem.Ibi_pi_no, oitem.Ibi_pi_line, oitem.Ibi_qty, oHeader.Ib_session_id, oHeader.Ib_cre_by);
                        ImportPIDetails _tmpPiDet = _financialDAL.GET_IMP_PI_ITM_FOR_SI_SAVE(oitem.Ibi_pi_no, oitem.Ibi_itm_cd).FirstOrDefault();
                        if (_tmpPiDet != null)
                        {
                            oitem.Ibi_pi_line = _tmpPiDet.IPI_LINE;
                        }
                        #endregion
                        result = _financialDAL.SaveBLItems(oitem);

                        ////if (oitem.isRecordStatus == 1)
                        //{
                        //  result = _financialDAL.UPDATE_BAL_QTY_BY_BL(oitem.Ibi_pi_no, oitem.Ibi_pi_line, oitem.Ibi_qty, oHeader.Ib_session_id, oHeader.Ib_cre_by);
                        //}
                    }

                    foreach (ImportsBLContainer item in oImportsBLContainers)
                    {
                        item.Ibc_seq_no = oBLSeqNumber;
                        item.Ibc_doc_no = oBLDocnumber.Trim();
                        item.Ibc_cre_by = oHeader.Ib_mod_by;
                        result = _financialDAL.SAVE_IMP_BL_CONTNR(item);
                    }

                    foreach (ImportsBLSInvoice item in OImportsBLSInvoice)
                    {
                        item.Ibs_seq_no = oBLSeqNumber;
                        item.Ibs_doc_no = oBLDocnumber.Trim();
                        item.Ibs_cre_by = oHeader.Ib_mod_by;
                        result = _financialDAL.SAVE_IMP_BL_SI(item);
                    }
                    //Lakshan 2016-Mar-03 null cheking
                    int impBLCost = 1;
                    if (oImportsBLCosts != null)
                    {
                        foreach (ImportsBLCost item in oImportsBLCosts)
                        {
                            item.Ibcs_seq_no = oBLSeqNumber;
                            item.Ibcs_line = impBLCost;
                            item.Ibcs_doc_no = oBLDocnumber.Trim();
                            item.Ibcs_cre_by = oHeader.Ib_mod_by;
                            result = _financialDAL.SAVE_IMP_BL_COST(item);
                            impBLCost++;
                        }
                    }

                    //Cost process

                    ImportsCostHeader oImportsCostHeader = new ImportsCostHeader();
                    List<ImportsCostItem> oCostItems = new List<ImportsCostItem>();
                    List<ImportsCostElement> oImportsCostElements = new List<ImportsCostElement>();
                    List<ImportsCostElementItem> oImportsCostElementItems = new List<ImportsCostElementItem>();

                    oImportsCostHeader.Ich_com = oHeader.Ib_com;
                    oImportsCostHeader.Ich_tp = "I";
                    oImportsCostHeader.Ich_doc_no = oHeader.Ib_doc_no.Trim();
                    oImportsCostHeader.Ich_ref_no = "";
                    oImportsCostHeader.Ich_pre = 1;
                    oImportsCostHeader.Ich_pre_dt = oHeader.Ib_bl_dt;
                    oImportsCostHeader.Ich_pre_by = oHeader.Ib_cre_by;
                    oImportsCostHeader.Ich_pre_sysdt = oHeader.Ib_cre_dt;
                    oImportsCostHeader.Ich_actl = 0;
                    //oImportsCostHeader.Ich_actl_dt = "";
                    //oImportsCostHeader.Ich_actl_by = "";
                    //oImportsCostHeader.Ich_actl_sysdt = "";
                    oImportsCostHeader.Ich_finl = 0;
                    //oImportsCostHeader.Ich_finl_dt = "";
                    //oImportsCostHeader.Ich_finl_by = "";
                    //oImportsCostHeader.Ich_finl_sysdt = "";
                    oImportsCostHeader.Ich_stus = "P";
                    oImportsCostHeader.Ich_is_grn = 0;
                    oImportsCostHeader.Ich_cur = oHeader.Ib_cur_cd;
                    oImportsCostHeader.Ich_anal_1 = "";
                    oImportsCostHeader.Ich_anal_2 = "";
                    oImportsCostHeader.Ich_anal_3 = "";
                    oImportsCostHeader.Ich_anal_4 = "";
                    oImportsCostHeader.Ich_anal_5 = "";
                    oImportsCostHeader.Ich_ex_rt = oHeader.Ib_ex_rt;
                    oImportsCostHeader.Ich_seq_no = oBLSeqNumber;
                    int seqNumber = 0;
                    result = _financialDAL.SAVE_IMP_CST_HDR_NEW(oImportsCostHeader, out seqNumber);

                    impBLCost = 1;
                    if (oImportsBLCosts != null)
                    {
                        foreach (ImportsBLCost item in oImportsBLCosts)
                        {
                            ImportsCostElement oImportsCostElement = new ImportsCostElement();
                            oImportsCostElement.Icet_seq_no = item.Ibcs_seq_no;
                            oImportsCostElement.Icet_line = impBLCost;
                            oImportsCostElement.Icet_doc_no = item.Ibcs_doc_no.Trim();
                            oImportsCostElement.Icet_stus = 1;
                            oImportsCostElement.Icet_ele_cat = item.Ibcs_ele_cat;
                            oImportsCostElement.Icet_ele_tp = item.Ibcs_ele_tp;
                            oImportsCostElement.Icet_ele_cd = item.Ibcs_ele_cd;
                            oImportsCostElement.Icet_ele_rt = item.Ibcs_amt * oHeader.Ib_ex_rt;
                            // oImportsCostElement.Icet_pre_rt = item.Ibcs_amt;
                            oImportsCostElement.Icet_actl_rt = 0;
                            oImportsCostElement.Icet_finl_rt = 0;
                            oImportsCostElement.Icet_anal_1 = "";
                            oImportsCostElement.Icet_anal_2 = "";
                            oImportsCostElement.Icet_anal_3 = "";
                            oImportsCostElement.Icet_anal_4 = "";
                            oImportsCostElement.Icet_anal_5 = "";
                            oImportsCostElement.Icet_cre_by = item.Ibcs_cre_by;
                            oImportsCostElement.Icet_cre_dt = DateTime.Now;
                            oImportsCostElement.Icet_mod_by = item.Ibcs_cre_by;
                            oImportsCostElement.Icet_mod_dt = DateTime.Now;
                            oImportsCostElement.Icet_session_id = oHeader.Ib_session_id;
                            oImportsCostElements.Add(oImportsCostElement);
                            impBLCost++;
                        }
                    }

                    Decimal TotalCost = oImportsBLItems.Sum(x => x.Ibi_unit_rt * x.Ibi_qty);
                    TotalCost = TotalCost * oHeader.Ib_ex_rt;

                    //if (oImportsBLCosts != null)
                    //{
                    //    #region suneth
                    //    //foreach (ImportsBLCost oCostItem in oImportsBLCosts)
                    //    //{
                    //    //    impBLCost = 1;
                    //    //    foreach (ImportsBLItems oitem in oImportsBLItems)
                    //    //    {
                    //    //        ImportsCostElementItem oCostEleItem = new ImportsCostElementItem();
                    //    //        oCostEleItem.Ice_seq_no = oCostItem.Ibcs_seq_no;
                    //    //        oCostEleItem.Ice_line = impBLCost;
                    //    //        oCostEleItem.Ice_doc_no = oCostItem.Ibcs_doc_no;
                    //    //        oCostEleItem.Ice_ref_line = oitem.Ibi_line;
                    //    //        oCostEleItem.Ice_stus = oitem.Ibi_stus;
                    //    //        oCostEleItem.Ice_itm_cd = oitem.Ibi_itm_cd;
                    //    //        oCostEleItem.Ice_itm_stus = oitem.Ibi_itm_stus;
                    //    //        oCostEleItem.Ice_ele_cat = oCostItem.Ibcs_ele_cat;
                    //    //        oCostEleItem.Ice_ele_tp = oCostItem.Ibcs_ele_tp;
                    //    //        oCostEleItem.Ice_ele_cd = oCostItem.Ibcs_ele_cd;

                    //    //        oCostEleItem.Ice_ele_rt = GetElemetRate(oitem.Ibi_unit_rt, oitem.Ibi_qty, TotalCost, oCostItem.Ibcs_amt) * oHeader.Ib_ex_rt;
                    //    //        oCostEleItem.Ice_ele_amnt = oCostEleItem.Ice_ele_rt * oitem.Ibi_qty;

                    //    //        //oCostEleItem.Ice_pre_rt = oCostEleItem.Ice_ele_rt;
                    //    //        //oCostEleItem.Ice_pre_amnt = oCostEleItem.Ice_ele_amnt;

                    //    //        oCostEleItem.Ice_anal_1 = "";
                    //    //        oCostEleItem.Ice_anal_2 = "";
                    //    //        oCostEleItem.Ice_anal_3 = "";
                    //    //        oCostEleItem.Ice_anal_4 = "";
                    //    //        oCostEleItem.Ice_anal_5 = "";
                    //    //        oCostEleItem.Ice_cre_by = oitem.Ibi_cre_by;
                    //    //        oCostEleItem.Ice_cre_dt = DateTime.Now;
                    //    //        oCostEleItem.Ice_mod_by = oitem.Ibi_cre_by;
                    //    //        oCostEleItem.Ice_mod_dt = DateTime.Now;
                    //    //        oCostEleItem.Ice_session_id = oHeader.Ib_session_id;
                    //    //        oImportsCostElementItems.Add(oCostEleItem);
                    //    //        impBLCost++;
                    //    //    }
                    //    //}
                    //    #endregion
                    //    impBLCost = 1;
                    //    foreach (ImportsBLCost item in oImportsBLCosts)
                    //    {
                    //        ImportsCostElement oImportsCostElement = new ImportsCostElement();
                    //        oImportsCostElement.Icet_seq_no = oBLSeqNumber;
                    //        oImportsCostElement.Icet_line = impBLCost;
                    //        oImportsCostElement.Icet_doc_no = item.Ibcs_doc_no;
                    //        oImportsCostElement.Icet_stus = 1;
                    //        oImportsCostElement.Icet_ele_cat = item.Ibcs_ele_cat;
                    //        oImportsCostElement.Icet_ele_tp = item.Ibcs_ele_tp;
                    //        oImportsCostElement.Icet_ele_cd = item.Ibcs_ele_cd;
                    //        oImportsCostElement.Icet_ele_rt = item.Ibcs_amt;
                    //        oImportsCostElement.Icet_pre_rt = item.Ibcs_amt;
                    //        oImportsCostElement.Icet_actl_rt = 0;
                    //        oImportsCostElement.Icet_finl_rt = 0;
                    //        oImportsCostElement.Icet_anal_1 = "";
                    //        oImportsCostElement.Icet_anal_2 = "";
                    //        oImportsCostElement.Icet_anal_3 = "";
                    //        oImportsCostElement.Icet_anal_4 = "";
                    //        oImportsCostElement.Icet_anal_5 = "";
                    //        oImportsCostElement.Icet_cre_by = oHeader.Ib_mod_by;
                    //        oImportsCostElement.Icet_cre_dt = DateTime.Now;
                    //        oImportsCostElement.Icet_mod_by = oHeader.Ib_mod_by;
                    //        oImportsCostElement.Icet_mod_dt = DateTime.Now;
                    //        oImportsCostElement.Icet_session_id = oHeader.Ib_session_id;
                    //        oImportsCostElements.Add(oImportsCostElement);
                    //        impBLCost++;
                    //    }
                    //}
                    impBLCost = 1;
                    foreach (ImportsBLItems oitem in oImportsBLItems)
                    {
                        ImportsCostItem oImportsCostItem = new ImportsCostItem();
                        oImportsCostItem.Ici_seq_no = oitem.Ibi_seq_no;
                        oImportsCostItem.Ici_line = impBLCost;
                        oImportsCostItem.Ici_doc_no = oitem.Ibi_doc_no.Trim();
                        oImportsCostItem.Ici_ref_line = oitem.Ibi_line;
                        oImportsCostItem.Ici_stus = oitem.Ibi_stus;
                        oImportsCostItem.Ici_itm_cd = oitem.Ibi_itm_cd;
                        oImportsCostItem.Ici_itm_stus = oitem.Ibi_itm_stus;
                        oImportsCostItem.Ici_qty = oitem.Ibi_qty;
                        //oImportsCostItem.Ici_unit_rt = oitem.Ibi_tp == "F" ? 0 : oitem.Ibi_unit_rt * oHeader.Ib_ex_rt;
                        oImportsCostItem.Ici_unit_rt = oitem.Ibi_unit_rt * oHeader.Ib_ex_rt;
                        // oImportsCostItem.Ici_unit_amt = oitem.Ibi_tp == "F" ? 0 : oitem.Ibi_qty * oitem.Ibi_unit_rt;
                        oImportsCostItem.Ici_unit_amt = oitem.Ibi_qty * oitem.Ibi_unit_rt;
                        oImportsCostItem.Ici_pre_rt = 0;
                        oImportsCostItem.Ici_pre_amt = 0;
                        oImportsCostItem.Ici_actl_rt = 0;
                        oImportsCostItem.Ici_actl_amt = 0;
                        oImportsCostItem.Ici_finl_rt = 0;
                        oImportsCostItem.Ici_finl_amt = 0;
                        oImportsCostItem.Ici_anal_1 = "";
                        oImportsCostItem.Ici_anal_2 = "";
                        oImportsCostItem.Ici_anal_3 = "";
                        oImportsCostItem.Ici_anal_4 = "";
                        oImportsCostItem.Ici_anal_5 = "";
                        oImportsCostItem.Ici_cre_by = oHeader.Ib_cre_by;
                        oImportsCostItem.Ici_cre_dt = DateTime.Now;
                        oImportsCostItem.Ici_mod_by = oHeader.Ib_cre_by;
                        oImportsCostItem.Ici_mod_dt = DateTime.Now;
                        oImportsCostItem.Ici_session_id = oHeader.Ib_session_id;
                        oCostItems.Add(oImportsCostItem);
                        impBLCost++;
                    }

                    foreach (ImportsCostItem oCostItem in oCostItems)
                    {
                        oCostItem.Ici_seq_no = seqNumber;
                        result = _financialDAL.SAVE_IMP_CST_ITM_NEW(oCostItem);
                    }

                    foreach (ImportsCostElement oImportsCostElement in oImportsCostElements)
                    {
                        string sts;
                        oImportsCostElement.Icet_seq_no = seqNumber;
                        result = _financialDAL.SAVE_IMP_CST_ELE_WEB_NEW(oImportsCostElement, out sts);
                    }
                }
                _inventoryDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                Error = ex.Message;
                _inventoryDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
            }
            return result;
        }

        //Tharaka 2015-07-14
        public Int32 UpdateBillOfLading(ImportsBLHeader oHeader, List<ImportsBLItems> oImportsBLItems, List<ImportsBLSInvoice> OImportsBLSInvoice, List<ImportsBLContainer> oImportsBLContainers, List<ImportsBLCost> oImportsBLCosts, MasterAutoNumber _masterAuto, bool isNewRecord, out String Error, out String BLNumber)
        {
            Int32 result = 0;
            Error = string.Empty;
            BLNumber = string.Empty;
            Int32 oBLSeqNumber = 0;
            Int32 _costSheetSeq = 0;
            String oBLDocnumber = string.Empty;

            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                //Update Header
                oBLDocnumber = oHeader.Ib_doc_no;
                result = _financialDAL.SaveBLHeader(oHeader, out oBLSeqNumber);
                ImportsCostHeader oImportsCostHeader = _financialDAL.GET_IMP_CST_HDR_BY_DOC(oBLDocnumber, "I");
                result = _financialDAL.SAVE_IMP_CST_HDR(oImportsCostHeader, out _costSheetSeq);

                BLNumber = oHeader.Ib_doc_no;

                _financialDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();

                if (result > 0)
                {
                    foreach (ImportsBLItems oitem in oImportsBLItems)
                    {
                        string status;
                        if (oitem.isNewItem == 1)
                        {
                            oitem.Ibi_doc_no = oHeader.Ib_doc_no;
                            oitem.Ibi_seq_no = oHeader.Ib_seq_no;
                            oitem.Ibi_stus = 1;
                            oitem.Ibi_pi_no = string.Empty;
                            oitem.Ibi_pi_line = 0;
                            result = _financialDAL.UPDATE_IMPBL_ITMS(oitem, out status);
                            // result = _financialDAL.SaveBLItems(oitem);
                        }
                        else
                        {
                            //if (oitem.isRecordStatus == 1)
                            {
                                //Lakshan to new  2016/03/09
                                result = _financialDAL.UPDATE_IMPBL_ITMS_NEW(oitem, out status);
                            }
                        }
                    }


                    foreach (ImportsBLContainer item in oImportsBLContainers)
                    {
                        item.Ibc_seq_no = oBLSeqNumber;
                        item.Ibc_doc_no = oBLDocnumber;
                        item.Ibc_cre_by = oHeader.Ib_mod_by;
                        result = _financialDAL.SAVE_IMP_BL_CONTNR(item);
                    }

                    foreach (ImportsBLSInvoice item in OImportsBLSInvoice)
                    {
                        item.Ibs_seq_no = oBLSeqNumber;
                        item.Ibs_doc_no = oBLDocnumber;
                        item.Ibs_cre_by = oHeader.Ib_mod_by;
                        result = _financialDAL.SAVE_IMP_BL_SI(item);
                    }

                    result = _financialDAL.DEL_BL_COST(oHeader.Ib_seq_no);

                    Int32 lineNUm = 1;
                    //Cost sheet update process

                    //Inactive All Cost records
                    result = _financialDAL.INACTIVE_IMP_COST(oImportsCostHeader.Ich_seq_no);

                    foreach (ImportsBLCost item in oImportsBLCosts)
                    {
                        item.Ibcs_seq_no = oBLSeqNumber;
                        item.Ibcs_doc_no = oBLDocnumber;
                        item.Ibcs_cre_by = oHeader.Ib_mod_by;
                        result = _financialDAL.SAVE_IMP_BL_COST_NEW(item);
                    }





                    List<ImportsCostItem> oCostItems = new List<ImportsCostItem>();
                    List<ImportsCostElement> oImportsCostElements = new List<ImportsCostElement>();
                    List<ImportsCostElementItem> oImportsCostElementItems = new List<ImportsCostElementItem>();

                    foreach (ImportsBLCost item in oImportsBLCosts)
                    {
                        ImportsCostElement oImportsCostElement = new ImportsCostElement();
                        oImportsCostElement.Icet_seq_no = item.Ibcs_seq_no;
                        oImportsCostElement.Icet_line = 0;
                        oImportsCostElement.Icet_doc_no = item.Ibcs_doc_no.Trim();
                        oImportsCostElement.Icet_stus = 1;
                        oImportsCostElement.Icet_ele_cat = item.Ibcs_ele_cat;
                        oImportsCostElement.Icet_ele_tp = item.Ibcs_ele_tp;
                        oImportsCostElement.Icet_ele_cd = item.Ibcs_ele_cd;
                        oImportsCostElement.Icet_ele_rt = item.Ibcs_amt;
                        oImportsCostElement.Icet_pre_rt = item.Ibcs_amt;
                        oImportsCostElement.Icet_actl_rt = 0;
                        oImportsCostElement.Icet_finl_rt = 0;
                        oImportsCostElement.Icet_anal_1 = "";
                        oImportsCostElement.Icet_anal_2 = "";
                        oImportsCostElement.Icet_anal_3 = "";
                        oImportsCostElement.Icet_anal_4 = "";
                        oImportsCostElement.Icet_anal_5 = "";
                        oImportsCostElement.Icet_cre_by = item.Ibcs_cre_by;
                        oImportsCostElement.Icet_cre_dt = DateTime.Now;
                        oImportsCostElement.Icet_mod_by = item.Ibcs_cre_by;
                        oImportsCostElement.Icet_mod_dt = DateTime.Now;
                        oImportsCostElement.Icet_session_id = oHeader.Ib_session_id;
                        oImportsCostElements.Add(oImportsCostElement);
                    }

                    Decimal TotalCost = oImportsBLItems.Sum(x => x.Ibi_unit_rt * x.Ibi_qty);

                    foreach (ImportsBLCost oCostItem in oImportsBLCosts)
                    {
                        foreach (ImportsBLItems oitem in oImportsBLItems)
                        {

                            Decimal ConstValue = (oitem.Ibi_unit_rt * oitem.Ibi_bal_qty) / TotalCost;
                            Decimal ElementRate = (ConstValue * oCostItem.Ibcs_amt) / oitem.Ibi_qty;

                            ImportsCostElementItem oCostEleItem = new ImportsCostElementItem();
                            oCostEleItem.Ice_seq_no = oCostItem.Ibcs_seq_no;
                            oCostEleItem.Ice_line = 0;
                            oCostEleItem.Ice_doc_no = oitem.Ibi_doc_no;
                            oCostEleItem.Ice_ref_line = oitem.Ibi_line;
                            oCostEleItem.Ice_stus = oitem.Ibi_stus;
                            oCostEleItem.Ice_itm_cd = oitem.Ibi_itm_cd;
                            oCostEleItem.Ice_itm_stus = oitem.Ibi_itm_stus;
                            oCostEleItem.Ice_ele_cat = oCostItem.Ibcs_ele_cat;
                            oCostEleItem.Ice_ele_tp = oCostItem.Ibcs_ele_tp;
                            oCostEleItem.Ice_ele_cd = oCostItem.Ibcs_ele_cd;

                            //oCostEleItem.Ice_ele_rt = ElementRate;
                            //oCostEleItem.Ice_ele_amnt = ElementRate * oitem.Ibi_qty;

                            oCostEleItem.Ice_ele_rt = GetElemetRate(oitem.Ibi_unit_rt, oitem.Ibi_qty, TotalCost, oCostItem.Ibcs_amt);
                            oCostEleItem.Ice_ele_amnt = oCostEleItem.Ice_ele_rt * oitem.Ibi_qty;

                            oCostEleItem.Ice_pre_rt = oCostEleItem.Ice_ele_rt;
                            oCostEleItem.Ice_pre_amnt = oCostEleItem.Ice_ele_amnt;

                            oCostEleItem.Ice_anal_1 = "";
                            oCostEleItem.Ice_anal_2 = "";
                            oCostEleItem.Ice_anal_3 = "";
                            oCostEleItem.Ice_anal_4 = "";
                            oCostEleItem.Ice_anal_5 = "";
                            oCostEleItem.Ice_cre_by = oitem.Ibi_cre_by;
                            oCostEleItem.Ice_cre_dt = DateTime.Now;
                            oCostEleItem.Ice_mod_by = oitem.Ibi_cre_by;
                            oCostEleItem.Ice_mod_dt = DateTime.Now;
                            oCostEleItem.Ice_session_id = oHeader.Ib_session_id;
                            oImportsCostElementItems.Add(oCostEleItem);
                        }
                    }

                    foreach (ImportsBLItems oitem in oImportsBLItems)
                    {
                        ImportsCostItem oImportsCostItem = new ImportsCostItem();
                        oImportsCostItem.Ici_seq_no = oitem.Ibi_seq_no;
                        oImportsCostItem.Ici_line = 0;
                        oImportsCostItem.Ici_doc_no = oitem.Ibi_doc_no;
                        oImportsCostItem.Ici_ref_line = oitem.Ibi_line;
                        oImportsCostItem.Ici_stus = oitem.Ibi_stus;
                        oImportsCostItem.Ici_itm_cd = oitem.Ibi_itm_cd;
                        oImportsCostItem.Ici_itm_stus = oitem.Ibi_itm_stus;
                        oImportsCostItem.Ici_qty = oitem.Ibi_qty;
                        oImportsCostItem.Ici_unit_rt = oitem.Ibi_unit_rt;
                        oImportsCostItem.Ici_unit_amt = oitem.Ibi_qty * oitem.Ibi_unit_rt;
                        oImportsCostItem.Ici_pre_rt = 0;
                        oImportsCostItem.Ici_pre_amt = 0;
                        oImportsCostItem.Ici_actl_rt = 0;
                        oImportsCostItem.Ici_actl_amt = 0;
                        oImportsCostItem.Ici_finl_rt = 0;
                        oImportsCostItem.Ici_finl_amt = 0;
                        oImportsCostItem.Ici_anal_1 = "";
                        oImportsCostItem.Ici_anal_2 = "";
                        oImportsCostItem.Ici_anal_3 = "";
                        oImportsCostItem.Ici_anal_4 = "";
                        oImportsCostItem.Ici_anal_5 = "";
                        oImportsCostItem.Ici_cre_by = oHeader.Ib_cre_by;
                        oImportsCostItem.Ici_cre_dt = DateTime.Now;
                        oImportsCostItem.Ici_mod_by = oHeader.Ib_cre_by;
                        oImportsCostItem.Ici_mod_dt = DateTime.Now;
                        oImportsCostItem.Ici_session_id = oHeader.Ib_session_id;
                        oCostItems.Add(oImportsCostItem);
                    }

                    result = ImportsCostDetailsProcess(_financialDAL, oImportsCostHeader, oCostItems, oImportsCostElements,
                        oImportsCostElementItems, isNewRecord, out Error);
                }
                _inventoryDAL.TransactionCommit();
                _financialDAL.TransactionCommit();

                // _inventoryDAL.TransactionRollback();
                //   _financialDAL.TransactionRollback();
            }
            catch (Exception ex)
            {
                result = -1;
                Error = ex.Message;
                _inventoryDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
            }
            return result;
        }

        //Tharaka 2015-07-13
        public ImportsBLHeader GET_BL_HEADER_BY_DOC(String Com, String doc, String stats)
        {
            _financialDAL = new FinancialDAL();
            _generalDAL = new GeneralDAL(); //add by Chamal 18-Dec-2015
            _salesDAL = new SalesDAL();

            ImportsBLHeader _impBLHdr = _financialDAL.GET_BL_HEADER_BY_DOC(Com, doc, stats);
            if (_impBLHdr != null)
            {
                DataTable _comdt = _generalDAL.CheckCompany(_impBLHdr.Ib_consi_cd);
                if (_comdt != null && _comdt.Rows.Count > 0)
                {
                    _impBLHdr.ConsigneeTin = _comdt.Rows[0]["MC_TAX4"].ToString();
                    _impBLHdr.ConsigneeName = _comdt.Rows[0]["MC_DESC"].ToString();
                    _impBLHdr.ConsigneeAddress = _comdt.Rows[0]["MC_ADD1"].ToString() + _comdt.Rows[0]["MC_ADD2"].ToString();
                    _impBLHdr.ConsigneeCurrencyCode = _comdt.Rows[0]["MC_CUR_CD"].ToString();
                    _impBLHdr.CountryCode = _comdt.Rows[0]["MC_ANAL19"].ToString();

                }
                _comdt = null;
                //_comdt = _generalDAL.CheckCompany(_impBLHdr.Ib_decl_cd);
                //if (_comdt != null && _comdt.Rows.Count > 0)
                //{
                //    _impBLHdr.DeclarantCode = _impBLHdr.Ib_decl_cd;
                //    _impBLHdr.DeclarantTin = _comdt.Rows[0]["MC_TAX4"].ToString();
                //    _impBLHdr.DeclarantName = _comdt.Rows[0]["MC_DESC"].ToString();
                //    _impBLHdr.DeclarantAddress = _comdt.Rows[0]["MC_ADD1"].ToString() + _comdt.Rows[0]["MC_ADD2"].ToString();
                //}
                //_comdt = null;
                MasterBusinessEntity _suppMst = _salesDAL.GetBusinessCompanyDetail(Com, _impBLHdr.Ib_decl_cd, string.Empty, string.Empty, "D");
                _impBLHdr.DeclarantCode = _impBLHdr.Ib_decl_cd;
                _impBLHdr.DeclarantTin = _suppMst.Mbe_oth_id_no;
                _impBLHdr.DeclarantName = _suppMst.Mbe_name;
                _impBLHdr.DeclarantAddress = _suppMst.Mbe_add1 + _suppMst.Mbe_add2;
                _suppMst = null;
                _suppMst = _salesDAL.GetBusinessCompanyDetail(Com, _impBLHdr.Ib_supp_cd, string.Empty, string.Empty, "S");
                _impBLHdr.ExporterTin = _suppMst.Mbe_oth_id_no;
                _impBLHdr.ExporterName = _suppMst.Mbe_name;
                _impBLHdr.ExporterAddress = _suppMst.Mbe_add1 + _suppMst.Mbe_add2;

                _comdt = _salesDAL.GetCountryDetails(_impBLHdr.Ib_expo_cnty);
                if (_comdt != null && _comdt.Rows.Count > 0) _impBLHdr.ExpCntyName = _comdt.Rows[0]["MCU_DESC"].ToString();
                _comdt = null;
                _comdt = _salesDAL.GetCountryDetails(_impBLHdr.Ib_origin_cnty);
                if (_comdt != null && _comdt.Rows.Count > 0) _impBLHdr.OriginCntyName = _comdt.Rows[0]["MCU_DESC"].ToString();
                _comdt = null;
                _comdt = _salesDAL.GetCountryDetails(_impBLHdr.Ib_desti_cnty);
                if (_comdt != null && _comdt.Rows.Count > 0) _impBLHdr.DestiCntyName = _comdt.Rows[0]["MCU_DESC"].ToString();
                _comdt = null;
                _comdt = _financialDAL.GetExchangeRate(_impBLHdr.Ib_com, _impBLHdr.Ib_cur_cd, _impBLHdr.ConsigneeCurrencyCode);
                if (_comdt != null && _comdt.Rows.Count > 0) _impBLHdr.Ib_ex_rt = Convert.ToDecimal(_comdt.Rows[0][5].ToString());
            }

            return _impBLHdr;
        }

        //Chamal 24-Dec-2015
        public int GetBLData(string _company, string _blNo, out ImpCusdecHdr _custHdr, out List<ImpCusdecItm> _custItems, out List<ImpCusdecCost> _custCost, out List<ImportsBLContainer> _custContainer, out string _msg)
        {
            ImpCusdecHdr custHdr = new ImpCusdecHdr();
            List<ImpCusdecItm> custItems = new List<ImpCusdecItm>();
            List<ImpCusdecCost> custCost = new List<ImpCusdecCost>();
            List<ImportsBLContainer> blContainers = new List<ImportsBLContainer>();
            string msg = string.Empty;
            try
            {
                _financialDAL = new FinancialDAL();
                //_generalDAL = new GeneralDAL(); 
                _salesDAL = new SalesDAL();
                ImportsBLHeader _impBLHdr = GET_BL_HEADER_BY_DOC(_company, _blNo, "A");
                if (_impBLHdr != null)
                {
                    if (_impBLHdr.Ib_is_cusdec == 1)
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "Already cusdec processed! - Bond No : " + _impBLHdr.Ib_ref_no;
                        return 0;
                    }


                    //Add by Chamal in Subo Mechine 24/04/2017
                    if (_impBLHdr.Ib_clear_pty == true)
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "You can't proceed that shipment, Because this was cleared by out side party!";
                        return 0;
                    }

                    custHdr.CUH_ACC_NO = "";
                    custHdr.CUH_BANK_BRANCH = "";
                    custHdr.CUH_BANK_CD = "";
                    custHdr.CUH_BANK_NAME = "";
                    custHdr.CUH_BANK_REF_CD = "";

                    custHdr.CUH_BL_NO = _impBLHdr.Ib_bl_no;
                    custHdr.CUH_CITY_OF_LAST_CONSIGNEE = "CITY_OF_LAST_CONSIGNEE";
                    custHdr.CUH_CNTY = _impBLHdr.CountryCode;
                    custHdr.CUH_CNTY_OF_DESTINATION = _impBLHdr.Ib_desti_cnty;
                    custHdr.CUH_CNTY_OF_EXPORT = _impBLHdr.Ib_expo_cnty;
                    custHdr.CUH_CNTY_OF_ORIGIN = _impBLHdr.Ib_origin_cnty;
                    custHdr.CUH_COM = _impBLHdr.Ib_com;
                    custHdr.CUH_CONSI_CD = _impBLHdr.Ib_consi_cd;
                    custHdr.CUH_CONSI_NAME = _impBLHdr.ConsigneeName;
                    custHdr.CUH_CONSI_TIN = _impBLHdr.ConsigneeTin;
                    custHdr.CUH_CONSI_ADDR = _impBLHdr.ConsigneeAddress;
                    custHdr.CUH_CONTAINER_FCL = "";
                    custHdr.CUH_CUR_CD = _impBLHdr.Ib_cur_cd;
                    custHdr.CUH_CUSDEC_ENTRY_NO = _impBLHdr.Ib_cusdec_entryno;
                    custHdr.CUH_DECL_ADDR = _impBLHdr.DeclarantAddress;
                    custHdr.CUH_DECL_CD = _impBLHdr.DeclarantCode;
                    custHdr.CUH_DECL_NAME = _impBLHdr.DeclarantName;
                    custHdr.CUH_DECL_TIN = _impBLHdr.DeclarantTin;
                    custHdr.CUH_DELIVERY_TERMS = _impBLHdr.Ib_anal_1;
                    custHdr.CUH_DESTI_CNTY_NAME = _impBLHdr.DestiCntyName;
                    custHdr.CUH_DOC_NO = _blNo;
                    custHdr.CUH_EX_RT = _impBLHdr.Ib_ex_rt;
                    custHdr.CUH_EXP_CNTY_NAME = _impBLHdr.ExpCntyName;
                    custHdr.CUH_FCL = _impBLHdr.Ib_carry_tp;
                    custHdr.CUH_FIN_DOC_NO = string.Empty;
                    custHdr.CUH_ITEMS_QTY = 0;
                    custHdr.CUH_LISION_NO = "";
                    custHdr.CUH_ORIGIN_CNTY_NAME = _impBLHdr.OriginCntyName;
                    custHdr.CUH_PLACE_OF_LOADING = _impBLHdr.Ib_loading_place;
                    custHdr.CUH_SBU = _impBLHdr.Ib_sbu;
                    custHdr.CUH_SUPP_ADDR = _impBLHdr.ExporterAddress;
                    custHdr.CUH_SUPP_CD = _impBLHdr.Ib_supp_cd;
                    custHdr.CUH_SUPP_NAME = _impBLHdr.ExporterName;
                    custHdr.CUH_SUPP_TIN = _impBLHdr.ExporterTin;
                    custHdr.CUH_TERMS_OF_PAYMENT = _impBLHdr.Ib_anal_1;
                    custHdr.CUH_TOT_AMT = _impBLHdr.Ib_tot_bl_amt;
                    custHdr.CUH_TOT_PKG = _impBLHdr.Ib_tot_pkg;
                    custHdr.CUH_TOT_PKG_UNIT = _impBLHdr.Ib_anal_2;
                    custHdr.CUH_TRADING_COUNTRY = "";
                    custHdr.CUH_VESSEL = _impBLHdr.Ib_vessel_no;
                    custHdr.CUH_VOYAGE = _impBLHdr.Ib_voyage;
                    custHdr.CUH_VOYAGE_DT = _impBLHdr.Ib_etd.Date;
                    custHdr.OwnCurrencyCode = _impBLHdr.ConsigneeCurrencyCode;
                    if (_impBLHdr.Ib_tot_foc == true)
                    {
                        custHdr.CUH_BANK_BRANCH = "000";
                        custHdr.CUH_BANK_CD = "9999";
                        custHdr.CUH_BANK_NAME = "Other Bank (Not Registered)";
                        custHdr.CUH_BANK_REF_CD = _impBLHdr.Ib_bl_ref_no.ToUpper().ToString(); //Edit by Chamal 05-Oct-2016, Lakshitha requested
                        custHdr.CUH_FILE_NO = _impBLHdr.Ib_bl_ref_no.ToUpper().ToString();
                        custHdr.CUH_TERMS_OF_PAYMENT = "FOC";
                        custHdr.CUH_CUSTOM_LC_TP = "90";
                    }
                    MasterExchangeRate _exRate = _salesDAL.GetExchangeRate(_company, custHdr.CUH_CUR_CD, DateTime.Now.Date, custHdr.OwnCurrencyCode, "WHARF");
                    if (_exRate != null)
                    {
                        custHdr.CUH_EX_RT = _exRate.Mer_cussel_rt;
                    }

                    List<ImportsBLItems> _impBLItems = _financialDAL.GET_BL_ITMS_BY_SEQ(_impBLHdr.Ib_seq_no);
                    if (_impBLItems != null && _impBLItems.Count > 0)
                    {
                        foreach (ImportsBLItems itm in _impBLItems)
                        {
                            ImpCusdecItm cItm = new ImpCusdecItm();
                            cItm.Cui_line = itm.Ibi_line;
                            cItm.Cui_itm_cd = itm.Ibi_itm_cd;
                            cItm.Cui_model = itm.Ibi_model;
                            cItm.Cui_itm_desc = itm.MI_SHORTDESC;
                            cItm.Cui_hs_cd = itm.Ibi_hs_cd;
                            cItm.Cui_bl_unit_rt = itm.Ibi_unit_rt;
                            cItm.Cui_pi_unit_rt = itm.Ibi_pi_unit_rt;
                            cItm.Cui_pi_no = itm.Ibi_pi_no;
                            cItm.Cui_pi_line = itm.Ibi_pi_line;
                            cItm.Cui_qty = itm.Ibi_qty;
                            cItm.Cui_tag = itm.Ibi_tag;
                            cItm.Cui_tp = itm.Ibi_tp;
                            cItm.Cui_itm_stus = itm.Ibi_itm_stus;
                            cItm.Cui_itm_price = itm.Ibi_unit_rt;
                            cItm.Cui_unit_rt = itm.Ibi_unit_rt;
                            cItm.Cui_unit_amt = itm.Ibi_qty * itm.Ibi_unit_rt;

                            //bind cat desc
                            string cat1 = _financialDAL.GetSIItemCat1(itm.Ibi_itm_cd);
                            string cat2 = _financialDAL.GetSIItemCat2(itm.Ibi_itm_cd);

                            //get hs codes
                            if (cItm.Cui_hs_cd == null || cItm.Cui_hs_cd == "" || cItm.Cui_hs_cd == "NULL" || cItm.Cui_hs_cd == "null")
                            {
                                //GetModelHScode
                                string hs = _financialDAL.GetModelHScode(itm.Ibi_model);
                                cItm.Cui_hs_cd = hs;
                            }

                            cItm.ItemCat1 = cat1;
                            cItm.ItemCat2 = cat2;

                            Decimal _mass = 0;
                            if (!string.IsNullOrEmpty(itm.Ibi_anal_2.ToString()))
                            {
                                if (!Decimal.TryParse(itm.Ibi_anal_2.ToString(), out _mass))
                                {
                                }
                                cItm.Cui_gross_mass = _mass;
                            }
                            if (!string.IsNullOrEmpty(itm.Ibi_anal_3.ToString()))
                            {
                                if (!Decimal.TryParse(itm.Ibi_anal_3.ToString(), out _mass))
                                {
                                }
                                cItm.Cui_net_mass = _mass;
                            }
                            custItems.Add(cItm);
                            if (string.IsNullOrEmpty(custHdr.CUH_FIN_DOC_NO)) custHdr.CUH_FIN_DOC_NO = itm.Ibi_fin_no;
                        }
                    }

                    List<ImportsBLSInvoice> _impBLSI = _financialDAL.GET_IMP_BL_SI_BY_SEQ(_impBLHdr.Ib_seq_no);
                    if (_impBLSI != null && _impBLSI.Count > 0)
                    {
                        foreach (ImportsBLSInvoice itm in _impBLSI)
                        {
                            custHdr.CUH_REF_NO = itm.Ibs_si_no;
                            break;
                        }
                    }

                    Order_Financing _lcHdr = _financialDAL.GET_IMP_FIN_HDR_BY_DOC(_company, custHdr.CUH_FIN_DOC_NO);
                    if (_lcHdr != null)
                    {
                        custHdr.CUH_BANK_BRANCH = _lcHdr.If_anal_1;
                        custHdr.CUH_BANK_CD = _lcHdr.If_bank_cd;

                        List<MasterOutsideParty> _banks = _financialDAL.GetBusCom("BANK");
                        if (_banks != null)
                        {
                            MasterOutsideParty _bank = _banks.FindAll(x => x.Mbi_country_cd == custHdr.CUH_CNTY && x.Mbi_cd == custHdr.CUH_BANK_CD)[0];
                            if (_bank != null) { custHdr.CUH_BANK_NAME = _bank.Mbi_desc; }
                        }
                        string _shipmentSeq = "";
                        if (_impBLHdr.Ib_si_seq_no > 0) _shipmentSeq = "-" + _impBLHdr.Ib_si_seq_no.ToString();
                        custHdr.CUH_BANK_REF_CD = _lcHdr.If_ref_no + _shipmentSeq; //Financial Document No (Bank LC No)
                        custHdr.CUH_FILE_NO = _lcHdr.If_file_no + _shipmentSeq;
                        custHdr.CUH_TERMS_OF_PAYMENT = _lcHdr.If_tp;
                        List<ImportCostType> _costTypes = _financialDAL.GET_MST_COST_TP("IPM");
                        if (_costTypes != null)
                        {
                            ImportCostType _costType = _costTypes.FindAll(x => x.Mcat_cd == _lcHdr.If_tp)[0];
                            custHdr.CUH_CUSTOM_LC_TP = _costType.Mcat_oth_cd;
                        }
                    }

                    blContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_SEQ(_impBLHdr.Ib_seq_no);
                    List<ImportsBLCost> _impBLCost = _financialDAL.GET_IMP_BL_COST_BY_SEQ(_impBLHdr.Ib_seq_no);
                    if (_impBLCost != null && _impBLCost.Count > 0)
                    {
                        foreach (ImportsBLCost itm in _impBLCost)
                        {
                            ImpCusdecCost cCost = new ImpCusdecCost();
                            cCost.Cus_act = 1;
                            cCost.Cus_amt = itm.Ibcs_amt;
                            cCost.Cus_amt_com = itm.Ibcs_amt * custHdr.CUH_EX_RT;
                            cCost.Cus_ele_cat = itm.Ibcs_ele_cat;
                            cCost.Cus_ele_tp = itm.Ibcs_ele_tp;
                            cCost.Cus_ele_cd = itm.Ibcs_ele_cd;
                            cCost.Cus_line = itm.Ibcs_line;
                            if (cCost.Cus_ele_cd == "COST")
                            {
                                cCost.Cus_amt = _impBLItems.Sum(x => x.Ibi_qty * x.Ibi_unit_rt);
                                cCost.Cus_ele_cd_name = "Cost";
                                cCost.Cus_line = 1;
                            }
                            if (cCost.Cus_ele_cd == "FRGT")
                            { cCost.Cus_ele_cd_name = "Freight"; cCost.Cus_line = 2; }
                            if (cCost.Cus_ele_cd == "INSU")
                            { cCost.Cus_ele_cd_name = "Insurance"; cCost.Cus_line = 3; }
                            if (cCost.Cus_ele_cd == "OTH")
                            { cCost.Cus_ele_cd_name = "Other"; cCost.Cus_line = 4; }
                            custCost.Add(cCost);
                        }

                    }

                    ImportsBLCost oFindEle = _impBLCost.Find(x => x.Ibcs_ele_cd == "FRGT");
                    if (oFindEle == null || oFindEle.Ibcs_ele_cd == "")
                    {
                        ImpCusdecCost cCost = new ImpCusdecCost();
                        cCost.Cus_act = 1;
                        cCost.Cus_amt = 0;
                        cCost.Cus_amt_com = 0;
                        cCost.Cus_ele_cat = "TOT";
                        cCost.Cus_ele_tp = "CIF";
                        cCost.Cus_ele_cd = "FRGT";
                        cCost.Cus_ele_cd_name = "Freight";
                        cCost.Cus_line = 2;
                        custCost.Add(cCost);
                    }
                    oFindEle = new ImportsBLCost();
                    oFindEle = _impBLCost.Find(x => x.Ibcs_ele_cd == "INSU");
                    if (oFindEle == null || oFindEle.Ibcs_ele_cd == "")
                    {
                        ImpCusdecCost cCost = new ImpCusdecCost();
                        cCost.Cus_act = 1;
                        cCost.Cus_amt = 0;
                        cCost.Cus_amt_com = 0;
                        cCost.Cus_ele_cat = "TOT";
                        cCost.Cus_ele_tp = "CIF";
                        cCost.Cus_ele_cd = "INSU";
                        cCost.Cus_ele_cd_name = "Insurance";
                        cCost.Cus_line = 3;
                        custCost.Add(cCost);
                    }
                    oFindEle = new ImportsBLCost();
                    oFindEle = _impBLCost.Find(x => x.Ibcs_ele_cd == "OTH");
                    if (oFindEle == null || oFindEle.Ibcs_ele_cd == "")
                    {
                        ImpCusdecCost cCost = new ImpCusdecCost();
                        cCost.Cus_act = 1;
                        cCost.Cus_amt = 0;
                        cCost.Cus_amt_com = 0;
                        cCost.Cus_ele_cat = "TOT";
                        cCost.Cus_ele_tp = "CIF";
                        cCost.Cus_ele_cd = "OTH";
                        cCost.Cus_ele_cd_name = "Other";
                        cCost.Cus_line = 4;
                        custCost.Add(cCost);
                    }

                    custHdr.CUH_TOT_AMT = custCost.Sum(x => x.Cus_amt);

                    _custHdr = custHdr;
                    _custItems = custItems;
                    _custCost = custCost;
                    _custContainer = blContainers;
                    _msg = msg;
                    return 1;
                }
                else
                {
                    _custHdr = null;
                    _custItems = null;
                    _custCost = null;
                    _custContainer = null;
                    _msg = "Invalid document no";
                    return 0;
                }
            }
            catch (Exception ex)
            {
                _custHdr = null;
                _custItems = null;
                _custCost = null;
                _custContainer = null;
                _msg = ex.Message.ToString();
                return -1;
            }
        }

        //Tharaka 2015-07-13
        public List<ImportsBLItems> GET_BL_ITMS_BY_SEQ(Int32 Seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_BL_ITMS_BY_SEQ(Seq);
        }

        //Tharaka 2015-07-14
        public List<ImportsBLSInvoice> GET_IMP_BL_SI_BY_SEQ(Int32 Seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_BL_SI_BY_SEQ(Seq);
        }

        //Tharaka 2015-07-14
        public List<ImportsBLContainer> GET_IMP_BL_CONTNR_BY_SEQ(Int32 Seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_BL_CONTNR_BY_SEQ(Seq);
        }

        //Tharaka 2015-07-15
        public List<ImportsBLCost> GET_IMP_BL_COST_BY_SEQ(Int32 Seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_BL_COST_BY_SEQ(Seq);
        }

        //Tharaka 2015-07-15
        public Int32 UPDATE_IMP_BL_STUS(String User, String Status, Int32 Seq, string sessionID, out String err)
        {
            Int32 result = 0;
            err = string.Empty;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.UPDATE_IMP_BL_STUS(User, Status, Seq);

                if (Status == "C")
                {
                    List<ImportsBLItems> oImportsBLItemss = _financialDAL.GET_BL_ITMS_BY_SEQ(Seq);
                    foreach (ImportsBLItems item in oImportsBLItemss)
                    {
                        List<ImportPIDetails> oImportPIDetailss = _financialDAL.GET_IMP_PIITEM(item.Ibi_pi_no);
                        ImportPIDetails oPIItemToUpdate = oImportPIDetailss.Find(x => x.IPI_ITM_CD == item.Ibi_itm_cd && x.IPI_ITM_STUS == item.Ibi_itm_stus && x.IPI_MODEL == item.Ibi_model);
                        if (oPIItemToUpdate != null)
                        {
                            result = _financialDAL.UPDATE_BAL_QTY_BY_BL(oPIItemToUpdate.IPI_PI_NO, oPIItemToUpdate.IPI_LINE, -item.Ibi_qty, sessionID, User);
                        }
                    }
                }

                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;
                _financialDAL.TransactionRollback();
            }
            return result;
        }

        public Int32 UpdatePRNStatus(IntReq PRNHeader)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.UpdatePRNStatus(PRNHeader);
        }

        public Int32 UpdateStatus_QUO_HDR(String no, String stus, String mod_by, DateTime mod_when, out String err)
        {
            Int32 result = 0;
            err = string.Empty;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.UpdateStatus_QUO_HDR(no, stus, mod_by, mod_when);

                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;
                _financialDAL.TransactionRollback();
            }
            return result;
        }

        public Int32 Update_QUO(QuotationHeader qh, List<QoutationDetails> det_line_list, out String err)
        {
            Int32 result = 0;
            Int32 effect_ = 0;
            err = string.Empty;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                effect_ = _financialDAL.Update_QUO_HDR(qh);
                if (effect_ == 1)
                    result = _financialDAL.Update_QuotationDET(det_line_list);

                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;
                _financialDAL.TransactionRollback();
            }
            return result;
        }

        //Tharaka 2015-07-23
        public Int32 ImportsCostDetailsProcess(FinancialDAL oFinancialDAL, ImportsCostHeader oCostHeader, List<ImportsCostItem> oCostItems, List<ImportsCostElement> oImportsCostElements, List<ImportsCostElementItem> oImportsCostElementItems, bool isNew, out string err)
        {
            Int32 result = 0;
            Int32 seqNumber = 0;
            err = string.Empty;
            _financialDAL = oFinancialDAL;

            result = _financialDAL.SAVE_IMP_CST_HDR(oCostHeader, out seqNumber);

            foreach (ImportsCostItem oCostItem in oCostItems)
            {
                oCostItem.Ici_seq_no = seqNumber;
                // result = _financialDAL.SAVE_IMP_CST_ITM(oCostItem);
            }

            foreach (ImportsCostElement oImportsCostElement in oImportsCostElements)
            {
                string sts;
                oImportsCostElement.Icet_seq_no = seqNumber;
                //result = _financialDAL.SAVE_IMP_CST_ELE(oImportsCostElement, out sts);
            }
            foreach (ImportsCostElementItem oImportsCostElementItem in oImportsCostElementItems)
            {
                string sts;
                oImportsCostElementItem.Ice_seq_no = seqNumber;
                result = _financialDAL.SAVE_IMP_CST_ELE_ITM(oImportsCostElementItem, out sts);
            }


            return result;
        }

        //Tharaka 2015-07-23
        private decimal CalculateElementRate(decimal ItemAmount, decimal totalItemAmount, decimal CostEleRate)
        {
            decimal answer = 0;
            answer = (ItemAmount / totalItemAmount) * CostEleRate;
            return Math.Round(answer, 4);
        }

        private Decimal GetElemetRate(Decimal UnitAmount, Decimal Qty, Decimal TotalCOst, Decimal CostElementAmount)
        {
            decimal result = 0;

            //Decimal ConstValue = (oitem.Ibi_pi_unit_rt * oitem.Ibi_qty) / TotalCost;
            //Decimal ElementRate = (ConstValue * oCostItem.Ibcs_amt) / oitem.Ibi_qty;
            if (TotalCOst == 0 || Qty == 0)
            {
                return 0;
            }
            Decimal ConstValue = (UnitAmount * Qty) / TotalCOst;
            Decimal ElementRate = (ConstValue * CostElementAmount) / Qty;

            result = ElementRate;

            return result;
        }

        //Tharaka 2015-07-24
        public ImportsBLHeader GET_IMP_BL_BY_BL(String com, String BL)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_BL_BY_BL(com, BL);
        }

        //Tharaka 2015-07-27
        public List<ImportsCostHeader> GET_IMP_CST_HDR_FOR_CS(String com, String BL, String Bond, String Status, DateTime From, DateTime To, string bypass)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_CST_HDR_FOR_CS(com, BL, Bond, Status, From, To, bypass);
        }

        //Tharaka 2015-07-27
        public List<ImportsCostElement> GET_IMP_CST_ELE_BY_DOC(String BL)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_CST_ELE_BY_DOC(BL);
        }

        //Tharaka 2015-07-29
        public ImportsCostHeader GET_IMP_CST_HDR_BY_DOC(String Doc, String Type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_CST_HDR_BY_DOC(Doc, Type);
        }

        //Tharaka 2015-07-29
        public Int32 CostSheetApply(ImportsCostHeader oCostHeader, List<ImportsCostItem> oCostItems, List<ImportsCostElement> oImportsCostElements, List<ImportsCostElementItem> oImportsCostElementItems2, String User, String Com, String PC, String Loc, String Session, List<imp_cst_ele_ref> oEleReffItems, out string err)
        {
            Int32 result = 0;
            Int32 seqNumber = 0;
            err = string.Empty;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 CostSeqNum = 0;
                String DocNumber = string.Empty;
                /*
                 * 1. Get Cost Items(get total amount).
                 * 2. Get Cost Elements.
                 * 3. Process Cost element wise items.
                 * 4. Set cost item totals.
                 * 5. Update cost element total values and insert new records.(update exisiting records).
                 * 6. Update Cost Header
                 * 7. Delete Clear Element reff table and insert records 2016-01-16
                 * */


                CostSeqNum = oCostHeader.Ich_seq_no;
                decimal BLTotalAmount = 0;
                decimal BLTotalForChar = 0;

                DocNumber = oCostHeader.Ich_doc_no;

                List<ImportsCostItem> oImportsCostItems = _financialDAL.GET_IMP_CST_ITM_BY_SEQ(CostSeqNum, 1);
                BLTotalAmount = oImportsCostItems.Sum(x => x.Ici_unit_amt);

                List<ImportsCostItem> UnitRateChar = _financialDAL.GET_IMP_URATE_FOR_CHA(CostSeqNum, 1);
                if (UnitRateChar != null)
                {
                    BLTotalForChar = UnitRateChar.Sum(x => x.Ici_unit_amt);
                }



                List<ImportsCostElementItem> oImpCstEleItms = _financialDAL.GET_IMP_CST_ELE_ITM_BY_SEQ(CostSeqNum);
                if (oImpCstEleItms == null)
                {
                    oImpCstEleItms = new List<ImportsCostElementItem>();
                }

                #region Process cost element itmes

                Decimal TotalCost = oImportsCostItems.Sum(x => x.Ici_unit_amt);

                foreach (ImportsCostItem oImportsCostItem in oImportsCostItems)
                {



                    decimal ValByTot = 0;
                    if (BLTotalAmount == 0)
                    {
                        ValByTot = 0;
                    }
                    else
                    {
                        ValByTot = oImportsCostItem.Ici_unit_amt / BLTotalAmount;
                    }


                    foreach (ImportsCostElement oCstEle in oImportsCostElements)
                    {
                        //check lisence
                        //if (checklicense)
                        //{
                        //    bool islis = _financialDAL.Check_ele_license(oCstEle.Icet_ele_cd);
                        //    if (islis)
                        //    {
                        //        bool _chkitmcat = _financialDAL.Check_ele_license_cat(oCostHeader.Ich_com, oCstEle.Icet_ele_cd, oImportsCostItem.Ici_itm_cd);
                        //        if (_chkitmcat)
                        //        {

                        //        }
                        //        else
                        //        {
                        //            continue;
                        //        }
                        //    }
                        //}

                        if (oCstEle.Icet_ele_cd == "IML")
                        {

                        }

                        if (oCstEle.Icet_stus == 0)
                        {
                            continue;
                        }
                        if (oImpCstEleItms.FindAll(z => z.Ice_itm_cd == oImportsCostItem.Ici_itm_cd && z.Ice_ele_cd == oCstEle.Icet_ele_cd && z.Ice_ref_line == oImportsCostItem.Ici_line).Count > 0)
                        //if (oImpCstEleItms.FindAll(z => z.Ice_itm_cd == oImportsCostItem.Ici_itm_cd && z.Ice_ele_cd == oCstEle.Icet_ele_cd).Count > 0)
                        {
                            //if (oImportsCostItem.Ici_itm_cd == "TTTBR304")
                            //{
                            //  //  oImportsCostItem.Ici_itm_cd = "";
                            //}


                            ImportsCostElementItem oSCostEleItem = oImpCstEleItms.Find(z => z.Ice_itm_cd == oImportsCostItem.Ici_itm_cd && z.Ice_ele_cd == oCstEle.Icet_ele_cd && z.Ice_ref_line == oImportsCostItem.Ici_line);

                            if (oCstEle.Icet_ele_cd == "COST")
                            {
                                ImportsBLItems _blItmDet = _financialDAL.GET_BL_ITMBYITMLINE(oImportsCostItem.Ici_doc_no, oImportsCostItem.Ici_ref_line);

                                if (_blItmDet.Ibi_tp == "F")
                                {
                                    if (oCostHeader.Ich_actl == 1)
                                    {
                                        oSCostEleItem.Ice_actl_rt = GetElemetRate(0, oImportsCostItem.Ici_qty, BLTotalForChar, oCstEle.Icet_actl_rt);
                                    }
                                    else
                                    {
                                        oSCostEleItem.Ice_finl_rt = GetElemetRate(0, oImportsCostItem.Ici_qty, BLTotalForChar, oCstEle.Icet_finl_rt);
                                    }


                                }
                                else
                                {
                                    if (oCostHeader.Ich_actl == 1)
                                    {
                                        oSCostEleItem.Ice_actl_rt = GetElemetRate(oImportsCostItem.Ici_unit_rt, oImportsCostItem.Ici_qty, BLTotalForChar, oCstEle.Icet_actl_rt);
                                    }
                                    else
                                    {
                                        oSCostEleItem.Ice_finl_rt = GetElemetRate(oImportsCostItem.Ici_unit_rt, oImportsCostItem.Ici_qty, BLTotalForChar, oCstEle.Icet_finl_rt);
                                    }


                                }

                            }
                            else
                            {
                                if (oCostHeader.Ich_actl == 1)
                                {
                                    oSCostEleItem.Ice_actl_rt = GetElemetRate(oImportsCostItem.Ici_unit_rt, oImportsCostItem.Ici_qty, TotalCost, oCstEle.Icet_actl_rt);
                                }
                                else
                                {
                                    oSCostEleItem.Ice_finl_rt = GetElemetRate(oImportsCostItem.Ici_unit_rt, oImportsCostItem.Ici_qty, TotalCost, oCstEle.Icet_finl_rt);
                                }


                            }
                            if (oCostHeader.Ich_actl == 1)
                            {
                                oSCostEleItem.Ice_actl_amnt = oSCostEleItem.Ice_actl_rt * oImportsCostItem.Ici_qty;
                            }
                            else
                            {
                                oSCostEleItem.Ice_finl_amnt = oSCostEleItem.Ice_finl_rt * oImportsCostItem.Ici_qty;
                            }



                        }
                        else
                        {
                            ImportsCostElementItem oNCostEleItem = new ImportsCostElementItem();

                            oNCostEleItem.Ice_seq_no = CostSeqNum;
                            oNCostEleItem.Ice_line = 0;
                            oNCostEleItem.Ice_doc_no = DocNumber;
                            oNCostEleItem.Ice_ref_line = oImportsCostItem.Ici_line;
                            oNCostEleItem.Ice_stus = 1;
                            oNCostEleItem.Ice_itm_cd = oImportsCostItem.Ici_itm_cd;
                            oNCostEleItem.Ice_itm_stus = oImportsCostItem.Ici_itm_stus;
                            oNCostEleItem.Ice_ele_cat = oCstEle.Icet_ele_cat;
                            oNCostEleItem.Ice_ele_tp = oCstEle.Icet_ele_tp;
                            oNCostEleItem.Ice_ele_cd = oCstEle.Icet_ele_cd;
                            oNCostEleItem.Ice_ele_rt = GetElemetRate(oImportsCostItem.Ici_unit_rt, oImportsCostItem.Ici_qty, TotalCost, oCstEle.Icet_ele_rt);

                            oNCostEleItem.Ice_ele_amnt = oNCostEleItem.Ice_ele_rt * oImportsCostItem.Ici_qty;
                            if (oCostHeader.Ich_actl == 1)
                            {
                                oNCostEleItem.Ice_actl_rt = GetElemetRate(oImportsCostItem.Ici_unit_rt, oImportsCostItem.Ici_qty, TotalCost, oCstEle.Icet_actl_rt);
                                oNCostEleItem.Ice_actl_amnt = oNCostEleItem.Ice_actl_rt * oImportsCostItem.Ici_qty;
                            }
                            else
                            {

                                oNCostEleItem.Ice_finl_rt = GetElemetRate(oImportsCostItem.Ici_unit_rt, oImportsCostItem.Ici_qty, TotalCost, oCstEle.Icet_finl_rt);
                                oNCostEleItem.Ice_finl_amnt = oNCostEleItem.Ice_finl_rt * oImportsCostItem.Ici_qty;

                            }

                            oNCostEleItem.Ice_anal_1 = String.Empty;
                            oNCostEleItem.Ice_anal_2 = "1";
                            oNCostEleItem.Ice_anal_3 = String.Empty;
                            oNCostEleItem.Ice_anal_4 = String.Empty;
                            oNCostEleItem.Ice_anal_5 = String.Empty;
                            oNCostEleItem.Ice_cre_by = User;
                            oNCostEleItem.Ice_cre_dt = DateTime.Now;
                            oNCostEleItem.Ice_mod_by = User;
                            oNCostEleItem.Ice_mod_dt = DateTime.Now;
                            oNCostEleItem.Ice_session_id = Session;



                            oImpCstEleItms.Add(oNCostEleItem);
                        }
                    }
                }
                #endregion

                foreach (ImportsCostElement oCstEle in oImportsCostElements)
                {

                    if (oCstEle.Icet_ele_cd == "CE&S")
                    {

                    }
                    if (oCstEle.Icet_stus == 0)
                    {
                        continue;
                    }

                    //oCstEle.Icet_ele_rt = oImpCstEleItms.Sum(x => x.Ice_ele_rt);
                    //oCstEle.Icet_actl_rt = oImpCstEleItms.Sum(x => x.Ice_actl_rt);
                    //oCstEle.Icet_finl_rt = oImpCstEleItms.Sum(x => x.Ice_finl_rt);

                    oCstEle.Icet_ele_rt = oImpCstEleItms.Where(z => z.Ice_ele_cd == oCstEle.Icet_ele_cd && z.Ice_stus == 1).Sum(x => x.Ice_ele_amnt);
                    if (oCostHeader.Ich_actl == 1)
                    {
                        oCstEle.Icet_actl_rt = oImpCstEleItms.Where(z => z.Ice_ele_cd == oCstEle.Icet_ele_cd && z.Ice_stus == 1).Sum(x => x.Ice_actl_amnt);
                    }
                    else
                    {
                        oCstEle.Icet_finl_rt = oImpCstEleItms.Where(z => z.Ice_ele_cd == oCstEle.Icet_ele_cd && z.Ice_stus == 1).Sum(x => x.Ice_finl_amnt);
                    }


                }

                DataTable dt = DataTableExtensions.ToDataTable(oImportsCostElements);
                DataTable dt2 = DataTableExtensions.ToDataTable(oImpCstEleItms);

                //Update Cost header
                result = _financialDAL.SAVE_IMP_CST_HDR(oCostHeader, out seqNumber);

                //Update Cost Items - values Only
                foreach (ImportsCostItem oCostItem in oImportsCostItems)
                {
                    oCostItem.Ici_seq_no = seqNumber;
                    result = _financialDAL.SAVE_IMP_CST_ITM(oCostItem);
                }

                //Update Cost Elements 
                foreach (ImportsCostElement oImportsCostElement in oImportsCostElements)
                {
                    string sts;
                    oImportsCostElement.Icet_seq_no = seqNumber;
                    result = _financialDAL.SAVE_IMP_CST_ELE(oImportsCostElement, out sts);
                }

                foreach (ImportsCostElementItem oImportsCostElementItem in oImpCstEleItms)
                {

                    if (oImportsCostElements.FindAll(x => x.Icet_ele_cd == oImportsCostElementItem.Ice_ele_cd && x.Icet_stus == 1).Count > 0)
                    {
                        oImportsCostElementItem.Ice_stus = 1;
                    }
                    else
                    {
                        oImportsCostElementItem.Ice_stus = 0;
                    }

                    string sts;
                    oImportsCostElementItem.Ice_doc_no = DocNumber;
                    oImportsCostElementItem.Ice_seq_no = seqNumber;
                    if (oImportsCostElementItem.Ice_ele_cat != "CUSTM")
                    {
                        if (oImportsCostElementItem.Ice_line == 0)
                        {
                            ImportsCostElement _newCstEle = _financialDAL.Get_cst_eleByTp(DocNumber, seqNumber, oImportsCostElementItem.Ice_ele_cat, oImportsCostElementItem.Ice_ele_tp, oImportsCostElementItem.Ice_ele_cd, 1);
                            if (_newCstEle != null)
                            {
                                oImportsCostElementItem.Ice_line = _newCstEle.Icet_line;
                            }
                        }
                        result = _financialDAL.SAVE_IMP_CST_ELE_ITM_APPLY(oImportsCostElementItem, out sts);
                    }
                }

                updateCostItems(DocNumber, CostSeqNum, User, Session);
                List<ImportsCostElementItem> oImpCstEleItms_ = _financialDAL.GET_IMP_CST_ELE_ITM_BY_SEQ(CostSeqNum);
                bool checklicense = false;
                //subodana 2017-12-19  check lisence ele codes 
                foreach (var _lic in oImpCstEleItms_)
                {
                    bool islis = _financialDAL.Check_ele_license(_lic.Ice_ele_cd);
                    if (islis)
                    {
                        bool _chkitmcat = _financialDAL.Check_ele_license_cat(oCostHeader.Ich_com, _lic.Ice_ele_cd, _lic.Ice_itm_cd);
                        if (_chkitmcat)
                        {
                            checklicense = true;
                        }
                    }
                }

                if (checklicense)
                {
                    updateCostItems2(DocNumber, CostSeqNum, User, Session, oCostHeader.Ich_com);
                }
                //if (oEleReffItems.Count > 0)
                //{
                //    result = _financialDAL.DELETE_BY_SEQ(oEleReffItems[0]);
                //    foreach (imp_cst_ele_ref item in oEleReffItems)
                //    {
                //        item.Icer_seq_no = CostSeqNum;
                //        result = _financialDAL.SAVE_IMP_CST_ELE_REF_NEW(item);
                //    }
                //}

                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;
                _financialDAL.TransactionRollback();
            }

            return result;
        }

        //subodana 2016-07-13
        public Int32 SaveIMP_CST_ELENew(List<imp_cst_ele_ref> oEleReffItems, int seqno, List<IMP_CST_ELEREF_DET> _cstref, out string _error)
        {
            Int32 result = 0;
            _error = string.Empty;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();


                if (oEleReffItems.Count > 0)
                {
                    var v = oEleReffItems.Where(c => c.Icer_seq_no > 0).FirstOrDefault();
                    if (v != null)
                    {
                        foreach (var _itm in oEleReffItems)
                        {
                            _itm.Icer_seq_no = v.Icer_seq_no;
                        }
                    }
                    result = _financialDAL.DELETE_BY_SEQ(oEleReffItems[0]);
                    foreach (imp_cst_ele_ref item in oEleReffItems)
                    {
                        //item.Icer_seq_no = CostSeqNum;
                        result = _financialDAL.SAVE_IMP_CST_ELE_REF_NEW(item);
                    }
                }
                if (_cstref != null)
                {
                    foreach (var _cstreflist in _cstref)
                    {
                        result = _financialDAL.SaveCostRefDetails(_cstreflist);
                    }
                }


                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                _error = ex.Message;
                _financialDAL.TransactionRollback();
            }
            return result;
        }

        //Tharaka 2015-08-03
        public List<ImportsCostItem> GET_IMP_CST_ITM_BY_SEQ(Int32 Seq, Int32 Status)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_CST_ITM_BY_SEQ(Seq, Status);
        }

        //Tharaka 2015-08-03
        public List<ImportsCostElementItem> GET_IMP_CST_ELE_ITM_BY_ITM(Int32 Seq, String doc, String itemCode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_CST_ELE_ITM_BY_ITM(Seq, doc, itemCode);
        }

        //Tharaka 2015-08-03
        public Int32 UPDATE_IMP_CST_HDR_STAGE(Int32 Stage, Int32 value, String User, Int32 Seq, String Com, String Doc, DateTime Date, out String err)
        {
            Int32 result = 0;
            err = string.Empty;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.UPDATE_IMP_CST_HDR_STAGE(Stage, value, User, Seq, Com, Doc, Date);
                List<ImportsCostItem> _cstItm = new List<ImportsCostItem>();
                _cstItm = _financialDAL.GET_IMP_CST_ITM_BY_SEQ(Seq, 1);//SI cost
                if (_cstItm.Count > 0)
                {
                    decimal Dutycost = 0;
                    decimal SICost = 0;
                    decimal TotalCost = 0;
                    string _bldoc = _cstItm[0].Ici_doc_no;
                    List<ImportsCostItem> _cosexbondtItm = _financialDAL.GET_CUSDEC_EX_COST(_bldoc, Com);//request cost(exbond)
                    if (_cosexbondtItm != null)
                    {
                        foreach (ImportsCostItem _Itm in _cosexbondtItm)
                        {
                            Dutycost = _financialDAL.GET_CST_ITM_COST(_Itm.Ici_doc_no, _Itm.Ici_line);
                            Dutycost = Math.Round(Dutycost / _Itm.Ici_qty);
                            SICost = _cstItm.SingleOrDefault(x => x.Ici_doc_no == Doc && x.Ici_line == _Itm.Ici_line).Ici_actl_rt;
                            // SICost = _Itm.Ici_actl_rt;

                            TotalCost = Dutycost + SICost;

                            _financialDAL.UPDATE_IMP_CST_ACTAMOUNT(_Itm.Ici_seq_no, _Itm.Ici_line, TotalCost, User);
                        }
                    }
                }
                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;
                _financialDAL.TransactionRollback();
            }
            return result;
        }

        //Tharaka 2015-08-04
        public int UPDATE_PUR_HDR_BY_COSTSHEET(Int32 Seq, String Status, String User, out String err)
        {
            Int32 result = 0;
            err = string.Empty;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.UPDATE_PUR_HDR_BY_COSTSHEET(Seq, Status, User);

                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;
                _financialDAL.TransactionRollback();
            }
            return result;
        }

        public DataTable CheckBusentity(string com, string tp, string sub_tp, string cd)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CheckBusentity(com, tp, sub_tp, cd);
        }

        //Tharaka 2015-08-24
        public DataTable GET_TRADTERMDESC_BY_DOC(String Doc, String ElectCAte)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_TRADTERMDESC_BY_DOC(Doc, ElectCAte);
        }

        //Tharaka 2015-09-02
        private Int32 updateCostItems(String Document, Int32 CostSeq, String User, String Session)
        {
            Int32 result = 0;

            List<ImportsCostItem> oImportsCostItems = _financialDAL.GET_IMP_CST_ITM_BY_SEQ(CostSeq, 1);

            List<ImportsCostElementItem> oImportsCostElementItems = _financialDAL.GET_IMP_CST_ELE_ITM_BY_SEQ(CostSeq);

            foreach (ImportsCostItem item in oImportsCostItems)
            {
                item.Ici_pre_rt = oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_pre_rt - x.Ice_pre_amt_claim);
                item.Ici_pre_amt = item.Ici_pre_rt * item.Ici_qty; //oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_pre_amnt);
                item.Ici_actl_rt = oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_actl_rt - x.Ice_actl_amt_claim);
                item.Ici_actl_amt = item.Ici_actl_rt * item.Ici_qty; //oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_actl_amnt);
                item.Ici_finl_rt = oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_finl_rt - x.Ice_finl_amt_claim);
                item.Ici_finl_amt = item.Ici_finl_rt * item.Ici_qty; //oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_finl_amnt);

                result = _financialDAL.UPDATE_IMP_CST_ITM_VALUES(item.Ici_pre_rt, item.Ici_pre_amt, item.Ici_actl_rt, item.Ici_actl_amt, item.Ici_finl_rt, item.Ici_finl_amt, item.Ici_doc_no, item.Ici_itm_cd, item.Ici_seq_no, item.Ici_line, User, Session);
            }

            return result;
        }

        private Int32 updateCostItems2(String Document, Int32 CostSeq, String User, String Session, string com)
        {
            Int32 result = 0;
            //  decimal totlicenqty = _financialDAL.GetTotLicenceQty(Document, "");
            decimal totlicenqtyval = _financialDAL.GetTotLicenceFocVal(Document, "");
            // decimal totlicenqtyvalunit = _financialDAL.GetTotLicenceFocValUnit(Document, "");
            List<ImportsCostElementItem> oImportsCostElementItems = _financialDAL.GET_IMP_CST_ELE_ITM_BY_SEQ(CostSeq);

            foreach (ImportsCostElementItem itemme in oImportsCostElementItems)
            {
                //check lisence
                bool islis = _financialDAL.Check_ele_license(itemme.Ice_ele_cd);
                if (islis)
                {
                    decimal totlisval = _financialDAL.GetTotLicenceVal(Document, itemme.Ice_ele_cd);
                    bool _chkitmcat = _financialDAL.Check_ele_license_cat(com, itemme.Ice_ele_cd, itemme.Ice_itm_cd);
                    if (_chkitmcat)
                    {

                        decimal itemqty = _financialDAL.GetCostItemQty(Document, itemme.Ice_ref_line);
                        decimal itemqtyval = _financialDAL.GetCostItemValAmt(Document, itemme.Ice_ref_line);
                        //decimal itemqtyvalunit = _financialDAL.GetCostItemValAmtUnit(Document, itemme.Ice_itm_cd);
                        itemme.Ice_ele_rt = 0;
                        itemme.Ice_ele_amnt = 0;
                        itemme.Ice_pre_rt = 0;
                        itemme.Ice_pre_amnt = 0;
                        itemme.Ice_actl_amnt = itemqtyval * totlisval / totlicenqtyval;
                        itemme.Ice_actl_rt = itemme.Ice_actl_amnt / itemqty;
                        itemme.Ice_finl_rt = 0;
                        itemme.Ice_finl_amnt = 0;
                    }
                    else
                    {
                        itemme.Ice_ele_rt = 0;
                        itemme.Ice_ele_amnt = 0;
                        itemme.Ice_pre_rt = 0;
                        itemme.Ice_pre_amnt = 0;
                        itemme.Ice_actl_rt = 0;
                        itemme.Ice_actl_amnt = 0;
                        itemme.Ice_finl_rt = 0;
                        itemme.Ice_finl_amnt = 0;
                    }
                }
            }
            foreach (ImportsCostElementItem oImportsCostEleItem in oImportsCostElementItems)
            {
                string sts;
                result = _financialDAL.SAVE_IMP_CST_ELE_ITM_APPLY(oImportsCostEleItem, out sts);
            }
            List<ImportsCostItem> oImportsCostItems = _financialDAL.GET_IMP_CST_ITM_BY_SEQ(CostSeq, 1);
            foreach (ImportsCostItem item in oImportsCostItems)
            {
                item.Ici_pre_rt = oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_pre_rt - x.Ice_pre_amt_claim);
                item.Ici_pre_amt = item.Ici_pre_rt * item.Ici_qty; //oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_pre_amnt);
                item.Ici_actl_rt = oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_actl_rt - x.Ice_actl_amt_claim);
                item.Ici_actl_amt = item.Ici_actl_rt * item.Ici_qty; //oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_actl_amnt);
                item.Ici_finl_rt = oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_finl_rt - x.Ice_finl_amt_claim);
                item.Ici_finl_amt = item.Ici_finl_rt * item.Ici_qty; //oImportsCostElementItems.Where(z => z.Ice_itm_cd == item.Ici_itm_cd && z.Ice_itm_stus == item.Ici_itm_stus && z.Ice_ref_line == item.Ici_ref_line && z.Ice_stus == 1 && z.Ice_anal_2 == "1").Sum(x => x.Ice_finl_amnt);

                result = _financialDAL.UPDATE_IMP_CST_ITM_VALUES(item.Ici_pre_rt, item.Ici_pre_amt, item.Ici_actl_rt, item.Ici_actl_amt, item.Ici_finl_rt, item.Ici_finl_amt, item.Ici_doc_no, item.Ici_itm_cd, item.Ici_seq_no, item.Ici_line, User, Session);
            }

            return result;
        }
        //Darshana 21-10-2015
        public int UPDATE_PI_STATUS(string _com, string _PINo, string _status, string mod_by)
        {
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.UPDATE_PI_STATUS(_com, _PINo, _status, mod_by);

                _financialDAL.TransactionCommit();
                result = 1;
            }
            catch (Exception ex)
            {
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }
            return result;
        }

        //Sahan 01/Dec/2015
        public DataTable LoadBondNumbers(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadBondNumbers(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 01/Dec/2015
        public DataTable LoadCusDecDutySum(string p_cuds_doc_no)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadCusDecDutySum(p_cuds_doc_no);
        }

        //Sahan 02/Dec/2105
        public Tuple<int, string> SaveSettleHeader(ImpAstHeader Header, MasterAutoNumber _masterAutoNumber, ImpCusdecHdr CusDecHeader, DataTable dtCusDec, string company, ImpAstDet Details, DataTable dtSettlements, string user, string session, ImpCusdecDutySum DutySum)
        {
            Int32 _effect = 0;
            Int32 _effect3 = 0;
            Int32 _effect4 = 0;
            Int32 _effect5 = 0;

            Tuple<int, int> _effect2;
            string docno = string.Empty;

            try
            {
                string _documentNo = string.Empty;

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                if (string.IsNullOrEmpty(Header.ISTH_DOC_NO))
                {
                    Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_masterAutoNumber.Aut_year).Remove(0, 2) + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                    _effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                    Header.ISTH_DOC_NO = _documentNo;
                    docno = _documentNo;
                }
                else
                {
                    docno = Header.ISTH_DOC_NO;
                }

                _effect2 = _financialDAL.SaveSettleHeader(Header);
                int _seq = Convert.ToInt32(_effect2.Item2);
                Header.ISTH_SEQ_NO = _seq;
                _effect = _seq;


                foreach (DataRow ddr in dtCusDec.Rows)
                {
                    string entryno = ddr["istd_entry_no"].ToString();
                    CusDecHeader.CUH_DOC_NO = entryno;
                    CusDecHeader.CUH_AST_NO = docno;
                    CusDecHeader.CUH_COM = company;
                    CusDecHeader.CUH_AST_DT = Convert.ToDateTime(DateTime.Now.Date);
                    CusDecHeader.CUH_AST_NOTIES_NO = ddr["cuh_ast_noties_no"].ToString();
                    CusDecHeader.CUH_AST_STUS = 1;
                    CusDecHeader.CUH_MOD_BY = user;
                    CusDecHeader.CUH_MOD_DT = Convert.ToDateTime(DateTime.Now.Date);
                    CusDecHeader.CUH_MOD_SESSION = session;
                    _effect3 = _financialDAL.UpdateCusDecHeader(CusDecHeader);
                }
                Int32 _lineNo = 0;
                foreach (DataRow ddr2 in dtSettlements.Rows)
                {
                    _lineNo++;
                    Details.ISTD_SEQ_NO = _seq;
                    Details.ISTD_LINE_NO = _lineNo;
                    Details.ISTD_ENTRY_NO = ddr2["istd_entry_no"].ToString();
                    Details.ISTD_COST_CAT = ddr2["cuds_cost_cat"].ToString();
                    Details.ISTD_COST_TP = ddr2["cuds_cost_tp"].ToString();
                    Details.ISTD_COST_ELE = ddr2["istd_cost_ele"].ToString();
                    Details.ISTD_COST_ELE_AMT = Convert.ToDecimal(ddr2["istd_cost_ele_amt"].ToString());
                    Details.ISTD_COST_CLAIM_AMT = Convert.ToDecimal(ddr2["istd_cost_claim_amt"].ToString());
                    Details.ISTD_COST_UNCLAIM_AMT = Convert.ToDecimal(ddr2["istd_cost_unclaim_amt"].ToString());
                    Details.ISTD_COST_STL_AMT = Convert.ToDecimal(ddr2["istd_cost_stl_amt"].ToString());
                    Details.ISTD_DIFF_AMT = Convert.ToDecimal(ddr2["istd_diff_amt"].ToString());
                    Details.ISTD_ASSESS_NO = ddr2["istd_assess_no"].ToString();
                    Details.ISTD_ASSESS_DT = Convert.ToDateTime(ddr2["istd_assess_dt"].ToString());
                    Details.ISTD_STUS = "A";
                    Details.ISTD_MOD_BY = user;
                    Details.ISTD_MOD_DT = Convert.ToDateTime(DateTime.Now.Date);
                    Details.ISTD_MOD_SESSION = session;
                    Details.ISTD_CNCL_BY = user;
                    Details.ISTD_CNCL_DT = Convert.ToDateTime(DateTime.Now.Date);
                    Details.ISTD_CNCL_SESSION = session;

                    _effect4 = _financialDAL.UpdateSettleDetails(Details);
                }

                foreach (DataRow ddr2dutysum in dtSettlements.Rows)
                {
                    DutySum.CUDS_COST_STL_AMT = Convert.ToDecimal(ddr2dutysum["istd_cost_stl_amt"].ToString());
                    DutySum.CUDS_DOC_NO = ddr2dutysum["istd_entry_no"].ToString();
                    DutySum.CUDS_COST_CAT = ddr2dutysum["cuds_cost_cat"].ToString();
                    DutySum.CUDS_COST_TP = ddr2dutysum["cuds_cost_tp"].ToString();
                    DutySum.CUDS_COST_ELE = ddr2dutysum["istd_cost_ele"].ToString();
                    _effect5 = _financialDAL.UpdateDutySumSettle(DutySum);
                }

                _financialDAL.TransactionCommit();
                return new Tuple<int, string>(_effect, docno);
            }
            catch (Exception err)
            {
                _effect = -1;
                _effect3 = -1;
                _effect4 = -1;
                _effect5 = -1;
                docno = "ERROR : " + err.Message.ToString();
                _financialDAL.TransactionRollback();
                return new Tuple<int, string>(_effect, docno);
            }
            finally
            {
                _financialDAL.ConnectionClose();
            }
        }

        //Lakshan 20/APr/2016
        public Tuple<int, string> SaveSettleHeaderNew(ImpAstHeader Header, MasterAutoNumber _masterAutoNumber, ImpCusdecHdr CusDecHeader, DataTable dtCusDec,
            string company, ImpAstDet Details, DataTable dtSettlements, string user, string session, ImpCusdecDutySum DutySum, List<ImpAstDet> _remAstDet)
        {
            Int32 _effect = 0;
            Int32 _effect3 = 0;
            Int32 _effect4 = 0;
            Int32 _effect5 = 0;
            Int32 _effect6 = 0;
            Int32 _effect7 = 0;

            Tuple<int, int> _effect2;
            string docno = string.Empty;

            try
            {
                string _documentNo = string.Empty;

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                if (string.IsNullOrEmpty(Header.ISTH_DOC_NO))
                {
                    Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_masterAutoNumber.Aut_year).Remove(0, 2) + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                    _effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                    Header.ISTH_DOC_NO = _documentNo;
                    docno = _documentNo;
                }
                else
                {
                    docno = Header.ISTH_DOC_NO;
                }

                _effect2 = _financialDAL.SaveSettleHeader(Header);
                int _seq = Convert.ToInt32(_effect2.Item2);
                Header.ISTH_SEQ_NO = _seq;
                _effect = _seq;


                foreach (DataRow ddr in dtCusDec.Rows)
                {
                    string entryno = ddr["istd_entry_no"].ToString();
                    CusDecHeader.CUH_DOC_NO = entryno;
                    CusDecHeader.CUH_AST_NO = docno;
                    CusDecHeader.CUH_COM = company;
                    CusDecHeader.CUH_AST_DT = Convert.ToDateTime(DateTime.Now.Date);
                    CusDecHeader.CUH_AST_NOTIES_NO = ddr["cuh_ast_noties_no"].ToString();
                    CusDecHeader.CUH_AST_STUS = 1;
                    CusDecHeader.CUH_MOD_BY = user;
                    CusDecHeader.CUH_MOD_DT = Convert.ToDateTime(DateTime.Now.Date);
                    CusDecHeader.CUH_MOD_SESSION = session;
                    _effect3 = _financialDAL.UpdateCusDecHeader(CusDecHeader);
                }

                //Lakshan
                if (_remAstDet != null)
                {
                    List<ImpCusdecHdr> _remImpCusHdrList = new List<ImpCusdecHdr>();
                    foreach (ImpAstDet _det in _remAstDet)
                    {
                        _effect6 = _financialDAL.UpdateSettleDetails(_det);
                        var v = _remImpCusHdrList.Where(c => c.CUH_DOC_NO == _det.ISTD_ENTRY_NO).ToList();
                        if (v != null)
                        {
                            if (v.Count == 0)
                            {
                                _remImpCusHdrList.Add(new ImpCusdecHdr()
                                {
                                    CUH_DOC_NO = _det.ISTD_ENTRY_NO,
                                    CUH_MOD_BY = _det.ISTD_MOD_BY,
                                    CUH_MOD_DT = DateTime.Now,
                                    CUH_MOD_SESSION = _det.ISTD_MOD_SESSION,
                                    CUH_AST_STUS = 0,
                                    CUH_AST_NO = "",
                                    CUH_AST_DT = DateTime.MinValue,
                                    CUH_AST_NOTIES_NO = ""
                                });
                            }
                        }
                        else
                        {
                            _remImpCusHdrList.Add(new ImpCusdecHdr()
                            {
                                CUH_DOC_NO = _det.ISTD_ENTRY_NO,
                                CUH_MOD_BY = _det.ISTD_MOD_BY,
                                CUH_MOD_DT = DateTime.Now,
                                CUH_MOD_SESSION = _det.ISTD_MOD_SESSION,
                                CUH_AST_STUS = 0,
                                CUH_AST_NO = "",
                                CUH_AST_DT = DateTime.MinValue,
                                CUH_AST_NOTIES_NO = ""
                            });
                        }
                    }
                    if (_remImpCusHdrList.Count > 0)
                    {
                        foreach (var item in _remImpCusHdrList)
                        {
                            _effect7 = _financialDAL.UpdateCusDecHeaderStatus(item);
                        }
                    }
                }

                //End
                Int32 _lineNo = 0;
                foreach (DataRow ddr2 in dtSettlements.Rows)
                {
                    _lineNo++;
                    Details.ISTD_SEQ_NO = _seq;
                    Details.ISTD_LINE_NO = _lineNo;
                    Details.ISTD_ENTRY_NO = ddr2["istd_entry_no"].ToString();
                    Details.ISTD_COST_CAT = ddr2["cuds_cost_cat"].ToString();
                    Details.ISTD_COST_TP = ddr2["cuds_cost_tp"].ToString();
                    Details.ISTD_COST_ELE = ddr2["istd_cost_ele"].ToString();
                    Details.ISTD_COST_ELE_AMT = Convert.ToDecimal(ddr2["istd_cost_ele_amt"].ToString());
                    Details.ISTD_COST_CLAIM_AMT = Convert.ToDecimal(ddr2["istd_cost_claim_amt"].ToString());
                    Details.ISTD_COST_UNCLAIM_AMT = Convert.ToDecimal(ddr2["istd_cost_unclaim_amt"].ToString());
                    Details.ISTD_COST_STL_AMT = Convert.ToDecimal(ddr2["istd_cost_stl_amt"].ToString());
                    Details.ISTD_DIFF_AMT = Convert.ToDecimal(ddr2["istd_diff_amt"].ToString());
                    Details.ISTD_ASSESS_NO = ddr2["istd_assess_no"].ToString();
                    Details.ISTD_ASSESS_DT = Convert.ToDateTime(ddr2["istd_assess_dt"].ToString());
                    Details.ISTD_STUS = "A";
                    Details.ISTD_MOD_BY = user;
                    Details.ISTD_MOD_DT = Convert.ToDateTime(DateTime.Now.Date);
                    Details.ISTD_MOD_SESSION = session;
                    Details.ISTD_CNCL_BY = user;
                    Details.ISTD_CNCL_DT = Convert.ToDateTime(DateTime.Now.Date);
                    Details.ISTD_CNCL_SESSION = session;

                    _effect4 = _financialDAL.UpdateSettleDetails(Details);
                }

                foreach (DataRow ddr2dutysum in dtSettlements.Rows)
                {
                    DutySum.CUDS_COST_STL_AMT = Convert.ToDecimal(ddr2dutysum["istd_cost_stl_amt"].ToString());
                    DutySum.CUDS_DOC_NO = ddr2dutysum["istd_entry_no"].ToString();
                    DutySum.CUDS_COST_CAT = ddr2dutysum["cuds_cost_cat"].ToString();
                    DutySum.CUDS_COST_TP = ddr2dutysum["cuds_cost_tp"].ToString();
                    DutySum.CUDS_COST_ELE = ddr2dutysum["istd_cost_ele"].ToString();
                    _effect5 = _financialDAL.UpdateDutySumSettle(DutySum);
                }
                // _financialDAL.TransactionRollback();
                _financialDAL.TransactionCommit();
                return new Tuple<int, string>(_effect, docno);
            }
            catch (Exception err)
            {
                _effect = -1;
                _effect3 = -1;
                _effect4 = -1;
                _effect5 = -1;
                docno = "ERROR : " + err.Message.ToString();
                _financialDAL.TransactionRollback();
                return new Tuple<int, string>(_effect, docno);
            }
            finally
            {
                _financialDAL.ConnectionClose();
            }
        }

        //Sahan 03/Dec/2015
        public DataTable LoadSettleDocs(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime? _fromDate, DateTime? _toDate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadSettleDocs(_initialSearchParams, _searchCatergory, _searchText, _fromDate, _toDate);
        }

        //Sahan 03/Dec/2015
        public DataTable LoadSettleDocSummary(string company, string docno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadSettleDocSummary(company, docno);
        }

        //Sahan 03/Dec/2015
        public DataTable LoadSavedDutyDetails(string entryno, Int32 Seqno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadSavedDutyDetails(entryno, Seqno);
        }

        //Sahan 03/Dec/2015
        public DataTable LoadSavedEntryPopUp(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadSavedEntryPopUp(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 03/Dec/2015
        public DataTable LoadAllEntryDetails(string doc, string company)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadAllEntryDetails(doc, company);
        }

        //Sahan 04/Dec/2015
        public DataTable CalculateAmendSum(string p_istd_entry_no, Int32 p_istd_seq_no)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CalculateAmendSum(p_istd_entry_no, p_istd_seq_no);
        }

        //Sahan 04/Dec/2015
        public DataTable CalculateTotEntrySum(Int32 p_istd_seq_no)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CalculateTotEntrySum(p_istd_seq_no);
        }

        //Sahan 05/Dec/2015
        public Int32 UpdateAssessmentHeaderStatus(string stus, string modifiedby, DateTime modified_date, string modifysession, string docno, string company, Int32 seqno, string cancelby, DateTime canceldate, string cancelsession)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.UpdateAssessmentHeaderStatus(stus, modifiedby, modified_date, modifysession, docno, company, seqno, cancelby, canceldate, cancelsession);
        }

        //Sahan 07/Dec/2015
        public Int32 ResetCusDecHeaderAndDutySum(string company, string doc, string modifiedby, DateTime modified_date, string modifysesssion)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ResetCusDecHeaderAndDutySum(company, doc, modifiedby, modified_date, modifysesssion);
        }

        //Sahan 09/Dec/2015
        public DataTable LoadPendingAssesmentHeaders(ImpAstHeader header)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadPendingAssesmentHeaders(header);
        }

        //Sahan 09/Dec/2015
        public DataTable LoadDGCAccounts()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadDGCAccounts();
        }

        //Sahan 09/Dec/2105
        public Tuple<int, string> SaveSettleMentsHeader(ImportsSettleHeader SettleHeader, MasterAutoNumber _masterAutoNumber, ImportsSettleDetails SettleDetails, ImpAstHeader AssHeader, DGCAccounts Accounts, DataTable dtSettleDetails, DataTable dtAssHeader, string company, string accountno, Decimal usedamt, ImpCusdecHdr CusDecHeader, DataTable dtCusDec, string user, string session)
        {
            Int32 _effect = 0;
            Int32 _effect3 = 0;
            Int32 _effect4 = 0;
            Int32 _effect5 = 0;
            Int32 _effect6 = 0;

            Tuple<int, int> _effect2;
            string docno = string.Empty;

            try
            {
                string _documentNo = string.Empty;

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                if (string.IsNullOrEmpty(SettleHeader.ISHD_DOC_NO))
                {
                    Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_masterAutoNumber.Aut_year).Remove(0, 2) + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                    _effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                    SettleHeader.ISHD_DOC_NO = _documentNo;
                    docno = _documentNo;
                }
                else
                {
                    docno = SettleHeader.ISHD_DOC_NO;
                }

                _effect2 = _financialDAL.SaveSettleMentsHeader(SettleHeader);
                int _seq = Convert.ToInt32(_effect2.Item2);
                SettleHeader.ISHD_SEQ_NO = _seq;
                _effect = _seq;


                foreach (DataRow ddr1 in dtSettleDetails.Rows)
                {
                    SettleDetails.ISDT_SEQ_NO = Convert.ToInt32(_seq);
                    SettleDetails.ISDT_DOC_NO = docno;
                    SettleDetails.ISDT_LINE = Convert.ToInt32(ddr1["isdt_line"].ToString());
                    SettleDetails.ISDT_AST_NO = ddr1["isth_doc_no"].ToString();
                    SettleDetails.ISDT_AST_AMT = Convert.ToDecimal(ddr1["isth_stl_amt"].ToString());
                    _effect3 = _financialDAL.SaveSettleMentsDetails(SettleDetails);
                }

                foreach (DataRow ddr2 in dtAssHeader.Rows)
                {
                    AssHeader.ISTH_IS_STL = 1;
                    AssHeader.ISTH_DOC_NO = ddr2["isth_doc_no"].ToString();
                    AssHeader.ISTH_COM = company;

                    _effect4 = _financialDAL.ChangeAssessmentHeaderStatus(AssHeader);
                }

                Accounts.MDA_USED_AMT = Convert.ToDecimal(usedamt);
                Accounts.MDA_COM = company;
                Accounts.MDA_ACC_NO = accountno;
                _effect5 = _financialDAL.UpdateDGCAccount(Accounts);

                foreach (DataRow ddr in dtCusDec.Rows)
                {
                    string entryno = ddr["istd_entry_no"].ToString();
                    CusDecHeader.CUH_STL_NO = docno;
                    CusDecHeader.CUH_STL_DT = Convert.ToDateTime(DateTime.Now.Date);
                    CusDecHeader.CUH_COM = company;
                    CusDecHeader.CUH_DOC_NO = entryno;
                    CusDecHeader.CUH_STL_STUS = 1;
                    CusDecHeader.CUH_MOD_BY = user;
                    CusDecHeader.CUH_MOD_DT = Convert.ToDateTime(DateTime.Now.Date);
                    CusDecHeader.CUH_MOD_SESSION = session;
                    _effect6 = _financialDAL.ModifyCusDecHeader(CusDecHeader);
                }

                _financialDAL.TransactionCommit();

                return new Tuple<int, string>(_effect, docno);
            }
            catch (Exception err)
            {
                _effect = -1;
                _effect3 = -1;
                _effect4 = -1;
                _effect5 = -1;
                _effect6 = -1;
                docno = "ERROR : " + err.Message.ToString();
                _financialDAL.TransactionRollback();
                return new Tuple<int, string>(_effect, docno);
            }
            finally
            {
                _financialDAL.ConnectionClose();
            }
        }

        //Sahan 10/Dec/2015
        public DataTable LoadSavedSettlemets(string doc, string company)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadSavedSettlemets(doc, company);
        }

        //Sahan 10/Dec/2015
        public DataTable LoadSavedSettlementsPopUp(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadSavedSettlementsPopUp(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 10/Dec/2105
        public Int32 CancelSettlement(ImportsSettleHeader SettleHeader, ImpAstHeader AssHeader, DataTable dtSettleDetails, string company)
        {
            Int32 _effect1 = 0;
            Int32 _effect2 = 0;

            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                foreach (DataRow ddr2 in dtSettleDetails.Rows)
                {
                    AssHeader.ISTH_IS_STL = 0;
                    AssHeader.ISTH_DOC_NO = ddr2["isth_doc_no"].ToString();
                    AssHeader.ISTH_COM = company;

                    _effect1 = _financialDAL.ChangeAssessmentHeaderStatus(AssHeader);
                }

                _effect2 = _financialDAL.UpdateSettlementCurrentStatus(SettleHeader);

                _financialDAL.TransactionCommit();

                _effect1 = 1;
            }
            catch (Exception ex)
            {
                _effect1 = -1;
                _effect2 = -1; ;
                _financialDAL.TransactionRollback();
            }
            finally
            {
                _financialDAL.ConnectionClose();
            }
            return _effect1;
        }

        //Sahan 11/Dec/2015
        public DataTable LoadAODDocs(string doc, string company, string type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadAODDocs(doc, company, type);
        }

        //Chamal 16-Dec-2015
        public List<CustomsProcedureCodes> GetCustomsProcedureCodes(string country, string com, string consigType, string consigCode, string docType, string procCode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCustomsProcedureCodes(country, com, consigType, consigCode, docType, procCode);
        }

        //Sahan 28/Dec/2015
        public DataTable LoadSelectedEntryNos(string assessment_no)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadSelectedEntryNos(assessment_no);
        }

        //Sahan 28/Dec/2015
        public DataTable LoadEntriesByDate(DateTime from, DateTime to, string status)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadEntriesByDate(from, to, status);
        }

        //Sahan 28/Dec/2015
        public DataTable CountAssessmentTot(string entryno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CountAssessmentTot(entryno);
        }

        //Sahan 28/Dec/2015
        public DataTable CalSettleTotbyEntry(string entryno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CalSettleTotbyEntry(entryno);
        }

        //Sahan 28/Dec/2015
        public Int32 ByPassCusDec(ImpCusdecHdr CusDecHeader)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ByPassCusDec(CusDecHeader);
        }

        //Sahan 28/Dec/2015
        public DataTable LoadCustomsReimbursements(ImpCusdecHdr CusDecHeaders)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadCustomsReimbursements(CusDecHeaders);
        }

        //Sahan 29/Dec/2015
        public DataTable LoadAODDetailsWithItem(string entry, string com, string doctype, Int32 direction)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadAODDetailsWithItem(entry, com, doctype, direction);
        }

        //Sahan 29/Dec/2015
        public DataTable LoadEntryPopUp(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadEntryPopUp(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 29/Dec/2015
        public DataTable LoadAssementPopUp(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadAssementPopUp(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 29/Dec/2015
        public DataTable LoadSettlementPopUp(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadSettlementPopUp(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 29/Dec/2015
        public DataTable LoadCusRefPopUp(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadCusRefPopUp(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Sahan 29/Dec/2015
        public DataTable LoadAssNoticePopUp(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadAssNoticePopUp(_initialSearchParams, _searchCatergory, _searchText);
        }

        //Chamal 31-Dec-2015
        public Int32 SaveCusdec(ImpCusdecHdr _cusdecHdr, List<ImpCusdecItm> _cusdecItm, List<ImpCusdecCost> _cusdecCost, bool _isUpdate, out string msg, int isres, out string doc, bool _isconncopen, bool _hsopen )
        {
            //Int32 _effect = 0;
            //string _doc = "";
            //string _msg = string.Empty;
            //_effect= SaveCusdec_comm(_cusdecHdr, _cusdecItm, _cusdecCost, _isUpdate, out msg, isres, out doc, _isconncopen, _hsopen, null, null, null, null, null);
            //msg = _msg;
            //doc = _doc;
            //return _effect;


            Int32 _effect = 0;
            Int32 _cusdecSeq = 0;
            string _msg = string.Empty;
            string _doc = "";
            int _costSheetSeq = 0;
            int _reqNo = 0;

            ImportsCostHeader p_costSheetHeader = new ImportsCostHeader();

            List<ImpCusdecItm> p_cusdecItem = new List<ImpCusdecItm>();
            List<ImportsCostItem> p_costSheetItem = new List<ImportsCostItem>();

            List<ImpCusdecItmCost> p_cusdecCostEleItem = new List<ImpCusdecItmCost>();
            List<ImportsCostElementItem> p_costSheetCostEleItem = new List<ImportsCostElementItem>();

            List<ImpCusdecCost> p_cusdecCost = new List<ImpCusdecCost>();
            List<ImportsCostElement> p_costSheetCostEleSum = new List<ImportsCostElement>();

            List<ImpCusdecDutySum> p_cusdecDutySum = new List<ImpCusdecDutySum>();

            InventoryRequest p_inventoryRequest = new InventoryRequest();

            try
            {
                if (_isconncopen == true)
                {
                    invtbll = new InventoryBLL();
                    _financialDAL = new FinancialDAL();
                    _generalDAL = new GeneralDAL();
                    _inventoryDAL = new InventoryDAL();
                    _cusserDal = new CustServiceDAL();
                    _financialDAL.ConnectionOpen();
                    _cusserDal.ConnectionOpen();
                    _generalDAL.ConnectionOpen();
                    _inventoryDAL.ConnectionOpen();
                }

                string glbtype = _cusdecHdr.CUH_TP;

                if (_isUpdate == true)
                {
                    ImportsCostHeader _csHdr = _financialDAL.GET_IMP_CST_HDR_BY_DOC(_cusdecHdr.CUH_OTH_NO, null);
                    if (_csHdr != null)
                    {
                        if (_csHdr.Ich_is_grn == 1)
                        {
                            msg = "Can't proceed. Entry already used!";
                            doc = "";
                            _financialDAL.ConnectionClose();
                            return -1;
                        }

                    }
                    if (_cusdecCost == null)
                    {
                        msg = "Can't proceed. Please Load Duty Detais";
                        doc = "";
                        _financialDAL.ConnectionClose();
                        return -1;
                    }

                    ImpCusdecHdr _cusdHdr = _financialDAL.GET_CUSDEC_HEADER_BY_DOC(_cusdecHdr.CUH_COM, _cusdecHdr.CUH_CNTY, _cusdecHdr.CUH_TP, _cusdecHdr.CUH_DOC_NO);
                    if (_cusdHdr != null)
                    {
                        if (_cusdHdr.CUH_TP == "TO" || _cusdHdr.CUH_TP == "LR" || _cusdHdr.CUH_TP == "AIR")
                        {
                            if (_csHdr.Ich_actl == 1)
                            {
                                msg = "Can't update. Costing already completed!";
                                doc = "";
                                _financialDAL.ConnectionClose();
                                return -1;
                            }
                        }

                        if (_cusdHdr.CUH_STUS == "C")
                        {
                            msg = "Cannot Proceed ! Entry has been already cancelled !";
                            doc = "";
                            _financialDAL.ConnectionClose();
                            return -1;
                        }

                        if (_cusdHdr.CUH_AST_STUS == 1)
                        {
                            msg = "Can't proceed. Entry already reimbursement!";
                            doc = "";
                            _financialDAL.ConnectionClose();
                            return -1;
                        }
                    }

                }

                if (_isconncopen == true)
                {
                    _financialDAL.BeginTransaction();
                    _generalDAL.BeginTransaction();
                    _inventoryDAL.BeginTransaction();
                    _cusserDal.BeginTransaction();
                }
                CusdecTypes _cusdecType = _generalDAL.GetCusdecEntryTypes(_cusdecHdr.CUH_COM).FindAll(y => y.Rcut_tp == _cusdecHdr.CUH_TP)[0];

                if (_isUpdate == false)
                {
                    _cusdecHdr.CUH_SEQ_NO = 0;
                    string _cusdecTypeAuto = _cusdecType.Rcut_tp;
                    if (_cusdecHdr.CUH_SUB_TP != "N/A")
                    {
                        CusdecSubTypes _cusdecSubType = _generalDAL.GetCusdecEntrySubTypes(_cusdecHdr.CUH_COM, _cusdecHdr.CUH_TP, _cusdecHdr.CUH_SUB_TP);
                        _cusdecType.Rcuit_auto_no_char = _cusdecSubType.Rcust_auto_no_char;
                    }
                    MasterAutoNumber _number = _financialDAL.GetAutoNumber(_cusdecTypeAuto, 0, _cusdecType.Rcuit_auto_no_char, "CNTY", _cusdecHdr.CUH_CNTY, null, _cusdecHdr.CUH_DT.Date.Year);
                    _cusdecHdr.CUH_DOC_NO = _cusdecType.Rcuit_auto_no_char + _cusdecHdr.CUH_DT.Date.Year.ToString() + string.Format("{0:00000}", _number.Aut_number);
                    _financialDAL.UpdateAutoNumber(_number);
                }
                string currloc = "";
                string _err;
                string oridoc = "";
                string oridoctp = "";

                #region Tobond, Longroom, Air Freight, Exbond

                if (_cusdecType.Rcuit_grup_id == 1 || _cusdecType.Rcuit_grup_id == 2)
                {
                    _effect = _financialDAL.SaveCusdecHdr(_cusdecHdr, out  _cusdecSeq);

                    if (_cusdecType.Rcuit_grup_id == 2)
                    {
                        if (_isUpdate == false)
                        {
                            p_inventoryRequest.Itr_req_no = _cusdecHdr.CUH_OTH_NO;
                            InventoryRequest reqHdrTemp = _financialDAL.GetInventoryRequestDataByReqNo(p_inventoryRequest);
                            currloc = reqHdrTemp.Itr_loc;
                            p_inventoryRequest.Ird_res_no = "";
                            p_inventoryRequest.Itr_act = 1;
                            p_inventoryRequest.Itr_anal1 = "";
                            p_inventoryRequest.Itr_anal2 = _cusdecHdr.CUH_SUN_REQ_NO;
                            p_inventoryRequest.Itr_bus_code = "N/A";
                            p_inventoryRequest.Itr_com = _cusdecHdr.CUH_COM;
                            p_inventoryRequest.Itr_country_cd = _cusdecHdr.CUH_CNTY;
                            p_inventoryRequest.Itr_cre_by = _cusdecHdr.CUH_CRE_BY;
                            p_inventoryRequest.Itr_cur_code = _cusdecHdr.CUH_CUR_CD;
                            p_inventoryRequest.Itr_direct = 0;
                            p_inventoryRequest.Itr_dt = _cusdecHdr.CUH_DT.Date;
                            p_inventoryRequest.Itr_exg_rate = _cusdecHdr.CUH_EX_RT;
                            p_inventoryRequest.Itr_exp_dt = _cusdecHdr.CUH_DT.Date;
                            p_inventoryRequest.Itr_issue_com = _cusdecHdr.CUH_COM;
                            p_inventoryRequest.Itr_issue_from = reqHdrTemp.Itr_issue_from;
                            p_inventoryRequest.Itr_loc = reqHdrTemp.Itr_loc;
                            p_inventoryRequest.Itr_mod_by = _cusdecHdr.CUH_CRE_BY;
                            p_inventoryRequest.Itr_note = "";
                            p_inventoryRequest.Itr_rec_to = reqHdrTemp.Itr_rec_to;
                            p_inventoryRequest.Itr_ref = _cusdecHdr.CUH_OTH_NO;
                            p_inventoryRequest.Itr_req_no = _cusdecHdr.CUH_DOC_NO;
                            p_inventoryRequest.Itr_seq_no = 0;
                            p_inventoryRequest.Itr_session_id = _cusdecHdr.CUH_CRE_SESSION;
                            p_inventoryRequest.Itr_stus = "A";
                            p_inventoryRequest.Itr_sub_tp = _cusdecHdr.CUH_SUB_TP;
                            p_inventoryRequest.Itr_tp = _cusdecHdr.CUH_TP;
                            p_inventoryRequest.Itr_job_no = _cusdecHdr.CUH_SUN_BOND_NO;

                            oridoc = p_inventoryRequest.Itr_ref;
                            oridoctp = p_inventoryRequest.Itr_tp;
                            _reqNo = _financialDAL.SaveInventoryRequest(p_inventoryRequest);

                            p_costSheetHeader.Ich_seq_no = _financialDAL.Get_BL_Seq();
                            p_costSheetHeader.Ich_com = _cusdecHdr.CUH_COM;
                            p_costSheetHeader.Ich_tp = _cusdecHdr.CUH_TP;
                            p_costSheetHeader.Ich_doc_no = _cusdecHdr.CUH_OTH_NO;
                            p_costSheetHeader.Ich_ref_no = _cusdecHdr.CUH_DOC_NO;
                            p_costSheetHeader.Ich_pre = 1;
                            p_costSheetHeader.Ich_pre_dt = _cusdecHdr.CUH_DT.Date;
                            p_costSheetHeader.Ich_pre_by = _cusdecHdr.CUH_CRE_BY;
                            p_costSheetHeader.Ich_pre_sysdt = DateTime.Now;
                            p_costSheetHeader.Ich_actl = 1;
                            p_costSheetHeader.Ich_actl_dt = _cusdecHdr.CUH_DT.Date;
                            p_costSheetHeader.Ich_actl_by = _cusdecHdr.CUH_CRE_BY;
                            p_costSheetHeader.Ich_actl_sysdt = DateTime.Now;
                            p_costSheetHeader.Ich_finl = 1;
                            p_costSheetHeader.Ich_finl_dt = _cusdecHdr.CUH_DT.Date;
                            p_costSheetHeader.Ich_finl_by = _cusdecHdr.CUH_CRE_BY;
                            p_costSheetHeader.Ich_finl_sysdt = DateTime.Now;
                            p_costSheetHeader.Ich_stus = "A";
                            p_costSheetHeader.Ich_is_grn = 0;
                            p_costSheetHeader.Ich_cur = _cusdecHdr.CUH_CUR_CD;
                            p_costSheetHeader.Ich_anal_1 = "";
                            p_costSheetHeader.Ich_anal_2 = "";
                            p_costSheetHeader.Ich_anal_3 = "";
                            p_costSheetHeader.Ich_anal_4 = "";
                            p_costSheetHeader.Ich_anal_5 = "";
                            p_costSheetHeader.Ich_ex_rt = _cusdecHdr.CUH_EX_RT;
                            _effect = _financialDAL.SAVE_IMP_CST_HDR_NEW(p_costSheetHeader, out _costSheetSeq);
                        }
                        else
                        {
                            if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") _cusdecHdr.CUH_OTH_NO = _cusdecHdr.CUH_OTH_NO;
                            p_costSheetHeader = _financialDAL.GET_IMP_CST_HDR_BY_DOC(_cusdecHdr.CUH_OTH_NO, "");
                            p_costSheetHeader.Ich_ref_no = _cusdecHdr.CUH_DOC_NO.ToString();
                            p_costSheetHeader.Ich_ex_rt = _cusdecHdr.CUH_EX_RT;
                            _effect = _financialDAL.SAVE_IMP_CST_HDR(p_costSheetHeader, out _costSheetSeq);
                        }
                    }
                    else
                    {
                        if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") _cusdecHdr.CUH_OTH_NO = _cusdecHdr.CUH_DOC_NO;
                        p_costSheetHeader = _financialDAL.GET_IMP_CST_HDR_BY_DOC(_cusdecHdr.CUH_OTH_NO, "I");
                        p_costSheetHeader.Ich_ref_no = _cusdecHdr.CUH_DOC_NO.ToString();
                        p_costSheetHeader.Ich_ex_rt = _cusdecHdr.CUH_EX_RT;
                        _effect = _financialDAL.SAVE_IMP_CST_HDR(p_costSheetHeader, out _costSheetSeq);
                    }

                    //decimal _per_compter_val = _cusdecHdr.CUH_COM_CHG / Convert.ToDecimal(_cusdecHdr.CUH_TOT_PKG);
                    //Edit by Chamal 02-Aug-2016
                    decimal _per_compter_val = _cusdecHdr.CUH_COM_CHG / _cusdecItm.Sum(t => t.Cui_qty);

                    _cusdecCost = _cusdecCost.OrderBy(x => x.Cus_line).ToList();

                    #region Cusdec Item
                    foreach (ImpCusdecItm cusdecItm in _cusdecItm)
                    {
                        decimal _tot_act_tax_val = 0;
                        decimal _tot_pre_tax_val = 0;
                        decimal _itemPrice = 0;
                        decimal _totCost = 0;
                        decimal _costEleVal = 0;
                        decimal _costEleValUSD = 0;
                        decimal _cif = 0;
                        decimal _per_item_compter_val = 0;

                        int _itmEleLine = 1;

                        foreach (ImpCusdecCost cusdecCost in _cusdecCost)
                        {
                            #region Item with Cost, Freight, Insurance elements
                            if (cusdecCost.Cus_ele_cd == "COST") _totCost = cusdecCost.Cus_amt;
                            _costEleValUSD = (cusdecItm.Cui_qty * cusdecItm.Cui_unit_rt / _totCost) * cusdecCost.Cus_amt;
                            _itemPrice = _itemPrice + _costEleValUSD;

                            if (_itemPrice > 0) _itemPrice = Math.Round(_itemPrice, 2);
                            _costEleVal = _costEleValUSD * _cusdecHdr.CUH_EX_RT;
                            if (_costEleVal > 0) _costEleVal = Math.Round(_costEleVal, 2);

                            ImpCusdecItmCost oImpCusdecItmCost = new ImpCusdecItmCost();
                            oImpCusdecItmCost.Cuic_anal_1 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_2 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_3 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_4 = string.Empty;
                            oImpCusdecItmCost.Cuic_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImpCusdecItmCost.Cuic_cre_session = _cusdecHdr.CUH_CRE_SESSION;
                            oImpCusdecItmCost.Cuic_doc_no = _cusdecHdr.CUH_DOC_NO;
                            oImpCusdecItmCost.Cuic_ele_mp = 1;
                            oImpCusdecItmCost.Cuic_ele_amt = _costEleVal;
                            oImpCusdecItmCost.Cuic_ele_amt = Math.Round(oImpCusdecItmCost.Cuic_ele_amt, 4);
                            oImpCusdecItmCost.Cuic_ele_amt_claim = 0;
                            oImpCusdecItmCost.Cuic_ele_base = 0;
                            oImpCusdecItmCost.Cuic_ele_rt = 0;
                            oImpCusdecItmCost.Cuic_ele_cat = cusdecCost.Cus_ele_cat;
                            oImpCusdecItmCost.Cuic_ele_tp = cusdecCost.Cus_ele_tp;
                            oImpCusdecItmCost.Cuic_ele_cd = cusdecCost.Cus_ele_cd;
                            oImpCusdecItmCost.Cuic_ele_line = _itmEleLine;
                            oImpCusdecItmCost.Cuic_itm_cd = cusdecItm.Cui_itm_cd;
                            oImpCusdecItmCost.Cuic_itm_line = cusdecItm.Cui_line;
                            oImpCusdecItmCost.Cuic_itm_stus = cusdecItm.Cui_itm_stus;
                            oImpCusdecItmCost.Cuic_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImpCusdecItmCost.Cuic_mod_session = _cusdecHdr.CUH_MOD_SESSION;
                            oImpCusdecItmCost.Cuic_print_order = 0;
                            oImpCusdecItmCost.Cuic_seq_no = _cusdecSeq;
                            oImpCusdecItmCost.Cuic_ele_amt_usd = _costEleValUSD;
                            oImpCusdecItmCost.Cuic_ele_amt_usd = Math.Round(oImpCusdecItmCost.Cuic_ele_amt_usd, 4);

                            p_cusdecCostEleItem.Add(oImpCusdecItmCost);

                            if (oImpCusdecItmCost.Cuic_ele_cat == "TOT")
                            {
                                ImportsCostElementItem oImportsCostElementItem = new ImportsCostElementItem();
                                oImportsCostElementItem.Ice_finl_amnt = 0;
                                oImportsCostElementItem.Ice_finl_rt = 0;
                                oImportsCostElementItem.Ice_actl_amnt = _costEleVal;
                                oImportsCostElementItem.Ice_actl_amnt = Math.Round(oImportsCostElementItem.Ice_actl_amnt, 4);
                                oImportsCostElementItem.Ice_actl_rt = oImportsCostElementItem.Ice_actl_rt / cusdecItm.Cui_qty;
                                oImportsCostElementItem.Ice_actl_rt = Math.Round(oImportsCostElementItem.Ice_actl_rt, 4);
                                oImportsCostElementItem.Ice_pre_amnt = _costEleVal;
                                oImportsCostElementItem.Ice_pre_amnt = Math.Round(oImportsCostElementItem.Ice_pre_amnt, 4);
                                oImportsCostElementItem.Ice_pre_rt = oImportsCostElementItem.Ice_pre_amnt / cusdecItm.Cui_qty;
                                oImportsCostElementItem.Ice_pre_rt = Math.Round(oImportsCostElementItem.Ice_pre_rt, 4);
                                oImportsCostElementItem.Ice_ele_amnt = _costEleVal;
                                oImportsCostElementItem.Ice_ele_amnt = Math.Round(oImportsCostElementItem.Ice_ele_amnt, 4);
                                oImportsCostElementItem.Ice_ele_rt = oImportsCostElementItem.Ice_ele_rt / cusdecItm.Cui_qty;
                                oImportsCostElementItem.Ice_ele_rt = Math.Round(oImportsCostElementItem.Ice_ele_rt, 4);
                                oImportsCostElementItem.Ice_anal_1 = "";
                                oImportsCostElementItem.Ice_anal_2 = "1";
                                oImportsCostElementItem.Ice_anal_3 = cusdecItm.Cui_qty.ToString();
                                oImportsCostElementItem.Ice_anal_4 = "";
                                oImportsCostElementItem.Ice_anal_5 = "";
                                oImportsCostElementItem.Ice_cre_by = _cusdecHdr.CUH_CRE_BY;
                                oImportsCostElementItem.Ice_doc_no = p_costSheetHeader.Ich_doc_no;
                                oImportsCostElementItem.Ice_ele_cat = cusdecCost.Cus_ele_cat;
                                oImportsCostElementItem.Ice_ele_tp = cusdecCost.Cus_ele_tp;
                                oImportsCostElementItem.Ice_ele_cd = cusdecCost.Cus_ele_cd;
                                oImportsCostElementItem.Ice_ele_cd_Desc = "";
                                oImportsCostElementItem.Ice_itm_cd = cusdecItm.Cui_itm_cd;
                                oImportsCostElementItem.Ice_itm_stus = cusdecItm.Cui_itm_stus;
                                oImportsCostElementItem.Ice_line = _itmEleLine;
                                oImportsCostElementItem.Ice_mod_by = _cusdecHdr.CUH_MOD_BY;
                                oImportsCostElementItem.Ice_ref_line = cusdecItm.Cui_line;
                                oImportsCostElementItem.Ice_seq_no = _costSheetSeq;
                                oImportsCostElementItem.Ice_session_id = _cusdecHdr.CUH_CRE_SESSION;
                                oImportsCostElementItem.Ice_stus = 1;
                                p_costSheetCostEleItem.Add(oImportsCostElementItem);
                                _itmEleLine++;
                            }
                            #endregion
                        }
                        _cif = Math.Round(_itemPrice, 2) * _cusdecHdr.CUH_EX_RT;
                        _cif = Math.Round(_cif, 2);

                        if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                        {
                            List<mst_proc_ele> _pr_list = _financialDAL.GetProcDutyByConsignee(_cusdecHdr.CUH_COM, _cusdecHdr.CUH_PROC_CD, _cusdecHdr.CUH_CONSI_CD);
                            if (_pr_list != null)
                            {
                                if (_pr_list.Count == 0)
                                {
                                    _effect = -1;
                                    _msg = "Can't Process!! Please Setup Proc/Code , Consignee, Duties !! ";
                                    _financialDAL.TransactionRollback();
                                    _generalDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    _cusserDal.TransactionRollback();
                                    msg = _msg;
                                    doc = "";
                                    return _effect;
                                }
                            }
                            else
                            {
                                _effect = -1;
                                _msg = "Can't Process!! Please Setup Proc/Code , Consignee, Duties !! ";
                                _financialDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _cusserDal.TransactionRollback();
                                msg = _msg;
                                doc = "";
                                return _effect;
                            }
                        }

                        List<HsCode> _hsDutyValues = GetHSDutyCalculation(_hsopen, _cusdecHdr.CUH_COM, _cusdecHdr.CUH_DT, "C", _cusdecHdr.CUH_CONSI_CD, _cusdecHdr.CUH_PROC_CD, _cusdecHdr.CUH_TP, "ALL", _cusdecHdr.CUH_CNTY, _cusdecType.Rcuit_duty_mp, _cif, cusdecItm.Cui_itm_cd, cusdecItm.Cui_hs_cd, cusdecItm.Cui_qty, cusdecItm.Cui_net_mass, cusdecItm.Cui_def_cnty, out _tot_act_tax_val, out _tot_pre_tax_val);
                        foreach (HsCode hsDutyValues in _hsDutyValues)
                        {
                            #region Item with Duty elements
                            ImpCusdecItmCost oImpCusdecItmCost = new ImpCusdecItmCost();
                            oImpCusdecItmCost.Cuic_anal_1 = "DUTY";
                            oImpCusdecItmCost.Cuic_anal_2 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_3 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_4 = string.Empty;
                            oImpCusdecItmCost.Cuic_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImpCusdecItmCost.Cuic_cre_session = _cusdecHdr.CUH_CRE_SESSION;
                            oImpCusdecItmCost.Cuic_doc_no = _cusdecHdr.CUH_DOC_NO;
                            oImpCusdecItmCost.Cuic_ele_mp = hsDutyValues.Mhc_mp;
                            oImpCusdecItmCost.Cuic_ele_amt = hsDutyValues.Tax_amount;
                            oImpCusdecItmCost.Cuic_ele_amt_claim = hsDutyValues.Tax_claim;
                            oImpCusdecItmCost.Cuic_ele_base = hsDutyValues.Tax_base;
                            oImpCusdecItmCost.Cuic_ele_rt = hsDutyValues.Tax_rate;
                            oImpCusdecItmCost.Cuic_ele_cat = hsDutyValues.Mhc_cost_cat;
                            oImpCusdecItmCost.Cuic_ele_tp = hsDutyValues.Mhc_cost_tp;
                            oImpCusdecItmCost.Cuic_ele_cd = hsDutyValues.Mhc_cost_ele;
                            oImpCusdecItmCost.Cuic_ele_line = _itmEleLine;
                            oImpCusdecItmCost.Cuic_itm_cd = cusdecItm.Cui_itm_cd;
                            oImpCusdecItmCost.Cuic_itm_line = cusdecItm.Cui_line;
                            oImpCusdecItmCost.Cuic_itm_stus = cusdecItm.Cui_itm_stus;
                            oImpCusdecItmCost.Cuic_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImpCusdecItmCost.Cuic_mod_session = _cusdecHdr.CUH_MOD_SESSION;
                            oImpCusdecItmCost.Cuic_print_order = 0;
                            oImpCusdecItmCost.Cuic_seq_no = _cusdecSeq;
                            p_cusdecCostEleItem.Add(oImpCusdecItmCost);

                            ImportsCostElementItem oImportsCostElementItem = new ImportsCostElementItem();
                            //if (hsDutyValues.Mhc_mp == 1)
                            //{
                            oImportsCostElementItem.Ice_finl_amnt = hsDutyValues.Tax_amount - hsDutyValues.Tax_claim;
                            //oImportsCostElementItem.Ice_finl_rt = hsDutyValues.Tax_rate;
                            oImportsCostElementItem.Ice_finl_rt = oImportsCostElementItem.Ice_finl_amnt / cusdecItm.Cui_qty;
                            oImportsCostElementItem.Ice_actl_amnt = hsDutyValues.Tax_amount - hsDutyValues.Tax_claim;
                            //oImportsCostElementItem.Ice_actl_rt = hsDutyValues.Tax_rate;
                            oImportsCostElementItem.Ice_actl_rt = oImportsCostElementItem.Ice_actl_amnt / cusdecItm.Cui_qty;

                            oImportsCostElementItem.Ice_finl_amnt = Math.Round(oImportsCostElementItem.Ice_finl_amnt, 4);
                            oImportsCostElementItem.Ice_finl_rt = Math.Round(oImportsCostElementItem.Ice_finl_rt, 4);
                            oImportsCostElementItem.Ice_actl_amnt = Math.Round(oImportsCostElementItem.Ice_actl_amnt, 4);
                            oImportsCostElementItem.Ice_actl_rt = Math.Round(oImportsCostElementItem.Ice_actl_rt, 4);
                            //}
                            oImportsCostElementItem.Ice_pre_amnt = hsDutyValues.Tax_amount - hsDutyValues.Tax_claim;
                            //oImportsCostElementItem.Ice_pre_rt = hsDutyValues.Tax_rate;
                            oImportsCostElementItem.Ice_pre_rt = oImportsCostElementItem.Ice_pre_amnt / cusdecItm.Cui_qty;
                            oImportsCostElementItem.Ice_ele_amnt = hsDutyValues.Tax_amount - hsDutyValues.Tax_claim;
                            oImportsCostElementItem.Ice_ele_rt = hsDutyValues.Tax_rate;

                            oImportsCostElementItem.Ice_pre_amnt = Math.Round(oImportsCostElementItem.Ice_pre_amnt, 4);
                            oImportsCostElementItem.Ice_pre_rt = Math.Round(oImportsCostElementItem.Ice_pre_rt, 4);
                            oImportsCostElementItem.Ice_ele_amnt = Math.Round(oImportsCostElementItem.Ice_ele_amnt, 4);
                            oImportsCostElementItem.Ice_ele_rt = Math.Round(oImportsCostElementItem.Ice_ele_rt, 4);
                            oImportsCostElementItem.Ice_anal_1 = "DUTY";
                            if (hsDutyValues.Mhc_mp == 1)
                            { oImportsCostElementItem.Ice_anal_2 = "1"; }
                            else
                            { oImportsCostElementItem.Ice_anal_2 = "0"; }
                            oImportsCostElementItem.Ice_anal_3 = cusdecItm.Cui_qty.ToString();
                            oImportsCostElementItem.Ice_anal_4 = "";
                            oImportsCostElementItem.Ice_anal_5 = "";
                            oImportsCostElementItem.Ice_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImportsCostElementItem.Ice_doc_no = p_costSheetHeader.Ich_doc_no;
                            oImportsCostElementItem.Ice_ele_cat = hsDutyValues.Mhc_cost_cat;
                            oImportsCostElementItem.Ice_ele_tp = hsDutyValues.Mhc_cost_tp;
                            oImportsCostElementItem.Ice_ele_cd = hsDutyValues.Mhc_cost_ele;
                            oImportsCostElementItem.Ice_ele_cd_Desc = "";
                            oImportsCostElementItem.Ice_itm_cd = cusdecItm.Cui_itm_cd;
                            oImportsCostElementItem.Ice_itm_stus = cusdecItm.Cui_itm_stus;
                            oImportsCostElementItem.Ice_line = _itmEleLine;
                            oImportsCostElementItem.Ice_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImportsCostElementItem.Ice_ref_line = cusdecItm.Cui_line;
                            oImportsCostElementItem.Ice_seq_no = _costSheetSeq;
                            oImportsCostElementItem.Ice_session_id = _cusdecHdr.CUH_CRE_SESSION;
                            oImportsCostElementItem.Ice_stus = 1;
                            p_costSheetCostEleItem.Add(oImportsCostElementItem);
                            _itmEleLine++;
                            #endregion
                        }

                        #region Add Computer Charge for Cost Element Item
                        if (_per_compter_val > 0)
                        {
                            _per_item_compter_val = Math.Round(_per_compter_val * cusdecItm.Cui_qty, 4);
                            ImpCusdecItmCost oImpCusdecItmCost1 = new ImpCusdecItmCost();
                            oImpCusdecItmCost1.Cuic_anal_1 = string.Empty;
                            oImpCusdecItmCost1.Cuic_anal_2 = string.Empty;
                            oImpCusdecItmCost1.Cuic_anal_3 = string.Empty;
                            oImpCusdecItmCost1.Cuic_anal_4 = string.Empty;
                            oImpCusdecItmCost1.Cuic_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImpCusdecItmCost1.Cuic_cre_session = _cusdecHdr.CUH_CRE_SESSION;
                            oImpCusdecItmCost1.Cuic_doc_no = _cusdecHdr.CUH_DOC_NO;
                            oImpCusdecItmCost1.Cuic_ele_mp = 1;
                            oImpCusdecItmCost1.Cuic_ele_amt = _per_item_compter_val;
                            oImpCusdecItmCost1.Cuic_ele_amt_claim = 0;
                            oImpCusdecItmCost1.Cuic_ele_base = 1;
                            oImpCusdecItmCost1.Cuic_ele_rt = 1;
                            oImpCusdecItmCost1.Cuic_ele_cat = "OTH";
                            oImpCusdecItmCost1.Cuic_ele_tp = "OTH";
                            oImpCusdecItmCost1.Cuic_ele_cd = "CE&S";
                            oImpCusdecItmCost1.Cuic_ele_line = _itmEleLine;
                            oImpCusdecItmCost1.Cuic_itm_cd = cusdecItm.Cui_itm_cd;
                            oImpCusdecItmCost1.Cuic_itm_line = cusdecItm.Cui_line;
                            oImpCusdecItmCost1.Cuic_itm_stus = cusdecItm.Cui_itm_stus;
                            oImpCusdecItmCost1.Cuic_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImpCusdecItmCost1.Cuic_mod_session = _cusdecHdr.CUH_MOD_SESSION;
                            oImpCusdecItmCost1.Cuic_print_order = 0;
                            oImpCusdecItmCost1.Cuic_seq_no = _cusdecSeq;
                            p_cusdecCostEleItem.Add(oImpCusdecItmCost1);

                            ImportsCostElementItem oImportsCostElementItem1 = new ImportsCostElementItem();
                            oImportsCostElementItem1.Ice_finl_amnt = 0;
                            oImportsCostElementItem1.Ice_finl_rt = 0;
                            oImportsCostElementItem1.Ice_actl_amnt = _per_item_compter_val;
                            oImportsCostElementItem1.Ice_actl_rt = _per_item_compter_val / cusdecItm.Cui_qty; ;
                            oImportsCostElementItem1.Ice_pre_amnt = _per_item_compter_val;
                            oImportsCostElementItem1.Ice_pre_rt = _per_item_compter_val / cusdecItm.Cui_qty;
                            oImportsCostElementItem1.Ice_ele_amnt = _per_item_compter_val;
                            oImportsCostElementItem1.Ice_ele_rt = 1;
                            oImportsCostElementItem1.Ice_anal_1 = "";
                            oImportsCostElementItem1.Ice_anal_2 = "1";
                            oImportsCostElementItem1.Ice_anal_3 = "";
                            oImportsCostElementItem1.Ice_anal_4 = "";
                            oImportsCostElementItem1.Ice_anal_5 = "";
                            oImportsCostElementItem1.Ice_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImportsCostElementItem1.Ice_doc_no = p_costSheetHeader.Ich_doc_no;
                            oImportsCostElementItem1.Ice_ele_cat = "OTH";
                            oImportsCostElementItem1.Ice_ele_tp = "OTH";
                            oImportsCostElementItem1.Ice_ele_cd = "CE&S";
                            oImportsCostElementItem1.Ice_ele_cd_Desc = "";
                            oImportsCostElementItem1.Ice_itm_cd = cusdecItm.Cui_itm_cd;
                            oImportsCostElementItem1.Ice_itm_stus = cusdecItm.Cui_itm_stus;
                            oImportsCostElementItem1.Ice_line = _itmEleLine;
                            oImportsCostElementItem1.Ice_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImportsCostElementItem1.Ice_ref_line = cusdecItm.Cui_line;
                            oImportsCostElementItem1.Ice_seq_no = _costSheetSeq;
                            oImportsCostElementItem1.Ice_session_id = _cusdecHdr.CUH_CRE_SESSION;
                            oImportsCostElementItem1.Ice_stus = 1;
                            p_costSheetCostEleItem.Add(oImportsCostElementItem1);
                            _itmEleLine++;
                        }
                        #endregion


                        decimal _unitpriceRs = _cif / cusdecItm.Cui_qty;
                        decimal _unitpricePreRs = (_cif + _per_item_compter_val + _tot_pre_tax_val) / cusdecItm.Cui_qty;
                        decimal _unitpriceActualRs = (_cif + _per_item_compter_val + _tot_act_tax_val) / cusdecItm.Cui_qty;

                        if (_cusdecType.Rcuit_grup_id == 2)
                        {
                            ImportsCostItem _siCostItems = null;
                            if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                            {
                                _siCostItems = _financialDAL.GET_IMP_CST_ITM_BY_SI_ITEM(cusdecItm.Cui_anal_1, cusdecItm.Cui_oth_doc_line);

                            }
                            else
                            {
                                _siCostItems = _financialDAL.GET_IMP_CST_ITM_BY_SI_ITEM(_cusdecHdr.CUH_SUN_REQ_NO, cusdecItm.Cui_line);
                            }
                            _unitpriceActualRs = _siCostItems.Ici_actl_rt + ((_cusdecHdr.CUH_COM_CHG / cusdecItm.Cui_qty) + (_tot_act_tax_val / cusdecItm.Cui_qty));
                        }
                        //get to bond line
                        if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                        {

                            DataTable tobondline = _financialDAL.GetBOIlineDT(cusdecItm.Cui_oth_doc_no, cusdecItm.Cui_oth_doc_line);
                            if (Convert.ToInt32(tobondline.Rows[0][0].ToString()) > 0)
                            {
                                cusdecItm.Cui_pi_line = Convert.ToInt32(tobondline.Rows[0][0].ToString());
                            }
                            else
                            {
                                _effect = -1;
                                _msg = "Can't Process!! (To Bond Oth Line No 0) ";
                                _financialDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _cusserDal.TransactionRollback();
                                msg = _msg;
                                doc = "";
                                return _effect;
                            }

                        }
                        if (_unitpriceRs > 0) _unitpriceRs = Math.Round(_unitpriceRs, 4);
                        if (_unitpricePreRs > 0) _unitpricePreRs = Math.Round(_unitpricePreRs, 4);
                        if (_unitpriceActualRs > 0) _unitpriceActualRs = Math.Round(_unitpriceActualRs, 4);

                        #region Create Cost Sheet Item
                        ImportsCostItem oImportsCostItem = new ImportsCostItem();
                        oImportsCostItem.Ici_actl_amt = _unitpriceActualRs * cusdecItm.Cui_qty;
                        oImportsCostItem.Ici_actl_amt = Math.Round(oImportsCostItem.Ici_actl_amt, 4);
                        oImportsCostItem.Ici_actl_rt = _unitpriceActualRs;
                        oImportsCostItem.Ici_actl_rt = Math.Round(oImportsCostItem.Ici_actl_rt, 4);
                        oImportsCostItem.Ici_anal_1 = "";
                        oImportsCostItem.Ici_anal_2 = "";
                        oImportsCostItem.Ici_anal_3 = "";
                        oImportsCostItem.Ici_anal_4 = "";
                        oImportsCostItem.Ici_anal_5 = "";
                        oImportsCostItem.Ici_base_line = 0;
                        oImportsCostItem.Ici_cre_by = _cusdecHdr.CUH_CRE_BY;
                        oImportsCostItem.Ici_cre_dt = DateTime.Now.Date;
                        oImportsCostItem.Ici_doc_no = p_costSheetHeader.Ich_doc_no;
                        oImportsCostItem.Ici_f_line = 0;
                        oImportsCostItem.Ici_finl_amt = 0;
                        oImportsCostItem.Ici_finl_rt = 0;
                        oImportsCostItem.Ici_itm_cd = cusdecItm.Cui_itm_cd;
                        oImportsCostItem.Ici_itm_stus = cusdecItm.Cui_itm_stus;
                        oImportsCostItem.Ici_line = cusdecItm.Cui_line;
                        oImportsCostItem.Ici_mod_by = _cusdecHdr.CUH_MOD_BY;
                        oImportsCostItem.Ici_mod_dt = DateTime.Now.Date;
                        oImportsCostItem.Ici_pre_amt = _unitpricePreRs * cusdecItm.Cui_qty;
                        oImportsCostItem.Ici_pre_rt = _unitpricePreRs;
                        oImportsCostItem.Ici_qty = cusdecItm.Cui_qty;
                        oImportsCostItem.Ici_ref_line = 0;
                        oImportsCostItem.Ici_seq_no = _costSheetSeq;
                        oImportsCostItem.Ici_session_id = _cusdecHdr.CUH_CRE_SESSION;
                        oImportsCostItem.Ici_stus = 1;
                        oImportsCostItem.Ici_unit_amt = _unitpriceRs * cusdecItm.Cui_qty;
                        oImportsCostItem.Ici_unit_amt = Math.Round(oImportsCostItem.Ici_unit_amt, 4);
                        oImportsCostItem.Ici_unit_rt = _unitpriceRs;
                        oImportsCostItem.Ici_unit_rt = Math.Round(oImportsCostItem.Ici_unit_rt, 4);
                        p_costSheetItem.Add(oImportsCostItem);
                        #endregion
                        #region Create Cusdec Item other columns
                        cusdecItm.Cui_seq_no = _cusdecSeq;
                        cusdecItm.Cui_doc_no = _cusdecHdr.CUH_DOC_NO;
                        cusdecItm.Cui_cre_by = _cusdecHdr.CUH_CRE_BY;
                        cusdecItm.Cui_cre_session = _cusdecHdr.CUH_CRE_SESSION;
                        cusdecItm.Cui_mod_by = _cusdecHdr.CUH_MOD_BY;
                        cusdecItm.Cui_mod_session = _cusdecHdr.CUH_MOD_SESSION;
                        cusdecItm.Cui_orgin_cnty = _cusdecHdr.CUH_CNTY_OF_ORIGIN;
                        #endregion
                        cusdecItm.Cui_bal_qty1 = cusdecItm.Cui_qty; //Add by Chamal 19-Aug-2016
                        //SUBODANA 2016-10-20
                        if ((_cusdecHdr.CUH_TP == "EX" | _cusdecHdr.CUH_TP == "RE" | _cusdecHdr.CUH_TP == "BOI" | _cusdecHdr.CUH_TP == "EXP") && _isUpdate == false)
                        {
                            Int32 CUSDECLINE = 0;
                            if (_cusdecHdr.CUH_TP == "EX" | _cusdecHdr.CUH_TP == "RE")
                            {
                                cusdecItm.Cui_oth_doc_no = _cusdecHdr.CUH_SUN_BOND_NO.ToString();
                                CUSDECLINE = cusdecItm.Cui_line;
                            }
                            else if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                            {
                                CUSDECLINE = cusdecItm.Cui_oth_doc_line;
                            }
                            //CHECK QTY BALANCE 2016-11-09

                            //TOBOND QTY
                            List<TobondItemQty> Tobondqty = _financialDAL.GetTobondQty(cusdecItm.Cui_oth_doc_no, CUSDECLINE);
                            decimal tobontqty = Tobondqty.Sum(a => a.Tobond_Qty);
                            //TOBOND BASE ALL ENTRY SUM
                            List<TobondItemQty> EntryQty = _financialDAL.GetEntryQty(cusdecItm.Cui_oth_doc_no, CUSDECLINE, _cusdecHdr.CUH_COM);
                            decimal entryqty = EntryQty.Sum(a => a.Entry_Qty);
                            if (tobontqty < entryqty + cusdecItm.Cui_qty)
                            {
                                _effect = -1;
                                _msg = "Please Check " + "Tobond No :" + cusdecItm.Cui_oth_doc_no + " Item Code :" + cusdecItm.Cui_itm_cd;
                                _financialDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _cusserDal.TransactionRollback();
                                msg = _msg;
                                doc = "";
                                return _effect;
                            }
                        }
                        _financialDAL.SaveCusdecItem(cusdecItm);
                        if ((_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") && _isUpdate == false)
                        {
                            _effect = _financialDAL.UpdateToBondBalQty(cusdecItm.Cui_oth_doc_no.ToString(), cusdecItm.Cui_oth_doc_line, Convert.ToInt32(cusdecItm.Cui_qty));

                        }
                        else if ((_cusdecHdr.CUH_TP == "EX" || _cusdecHdr.CUH_TP == "RE") && _isUpdate == false)
                        {
                            _effect = _financialDAL.UpdateToBondBalQty(_cusdecHdr.CUH_SUN_BOND_NO.ToString(), cusdecItm.Cui_line, Convert.ToInt32(cusdecItm.Cui_qty));
                        }
                        _financialDAL.UPDATE_COST_SHEET_ITEM(oImportsCostItem);
                        if (_cusdecType.Rcuit_grup_id == 2)
                        {
                            InventoryRequestItem _inventoryRequestItem = new InventoryRequestItem();
                            MasterItem _mstItem = new MasterItem();
                            _mstItem.Mi_cd = cusdecItm.Cui_itm_cd;
                            _inventoryRequestItem.MasterItem = _mstItem;
                            _inventoryRequestItem.Itri_advan_qty = 0;
                            _inventoryRequestItem.Itri_base_req_line = 0;
                            _inventoryRequestItem.Itri_base_req_no = "";
                            _inventoryRequestItem.Itri_batchno = "";
                            _inventoryRequestItem.Itri_buffer = 0;
                            _inventoryRequestItem.Itri_cncl_qty = 0;
                            _inventoryRequestItem.Itri_com = _cusdecHdr.CUH_COM;
                            _inventoryRequestItem.Itri_seq_no = _reqNo;
                            _inventoryRequestItem.Itri_line_no = cusdecItm.Cui_line;
                            _inventoryRequestItem.Itri_itm_cd = cusdecItm.Cui_itm_cd;
                            _inventoryRequestItem.Itri_itm_stus = cusdecItm.Cui_itm_stus;
                            _inventoryRequestItem.Itri_qty = cusdecItm.Cui_qty;
                            _inventoryRequestItem.Itri_bqty = cusdecItm.Cui_qty;
                            _inventoryRequestItem.Itri_unit_price = 0;
                            _inventoryRequestItem.Itri_app_qty = cusdecItm.Cui_qty;
                            _inventoryRequestItem.Itri_bqty = cusdecItm.Cui_qty;
                            _inventoryRequestItem.Itri_job_no = _cusdecHdr.CUH_SUN_BOND_NO;
                            _inventoryRequestItem.Itri_job_line = cusdecItm.Cui_line;
                            _inventoryRequestItem.Mi_app_itm_cond = cusdecItm.itri_itm_cond;
                            if (cusdecItm.itri_itm_cond)
                            {
                                _inventoryRequestItem.ITRI_ITM_COND = "1";
                            }

                            if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                            {
                                _inventoryRequestItem.Itri_job_no = cusdecItm.Cui_oth_doc_no;
                                _inventoryRequestItem.Itri_job_line = cusdecItm.Cui_oth_doc_line;
                            }

                            _inventoryRequestItem.MasterItem.Mi_cd = cusdecItm.Cui_itm_cd;
                            _inventoryRequestItem.Itri_res_no = cusdecItm.Cui_anal_5.ToString();
                            if (!string.IsNullOrEmpty(cusdecItm.Cui_anal_3) && _cusdecHdr.CUH_TP != "BOI" && _cusdecHdr.CUH_TP != "EXP")
                            {
                                _inventoryRequestItem.Itri_res_line = Convert.ToInt32(cusdecItm.Cui_anal_3.ToString());
                            }
                            _inventoryRequestItem.Itri_res_qty = cusdecItm.Cui_bal_qty3;
                            if ((_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") && (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no) && _inventoryRequestItem.Itri_res_no != "N/A"))
                            {
                                _inventoryRequestItem.Itri_res_qty = cusdecItm.Cui_qty;
                            }
                            _financialDAL.SaveInventoryRequestItem(_inventoryRequestItem);

                            //subodana pass reslog data(Lakshan Common Function)
                            if (isres == 1 && (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no) && _inventoryRequestItem.Itri_res_no != "N/A"))
                            {
                                INR_RES_LOG _resLog = new INR_RES_LOG();
                                _resLog.IRL_RES_NO = _inventoryRequestItem.Itri_res_no;
                                _resLog.IRL_CURT_DOC_NO = oridoc;
                                if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                                {
                                    _resLog.IRL_CURT_DOC_NO = cusdecItm.Cui_anal_2;
                                    _resLog.IRL_RES_NO = cusdecItm.Cui_anal_5;
                                }
                                _resLog.IRL_CURT_DOC_TP = "CUSA";
                                List<INR_RES_LOG> LODDATA = _financialDAL.GET_INR_RES_LOG_DATA_NEW(_resLog);
                                if (LODDATA.Count > 0)
                                {
                                    if ((_cusdecHdr.CUH_TP == "EX" || _cusdecHdr.CUH_TP == "RE" || _cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") && _inventoryRequestItem.Itri_res_no != "" && _inventoryRequestItem.Itri_res_no != "N/A" && _isUpdate == false)
                                    {
                                        string ORIGLOC = LODDATA.First().IRL_ORIG_LOC;
                                        currloc = LODDATA.First().IRL_CURT_LOC;
                                        INR_RES_LOG _obj = new INR_RES_LOG();
                                        _obj.IRL_RES_NO = _inventoryRequestItem.Itri_res_no;
                                        if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                                        {
                                            _obj.IRL_RES_LINE = Convert.ToInt32(cusdecItm.Cui_oth_doc_line.ToString());
                                            _obj.IRL_LINE = Convert.ToInt32(cusdecItm.Cui_oth_doc_line.ToString());
                                        }
                                        else
                                        {
                                            _obj.IRL_RES_LINE = Convert.ToInt32(cusdecItm.Cui_anal_3.ToString());
                                            _obj.IRL_LINE = Convert.ToInt32(cusdecItm.Cui_anal_3.ToString());
                                        }

                                        _obj.IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd;
                                        _obj.IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus;
                                        _obj.IRL_RES_QTY = _inventoryRequestItem.Itri_res_qty;
                                        _obj.IRL_RES_BQTY = _inventoryRequestItem.Itri_res_qty;
                                        _obj.IRL_ORIG_DOC_TP = "CUSA";
                                        _obj.IRL_ORIG_DOC_NO = cusdecItm.Cui_anal_2;
                                        _obj.IRL_ORIG_LOC = ORIGLOC;
                                        _obj.IRL_CURT_DOC_TP = _cusdecHdr.CUH_TP;
                                        _obj.IRL_CURT_DOC_NO = _cusdecHdr.CUH_DOC_NO;
                                        _obj.IRL_CURT_DOC_DT = _cusdecHdr.CUH_DT;
                                        _obj.IRL_CURT_COM = _cusdecHdr.CUH_COM;
                                        _obj.IRL_CURT_LOC = currloc;
                                        _obj.IRL_ACT = 1;
                                        _obj.IRL_CRE_BY = _cusdecHdr.CUH_CRE_BY;
                                        _obj.IRL_CRE_DT = _cusdecHdr.CUH_CRE_DT;
                                        _obj.IRL_MOD_DT = _cusdecHdr.CUH_MOD_DT;
                                        _obj.IRL_CRE_SESSION = _cusdecHdr.CUH_CRE_SESSION;
                                        _obj.IRL_MOD_SESSION = _cusdecHdr.CUH_CRE_SESSION;
                                        _obj.IRL_RES_WP = 1;
                                        if (_inventoryDAL != null)
                                        {
                                            int effectnew = ReservationLogDataUpdateCancel(_obj, 0, _financialDAL, out _err);
                                            if (effectnew < 1)
                                            {
                                                _effect = -1;
                                                _msg = _err;
                                                _financialDAL.TransactionRollback();
                                                _generalDAL.TransactionRollback();
                                                _inventoryDAL.TransactionRollback();
                                                _cusserDal.TransactionRollback();
                                                msg = "Reservation Data Not Updated...";
                                                doc = "";
                                                return _effect;
                                            }
                                        }

                                    }

                                }
                                else
                                {
                                    _effect = -1;
                                    //_msg = _err;
                                    _financialDAL.TransactionRollback();
                                    _generalDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    _cusserDal.TransactionRollback();
                                    msg = "Reservation Data Not Avalable...";
                                    doc = "";
                                    return _effect;
                                }
                            }


                        }

                    }
                    #endregion

                    #region Cusdec Cost / Cost Sheet Cost  Process
                    int _cusdecCostLine = 0;
                    foreach (ImpCusdecCost cusdecCost in _cusdecCost)
                    {
                        _cusdecCostLine = _cusdecCostLine + 1;
                        ImpCusdecCost oCusdecCost = new ImpCusdecCost();
                        oCusdecCost.Cuc_seq_no = _cusdecSeq;
                        oCusdecCost.Cus_act = 1;
                        oCusdecCost.Cus_amt = cusdecCost.Cus_amt;
                        oCusdecCost.Cus_amt_com = cusdecCost.Cus_amt * _cusdecHdr.CUH_EX_RT;
                        oCusdecCost.Cus_cre_by = _cusdecHdr.CUH_CRE_BY;
                        oCusdecCost.Cus_cre_dt = DateTime.Now.Date;
                        oCusdecCost.Cus_doc_no = _cusdecHdr.CUH_DOC_NO;
                        oCusdecCost.Cus_ele_cat = cusdecCost.Cus_ele_cat;
                        oCusdecCost.Cus_ele_cd = cusdecCost.Cus_ele_cd;
                        oCusdecCost.Cus_ele_cd_name = "";
                        oCusdecCost.Cus_ele_tp = cusdecCost.Cus_ele_tp;
                        oCusdecCost.Cus_line = _cusdecCostLine;
                        p_cusdecCost.Add(oCusdecCost);
                    }
                    var _resultCusdecCost = p_cusdecCostEleItem.GroupBy(x => new { x.Cuic_ele_cat, x.Cuic_ele_tp, x.Cuic_ele_cd, x.Cuic_ele_mp, x.Cuic_anal_1 }).Select(g => new { g.Key.Cuic_ele_cat, g.Key.Cuic_ele_tp, g.Key.Cuic_ele_cd, g.Key.Cuic_ele_mp, g.Key.Cuic_anal_1, amt = g.Sum(p => p.Cuic_ele_amt - p.Cuic_ele_amt_claim) }).Where(a => a.Cuic_ele_mp == 1 && a.Cuic_anal_1 == "DUTY");
                    foreach (var resultCusdecCost in _resultCusdecCost)
                    {
                        _cusdecCostLine = _cusdecCostLine + 1;
                        ImpCusdecCost oCusdecCost = new ImpCusdecCost();
                        oCusdecCost.Cuc_seq_no = _cusdecSeq;
                        oCusdecCost.Cus_act = 1;
                        oCusdecCost.Cus_amt = 0;
                        oCusdecCost.Cus_amt_com = resultCusdecCost.amt;
                        oCusdecCost.Cus_cre_by = _cusdecHdr.CUH_CRE_BY;
                        oCusdecCost.Cus_cre_dt = DateTime.Now.Date;
                        oCusdecCost.Cus_doc_no = _cusdecHdr.CUH_DOC_NO;
                        oCusdecCost.Cus_ele_cat = resultCusdecCost.Cuic_ele_cat;
                        oCusdecCost.Cus_ele_cd = resultCusdecCost.Cuic_ele_cd;
                        oCusdecCost.Cus_ele_cd_name = "";
                        oCusdecCost.Cus_ele_tp = resultCusdecCost.Cuic_ele_tp;
                        oCusdecCost.Cus_line = _cusdecCostLine;
                        p_cusdecCost.Add(oCusdecCost);
                    }
                    _cusdecCostLine = 0;
                    var _resultCostSheetCost = p_costSheetCostEleItem.GroupBy(x => new { x.Ice_ele_cat, x.Ice_ele_tp, x.Ice_ele_cd }).Select(g => new { g.Key.Ice_ele_cat, g.Key.Ice_ele_tp, g.Key.Ice_ele_cd, eleAmt = g.Sum(p => p.Ice_ele_amnt), preAmt = g.Sum(p => p.Ice_pre_amnt), actAmt = g.Sum(p => p.Ice_actl_amnt), finlAmt = g.Sum(p => p.Ice_finl_amnt) });
                    foreach (var resultCostSheetCost in _resultCostSheetCost)
                    {
                        _cusdecCostLine = _cusdecCostLine + 1;
                        ImportsCostElement oCostElement = new ImportsCostElement();
                        oCostElement.Icet_actl_rt = resultCostSheetCost.actAmt;
                        oCostElement.Icet_actl_rt = Math.Round(oCostElement.Icet_actl_rt, 4);
                        oCostElement.Icet_anal_1 = "";
                        oCostElement.Icet_anal_2 = "";
                        oCostElement.Icet_anal_3 = "";
                        oCostElement.Icet_anal_4 = "";
                        oCostElement.Icet_anal_5 = "";
                        oCostElement.Icet_cre_by = _cusdecHdr.CUH_CRE_BY;
                        oCostElement.Icet_cre_dt = DateTime.Now.Date;
                        oCostElement.Icet_doc_no = p_costSheetHeader.Ich_doc_no.Trim();
                        oCostElement.Icet_ele_cat = resultCostSheetCost.Ice_ele_cat;
                        oCostElement.Icet_ele_cd = resultCostSheetCost.Ice_ele_cd;
                        oCostElement.Icet_ele_cd_desc = "";
                        oCostElement.Icet_ele_rt = resultCostSheetCost.eleAmt;
                        oCostElement.Icet_ele_rt = Math.Round(oCostElement.Icet_ele_rt, 4);
                        oCostElement.Icet_ele_tp = resultCostSheetCost.Ice_ele_tp;
                        oCostElement.Icet_finl_rt = resultCostSheetCost.finlAmt;
                        oCostElement.Icet_finl_rt = Math.Round(oCostElement.Icet_finl_rt, 4);
                        oCostElement.Icet_line = _cusdecCostLine;
                        oCostElement.Icet_mod_by = _cusdecHdr.CUH_MOD_BY;
                        oCostElement.Icet_mod_dt = _cusdecHdr.CUH_MOD_DT.Date;
                        oCostElement.Icet_pre_rt = resultCostSheetCost.preAmt;
                        oCostElement.Icet_pre_rt = Math.Round(oCostElement.Icet_pre_rt, 4);
                        oCostElement.Icet_seq_no = _costSheetSeq;
                        oCostElement.Icet_session_id = _cusdecHdr.CUH_CRE_SESSION;
                        oCostElement.Icet_stus = 1;
                        p_costSheetCostEleSum.Add(oCostElement);
                    }
                    #endregion

                    #region Cusdec Duty Total Process
                    var _resultCusdecDutyTot = p_cusdecCostEleItem.GroupBy(x => new { x.Cuic_ele_cat, x.Cuic_ele_tp, x.Cuic_ele_cd, x.Cuic_anal_1, x.Cuic_ele_mp }).Select(g => new { g.Key.Cuic_ele_cat, g.Key.Cuic_ele_tp, g.Key.Cuic_ele_cd, g.Key.Cuic_anal_1, g.Key.Cuic_ele_mp, amtELE = g.Sum(p => p.Cuic_ele_amt), amtUNClaim = g.Sum(p => p.Cuic_ele_amt) - g.Sum(p => p.Cuic_ele_amt_claim), amtClaim = g.Sum(p => p.Cuic_ele_amt_claim) }).Where(a => a.Cuic_anal_1 == "DUTY" && a.Cuic_ele_mp == 1);
                    foreach (var resultCusdecDutyTot in _resultCusdecDutyTot)
                    {
                        ImpCusdecDutySum oImpCusdecDutySum = new ImpCusdecDutySum();
                        oImpCusdecDutySum.CUDS_COST_CAT = resultCusdecDutyTot.Cuic_ele_cat;
                        oImpCusdecDutySum.CUDS_COST_TP = resultCusdecDutyTot.Cuic_ele_tp;
                        oImpCusdecDutySum.CUDS_COST_ELE = resultCusdecDutyTot.Cuic_ele_cd;
                        oImpCusdecDutySum.CUDS_COST_ELE_AMT = resultCusdecDutyTot.amtELE;
                        oImpCusdecDutySum.CUDS_COST_CLAIM_AMT = resultCusdecDutyTot.amtClaim;
                        oImpCusdecDutySum.CUDS_COST_UNCLAIM_AMT = resultCusdecDutyTot.amtUNClaim;
                        oImpCusdecDutySum.CUDS_COST_STL_AMT = 0;
                        oImpCusdecDutySum.CUDS_SEQ_NO = _cusdecSeq;
                        oImpCusdecDutySum.CUDS_DOC_NO = _cusdecHdr.CUH_DOC_NO;
                        p_cusdecDutySum.Add(oImpCusdecDutySum);
                    }


                    ImpCusdecDutySum oImpCusdecDutySumCom = new ImpCusdecDutySum();
                    oImpCusdecDutySumCom.CUDS_COST_CAT = "OTH";
                    oImpCusdecDutySumCom.CUDS_COST_TP = "OTH";
                    oImpCusdecDutySumCom.CUDS_COST_ELE = "CE&S";
                    oImpCusdecDutySumCom.CUDS_COST_ELE_AMT = _cusdecHdr.CUH_COM_CHG;
                    oImpCusdecDutySumCom.CUDS_COST_CLAIM_AMT = 0;
                    oImpCusdecDutySumCom.CUDS_COST_UNCLAIM_AMT = _cusdecHdr.CUH_COM_CHG;
                    oImpCusdecDutySumCom.CUDS_COST_STL_AMT = 0;
                    oImpCusdecDutySumCom.CUDS_SEQ_NO = _cusdecSeq;
                    oImpCusdecDutySumCom.CUDS_DOC_NO = _cusdecHdr.CUH_DOC_NO;
                    p_cusdecDutySum.Add(oImpCusdecDutySumCom);
                    #endregion

                    //Save Cusdec Item with cost element
                    if (_isUpdate == true)
                    {
                        _financialDAL.DeleteCusdecElementItems(_cusdecHdr.CUH_SEQ_NO, _costSheetSeq);
                    }
                    foreach (ImpCusdecItmCost cusdecItmCost in p_cusdecCostEleItem) _financialDAL.SaveCusdecItmCost(cusdecItmCost);
                    //Save Cost Sheet Item with cost element
                    foreach (ImportsCostElementItem costSheetCostEleItem in p_costSheetCostEleItem) _financialDAL.UPDATE_COST_SHEET_ITEM_ELEMENT(costSheetCostEleItem);
                    //Save Cusdec Total cost element
                    foreach (ImpCusdecCost cusdecCost in p_cusdecCost) _financialDAL.SaveCusdecCost(cusdecCost);
                    //Save Cost Sheet Total cost element
                    foreach (ImportsCostElement costSheetCostEleSum in p_costSheetCostEleSum) _financialDAL.UPDATE_COST_SHEET_ELE_SUM(costSheetCostEleSum);
                    //Save Cusdec Duty Total 
                    foreach (ImpCusdecDutySum cusdecDutySum in p_cusdecDutySum) _financialDAL.SaveCusdecDutySum(cusdecDutySum);
                    if (_cusdecType.Rcuit_grup_id == 2) _financialDAL.Update_ReqHeaderStatus("F", _cusdecHdr.CUH_MOD_BY.ToString(), _cusdecHdr.CUH_COM.ToString(), _cusdecHdr.CUH_OTH_NO.ToString());
                }
                #endregion
                // UPDATE TO BOND ORDER LINE NO
                if (glbtype == "TO")
                {
                    saveorderno(_cusdecHdr.CUH_DOC_NO, _cusdecHdr.CUH_COM);
                }


                if (_isUpdate == false)
                {
                    _msg = "Document saved successfully. System generated document no is " + _cusdecHdr.CUH_DOC_NO;
                    _doc = _cusdecHdr.CUH_DOC_NO;
                }
                else
                {
                    _msg = "Document no " + _cusdecHdr.CUH_DOC_NO + " amended successfully.";
                    _doc = _cusdecHdr.CUH_DOC_NO;
                }
                if (_isconncopen == true)
                {
                    _financialDAL.TransactionCommit();
                    _generalDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _cusserDal.TransactionCommit();
                }


                //_financialDAL.TransactionRollback();
                //_generalDAL.TransactionRollback();
                //_inventoryDAL.TransactionRollback();

            }
            catch (Exception ex)
            {
                _effect = -99;
                _msg = ex.Message.ToString();
                _financialDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _cusserDal.TransactionRollback();
            }
            finally
            {
                if (_isconncopen == true)
                {
                    _financialDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    _generalDAL.ConnectionClose();
                    _cusserDal.ConnectionClose();
                }
            }
            msg = _msg;
            doc = _doc;
            return _effect;

        }

        //SUBODANA
        public int saveorderno(string entryNo, string com)
        {

            DataTable Hdrdata = new DataTable();
            DataTable maindata = new DataTable();
            DataTable Param = new DataTable();


            DataRow dr;
            int i = 0;
            int j = 0;

            int linenumber = 0;
            int nxtlinenumber = 0;
            int maxlinenumber = 0;

            Param.Columns.Add("Company", typeof(string));
            Param.Columns.Add("User", typeof(string));
            Param.Columns.Add("Location", typeof(string));
            Param.Columns.Add("cui_itm_desc", typeof(string));
            Param.Columns.Add("cui_gross_mass", typeof(string));
            Param.Columns.Add("cui_net_mass", typeof(string));
            Param.Columns.Add("cui_bl_no", typeof(string));
            Param.Columns.Add("cui_orgin_cnty", typeof(string));
            Param.Columns.Add("cui_pkgs", typeof(string));
            Param.Columns.Add("Line", typeof(int));
            Param.Columns.Add("MaxLine", typeof(int));
            Param.Columns.Add("cui_hs_cd", typeof(string));
            Param.Columns.Add("cui_itm_price", typeof(decimal));
            Param.Columns.Add("cui_qty", typeof(string));
            Param.Columns.Add("cui_bal_qty1", typeof(string));
            Param.Columns.Add("cui_bal_qty2", typeof(string));
            Param.Columns.Add("cui_bal_qty3", typeof(string));
            Param.Columns.Add("cui_req_qty", typeof(string));



            //tax values
            DataTable taxvalues = new DataTable();
            DataRow trow;

            taxvalues.Columns.Add("Type", typeof(string));
            taxvalues.Columns.Add("Tax", typeof(decimal));
            taxvalues.Columns.Add("Rate", typeof(decimal));
            taxvalues.Columns.Add("Ammount", typeof(decimal));
            taxvalues.Columns.Add("MP", typeof(decimal));
            taxvalues.Columns.Add("Line", typeof(int));
            taxvalues.Columns.Add("Line2", typeof(int));
            taxvalues.Columns.Add("Line3", typeof(int));
            taxvalues.Columns.Add("cui_itm_desc", typeof(string));
            taxvalues.Columns.Add("cui_gross_mass", typeof(string));
            taxvalues.Columns.Add("cui_net_mass", typeof(string));
            taxvalues.Columns.Add("cui_bl_no", typeof(string));
            taxvalues.Columns.Add("cui_orgin_cnty", typeof(string));
            taxvalues.Columns.Add("cui_pkgs", typeof(string));

            DataTable firsgood = new DataTable();
            DataRow firstrow;

            firsgood.Columns.Add("cui_itm_desc", typeof(string));
            firsgood.Columns.Add("cui_gross_mass", typeof(string));
            firsgood.Columns.Add("cui_net_mass", typeof(string));
            firsgood.Columns.Add("cui_bl_no", typeof(string));
            firsgood.Columns.Add("cui_orgin_cnty", typeof(string));
            firsgood.Columns.Add("cui_pkgs", typeof(string));
            firsgood.Columns.Add("cui_hs_cd", typeof(string));
            firsgood.Columns.Add("cui_qty", typeof(string));
            firsgood.Columns.Add("cui_bal_qty2", typeof(string));
            firsgood.Columns.Add("cui_bal_qty3", typeof(string));
            firsgood.Columns.Add("cui_req_qty", typeof(string));
            firsgood.Columns.Add("cui_itm_price", typeof(decimal));
            firsgood.Columns.Add("cui_line", typeof(Int32));

            //header data
            Hdrdata = _financialDAL.GetCusdecHDRData(entryNo, com);
            // all goods data
            maindata = _financialDAL.GetGoodsDeclarationDetails(entryNo);
            DataView dv = maindata.DefaultView;
            dv.Sort = "cui_hs_cd ,cui_model, cuic_itm_cd,cui_line";
            maindata = dv.ToTable();

            int licount = 1;


            if (maindata.Rows.Count > 0)
            {
                foreach (DataRow dtRow in maindata.Rows)
                {
                    int nxtline;
                    linenumber = Convert.ToInt32(maindata.Rows[i]["cui_line"]);
                    if (i + 1 < maindata.Rows.Count)
                    {
                        nxtline = Convert.ToInt32(maindata.Rows[i + 1]["cui_line"]);
                    }
                    else
                    {
                        nxtline = 99999;
                    }



                    if (linenumber != nxtline)
                    {
                        trow = taxvalues.NewRow();
                        trow["Type"] = maindata.Rows[i]["cuic_ele_cd"].ToString();
                        trow["Tax"] = maindata.Rows[i]["cuic_ele_base"].ToString();
                        trow["Rate"] = maindata.Rows[i]["cuic_ele_rt"].ToString();
                        trow["Ammount"] = maindata.Rows[i]["cuic_ele_amt"].ToString();
                        trow["MP"] = maindata.Rows[i]["cuic_ele_mp"].ToString();
                        trow["Line"] = licount;
                        trow["Line2"] = licount;
                        trow["Line3"] = licount;
                        trow["cui_itm_desc"] = maindata.Rows[i]["cui_itm_desc"].ToString() + " " + maindata.Rows[i]["cui_model"].ToString();
                        trow["cui_gross_mass"] = maindata.Rows[i]["cui_gross_mass"].ToString();
                        trow["cui_net_mass"] = maindata.Rows[i]["cui_net_mass"].ToString();
                        trow["cui_bl_no"] = maindata.Rows[i]["cui_bl_no"].ToString();
                        trow["cui_orgin_cnty"] = maindata.Rows[i]["cui_orgin_cnty"].ToString();
                        trow["cui_pkgs"] = maindata.Rows[i]["cui_pkgs"].ToString();

                        taxvalues.Rows.Add(trow);
                        maxlinenumber = linenumber;
                        i++;
                        licount++;
                    }
                    else
                    {
                        trow = taxvalues.NewRow();
                        trow["Type"] = maindata.Rows[i]["cuic_ele_cd"].ToString();
                        trow["Tax"] = maindata.Rows[i]["cuic_ele_base"].ToString();
                        trow["Rate"] = maindata.Rows[i]["cuic_ele_rt"].ToString();
                        trow["Ammount"] = maindata.Rows[i]["cuic_ele_amt"].ToString();
                        trow["MP"] = maindata.Rows[i]["cuic_ele_mp"].ToString();
                        trow["Line"] = licount;
                        trow["Line2"] = licount;
                        trow["Line3"] = licount;
                        trow["cui_itm_desc"] = maindata.Rows[i]["cui_itm_desc"].ToString() + " " + maindata.Rows[i]["cui_model"].ToString();
                        trow["cui_gross_mass"] = maindata.Rows[i]["cui_gross_mass"].ToString();
                        trow["cui_net_mass"] = maindata.Rows[i]["cui_net_mass"].ToString();
                        trow["cui_bl_no"] = maindata.Rows[i]["cui_bl_no"].ToString();
                        trow["cui_orgin_cnty"] = maindata.Rows[i]["cui_orgin_cnty"].ToString();
                        trow["cui_pkgs"] = maindata.Rows[i]["cui_pkgs"].ToString();

                        taxvalues.Rows.Add(trow);
                        maxlinenumber = linenumber;
                        i++;
                    }


                }
            }


            if (Hdrdata.Rows.Count > 0)
            {
                trow = taxvalues.NewRow();
                trow["Type"] = "CE&S";
                trow["Tax"] = "1";
                trow["Rate"] = "1";
                trow["Ammount"] = Hdrdata.Rows[0]["CUH_COM_CHG"].ToString();
                trow["MP"] = "1";
                trow["Line"] = 1;
                trow["Line2"] = 1;
                trow["Line3"] = 1;
                taxvalues.Rows.Add(trow);

            }



            if (maindata != null)
            {
                foreach (DataRow dtRow in maindata.Rows)
                {
                    if (j < maindata.Rows.Count - 1)
                    {
                        linenumber = Convert.ToInt32(maindata.Rows[j]["cui_line"]);
                        nxtlinenumber = Convert.ToInt32(maindata.Rows[j + 1]["cui_line"]);

                        if (linenumber != nxtlinenumber)
                        {
                            dr = Param.NewRow();
                            dr["Company"] = "ABL";
                            dr["User"] = "ADMIN";
                            dr["Location"] = "DMP";
                            dr["cui_itm_desc"] = maindata.Rows[j]["cui_itm_desc"].ToString() + " " + maindata.Rows[j]["cui_model"].ToString();
                            dr["cui_gross_mass"] = maindata.Rows[j]["cui_gross_mass"].ToString();
                            dr["cui_net_mass"] = maindata.Rows[j]["cui_net_mass"].ToString();
                            dr["cui_bl_no"] = maindata.Rows[j]["cui_bl_no"].ToString();
                            dr["cui_orgin_cnty"] = maindata.Rows[j]["cui_orgin_cnty"].ToString();
                            dr["cui_pkgs"] = maindata.Rows[j]["cui_pkgs"].ToString();
                            dr["Line"] = linenumber;
                            dr["MaxLine"] = maxlinenumber;
                            dr["cui_hs_cd"] = maindata.Rows[j]["cui_hs_cd"].ToString();
                            dr["cui_qty"] = maindata.Rows[j]["cui_qty"].ToString();
                            dr["cui_bal_qty1"] = maindata.Rows[j]["cui_bal_qty1"].ToString();
                            dr["cui_bal_qty2"] = maindata.Rows[j]["cui_bal_qty2"].ToString();
                            dr["cui_bal_qty3"] = maindata.Rows[j]["cui_preferance"].ToString();
                            dr["cui_req_qty"] = maindata.Rows[j]["cui_req_qty"].ToString();
                            dr["cui_itm_price"] = Convert.ToDecimal(maindata.Rows[j]["cui_itm_price"].ToString());

                            Param.Rows.Add(dr);
                        }
                        if (j == maindata.Rows.Count - 2)
                        {
                            dr = Param.NewRow();
                            dr["Company"] = "ABL";
                            dr["User"] = "ADMIN";
                            dr["Location"] = "DMP";
                            dr["cui_itm_desc"] = maindata.Rows[j]["cui_itm_desc"].ToString() + " " + maindata.Rows[j]["cui_model"].ToString();
                            dr["cui_gross_mass"] = maindata.Rows[j]["cui_gross_mass"].ToString();
                            dr["cui_net_mass"] = maindata.Rows[j]["cui_net_mass"].ToString();
                            dr["cui_bl_no"] = maindata.Rows[j]["cui_bl_no"].ToString();
                            dr["cui_orgin_cnty"] = maindata.Rows[j]["cui_orgin_cnty"].ToString();
                            dr["cui_pkgs"] = maindata.Rows[j]["cui_pkgs"].ToString();
                            dr["Line"] = linenumber;
                            dr["MaxLine"] = maxlinenumber;
                            dr["cui_hs_cd"] = maindata.Rows[j]["cui_hs_cd"].ToString();
                            dr["cui_qty"] = maindata.Rows[j]["cui_qty"].ToString();
                            dr["cui_bal_qty1"] = maindata.Rows[j]["cui_bal_qty1"].ToString();
                            dr["cui_bal_qty2"] = maindata.Rows[j]["cui_bal_qty2"].ToString();
                            dr["cui_bal_qty3"] = maindata.Rows[j]["cui_preferance"].ToString();
                            dr["cui_req_qty"] = maindata.Rows[j]["cui_req_qty"].ToString();
                            dr["cui_itm_price"] = Convert.ToDecimal(maindata.Rows[j]["cui_itm_price"].ToString());
                            Param.Rows.Add(dr);
                        }
                    }
                    j++;
                }
            }

            if (maindata.Rows.Count > 0)
            {

                firstrow = firsgood.NewRow();

                firstrow["cui_itm_desc"] = maindata.Rows[0]["cui_itm_desc"].ToString() + " " + maindata.Rows[0]["cui_model"].ToString();
                firstrow["cui_gross_mass"] = maindata.Rows[0]["cui_gross_mass"].ToString();
                firstrow["cui_net_mass"] = maindata.Rows[0]["cui_net_mass"].ToString();
                firstrow["cui_bl_no"] = maindata.Rows[0]["cui_bl_no"].ToString();
                firstrow["cui_orgin_cnty"] = maindata.Rows[0]["cui_orgin_cnty"].ToString();
                firstrow["cui_pkgs"] = maindata.Rows[0]["cui_pkgs"].ToString();
                firstrow["cui_hs_cd"] = maindata.Rows[0]["cui_hs_cd"].ToString();
                firstrow["cui_qty"] = maindata.Rows[0]["cui_qty"].ToString();
                firstrow["cui_bal_qty2"] = maindata.Rows[0]["cui_bal_qty2"].ToString();
                firstrow["cui_bal_qty3"] = maindata.Rows[0]["cui_preferance"].ToString();
                firstrow["cui_req_qty"] = maindata.Rows[0]["cui_req_qty"].ToString();
                firstrow["cui_itm_price"] = Convert.ToDecimal(maindata.Rows[0]["cui_itm_price"].ToString());
                firstrow["cui_line"] = Convert.ToInt32(maindata.Rows[0]["cui_line"].ToString());
                firsgood.Rows.Add(firstrow);

                int effect = _financialDAL.UpdateOtherdocline(entryNo, Convert.ToInt32(maindata.Rows[0]["cui_line"].ToString()), "", 1);
            }
            // create second page table
            DataTable secondpagedata = new DataTable();
            DataRow srow;

            secondpagedata.Columns.Add("cui_itm_desc1", typeof(string));
            secondpagedata.Columns.Add("cui_gross_mass1", typeof(string));
            secondpagedata.Columns.Add("cui_net_mass1", typeof(string));
            secondpagedata.Columns.Add("cui_bl_no1", typeof(string));
            secondpagedata.Columns.Add("cui_orgin_cnty1", typeof(string));
            secondpagedata.Columns.Add("cui_itm_desc2", typeof(string));
            secondpagedata.Columns.Add("cui_gross_mass2", typeof(string));
            secondpagedata.Columns.Add("cui_net_mass2", typeof(string));
            secondpagedata.Columns.Add("cui_bl_no2", typeof(string));
            secondpagedata.Columns.Add("cui_orgin_cnty2", typeof(string));
            secondpagedata.Columns.Add("cui_itm_desc3", typeof(string));
            secondpagedata.Columns.Add("cui_gross_mass3", typeof(string));
            secondpagedata.Columns.Add("cui_net_mass3", typeof(string));
            secondpagedata.Columns.Add("cui_bl_no3", typeof(string));
            secondpagedata.Columns.Add("cui_orgin_cnty3", typeof(string));
            secondpagedata.Columns.Add("Line1", typeof(Int16));
            secondpagedata.Columns.Add("Line2", typeof(Int16));
            secondpagedata.Columns.Add("Line3", typeof(Int16));
            secondpagedata.Columns.Add("LineCount1", typeof(Int16));
            secondpagedata.Columns.Add("LineCount2", typeof(Int16));
            secondpagedata.Columns.Add("LineCount3", typeof(Int16));
            secondpagedata.Columns.Add("cui_hs_cd1", typeof(string));
            secondpagedata.Columns.Add("cui_hs_cd2", typeof(string));
            secondpagedata.Columns.Add("cui_hs_cd3", typeof(string));
            secondpagedata.Columns.Add("cui_itm_price1", typeof(decimal));
            secondpagedata.Columns.Add("cui_itm_price2", typeof(decimal));
            secondpagedata.Columns.Add("cui_itm_price3", typeof(decimal));
            secondpagedata.Columns.Add("cui_bal_qty11", typeof(string));
            secondpagedata.Columns.Add("cui_bal_qty12", typeof(string));
            secondpagedata.Columns.Add("cui_bal_qty13", typeof(string));
            secondpagedata.Columns.Add("cui_bal_qty21", typeof(string));
            secondpagedata.Columns.Add("cui_bal_qty22", typeof(string));
            secondpagedata.Columns.Add("cui_bal_qty23", typeof(string));
            secondpagedata.Columns.Add("cui_bal_qty31", typeof(string));
            secondpagedata.Columns.Add("cui_bal_qty32", typeof(string));
            secondpagedata.Columns.Add("cui_bal_qty33", typeof(string));
            int itm = 0;
            i = 1;
            int q = 2;
            if (Param.Rows.Count > 0)
            {
                for (int k = 0; k <= Param.Rows.Count; k = k + 3)
                {
                    srow = secondpagedata.NewRow();
                    if (i < Param.Rows.Count)
                    {
                        itm += 1;
                        srow["cui_itm_desc1"] = Param.Rows[i]["cui_itm_desc"].ToString();
                        srow["cui_gross_mass1"] = Param.Rows[i]["cui_gross_mass"].ToString();
                        srow["cui_net_mass1"] = Param.Rows[i]["cui_net_mass"].ToString();
                        srow["cui_bl_no1"] = Param.Rows[i]["cui_bl_no"].ToString();
                        srow["cui_orgin_cnty1"] = Param.Rows[i]["cui_orgin_cnty"].ToString();
                        srow["Line1"] = Convert.ToInt16(i + 1);
                        srow["LineCount1"] = Convert.ToInt16(i + 1);
                        srow["cui_hs_cd1"] = Param.Rows[i]["cui_hs_cd"].ToString();
                        srow["cui_itm_price1"] = Convert.ToDecimal(Param.Rows[i]["cui_itm_price"].ToString());
                        srow["cui_bal_qty11"] = Param.Rows[i]["cui_qty"].ToString();
                        srow["cui_bal_qty21"] = Param.Rows[i]["cui_bal_qty2"].ToString();
                        srow["cui_bal_qty31"] = Param.Rows[i]["cui_bal_qty3"].ToString();

                        int effect = _financialDAL.UpdateOtherdocline(entryNo, Convert.ToInt32(Param.Rows[i]["Line"].ToString()), "", q);
                        q++;
                    }

                    if (i + 1 < Param.Rows.Count)
                    {
                        itm += 1;
                        srow["cui_itm_desc2"] = Param.Rows[i + 1]["cui_itm_desc"].ToString();
                        srow["cui_gross_mass2"] = Param.Rows[i + 1]["cui_gross_mass"].ToString();
                        srow["cui_net_mass2"] = Param.Rows[i + 1]["cui_net_mass"].ToString();
                        srow["cui_bl_no2"] = Param.Rows[i + 1]["cui_bl_no"].ToString();
                        srow["cui_orgin_cnty2"] = Param.Rows[i + 1]["cui_orgin_cnty"].ToString();
                        srow["Line2"] = Convert.ToInt16(i + 2);
                        srow["LineCount2"] = Convert.ToInt16(i + 2);
                        srow["cui_hs_cd2"] = Param.Rows[i + 1]["cui_hs_cd"].ToString();
                        srow["cui_itm_price2"] = Convert.ToDecimal(Param.Rows[i + 1]["cui_itm_price"].ToString());
                        srow["cui_bal_qty12"] = Param.Rows[i + 1]["cui_qty"].ToString();
                        srow["cui_bal_qty22"] = Param.Rows[i + 1]["cui_bal_qty2"].ToString();
                        srow["cui_bal_qty32"] = Param.Rows[i + 1]["cui_bal_qty3"].ToString();

                        int effect = _financialDAL.UpdateOtherdocline(entryNo, Convert.ToInt32(Param.Rows[i + 1]["Line"].ToString()), "", q);
                        q++;
                    }

                    if (i + 2 < Param.Rows.Count)
                    {
                        itm += 1;
                        srow["cui_itm_desc3"] = Param.Rows[i + 2]["cui_itm_desc"].ToString();
                        srow["cui_gross_mass3"] = Param.Rows[i + 2]["cui_gross_mass"].ToString();
                        srow["cui_net_mass3"] = Param.Rows[i + 2]["cui_net_mass"].ToString();
                        srow["cui_bl_no3"] = Param.Rows[i + 2]["cui_bl_no"].ToString();
                        srow["cui_orgin_cnty3"] = Param.Rows[i + 2]["cui_orgin_cnty"].ToString();
                        srow["Line3"] = Convert.ToInt16(i + 3);
                        srow["LineCount3"] = Convert.ToInt16(i + 3);
                        srow["cui_hs_cd3"] = Param.Rows[i + 2]["cui_hs_cd"].ToString();
                        srow["cui_itm_price3"] = Convert.ToDecimal(Param.Rows[i + 2]["cui_itm_price"].ToString());
                        srow["cui_bal_qty13"] = Param.Rows[i + 2]["cui_qty"].ToString();
                        srow["cui_bal_qty23"] = Param.Rows[i + 2]["cui_bal_qty2"].ToString();
                        srow["cui_bal_qty33"] = Param.Rows[i + 2]["cui_bal_qty3"].ToString();

                        int effect = _financialDAL.UpdateOtherdocline(entryNo, Convert.ToInt32(Param.Rows[i + 2]["Line"].ToString()), "", q);
                        q++;
                    }

                    secondpagedata.Rows.Add(srow);
                    i = i + 3;
                }
            }




            return 1;
        }

        #region Sub function using in Tobond, Longroom, Air entries


        public int UpdateBLItemHS(string _docNo, Int32 _lineNo, string _hs, string _gross, string _net, string prefferr, string entry)
        {
            int _eff = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _eff = _financialDAL.UpdateBLItemHS(_docNo, _lineNo, _hs, _gross, _net, prefferr, entry);
            _financialDAL.ConnectionClose();
            return _eff;
        }

        public List<HsCode> GetHSDutyCalculation(bool _isOpenConnection, string _company, DateTime _docDT, string _cognType, string _cognCode, string _procCode, string _bondType, string _hsEntryType, string _ownCountry, int _allMPVal, decimal _cif_val, string _itemCode, string _hsCode, decimal _qty, decimal _netMass, string _defCountry, out decimal _totActTaxVal, out decimal _totPreTaxVal)
        {
            if (_isOpenConnection == true) { _financialDAL = new FinancialDAL(); _financialDAL.ConnectionOpen(); }
            decimal CID_VAL = 0;
            decimal CID_BASE = 0;
            decimal ESE_VAL = 0;
            decimal ESE_BASE = 0;
            decimal SUR_VAL = 0;
            decimal PAL_VAL = 0;
            decimal CESS_VAL = 0;
            decimal EXCISE_VAL = 0;
            decimal EXCISE_RATE = 0;
            decimal EXCISE_BASE = 0;
            decimal VAT_VAL = 0;
            decimal VAT_BASE = 0;
            decimal RIDL_VAL = 0;
            decimal RIDL_BASE = 0;
            decimal SRL_VAL = 0;
            decimal SRL_BASE = 0;
            decimal NBT_VAL = 0;
            decimal NBT_BASE = 0;

            decimal _tot_Actual_tax_val = 0;
            decimal _tot_Pre_tax_val = 0;

            _cif_val = Math.Round(_cif_val);

            List<HsCode> _hsCodeTaxRate1 = new List<HsCode>();
            _hsCodeTaxRate1 = GetHSTaxRates(_hsCode, _hsEntryType, _ownCountry, _defCountry);
            List<MST_COST_ELE> _eleList = _financialDAL.GET_COST_ELE(_company, "DUTY");
            _eleList = _eleList.FindAll(x => x.Mcae_ele_cat == "CUSTM");

            CustomsProcedureCodes _proc = new CustomsProcedureCodes();
            List<CustomsProcedureCodes> _proclist = new List<CustomsProcedureCodes>();
            _proc.Mph_ignore_duty = 0;
            if (_bondType == "EX" || _bondType == "RE")
            {
                _proclist = _financialDAL.GetCustomsProcedureCodes(_ownCountry, _company, "", "", _bondType, _procCode);
                if (_proclist != null && _proclist.Count > 0)
                {
                    _proc = _proclist[0];
                }
                if (_proc != null)
                {
                    if (_proc.Mph_ignore_duty == 1)
                    {
                        foreach (HsCode hsCodeTaxRate in _hsCodeTaxRate1)
                        {
                            hsCodeTaxRate.Mhc_mp = 0;
                        }
                    }
                }
            }

            var query = from t1 in _hsCodeTaxRate1
                        join t2 in _eleList
                        on new { A = t1.Mhc_cost_cat, B = t1.Mhc_cost_tp, C = t1.Mhc_cost_ele } equals new { A = t2.Mcae_ele_cat, B = t2.Mcae_ele_tp, C = t2.Mcae_cd }
                        orderby Convert.ToInt32(t2.Mcae_anal_1)
                        select t1;

            List<HsCode> _hsCodeTaxRate = new List<HsCode>();
            _hsCodeTaxRate = query.ToList();

            List<HsCodeClaim> _hsClaimList = new List<HsCodeClaim>();
            _hsClaimList = GetHSClaimList(_hsCode, _hsEntryType, _company, _ownCountry, _defCountry);

            if (_hsCodeTaxRate != null && _hsCodeTaxRate.Count > 0)
            {
                foreach (HsCode hsCodeTaxRate in _hsCodeTaxRate)
                {
                    if (_bondType != "BOI")
                    {
                        if (_allMPVal == 0) hsCodeTaxRate.Mhc_mp = 0;
                        if (_allMPVal == 1) hsCodeTaxRate.Mhc_mp = 1;

                    }
                    if (_bondType != "EXP")
                    {
                        if (_allMPVal == 0) hsCodeTaxRate.Mhc_mp = 0;
                        if (_allMPVal == 1) hsCodeTaxRate.Mhc_mp = 1;

                    }

                    if (_bondType == "BOI" || _bondType == "EXP")
                    {
                        List<mst_proc_ele> _pr_list = _financialDAL.GetProcDutyByConsignee(_company, _procCode, _cognCode);

                        _pr_list = _pr_list.Where(a => a.Mphe_cost_ele == hsCodeTaxRate.Mhc_cost_ele).ToList();

                        if (_pr_list != null)
                        {
                            if (_pr_list.Count > 0)
                            {
                                hsCodeTaxRate.Mhc_mp = _pr_list.First().Mphe_mp;
                            }
                            else
                            {
                                hsCodeTaxRate.Mhc_mp = 0;
                            }
                        }
                        else
                        {
                            hsCodeTaxRate.Mhc_mp = 0;
                        }

                    }
                    if (_bondType == "EX")
                    {
                        if (_proc.Mph_ignore_duty == 1)
                        {
                            hsCodeTaxRate.Mhc_mp = 0;
                        }
                    }
                    if (_bondType == "RE") //Chamal 11-Aug-2016
                    {
                        hsCodeTaxRate.Mhc_mp = 0;
                        if (hsCodeTaxRate.Mhc_cost_ele == "PAL")
                        {
                            if (_proc.Mph_ignore_duty == 0)
                            {
                                hsCodeTaxRate.Mhc_mp = 1;
                            }
                        }
                    }

                    Decimal _claimRate = GetHSElementClaimRates(_hsClaimList, _hsEntryType, _company, _ownCountry, _defCountry, hsCodeTaxRate.Mhc_cost_ele.ToString());
                    if (_hsEntryType == "ALL")
                    {
                        if (hsCodeTaxRate.Mhc_cost_ele == "VAT")
                        {
                            _claimRate = 100;
                        }
                    }
                    #region CID
                    if (hsCodeTaxRate.Mhc_cost_ele == "CID")
                    {
                        decimal RATE_VALUE = CAL_CID(_cif_val, hsCodeTaxRate.Mhc_cost_ele_amt);
                        decimal UNIT_VALUE = _qty * hsCodeTaxRate.Mhc_custom__price;
                        decimal WEIGHT_VALUE = _netMass * hsCodeTaxRate.Mhc_weight_price;

                        string Max_Str = "Z";
                        int Mc = 0;
                        int Mx = 0;
                        decimal[] Val_Det = { RATE_VALUE, UNIT_VALUE, WEIGHT_VALUE };
                        string[] Str_Code = { "R", "U", "W" };
                        decimal Max_V = 0;
                        Max_V = Val_Det[0];
                        for (Mc = 0; Mc <= Val_Det.Length - 1; Mc++)
                        {
                            if (Max_V <= Val_Det[Mc])
                            {
                                Max_V = Val_Det[Mc];
                                Mx = Mc;
                            }
                        }

                        Max_Str = Str_Code[Mx];

                        if (RATE_VALUE == 0 && UNIT_VALUE == 0 && WEIGHT_VALUE == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = _cif_val;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        else if (Max_Str == "R")
                        {
                            hsCodeTaxRate.Duty_value = RATE_VALUE;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = _cif_val;
                            hsCodeTaxRate.Tax_amount = RATE_VALUE;
                        }
                        else if (Max_Str == "U")
                        {
                            hsCodeTaxRate.Duty_value = UNIT_VALUE;
                            hsCodeTaxRate.Tax_rate = _qty;
                            hsCodeTaxRate.Tax_base = hsCodeTaxRate.Mhc_custom__price;
                            hsCodeTaxRate.Tax_amount = UNIT_VALUE;
                        }
                        else if (Max_Str == "W")
                        {
                            hsCodeTaxRate.Duty_value = WEIGHT_VALUE;
                            hsCodeTaxRate.Tax_rate = _netMass;
                            hsCodeTaxRate.Tax_base = hsCodeTaxRate.Mhc_weight_price;
                            hsCodeTaxRate.Tax_amount = WEIGHT_VALUE;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        CID_VAL = hsCodeTaxRate.Duty_value;
                        CID_BASE = hsCodeTaxRate.Tax_base;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }

                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region ESE
                    if (hsCodeTaxRate.Mhc_cost_ele == "ESE")
                    {
                        decimal RATE_VALUE = CAL_CID(_cif_val, hsCodeTaxRate.Mhc_cost_ele_amt);
                        decimal UNIT_VALUE = _qty * hsCodeTaxRate.Mhc_custom__price;
                        decimal WEIGHT_VALUE = _netMass * hsCodeTaxRate.Mhc_weight_price;

                        string Max_Str = "Z";
                        int Mc = 0;
                        int Mx = 0;
                        decimal[] Val_Det = { RATE_VALUE, UNIT_VALUE, WEIGHT_VALUE };
                        string[] Str_Code = { "R", "U", "W" };
                        decimal Max_V = 0;
                        Max_V = Val_Det[0];
                        for (Mc = 0; Mc <= Val_Det.Length - 1; Mc++)
                        {
                            if (Max_V <= Val_Det[Mc])
                            {
                                Max_V = Val_Det[Mc];
                                Mx = Mc;
                            }
                        }

                        Max_Str = Str_Code[Mx];

                        if (RATE_VALUE == 0 && UNIT_VALUE == 0 && WEIGHT_VALUE == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = _cif_val;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        else if (Max_Str == "R")
                        {
                            hsCodeTaxRate.Duty_value = RATE_VALUE;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = _cif_val;
                            hsCodeTaxRate.Tax_amount = RATE_VALUE;
                        }
                        else if (Max_Str == "U")
                        {
                            hsCodeTaxRate.Duty_value = UNIT_VALUE;
                            hsCodeTaxRate.Tax_rate = _qty;
                            hsCodeTaxRate.Tax_base = hsCodeTaxRate.Mhc_custom__price;
                            hsCodeTaxRate.Tax_amount = UNIT_VALUE;
                        }
                        else if (Max_Str == "W")
                        {
                            hsCodeTaxRate.Duty_value = WEIGHT_VALUE;
                            hsCodeTaxRate.Tax_rate = _netMass;
                            hsCodeTaxRate.Tax_base = hsCodeTaxRate.Mhc_weight_price;
                            hsCodeTaxRate.Tax_amount = WEIGHT_VALUE;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        ESE_VAL = hsCodeTaxRate.Duty_value;
                        ESE_BASE = hsCodeTaxRate.Tax_base;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }
                        //max line num
                        //  int maxline=_hsCodeTaxRate.Max(a=>a.l)
                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region SUR
                    if (hsCodeTaxRate.Mhc_cost_ele == "SUR")
                    {
                        hsCodeTaxRate.Duty_value = CAL_SUR(CID_VAL, hsCodeTaxRate.Mhc_cost_ele_amt);
                        hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                        hsCodeTaxRate.Tax_base = CID_VAL;
                        hsCodeTaxRate.Tax_amount = hsCodeTaxRate.Duty_value;
                        if (hsCodeTaxRate.Tax_rate == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = 0;
                            //hsCodeTaxRate.Tax_base = 0;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        SUR_VAL = hsCodeTaxRate.Duty_value;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }
                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region PAL
                    if (hsCodeTaxRate.Mhc_cost_ele == "PAL")
                    {
                        hsCodeTaxRate.Duty_value = CAL_PAL(_cif_val, hsCodeTaxRate.Mhc_cost_ele_amt);
                        hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                        hsCodeTaxRate.Tax_base = _cif_val;
                        hsCodeTaxRate.Tax_amount = hsCodeTaxRate.Duty_value;
                        if (hsCodeTaxRate.Tax_rate == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = 0;
                            //hsCodeTaxRate.Tax_base = 0;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        PAL_VAL = hsCodeTaxRate.Duty_value;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }
                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region EIC (CESS)
                    if (hsCodeTaxRate.Mhc_cost_ele == "EIC")
                    {
                        Decimal TAX_BASE = 0;
                        decimal RATE_VALUE = CAL_CESS(_cif_val, hsCodeTaxRate.Mhc_cost_ele_amt, out TAX_BASE);
                        decimal UNIT_VALUE = _qty * hsCodeTaxRate.Mhc_custom__price;
                        decimal WEIGHT_VALUE = _netMass * hsCodeTaxRate.Mhc_weight_price;

                        string Max_Str = "Z";
                        int Mc = 0;
                        int Mx = 0;
                        decimal[] Val_Det = { RATE_VALUE, UNIT_VALUE, WEIGHT_VALUE };
                        string[] Str_Code = { "R", "U", "W" };
                        decimal Max_V = 0;
                        Max_V = Val_Det[0];
                        for (Mc = 0; Mc <= Val_Det.Length - 1; Mc++)
                        {
                            if (Max_V <= Val_Det[Mc])
                            {
                                Max_V = Val_Det[Mc];
                                Mx = Mc;
                            }
                        }

                        Max_Str = Str_Code[Mx];

                        if (RATE_VALUE == 0 && UNIT_VALUE == 0 && WEIGHT_VALUE == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = TAX_BASE;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        else if (Max_Str == "R")
                        {
                            hsCodeTaxRate.Duty_value = RATE_VALUE;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = TAX_BASE;
                            hsCodeTaxRate.Tax_amount = RATE_VALUE;
                        }
                        else if (Max_Str == "U")
                        {
                            hsCodeTaxRate.Duty_value = UNIT_VALUE;
                            hsCodeTaxRate.Tax_rate = _qty;
                            hsCodeTaxRate.Tax_base = TAX_BASE;
                            hsCodeTaxRate.Tax_amount = UNIT_VALUE;
                        }
                        else if (Max_Str == "W")
                        {
                            hsCodeTaxRate.Duty_value = WEIGHT_VALUE;
                            hsCodeTaxRate.Tax_rate = _netMass;
                            hsCodeTaxRate.Tax_base = TAX_BASE;
                            hsCodeTaxRate.Tax_amount = WEIGHT_VALUE;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        CESS_VAL = hsCodeTaxRate.Duty_value;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }
                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region XID (EXCISE)
                    if (hsCodeTaxRate.Mhc_cost_ele == "XID")
                    {
                        //--Comment start chamal 13-03-2018

                        //hsCodeTaxRate.Duty_value = CAL_EXCISE(_cif_val, CID_VAL, SUR_VAL, CESS_VAL, PAL_VAL, VAT_VAL, hsCodeTaxRate.Mhc_cost_ele_amt, _docDT.Date, out EXCISE_BASE);
                        //hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                        //hsCodeTaxRate.Tax_base = EXCISE_BASE;
                        //hsCodeTaxRate.Tax_amount = hsCodeTaxRate.Duty_value;
                        //if (hsCodeTaxRate.Tax_rate == 0)
                        //{
                        //    hsCodeTaxRate.Duty_value = 0;
                        //    hsCodeTaxRate.Tax_rate = 0;
                        //    //hsCodeTaxRate.Tax_base = 0;
                        //    hsCodeTaxRate.Tax_amount = 0;
                        //}

                        //--Comment end chamal 13-03-2018

                        //// 13-03-2018 start Chamal 
                        Decimal TAX_BASE = 0;
                        decimal RATE_VALUE = CAL_EXCISE(_cif_val, CID_VAL, SUR_VAL, CESS_VAL, PAL_VAL, VAT_VAL, hsCodeTaxRate.Mhc_cost_ele_amt, _docDT.Date, out EXCISE_BASE);
                        decimal UNIT_VALUE = _qty * hsCodeTaxRate.Mhc_custom__price;
                        decimal WEIGHT_VALUE = _netMass * hsCodeTaxRate.Mhc_weight_price;

                        string Max_Str = "Z";
                        int Mc = 0;
                        int Mx = 0;
                        decimal[] Val_Det = { RATE_VALUE, UNIT_VALUE, WEIGHT_VALUE };
                        string[] Str_Code = { "R", "U", "W" };
                        decimal Max_V = 0;
                        Max_V = Val_Det[0];
                        for (Mc = 0; Mc <= Val_Det.Length - 1; Mc++)
                        {
                            if (Max_V <= Val_Det[Mc])
                            {
                                Max_V = Val_Det[Mc];
                                Mx = Mc;
                            }
                        }

                        Max_Str = Str_Code[Mx];

                        if (RATE_VALUE == 0 && UNIT_VALUE == 0 && WEIGHT_VALUE == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = TAX_BASE;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        else if (Max_Str == "R")
                        {
                            hsCodeTaxRate.Duty_value = RATE_VALUE;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = TAX_BASE;
                            hsCodeTaxRate.Tax_amount = RATE_VALUE;
                        }
                        else if (Max_Str == "U")
                        {
                            hsCodeTaxRate.Duty_value = UNIT_VALUE;
                            hsCodeTaxRate.Tax_rate = _qty;
                            hsCodeTaxRate.Tax_base = TAX_BASE;
                            hsCodeTaxRate.Tax_amount = UNIT_VALUE;
                        }
                        else if (Max_Str == "W")
                        {
                            hsCodeTaxRate.Duty_value = WEIGHT_VALUE;
                            hsCodeTaxRate.Tax_rate = _netMass;
                            hsCodeTaxRate.Tax_base = TAX_BASE;
                            hsCodeTaxRate.Tax_amount = WEIGHT_VALUE;
                        }
                        //// 13-03-2018 end


                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        EXCISE_VAL = hsCodeTaxRate.Duty_value;
                        EXCISE_RATE = hsCodeTaxRate.Tax_rate;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }


                        if (hsCodeTaxRate.Mhc_cce > 0 && hsCodeTaxRate.Mhc_cce_clm > 0)
                        {
                            decimal cce_val = hsCodeTaxRate.Mhc_cce * hsCodeTaxRate.Mhc_cce_clm * _qty;

                            if (hsCodeTaxRate.Duty_value < cce_val)
                            {
                                hsCodeTaxRate.Duty_value = cce_val;
                                hsCodeTaxRate.Tax_claim = cce_val;
                                hsCodeTaxRate.Tax_amount = cce_val;
                                hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cce_clm;
                                hsCodeTaxRate.Tax_base = hsCodeTaxRate.Mhc_cce;
                                //add by Chamal 02-Jan-2019 due to VAT, NBT value issue
                                EXCISE_VAL = hsCodeTaxRate.Duty_value;
                                EXCISE_RATE = hsCodeTaxRate.Tax_rate;
                            }

                            if (_claimRate > 0)
                            {
                                hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                                hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                            }
                            else
                            {
                                hsCodeTaxRate.Tax_claim = 0;
                                hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                            }
                        }

                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region VAT
                    if (hsCodeTaxRate.Mhc_cost_ele == "VAT")
                    {
                        hsCodeTaxRate.Duty_value = CAL_VAT(_cif_val, CID_VAL, SUR_VAL, CESS_VAL, PAL_VAL, EXCISE_VAL, EXCISE_RATE, hsCodeTaxRate.Mhc_cost_ele_amt, _docDT.Date, out VAT_BASE);
                        hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                        hsCodeTaxRate.Tax_base = VAT_BASE;
                        hsCodeTaxRate.Tax_amount = hsCodeTaxRate.Duty_value;
                        if (hsCodeTaxRate.Tax_rate == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = 0;
                            //hsCodeTaxRate.Tax_base = 0;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        VAT_VAL = hsCodeTaxRate.Duty_value;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }
                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region RIDL
                    if (hsCodeTaxRate.Mhc_cost_ele == "RIDL")
                    {
                        hsCodeTaxRate.Duty_value = CAL_RIDL(_cif_val, CID_VAL, SUR_VAL, CESS_VAL, PAL_VAL, VAT_VAL, EXCISE_VAL, SRL_VAL, hsCodeTaxRate.Mhc_cost_ele_amt, out RIDL_BASE);
                        hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                        hsCodeTaxRate.Tax_base = RIDL_BASE;
                        hsCodeTaxRate.Tax_amount = hsCodeTaxRate.Duty_value;
                        if (hsCodeTaxRate.Tax_rate == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = 0;
                            //hsCodeTaxRate.Tax_base = 0;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        RIDL_VAL = hsCodeTaxRate.Duty_value;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }
                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region SRL
                    if (hsCodeTaxRate.Mhc_cost_ele == "SRL")
                    {
                        hsCodeTaxRate.Duty_value = CAL_SRL(CID_VAL, SUR_VAL, EXCISE_VAL, hsCodeTaxRate.Mhc_cost_ele_amt, out SRL_BASE);
                        hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                        hsCodeTaxRate.Tax_base = SRL_BASE;
                        hsCodeTaxRate.Tax_amount = hsCodeTaxRate.Duty_value;
                        if (hsCodeTaxRate.Tax_rate == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = 0;
                            //hsCodeTaxRate.Tax_base = 0;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        SRL_VAL = hsCodeTaxRate.Duty_value;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }
                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region NBT
                    if (hsCodeTaxRate.Mhc_cost_ele == "NBT")
                    {
                        hsCodeTaxRate.Duty_value = CAL_NBT(_cif_val, VAT_BASE, hsCodeTaxRate.Mhc_cost_ele_amt, VAT_VAL, CID_VAL, CID_BASE, SUR_VAL, CESS_VAL, PAL_VAL, EXCISE_VAL, EXCISE_RATE, _docDT.Date, out NBT_BASE);
                        hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                        hsCodeTaxRate.Tax_base = NBT_BASE;
                        hsCodeTaxRate.Tax_amount = hsCodeTaxRate.Duty_value;
                        if (hsCodeTaxRate.Tax_rate == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = 0;
                            //hsCodeTaxRate.Tax_base = 0;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        NBT_VAL = hsCodeTaxRate.Duty_value;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }
                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                    #region ESC
                    if (hsCodeTaxRate.Mhc_cost_ele == "ESC")
                    {
                        //decimal RATE_VALUE = CAL_CID(_cif_val, hsCodeTaxRate.Mhc_cost_ele_amt);
                        //New amendment 02-Jan-2019 by Chamal
                        decimal RATE_VALUE = CAL_ESC(_cif_val, EXCISE_VAL, hsCodeTaxRate.Mhc_cost_ele_amt);
                        decimal UNIT_VALUE = _qty * hsCodeTaxRate.Mhc_custom__price;
                        decimal WEIGHT_VALUE = _netMass * hsCodeTaxRate.Mhc_weight_price;

                        string Max_Str = "Z";
                        int Mc = 0;
                        int Mx = 0;
                        decimal[] Val_Det = { RATE_VALUE, UNIT_VALUE, WEIGHT_VALUE };
                        string[] Str_Code = { "R", "U", "W" };
                        decimal Max_V = 0;
                        Max_V = Val_Det[0];
                        for (Mc = 0; Mc <= Val_Det.Length - 1; Mc++)
                        {
                            if (Max_V <= Val_Det[Mc])
                            {
                                Max_V = Val_Det[Mc];
                                Mx = Mc;
                            }
                        }

                        Max_Str = Str_Code[Mx];

                        if (RATE_VALUE == 0 && UNIT_VALUE == 0 && WEIGHT_VALUE == 0)
                        {
                            hsCodeTaxRate.Duty_value = 0;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = _cif_val;
                            hsCodeTaxRate.Tax_amount = 0;
                        }
                        else if (Max_Str == "R")
                        {
                            hsCodeTaxRate.Duty_value = RATE_VALUE;
                            hsCodeTaxRate.Tax_rate = hsCodeTaxRate.Mhc_cost_ele_amt;
                            hsCodeTaxRate.Tax_base = _cif_val;
                            hsCodeTaxRate.Tax_amount = RATE_VALUE;
                        }
                        else if (Max_Str == "U")
                        {
                            hsCodeTaxRate.Duty_value = UNIT_VALUE;
                            hsCodeTaxRate.Tax_rate = _qty;
                            hsCodeTaxRate.Tax_base = hsCodeTaxRate.Mhc_custom__price;
                            hsCodeTaxRate.Tax_amount = UNIT_VALUE;
                        }
                        else if (Max_Str == "W")
                        {
                            hsCodeTaxRate.Duty_value = WEIGHT_VALUE;
                            hsCodeTaxRate.Tax_rate = _netMass;
                            hsCodeTaxRate.Tax_base = hsCodeTaxRate.Mhc_weight_price;
                            hsCodeTaxRate.Tax_amount = WEIGHT_VALUE;
                        }
                        hsCodeTaxRate.Duty_value = Math.Round(hsCodeTaxRate.Duty_value);
                        hsCodeTaxRate.Tax_base = Math.Round(hsCodeTaxRate.Tax_base);
                        hsCodeTaxRate.Tax_amount = Math.Round(hsCodeTaxRate.Tax_amount);
                        CID_VAL = hsCodeTaxRate.Duty_value;
                        CID_BASE = hsCodeTaxRate.Tax_base;
                        if (_claimRate > 0)
                        {
                            hsCodeTaxRate.Tax_claim = (hsCodeTaxRate.Tax_amount / 100) * _claimRate;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount - hsCodeTaxRate.Tax_claim;
                        }
                        else
                        {
                            hsCodeTaxRate.Tax_claim = 0;
                            hsCodeTaxRate.Tax_unclaim = hsCodeTaxRate.Tax_amount;
                        }

                        if (hsCodeTaxRate.Mhc_mp == 1) _tot_Actual_tax_val = _tot_Actual_tax_val + hsCodeTaxRate.Tax_unclaim;
                        _tot_Pre_tax_val = _tot_Pre_tax_val + hsCodeTaxRate.Tax_unclaim;
                    }
                    #endregion
                }
            }
            _totActTaxVal = _tot_Actual_tax_val;
            _totPreTaxVal = _tot_Pre_tax_val;

            var query1 = from t1 in _hsCodeTaxRate
                         join t2 in _eleList
                         on new { A = t1.Mhc_cost_cat, B = t1.Mhc_cost_tp, C = t1.Mhc_cost_ele } equals new { A = t2.Mcae_ele_cat, B = t2.Mcae_ele_tp, C = t2.Mcae_cd }
                         orderby Convert.ToInt32(t2.Mcae_anal_2)
                         select t1;

            return query1.ToList();
        }

        List<HsCode> GetHSTaxRates(String _hsCode, String _entryType, String _ownCountry, String _defCountry)
        {
            List<HsCode> _hsCodeAll = new List<HsCode>();
            List<HsCode> _hsCodes = new List<HsCode>();
            _hsCodeAll = _financialDAL.GetHSCodeList(_hsCode);
            if (_hsCodeAll != null && _hsCodeAll.Count > 0)
            {
                if (_defCountry == "DEF")
                {
                    _hsCodes = new List<HsCode>();
                    _hsCodes = _hsCodeAll.FindAll(y => y.Mhc_act == 1 && y.Mhc_frm_cnty == _defCountry && y.Mhc_to_cnty == _ownCountry && y.Mhc_tp == _entryType);
                }
                else
                {
                    _hsCodes = new List<HsCode>();
                    _hsCodes = _hsCodeAll.FindAll(y => y.Mhc_act == 1 && y.Mhc_frm_cnty == _defCountry && y.Mhc_to_cnty == _ownCountry && y.Mhc_tp == _entryType);
                    if (_hsCodes == null || _hsCodes.Count <= 0)
                    {
                        _hsCodes = new List<HsCode>();
                        _hsCodes = _hsCodeAll.FindAll(y => y.Mhc_act == 1 && y.Mhc_frm_cnty == "DEF" && y.Mhc_to_cnty == _ownCountry && y.Mhc_tp == _entryType);
                    }
                }
            }
            return _hsCodes;
        }

        List<HsCodeClaim> GetHSClaimList(String _hsCode, String _type, String _company, String _ownCountry, String _defCountry)
        {
            return _financialDAL.GetHSCodeClaimList(_hsCode);
        }

        Decimal GetHSElementClaimRates(List<HsCodeClaim> _hsClaimList, String _type, String _company, String _ownCountry, String _defCountry, String _element)
        {
            List<HsCodeClaim> _hsCodes = new List<HsCodeClaim>();
            Decimal _rate = 0;

            if (string.IsNullOrEmpty(_defCountry)) _defCountry = "DEF";


            if (_hsClaimList != null && _hsClaimList.Count > 0)
            {
                if (_hsClaimList != null && _hsClaimList.Count > 0)
                {
                    _hsCodes = _hsClaimList.FindAll(y => y.Mhcl_act == 1 && y.Mhcl_frm_cnty == _defCountry && y.Mhcl_to_cnty == _ownCountry && y.Mhcl_com == _company && y.Mhcl_tp == _type && y.Mhcl_cost_ele == _element);
                    if (_hsCodes != null && _hsCodes.Count > 0)
                    {
                        foreach (HsCodeClaim rt in _hsCodes)
                        {
                            _rate = rt.Mhcl_claim_rt;
                            break;
                        }
                    }
                }
            }
            if (_hsCodes == null || _hsCodes.Count <= 0)
            {
                _hsCodes = new List<HsCodeClaim>();
                _defCountry = "DEF";
                if (_hsClaimList != null && _hsClaimList.Count > 0)
                {
                    if (_hsClaimList != null && _hsClaimList.Count > 0)
                    {
                        _hsCodes = _hsClaimList.FindAll(y => y.Mhcl_act == 1 && y.Mhcl_frm_cnty == _defCountry && y.Mhcl_to_cnty == _ownCountry && y.Mhcl_com == _company && y.Mhcl_tp == _type && y.Mhcl_cost_ele == _element);
                        if (_hsCodes != null && _hsCodes.Count > 0)
                        {
                            foreach (HsCodeClaim rt in _hsCodes)
                            {
                                _rate = rt.Mhcl_claim_rt;
                                break;
                            }
                        }
                    }
                }
            }
            return _rate;
        }

        Decimal CAL_CID(Decimal CIF_VAL, Decimal CUSDT_RATE)
        {
            return (CIF_VAL * CUSDT_RATE) / 100;
        }

        Decimal CAL_SUR(Decimal CID_VAL, Decimal SUR_RATE)
        {
            return (CID_VAL * SUR_RATE) / 100;
        }

        Decimal CAL_PAL(Decimal CIF_VAL, Decimal PAL_RATE)
        {
            return (CIF_VAL * PAL_RATE) / 100;
        }

        Decimal CAL_CESS(Decimal CIF_VAL, Decimal CESS_RATE, out Decimal CESS_BASE)
        {
            decimal V1 = 0;
            V1 = (CIF_VAL + (CIF_VAL / 100 * 10));
            CESS_BASE = V1;
            return (V1 * CESS_RATE) / 100;
        }

        Decimal CAL_EXCISE(decimal CIF_VAL, decimal CUSD_VAL, decimal SUR_VAL, decimal CESS_VAL, decimal PAL_VAL, decimal VAT_VAL, decimal EXCISE_RATE, DateTime STR_ENTRY_DATE, out decimal EXCISE_BASE)
        {
            //CALCULATE XID
            decimal V1 = 0;
            decimal V2 = 0;
            decimal oXID_BASE = 0;
            decimal oEXCISE_VAL = 0;
            if (STR_ENTRY_DATE.Date >= Convert.ToDateTime("21/Nov/2010").Date)
            { V1 = CIF_VAL + CUSD_VAL + SUR_VAL + CESS_VAL + PAL_VAL; }
            else
            { V1 = CIF_VAL + CUSD_VAL + SUR_VAL + CESS_VAL + PAL_VAL + VAT_VAL; }
            V2 = V1 + (CIF_VAL * Convert.ToDecimal(0.15));
            oXID_BASE = V2;
            oEXCISE_VAL = (V2) * ((EXCISE_RATE) / 100);
            EXCISE_BASE = oXID_BASE;
            return oEXCISE_VAL;
        }

        Decimal CAL_SRL(decimal CID_VAL, decimal SUR_VAL, decimal EXCISE_VAL, decimal SRL_RATE, out decimal SRL_BASE)
        {
            //CALCULATE SRL
            decimal V1 = 0;
            V1 = CID_VAL + SUR_VAL + EXCISE_VAL;
            SRL_BASE = V1;
            return V1 * (SRL_RATE / 100);
        }

        Decimal CAL_RIDL(decimal CIF_VAL, decimal CID_VAL, decimal SUR_VAL, decimal CESS_VAL, decimal PAL_VAL, decimal VAT_VAL, decimal EXC_VAL, decimal SRL_VAL, decimal RIDL_RATE, out decimal RIDL_BASE)
        {
            //CALCULATE RIDL
            decimal V1 = 0;
            decimal V2 = 0;

            V1 = CIF_VAL + CID_VAL + SUR_VAL + PAL_VAL + VAT_VAL + EXC_VAL + SRL_VAL + CESS_VAL;

            if (!(RIDL_RATE == 0))
            {
                V2 = (V1 * RIDL_RATE) / 100;
            }
            else
            {
                V2 = 0;
            }

            RIDL_BASE = V1;
            return V2;
        }

        Decimal CAL_NBT(decimal CIF_VAL, decimal VAT_BASE, decimal NBT_RATE, decimal VAT_VAL, decimal CID_VAL, decimal CID_BASE, decimal SUR_VAL, decimal CESS_VAL, decimal PAL_VAL, decimal EXCISE_VAL, decimal EXCISE_RATE, DateTime STR_ENTRY_DATE, out decimal NBT_BASE)
        {
            //CALCULATE NBT
            decimal V1 = 0;
            decimal V2 = 0;
            decimal V3 = 0;
            decimal V4 = 0;
            decimal V5 = 0;

            decimal VE = 0;
            decimal VQ = 0;
            decimal VT = 0;
            decimal TT = 0;

            decimal oNBT_VAL = 0;
            decimal oNBT_BASE = 0;

            ///''''' CHANGE ON 01/06/2010 Chamal

            if (STR_ENTRY_DATE.Date > Convert.ToDateTime("18/03/2008").Date & STR_ENTRY_DATE.Date < Convert.ToDateTime("01/Jun/2010").Date)
            {

                if (VAT_VAL == 0)
                {
                    V1 = CID_VAL + SUR_VAL + CESS_VAL + PAL_VAL;
                    V3 = 1 + (EXCISE_RATE / 100);
                    V4 = (V1 * V3) * (NBT_RATE / 100);
                    VT = (Convert.ToDecimal(1.1) + (Convert.ToDecimal(1.15) * (EXCISE_RATE / 100)));
                    V2 = VT * (CID_BASE * (NBT_RATE / 100));
                    V5 = V4 + V2;
                    VE = ((EXCISE_RATE / 100) * (NBT_RATE / 100));
                    VQ = (1 - VE);
                    TT = V5;
                    oNBT_VAL = TT / VQ;

                    oNBT_BASE = (oNBT_VAL / NBT_RATE) * 100;


                }
                else
                {
                    oNBT_VAL = ((VAT_BASE)) * (NBT_RATE) / 100;

                    oNBT_BASE = VAT_BASE;

                }


            }
            else if (Convert.ToDateTime(STR_ENTRY_DATE) >= Convert.ToDateTime("01/Jun/2010") & Convert.ToDateTime(STR_ENTRY_DATE) < Convert.ToDateTime("21/Nov/2010"))
            {

                if (VAT_VAL == 0)
                {
                    V1 = ((CID_VAL) + (CESS_VAL) + (PAL_VAL));
                    V3 = (1 + (EXCISE_RATE / 100));
                    V4 = (V1 * V3) * (NBT_RATE / 100);
                    VT = (Convert.ToDecimal(1.1) + (Convert.ToDecimal(1.15) * (EXCISE_RATE / 100)));
                    V2 = VT * (CID_BASE * (NBT_RATE / 100));
                    V5 = V4 + V2;
                    VE = ((EXCISE_RATE / 100) * (NBT_RATE / 100));
                    VQ = (1 - VE);
                    TT = V5;
                    oNBT_VAL = (TT) / (VQ);

                    oNBT_BASE = (oNBT_VAL / NBT_RATE) * 100;

                }
                else
                {
                    oNBT_VAL = ((VAT_BASE)) * (NBT_RATE) / 100;

                    oNBT_BASE = VAT_BASE;

                }


            }
            else if (Convert.ToDateTime(STR_ENTRY_DATE) >= Convert.ToDateTime("21/Nov/2010"))
            {
                VT = CIF_VAL + (CIF_VAL * Convert.ToDecimal(0.1)) + CID_VAL + CESS_VAL + PAL_VAL + EXCISE_VAL;
                oNBT_VAL = VT * NBT_RATE / 100;

                oNBT_BASE = VT;

            }

            NBT_BASE = oNBT_BASE;
            return oNBT_VAL;
        }

        Decimal CAL_VAT(decimal CIF_VAL, decimal CID_VAL, decimal SUR_VAL, decimal CESS_VAL, decimal PAL_VAL, decimal EXCISE_VAL, decimal EXCISE_RATE, decimal RATE_VAT, DateTime STR_ENTRY_DATE, out decimal VAT_BASE)
        {
            //CALCULATE VAT
            decimal V1 = 0;
            decimal V2 = 0;
            decimal V3 = 0;
            decimal V4 = 0;
            decimal V5 = 0;

            decimal VE = 0;
            decimal VQ = 0;

            Decimal oVAT_VAL = 0;
            Decimal oVAT_BASE = 0;

            Decimal CID_BASE = 0;
            //Decimal CID_VAL = 0;

            ///''' TILL 18/03/2008
            if (STR_ENTRY_DATE.Date <= Convert.ToDateTime("18/03/2008").Date)
            {
                V1 = CIF_VAL + CID_VAL + SUR_VAL + CESS_VAL + PAL_VAL;
                V2 = V1 + CIF_VAL * Convert.ToDecimal(0.1);

                V3 = (1 + (EXCISE_RATE / 100));
                V4 = (V2 * V3);
                V5 = ((V4) * (RATE_VAT / 100));
                VE = ((EXCISE_RATE / 100) * (RATE_VAT / 100));
                VQ = (1 - VE);

                oVAT_VAL = (V5) / (VQ);
                oVAT_BASE = V4;
            }


            //''''' CHANGE ON 18/03/2008
            //''''' CHANGE ON 01/06/2010 Chamal
            //''''' CHANGE ON 25/11/2010 Chamal

            if (STR_ENTRY_DATE.Date > Convert.ToDateTime("18/03/2008") & STR_ENTRY_DATE.Date < Convert.ToDateTime("01/Jun/2010"))
            {
                decimal VT = 0;
                decimal TT = 0;

                V1 = CID_VAL + SUR_VAL + CESS_VAL + PAL_VAL;
                V3 = (1 + (EXCISE_RATE / 100));
                V4 = (V1 * V3) * (RATE_VAT / 100);
                VT = (Convert.ToDecimal(1.1) + (Convert.ToDecimal(1.15) * (EXCISE_RATE / 100)));
                V2 = VT * (CIF_VAL * (RATE_VAT / 100));
                V5 = V4 + V2;
                VE = ((EXCISE_RATE / 100) * (RATE_VAT / 100));
                VQ = (1 - VE);
                TT = V5;
                oVAT_VAL = (TT) / (VQ);

                if (!(oVAT_VAL == 0) | !(RATE_VAT == 0))
                {
                    oVAT_BASE = (oVAT_VAL / RATE_VAT) * 100;
                }
                else
                {
                    //VAT_BASE = 0
                    //EDIT by CHAMAL - 18-FEB-2009
                    oVAT_BASE = (CID_BASE * Convert.ToDecimal(1.15)) + CID_VAL + SUR_VAL + CESS_VAL + PAL_VAL;
                }

            }
            else if (STR_ENTRY_DATE.Date >= Convert.ToDateTime("01/Jun/2010") & STR_ENTRY_DATE.Date < Convert.ToDateTime("21/Nov/2010"))
            {
                decimal VT = 0;
                decimal TT = 0;

                V1 = CID_VAL + CESS_VAL + PAL_VAL;
                V3 = (1 + (EXCISE_RATE / 100));
                V4 = (V1 * V3) * (RATE_VAT / 100);
                VT = (Convert.ToDecimal(1.1) + (Convert.ToDecimal(1.15) * (EXCISE_RATE / 100)));
                V2 = VT * (CIF_VAL * (RATE_VAT / 100));
                V5 = V4 + V2;
                VE = ((EXCISE_RATE / 100) * (RATE_VAT / 100));
                VQ = (1 - VE);
                TT = V5;
                oVAT_VAL = (TT) / (VQ);

                if (!(oVAT_VAL == 0) | !(RATE_VAT == 0))
                {
                    oVAT_BASE = (oVAT_VAL / RATE_VAT) * 100;
                }
                else
                {
                    oVAT_BASE = (CID_BASE * Convert.ToDecimal(1.15)) + CID_VAL + CESS_VAL + PAL_VAL;
                }
            }
            else if (STR_ENTRY_DATE.Date >= Convert.ToDateTime("21/Nov/2010"))
            {
                decimal VT = 0;

                VT = CIF_VAL + (CIF_VAL * Convert.ToDecimal(0.1)) + CID_VAL + CESS_VAL + PAL_VAL + EXCISE_VAL;
                oVAT_VAL = VT * (RATE_VAT / 100);

                if (!(oVAT_VAL == 0) | !(RATE_VAT == 0))
                {
                    oVAT_BASE = (oVAT_VAL / RATE_VAT) * 100;
                }
                else
                {
                    oVAT_BASE = VT;
                }
            }

            VAT_BASE = oVAT_BASE;
            return oVAT_VAL;
        }

        Decimal CAL_ESC(Decimal CIF_VAL, Decimal EXCISE_VAL, Decimal CUSDT_RATE)
        {
            //Add by Chamal 02-Jan-2019
            decimal _cal_esc = 0;
            if (EXCISE_VAL > 0)
            { _cal_esc = (EXCISE_VAL * CUSDT_RATE) / 100; }
            else
            { _cal_esc = (CIF_VAL * CUSDT_RATE) / 100; }
            return _cal_esc;
        }

        public List<ImpCusdecItm> UpdateHSUsingHistory(List<ImpCusdecItm> _cusItems, string com, string country, string doctype, string sysBLNo, decimal totInvoiceValue, decimal totNetMass, decimal totGrossMass, string _currentdoc)
        {
            _commonSearchDAL = new CommonSearchDAL();
            _financialDAL = new FinancialDAL();
            _commonSearchDAL.ConnectionOpen();
            _financialDAL.ConnectionOpen();
            List<ImpCusdecItm> _items = _cusItems;
            if (_items != null)
            {
                if (_items.Count > 0)
                {
                    foreach (ImpCusdecItm _cusitem in _items)
                    {
                        DataTable _dtHS = _commonSearchDAL.GetHSHistory(com, country, doctype, _cusitem.Cui_itm_cd);
                        if (_dtHS != null)
                        {
                            if (_dtHS.Rows.Count > 1)
                            {
                                if (_dtHS.Rows[0]["cuh_doc_no"].ToString() == _currentdoc)
                                {
                                    _cusitem.Cui_hs_cd = _dtHS.Rows[1]["cui_hs_cd"].ToString();
                                    _financialDAL.UPDATE_BL_HSCODES(sysBLNo, _cusitem.Cui_itm_cd, _cusitem.Cui_hs_cd);
                                }
                                else
                                {
                                    _cusitem.Cui_hs_cd = _dtHS.Rows[0]["cui_hs_cd"].ToString();
                                    _financialDAL.UPDATE_BL_HSCODES(sysBLNo, _cusitem.Cui_itm_cd, _cusitem.Cui_hs_cd);
                                }

                            }
                            else if (_dtHS.Rows.Count > 0)
                            {
                                _cusitem.Cui_hs_cd = _dtHS.Rows[0]["cui_hs_cd"].ToString();
                                _financialDAL.UPDATE_BL_HSCODES(sysBLNo, _cusitem.Cui_itm_cd, _cusitem.Cui_hs_cd);
                            }
                        }


                        if (_items.Count > 1)
                        {
                            decimal mass = CAL_WEIGHT_APPORTION(_cusitem.Cui_unit_amt, _cusitem.Cui_qty, totInvoiceValue, totNetMass);
                            _cusitem.Cui_net_mass = Math.Round(mass, 2, MidpointRounding.AwayFromZero);
                            mass = CAL_WEIGHT_APPORTION(_cusitem.Cui_unit_amt, _cusitem.Cui_qty, totInvoiceValue, totGrossMass);
                            _cusitem.Cui_gross_mass = Math.Round(mass, 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            _cusitem.Cui_net_mass = totNetMass;
                            _cusitem.Cui_gross_mass = totGrossMass;
                        }
                    }
                }
            }
            _commonSearchDAL.ConnectionClose();
            _financialDAL.ConnectionClose();
            return _items;
        }

        public List<ImpCusdecItm> UpdateHSHistoryOnly(List<ImpCusdecItm> _cusItems, string com, string country, string doctype, string sysBLNo, decimal totInvoiceValue, decimal totNetMass, decimal totGrossMass, string _currentdoc)
        {
            _commonSearchDAL = new CommonSearchDAL();
            _financialDAL = new FinancialDAL();
            _commonSearchDAL.ConnectionOpen();
            _financialDAL.ConnectionOpen();
            List<ImpCusdecItm> _items = _cusItems;
            if (_items != null)
            {
                if (_items.Count > 0)
                {
                    foreach (ImpCusdecItm _cusitem in _items)
                    {
                        DataTable _dtHS = _commonSearchDAL.GetHSHistory(com, country, doctype, _cusitem.Cui_itm_cd);
                        if (_dtHS != null)
                        {
                            if (_dtHS.Rows.Count > 1)
                            {
                                if (_dtHS.Rows[0]["cuh_doc_no"].ToString() == _currentdoc)
                                {
                                    _cusitem.Cui_hs_cd = _dtHS.Rows[1]["cui_hs_cd"].ToString();
                                    _financialDAL.UPDATE_BL_HSCODES(sysBLNo, _cusitem.Cui_itm_cd, _cusitem.Cui_hs_cd);
                                }
                                else
                                {
                                    _cusitem.Cui_hs_cd = _dtHS.Rows[0]["cui_hs_cd"].ToString();
                                    _financialDAL.UPDATE_BL_HSCODES(sysBLNo, _cusitem.Cui_itm_cd, _cusitem.Cui_hs_cd);
                                }

                            }
                            else if (_dtHS.Rows.Count > 0)
                            {
                                _cusitem.Cui_hs_cd = _dtHS.Rows[0]["cui_hs_cd"].ToString();
                                _financialDAL.UPDATE_BL_HSCODES(sysBLNo, _cusitem.Cui_itm_cd, _cusitem.Cui_hs_cd);
                            }
                        }
                    }
                }
            }
            _commonSearchDAL.ConnectionClose();
            _financialDAL.ConnectionClose();
            return _items;
        }
        public List<ImpCusdecItm> UpdateMassOnly(List<ImpCusdecItm> _cusItems, string com, string country, string doctype, string sysBLNo, decimal totInvoiceValue, decimal totNetMass, decimal totGrossMass, string _currentdoc)
        {
            _commonSearchDAL = new CommonSearchDAL();
            _financialDAL = new FinancialDAL();
            _commonSearchDAL.ConnectionOpen();
            _financialDAL.ConnectionOpen();
            List<ImpCusdecItm> _items = _cusItems;
            if (_items != null)
            {
                if (_items.Count > 0)
                {
                    foreach (ImpCusdecItm _cusitem in _items)
                    {
                        if (_items.Count > 1)
                        {
                            decimal mass = CAL_WEIGHT_APPORTION(_cusitem.Cui_unit_amt, _cusitem.Cui_qty, totInvoiceValue, totNetMass);
                            _cusitem.Cui_net_mass = Math.Round(mass, 2, MidpointRounding.AwayFromZero);
                            mass = CAL_WEIGHT_APPORTION(_cusitem.Cui_unit_amt, _cusitem.Cui_qty, totInvoiceValue, totGrossMass);
                            _cusitem.Cui_gross_mass = Math.Round(mass, 2, MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            _cusitem.Cui_net_mass = totNetMass;
                            _cusitem.Cui_gross_mass = totGrossMass;
                        }
                    }
                }
            }
            _commonSearchDAL.ConnectionClose();
            _financialDAL.ConnectionClose();
            return _items;
        }
        decimal CAL_WEIGHT_APPORTION(decimal UNIT_PRICE, decimal QTY, decimal TOT_ITEM_VALUE, decimal TOT_WEIGHT)
        {
            decimal ITEM_RATE = 0;
            decimal V1 = 0;
            //V1 = (QTY * UNIT_PRICE) / (TOT_ITEM_VALUE);
            //ITEM_RATE = V1 * TOT_WEIGHT;

            //Chamal 09-Jun-2016
            V1 = TOT_WEIGHT / TOT_ITEM_VALUE;
            ITEM_RATE = V1 * UNIT_PRICE;
            return ITEM_RATE;
        }


        #endregion

        //Tharaka 2016-01-16
        public List<imp_cst_ele_ref> GET_IMP_CST_ELE_REF_BY_SEQ(Int32 SeQ)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_CST_ELE_REF_BY_SEQ(SeQ);

        }

        //Tharaka 2016-01-16
        public List<ComboBoxObject> GET_PKG_UOM()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_PKG_UOM();
        }
        public List<ComboBoxObject> GET_AGGR_REF()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_AGGR_REF();
        }

        //Tharaka 2016-01-16
        public List<ImportsCostItem> GET_PRIVIOUS_VALUES(string DocNumber, string Item)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_PRIVIOUS_VALUES(DocNumber, Item);
        }

        //Chamal 2016-01-19
        public List<CusdecTypes> GetCusdecTypeInfor(string _country)
        {
            _generalDAL = new GeneralDAL();
            return _generalDAL.GetCusdecEntryTypes(_country);
        }

        //Chamal 19-Jan-2015
        public int GetCusdecData(string _company, string _country, string _docType, string _docNo, out ImpCusdecHdr _custHdr, out List<ImpCusdecItm> _custItems, out List<ImpCusdecItmCost> _custItemsCost, out List<ImpCusdecCost> _custCost, out List<ImportsBLContainer> _custContainer, out string _msg)
        {
            ImpCusdecHdr custHdr = new ImpCusdecHdr();
            List<ImpCusdecItm> custItems = new List<ImpCusdecItm>();
            List<ImpCusdecItmCost> custItemsCost = new List<ImpCusdecItmCost>();
            List<ImpCusdecCost> custCost = new List<ImpCusdecCost>();
            List<ImportsBLContainer> blContainers = new List<ImportsBLContainer>();
            string msg = string.Empty;
            _financialDAL = new FinancialDAL();
            bool _noDataFound = false;
            try
            {
                custHdr = _financialDAL.GET_CUSDEC_HEADER_BY_DOC(_company, _country, _docType, _docNo);
                if (custHdr != null)
                {
                    custItems = _financialDAL.GET_CUSDEC_ITEM_BY_DOCNEW(_docNo);

                    foreach (var item in custItems)
                    {
                        //bind cat desc
                        string cat1 = _financialDAL.GetSIItemCat1(item.Cui_itm_cd);
                        string cat2 = _financialDAL.GetSIItemCat2(item.Cui_itm_cd);

                        item.ItemCat1 = cat1;
                        item.ItemCat2 = cat2;
                    }

                    custItemsCost = _financialDAL.GET_CUSDEC_ITEM_COST_BY_DOC(_docNo);
                    custCost = _financialDAL.GET_CUSDEC_COST_BY_DOC(_docNo);
                    blContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(custHdr.CUH_SUN_REQ_NO);
                    if (custCost != null)
                    {
                        custCost = custCost.Where(i => i.Cus_ele_cat == "TOT").ToList();
                        foreach (ImpCusdecCost itm in custCost)
                        {
                            if (itm.Cus_ele_cd == "COST")
                            { itm.Cus_ele_cd_name = "Cost"; itm.Cus_line = 1; }
                            if (itm.Cus_ele_cd == "FRGT")
                            { itm.Cus_ele_cd_name = "Freight"; itm.Cus_line = 2; }
                            if (itm.Cus_ele_cd == "INSU")
                            { itm.Cus_ele_cd_name = "Insurance"; itm.Cus_line = 3; }
                            if (itm.Cus_ele_cd == "OTH")
                            { itm.Cus_ele_cd_name = "Other"; itm.Cus_line = 4; }
                        }
                    }
                }
                else
                {
                    _noDataFound = true;
                }

                _custHdr = custHdr;
                _custItems = custItems;
                _custItemsCost = custItemsCost;
                _custCost = custCost;
                _custContainer = blContainers;
                if (_noDataFound == true)
                {
                    _msg = "Invalid Entry No";
                    return -1;
                }
                else
                {
                    _msg = msg;
                    return 1;
                }
            }
            catch (Exception ex)
            {
                _custHdr = null;
                _custItems = null;
                _custItemsCost = null;
                _custCost = null;
                _custContainer = null;
                _msg = ex.Message.ToString();
                return -1;
            }
        }


        //Chamal 25-Jan-2015
        public int GetCusdecReqData(string _company, string _country, string _docType, string _reqNo, out ImpCusdecHdr _custHdr, out List<ImpCusdecItm> _custItems, out List<ImpCusdecItmCost> _custItemsCost, out List<ImpCusdecCost> _custCost, out List<ImportsBLContainer> _custContainer, out string _msg, bool _connopen)
        {
            Int32 _rtnVal = 0;
            InventoryRequest reqHdr = new InventoryRequest();
            ImpCusdecHdr custHdr = new ImpCusdecHdr();
            List<ImpCusdecItm> custItems = new List<ImpCusdecItm>();
            //List<ImpCusdecItmCost> custItemsCost = new List<ImpCusdecItmCost>();
            List<ImportsCostElementItem> custItemsCost = new List<ImportsCostElementItem>();
            List<ImpCusdecCost> custCost = new List<ImpCusdecCost>();
            List<ImportsBLContainer> blContainers = new List<ImportsBLContainer>();
            string msg = string.Empty;
            if (_connopen == true)
            {
                _financialDAL = new FinancialDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL = new SalesDAL();
            }

            try
            {

                reqHdr.Itr_req_no = _reqNo;
                reqHdr = _financialDAL.GetInventoryRequestDataByReqNo(reqHdr);

                if (reqHdr != null)
                {

                    if (reqHdr.Itr_stus == "C")
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custItemsCost = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "Request already canceled!";
                        return -1;
                    }

                    if (reqHdr.Itr_stus == "F")
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custItemsCost = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "Request already proceed!";
                        return -1;
                    }

                    custHdr = _financialDAL.GET_CUSDEC_HEADER_BY_DOC(_company, _country, "TO", reqHdr.Itr_job_no.ToString());
                    if (custHdr != null)
                    {
                        custHdr.CUH_SUN_REQ_NO = custHdr.CUH_OTH_NO.ToString();
                        custHdr.CUH_SUN_BOND_NO = reqHdr.Itr_job_no.ToString();
                        List<ImpCusdecCost> custCost1 = new List<ImpCusdecCost>();
                        List<ImpCusdecItm> custItems1 = _financialDAL.GET_CUSDEC_ITEM_BY_DOC(reqHdr.Itr_job_no.ToString());
                        List<InventoryRequestItem> reqItems1 = _financialDAL.GET_INT_REQ_ITM_BY_SEQ(reqHdr.Itr_seq_no);
                        //custItemsCost = _financialDAL.GET_CUSDEC_ITEM_COST_BY_DOC(reqHdr.Itr_job_no.ToString());
                        custItemsCost = _financialDAL.GET_IMP_CST_ELE_ITM_BY_SINO(custHdr.CUH_OTH_NO);
                        foreach (InventoryRequestItem itm in reqItems1)
                        {
                            custHdr.CUH_ITEMS_QTY = reqItems1.Count();
                            ImpCusdecItm custItems2 = custItems1.FindAll(x => x.Cui_line == itm.Itri_job_line)[0];
                            custItems2.Cui_req_qty = custItems2.Cui_qty;
                            itm.Itri_advan_qty = custItems2.Cui_qty;
                            custItems2.Cui_bal_qty3 = custItems2.Cui_qty;
                            custItems2.Cui_qty = itm.Itri_qty;
                            custItems2.Cui_bal_qty1 = 0;
                            custItems2.Cui_bal_qty2 = 0;


                            //bind cat desc
                            string cat1 = _financialDAL.GetSIItemCat1(custItems2.Cui_itm_cd);
                            string cat2 = _financialDAL.GetSIItemCat2(custItems2.Cui_itm_cd);

                            custItems2.ItemCat1 = cat1;
                            custItems2.ItemCat2 = cat2;

                            if (itm.ITRI_ITM_COND == "1")
                            {
                                custItems2.itri_itm_cond = true;
                            }
                            else
                            {
                                custItems2.itri_itm_cond = false;
                            }
                            //subodadana 2016-12-24
                            custItems2.Cui_itm_stus = itm.Itri_itm_stus;

                            custItems2.Cui_bal_qty3 = itm.Itri_res_qty;//Reservation Qty; Chamal 31-08-2016
                            custItems2.Cui_anal_5 = itm.Itri_res_no; //Reservation No; Chamal 31-08-2016
                            custItems2.Cui_anal_3 = itm.Itri_res_line.ToString(); //Reservation Line  No; Chamal 18-10-2016
                            decimal mass = CAL_WEIGHT_APPORTION(custItems2.Cui_qty, custItems2.Cui_qty, custItems2.Cui_req_qty, custItems2.Cui_gross_mass);
                            custItems2.Cui_gross_mass = mass;
                            mass = CAL_WEIGHT_APPORTION(custItems2.Cui_qty, custItems2.Cui_qty, custItems2.Cui_req_qty, custItems2.Cui_net_mass);
                            custItems2.Cui_net_mass = mass;
                            custItems2.Cui_unit_amt = custItems2.Cui_unit_rt * custItems2.Cui_qty;
                            custItems.Add(custItems2);
                            if (custItemsCost != null)
                            {
                                List<ImportsCostElementItem> custItemsCost1 = custItemsCost.FindAll(x => x.Ice_ref_line == itm.Itri_job_line && (x.Ice_ele_cd == "COST" || x.Ice_ele_cd == "FRGT" || x.Ice_ele_cd == "INSU" || x.Ice_ele_cd == "OTH"));
                                foreach (ImportsCostElementItem itmcost in custItemsCost1)
                                {
                                    ImpCusdecCost custCost2 = new ImpCusdecCost();
                                    custCost2.Cus_act = 1;
                                    custCost2.Cus_amt = ((itmcost.Ice_pre_amnt / itm.Itri_advan_qty) / custHdr.CUH_EX_RT) * itm.Itri_qty;
                                    custCost2.Cus_amt_com = (itmcost.Ice_pre_amnt / itm.Itri_advan_qty) * itm.Itri_qty;
                                    custCost2.Cus_ele_cat = itmcost.Ice_ele_cat;
                                    custCost2.Cus_ele_cd = itmcost.Ice_ele_cd;
                                    custCost2.Cus_ele_tp = itmcost.Ice_ele_tp;

                                    custCost2.Cus_amt = Math.Round(custCost2.Cus_amt, 2);
                                    custCost2.Cus_amt_com = Math.Round(custCost2.Cus_amt_com, 2);
                                    custCost1.Add(custCost2);
                                }
                            }

                        }

                        var result = from x in custCost1
                                     group x by new { x.Cus_ele_cat, x.Cus_ele_tp, x.Cus_ele_cd }
                                         into g
                                         select new { g.Key.Cus_ele_cat, g.Key.Cus_ele_tp, g.Key.Cus_ele_cd, eleVal = g.Sum(s => s.Cus_amt_com), eleValUSD = g.Sum(s => s.Cus_amt) };
                        foreach (var itm in result)
                        {
                            ImpCusdecCost custCost2 = new ImpCusdecCost();
                            custCost2.Cus_act = 1;
                            custCost2.Cus_amt = itm.eleValUSD;
                            custCost2.Cus_amt_com = itm.eleValUSD;
                            custCost2.Cus_ele_cat = itm.Cus_ele_cat;
                            custCost2.Cus_ele_cd = itm.Cus_ele_cd;
                            custCost2.Cus_ele_tp = itm.Cus_ele_tp;
                            custCost.Add(custCost2);
                        }
                        blContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(custHdr.CUH_OTH_NO);
                        foreach (ImpCusdecCost itm in custCost)
                        {
                            if (itm.Cus_ele_cd == "COST")
                            { itm.Cus_ele_cd_name = "Cost"; itm.Cus_line = 1; }
                            if (itm.Cus_ele_cd == "FRGT")
                            { itm.Cus_ele_cd_name = "Freight"; itm.Cus_line = 2; }
                            if (itm.Cus_ele_cd == "INSU")
                            { itm.Cus_ele_cd_name = "Insurance"; itm.Cus_line = 3; }
                            if (itm.Cus_ele_cd == "OTH")
                            { itm.Cus_ele_cd_name = "Other"; itm.Cus_line = 4; }
                        }
                        MasterCompany company = _inventoryDAL.GetCompByCode(_company);
                        MasterExchangeRate _exRate = _salesDAL.GetExchangeRate(_company, custHdr.CUH_CUR_CD, DateTime.Now.Date, company.Mc_cur_cd, "WHARF");
                        if (_exRate != null) custHdr.CUH_EX_RT = _exRate.Mer_cussel_rt;
                        custHdr.CUH_TOT_PKG = custItems.Sum(x => x.Cui_qty).ToString();
                        custHdr.CUH_TOT_AMT = custCost.Sum(x => x.Cus_amt);
                        custHdr.CUH_OTH_NO = _reqNo;

                        //if (_docType == "RE")
                        //{
                        //    MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                        //    custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                        //    custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                        //    custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                        //    custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                        //    custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                        //}
                        if (!string.IsNullOrEmpty(reqHdr.Itr_bus_code.ToString()) && reqHdr.Itr_bus_code.ToString() != "N/A")
                        {
                            if (_docType == "EX")
                            {

                                MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                                custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                                custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                                //custHdr.CUH_CONSI_TIN = _cust.Mbe_tax_no.ToString();
                                custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                                custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                                custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                                custHdr.CUH_PROCE_CD_1 = _cust.Mbe_proc_val1;
                                custHdr.CUH_PROCE_CD_2 = _cust.Mbe_proc_val2;
                            }
                            if (_docType == "EXP" || _docType == "RE")
                            {
                                custHdr.CUH_SUPP_CD = custHdr.CUH_CONSI_CD;
                                custHdr.CUH_SUPP_NAME = custHdr.CUH_CONSI_NAME;
                                custHdr.CUH_SUPP_TIN = custHdr.CUH_CONSI_TIN;
                                custHdr.CUH_SUPP_ADDR = custHdr.CUH_CONSI_ADDR;

                                MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                                custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                                custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                                //custHdr.CUH_CONSI_TIN = _cust.Mbe_tax_no.ToString();
                                custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                                custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                                custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                                if (_docType == "RE")
                                {
                                    custHdr.CUH_PROC_CD = _cust.Mbe_proc_cd;
                                    custHdr.CUH_PROCE_CD_1 = _cust.Mbe_proc_val1;
                                    custHdr.CUH_PROCE_CD_2 = _cust.Mbe_proc_val2;
                                    custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd;
                                }
                            }
                        }
                        else
                        {
                            if (_docType == "EX") //Added by Chamal 13-09-2016
                            {
                                custHdr.CUH_PROCE_CD_1 = string.Empty;
                                custHdr.CUH_PROCE_CD_2 = string.Empty;
                            }
                        }

                        InventoryHeader _invHdr = _inventoryDAL.GetINTHDRByOthDoc(_company, "GRN", custHdr.CUH_SUN_REQ_NO.ToString()); //Edit SI no load variable by Chamal 08-Sep-2016
                        if (_invHdr != null)
                        {
                            if (!string.IsNullOrEmpty(_invHdr.Ith_entry_no) && !string.IsNullOrEmpty(_invHdr.Ith_loc))
                            {
                                if (_invHdr.Ith_entry_no == "N/A")
                                {
                                    _invHdr.Ith_entry_no = custHdr.CUH_CUSDEC_ENTRY_NO;
                                    _invHdr.Ith_git_close_date = custHdr.CUH_DT;
                                }
                                custHdr.CUH_BL_NO = _invHdr.Ith_entry_no.ToString() + " OF " + _invHdr.Ith_git_close_date.ToString("dd/MM/yyyy");
                                custHdr.CUH_ENTRY_NO = _invHdr.Ith_entry_no.ToString();
                                MasterLocation _mstLoc = _generalDAL.GetLocationInfor(_company, _invHdr.Ith_loc.ToString());
                                custHdr.CUH_MARKS_AND_NO = _mstLoc.Ml_loc_desc.ToString();
                            }
                            else
                            {
                                custHdr.CUH_BL_NO = "-";
                                custHdr.CUH_MARKS_AND_NO = "-";
                            }
                        }
                        else
                        {
                            custHdr.CUH_BL_NO = "Still not GRN";
                            custHdr.CUH_MARKS_AND_NO = "Still not GRN";
                        }
                        custHdr.CUH_CUSDEC_ENTRY_NO = string.Empty;

                        _custHdr = custHdr;
                        _custItems = custItems;
                        //_custItemsCost = custItemsCost;
                        _custItemsCost = null;
                        _custCost = custCost;
                        _custContainer = blContainers;
                        _msg = msg;
                        _rtnVal = 1;
                    }
                    else
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custItemsCost = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "Invalid Tobond No";
                    }
                }
                else
                {
                    _custHdr = null;
                    _custItems = null;
                    _custItemsCost = null;
                    _custCost = null;
                    _custContainer = null;
                    _msg = "Invalid Request No";
                }

                return _rtnVal;
            }
            catch (Exception ex)
            {
                _custHdr = null;
                _custItems = null;
                _custItemsCost = null;
                _custCost = null;
                _custContainer = null;
                _msg = ex.Message.ToString();
                return -1;
            }
        }

        public int GetBOICusdecReqData(string _company, string _country, string _docType, string _custCode, List<string> _reqNo, out ImpCusdecHdr _custHdr, out List<ImpCusdecItm> _custItems, out List<ImpCusdecItmCost> _custItemsCost, out List<ImpCusdecCost> _custCost, out List<ImportsBLContainer> _custContainer, out string _msg)
        {

            Int32 _rtnValFinal = 0;
            ImpCusdecHdr custHdrFinal = new ImpCusdecHdr();
            List<ImpCusdecItm> custItemsFinal = new List<ImpCusdecItm>();
            List<ImpCusdecCost> custCostFinal = new List<ImpCusdecCost>();
            List<ImportsBLContainer> blContainersFinal = new List<ImportsBLContainer>();
            string msgFinal = string.Empty;

            _financialDAL = new FinancialDAL();
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();

            int boiItemLine = 1;

            //try
            //{

            foreach (string boireqno in _reqNo)
            {
                ImpCusdecHdr custHdr = new ImpCusdecHdr();
                List<ImpCusdecItm> custItems = new List<ImpCusdecItm>();
                List<ImpCusdecCost> custCost = new List<ImpCusdecCost>();
                List<ImportsCostElementItem> custItemsCost = new List<ImportsCostElementItem>();
                List<ImportsBLContainer> blContainers = new List<ImportsBLContainer>();
                InventoryRequest reqHdr = new InventoryRequest();
                string msg = string.Empty;

                reqHdr.Itr_req_no = boireqno;
                reqHdr = _inventoryDAL.GetInventoryRequestDataByReqNo(reqHdr);

                if (reqHdr != null)
                {
                    custHdr = _financialDAL.GET_CUSDEC_HEADER_BY_DOC(_company, _country, "TO", reqHdr.Itr_job_no.ToString());
                    if (custHdr != null)
                    {

                        MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), _custCode, string.Empty, string.Empty, "C");
                        custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                        custHdr.CUH_CONSI_TIN = _cust.Mbe_tax_no.ToString();
                        custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                        custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                        custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();

                        custHdr.CUH_SUPP_ADDR = custHdr.CUH_DECL_ADDR;
                        custHdr.CUH_SUPP_CD = custHdr.CUH_DECL_CD;
                        custHdr.CUH_SUPP_NAME = custHdr.CUH_DECL_NAME;
                        custHdr.CUH_SUPP_TIN = custHdr.CUH_DECL_TIN;

                        custHdr.CUH_PROC_CD = _cust.Mbe_proc_cd;
                        custHdr.CUH_PROCE_CD_1 = _cust.Mbe_proc_val1;
                        custHdr.CUH_PROCE_CD_2 = _cust.Mbe_proc_val2;

                        List<MasterBusinessOfficeEntry> _officeOfEntry = new List<MasterBusinessOfficeEntry>();
                        _officeOfEntry = _generalDAL.getCustomerOfficeofEntry(custHdr.CUH_COM.ToString(), _custCode, "C");
                        if (_officeOfEntry != null)
                        {
                            foreach (MasterBusinessOfficeEntry _off in _officeOfEntry)
                            {
                                if (_off._mbbo_direct == 1)
                                {
                                    custHdr.CUH_INSU_TEXT = _off._mbbo_off_cd.ToString();
                                }
                                if (_off._mbbo_direct == 0)
                                {
                                    custHdr.CUH_OFFICE_OF_ENTRY = _off._mbbo_off_cd.ToString();
                                }
                            }
                        }

                        //custHdr.CUH_SUN_REQ_NO = custHdr.CUH_OTH_NO.ToString();
                        //custHdr.CUH_SUN_BOND_NO = reqHdr.Itr_job_no.ToString();
                        List<ImpCusdecCost> custCost1 = new List<ImpCusdecCost>();
                        List<ImpCusdecItm> custItems1 = _financialDAL.GET_CUSDEC_ITEM_BY_DOC(reqHdr.Itr_job_no.ToString());
                        List<InventoryRequestItem> reqItems1 = _inventoryDAL.GET_INT_REQ_ITM_BY_SEQ(reqHdr.Itr_seq_no);
                        //custItemsCost = _financialDAL.GET_CUSDEC_ITEM_COST_BY_DOC(reqHdr.Itr_job_no.ToString());
                        custItemsCost = _financialDAL.GET_IMP_CST_ELE_ITM_BY_SINO(custHdr.CUH_OTH_NO);
                        foreach (InventoryRequestItem itm in reqItems1)
                        {

                            List<ImpCusdecItm> custItems3 = custItems1.FindAll(x => x.Cui_line == itm.Itri_job_line && x.Cui_doc_no == itm.Itri_job_no);



                            DataTable dtTempasd = DataTableExtensions.ToDataTable(custItems3);
                            foreach (DataRow row in dtTempasd.Rows)
                            {
                                ImpCusdecItm custItems2 = new ImpCusdecItm();
                                itm.Itri_advan_qty = Convert.ToDecimal(row["Cui_qty"]);
                                custItems2.Cui_bal_qty3 = Convert.ToDecimal(row["Cui_qty"]);
                                custItems2.Cui_qty = itm.Itri_qty;
                                custItems2.Cui_bal_qty1 = 0;
                                custItems2.Cui_bal_qty2 = 0;
                                custItems2.Cui_bal_qty3 = 0;
                                custItems2.Cui_req_qty = 0;
                                custItems2.Cui_anal_1 = custHdr.CUH_OTH_NO.ToString();
                                custItems2.Cui_oth_doc_no = reqHdr.Itr_job_no.ToString();
                                custItems2.Cui_oth_doc_line = itm.Itri_job_line;
                                custItems2.Cui_line = boiItemLine;
                                custItems2.Cui_anal_2 = reqHdr.Itr_req_no;
                                custItems2.Cui_anal_3 = custHdr.CUH_CUSDEC_ENTRY_NO.ToString() + " OF " + custHdr.CUH_CUSDEC_ENTRY_DT.ToString("dd/MM/yyyy");
                                #region Get Cusdec Entry No1
                                InventoryHeader _invHdr = _inventoryDAL.GetINTHDRByOthDoc(_company, "GRN", custHdr.CUH_OTH_NO.ToString()); //Edit SI no load variable by Chamal 08-Sep-2016
                                if (_invHdr != null)
                                {
                                    if (!string.IsNullOrEmpty(_invHdr.Ith_entry_no) && !string.IsNullOrEmpty(_invHdr.Ith_loc))
                                    {
                                        if (_invHdr.Ith_entry_no == "N/A")
                                        {
                                            //_invHdr.Ith_entry_no = custHdr.CUH_CUSDEC_ENTRY_NO;
                                            //_invHdr.Ith_git_close_date = custHdr.CUH_DT;
                                        }
                                        //  custItems2.Cui_anal_3 = _invHdr.Ith_entry_no.ToString() + " OF " + _invHdr.Ith_git_close_date.ToString("dd/MM/yyyy");
                                        //MasterLocation _mstLoc = _generalDAL.GetLocationInfor(_company, _invHdr.Ith_loc.ToString());
                                        //custHdr.CUH_MARKS_AND_NO = _mstLoc.Ml_loc_desc.ToString();
                                    }
                                    else
                                    {
                                        //custHdr.CUH_BL_NO = "-";
                                        //custHdr.CUH_MARKS_AND_NO = "-";
                                    }
                                }
                                else
                                {
                                    //custHdr.CUH_BL_NO = "Still not GRN";
                                    //custHdr.CUH_MARKS_AND_NO = "Still not GRN";
                                }
                                #endregion


                                custItems2.Cui_anal_4 = row["Cui_anal_4"].ToString();
                                custItems2.Cui_anal_5 = itm.Itri_res_no;
                                custItems2.Cui_base_itm = row["Cui_base_itm"].ToString();
                                custItems2.Cui_bl_no = row["Cui_bl_no"].ToString();
                                custItems2.Cui_bl_unit_rt = Convert.ToDecimal(row["Cui_bl_unit_rt"].ToString());
                                custItems2.Cui_Bond_no = row["Cui_Bond_no"].ToString();
                                custItems2.Cui_capacity = row["Cui_capacity"].ToString();
                                custItems2.Cui_cre_by = row["Cui_cre_by"].ToString();
                                custItems2.Cui_cre_dt = Convert.ToDateTime(row["Cui_cre_dt"].ToString());
                                custItems2.Cui_cre_session = row["Cui_cre_session"].ToString();
                                custItems2.Cui_def_cnty = row["Cui_def_cnty"].ToString();
                                custItems2.Cui_doc_no = row["Cui_doc_no"].ToString();
                                custItems2.Cui_fin_no = row["Cui_fin_no"].ToString();
                                custItems2.Cui_gross_mass = (Convert.ToDecimal(row["Cui_gross_mass"].ToString()) / Convert.ToDecimal(row["Cui_qty"].ToString())) * itm.Itri_qty;
                                custItems2.Cui_hs_cd = row["Cui_hs_cd"].ToString();
                                custItems2.Cui_is_res = Convert.ToBoolean(row["Cui_is_res"].ToString());
                                custItems2.Cui_itm_cd = row["Cui_itm_cd"].ToString();
                                custItems2.Cui_itm_desc = row["Cui_itm_desc"].ToString();
                                custItems2.Cui_itm_price = Convert.ToDecimal(row["Cui_itm_price"].ToString());
                                custItems2.Cui_itm_stus = row["Cui_itm_stus"].ToString();
                                custItems2.Cui_kit_itm_cd = row["Cui_kit_itm_cd"].ToString();
                                custItems2.Cui_kit_line = Convert.ToInt32(row["Cui_kit_line"].ToString());
                                custItems2.Cui_mod_by = row["Cui_mod_by"].ToString();
                                custItems2.Cui_mod_dt = Convert.ToDateTime(row["Cui_mod_dt"].ToString());
                                custItems2.Cui_mod_session = row["Cui_mod_session"].ToString();
                                custItems2.Cui_model = row["Cui_model"].ToString();
                                custItems2.Cui_net_mass = (Convert.ToDecimal(row["Cui_net_mass"].ToString()) / Convert.ToDecimal(row["Cui_qty"].ToString())) * itm.Itri_qty;
                                custItems2.Cui_orgin_cnty = row["Cui_orgin_cnty"].ToString();
                                custItems2.Cui_pi_line = Convert.ToInt32(row["Cui_pi_line"].ToString());
                                custItems2.Cui_pi_no = row["Cui_pi_no"].ToString();
                                custItems2.Cui_pi_unit_rt = Convert.ToDecimal(row["Cui_pi_unit_rt"].ToString());
                                custItems2.Cui_pkgs = row["Cui_pkgs"].ToString();
                                custItems2.Cui_preferance = row["Cui_preferance"].ToString();
                                custItems2.Cui_quota = row["Cui_quota"].ToString();
                                custItems2.Cui_req_qty = Convert.ToInt32(row["Cui_req_qty"].ToString());
                                custItems2.Cui_seq_no = Convert.ToInt32(row["Cui_seq_no"].ToString());
                                custItems2.Cui_tag = row["Cui_tag"].ToString();
                                custItems2.Cui_tp = row["Cui_tp"].ToString();
                                custItems2.Cui_unit_amt = itm.Itri_bqty * Convert.ToDecimal(row["Cui_unit_rt"].ToString());
                                custItems2.Cui_unit_rt = Convert.ToDecimal(row["Cui_unit_rt"].ToString());
                                custItems2.EntryLine = Convert.ToInt32(row["Cui_oth_doc_line"].ToString());
                                custItems.Add(custItems2);
                                boiItemLine++;
                                continue;
                            }
                            List<ImportsCostElementItem> custItemsCost1 = custItemsCost.FindAll(x => x.Ice_ref_line == itm.Itri_job_line && (x.Ice_ele_cd == "COST" || x.Ice_ele_cd == "FRGT" || x.Ice_ele_cd == "INSU" || x.Ice_ele_cd == "OTH"));
                            foreach (ImportsCostElementItem itmcost in custItemsCost1)
                            {
                                ImpCusdecCost custCost2 = new ImpCusdecCost();
                                custCost2.Cus_act = 1;
                                custCost2.Cus_amt = ((itmcost.Ice_pre_amnt / itm.Itri_advan_qty) / custHdr.CUH_EX_RT) * itm.Itri_qty;
                                custCost2.Cus_amt_com = (itmcost.Ice_pre_amnt / itm.Itri_advan_qty) * itm.Itri_qty;
                                custCost2.Cus_ele_cat = itmcost.Ice_ele_cat;
                                custCost2.Cus_ele_cd = itmcost.Ice_ele_cd;
                                custCost2.Cus_ele_tp = itmcost.Ice_ele_tp;

                                custCost2.Cus_amt = Math.Round(custCost2.Cus_amt, 2);
                                custCost2.Cus_amt_com = Math.Round(custCost2.Cus_amt_com, 2);
                                custCost1.Add(custCost2);
                            }
                        }
                        if (_docType == "EXP")
                        {
                            var result = from x in custCost1
                                         group x by new { x.Cus_ele_cat, x.Cus_ele_cd }
                                             into g
                                             select new { g.Key.Cus_ele_cat, g.Key.Cus_ele_cd, eleVal = g.Sum(s => s.Cus_amt_com), eleValUSD = g.Sum(s => s.Cus_amt) };
                            foreach (var itm in result)
                            {
                                ImpCusdecCost custCost2 = new ImpCusdecCost();
                                custCost2.Cus_act = 1;
                                custCost2.Cus_amt = itm.eleValUSD;
                                custCost2.Cus_amt_com = itm.eleValUSD;
                                custCost2.Cus_ele_cat = itm.Cus_ele_cat;
                                custCost2.Cus_ele_cd = itm.Cus_ele_cd;
                                custCost2.Cus_ele_tp = "C&F";
                                custCost.Add(custCost2);
                            }
                        }
                        else
                        {
                            var result = from x in custCost1
                                         group x by new { x.Cus_ele_cat, x.Cus_ele_tp, x.Cus_ele_cd }
                                             into g
                                             select new { g.Key.Cus_ele_cat, g.Key.Cus_ele_tp, g.Key.Cus_ele_cd, eleVal = g.Sum(s => s.Cus_amt_com), eleValUSD = g.Sum(s => s.Cus_amt) };
                            foreach (var itm in result)
                            {
                                ImpCusdecCost custCost2 = new ImpCusdecCost();
                                custCost2.Cus_act = 1;
                                custCost2.Cus_amt = itm.eleValUSD;
                                custCost2.Cus_amt_com = itm.eleValUSD;
                                custCost2.Cus_ele_cat = itm.Cus_ele_cat;
                                custCost2.Cus_ele_cd = itm.Cus_ele_cd;
                                custCost2.Cus_ele_tp = itm.Cus_ele_tp;
                                custCost.Add(custCost2);
                            }
                        }

                        blContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(custHdr.CUH_OTH_NO);

                        custHdr.CUH_TOT_PKG = custItems.Sum(x => x.Cui_qty).ToString();
                        custHdr.CUH_TOT_AMT = custCost.Sum(x => x.Cus_amt);
                        custHdr.CUH_OTH_NO = boireqno;

                        foreach (ImpCusdecCost itm in custCost)
                        {
                            if (itm.Cus_ele_cd == "COST")
                            { itm.Cus_ele_cd_name = "Cost"; itm.Cus_line = 1; itm.Cus_amt = Convert.ToDecimal(custHdr.CUH_TOT_AMT.ToString()); }
                            if (itm.Cus_ele_cd == "FRGT")
                            { itm.Cus_ele_cd_name = "Freight"; itm.Cus_line = 2; itm.Cus_amt = 0; }
                            if (itm.Cus_ele_cd == "INSU")
                            { itm.Cus_ele_cd_name = "Insurance"; itm.Cus_line = 3; itm.Cus_amt = 0; }
                            if (itm.Cus_ele_cd == "OTH")
                            { itm.Cus_ele_cd_name = "Other"; itm.Cus_line = 4; itm.Cus_amt = 0; }
                        }

                        List<ImpCusdecCost> _tempCusdecCost = custCost;
                        custCost = new List<ImpCusdecCost>();
                        custCost.Add(_tempCusdecCost.Find(x => x.Cus_ele_cd == "COST"));

                        MasterCompany company = _inventoryDAL.GetCompByCode(_company);
                        MasterExchangeRate _exRate = _salesDAL.GetExchangeRate(_company, custHdr.CUH_CUR_CD, DateTime.Now.Date, company.Mc_cur_cd, "WHARF");
                        if (_exRate != null) custHdr.CUH_EX_RT = _exRate.Mer_cussel_rt;



                        #region Hidden Area
                        //if (_docType == "RE")
                        //{
                        //    MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                        //    custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_dl_no.ToString();
                        //    custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                        //    custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                        //    custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                        //    custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                        //}

                        //InventoryHeader _invHdr = _inventoryDAL.GetINTHDRByOthDoc(_company, "GRN", reqHdr.Itr_anal2.ToString());
                        //if (_invHdr != null)
                        //{
                        //    if (!string.IsNullOrEmpty(_invHdr.Ith_entry_no) && !string.IsNullOrEmpty(_invHdr.Ith_loc))
                        //    {
                        //        custHdr.CUH_BL_NO = _invHdr.Ith_entry_no.ToString() + " OF " + _invHdr.Ith_git_close_date.ToShortDateString();
                        //        MasterLocation _mstLoc = _generalDAL.GetLocationInfor(_company, _invHdr.Ith_loc.ToString());
                        //        custHdr.CUH_MARKS_AND_NO = _mstLoc.Ml_loc_desc.ToString();
                        //    }
                        //    else
                        //    {
                        //        custHdr.CUH_BL_NO = "";
                        //        custHdr.CUH_MARKS_AND_NO = "";
                        //    }
                        //}
                        //else
                        //{
                        //    custHdr.CUH_BL_NO = "Still not GRN";
                        //    custHdr.CUH_MARKS_AND_NO = "Still not GRN";
                        //}
                        #endregion

                        custHdrFinal = custHdr;
                        custItemsFinal.AddRange(custItems);
                        custCostFinal.AddRange(custCost);
                        blContainersFinal = blContainers;
                        msgFinal = msgFinal + msg;

                    }
                    else
                    {
                        custHdrFinal = null;
                        custItemsFinal = null;
                        blContainersFinal = null;
                        _msg = "Invalid Tobond No for Request : " + boireqno;
                        msgFinal = msgFinal + msg;
                        _rtnValFinal = 0;
                    }
                }
                else
                {
                    custHdrFinal = null;
                    custItemsFinal = null;
                    blContainersFinal = null;
                    _msg = "Invalid Request No : " + boireqno;
                    msgFinal = msgFinal + msg;
                    _rtnValFinal = 0;
                }
            }
            List<ImpCusdecCost> custCostFinalTot = new List<ImpCusdecCost>();
            foreach (var item in custCostFinal)
            {
                var v = custCostFinalTot.Where(c => c.Cus_ele_cat == item.Cus_ele_cat
                                                && c.Cus_ele_cd == item.Cus_ele_cd
                                                && c.Cus_ele_cd_name == item.Cus_ele_cd_name
                                                && c.Cus_ele_tp == item.Cus_ele_tp
                                                ).FirstOrDefault();
                if (v != null)
                {
                    v.Cus_amt = v.Cus_amt + item.Cus_amt;
                    v.Cus_amt_com = v.Cus_amt_com + item.Cus_amt_com;
                }
                else
                {
                    custCostFinalTot.Add(item);
                }
            }
            custHdrFinal.CUH_TOT_AMT = custCostFinalTot.Sum(X => X.Cus_amt);

            //          var all = custCostFinal
            //.GroupBy(x => x.Cus_ele_cat , x.Cus_ele_cd , x.Cus_ele_tp)
            //.Select(x => x.Sum(y => Int32.Parse(y[2]));

            //custCostFinalTot=  custCostFinal.GroupBy(x => new { x.Cus_ele_cat, x.Cus_ele_cd,x.Cus_ele_tp }).Select(g => new 
            //{ 
            //    g.Key.Tus_itm_cd, g.Key.Tus_itm_stus, qty = g.Sum(p => p.Tus_qty) 
            //}).Where(a => a.Tus_itm_cd == _p.itemcode.ToString() && a.Tus_itm_stus == _p.itemstatus.ToString() && a.qty > _p.qty);
            //    custCostFinalTot=custCostFinal.GroupBy()

            if (string.IsNullOrEmpty(msgFinal)) _rtnValFinal = 1;

            _custHdr = custHdrFinal;
            _custItems = custItemsFinal;
            _custCost = custCostFinalTot;
            _custContainer = blContainersFinal;
            _custItemsCost = null;
            _msg = msgFinal;
            return _rtnValFinal;


            //}
            //catch (Exception ex)
            //{
            //    _custHdr = null;
            //    _custItems = null;
            //    _custItemsCost = null;
            //    _custCost = null;
            //    _custContainer = null;
            //    _msg = ex.Message.ToString();
            //    return -1;
            //}
        }

        public DataTable Get_OFFICE_ENTRY(string country, string entryType, string entrySubType)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_OFFICE_ENTRY(country, entryType, entrySubType);
        }

        public DataTable Get_LOC_OF_GOODS(string country, string entryType, string entrySubType)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_LOC_OF_GOODS(country, entryType, entrySubType);
        }

        public CusdecCommon Get_CusdecCommon(string country)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_CusdecCommon(country);
        }

        //Tharaka 2016-02-08
        public ImpCusdecHdr GET_CUSTDEC_HDR_BY_DOC(String docno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_CUSTDEC_HDR_BY_DOC(docno);
        }

        //Tharaka 2016-02-08
        public List<ImportsBLItems> GET_BL_ITM_BY_DOC_ITM(string Doc, String Item, string status)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_BL_ITM_BY_DOC_ITM(Doc, Item, status);

        }

        #region Cost Sheet Formulas :: by Chamal 10-Feb-2016
        public decimal Cal_SLPA(string _blNo, int _demurrageDays, decimal _exRate)
        {
            _financialDAL = new FinancialDAL();
            decimal _rateTot = 0;
            List<ImportsBLContainer> BLContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(_blNo);
            foreach (var _con in BLContainers)
            {
                if (_con.Ibc_tp.Contains("20"))
                {
                    _con.Ibc_tp = "20";
                }
                if (_con.Ibc_tp.Contains("40"))
                {
                    _con.Ibc_tp = "40";
                }
            }
            var result = from x in BLContainers
                         group x by new { x.Ibc_tp }
                             into g
                             select new { g.Key.Ibc_tp, ContainersQty = g.Count() };
            foreach (var itm in result)
            {
                decimal _rate = 0;
                if (itm.Ibc_tp.Contains("40"))
                {
                    _rate = 64 * itm.ContainersQty * _exRate;
                }
                else if (itm.Ibc_tp.Contains("20"))
                {
                    _rate = 32 * itm.ContainersQty * _exRate;
                }
                _rateTot = _rateTot + _rate;
            }
            return _rateTot;
        }

        public decimal Cal_SLPA_RENT(string _blNo, int _demurrageDays, decimal _exRate)
        {
            _financialDAL = new FinancialDAL();
            decimal _rateTot = 0;
            List<ImportsBLContainer> BLContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(_blNo);
            foreach (var _con in BLContainers)
            {
                if (_con.Ibc_tp.Contains("20"))
                {
                    _con.Ibc_tp = "20";
                }
                if (_con.Ibc_tp.Contains("40"))
                {
                    _con.Ibc_tp = "40";
                }
            }
            var result = from x in BLContainers
                         group x by new { x.Ibc_tp }
                             into g
                             select new { g.Key.Ibc_tp, ContainersQty = g.Count() };
            foreach (var itm in result)
            {
                decimal _rate1 = 0; decimal _rate2 = 0; decimal _rate3 = 0; decimal _rate4 = 0;
                if (itm.Ibc_tp.Contains("40"))
                {
                    if (_demurrageDays >= 4 && _demurrageDays <= 7)
                    {
                        _rate1 = 16 * _demurrageDays * itm.ContainersQty * _exRate;
                    }
                    else if (_demurrageDays >= 8 && _demurrageDays <= 14)
                    {
                        _rate1 = 16 * _demurrageDays * itm.ContainersQty * _exRate;
                        _rate2 = 30 * (_demurrageDays - 7) * itm.ContainersQty * _exRate;
                        _rate1 = _rate1 + _rate2;
                    }
                    else if (_demurrageDays >= 15 && _demurrageDays <= 30)
                    {
                        _rate1 = 16 * _demurrageDays * itm.ContainersQty * _exRate;
                        _rate2 = 30 * 7 * itm.ContainersQty * _exRate;
                        _rate3 = 46 * (_demurrageDays - 14) * itm.ContainersQty * _exRate;
                        _rate1 = _rate1 + _rate2 + _rate3;
                    }
                    else if (_demurrageDays > 30)
                    {
                        _rate1 = 16 * _demurrageDays * itm.ContainersQty * _exRate;
                        _rate2 = 30 * 7 * itm.ContainersQty * _exRate;
                        _rate3 = 46 * 16 * itm.ContainersQty * _exRate;
                        _rate4 = 64 * (_demurrageDays - 30) * itm.ContainersQty * _exRate;
                        _rate1 = _rate1 + _rate2 + _rate3 + _rate4;
                    }
                }
                if (itm.Ibc_tp.Contains("20"))
                {
                    if (_demurrageDays >= 4 && _demurrageDays <= 7)
                    {
                        _rate1 = 8 * _demurrageDays * itm.ContainersQty * _exRate;
                    }
                    else if (_demurrageDays >= 8 && _demurrageDays <= 14)
                    {
                        _rate1 = 8 * _demurrageDays * itm.ContainersQty * _exRate;
                        _rate2 = 16 * (_demurrageDays - 7) * itm.ContainersQty * _exRate;
                        _rate1 = _rate1 + _rate2;
                    }
                    else if (_demurrageDays >= 15 && _demurrageDays <= 30)
                    {
                        _rate1 = 8 * _demurrageDays * itm.ContainersQty * _exRate;
                        _rate2 = 16 * 7 * itm.ContainersQty * _exRate;
                        _rate3 = 24 * (_demurrageDays - 14) * itm.ContainersQty * _exRate;
                        _rate1 = _rate1 + _rate2 + _rate3;
                    }
                    else if (_demurrageDays > 30)
                    {
                        _rate1 = 8 * _demurrageDays * itm.ContainersQty * _exRate;
                        _rate2 = 16 * 7 * itm.ContainersQty * _exRate;
                        _rate3 = 24 * 16 * itm.ContainersQty * _exRate;
                        _rate4 = 32 * (_demurrageDays - 30) * itm.ContainersQty * _exRate;
                        _rate1 = _rate1 + _rate2 + _rate3 + _rate4;
                    }
                }
                _rateTot = _rateTot + _rate1;
            }
            return _rateTot;
        }
        public decimal Cal_CDEM_RENT(string _blNo, int _demurrageDays, decimal _exRate)
        {
            _financialDAL = new FinancialDAL();
            decimal _rateTot = 0;
            List<ImportsBLContainer> BLContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(_blNo);
            foreach (var _con in BLContainers)
            {
                if (_con.Ibc_tp.Contains("20"))
                {
                    _con.Ibc_tp = "20";
                }
                if (_con.Ibc_tp.Contains("40"))
                {
                    _con.Ibc_tp = "40";
                }
            }
            var result = from x in BLContainers
                         group x by new { x.Ibc_tp }
                             into g
                             select new { g.Key.Ibc_tp, ContainersQty = g.Count() };
            foreach (var itm in result)
            {
                decimal _rate1 = 0; decimal _rate2 = 0; decimal _rate3 = 0; decimal _rate4 = 0;
                if (itm.Ibc_tp.Contains("40"))
                {
                    if (_demurrageDays >= 7 && _demurrageDays <= 14)
                    {
                        _rate1 = 16 * (_demurrageDays - 7) * itm.ContainersQty * _exRate;
                    }
                    else if (_demurrageDays > 14)
                    {

                        _rate1 = (16 * (7) * itm.ContainersQty * _exRate) + (21 * (_demurrageDays - 14) * itm.ContainersQty * _exRate);
                    }
                }
                if (itm.Ibc_tp.Contains("20"))
                {
                    if (_demurrageDays >= 7 && _demurrageDays <= 14)
                    {
                        _rate1 = 8 * (_demurrageDays - 7) * itm.ContainersQty * _exRate;
                    }
                    else if (_demurrageDays > 14)
                    {
                        _rate1 = (8 * (7) * itm.ContainersQty * _exRate) + (Convert.ToDecimal(10.5) * (_demurrageDays - 14) * itm.ContainersQty * _exRate);
                    }
                }
                _rateTot = _rate1;
            }
            return _rateTot;
        }
        #endregion
        public decimal WalfExsCalc(string _blNo, int _demurrageDays, decimal _exRate)
        {
            _financialDAL = new FinancialDAL();
            List<ImportsBLContainer> BLContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(_blNo);
            foreach (var _con in BLContainers)
            {
                if (_con.Ibc_tp.Contains("20"))
                {
                    _con.Ibc_tp = "20";
                }
                if (_con.Ibc_tp.Contains("40"))
                {
                    _con.Ibc_tp = "40";
                }
            }

            var result = from x in BLContainers
                         group x by new { x.Ibc_tp }
                             into g
                             select new { g.Key.Ibc_tp, ContainersQty = g.Count() };
            decimal _rate1 = 0; decimal _rate2 = 0;
            decimal _doccharge = 0;
            decimal _rentcharge = 0;
            decimal _tobondchrge = 0;
            decimal _otherbond = 0;
            if (_demurrageDays == 0)
            {
                _rentcharge = 1050;
            }
            string _entrynotype = _financialDAL.GetBondType(_blNo);
            if (_entrynotype == "TO")
            {
                _tobondchrge = 475;
            }
            else
            {
                _otherbond = 475 + 315;
            }
            foreach (var itm in result)
            {

                if (itm.Ibc_tp.Contains("40"))
                {
                    if (itm.ContainersQty <= 3)
                    {
                        _rate1 = _rate1 + 1650 * itm.ContainersQty;
                        _doccharge = _doccharge + 1350 * itm.ContainersQty;
                    }
                    else
                    {
                        _rate1 = _rate1 + 1650 + 1400 * (itm.ContainersQty - 1);
                        _doccharge = _doccharge + 1350 * itm.ContainersQty;
                    }
                }
                else if (itm.Ibc_tp.Contains("20"))
                {
                    if (itm.ContainersQty <= 3)
                    {
                        _rate2 = _rate2 + 1500 * itm.ContainersQty;
                        _doccharge = _doccharge + 1350 * itm.ContainersQty;
                    }
                    else
                    {
                        _rate2 = _rate2 + 1500 + 1300 * (itm.ContainersQty - 1);
                        _doccharge = _doccharge + 1350 * itm.ContainersQty;
                    }
                }

            }
            return (_rate1 + _rate2 + _doccharge + _rentcharge + _tobondchrge + _otherbond);
        }
        public decimal WalfExsCalcAAL(string _blNo, int _demurrageDays, decimal _exRate)
        {
            _financialDAL = new FinancialDAL();
            List<ImportsBLContainer> BLContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(_blNo);
            foreach (var _con in BLContainers)
            {
                if (_con.Ibc_tp.Contains("20"))
                {
                    _con.Ibc_tp = "20";
                }
                if (_con.Ibc_tp.Contains("40"))
                {
                    _con.Ibc_tp = "40";
                }
            }

            var result = from x in BLContainers
                         group x by new { x.Ibc_tp }
                             into g
                             select new { g.Key.Ibc_tp, ContainersQty = g.Count() };
            decimal _rate1 = 0; decimal _rate2 = 0;
            decimal _doccharge = 0;
            decimal _rentcharge = 0;
            decimal _tobondchrge = 0;
            decimal _otherbond = 0;
            decimal _rmvlink = 0;
            decimal _screening = 0;
            decimal _examination = 0;
            decimal _laber = 0;
            decimal _rctchge = 0;
            if (_demurrageDays == 0)
            {
                _rentcharge = 800;
            }
            else
            {
                _rentcharge = 500;
            }
            string _entrynotype = _financialDAL.GetBondType(_blNo);
            if (_entrynotype == "LR")
            {
                _tobondchrge = 2500;
            }
            foreach (var itm in result)
            {

                if (itm.Ibc_tp.Contains("40"))
                {
                    if (itm.ContainersQty <= 3)
                    {
                        _rate1 = _rate1 + 1650 * itm.ContainersQty;
                        _rmvlink = _rmvlink + 1000 * itm.ContainersQty;
                        _screening = _screening + 400 * itm.ContainersQty;
                        _examination = _examination + 1500 * itm.ContainersQty;
                        _laber = _laber + 1000 * itm.ContainersQty;
                        _rctchge = _rctchge + Convert.ToDecimal(4164.15 * itm.ContainersQty);
                    }
                    else
                    {
                        _rate1 = _rate1 + 1650 + 1400 * (itm.ContainersQty - 1);
                        _rmvlink = _rmvlink + 1000 * itm.ContainersQty;
                        _screening = _screening + 400 * itm.ContainersQty;
                        _examination = _examination + 1500 * itm.ContainersQty;
                        _laber = _laber + 1000 * itm.ContainersQty;
                        _rctchge = _rctchge + Convert.ToDecimal(4164.15 * itm.ContainersQty);
                    }
                }
                else if (itm.Ibc_tp.Contains("20"))
                {
                    if (itm.ContainersQty <= 3)
                    {
                        _rate2 = _rate2 + 1500 * itm.ContainersQty;
                        _rmvlink = _rmvlink + 1000 * itm.ContainersQty;
                        _screening = _screening + 400 * itm.ContainersQty;
                        _examination = _examination + 1500 * itm.ContainersQty;
                        _laber = _laber + 1000 * itm.ContainersQty;
                        _rctchge = _rctchge + Convert.ToDecimal(4164.15 * itm.ContainersQty);
                    }
                    else
                    {
                        _rate2 = _rate2 + 1500 + 1300 * (itm.ContainersQty - 1);
                        _rmvlink = _rmvlink + 1000 * itm.ContainersQty;
                        _screening = _screening + 400 * itm.ContainersQty;
                        _examination = _examination + 1500 * itm.ContainersQty;
                        _laber = _laber + 1000 * itm.ContainersQty;
                        _rctchge = _rctchge + Convert.ToDecimal(4164.15 * itm.ContainersQty);
                    }
                }

            }
            return (_rate1 + _rate2 + _doccharge + _rentcharge + _tobondchrge + _otherbond + _rmvlink + _screening + _examination + _laber + _rctchge);
        }

        //Tharaka 2016-02-10
        public DataTable GET_IMP_OTHER_CST(string Type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_OTHER_CST(Type);
        }

        //Tharaka 2016-02-11
        public List<ComboBoxObject> GET_REF_CARY_TYPE()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_REF_CARY_TYPE();
        }

        //Darshana 2016-03-10
        public DataTable Get_PerItemCostVal(string p_docNo, string p_itmCd, Int32 p_itmLine)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_PerItemCostVal(p_docNo, p_itmCd, p_itmLine);
        }

        //LAkshan 2016-03-10
        public Int32 UpdateBillOfLadingWeb(ImportsBLHeader oHeader, List<ImportsBLItems> oImportsBLItems, List<ImportsBLSInvoice> OImportsBLSInvoice, List<ImportsBLContainer> oImportsBLContainers, List<ImportsBLCost> oImportsBLCosts, MasterAutoNumber _masterAuto, bool isNewRecord, out String Error, out String BLNumber)
        {
            Int32 _res = 0;
            Error = string.Empty;
            BLNumber = string.Empty;
            Int32 oBLSeqNumber = 0;
            Int32 _costSheetSeq = 0;
            String oBLDocnumber = string.Empty;
            List<ImportsBLItems> _oImportsBLItems = new List<ImportsBLItems>();
            List<ImportsBLContainer> _oImportsBLContainers = new List<ImportsBLContainer>();
            List<ImportsBLSInvoice> _OImportsBLSInvoice = new List<ImportsBLSInvoice>();
            List<ImportsCostElement> oImportsCostElements = new List<ImportsCostElement>();
            List<ImportsCostElementItem> oImportsCostElementItems = new List<ImportsCostElementItem>();

            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();


                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                //imp_cst_hdr & imp_bl_hdr
                oBLDocnumber = oHeader.Ib_doc_no;

                //Add bt Lakshan
                Int32 _ib_si_seq_no = 0;
                if (oImportsBLItems != null)
                {
                    if (oImportsBLItems.Count > 0)
                    {
                        try
                        {
                            _ib_si_seq_no = (from tab1 in oImportsBLItems
                                             select Convert.ToInt32(tab1.Ibi_anal_1)).Max();
                        }
                        catch (Exception)
                        {
                            _ib_si_seq_no = 0;
                        }

                    }
                }
                oHeader.Ib_si_seq_no = _ib_si_seq_no;
                //End

                _res = _financialDAL.SaveBLHeader(oHeader, out oBLSeqNumber);
                ImportsCostHeader oImportsCostHeader = _financialDAL.GET_IMP_CST_HDR_BY_DOC(oBLDocnumber, "I");
                oImportsCostHeader.Ich_seq_no = oBLSeqNumber;
                _res = _financialDAL.SAVE_IMP_CST_HDR_NEW(oImportsCostHeader, out _costSheetSeq);

                BLNumber = oHeader.Ib_doc_no;

                //_financialDAL.TransactionRollback();
                //_inventoryDAL.TransactionRollback();

                _res = _financialDAL.DEL_BL_COST(oHeader.Ib_seq_no);
                _res = _financialDAL.INACTIVE_IMP_COST(oImportsCostHeader.Ich_seq_no);

                //if (_res > 0)
                //{
                //imp_cst_itm & imp_bl_itm
                Int32 line = 0;
                foreach (ImportsBLItems oitem in oImportsBLItems)
                {
                    line++;
                    string status;
                    if (oitem.isNewItem == 1)
                    {
                        List<MasterItem> masteitm = _inventoryDAL.GetAllItemByModel(oitem.Ibi_model);
                        masteitm = masteitm.Where(a => a.Mi_cd == oitem.Ibi_itm_cd).ToList();
                        if (masteitm == null)
                        {
                            _res = -1;
                            Error = "Item Code and Model MissMatch  Item :" + oitem.Ibi_itm_cd + " Model : " + oitem.Ibi_model;
                            _inventoryDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            return _res;

                        }
                        else
                        {
                            if (masteitm.Count == 0)
                            {
                                _res = -1;
                                Error = "Item Code and Model MissMatch Item :" + oitem.Ibi_itm_cd + " Model : " + oitem.Ibi_model;
                                _inventoryDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                return _res;
                            }
                        }

                        oitem.Ibi_doc_no = oHeader.Ib_doc_no;
                        oitem.Ibi_seq_no = oBLSeqNumber;
                        oitem.Ibi_stus = 1;
                        oitem.Ibi_pi_no = string.Empty;
                        // oitem.Ibi_pi_line = 0;
                        oitem.Ibi_hs_cd = "NULL";
                        _res = _financialDAL.UPDATE_IMPBL_ITMS_NEW(oitem, out status);
                    }
                    else
                    {
                        List<MasterItem> masteitm = _inventoryDAL.GetAllItemByModel(oitem.Ibi_model);
                        masteitm = masteitm.Where(a => a.Mi_cd == oitem.Ibi_itm_cd).ToList();
                        if (masteitm == null)
                        {
                            _res = -1;
                            Error = "Item Code and Model MissMatch Item :" + oitem.Ibi_itm_cd + " Model : " + oitem.Ibi_model;
                            _inventoryDAL.TransactionRollback();
                            _financialDAL.TransactionRollback();
                            return _res;

                        }
                        else
                        {
                            if (masteitm.Count == 0)
                            {
                                _res = -1;
                                Error = "Item Code and Model MissMatch Item :" + oitem.Ibi_itm_cd + " Model : " + oitem.Ibi_model;
                                _inventoryDAL.TransactionRollback();
                                _financialDAL.TransactionRollback();
                                return _res;
                            }
                        }

                        //if (oitem.isRecordStatus == 1)
                        {
                            oitem.Ibi_doc_no = oHeader.Ib_doc_no;
                            oitem.Ibi_seq_no = oBLSeqNumber;
                            oitem.Ibi_hs_cd = "NULL";
                            oitem.Ibi_line = line;
                            _res = _financialDAL.UPDATE_IMPBL_ITMS_NEW(oitem, out status);
                        }
                    }
                }

                foreach (ImportsBLContainer item in oImportsBLContainers)
                {
                    item.Ibc_seq_no = oBLSeqNumber;
                    item.Ibc_doc_no = oBLDocnumber;
                    item.Ibc_cre_by = oHeader.Ib_mod_by;
                    _res = _financialDAL.SAVE_IMP_BL_CONTNR(item);
                }

                foreach (ImportsBLSInvoice item in OImportsBLSInvoice)
                {
                    item.Ibs_seq_no = oBLSeqNumber;
                    item.Ibs_doc_no = oBLDocnumber;
                    item.Ibs_cre_by = oHeader.Ib_mod_by;
                    _res = _financialDAL.SAVE_IMP_BL_SI(item);
                }

                Int32 lineNUm = 1;

                #region AddImportsCostElement
                foreach (ImportsBLCost item in oImportsBLCosts)
                {
                    ImportsCostElement oImportsCostElement = new ImportsCostElement();
                    oImportsCostElement.Icet_seq_no = oBLSeqNumber;
                    oImportsCostElement.Icet_line = 0;
                    oImportsCostElement.Icet_doc_no = item.Ibcs_doc_no.Trim();
                    oImportsCostElement.Icet_stus = 1;
                    oImportsCostElement.Icet_ele_cat = item.Ibcs_ele_cat;
                    oImportsCostElement.Icet_ele_tp = item.Ibcs_ele_tp;
                    oImportsCostElement.Icet_ele_cd = item.Ibcs_ele_cd;
                    oImportsCostElement.Icet_ele_rt = item.Ibcs_amt * oHeader.Ib_ex_rt;
                    // oImportsCostElement.Icet_ele_rt = item.Ibcs_amt;
                    oImportsCostElement.Icet_pre_rt = item.Ibcs_amt;
                    oImportsCostElement.Icet_actl_rt = 0;
                    oImportsCostElement.Icet_finl_rt = 0;
                    oImportsCostElement.Icet_anal_1 = "";
                    oImportsCostElement.Icet_anal_2 = "";
                    oImportsCostElement.Icet_anal_3 = "";
                    oImportsCostElement.Icet_anal_4 = "";
                    oImportsCostElement.Icet_anal_5 = "";
                    oImportsCostElement.Icet_cre_by = oHeader.Ib_mod_by;
                    oImportsCostElement.Icet_cre_dt = DateTime.Now;
                    oImportsCostElement.Icet_mod_by = oHeader.Ib_mod_by;
                    oImportsCostElement.Icet_mod_dt = DateTime.Now;
                    oImportsCostElement.Icet_session_id = oHeader.Ib_session_id;
                    oImportsCostElements.Add(oImportsCostElement);
                }
                #endregion

                Decimal TotalCost = oImportsBLItems.Sum(x => x.Ibi_unit_rt * x.Ibi_qty);

                string sts = "";
                int impBLCost = 1;
                foreach (ImportsCostElement oImportsCostElement in oImportsCostElements)
                {
                    oImportsCostElement.Icet_seq_no = oBLSeqNumber;
                    oImportsCostElement.Icet_cre_by = oHeader.Ib_mod_by;
                    oImportsCostElement.Icet_mod_by = oHeader.Ib_mod_by;
                    oImportsCostElement.Icet_line = impBLCost;

                    _res = _financialDAL.SAVE_IMP_CST_ELE_NEW(oImportsCostElement, out sts);
                    impBLCost++;
                }
                //_inventoryDAL.TransactionRollback();
                //_financialDAL.TransactionRollback();
                _inventoryDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _res = -1;
                Error = ex.Message;
                _inventoryDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
            }
            return _res;
        }

        public int SAVE_IMP_CST_ELE(ImportsCostElement oItems, out String status)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SAVE_IMP_CST_ELE(oItems, out  status);
        }


        public int SAVE_IMP_CST_HDR_NEW(ImportsCostHeader oItems, out Int32 Seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SAVE_IMP_CST_HDR_NEW(oItems, out  Seq);
        }

        //Lakshan 17 Mar 2016
        public List<MST_COST_ELE> GET_COST_ELE_DATA(MST_COST_ELE _costEle)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_COST_ELE_DATA(_costEle);
        }

        //Chamal 29-Mar-2016
        public bool CheckEntryByPass(string _company, string _entryNo, out string _msg)
        {
            bool bypass = false;
            string msg = string.Empty;

            decimal _entryQty = 0;
            decimal _aodOutQty = 0;
            decimal _aodInQty = 0;

            _financialDAL = new FinancialDAL();
            ImpCusdecHdr _cusdecHdr = _financialDAL.GET_CUSDEC_HEADER_BY_DOC(_company, "", "", _entryNo);
            if (_cusdecHdr.CUH_AST_IGNORE == 1)
            {
                bypass = true;
            }
            else
            {
                DataTable _dt = _financialDAL.GetEntryBaseAODQty(_company, _entryNo);
                foreach (DataRow rw in _dt.Rows)
                {
                    if ((string)rw["DIRECT"] == "E")
                    {
                        if (!string.IsNullOrEmpty(rw["QTY"].ToString()))
                        { _entryQty = (decimal)rw["QTY"]; }
                    }

                    if ((string)rw["DIRECT"] == "0")
                    {
                        if (!string.IsNullOrEmpty(rw["QTY"].ToString()))
                        { _aodOutQty = (decimal)rw["QTY"]; }
                    }

                    if ((string)rw["DIRECT"] == "1")
                    {
                        if (!string.IsNullOrEmpty(rw["QTY"].ToString()))
                        { _aodInQty = (decimal)rw["QTY"]; }
                    }

                }
            }

            if (_entryQty == _aodOutQty && _aodOutQty == _aodInQty)
            { bypass = true; }
            else
            { msg = "Please check the document quantities. Entry Qty : " + _entryQty + ", AOD Out Qty : " + _aodOutQty + ", AOD In Qty : " + _aodInQty; }

            _msg = msg;
            return bypass;
        }

        //Lakshan 04 Apr 2016
        public DataTable LoadBondNumbersNew(string _initialSearchParams, string _searchCatergory, string _searchText, DateTime _fromdate, DateTime _Todate, int _isdate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadBondNumbersNew(_initialSearchParams, _searchCatergory, _searchText, _fromdate, _Todate, _isdate);
        }

        //Chamal 24/Apr/2016
        public DataTable LoadBOIRequestByCustomer(string com, string cust, string type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadBOIRequestByCustomer(com, cust, type);
        }
        //Chamal 24/Apr/2016
        public void Update_BL_HSCode(string blDocNo, string itemcode, string hscode)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            int _update = _financialDAL.UPDATE_BL_HSCODES(blDocNo, itemcode, hscode);
        }

        //Chamal 2016-05-09
        public List<ImpCusdecItmCost> GetDutyElementSummary(string docno)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            List<ImpCusdecItmCost> _returnList = new List<ImpCusdecItmCost>();
            List<ImpCusdecItmCost> _tempAll = _financialDAL.GET_CUSDEC_ITEM_COST_BY_DOC(docno);
            _financialDAL.ConnectionClose();
            var result = from x in _tempAll
                         group x by new { x.Cuic_ele_cat, x.Cuic_ele_tp, x.Cuic_ele_cd }
                             into g
                             select new { g.Key.Cuic_ele_cat, g.Key.Cuic_ele_tp, g.Key.Cuic_ele_cd, eleBase = g.Sum(s => s.Cuic_ele_base), eleAmount = g.Sum(s => s.Cuic_ele_amt) };
            foreach (var itm in result)
            {
                if (itm.Cuic_ele_cat == "CUSTM" && itm.Cuic_ele_tp == "DUTY")
                {
                    if (itm.Cuic_ele_cd != "CE&S")
                    {
                        ImpCusdecItmCost _temp = new ImpCusdecItmCost();
                        _temp.Cuic_ele_cat = itm.Cuic_ele_cat;
                        _temp.Cuic_ele_tp = itm.Cuic_ele_tp;
                        _temp.Cuic_ele_cd = itm.Cuic_ele_cd;
                        _temp.Cuic_ele_rt = 0;
                        _temp.Cuic_ele_base = itm.eleBase;
                        _temp.Cuic_ele_amt = itm.eleAmount;
                        _returnList.Add(_temp);
                    }
                }
            }
            return _returnList;
        }
        //subodana
        public List<ImpCusdecItmCost> GetDutyElementSummaryForHS(string docno, string hs)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            List<ImpCusdecItmCost> _returnList = new List<ImpCusdecItmCost>();
            List<ImpCusdecItmCost> _tempAll = _financialDAL.GET_CUSDEC_ITEM_COST_BY_DOCHS(docno, hs);
            _financialDAL.ConnectionClose();
            var result = from x in _tempAll
                         group x by new { x.Cuic_ele_cat, x.Cuic_ele_tp, x.Cuic_ele_cd }
                             into g
                             select new { g.Key.Cuic_ele_cat, g.Key.Cuic_ele_tp, g.Key.Cuic_ele_cd, eleBase = g.Sum(s => s.Cuic_ele_base), eleAmount = g.Sum(s => s.Cuic_ele_amt), elerate = g.First().Cuic_ele_rt };
            foreach (var itm in result)
            {
                if (itm.Cuic_ele_cat == "CUSTM" && itm.Cuic_ele_tp == "DUTY")
                {
                    if (itm.Cuic_ele_cd != "CE&S")
                    {
                        ImpCusdecItmCost _temp = new ImpCusdecItmCost();
                        _temp.Cuic_ele_cat = itm.Cuic_ele_cat;
                        _temp.Cuic_ele_tp = itm.Cuic_ele_tp;
                        _temp.Cuic_ele_cd = itm.Cuic_ele_cd;
                        _temp.Cuic_ele_rt = itm.elerate;
                        _temp.Cuic_ele_base = itm.eleBase;
                        _temp.Cuic_ele_amt = itm.eleAmount;
                        _returnList.Add(_temp);
                    }
                }
            }
            return _returnList;
        }
        //Rukshan 21/May/2016
        public List<ImpCusdecItm> GET_CUSDEC_ITEM_BY_DOC(String docno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_CUSDEC_ITEM_BY_DOC(docno);
        }
        //rukshan 2016-jun-17
        public int UPDATE_BL(List<ImportsBLHeader> _BL, out string err)
        {
            Int32 result = 0;
            err = string.Empty;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                foreach (ImportsBLHeader _hddr in _BL)
                {
                    result = _financialDAL.UPDATE_BL(_hddr);

                }

                _financialDAL.TransactionCommit();
                result = 1;
            }
            catch (Exception ex)
            {
                err = ex.Message;
                result = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }
            return result;
        }

        //Rukshan 2016-06-18
        public ImpCusdecHdr GET_CUSTDECHDR_DOC(String docno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_CUSTDECHDR_DOC(docno);
        }

        //Rukshan 2016-06-18
        public List<ImpCusdecItm> GET_CUSTDECITM_DOC(String docno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_CUSTDECITM_DOC(docno);
        }
        //Rukshan 2016-06-19
        public List<OrderPlanItem> GET_IMP_OPBY_PI(String DocNum)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_OPBY_PI(DocNum);
        }
        #endregion

        public DataTable GetOrderPlanRef(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetOrderPlanRef(sino);
        }
        //Lakshan 20 Jul 2016
        public DataTable LoadEntryPopUpNew(string _initialSearchParams, DateTime dtFrom, DateTime dtTo, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadEntryPopUpNew(_initialSearchParams, dtFrom, dtTo, _searchCatergory, _searchText);
        }

        //Lakshan 20 Jul 2016
        public DataTable LoadAssementPopUpNew(string _initialSearchParams, DateTime dtFrom, DateTime dtTo, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadAssementPopUpNew(_initialSearchParams, dtFrom, dtTo, _searchCatergory, _searchText);
        }
        //Lakshan 20 Jul 2016
        public DataTable LoadSettlementPopUpNew(string _initialSearchParams, DateTime dtFrom, DateTime dtTo, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadSettlementPopUpNew(_initialSearchParams, dtFrom, dtTo, _searchCatergory, _searchText);
        }
        public DataTable LoadEntriesByDateNew(DateTime from, DateTime to, string status)
        {
            _financialDAL = new FinancialDAL();
            DataTable _dt = new DataTable();
            _dt = _financialDAL.LoadEntriesByDate(from, to, status);
            decimal tmpDes = 0;
            //foreach (DataRow dr in _dt.Rows)
            //{
            //    DataTable dtasstot = _financialDAL.CountAssessmentTot(dr["cuh_doc_no"].ToString());
            //    decimal assAmt=0;
            //    foreach (DataRow ddr in dtasstot.Rows)
            //    {
            //        assAmt=decimal.TryParse(ddr["Assessment_Amount"].ToString(),out tmpDes)?tmpDes:0;
            //    }
            //    dr["Assessment_Amount"] = assAmt.ToString("N2");

            //    decimal setlAmt = 0;
            //    DataTable dtstlot = _financialDAL.CalSettleTotbyEntry(dr["cuh_doc_no"].ToString());
            //    foreach (DataRow ddr2 in dtstlot.Rows)
            //    {
            //        setlAmt = decimal.TryParse(ddr2["Settle_Amount"].ToString(), out tmpDes) ? tmpDes : 0;
            //    }
            //    dr["Settle_Amount"] = setlAmt.ToString("N2");
            //}
            return _dt;
        }
        //subodana 2016-07-23
        public List<ImportsBLContainer> GetContainers(String DocNum)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(DocNum);
        }

        //subodana 2016-07-26
        public List<SUN_JURNAL> GetSunJurnalnew(String com)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSunJurnalnew(com);
        }
        //subodana 2016-07-27
        public List<SUNINVHDR> GetSunInvdatanew(String Com, string pc, DateTime sdate, DateTime edate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSunInvdatanew(Com, pc, sdate, edate);
        }
        //subodana 2016-07-27
        public List<SUNRECIEPTHDR> GetSunRecieptdatanew(String Com, string pc, DateTime sdate, DateTime edate, string type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSunRecieptdatanew(Com, pc, sdate, edate, type);
        }

        //subodana
        public DataTable GetCusdechdrByBL(string com, string blno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCusdechdrByBL(com, blno);
        }

        //subodana
        public int UpdateBLStatus(string com, string blno, string status)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.UpdateBLStatus(com, blno, status);
            _financialDAL.ConnectionClose();
            return effect;
        }


        //Rukshan 21/May/2016
        public List<ImpCusdecItm> GET_CUSDEC_GRNITEM_DOC(String docno, string _type = null)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_CUSDEC_GRNITEM_DOC(docno, _type);
        }

        //subodana
        public DataTable CheckLoctype(string com, string loccd, string loctype)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CheckLoctype(com, loccd, loctype);
        }

        // Lakshika 2016-Aug-09
        public DataTable ValidateAssesmentNo(string _initialSearchParams, string _searchCatergory, string _searchText)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ValidateAssessmentNo(_initialSearchParams, _searchCatergory, _searchText);
        }

        //subodana
        //subodana
        public DataTable GetSunPC(string type, string com)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSunPC(type, com);
        }

        //subodana 2016-09-03
        public int UpdateOtherdocline(string entryno, Int32 lineno, string itemcode, Int32 upline)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.UpdateOtherdocline(entryno, lineno, itemcode, upline);
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return effect;
        }

        //subodana
        public DataTable SP_GetGRNDOC(DateTime fdate, DateTime tdate, string com)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SP_GetGRNDOC(fdate, tdate, com);
        }
        //subodana
        public List<LocPurSun> SP_GetLocPerSUN(string com, string grnno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SP_GetLocPerSUN(com, grnno);
        }
        //subodana
        public List<Suncreditnote> SP_SUN_CREDNOTE(string com, DateTime fromdate, DateTime todate, string pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SP_SUN_CREDNOTE(com, fromdate, todate, pc);
        }

        //subodana 2016-09-16
        public Int32 UPDATE_INV_HDRENGLOG(string invNo, Int32 value, string com)
        {
            int resutl = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            resutl = _financialDAL.UPDATE_INV_HDRENGLOG(invNo, value, com);
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return resutl;
        }
        public Int32 UPDATE_LOCPCH_HDRENGLOG(string grnno, Int32 value, string com)
        {
            int resutl = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            resutl = _financialDAL.UPDATE_LOCPCH_HDRENGLOG(grnno, value, com);
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return resutl;
        }
        public Int32 UPDATE_RECIEPT_HDRENGLOG(string recNo, Int32 value, string com)
        {
            int resutl = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            resutl = _financialDAL.UPDATE_RECIEPT_HDRENGLOG(recNo, value, com);
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return resutl;
        }
        //subodana
        public DataTable GetGoodsDeclarationDetails(string entryno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetGoodsDeclarationDetails(entryno);
        }
        //subodana
        public DataTable GetCusdecHDRData(string entryno, string com)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCusdecHDRData(entryno, com);
        }

        public Int32 UpdateBillOfLadingWebWharf(ImportsBLHeader oHeader, List<ImportsBLContainer> oImportsBLContainers, out String Error)
        {
            Int32 _res = 0;
            Error = string.Empty;
            Int32 oBLSeqNumber = 0;
            Int32 _costSheetSeq = 0;
            String oBLDocnumber = string.Empty;
            List<ImportsBLItems> _oImportsBLItems = new List<ImportsBLItems>();
            List<ImportsBLContainer> _oImportsBLContainers = new List<ImportsBLContainer>();
            List<ImportsBLSInvoice> _OImportsBLSInvoice = new List<ImportsBLSInvoice>();
            List<ImportsCostElement> oImportsCostElements = new List<ImportsCostElement>();
            List<ImportsCostElementItem> oImportsCostElementItems = new List<ImportsCostElementItem>();

            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();


                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();

                //imp_cst_hdr & imp_bl_hdr

                _res = _financialDAL.SaveBLHeader(oHeader, out oBLSeqNumber);


                oBLDocnumber = oHeader.Ib_doc_no;
                foreach (ImportsBLContainer item in oImportsBLContainers)
                {
                    item.Ibc_seq_no = oBLSeqNumber;
                    item.Ibc_doc_no = oBLDocnumber;
                    item.Ibc_cre_by = oHeader.Ib_mod_by;
                    _res = _financialDAL.SAVE_IMP_BL_CONTNR(item);
                }





                //_inventoryDAL.TransactionRollback();
                //_financialDAL.TransactionRollback();
                _inventoryDAL.TransactionCommit();
                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                _res = -1;
                Error = ex.Message;
                _inventoryDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
            }
            return _res;
        }
        //subodana
        public DataTable GetMIDNO(string com, string pclist)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetMIDNO(com, pclist);
        }
        //subodana
        public DataTable GetMIDRECIEPT(string com, string mid, DateTime fdate, DateTime tdate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetMIDRECIEPT(com, mid, fdate, tdate);
        }
        //subodana
        public DataTable GetMIDRECIEPTAll(string com, string mid, DateTime fdate, DateTime tdate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetMIDRECIEPTAll(com, mid, fdate, tdate);
        }

        //subodana 2016-10-11
        public int SaveCredCardRec(SAT_ADJ_CRCD Crecdlist, MasterAutoNumber _masterAutoNumber, List<RecieptHeader> reciept, out String Error)
        {
            int effect = 0;
            string _documentNo = "";
            try
            {

                Error = string.Empty;
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                _documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_masterAutoNumber.Aut_year).Remove(0, 2) + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                Crecdlist.staj_ref = _documentNo;
                Error = _documentNo;


                effect = _financialDAL.InsertTo_sat_Adjcrecd(Crecdlist);
                if (effect == 1)
                {
                    //UPDATE RECIEPT
                    foreach (var rec in reciept)
                    {
                        effect = _financialDAL.UPDATE_RECIEPT_BANKST(rec.Sar_receipt_no, 1, Crecdlist.staj_com, rec.Sar_direct_deposit_branch);
                    }
                }
                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                effect = -1;
                Error = ex.Message;
                _financialDAL.TransactionRollback();
            }

            return effect;
        }
        //subodana
        public DataTable GetMIDDETAILS(string com, string pclist, string midno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetMIDDETAILS(com, pclist, midno);
        }
        //subodana
        public DataTable GenAssExel(DateTime fdate, DateTime tdate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GenAssExel(fdate, tdate);
        }

        public List<ImportsBLContainer> GETORDER_CONTENER(string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GETORDER_CONTENER(doc);
        }
        //subodana
        public int SAVE_BL_CONTAINERS(ImportsBLContainer cont)
        {
            int effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                effect = _financialDAL.SAVE_IMP_BL_CONTNR(cont);
                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                return -1;
            }
            return effect;
        }

        //subodana
        public int SAVE_BL_CONTAINERSLog(ImportsBLContainer cont)
        {
            int effect = 0;
            try
            {

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                effect = _financialDAL.SAVE_IMP_BL_CONTNRLOG(cont);
                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                return -1;
            }
            return effect;
        }

        //subodana 2016-12/16

        public string DGCDAtaExcel(DateTime fdate, DateTime tdate, string com, string user)
        {

            _financialDAL = new FinancialDAL();
            msg = new MsgPortalBLL();
            _cusserDal = new CustServiceDAL();

            string out1 = "";
            DataTable exceldata = _financialDAL.GenAssExel(fdate, tdate);
            exceldata.Columns.Add("istd_cost_claim_amt", typeof(decimal));
            exceldata.Columns.Add("istd_cost_unclaim_amt", typeof(decimal));
            exceldata.Columns.Add("istd_diff_amt", typeof(decimal));

            if (exceldata.Rows.Count > 0)
            {
                int i = 0;
                foreach (var exceldata_nw in exceldata.Rows)
                {
                    decimal clam = 0;
                    decimal unclaim = 0;
                    decimal diff = 0;
                    DataTable assdata = _cusserDal.GetCusdecAssessmentAccountData(exceldata.Rows[i]["STL_NO"].ToString(), com);
                    int j = 0;
                    foreach (var assdata_nw in assdata.Rows)
                    {
                        if (assdata.Rows[j]["ISTD_ENTRY_NO"].ToString() == exceldata.Rows[i]["ENTRY_NO"].ToString())
                        {
                            clam = clam + Convert.ToDecimal(assdata.Rows[j]["ISTD_COST_CLAIM_AMT"].ToString());
                            unclaim = unclaim + Convert.ToDecimal(assdata.Rows[j]["ISTD_COST_UNCLAIM_AMT"].ToString());
                            diff = diff + Convert.ToDecimal(assdata.Rows[j]["ISTD_DIFF_AMT"].ToString());
                        }
                        j++;
                    }
                    exceldata.Rows[i]["istd_cost_claim_amt"] = clam;
                    exceldata.Rows[i]["istd_cost_unclaim_amt"] = unclaim;
                    exceldata.Rows[i]["istd_diff_amt"] = diff;
                    i++;
                }
            }

            string path = msg.ExportExcel2007(com, user, exceldata, out out1);

            return path;
        }
        //Lakshan 19 Dec 2016
        public Int32 UpdateImportsCostHeaderRefSave(ImportsCostHeader _obj, string _saveTP, out string _error)
        {
            _error = "";
            int result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                result = _financialDAL.UpdateImportsCostHeaderRefSave(_obj, _saveTP);
                if (result > 0)
                {
                    _financialDAL.TransactionCommit();
                }
            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                result = -1;
            }
            return result;
        }
        //subodana
        public DataTable CusdecCancelIsGRN(string com, string entryno, int option)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CusdecCancelIsGRN(com, entryno, option);
        }

        //subodana
        public Int32 CusdecEntryCancelation(string com, string entryno, string sino, string user, out string _error)
        {
            _error = "";
            int result = 0;
            try
            {
                InventoryBLL invtbll = new InventoryBLL();
                _financialDAL = new FinancialDAL();
                _inventoryDAL = new InventoryDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                result = _financialDAL.Update_tbl_cusdec_cancel1(com, sino);
                result = _financialDAL.Update_tbl_cusdec_cancel2(com, sino);
                result = _financialDAL.Update_tbl_cusdec_cancel3(com, entryno, user);

                List<InventoryRequestItem> list = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(entryno);
                InventoryRequest ob = new InventoryRequest();
                ob.Itr_com = com;
                ob.Itr_req_no = entryno;
                List<InventoryRequest> hdrlist = _inventoryDAL.GET_INT_REQ_DATA_NEW(ob);
                string _errro = "";

                if (list != null && hdrlist != null)
                {
                    foreach (var item in list)
                    {
                        if (item.Itri_res_no != "" && item.Itri_res_no != "N/A")
                        {
                            int _res = invtbll.ReservationLogDataUpdateCancel(new INR_RES_LOG()
                            {
                                IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                                IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                                IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp,
                                IRL_ORIG_DOC_NO = entryno,
                                IRL_ORIG_DOC_DT = DateTime.Now,

                                IRL_CURT_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                                IRL_CURT_DOC_NO = entryno,
                                IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                                IRL_RES_NO = item.Itri_res_no,
                                IRL_ITM_CD = item.Itri_itm_cd,
                                IRL_ITM_STUS = item.Itri_itm_stus,
                                IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                                IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                IRL_MOD_DT = DateTime.Now,
                                IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                                IRL_CRE_DT = DateTime.Now,
                                IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                IRL_RES_QTY = item.Itri_qty,
                                IRL_RES_WP = 1
                            }, 0, _inventoryDAL, out _errro);
                            if (_res > 0)
                            {
                                _res = invtbll.ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                {
                                    IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                                    IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                                    IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                                    IRL_ORIG_DOC_NO = entryno,
                                    IRL_ORIG_DOC_DT = DateTime.Now,
                                    IRL_CURT_DOC_TP = "CUSA",
                                    IRL_CURT_DOC_NO = hdrlist.FirstOrDefault().Itr_ref,
                                    IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                                    IRL_RES_NO = item.Itri_res_no,
                                    IRL_ITM_CD = item.Itri_itm_cd,
                                    IRL_ITM_STUS = item.Itri_itm_stus,
                                    IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                                    IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                    IRL_MOD_DT = DateTime.Now,
                                    IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                                    IRL_CRE_DT = DateTime.Now,
                                    IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                    IRL_RES_QTY = item.Itri_qty,
                                    IRL_RES_WP = 1
                                }, 0, _inventoryDAL, out _errro);
                                if (_res < 1)
                                {
                                    result = -1;
                                    _error = "Didn't Update Reservation Log!!";
                                }
                            }
                        }

                    }
                }

                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                result = -1;
            }
            return result;
        }
        //subodana
        public Int32 CusdecEntryCancelation_exreboi(string com, string entryno, string reqno, string user, List<ImpCusdecItm> cusitm, string sunbondno, string type, out string _error)
        {
            _error = "";
            int result = 0;
            try
            {
                InventoryBLL invtbll = new InventoryBLL();
                _financialDAL = new FinancialDAL();
                _inventoryDAL = new InventoryDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                result = _financialDAL.Update_tbl_cusdec_cancel5(com, reqno);

                if (type != "BOI")
                {
                    result = _financialDAL.Update_tbl_cusdec_cancel4(com, reqno);
                }

                result = _financialDAL.Update_tbl_cusdec_cancel3(com, entryno, user);
                foreach (var itm in cusitm)
                {
                    string doc = itm.Cui_oth_doc_no;
                    Int32 line = itm.Cui_line;
                    Int32 qty = Convert.ToInt32(itm.Cui_qty);
                    if (type == "BOI")
                    {
                        result = _financialDAL.Update_tbl_cusdec_cancel4(com, itm.Cui_anal_2);
                        if (result == 0)
                        {
                            _error = "Please Check BOI Req no in Cusdec Item !!";
                            result = -1;
                            return result;
                        }

                        result = _financialDAL.Update_tbl_cusdec_itemqty(doc, itm.Cui_oth_doc_line, qty);
                        if (result == 0)
                        {
                            _error = "Plase Check Tobond:" + doc + " line :" + itm.Cui_oth_doc_line + " qty:" + qty;
                            result = -1;
                            return result;
                        }
                    }
                    else
                    {
                        result = _financialDAL.Update_tbl_cusdec_itemqty(sunbondno, line, qty);
                        if (result == 0)
                        {
                            _error = "Plase Check Tobond:" + sunbondno + " line :" + line + " qty:" + qty;
                            result = -1;
                            return result;
                        }
                    }

                }
                List<InventoryRequestItem> list = _inventoryDAL.GET_INT_REQ_DATA_BY_REQ_NO(entryno);
                InventoryRequest ob = new InventoryRequest();
                ob.Itr_com = com;
                ob.Itr_req_no = entryno;
                List<InventoryRequest> hdrlist = _inventoryDAL.GET_INT_REQ_DATA_NEW(ob);
                string _errro = "";

                if (list != null && hdrlist != null)
                {
                    foreach (var item in list)
                    {
                        if (item.Itri_res_no != "" && item.Itri_res_no != "N/A" && hdrlist.FirstOrDefault().Itr_tp != "BOI")
                        {
                            int _res = invtbll.ReservationLogDataUpdateCancel(new INR_RES_LOG()
                            {
                                IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                                IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                                IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp,
                                IRL_ORIG_DOC_NO = entryno,
                                IRL_ORIG_DOC_DT = DateTime.Now,
                                IRL_CURT_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                                IRL_CURT_DOC_NO = entryno,
                                IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                                IRL_RES_NO = item.Itri_res_no,
                                IRL_ITM_CD = item.Itri_itm_cd,
                                IRL_ITM_STUS = item.Itri_itm_stus,
                                IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                                IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                IRL_MOD_DT = DateTime.Now,
                                IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                                IRL_CRE_DT = DateTime.Now,
                                IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                IRL_RES_QTY = item.Itri_qty,
                                IRL_RES_WP = 1
                            }, 0, _inventoryDAL, out _errro);
                            if (_res > 0)
                            {
                                _res = invtbll.ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                {
                                    IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                                    IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                                    IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                                    IRL_ORIG_DOC_NO = entryno,
                                    IRL_ORIG_DOC_DT = DateTime.Now,
                                    IRL_CURT_DOC_TP = "CUSA",
                                    IRL_CURT_DOC_NO = hdrlist.FirstOrDefault().Itr_ref,
                                    IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                                    IRL_RES_NO = item.Itri_res_no,
                                    IRL_ITM_CD = item.Itri_itm_cd,
                                    IRL_ITM_STUS = item.Itri_itm_stus,
                                    IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                                    IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                    IRL_MOD_DT = DateTime.Now,
                                    IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                                    IRL_CRE_DT = DateTime.Now,
                                    IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                    IRL_RES_QTY = item.Itri_qty,
                                    IRL_RES_WP = 1
                                }, 0, _inventoryDAL, out _errro);
                                if (_res < 1)
                                {
                                    result = -1;
                                    _error = "Didn't Update Reservation Log!!";
                                }
                            }
                        }
                        else if (item.Itri_res_no != "" && item.Itri_res_no != "N/A" && hdrlist.FirstOrDefault().Itr_tp == "BOI")
                        {
                            int _res = invtbll.ReservationLogDataUpdateCancel(new INR_RES_LOG()
                            {
                                IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                                IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                                IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp,
                                IRL_ORIG_DOC_NO = entryno,
                                IRL_ORIG_DOC_DT = DateTime.Now,
                                IRL_CURT_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                                IRL_CURT_DOC_NO = entryno,
                                IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                                IRL_RES_NO = item.Itri_res_no,
                                IRL_ITM_CD = item.Itri_itm_cd,
                                IRL_ITM_STUS = item.Itri_itm_stus,
                                IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                                IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                IRL_MOD_DT = DateTime.Now,
                                IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                                IRL_CRE_DT = DateTime.Now,
                                IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                IRL_RES_QTY = item.Itri_qty,
                                IRL_RES_WP = 1,
                            }, 0, _inventoryDAL, out _errro);
                            if (_res > 0)
                            {
                                //get boi cusa no
                                string boicusano = _financialDAL.GetBOICUSANo(entryno, item.Itri_job_no, item.Itri_job_line, item.Itri_res_no);
                                if (boicusano == "")
                                {
                                    result = -1;
                                    _error = "Please Check Reservation Log!!";
                                }

                                _res = invtbll.ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                {
                                    IRL_CURT_COM = hdrlist.FirstOrDefault().Itr_com,
                                    IRL_CURT_LOC = hdrlist.FirstOrDefault().Itr_loc,
                                    IRL_ORIG_DOC_TP = hdrlist.FirstOrDefault().Itr_tp + "_CANCL",
                                    IRL_ORIG_DOC_NO = entryno,
                                    IRL_ORIG_DOC_DT = DateTime.Now,
                                    IRL_CURT_DOC_TP = "CUSA",
                                    IRL_CURT_DOC_NO = boicusano,
                                    IRL_CURT_DOC_DT = hdrlist.FirstOrDefault().Itr_dt,
                                    IRL_RES_NO = item.Itri_res_no,
                                    IRL_ITM_CD = item.Itri_itm_cd,
                                    IRL_ITM_STUS = item.Itri_itm_stus,
                                    IRL_MOD_BY_NEW = hdrlist.FirstOrDefault().Itr_cre_by,
                                    IRL_MOD_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                    IRL_MOD_DT = DateTime.Now,
                                    IRL_CRE_BY = hdrlist.FirstOrDefault().Itr_cre_by,
                                    IRL_CRE_DT = DateTime.Now,
                                    IRL_CRE_SESSION = hdrlist.FirstOrDefault().Itr_session_id,
                                    IRL_RES_QTY = item.Itri_qty,
                                    IRL_RES_WP = 1
                                }, 0, _inventoryDAL, out _errro);
                                if (_res < 1)
                                {
                                    result = -1;
                                    _error = "Didn't Update Reservation Log!!";
                                }
                            }

                        }
                    }
                }
                _financialDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _error = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                result = -1;
            }
            return result;
        }

        //Akila 2017/01/24
        public DataTable GetCreditNoteInfo(string _comCode, string _profitCenter, string _creditNote)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetCreditNoteInfo(_comCode, _profitCenter, _creditNote);
        }

        //Akila 2017/01/25
        public DataTable ActivateCreditNote(string _CreditNoteNo, string _status, string _userId)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.ActivateCreditNote(_CreditNoteNo, _status, _userId);
        }

        //Akila 2017/01/25
        public DataTable GetCreditNotesbyInvoice(string _invoiceNo)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetCreditNotesbyInvoice(_invoiceNo);
        }
        //Subodana 2017/02/15
        public int SaveCommissionDeffinition(ref_comm_hdr comm_hdr, List<ref_comm_det> _comm_det, List<ref_comm_emp> _comm_emp, List<ref_comm_pc> _comm_pc, List<ref_comm_target> targets, List<ref_comm_target_ovrt> targetovrt, List<ref_comm_collect_ovrt> collecovrt, List<ref_eli_comm_targ> _elite_trg, List<ref_comm_add_trgt> _elite_add, MasterAutoNumber _masterAutoNumber, out string err)
        {
            err = "";
            int result = 0;
            int seqno = 0;
            string documentNo = "";
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                if (comm_hdr != null)
                {

                    if (comm_hdr.Rch_comm_cd == null || comm_hdr.Rch_comm_cd == "")
                    {
                        Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                        documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_masterAutoNumber.Aut_year).Remove(0, 2) + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                        result = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                        comm_hdr.Rch_comm_cd = documentNo;
                        err = documentNo;
                    }

                    result = _financialDAL.SaveCommissionHdr(comm_hdr, out seqno);

                    if (_comm_det != null)
                    {
                        result = _financialDAL.DeleteCommissionDetails(seqno);
                        foreach (var det_list in _comm_det)
                        {
                            det_list.Rcd_seq = seqno;
                            det_list.Rcd_comm_cd = comm_hdr.Rch_comm_cd;

                            result = _financialDAL.SaveCommissionDetails(det_list);
                        }
                    }
                    if (_comm_emp != null)
                    {
                        result = _financialDAL.DeleteCommissionEmpDetails(seqno);
                        foreach (var emp_list in _comm_emp)
                        {
                            emp_list.Rce_seq = seqno;
                            emp_list.Rce_comm_cd = comm_hdr.Rch_comm_cd;

                            result = _financialDAL.SaveCommissionEmpDetails(emp_list);
                        }
                    }
                    if (_comm_pc != null)
                    {
                        result = _financialDAL.DeleteCommissionPcDetails(seqno);
                        foreach (var pc_list in _comm_pc)
                        {
                            pc_list.Rcp_seq = seqno;
                            pc_list.Rcp_comm_cd = comm_hdr.Rch_comm_cd;

                            result = _financialDAL.SaveCommissionPcDetails(pc_list);
                        }
                    }
                    if (targets != null)
                    {
                        result = _financialDAL.DeleteCommissionTarget(seqno);
                        foreach (var item in targets)
                        {
                            item.rct_seq = seqno;
                            item.rct_docno = comm_hdr.Rch_comm_cd;

                            result = _financialDAL.SaveTargetBaseCommision(item);
                        }
                    }
                    if (targetovrt != null)
                    {
                        result = _financialDAL.DeleteCommissionTargetOvt(seqno);
                        foreach (var item in targetovrt)
                        {
                            item.rcto_seq = seqno;
                            item.rcto_docno = comm_hdr.Rch_comm_cd;

                            result = _financialDAL.SaveTargetBaseCommisionOvrt(item);
                        }
                    }
                    if (collecovrt != null)
                    {
                        result = _financialDAL.DeleteCommissionCollectionOvt(seqno);
                        foreach (var item in collecovrt)
                        {
                            item.rcco_seq = seqno;
                            item.rcco_docno = comm_hdr.Rch_comm_cd;

                            result = _financialDAL.SaveCollectionBaseCommisionOvrt(item);
                        }
                    }
                    if (_elite_trg != null)
                    {
                        result = _financialDAL.DeleteEliteCommissionTarget(seqno);
                        foreach (var item in _elite_trg)
                        {
                            item.rect_seq = seqno;

                            result = _financialDAL.SaveEliteCommTargets(item);
                        }
                    }
                    if (_elite_add != null)
                    {
                        result = _financialDAL.DeleteEliteCommissionAdditional(seqno);
                        foreach (var item in _elite_add)
                        {
                            item.rcat_seq = seqno;

                            result = _financialDAL.SaveEliteAdditnal(item);
                        }
                    }
                }
                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                result = -1;
            }
            return result;
        }
        //subodana
        public List<ref_comm_hdr> GetCommissionHDR(String Com, string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCommissionHDR(Com, doc);
        }
        //subodana
        public List<ref_comm_det> GetCommissionDetails(string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCommissionDetails(doc);
        }
        //subodana
        public List<ref_comm_emp> GetCommissionEmp(string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCommissionEmp(doc);
        }
        //subodana
        public List<ref_comm_pc> GetCommissionPC(string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCommissionPC(doc);
        }
        //Lakshan 22 Feb 2017
        public List<MST_CONTAINER_TP> GET_MST_CONTAINER_TP_DATA(MST_CONTAINER_TP _obj)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_MST_CONTAINER_TP_DATA(_obj);
        }
        //Lakshan 22 Feb 2017
        public decimal OrderPlanItemQuentity(List<MasterItem> _itmList)
        {
            decimal _val = 0;
            try
            {
                decimal _mulVal = 0;
                _generalDAL = new GeneralDAL();
                MasterItem _itm = new MasterItem();
                foreach (var item in _itmList)
                {
                    _itm = _generalDAL.GetItemMaster(item.Mi_cd);
                    _mulVal = 0;
                    _mulVal = _itm.Mi_dim_length * _itm.Mi_dim_height * _itm.Mi_dim_width * item.Tmp_order_qty;
                    _val = _val + _mulVal;
                }
            }
            catch (Exception)
            {
                _val = 0;
            }
            return _val;
        }
        //subodana 2017-02-20
        public int CommissionProcess(string com, List<Commission_pc> Commpc, DateTime fdate, DateTime tdate, out string error, out List<Invoice_Commission> summery, out List<DELI_SALE_NEW> all)
        {
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            _securityDAL = new SecurityDAL();

            if (_securityDAL.Is_Report_DR("COMMISSIONPROCESS") == true)
            {
                _financialDAL.ConnectionOpen_DR();
                _salesDAL.ConnectionOpen_DR();
                _inventoryDAL.ConnectionOpen_DR();
                _generalDAL.ConnectionOpen_DR();
            }

            error = "";
            string error2 = "";
            List<Invoice_Commission> invcommsummety = new List<Invoice_Commission>();
            List<DELI_SALE_NEW> invcommfull = new List<DELI_SALE_NEW>();

            List<Invoice_Commission> invcommsummety1 = new List<Invoice_Commission>();
            List<DELI_SALE_NEW> invcommfull1 = new List<DELI_SALE_NEW>();
            List<DELI_SALE_NEW> invoicedet = new List<DELI_SALE_NEW>();
            List<DELI_SALE_NEW> invoicedetrec = new List<DELI_SALE_NEW>();

            //for sales target
            List<DELI_SALE_NEW> totsalelist = new List<DELI_SALE_NEW>();

            //for sales avg target
            List<DELI_SALE_NEW> totsalelistavg = new List<DELI_SALE_NEW>();

            //for sales get target commission
            List<DELI_SALE_NEW> totsaleltargets = new List<DELI_SALE_NEW>();
            List<ref_comm_det> commdetailsfortagcomm = new List<ref_comm_det>();
            List<ref_comm_det> maintarcommdet = new List<ref_comm_det>();
            List<ref_comm_emp> maintarcommemp = new List<ref_comm_emp>();
            List<DELI_SALE_NEW> mainccollectcedet = new List<DELI_SALE_NEW>();
            List<Comm_recinv> recinv = new List<Comm_recinv>();
            List<SALE_BAL_DETAILS> deliverdsaletarget = new List<SALE_BAL_DETAILS>();
            //get transation commission details.(get latest one)
            foreach (var pcs in Commpc)
            {
                string pc = pcs.pccode;
                List<ref_comm_hdr> transcomm = _financialDAL.GetCommissionByPC(com, pc, fdate, tdate);

                if (transcomm != null)
                {
                    if (transcomm.Count < 1)
                    {
                        error = "Please Define Commission!!!";
                    }
                    else
                    {
                        //check target commision/target ovrride/commission ovrd

                        List<ref_comm_target> comm_targets = _financialDAL.GetCommissionTargetDetails(transcomm.First().Rch_comm_cd);
                        if (comm_targets != null)
                        {
                            #region Target Base Commission Rate Calculation
                            if (comm_targets.Count > 0)
                            {
                                commdetailsfortagcomm = _financialDAL.GetCommissionDetails(transcomm.First().Rch_comm_cd);
                                //get sale for pc 
                                if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                {
                                    _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                    totsaleltargets = _salesDAL.GetDeliversaleList();
                                }
                                else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                {
                                    _salesDAL.Get_Gp_Data(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                    totsaleltargets = _salesDAL.GetDeliversaleList();
                                }
                                else
                                {
                                    _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                    totsaleltargets = _salesDAL.GetDeliversaleList();
                                    totsaleltargets = totsaleltargets.Where(a => a.Cash_dir == 1).ToList();
                                }

                                //Get Collection Details
                                recinv = _financialDAL.GetCommRecInv(com, pc, fdate, tdate);
                                foreach (var inv in recinv)
                                {
                                    if (inv.invno.Trim() != "")
                                    {
                                        if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                        {
                                            _salesDAL.GetDeliveredSalesDetails(fdate.AddYears(-1), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, 2, 11, "", "");
                                            invoicedetrec = _salesDAL.GetDeliversaleList();
                                            mainccollectcedet.AddRange(invoicedetrec);
                                        }
                                        else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                        {
                                            //_salesDAL.Get_Gp_Data(fdate.AddYears(-1), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                            // invoicedetrec = _salesDAL.GetDeliversaleList();
                                            // invoicedetrec = invoicedetrec.Where(a => a.Inv_no == inv.invno).ToList();
                                            // mainccollectcedet.AddRange(invoicedetrec);
                                            List<SALE_BAL_DETAILS> dolist = _salesDAL.GetDOLocWiseInvData(com, fdate, tdate, "", "", pc, inv.invno);
                                            if (dolist != null && dolist.Count > 0)
                                            {
                                                foreach (var lst in dolist)
                                                {
                                                    DELI_SALE_NEW ob = new DELI_SALE_NEW();
                                                    ob.Brand = lst.Brand;
                                                    ob.Cat1 = lst.Cat1;
                                                    ob.Cat1_desc = lst.Cat1_desc;
                                                    ob.Cat2 = lst.Cat2;
                                                    ob.Cat2_desc = lst.Cat2_desc;
                                                    ob.Cat3 = lst.Cat3;
                                                    ob.Cat3_desc = lst.Cat3_desc;
                                                    ob.Cat4 = lst.Cat4;
                                                    ob.Cat4_desc = lst.Cat4_desc;
                                                    ob.Cat5 = lst.Cat5;
                                                    ob.Cat5_desc = lst.Cat5_desc;
                                                    ob.Com_code = lst.Com_code;
                                                    ob.Com_name = lst.Com_name;
                                                    ob.Currency = lst.Currency;
                                                    ob.Cust_code = lst.Cust_code;
                                                    ob.Cust_name = lst.Cust_name;
                                                    ob.Disc_amt = lst.Disc_amt;
                                                    ob.Do_date = lst.Do_date;
                                                    ob.Do_loc = lst.Do_loc;
                                                    ob.Do_loc_desc = lst.Do_loc_desc;
                                                    ob.Do_no = lst.Do_no;
                                                    ob.Ex_code = lst.Ex_code;
                                                    ob.Ex_name = lst.Ex_name;
                                                    ob.Gross_amt = lst.Gross_amt;
                                                    ob.Inv_date = lst.Inv_date;
                                                    ob.Inv_no = lst.Inv_no;
                                                    ob.Inv_subtp = lst.Inv_subtp;
                                                    ob.Inv_type = lst.Inv_type;
                                                    ob.Item_code = lst.Item_code;
                                                    ob.Item_desc = lst.Item_desc;
                                                    ob.Model = lst.Model;
                                                    ob.Net_amt = lst.Net_amt;
                                                    ob.Pb_lvl = lst.Pb_lvl;
                                                    ob.Pc_code = lst.Pc_code;
                                                    ob.Pc_desc = lst.Pc_desc;
                                                    ob.Price_book = lst.Price_book;
                                                    ob.Qty = lst.Qty;
                                                    ob.Tax_amt = lst.Tax_amt;
                                                    ob.Tot_amt = lst.Tot_amt;
                                                    ob.anal_7 = lst.anal_7;
                                                    ob.anal_8 = lst.anal_8;
                                                    mainccollectcedet.Add(ob);
                                                }
                                            }
                                            else
                                            {
                                                //Tag new modification
                                                HpSystemParameters _sysPara = _salesDAL.GetSystemParameter("PC", pc, "COMMINVC", DateTime.Now.Date);
                                                if (_sysPara.Hsy_val == 1)
                                                {
                                                    _salesDAL.GetDeliveredSalesDetails(fdate.AddYears(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, 2, 11, "", "");
                                                    invoicedetrec = _salesDAL.GetDeliversaleList();
                                                    mainccollectcedet.AddRange(invoicedetrec);
                                                }

                                            }


                                        }
                                        else
                                        {
                                            _salesDAL.GetDeliveredSalesDetails(fdate.AddYears(-1), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, 2, 11, "", "");
                                            invoicedetrec = _salesDAL.GetDeliversaleList();
                                            invoicedetrec = invoicedetrec.Where(a => a.Cash_dir == 1).ToList();
                                            mainccollectcedet.AddRange(invoicedetrec);
                                        }
                                    }

                                }



                                foreach (var targlist in comm_targets)
                                {
                                    //check sales Target
                                    List<SalesForecastingDetail> targets = _financialDAL.GET_SALES_TARGET(com, fdate, tdate, pc, targlist.rct_anal1);
                                    if (targets != null)
                                    {
                                        if (targets.Count > 0)
                                        {

                                            if (targlist.rct_anal1 == "All")
                                            {
                                                //for all exec
                                            }
                                            else
                                            {
                                                //for selected exec
                                                var saletot = totsaleltargets.Where(a => a.Ex_code == targlist.rct_anal1).Sum(a => a.Tot_amt);
                                                var targetsale = targets.Sum(a => a.Sfd_val);
                                                double perc = 0;
                                                if (targetsale > 0)
                                                {
                                                    perc = Math.Round(Convert.ToDouble(saletot) * 100 / Convert.ToDouble(targetsale), 2);
                                                }
                                                if (targlist.rct_st_val <= Convert.ToDecimal(perc) && Convert.ToDecimal(perc) <= targlist.rct_end_val)
                                                {
                                                    foreach (var det in commdetailsfortagcomm)
                                                    {
                                                        det.ExecCode = targlist.rct_anal1;
                                                        det.Rcd_comm_val = det.Rcd_comm_val * targlist.rct_rate / 100;
                                                        maintarcommdet.Add(det);
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }



                                            }
                                        }
                                        else
                                        {
                                            error = "Please Define Targets For This Pc!!!";
                                        }
                                    }
                                    else
                                    {
                                        error = "Please Define Targets For This Pc!!!";
                                    }
                                }
                                List<ref_comm_target_ovrt> target_ovrtlist = _financialDAL.GetCommissionTargetOvtDetails(transcomm.First().Rch_comm_cd);
                                if (target_ovrtlist != null)
                                {
                                    if (target_ovrtlist.Count > 0)
                                    {
                                        foreach (var tagovtlist in target_ovrtlist)
                                        {
                                            decimal tgtotal = 0;
                                            decimal sltotal = 0;
                                            List<SalesForecastingDetail> targets = _financialDAL.GET_SALES_TARGET_PC(com, fdate, tdate, pc, "");
                                            foreach (var tglist in targets)
                                            {
                                                if (tglist.sfd_manager == tagovtlist.rcto_emp_cd)
                                                {
                                                    tgtotal = tgtotal + tglist.Sfd_val;
                                                    sltotal = sltotal + totsaleltargets.Where(a => a.Ex_code == tglist.sfd_exc).Sum(a => a.Tot_amt);
                                                }

                                            }
                                            decimal commraterange = 0;
                                            if (sltotal > 0)
                                            {
                                                commraterange = tgtotal * 100 / sltotal;
                                            }
                                            if ((commraterange >= tagovtlist.rcto_st_val && commraterange <= tagovtlist.rcto_end_val) == false)
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                ref_comm_emp ob = new ref_comm_emp();
                                                ob.Rce_comm_cd = tagovtlist.rcto_docno;
                                                ob.Rce_commission = tagovtlist.rcto_rate;
                                                ob.Rce_emp_type = tagovtlist.rcto_emp_cat;
                                                ob.Rce_seq = tagovtlist.rcto_seq;
                                                ob.Rce_anal1 = tagovtlist.rcto_emp_cd;
                                                maintarcommemp.Add(ob);
                                            }
                                        }
                                    }
                                }
                                List<ref_comm_collect_ovrt> collec_ovt_list = _financialDAL.GetCommissionCollectionOvtDetails(transcomm.First().Rch_comm_cd);
                                mainccollectcedet = mainccollectcedet.GroupBy(l => new { l.Inv_no, l.Ex_code })
 .Select(cl => new DELI_SALE_NEW
 {
     Ex_code = cl.First().Ex_code,
     Ex_name = cl.First().Ex_name,
     Inv_no = cl.First().Inv_no,
     Item_code = cl.First().Item_code,
     Qty = cl.Sum(a => a.Qty),
     Gross_amt = cl.Sum(a => a.Gross_amt),
     Net_amt = cl.Sum(a => a.Net_amt),
     Tot_amt = cl.Sum(a => a.Tot_amt),
     Cost_amt = cl.Sum(a => a.Cost_amt),
     Tax_amt = cl.Sum(a => a.Tax_amt),
     Disc_amt = cl.Sum(a => a.Disc_amt),
     Inv_subtp = cl.First().Inv_subtp,
     Inv_date = cl.First().Inv_date,
     Model = cl.First().Model,
     Cat1 = cl.First().Cat1,
     Cat2 = cl.First().Cat2,
     Brand = cl.First().Brand,
     Pc_code = cl.First().Pc_code,
     Inv_type = cl.First().Inv_type,
     Com_code = cl.First().Com_code
 }).ToList();
                                if (collec_ovt_list != null)
                                {
                                    if (collec_ovt_list.Count > 0)
                                    {
                                        decimal totcollection = mainccollectcedet.Sum(a => a.Tot_amt);
                                        foreach (var coll_ovt in collec_ovt_list)
                                        {
                                            foreach (var invlist in mainccollectcedet)
                                            {
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DateTime _srtndate = DateTime.Now;
                                                decimal _srtnval = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT(invlist.Inv_no, tdate);
                                                DataTable srtnsetl = _financialDAL.GET_SETTLMNT_DTSRTN(invlist.Inv_no, tdate);
                                                if (srtnsetl != null && srtnsetl.Rows.Count > 0)
                                                {
                                                    _srtnval = Convert.ToDecimal(srtnsetl.Rows[0][1].ToString());
                                                    _srtndate = Convert.ToDateTime(srtnsetl.Rows[0][0].ToString());
                                                }
                                                if (setdtdt != null)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString()) - _srtnval;
                                                        if (setldt < _srtndate)
                                                        {
                                                            setldt = _srtndate;
                                                        }

                                                        if (((setldt.AddDays(-1).Subtract(invlist.Inv_date).Days >= Convert.ToInt32(coll_ovt.rcco_stl_st_dt) && setldt.AddDays(-1).Subtract(invlist.Inv_date).Days <= Convert.ToInt32(coll_ovt.rcco_stl_end_dt) && ((invlist.Tot_amt - settlammount) <= 100) && (totcollection >= coll_ovt.rcco_st_val && totcollection <= coll_ovt.rcco_end_val) && (invlist.Inv_type == coll_ovt.rcco_inv_tp))) == false)
                                                            continue;

                                                        invlist.ManagerCommissionRate = coll_ovt.rcco_rate;

                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                                List<SalesForecastingDetail> excutives = _financialDAL.GET_SALES_TARGET_PC(com, fdate, tdate, pc, "");

                                if (maintarcommemp != null)
                                {
                                    if (maintarcommemp.Count > 0)
                                    {
                                        foreach (var mainemplist in maintarcommemp)
                                        {
                                            foreach (var invlist in mainccollectcedet)
                                            {
                                                var counts = excutives.Where(a => a.sfd_exc == invlist.Ex_code).Count();
                                                if (counts > 0)
                                                {
                                                    invlist.EmployeeCommission = invlist.Tot_amt * mainemplist.Rce_commission;
                                                    invlist.EmployeeCode = mainemplist.Rce_anal1;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (maintarcommdet != null)
                                {
                                    if (maintarcommdet.Count > 0)
                                    {
                                        foreach (var maindetlist in maintarcommdet)
                                        {
                                            foreach (var invlist in mainccollectcedet)
                                            {
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DateTime _srtndate = DateTime.Now;
                                                decimal _srtnval = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT(invlist.Inv_no, tdate);
                                                DataTable srtnsetl = _financialDAL.GET_SETTLMNT_DTSRTN(invlist.Inv_no, tdate);
                                                if (srtnsetl != null && srtnsetl.Rows.Count > 0)
                                                {
                                                    _srtnval = Convert.ToDecimal(srtnsetl.Rows[0][1].ToString()) - _srtnval;
                                                    _srtndate = Convert.ToDateTime(srtnsetl.Rows[0][0].ToString());
                                                }
                                                if (setldt < _srtndate)
                                                {
                                                    setldt = _srtndate;
                                                }
                                                if (setdtdt != null)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());

                                                        if ((setldt.AddDays(-1).Subtract(invlist.Inv_date).Days >= Convert.ToInt32(maindetlist.Rcd_anal1) && setldt.AddDays(-1).Subtract(invlist.Inv_date).Days <= Convert.ToInt32(maindetlist.Rcd_anal2) && ((invlist.Tot_amt - settlammount) <= 100) && (invlist.Inv_type == maindetlist.Rcd_inv_tp)) == false)
                                                            continue;
                                                        if (maindetlist.Rcd_brand == invlist.Brand)
                                                        {
                                                            invlist.ExecCommission = maindetlist.Rcd_comm_val * invlist.Tot_amt;
                                                        }
                                                        else if (maindetlist.Rcd_brand == "")
                                                        {
                                                            invlist.ExecCommission = maindetlist.Rcd_comm_val * invlist.Tot_amt;
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                foreach (var invlist in mainccollectcedet)
                                {
                                    if (invlist.EmployeeCommission > 0 || invlist.ExecCommission > 0 || invlist.ManagerCommissionRate > 0)
                                    {
                                        Invoice_Commission ob = new Invoice_Commission();
                                        ob.commissioncode = transcomm.First().Rch_comm_cd;
                                        ob.discountammount = invlist.Disc_amt;
                                        ob.empcode = invlist.EmployeeCode;
                                        ob.EmpCommission = invlist.EmployeeCommission;
                                        ob.ExecCode = invlist.Ex_code;
                                        ob.ExecName = invlist.Ex_name;
                                        ob.FinalCommission = invlist.ExecCommission;
                                        ob.invoicedate = invlist.Inv_date;
                                        ob.InvoiceNo = invlist.Inv_no;
                                        ob.isreversal = invlist.Cash_dir;
                                        ob.Item = invlist.Item_code;
                                        ob.ItemCommission = invlist.ExecCommission;
                                        ob.ManagerCd = invlist.ManagerCode;
                                        ob.ManagerCommission = invlist.ManagerCommissionRate * invlist.Tot_amt;
                                        ob.ProfitCenter = invlist.Pc_code;
                                        ob.Qty = Convert.ToInt32(invlist.Qty);
                                        ob.taxammount = invlist.Tax_amt;
                                        ob.TotValue = invlist.Tot_amt;
                                        invcommsummety1.Add(ob);
                                    }


                                }
                                invcommfull1.AddRange(mainccollectcedet);

                            }
                            #endregion
                            #region Basic Commission Process
                            else
                            {
                                List<ref_comm_pc> pcdata = _financialDAL.GetCommissionPC(transcomm.First().Rch_comm_cd);
                                pcdata = pcdata.Where(a => a.Rcp_pc == pc).ToList();
                                if (pcdata != null)
                                {
                                    if (pcdata.First().Rcp_anal1 == "1")
                                    {
                                        // get 3 month avg sale
                                        if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                        {
                                            _salesDAL.GetDeliveredSalesDetails(fdate.AddMonths(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                            totsalelistavg = _salesDAL.GetDeliversaleList();
                                        }
                                        else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                        {
                                            _salesDAL.Get_Gp_Data(fdate.AddMonths(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                            totsalelistavg = _salesDAL.GetDeliversaleList();
                                        }
                                        else
                                        {
                                            _salesDAL.GetDeliveredSalesDetails(fdate.AddMonths(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                            totsalelistavg = _salesDAL.GetDeliversaleList();
                                            totsalelistavg = totsalelistavg.Where(a => a.Cash_dir == 1).ToList();
                                        }
                                    }
                                }
                                if (transcomm.FirstOrDefault().Rch_collect_tp == "INV")
                                {
                                    //get invoice details
                                    if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                    {
                                        _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                        invoicedet = _salesDAL.GetDeliversaleList();
                                        totsalelist = invoicedet;
                                    }
                                    else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                    {
                                        _salesDAL.Get_Gp_Data(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                        invoicedet = _salesDAL.GetDeliversaleList();
                                        totsalelist = invoicedet;
                                    }
                                    else
                                    {
                                        _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                        invoicedet = _salesDAL.GetDeliversaleList();
                                        invoicedet = invoicedet.Where(a => a.Cash_dir == 1).ToList();
                                    }
                                    CommissionCalculation(transcomm.FirstOrDefault().Rch_comm_cd, transcomm.FirstOrDefault().Rch_comm_type, transcomm.FirstOrDefault().Rch_calc_type, transcomm.FirstOrDefault().Rch_settl_period, invoicedet, totsalelist, out  error2, out invcommsummety, out invcommfull, totsalelistavg, fdate, tdate, recinv, pc, deliverdsaletarget);
                                    invcommsummety1.AddRange(invcommsummety);
                                    invcommfull1.AddRange(invcommfull);
                                    totsalelist = invoicedet;
                                }
                                else if (transcomm.FirstOrDefault().Rch_collect_tp == "REC" || transcomm.FirstOrDefault().Rch_collect_tp == null)
                                {
                                    invoicedet = new List<DELI_SALE_NEW>();
                                    // deliverdsaletarget = _salesDAL.GetDODetailsFormonth(com, fdate, tdate, "", "", pc, "");
                                    recinv = _financialDAL.GetCommRecInv(com, pc, fdate, tdate);
                                    foreach (var inv in recinv)
                                    {
                                        if (inv.invno.Trim() != "")
                                        {
                                            if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                            {
                                                _salesDAL.GetDeliveredSalesDetails(fdate.AddYears(-1), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, 2, 11, "", "");
                                                invoicedetrec = _salesDAL.GetDeliversaleList();
                                                invoicedet.AddRange(invoicedetrec);
                                            }
                                            else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                            {
                                                _salesDAL.Get_Gp_Data(fdate.AddYears(-1), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                                invoicedetrec = _salesDAL.GetDeliversaleList();
                                                invoicedetrec = invoicedetrec.Where(a => a.Inv_no == inv.invno).ToList();
                                                invoicedet.AddRange(invoicedetrec);
                                            }
                                            else
                                            {
                                                _salesDAL.GetDeliveredSalesDetails(fdate.AddYears(-1), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, 2, 11, "", "");
                                                invoicedetrec = _salesDAL.GetDeliversaleList();
                                                invoicedetrec = invoicedetrec.Where(a => a.Cash_dir == 1).ToList();
                                                invoicedet.AddRange(invoicedetrec);
                                            }
                                        }

                                    }

                                    //for sales target
                                    if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                    {
                                        _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                        totsalelist = _salesDAL.GetDeliversaleList();
                                    }
                                    else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                    {
                                        _salesDAL.Get_Gp_Data(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                        totsalelist = _salesDAL.GetDeliversaleList();
                                    }
                                    else
                                    {
                                        _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                        invoicedet = _salesDAL.GetDeliversaleList();
                                        totsalelist = invoicedet.Where(a => a.Cash_dir == 1).ToList();
                                    }


                                    CommissionCalculation(transcomm.FirstOrDefault().Rch_comm_cd, transcomm.FirstOrDefault().Rch_comm_type, transcomm.FirstOrDefault().Rch_calc_type, transcomm.FirstOrDefault().Rch_settl_period, invoicedet, totsalelist, out  error2, out invcommsummety, out invcommfull, totsalelistavg, fdate, tdate, recinv, pc, deliverdsaletarget);
                                    invcommsummety1.AddRange(invcommsummety);
                                    invcommfull1.AddRange(invcommfull);
                                }
                            }
                            #endregion
                        }
                        else
                        {
                            #region Basic Commission Process

                            List<ref_comm_pc> pcdata = _financialDAL.GetCommissionPC(transcomm.First().Rch_comm_cd);
                            pcdata = pcdata.Where(a => a.Rcp_pc == pc).ToList();
                            if (pcdata != null)
                            {
                                if (pcdata.First().Rcp_anal1 == "1")
                                {
                                    // get 3 month avg sale
                                    if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                    {
                                        _salesDAL.GetDeliveredSalesDetails(fdate.AddMonths(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                        totsalelistavg = _salesDAL.GetDeliversaleList();
                                    }
                                    else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                    {
                                        _salesDAL.Get_Gp_Data(fdate.AddMonths(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                        totsalelistavg = _salesDAL.GetDeliversaleList();
                                    }
                                    else
                                    {
                                        _salesDAL.GetDeliveredSalesDetails(fdate.AddMonths(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                        totsalelistavg = _salesDAL.GetDeliversaleList();
                                        totsalelistavg = totsalelistavg.Where(a => a.Cash_dir == 1).ToList();
                                    }
                                }
                            }
                            if (transcomm.FirstOrDefault().Rch_collect_tp == "INV")
                            {
                                //get invoice details
                                if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                {
                                    _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                    invoicedet = _salesDAL.GetDeliversaleList();
                                    totsalelist = invoicedet;
                                }
                                else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                {
                                    _salesDAL.Get_Gp_Data(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                    invoicedet = _salesDAL.GetDeliversaleList();
                                    totsalelist = invoicedet;
                                }
                                else
                                {
                                    _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                    invoicedet = _salesDAL.GetDeliversaleList();
                                    invoicedet = invoicedet.Where(a => a.Cash_dir == 1).ToList();
                                }
                                CommissionCalculation(transcomm.FirstOrDefault().Rch_comm_cd, transcomm.FirstOrDefault().Rch_comm_type, transcomm.FirstOrDefault().Rch_calc_type, transcomm.FirstOrDefault().Rch_settl_period, invoicedet, totsalelist, out  error2, out invcommsummety, out invcommfull, totsalelistavg, fdate, tdate, recinv, pc, deliverdsaletarget);
                                invcommsummety1.AddRange(invcommsummety);
                                invcommfull1.AddRange(invcommfull);
                                totsalelist = invoicedet;
                            }
                            else if (transcomm.FirstOrDefault().Rch_collect_tp == "REC" || transcomm.FirstOrDefault().Rch_collect_tp == null)
                            {
                                invoicedet = new List<DELI_SALE_NEW>();
                                //  deliverdsaletarget = _salesDAL.GetDODetailsFormonth(com, fdate, tdate, "", "", pc, "");
                                recinv = _financialDAL.GetCommRecInv(com, pc, fdate, tdate);
                                foreach (var inv in recinv)
                                {
                                    if (inv.invno.Trim() != "")
                                    {
                                        if (inv.invno.Trim() == "A2CR-08217")
                                        {
                                            string a = "";
                                        }
                                        if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                        {
                                            _salesDAL.GetDeliveredSalesDetails(fdate.AddYears(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, 2, 11, "", "");
                                            invoicedetrec = _salesDAL.GetDeliversaleList();
                                            invoicedet.AddRange(invoicedetrec);
                                        }
                                        else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                        {
                                            // _salesDAL.Get_Gp_Data(fdate.AddYears(-1), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                            //  invoicedetrec = _salesDAL.GetDeliversaleList();
                                            // invoicedetrec = invoicedetrec.Where(a => a.Inv_no == inv.invno).ToList();
                                            // invoicedet.AddRange(invoicedetrec);
                                            List<SALE_BAL_DETAILS> dolist = _salesDAL.GetDOLocWiseInvData(com, fdate.AddYears(-2), tdate, "", "", pc, inv.invno);
                                            if (dolist != null && dolist.Count > 0)
                                            {
                                                foreach (var lst in dolist)
                                                {
                                                    DELI_SALE_NEW ob = new DELI_SALE_NEW();
                                                    ob.Brand = lst.Brand;
                                                    ob.Cat1 = lst.Cat1;
                                                    ob.Cat1_desc = lst.Cat1_desc;
                                                    ob.Cat2 = lst.Cat2;
                                                    ob.Cat2_desc = lst.Cat2_desc;
                                                    ob.Cat3 = lst.Cat3;
                                                    ob.Cat3_desc = lst.Cat3_desc;
                                                    ob.Cat4 = lst.Cat4;
                                                    ob.Cat4_desc = lst.Cat4_desc;
                                                    ob.Cat5 = lst.Cat5;
                                                    ob.Cat5_desc = lst.Cat5_desc;
                                                    ob.Com_code = lst.Com_code;
                                                    ob.Com_name = lst.Com_name;
                                                    ob.Currency = lst.Currency;
                                                    ob.Cust_code = lst.Cust_code;
                                                    ob.Cust_name = lst.Cust_name;
                                                    ob.Disc_amt = lst.Disc_amt;
                                                    ob.Do_date = lst.Do_date;
                                                    ob.Do_loc = lst.Do_loc;
                                                    ob.Do_loc_desc = lst.Do_loc_desc;
                                                    ob.Do_no = lst.Do_no;
                                                    ob.Ex_code = lst.Ex_code;
                                                    ob.Ex_name = lst.Ex_name;
                                                    ob.Gross_amt = lst.Gross_amt;
                                                    ob.Inv_date = lst.Inv_date;
                                                    ob.Inv_no = lst.Inv_no;
                                                    ob.Inv_subtp = lst.Inv_subtp;
                                                    ob.Inv_type = lst.Inv_type;
                                                    ob.Item_code = lst.Item_code;
                                                    ob.Item_desc = lst.Item_desc;
                                                    ob.Model = lst.Model;
                                                    ob.Net_amt = lst.Net_amt;
                                                    ob.Pb_lvl = lst.Pb_lvl;
                                                    ob.Pc_code = lst.Pc_code;
                                                    ob.Pc_desc = lst.Pc_desc;
                                                    ob.Price_book = lst.Price_book;
                                                    ob.Qty = lst.Qty;
                                                    ob.Tax_amt = lst.Tax_amt;
                                                    ob.Tot_amt = lst.Tot_amt;
                                                    ob.anal_7 = lst.anal_7;
                                                    ob.anal_8 = lst.anal_8;
                                                    invoicedet.Add(ob);
                                                }
                                            }
                                            else
                                            {
                                                ////Tag new modification
                                                //HpSystemParameters _sysPara = _salesDAL.GetSystemParameter("PC", pc, "COMMINVC", DateTime.Now.Date);
                                                //if (_sysPara.Hsy_val == 1)
                                                //{
                                                //    _salesDAL.GetDeliveredSalesDetails(fdate.AddYears(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, 2, 11, "", "");
                                                //    invoicedetrec = _salesDAL.GetDeliversaleList();
                                                //    invoicedet.AddRange(invoicedetrec);
                                                //}
                                            }

                                        }
                                        else
                                        {
                                            _salesDAL.GetDeliveredSalesDetails(fdate.AddYears(-2), tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", inv.invno, pc, com, "", 11, 2, 11, "", "");
                                            invoicedetrec = _salesDAL.GetDeliversaleList();
                                            invoicedetrec = invoicedetrec.Where(a => a.Cash_dir == 1).ToList();
                                            invoicedet.AddRange(invoicedetrec);
                                        }
                                    }

                                }

                                //for sales target
                                if (transcomm.FirstOrDefault().Rch_sales_type == "INV")
                                {
                                    _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                    totsalelist = _salesDAL.GetDeliversaleList();
                                }
                                else if (transcomm.FirstOrDefault().Rch_sales_type == "DELI")
                                {
                                    _salesDAL.Get_Gp_Data(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                                    totsalelist = _salesDAL.GetDeliversaleList();
                                }
                                else
                                {
                                    _salesDAL.GetDeliveredSalesDetails(fdate, tdate, "", "", "", "", "", "", "", "", "", "", "", "", "", "", pc, com, "", 11, 2, 11, "", "");
                                    invoicedet = _salesDAL.GetDeliversaleList();
                                    totsalelist = invoicedet.Where(a => a.Cash_dir == 1).ToList();
                                }


                                CommissionCalculation(transcomm.FirstOrDefault().Rch_comm_cd, transcomm.FirstOrDefault().Rch_comm_type, transcomm.FirstOrDefault().Rch_calc_type, transcomm.FirstOrDefault().Rch_settl_period, invoicedet, totsalelist, out  error2, out invcommsummety, out invcommfull, totsalelistavg, fdate, tdate, recinv, pc, deliverdsaletarget);
                                invcommsummety1.AddRange(invcommsummety);
                                invcommfull1.AddRange(invcommfull);
                            }
                            #endregion
                        }




                    }
                }
            }
            summery = invcommsummety1;
            all = invcommfull1;

            return 1;
        }
        public int EliteCommissionProcess(string com, List<Commission_pc> Commpc, DateTime fdate, DateTime tdate, out string error, out List<Invoice_Commission> summery)
        {
            error = "";
            summery = new List<Invoice_Commission>();

            foreach (var pcs in Commpc)
            {
                string pc = pcs.pccode;
                List<ref_comm_hdr> transcomm = _financialDAL.GetCommissionByPC(com, pc, fdate, tdate);
                if (transcomm != null && transcomm.Count > 0)
                {

                }
                else
                {
                    error = "Please Define Commission!!!";
                    return 0;
                }
            }
            return 1;
        }
        private void CommissionCalculation(string commicd, string commtype, string caltype, int settldates, List<DELI_SALE_NEW> invlist, List<DELI_SALE_NEW> fortotsaleslist, out string error, out List<Invoice_Commission> invcommsummety, out List<DELI_SALE_NEW> invcommfull, List<DELI_SALE_NEW> targetavgsale, DateTime fromdate, DateTime todate, List<Comm_recinv> recinv, string pc, List<SALE_BAL_DETAILS> deliverdsaletarget)
        {
            error = "";
            List<DELI_SALE_NEW> full_invoicelist = new List<DELI_SALE_NEW>();
            List<DELI_SALE_NEW> itemwise_invoicelist = new List<DELI_SALE_NEW>();
            List<DELI_SALE_NEW> itemwise_invoicelistfortarget = new List<DELI_SALE_NEW>();
            List<DELI_SALE_NEW> valuewise_invoicelist = new List<DELI_SALE_NEW>();
            List<Invoice_Commission> invcommsummety1 = new List<Invoice_Commission>();
            List<DELI_SALE_NEW> total_list = new List<DELI_SALE_NEW>();


            List<ref_comm_det> comm_itemdet = _financialDAL.GetCommissionDetails(commicd);
            List<ref_comm_emp> comm_emp = _financialDAL.GetCommissionEmp(commicd);
            string company = "";
            bool halfrate = false;
            bool isratezoro = false;
            if (comm_itemdet != null && commtype == "QTYWISE")
            {
                //foreach (var item in comm_itemdet)
                //{
                //    itemwise_invoicelist.AddRange(invlist.Where(a => a.Item_code == item.Rcd_item_cd || a.Model == item.Rcd_model || a.Cat1 == item.Rcd_cat1 || a.Cat2 == item.Rcd_cat2 ||  a.Brand == item.Rcd_brand).ToList());
                //}
                itemwise_invoicelist.AddRange(invlist);

            }
            else
            {
                if (comm_itemdet != null)
                {
                    if (comm_itemdet.Count > 0)
                    {
                        itemwise_invoicelist.AddRange(invlist);
                    }
                    else
                    {
                        error = "Please Setup  Commissions!!";
                    }
                }

            }
            //check settlement date



            //group by ex code,inv no 
            full_invoicelist = itemwise_invoicelist.GroupBy(l => new { l.Inv_no, l.Ex_code })
   .Select(cl => new DELI_SALE_NEW
   {
       Ex_code = cl.First().Ex_code,
       Ex_name = cl.First().Ex_name,
       Inv_no = cl.First().Inv_no,
       Item_code = cl.First().Item_code,
       Qty = cl.Sum(a => a.Qty),
       Gross_amt = cl.Sum(a => a.Gross_amt),
       Net_amt = cl.Sum(a => a.Net_amt),
       Tot_amt = cl.Sum(a => a.Tot_amt),
       Cost_amt = cl.Sum(a => a.Cost_amt),
       Tax_amt = cl.Sum(a => a.Tax_amt),
       Disc_amt = cl.Sum(a => a.Disc_amt),
       Inv_subtp = cl.First().Inv_subtp,
       Inv_date = cl.First().Inv_date,
       Model = cl.First().Model,
       Cat1 = cl.First().Cat1,
       Cat2 = cl.First().Cat2,
       Cat3 = cl.First().Cat3,
       Brand = cl.First().Brand,
       Pc_code = cl.First().Pc_code,
       Inv_type = cl.First().Inv_type,
       Com_code = cl.First().Com_code
   }).ToList();
            //grou by ex code
            itemwise_invoicelist = itemwise_invoicelist.GroupBy(l => new { l.Inv_no, l.Ex_code, l.Item_code })
   .Select(cl => new DELI_SALE_NEW
   {
       Ex_code = cl.First().Ex_code,
       Ex_name = cl.First().Ex_name,
       Inv_no = cl.First().Inv_no,
       Item_code = cl.First().Item_code,
       Qty = cl.Sum(a => a.Qty),
       Gross_amt = cl.Sum(a => a.Gross_amt),
       Net_amt = cl.Sum(a => a.Net_amt),
       Tot_amt = cl.Sum(a => a.Tot_amt),
       Cost_amt = cl.Sum(a => a.Cost_amt),
       Tax_amt = cl.Sum(a => a.Tax_amt),
       Disc_amt = cl.Sum(a => a.Disc_amt),
       Inv_subtp = cl.First().Inv_subtp,
       Inv_date = cl.First().Inv_date,
       Model = cl.First().Model,
       Cat1 = cl.First().Cat1,
       Cat2 = cl.First().Cat2,
       Cat3 = cl.First().Cat3,
       Brand = cl.First().Brand,
       Pc_code = cl.First().Pc_code,
       Inv_type = cl.First().Inv_type,
       Com_code = cl.First().Com_code
   }).ToList();

            itemwise_invoicelistfortarget = fortotsaleslist.GroupBy(l => new { l.Inv_no, l.Ex_code, l.Item_code })
  .Select(cl => new DELI_SALE_NEW
  {
      Ex_code = cl.First().Ex_code,
      Ex_name = cl.First().Ex_name,
      Inv_no = cl.First().Inv_no,
      Item_code = cl.First().Item_code,
      Qty = cl.Sum(a => a.Qty),
      Gross_amt = cl.Sum(a => a.Gross_amt),
      Net_amt = cl.Sum(a => a.Net_amt),
      Tot_amt = cl.Sum(a => a.Tot_amt),
      Cost_amt = cl.Sum(a => a.Cost_amt),
      Tax_amt = cl.Sum(a => a.Tax_amt),
      Disc_amt = cl.Sum(a => a.Disc_amt),
      Inv_subtp = cl.First().Inv_subtp,
      Inv_date = cl.First().Inv_date,
      Model = cl.First().Model,
      Cat1 = cl.First().Cat1,
      Cat2 = cl.First().Cat2,
      Cat3 = cl.First().Cat3,
      Brand = cl.First().Brand,
      Pc_code = cl.First().Pc_code,
      Inv_type = cl.First().Inv_type,
      Com_code = cl.First().Com_code
  }).ToList();


            total_list = fortotsaleslist.GroupBy(l => new { l.Ex_code, l.Pc_code })
  .Select(cl => new DELI_SALE_NEW
  {
      Ex_code = cl.First().Ex_code,
      Ex_name = cl.First().Ex_name,
      Inv_no = cl.First().Inv_no,
      Item_code = cl.First().Item_code,
      Qty = cl.Sum(a => a.Qty),
      Gross_amt = cl.Sum(a => a.Gross_amt),
      Net_amt = cl.Sum(a => a.Net_amt),
      Tot_amt = cl.Sum(a => a.Tot_amt),
      Cost_amt = cl.Sum(a => a.Cost_amt),
      Tax_amt = cl.Sum(a => a.Tax_amt),
      Disc_amt = cl.Sum(a => a.Disc_amt),
      Inv_subtp = cl.First().Inv_subtp,
      Inv_date = cl.First().Inv_date,
      Model = cl.First().Model,
      Cat1 = cl.First().Cat1,
      Cat2 = cl.First().Cat2,
      Cat3 = cl.First().Cat3,
      Brand = cl.First().Brand,
      Pc_code = cl.First().Pc_code,
      Inv_type = cl.First().Inv_type,
      Com_code = cl.First().Com_code
  }).ToList();

            #region Qty Wise
            if (commtype == "QTYWISE")
            {
                if (itemwise_invoicelist != null)
                {
                    foreach (var _ttlist in itemwise_invoicelist)
                    {
                        int n1;
                        MasterItem _mstItm = _generalDAL.GetItemMaster(_ttlist.Item_code);
                        bool isNumeric = int.TryParse(_mstItm.Mi_size, out n1);
                        if (isNumeric)
                        {
                            _ttlist.btu = Convert.ToDecimal(_mstItm.Mi_size);
                        }
                        if (_ttlist.Inv_no == "A2CR-08217")
                        {
                            string a = "";
                        }
                    }
                    #region check full settle invoice

                    if (pc == "35")
                    {
                        List<DELI_SALE_NEW> itemwise_invoicelistnew = new List<DELI_SALE_NEW>();
                        foreach (var invitemlist in itemwise_invoicelist)
                        {
                            if (invitemlist.Inv_no == "A2CR-08217")
                            {
                                string a = "";
                            }
                            DateTime setldtbtu = DateTime.Now;
                            decimal settlammountbtu = 0;
                            decimal _srtnvalbtu = 0;
                            DateTime _srtndatebtu = DateTime.MinValue;
                            decimal _invtotvalbtu = itemwise_invoicelist.Where(a => a.Inv_no == invitemlist.Inv_no).Sum(a => a.Tot_amt);
                            DataTable setdtdtbtu = _financialDAL.GET_SETTLMNT_DT(invitemlist.Inv_no, todate);
                            DataTable srtnsetlbtu = _financialDAL.GET_SETTLMNT_DTSRTN(invitemlist.Inv_no, todate);
                            if (srtnsetlbtu != null && srtnsetlbtu.Rows.Count > 0)
                            {
                                _srtnvalbtu = Convert.ToDecimal(srtnsetlbtu.Rows[0][1].ToString());
                                _srtndatebtu = Convert.ToDateTime(srtnsetlbtu.Rows[0][0].ToString());
                            }

                            if (setdtdtbtu != null)
                            {
                                if (setdtdtbtu.Rows.Count > 0)
                                {
                                    if (setdtdtbtu.Rows[0][1].ToString() == "")
                                    {
                                        continue;
                                    }
                                    setldtbtu = Convert.ToDateTime(setdtdtbtu.Rows[0][0].ToString());
                                    settlammountbtu = Convert.ToDecimal(setdtdtbtu.Rows[0][1].ToString()) - _srtnvalbtu;
                                    if (setldtbtu.Date == invitemlist.Inv_date.Date)
                                    {
                                        setldtbtu = setldtbtu.AddDays(1);
                                    }
                                    if (setldtbtu < _srtndatebtu)
                                    {
                                        setldtbtu = _srtndatebtu;
                                    }

                                    //check deposit date
                                    if (IsValidDateTimeTest(setdtdtbtu.Rows[0][2].ToString()))
                                    {
                                        if (setldtbtu >= Convert.ToDateTime(setdtdtbtu.Rows[0][2].ToString()))
                                        {
                                            if (Convert.ToDateTime("01/Jan/0001").Date != Convert.ToDateTime(setdtdtbtu.Rows[0][2].ToString()).Date)
                                                setldtbtu = Convert.ToDateTime(setdtdtbtu.Rows[0][2].ToString());
                                        }
                                    }
                                    else if (IsValidDateTimeTest(setdtdtbtu.Rows[0][3].ToString()))
                                    {
                                        if (setldtbtu >= Convert.ToDateTime(setdtdtbtu.Rows[0][3].ToString()))
                                        {
                                            if (Convert.ToDateTime("01/Jan/0001").Date != Convert.ToDateTime(setdtdtbtu.Rows[0][2].ToString()).Date)
                                                setldtbtu = Convert.ToDateTime(setdtdtbtu.Rows[0][3].ToString());
                                        }
                                    }
                                    if ((_invtotvalbtu - settlammountbtu == 0) && setldtbtu <= todate)
                                    {
                                        itemwise_invoicelistnew.Add(invitemlist);
                                    }
                                    else
                                    {
                                        continue;
                                    }

                                }
                            }

                        }
                        itemwise_invoicelist = itemwise_invoicelistnew;
                    }
                    #endregion
                    foreach (var item in comm_itemdet)
                    {
                        valuewise_invoicelist = new List<DELI_SALE_NEW>();
                        if (item.Rcd_cat3 != null && item.Rcd_cat3 != "")
                        {
                            if (item.Rcd_cat3 == "INV")
                            {
                                // valuewise_invoicelist.AddRange(itemwise_invoicelist.Where(a => (a.Cat3 == item.Rcd_cat3) && a.Qty >= item.Rcd_st_val && a.Qty <= item.Rcd_end_val).ToList());

                                foreach (var invitemlist in itemwise_invoicelist)
                                {

                                    if (invitemlist.Inv_no == "A2CR-08217")
                                    {
                                        string a = "";
                                    }
                                    //check btu range 
                                    if (Convert.ToDecimal(item.Rcd_btu_f) > 0 && Convert.ToDecimal(item.Rcd_btu_e) > 0)
                                    {
                                        int n;
                                        //int cat3count = 0;
                                        MasterItem _mstItm = _generalDAL.GetItemMaster(invitemlist.Item_code);
                                        bool isNumeric = int.TryParse(_mstItm.Mi_size, out n);
                                        if (isNumeric && invitemlist.Cat3 == "INV")
                                        {
                                            if (invitemlist.Inv_no == "A2CR-08217")
                                            {
                                                string a = "";
                                            }
                                            decimal _totqty = 0;
                                            if (Convert.ToDecimal(item.Rcd_btu_f) <= Convert.ToDecimal(_mstItm.Mi_size) && Convert.ToDecimal(_mstItm.Mi_size) <= Convert.ToDecimal(item.Rcd_btu_e))
                                            {
                                                List<DELI_SALE_NEW> aaa = itemwise_invoicelist.Where(a => a.Ex_code == invitemlist.Ex_code && a.btu >= Convert.ToDecimal(item.Rcd_btu_f) && a.btu <= Convert.ToDecimal(item.Rcd_btu_e)).ToList();
                                                string ax = "";
                                                foreach (DELI_SALE_NEW x in aaa)
                                                {
                                                    ax += ",--" + x.Item_code + "---" + x.Inv_no + "--" + x.Qty + "--" + x.btu;
                                                }
                                                _totqty = itemwise_invoicelist.Where(a => a.Ex_code == invitemlist.Ex_code && a.btu >= Convert.ToDecimal(item.Rcd_btu_f) && a.btu <= Convert.ToDecimal(item.Rcd_btu_e)).Sum(b => b.Qty);
                                            }

                                            if (Convert.ToDecimal(_mstItm.Mi_size) >= Convert.ToDecimal(item.Rcd_btu_f) && Convert.ToDecimal(_mstItm.Mi_size) <= Convert.ToDecimal(item.Rcd_btu_e) && item.Rcd_st_val <= _totqty && item.Rcd_end_val >= _totqty)
                                            {
                                                valuewise_invoicelist.Add(invitemlist);
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            continue;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                foreach (var invitemlist in itemwise_invoicelist)
                                {
                                    //check btu range 
                                    if (Convert.ToDecimal(item.Rcd_btu_f) > 0 && Convert.ToDecimal(item.Rcd_btu_e) > 0)
                                    {
                                        int n;
                                        if (invitemlist.Inv_no == "A2CR-08217")
                                        {
                                            string a = "";
                                        }
                                        //int cat3count = 0;
                                        MasterItem _mstItm = _generalDAL.GetItemMaster(invitemlist.Item_code);
                                        bool isNumeric = int.TryParse(_mstItm.Mi_size, out n);
                                        if (isNumeric && invitemlist.Cat3 != "INV")
                                        {
                                            if (invitemlist.Inv_no == "A2CR-08217")
                                            {
                                                string a = "";
                                            }
                                            decimal _totqty = 0;
                                            if (Convert.ToDecimal(item.Rcd_btu_f) <= Convert.ToDecimal(_mstItm.Mi_size) && Convert.ToDecimal(_mstItm.Mi_size) <= Convert.ToDecimal(item.Rcd_btu_e))
                                            {
                                                _totqty = itemwise_invoicelist.Where(a => a.Ex_code == invitemlist.Ex_code && a.btu >= Convert.ToDecimal(item.Rcd_btu_f) && a.btu <= Convert.ToDecimal(item.Rcd_btu_e)).Sum(b => b.Qty);
                                            }
                                            if (Convert.ToDecimal(_mstItm.Mi_size) >= Convert.ToDecimal(item.Rcd_btu_f) && Convert.ToDecimal(_mstItm.Mi_size) <= Convert.ToDecimal(item.Rcd_btu_e) && item.Rcd_st_val <= _totqty && item.Rcd_end_val >= _totqty)
                                            {
                                                valuewise_invoicelist.Add(invitemlist);
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            continue;
                                        }
                                    }
                                }
                            }



                        }
                        else
                        {
                            valuewise_invoicelist.AddRange(itemwise_invoicelist.Where(a => (a.Item_code == item.Rcd_item_cd || a.Model == item.Rcd_model || a.Cat1 == item.Rcd_cat1 || a.Cat2 == item.Rcd_cat2 || a.Brand == item.Rcd_brand) && a.Qty >= item.Rcd_st_val && a.Qty <= item.Rcd_end_val).ToList());
                        }


                        //Add final list
                        foreach (var vainlist in valuewise_invoicelist)
                        {
                            //check invoice type
                            if (item.Rcd_inv_tp != null && item.Rcd_inv_tp != "")
                            {
                                if (vainlist.Inv_type != item.Rcd_inv_tp)
                                {
                                    continue;
                                }
                            }
                            if (vainlist.Inv_no == "A2CR-08217")
                            {
                                string a = "";
                            }
                            //check sales Target
                            List<SalesForecastingDetail> targets = _financialDAL.GET_SALES_TARGET(vainlist.Com_code, fromdate, todate, vainlist.Pc_code, vainlist.Ex_code);
                            if (targets == null)
                            {
                                targets = _financialDAL.GET_SALES_TARGET(vainlist.Com_code, fromdate, todate, vainlist.Pc_code, "All");
                            }
                            if (targets != null)
                            {
                                if (targets.Count > 0 && (targets.First().sfd_manager == "" || targets.First().sfd_manager == null))
                                {
                                    if (targets.First().sfd_inv_type == "All" || targets.First().sfd_inv_type == "")
                                    {
                                        var fulltot = itemwise_invoicelistfortarget.Where(a => a.Ex_code == vainlist.Ex_code && a.Pc_code == vainlist.Pc_code && (a.Item_code == vainlist.Item_code || a.Model == vainlist.Model || a.Brand == vainlist.Brand || a.Cat1 == vainlist.Cat1 || a.Cat2 == vainlist.Cat2 || a.Cat3 == vainlist.Cat3)).Sum(s => s.Tot_amt);
                                        if (fulltot == 0)
                                        {
                                            fulltot = 0;
                                        }
                                        if (targets.First().Sfd_val > fulltot)
                                        {
                                            if (targetavgsale != null)
                                            {
                                                if (targetavgsale.Count > 0)
                                                {
                                                    var avgtotal = targetavgsale.Where(a => a.Ex_code == vainlist.Ex_code && a.Pc_code == vainlist.Pc_code && (a.Item_code == vainlist.Item_code || a.Model == vainlist.Model || a.Brand == vainlist.Brand || a.Cat1 == vainlist.Cat1 || a.Cat2 == vainlist.Cat2 || a.Cat3 == vainlist.Cat3)).Sum(s => s.Tot_amt);
                                                    avgtotal = avgtotal / 3;

                                                    if (targets.First().Sfd_val > avgtotal) continue;
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }


                                        }
                                    }
                                    else
                                    {
                                        var fulltot = itemwise_invoicelistfortarget.Where(a => a.Ex_code == vainlist.Ex_code && a.Pc_code == vainlist.Pc_code && a.Inv_type == targets.First().sfd_inv_type && (a.Item_code == vainlist.Item_code || a.Model == vainlist.Model || a.Brand == vainlist.Brand || a.Cat1 == vainlist.Cat1 || a.Cat2 == vainlist.Cat2 || a.Cat3 == vainlist.Cat3)).Sum(s => s.Tot_amt);
                                        if (fulltot == 0)
                                        {
                                            fulltot = 0;
                                        }
                                        if (targets.First().Sfd_val > fulltot)
                                        {
                                            if (targetavgsale != null)
                                            {
                                                if (targetavgsale.Count > 0)
                                                {
                                                    var avgtotal = targetavgsale.Where(a => a.Ex_code == vainlist.Ex_code && a.Pc_code == vainlist.Pc_code && a.Inv_type == targets.First().sfd_inv_type && (a.Item_code == vainlist.Item_code || a.Model == vainlist.Model || a.Brand == vainlist.Brand || a.Cat1 == vainlist.Cat1 || a.Cat2 == vainlist.Cat2 || a.Cat3 == vainlist.Cat3)).Sum(s => s.Tot_amt);
                                                    avgtotal = avgtotal / 3;

                                                    if (targets.First().Sfd_val > avgtotal) continue;
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }


                                        }
                                    }

                                }
                                else
                                {
                                    targets = _financialDAL.GET_SALES_TARGET_PC(vainlist.Com_code, fromdate, todate, vainlist.Pc_code, "");
                                    targets = targets.Where(a => a.sfd_exc == vainlist.Ex_code).ToList();
                                    List<SalesForecastingDetail> targlistallg = targets.GroupBy(l => new { l.sfd_manager })
    .Select(cl => new SalesForecastingDetail
    {
        sfd_manager = cl.First().sfd_manager,
        Sfd_val = cl.Sum(a => a.Sfd_val)

    }).ToList();
                                    decimal fulltot = 0;
                                    foreach (var targetslist in targets)
                                    {
                                        fulltot = fulltot + itemwise_invoicelistfortarget.Where(a => a.Ex_code == vainlist.Ex_code && a.Pc_code == vainlist.Pc_code && a.Inv_type == targetslist.sfd_inv_type && (a.Item_code == vainlist.Item_code || a.Model == vainlist.Model || a.Brand == vainlist.Brand || a.Cat1 == vainlist.Cat1 || a.Cat2 == vainlist.Cat2 || a.Cat3 == vainlist.Cat3)).Sum(s => s.Tot_amt);
                                    }
                                    if (fulltot < targlistallg.First().Sfd_val)
                                    {
                                        continue;
                                    }

                                }
                            }
                            DateTime setldt = DateTime.Now;
                            decimal settlammount = 0;
                            decimal _srtnval = 0;
                            DateTime _srtndate = DateTime.MinValue;
                            decimal _invtotval = itemwise_invoicelist.Where(a => a.Inv_no == vainlist.Inv_no).Sum(a => a.Tot_amt);
                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT(vainlist.Inv_no, todate);
                            DataTable srtnsetl = _financialDAL.GET_SETTLMNT_DTSRTN(vainlist.Inv_no, todate);
                            if (srtnsetl != null && srtnsetl.Rows.Count > 0)
                            {
                                _srtnval = Convert.ToDecimal(srtnsetl.Rows[0][1].ToString());
                                _srtndate = Convert.ToDateTime(srtnsetl.Rows[0][0].ToString());
                            }

                            if (setdtdt != null)
                            {
                                if (setdtdt.Rows.Count > 0)
                                {
                                    if (setdtdt.Rows[0][1].ToString() == "")
                                    {
                                        continue;
                                    }
                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString()) - _srtnval;
                                    if (setldt.Date == vainlist.Inv_date.Date)
                                    {
                                        setldt = setldt.AddDays(1);
                                    }
                                    if (setldt < _srtndate)
                                    {
                                        setldt = _srtndate;
                                    }

                                    //check deposit date
                                    if (IsValidDateTimeTest(setdtdt.Rows[0][2].ToString()))
                                    {
                                        if (setldt >= Convert.ToDateTime(setdtdt.Rows[0][2].ToString()))
                                        {
                                            if (Convert.ToDateTime("01/Jan/0001").Date != Convert.ToDateTime(setdtdt.Rows[0][2].ToString()).Date)
                                                setldt = Convert.ToDateTime(setdtdt.Rows[0][2].ToString());
                                        }
                                    }
                                    else if (IsValidDateTimeTest(setdtdt.Rows[0][3].ToString()))
                                    {
                                        if (setldt >= Convert.ToDateTime(setdtdt.Rows[0][3].ToString()))
                                        {
                                            if (Convert.ToDateTime("01/Jan/0001").Date != Convert.ToDateTime(setdtdt.Rows[0][2].ToString()).Date)
                                                setldt = Convert.ToDateTime(setdtdt.Rows[0][3].ToString());
                                        }
                                    }
                                    if (item.Rcd_anal2 != "0")
                                    {
                                        if ((setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days >= Convert.ToInt32(item.Rcd_anal1) && setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= Convert.ToInt32(item.Rcd_anal2)) == false)
                                        {
                                            if (setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= 0)
                                            {

                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }

                                    }


                                    if ((_invtotval - settlammount > 100) && setldt <= todate)
                                    {
                                        //check is  srn
                                        if (Convert.ToDecimal(setdtdt.Rows[0][4].ToString()) < 100)
                                        {
                                            vainlist.Tot_amt = settlammount;
                                        }
                                        else
                                        {
                                            //check 2.5%
                                            DataTable chkdisc = _financialDAL.Check_Disc_Adj(vainlist.Inv_no);
                                            if (chkdisc != null)
                                            {
                                                if (chkdisc.Rows.Count > 0)
                                                {
                                                    if (chkdisc.Rows[0][0].ToString() == "" || chkdisc.Rows[0][0].ToString() == "0")
                                                    {
                                                        List<sat_settl_discount> disclist = _salesDAL.GetSettleDiscountDetails(vainlist.Com_code, vainlist.Pc_code, vainlist.Inv_type);

                                                        if (disclist != null)
                                                        {
                                                            if (disclist.Count > 0)
                                                            {
                                                                disclist = disclist.Where(a => a.ssd_from_period >= setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days && a.ssd_to_period <= setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days).ToList();
                                                                if (disclist != null)
                                                                {
                                                                    if (disclist.Count > 0)
                                                                    {
                                                                        decimal _arrval = vainlist.Tot_amt * disclist.First().ssd_dis_rate / 100;
                                                                        if ((_invtotval - settlammount - _arrval) > 100)
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }


                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }


                                    }
                                    else
                                    {
                                        if (setldt.AddDays(-1) > todate)
                                        {
                                            continue;
                                        }
                                    }
                                }
                            }
                            if (vainlist.Item_code == item.Rcd_item_cd || vainlist.Model == item.Rcd_model || vainlist.Cat1 == item.Rcd_cat1 || vainlist.Cat2 == item.Rcd_cat2 || vainlist.Brand == item.Rcd_brand)
                            {
                                Invoice_Commission ob = new Invoice_Commission();
                                if (caltype == "GP")
                                {
                                    //genarate item commission
                                    if (item.Rcd_comm_val >= 100)
                                    {
                                        ob.ItemCommission = item.Rcd_comm_val * vainlist.Qty;
                                    }
                                    else
                                    {
                                        List<ref_comm_mngr> _norcomm = _financialDAL.GetCommissionExcmngratesNor(item.Rcd_comm_cd, vainlist.Ex_code, setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days);
                                        if (_norcomm != null)
                                        {
                                            if (_norcomm.Count > 0)
                                            {
                                                ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * _norcomm.First().Rcm_rate / 100;
                                            }
                                            else
                                            {
                                                ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * item.Rcd_comm_val / 100;
                                            }
                                        }
                                        else
                                        {
                                            ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * item.Rcd_comm_val / 100;
                                        }
                                    }


                                    ob.ExecCode = vainlist.Ex_code;
                                    ob.ExecName = vainlist.Ex_name;
                                    ob.InvoiceNo = vainlist.Inv_no;
                                    ob.Item = vainlist.Item_code;
                                    ob.Qty = Convert.ToInt32(vainlist.Qty);
                                    ob.TotValue = vainlist.Tot_amt;
                                    ob.taxammount = vainlist.Tax_amt;
                                    ob.discountammount = vainlist.Disc_amt;
                                    ob.commissioncode = item.Rcd_comm_cd;
                                    ob.invoicedate = vainlist.Inv_date;
                                    ob.ProfitCenter = vainlist.Promoter_code;
                                    ob.stdates = Convert.ToInt32(item.Rcd_anal1);
                                    ob.enddates = Convert.ToInt32(item.Rcd_anal2);
                                    ob.Settlementdates = setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days;
                                    if (vainlist.Inv_subtp == "REV")
                                    {
                                        ob.isreversal = 1;
                                    }
                                    else
                                    {
                                        ob.isreversal = 0;
                                    }
                                    ob.ItemCommissionRate = item.Rcd_comm_val;
                                    ob.Company = vainlist.Com_code;
                                    invcommsummety1.Add(ob);
                                    company = vainlist.Com_code;
                                    //Manager Exec Code
                                    List<ref_comm_mngr> _execmanager = _financialDAL.GetCommissionExcmngrates(item.Rcd_comm_cd, vainlist.Ex_code);
                                    if (_execmanager != null)
                                    {
                                        if (_execmanager.Count > 0)
                                        {

                                            foreach (var _mnger in _execmanager)
                                            {
                                                ob = new Invoice_Commission();
                                                if ((setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days >= Convert.ToInt32(_mnger.Rcm_st_dates) && setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= Convert.ToInt32(_mnger.Rcm_end_dates)) == false)
                                                {
                                                    if (setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= 0)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    //genarate item commission
                                                    if (_mnger.Rcm_rate >= 100)
                                                    {
                                                        ob.ItemCommission = _mnger.Rcm_rate * vainlist.Qty;
                                                    }
                                                    else
                                                    {
                                                        ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * _mnger.Rcm_rate / 100;
                                                    }


                                                    ob.ExecCode = _mnger.Rcm_mngr_cd;
                                                    ob.ExecName = _mnger.Rcm_anal1 + " of " + vainlist.Ex_code + " Rate: " + _mnger.Rcm_rate.ToString();
                                                    ob.InvoiceNo = vainlist.Inv_no;
                                                    ob.Item = vainlist.Item_code;
                                                    ob.Qty = Convert.ToInt32(vainlist.Qty);
                                                    ob.TotValue = vainlist.Tot_amt;
                                                    ob.taxammount = vainlist.Tax_amt;
                                                    ob.discountammount = vainlist.Disc_amt;
                                                    ob.commissioncode = item.Rcd_comm_cd;
                                                    ob.invoicedate = vainlist.Inv_date;
                                                    ob.ProfitCenter = vainlist.Promoter_code;
                                                    ob.stdates = Convert.ToInt32(_mnger.Rcm_st_dates);
                                                    ob.enddates = Convert.ToInt32(_mnger.Rcm_end_dates);
                                                    ob.Settlementdates = setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days;
                                                    if (vainlist.Inv_subtp == "REV")
                                                    {
                                                        ob.isreversal = 1;
                                                    }
                                                    else
                                                    {
                                                        ob.isreversal = 0;
                                                    }
                                                    ob.ItemCommissionRate = _mnger.Rcm_rate;
                                                    ob.Company = vainlist.Com_code;
                                                    invcommsummety1.Add(ob);
                                                    company = vainlist.Com_code;
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    //genarate item commission
                                    if (item.Rcd_comm_val >= 100)
                                    {
                                        ob.ItemCommission = item.Rcd_comm_val * vainlist.Qty;
                                    }
                                    else
                                    {
                                        List<ref_comm_mngr> _norcomm = _financialDAL.GetCommissionExcmngratesNor(item.Rcd_comm_cd, vainlist.Ex_code, setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days);
                                        if (_norcomm != null)
                                        {
                                            if (_norcomm.Count > 0)
                                            {
                                                ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * _norcomm.First().Rcm_rate / 100;
                                            }
                                            else
                                            {
                                                ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * item.Rcd_comm_val / 100;
                                            }
                                        }
                                        else
                                        {
                                            ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * item.Rcd_comm_val / 100;
                                        }
                                    }
                                    if (vainlist.Inv_no == "A2CR-08217")
                                    {
                                        string a = "";
                                    }
                                    ob.ExecCode = vainlist.Ex_code;
                                    ob.ExecName = vainlist.Ex_name;
                                    ob.InvoiceNo = vainlist.Inv_no;
                                    ob.Item = vainlist.Item_code;
                                    ob.Qty = Convert.ToInt32(vainlist.Qty);
                                    ob.TotValue = vainlist.Tot_amt;
                                    ob.taxammount = vainlist.Tax_amt;
                                    ob.discountammount = vainlist.Disc_amt;
                                    ob.commissioncode = item.Rcd_comm_cd;
                                    ob.invoicedate = vainlist.Inv_date;
                                    ob.ProfitCenter = vainlist.Pc_code;
                                    ob.stdates = Convert.ToInt32(item.Rcd_anal1);
                                    ob.enddates = Convert.ToInt32(item.Rcd_anal2);
                                    ob.Settlementdates = setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days;
                                    ob.Company = vainlist.Com_code;
                                    if (vainlist.Inv_subtp == "REV")
                                    {
                                        ob.isreversal = 1;
                                    }
                                    else
                                    {
                                        ob.isreversal = 0;
                                    }
                                    ob.ItemCommissionRate = item.Rcd_comm_val;
                                    invcommsummety1.Add(ob);
                                    company = vainlist.Com_code;

                                    //Manager Exec Code
                                    List<ref_comm_mngr> _execmanager = _financialDAL.GetCommissionExcmngrates(item.Rcd_comm_cd, vainlist.Ex_code);
                                    if (_execmanager != null)
                                    {
                                        if (_execmanager.Count > 0)
                                        {

                                            foreach (var _mnger in _execmanager)
                                            {
                                                ob = new Invoice_Commission();
                                                if ((setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days >= Convert.ToInt32(_mnger.Rcm_st_dates) && setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= Convert.ToInt32(_mnger.Rcm_end_dates)) == false)
                                                {
                                                    if (setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= 0)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    //genarate item commission
                                                    if (_mnger.Rcm_rate >= 100)
                                                    {
                                                        ob.ItemCommission = _mnger.Rcm_rate * vainlist.Qty;
                                                    }
                                                    else
                                                    {
                                                        ob.ItemCommission = (vainlist.Tot_amt - vainlist.Tax_amt) * _mnger.Rcm_rate / 100;
                                                    }


                                                    ob.ExecCode = _mnger.Rcm_mngr_cd;
                                                    ob.ExecName = _mnger.Rcm_anal1 + " of " + vainlist.Ex_code + " Rate: " + _mnger.Rcm_rate.ToString();
                                                    ob.InvoiceNo = vainlist.Inv_no;
                                                    ob.Item = vainlist.Item_code;
                                                    ob.Qty = Convert.ToInt32(vainlist.Qty);
                                                    ob.TotValue = vainlist.Tot_amt;
                                                    ob.taxammount = vainlist.Tax_amt;
                                                    ob.discountammount = vainlist.Disc_amt;
                                                    ob.commissioncode = item.Rcd_comm_cd;
                                                    ob.invoicedate = vainlist.Inv_date;
                                                    ob.ProfitCenter = vainlist.Promoter_code;
                                                    ob.stdates = Convert.ToInt32(_mnger.Rcm_st_dates);
                                                    ob.enddates = Convert.ToInt32(_mnger.Rcm_end_dates);
                                                    ob.Settlementdates = setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days;
                                                    if (vainlist.Inv_subtp == "REV")
                                                    {
                                                        ob.isreversal = 1;
                                                    }
                                                    else
                                                    {
                                                        ob.isreversal = 0;
                                                    }
                                                    ob.ItemCommissionRate = _mnger.Rcm_rate;
                                                    ob.Company = vainlist.Com_code;
                                                    invcommsummety1.Add(ob);
                                                    company = vainlist.Com_code;
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                    //add managerS, DGM ,EXC target commissiom
                    if (recinv != null)
                    {
                        if (recinv.Count > 0)
                        {
                            List<ref_comm_mngr_targt> _trgt_mnager = _financialDAL.GetCommissionExcmngrates(pc);
                            if (_trgt_mnager != null)
                            {
                                if (_trgt_mnager.Count > 0)
                                {
                                    foreach (var _tar in _trgt_mnager)
                                    {
                                        if (_tar.Rcmt_type == "DGM")
                                        {
                                            decimal total = recinv.Sum(a => a.total);
                                            if (total >= _tar.Rcmt_target)
                                            {
                                                Invoice_Commission ob1 = new Invoice_Commission();
                                                ob1.ItemCommission = _tar.Rcmt_rate * total / 100;
                                                ob1.ExecCode = _tar.Rcmt_emp;
                                                ob1.ExecName = "DGM Rate : " + _tar.Rcmt_rate.ToString();
                                                ob1.InvoiceNo = pc + "DGM";
                                                ob1.Item = pc + "DGM";
                                                ob1.Qty = Convert.ToInt32(0);
                                                ob1.TotValue = total;
                                                ob1.taxammount = 0;
                                                ob1.discountammount = 0;
                                                ob1.commissioncode = commicd;
                                                ob1.invoicedate = DateTime.Now;
                                                ob1.ProfitCenter = pc;
                                                ob1.stdates = 0;
                                                ob1.enddates = 0;
                                                ob1.isreversal = 0;
                                                ob1.ItemCommissionRate = _tar.Rcmt_rate;
                                                ob1.Company = company;
                                                ob1.Item = pc + "DGM";
                                                invcommsummety1.Add(ob1);
                                            }
                                        }
                                        if (_tar.Rcmt_type == "PRESALE")
                                        {
                                            foreach (var _list in recinv)
                                            {
                                                Invoice_Commission ob1 = new Invoice_Commission();
                                                ob1.ItemCommission = _tar.Rcmt_rate * _list.total / 100;
                                                ob1.ExecCode = _tar.Rcmt_emp;
                                                ob1.ExecName = " PRESALE : Rate" + _tar.Rcmt_rate.ToString();
                                                ob1.InvoiceNo = _list.invno;
                                                ob1.Item = pc + "PRESALE";
                                                ob1.Qty = Convert.ToInt32(0);
                                                ob1.TotValue = _list.total;
                                                ob1.taxammount = 0;
                                                ob1.discountammount = 0;
                                                ob1.commissioncode = commicd;
                                                ob1.invoicedate = DateTime.Now;
                                                ob1.ProfitCenter = pc;
                                                ob1.stdates = 0;
                                                ob1.enddates = 0;
                                                ob1.isreversal = 0;
                                                ob1.ItemCommissionRate = _tar.Rcmt_rate;
                                                ob1.Company = company;
                                                ob1.Item = pc + "PRESALE";
                                                invcommsummety1.Add(ob1);
                                            }
                                        }
                                        if (_tar.Rcmt_type == "MNG" || _tar.Rcmt_type == "EXC")
                                        {
                                            decimal total = recinv.Where(a => a.Execcode == _tar.Rcmt_anal2).Sum(a => a.total);
                                            if (total >= _tar.Rcmt_target)
                                            {
                                                Invoice_Commission ob1 = new Invoice_Commission();
                                                ob1.ItemCommission = _tar.Rcmt_rate * total / 100;
                                                ob1.ExecCode = _tar.Rcmt_anal2;
                                                ob1.ExecName = _tar.Rcmt_type;
                                                ob1.InvoiceNo = pc + _tar.Rcmt_type;
                                                ob1.Item = "";
                                                ob1.Qty = Convert.ToInt32(0);
                                                ob1.TotValue = total;
                                                ob1.taxammount = 0;
                                                ob1.discountammount = 0;
                                                ob1.commissioncode = commicd;
                                                ob1.invoicedate = DateTime.Now;
                                                ob1.ProfitCenter = pc;
                                                ob1.stdates = 0;
                                                ob1.enddates = 0;
                                                ob1.isreversal = 0;
                                                ob1.ItemCommissionRate = _tar.Rcmt_rate;
                                                ob1.Company = company;
                                                invcommsummety1.Add(ob1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

            }
            #endregion
            #region Value Wise
            else
            {
                if (full_invoicelist != null)
                {
                    foreach (var item in comm_itemdet)
                    {
                        //Add final list
                        foreach (var vainlist in full_invoicelist)
                        {
                            halfrate = false;
                            isratezoro = false;
                            if (vainlist.Inv_no == "A2CR-08217" /*&& vainlist.Inv_type == "WPCD" && item.Rcd_inv_tp == "WPCD"*/)
                            {
                                string a = "";
                            }
                            //check invoice type
                            if (item.Rcd_inv_tp != null && item.Rcd_inv_tp != "")
                            {
                                if (vainlist.Inv_type != item.Rcd_inv_tp)
                                {
                                    continue;
                                }
                            }

                            //check btu range 
                            if (Convert.ToDecimal(item.Rcd_btu_f) > 0 && Convert.ToDecimal(item.Rcd_btu_e) > 0)
                            {
                                int n;
                                MasterItem _mstItm = _generalDAL.GetItemMaster(vainlist.Item_code);
                                bool isNumeric = int.TryParse(_mstItm.Mi_size, out n);
                                if (isNumeric)
                                {
                                    if (Convert.ToDecimal(_mstItm.Mi_size) >= Convert.ToDecimal(item.Rcd_btu_f) && Convert.ToDecimal(_mstItm.Mi_size) <= Convert.ToDecimal(item.Rcd_btu_e))
                                    {
                                        //btu correct code
                                    }
                                    else
                                    {
                                        continue;
                                    }
                                }
                                else
                                {
                                    continue;
                                }
                            }
                            //check sales Target
                            string exccode = vainlist.Ex_code;
                            List<SalesForecastingDetail> targets = _financialDAL.GET_SALES_TARGET(vainlist.Com_code, fromdate, todate, vainlist.Pc_code, vainlist.Ex_code);
                            if (targets == null)
                            {
                                targets = _financialDAL.GET_SALES_TARGET(vainlist.Com_code, fromdate, todate, vainlist.Pc_code, "All");

                            }
                            if (targets != null)
                            {
                                if (targets.Count > 0 && (targets.First().sfd_manager == "" || targets.First().sfd_manager == null))
                                {
                                    if (targets.First().sfd_inv_type == "All" || targets.First().sfd_inv_type == "")
                                    {
                                        var fulltot = total_list.Where(a => a.Ex_code == exccode && a.Pc_code == vainlist.Pc_code).Sum(s => s.Tot_amt);
                                        if (fulltot == 0)
                                        {
                                            fulltot = 0;
                                        }
                                        if (targets.Where(a => a.sfd_exc == exccode).Sum(a => a.Sfd_val) > fulltot)
                                        {
                                            if (targetavgsale != null)
                                            {
                                                if (targetavgsale.Count > 0)
                                                {
                                                    var avgtotal = targetavgsale.Where(a => a.Ex_code == exccode && a.Pc_code == vainlist.Pc_code).Sum(s => s.Tot_amt);
                                                    avgtotal = avgtotal / 3;

                                                    if (targets.First().Sfd_val > avgtotal) continue;
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        var fulltot = total_list.Where(a => a.Ex_code == exccode && a.Pc_code == vainlist.Pc_code && a.Inv_type == targets.First().sfd_inv_type).Sum(s => s.Tot_amt);
                                        if (fulltot == 0)
                                        {
                                            fulltot = 0;
                                        }
                                        if (targets.First().Sfd_val > fulltot)
                                        {
                                            if (targetavgsale != null)
                                            {
                                                if (targetavgsale.Count > 0)
                                                {
                                                    var avgtotal = targetavgsale.Where(a => a.Ex_code == exccode && a.Pc_code == vainlist.Pc_code && a.Inv_type == targets.First().sfd_inv_type).Sum(s => s.Tot_amt);
                                                    avgtotal = avgtotal / 3;

                                                    if (targets.First().Sfd_val > avgtotal) continue;
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                    }

                                }
                                else
                                {
                                    targets = _financialDAL.GET_SALES_TARGET_PC(vainlist.Com_code, fromdate, todate, vainlist.Pc_code, "");
                                    targets = targets.Where(a => a.sfd_exc == exccode).ToList();
                                    List<SalesForecastingDetail> targlistallg = targets.GroupBy(l => new { l.sfd_manager })
    .Select(cl => new SalesForecastingDetail
    {
        sfd_manager = cl.First().sfd_manager,
        Sfd_val = cl.Sum(a => a.Sfd_val)

    }).ToList();
                                    decimal fulltot = 0;
                                    foreach (var targetslist in targets)
                                    {
                                        fulltot = fulltot + total_list.Where(a => a.Ex_code == exccode && a.Pc_code == vainlist.Pc_code && a.Inv_type == targetslist.sfd_inv_type).Sum(s => s.Tot_amt);
                                    }
                                    if (fulltot < targlistallg.First().Sfd_val)
                                    {
                                        continue;
                                    }

                                }
                            }

                            //Genarate Commission rate Using Targets


                            //check settlment date and full settle
                            DateTime setldt = DateTime.Now;
                            decimal settlammount = 0;
                            DateTime _srtndate = DateTime.MinValue;
                            decimal _srtnval = 0;

                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT(vainlist.Inv_no, todate);
                            DataTable srtnsetl = _financialDAL.GET_SETTLMNT_DTSRTN(vainlist.Inv_no, todate);

                            if (srtnsetl != null && srtnsetl.Rows.Count > 0)
                            {
                                _srtnval = Convert.ToDecimal(srtnsetl.Rows[0][1].ToString());
                                _srtndate = Convert.ToDateTime(srtnsetl.Rows[0][0].ToString());
                            }

                            if (setdtdt != null)
                            {
                                if (setdtdt.Rows.Count > 0)
                                {
                                    if (setdtdt.Rows[0][3].ToString() != "")
                                    {
                                        setdtdt.Rows[0][3] = Convert.ToDateTime(setdtdt.Rows[0][3].ToString()).ToString("dd/MMM/yyyy");
                                    }
                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString()) - _srtnval;
                                    if (setldt.Date == vainlist.Inv_date.Date)
                                    {
                                        setldt = setldt.AddDays(1);
                                    }
                                    if (setldt < _srtndate)
                                    {
                                        setldt = _srtndate;
                                    }

                                    if ((vainlist.Tot_amt - settlammount) >= 100 && setldt <= todate)
                                    {
                                        //check is  srn
                                        if (Convert.ToDecimal(setdtdt.Rows[0][4].ToString()) < 100)
                                        {
                                            vainlist.Tot_amt = settlammount;
                                            //added by nuwan 06/dec/2018
                                            itemwise_invoicelist.Where(x => x.Inv_no == vainlist.Inv_no).First().Tot_amt = settlammount;
                                        }
                                        else
                                        {
                                            //check 2.5%
                                            DataTable chkdisc = _financialDAL.Check_Disc_Adj(vainlist.Inv_no);
                                            if (chkdisc != null)
                                            {
                                                if (chkdisc.Rows.Count > 0)
                                                {
                                                    if (chkdisc.Rows[0][0].ToString() == "" || chkdisc.Rows[0][0].ToString() == "0")
                                                    {
                                                        List<sat_settl_discount> disclist = _salesDAL.GetSettleDiscountDetails(vainlist.Com_code, vainlist.Pc_code, vainlist.Inv_type);

                                                        if (disclist != null)
                                                        {
                                                            if (disclist.Count > 0)
                                                            {
                                                                disclist = disclist.Where(a => a.ssd_from_period <= setldt.Date.AddDays(-1).Subtract(vainlist.Inv_date.Date).Days && a.ssd_to_period >= setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days).ToList();
                                                                if (disclist != null)
                                                                {
                                                                    if (disclist.Count > 0)
                                                                    {
                                                                        decimal _arrval = vainlist.Tot_amt * disclist.First().ssd_dis_rate / 100;
                                                                        if ((vainlist.Tot_amt - settlammount - _arrval) > 100)
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        continue;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }



                                    }
                                    else
                                    {
                                        if (setldt.AddDays(-1) > todate)
                                        {
                                            continue;
                                        }
                                    }



                                    if (setdtdt.Rows[0][1].ToString() == "")
                                    {
                                        continue;
                                    }
                                    //



                                    //check deposit date
                                    if (IsValidDateTimeTest(setdtdt.Rows[0][2].ToString()))
                                    {
                                        if (setldt >= Convert.ToDateTime(setdtdt.Rows[0][2].ToString()))
                                        {
                                            setldt = Convert.ToDateTime(setdtdt.Rows[0][2].ToString());
                                        }
                                    }
                                    else if (IsValidDateTimeTest(setdtdt.Rows[0][3].ToString()))
                                    {
                                        if (setldt >= Convert.ToDateTime(setdtdt.Rows[0][3].ToString()))
                                        {
                                            setldt = Convert.ToDateTime(setdtdt.Rows[0][3].ToString());
                                        }
                                    }
                                    if ((vainlist.Pc_code == "29" || vainlist.Pc_code == "162") && Convert.ToInt32(item.Rcd_anal2) > 30)//new memo 29/162
                                    {
                                        if (((setldt.AddDays(-1).Subtract(vainlist.Inv_date.AddDays(-1 * vainlist.Inv_date.Day)).Days >= Convert.ToInt32(item.Rcd_anal1)) && (setldt.AddDays(-1).Subtract(vainlist.Inv_date.AddDays(-1 * vainlist.Inv_date.Day)).Days <= Convert.ToInt32(item.Rcd_anal2))) == false)
                                        {

                                            if (((setldt.AddDays(-1).Subtract(vainlist.Inv_date.AddDays(-1 * vainlist.Inv_date.Day + 30)).Days >= Convert.ToInt32(item.Rcd_anal1)) && (setldt.AddDays(-1).Subtract(vainlist.Inv_date.AddDays(-1 * vainlist.Inv_date.Day + 30)).Days <= Convert.ToInt32(item.Rcd_anal2))) == false)
                                            {
                                                isratezoro = true;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(item.Rcd_anal2) < 30)
                                                {

                                                }
                                                else
                                                {
                                                    halfrate = true;
                                                }

                                            }
                                        }
                                    }
                                    else if (vainlist.Pc_code == "198")
                                    {

                                    }
                                    else
                                    {
                                        if (((setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days >= Convert.ToInt32(item.Rcd_anal1)) && (setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= Convert.ToInt32(item.Rcd_anal2))) == false)
                                        {
                                            if (setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days < 0)
                                            {

                                            }
                                            else
                                            {
                                                if (vainlist.Pc_code == "29" || vainlist.Pc_code == "162")
                                                {
                                                    isratezoro = true;
                                                }
                                                else
                                                {
                                                    continue;
                                                }

                                            }



                                        }

                                    }
                                }
                                else
                                {
                                    continue;
                                }
                            }
                            Invoice_Commission ob = new Invoice_Commission();
                            if (caltype == "GP")
                            {
                                //genarate item commission
                                if (item.Rcd_comm_val >= 100)
                                {
                                    ob.ItemCommission = item.Rcd_comm_val * vainlist.Qty;
                                }
                                else
                                {
                                    List<ref_comm_mngr> _norcomm = _financialDAL.GetCommissionExcmngratesNor(item.Rcd_comm_cd, vainlist.Ex_code, setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days);
                                    if (_norcomm != null)
                                    {
                                        if (_norcomm.Count > 0)
                                        {
                                            ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * _norcomm.First().Rcm_rate / 100;
                                        }
                                        else
                                        {
                                            ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * item.Rcd_comm_val / 100;
                                        }
                                    }
                                    else
                                    {
                                        ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * item.Rcd_comm_val / 100;
                                    }


                                }

                                ob.ExecCode = vainlist.Ex_code;
                                ob.ExecName = vainlist.Ex_name;
                                ob.InvoiceNo = vainlist.Inv_no;
                                ob.Item = vainlist.Item_code;
                                ob.Qty = Convert.ToInt32(vainlist.Qty);
                                ob.TotValue = vainlist.Tot_amt;
                                ob.taxammount = vainlist.Tax_amt;
                                ob.discountammount = vainlist.Disc_amt;
                                ob.commissioncode = item.Rcd_comm_cd;
                                ob.invoicedate = vainlist.Inv_date;
                                ob.ProfitCenter = vainlist.Pc_code;
                                ob.stdates = Convert.ToInt32(item.Rcd_anal1);
                                ob.enddates = Convert.ToInt32(item.Rcd_anal2);
                                ob.ItemCommissionRate = item.Rcd_comm_val;
                                ob.Company = vainlist.Com_code;
                                ob.Settlementdates = setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days;
                                if (vainlist.Inv_subtp == "REV")
                                {
                                    ob.isreversal = 1;
                                }
                                else
                                {
                                    ob.isreversal = 0;
                                }
                                company = vainlist.Com_code;

                                //29/162

                                List<ref_comm_trgt_comm> _29tarlist = _financialDAL.GetTargetCommRates(ob.commissioncode, ob.ExecCode, vainlist.Inv_date.Month, vainlist.Inv_date.Year);
                                if (_29tarlist != null && _29tarlist.Count > 0)
                                {
                                    //decimal _exectotsale = deliverdsaletarget.Where(a => a.Ex_code == ob.ExecCode).Sum(s => s.Tot_amt);
                                    DateTime firstdate = new DateTime(vainlist.Inv_date.Year, vainlist.Inv_date.Month, 1);
                                    DateTime lastdate = firstdate.AddMonths(1).AddDays(-1);
                                    decimal _exectotsale = _financialDAL.GetTotalDeliTarget(vainlist.Com_code, vainlist.Pc_code, firstdate, lastdate, vainlist.Ex_code);
                                    decimal perc = _exectotsale * 100 / _29tarlist.First().rctc_target;
                                    perc = Math.Ceiling(perc);

                                    //Apple Condition || vainlist.Pc_code == "164"
                                    if (vainlist.Pc_code == "122" && vainlist.Tot_amt > 0)
                                    {
                                        //itemwise_invoicelist
                                        List<DELI_SALE_NEW> _applist = itemwise_invoicelist.Where(a => a.Inv_no == vainlist.Inv_no).ToList();
                                        foreach (var app in _applist)
                                        {
                                            if (app.Brand == "APPLE" && item.Rcd_brand == "APPLE")
                                            {
                                                _29tarlist = _29tarlist.Where(a => a.rctc_anal1 == "APPLE").ToList();
                                                _29tarlist = _29tarlist.Where(a => a.rctc_st_per <= perc && a.rctc_end_per >= perc).ToList();
                                                ob.Item = app.Item_code;
                                                ob.ItemCommissionRate = _29tarlist.First().rctc_exc_rate;
                                                ob.TotValue = app.Net_amt;
                                                ob.ItemCommission = (app.Tot_amt - app.Cost_amt - app.Tax_amt) * _29tarlist.First().rctc_exc_rate * item.Rcd_comm_val / 100;
                                                invcommsummety1.Add(ob);
                                            }
                                            else if (app.Brand != "APPLE" && item.Rcd_brand != "APPLE")
                                            {
                                                _29tarlist = _29tarlist.Where(a => a.rctc_anal1 != "APPLE").ToList();
                                                _29tarlist = _29tarlist.Where(a => a.rctc_st_per <= perc && a.rctc_end_per >= perc).ToList();
                                                ob.Item = app.Item_code;
                                                ob.ItemCommissionRate = _29tarlist.First().rctc_exc_rate;
                                                ob.TotValue = app.Net_amt;
                                                ob.ItemCommission = (app.Tot_amt - app.Cost_amt - app.Tax_amt) * _29tarlist.First().rctc_exc_rate * item.Rcd_comm_val / 100;
                                                invcommsummety1.Add(ob);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        _29tarlist = _29tarlist.Where(a => a.rctc_st_per <= perc && a.rctc_end_per >= perc).ToList();

                                        ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * _29tarlist.First().rctc_exc_rate / 100;
                                        invcommsummety1.Add(ob);
                                    }


                                    if (!string.IsNullOrEmpty(_29tarlist.First().rctc_mngr) && _29tarlist.First().rctc_mngr_rate > 0)
                                    {
                                        ob.ExecCode = _29tarlist.First().rctc_mngr;
                                        ob.ExecName = "Manager of " + _29tarlist.First().rctc_exec;
                                        ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * _29tarlist.First().rctc_mngr_rate / 100;
                                        invcommsummety1.Add(ob);
                                    }
                                    else
                                    {
                                        ob.ExecName = "Manager of " + _29tarlist.First().rctc_exec;
                                        ob.ItemCommission = 0;
                                        invcommsummety1.Add(ob);
                                    }


                                }

                                if (vainlist.Pc_code != "29" && vainlist.Pc_code != "162")
                                {
                                    invcommsummety1.Add(ob);
                                }


                                //Manager Exec Code
                                List<ref_comm_mngr> _execmanager = _financialDAL.GetCommissionExcmngrates(item.Rcd_comm_cd, vainlist.Ex_code);
                                if (_execmanager != null)
                                {
                                    if (_execmanager.Count > 0)
                                    {

                                        foreach (var _mnger in _execmanager)
                                        {
                                            ob = new Invoice_Commission();
                                            if ((setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days >= Convert.ToInt32(_mnger.Rcm_st_dates) && setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= Convert.ToInt32(_mnger.Rcm_end_dates)) == false)
                                            {
                                                if (setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= 0)
                                                {

                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //genarate item commission
                                                if (_mnger.Rcm_rate >= 100)
                                                {
                                                    ob.ItemCommission = _mnger.Rcm_rate * vainlist.Qty;
                                                }
                                                else
                                                {
                                                    ob.ItemCommission = (vainlist.Tot_amt - vainlist.Cost_amt - vainlist.Tax_amt) * _mnger.Rcm_rate / 100;
                                                }


                                                ob.ExecCode = _mnger.Rcm_mngr_cd;
                                                ob.ExecName = _mnger.Rcm_anal1 + " of " + vainlist.Ex_code + " Rate: " + _mnger.Rcm_rate.ToString();
                                                ob.InvoiceNo = vainlist.Inv_no;
                                                ob.Item = vainlist.Item_code;
                                                ob.Qty = Convert.ToInt32(vainlist.Qty);
                                                ob.TotValue = vainlist.Tot_amt;
                                                ob.taxammount = vainlist.Tax_amt;
                                                ob.discountammount = vainlist.Disc_amt;
                                                ob.commissioncode = item.Rcd_comm_cd;
                                                ob.invoicedate = vainlist.Inv_date;
                                                ob.ProfitCenter = vainlist.Pc_code;
                                                ob.stdates = Convert.ToInt32(_mnger.Rcm_st_dates);
                                                ob.enddates = Convert.ToInt32(_mnger.Rcm_end_dates);
                                                ob.Settlementdates = setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days;
                                                if (vainlist.Inv_subtp == "REV")
                                                {
                                                    ob.isreversal = 1;
                                                }
                                                else
                                                {
                                                    ob.isreversal = 0;
                                                }
                                                ob.ItemCommissionRate = _mnger.Rcm_rate;
                                                ob.Company = vainlist.Com_code;
                                                invcommsummety1.Add(ob);
                                                company = vainlist.Com_code;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                //genarate item commission
                                if (item.Rcd_comm_val >= 100)
                                {
                                    ob.ItemCommission = item.Rcd_comm_val * vainlist.Qty;
                                }
                                else
                                {
                                    if (vainlist.Pc_code == "198")
                                    {
                                        DateTime firstdate = new DateTime(vainlist.Inv_date.Year, vainlist.Inv_date.Month, 1);
                                        DateTime lastdate = firstdate.AddMonths(1).AddDays(-1);
                                        decimal _exectotsale = _financialDAL.GetTotalDeliTarget(vainlist.Com_code, vainlist.Pc_code, firstdate, lastdate, vainlist.Ex_code);
                                        if (item.Rcd_st_val <= _exectotsale && item.Rcd_end_val >= _exectotsale)
                                        {
                                            ob.ItemCommission = (vainlist.Tot_amt - vainlist.Tax_amt) * item.Rcd_comm_val / 100;
                                        }
                                        else
                                        {
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        List<ref_comm_mngr> _norcomm = _financialDAL.GetCommissionExcmngratesNor(item.Rcd_comm_cd, vainlist.Ex_code, setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days);
                                        if (_norcomm != null)
                                        {
                                            if (_norcomm.Count > 0)
                                            {
                                                ob.ItemCommission = (vainlist.Tot_amt - vainlist.Tax_amt) * _norcomm.First().Rcm_rate / 100;
                                            }
                                            else
                                            {
                                                ob.ItemCommission = (vainlist.Tot_amt - vainlist.Tax_amt) * item.Rcd_comm_val / 100;
                                            }
                                        }
                                        else
                                        {
                                            ob.ItemCommission = (vainlist.Tot_amt - vainlist.Tax_amt) * item.Rcd_comm_val / 100;
                                        }
                                    }
                                }
                                if (vainlist.Inv_no == "A2CR-08217")
                                {
                                    string a = "";
                                }
                                ob.ExecCode = vainlist.Ex_code;
                                ob.ExecName = vainlist.Ex_name;
                                ob.InvoiceNo = vainlist.Inv_no;
                                ob.Item = vainlist.Item_code;
                                ob.Qty = Convert.ToInt32(vainlist.Qty);
                                ob.TotValue = vainlist.Tot_amt;
                                ob.taxammount = vainlist.Tax_amt;
                                ob.discountammount = vainlist.Disc_amt;
                                ob.commissioncode = item.Rcd_comm_cd;
                                ob.invoicedate = vainlist.Inv_date;
                                ob.ProfitCenter = vainlist.Pc_code;
                                ob.stdates = Convert.ToInt32(item.Rcd_anal1);
                                ob.enddates = Convert.ToInt32(item.Rcd_anal2);
                                ob.Company = vainlist.Com_code;
                                ob.Settlementdates = setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days;
                                if (vainlist.Inv_subtp == "REV")
                                {
                                    ob.isreversal = 1;
                                }
                                else
                                {
                                    ob.isreversal = 0;
                                }
                                ob.ItemCommissionRate = item.Rcd_comm_val;
                                if (ob.ExecCode == "BDAL" && (vainlist.Inv_date.Month == 11 || vainlist.Inv_date.Month == 10 || vainlist.Inv_date.Month == 12))
                                {

                                }
                                List<ref_comm_trgt_comm> _29tarlist = _financialDAL.GetTargetCommRates(ob.commissioncode, ob.ExecCode, vainlist.Inv_date.Month, vainlist.Inv_date.Year);
                                if (_29tarlist != null && _29tarlist.Count > 0)
                                {
                                    // decimal _exectotsale = deliverdsaletarget.Where(a => a.Ex_code == ob.ExecCode).Sum(s => s.Tot_amt);
                                    DateTime firstdate = new DateTime(vainlist.Inv_date.Year, vainlist.Inv_date.Month, 1);
                                    DateTime lastdate = firstdate.AddMonths(1).AddDays(-1);
                                    decimal _exectotsale = _financialDAL.GetTotalDeliTarget(vainlist.Com_code, vainlist.Pc_code, firstdate, lastdate, vainlist.Ex_code);
                                    decimal perc = _exectotsale * 100 / _29tarlist.First().rctc_target;
                                    perc = Math.Ceiling(perc);

                                    //Apple Condition
                                    if ((vainlist.Pc_code == "122" || vainlist.Pc_code == "164") && vainlist.Tot_amt > 0)
                                    {
                                        //itemwise_invoicelist
                                        List<DELI_SALE_NEW> _applist = itemwise_invoicelist.Where(a => a.Inv_no == vainlist.Inv_no).ToList();
                                        foreach (var app in _applist)
                                        {
                                            if (app.Brand == "APPLE" && item.Rcd_brand == "APPLE")
                                            {
                                                Invoice_Commission ob2 = new Invoice_Commission();
                                                ob2.commissioncode = ob.commissioncode;
                                                ob2.Company = ob.Company;
                                                ob2.discountammount = ob.discountammount;
                                                ob2.empcat = ob.empcat;
                                                ob2.empcode = ob.empcode;
                                                ob2.EmpCommission = ob.EmpCommission;
                                                ob2.enddates = ob.enddates;
                                                ob2.ExecCode = ob.ExecCode;
                                                ob2.ExecName = ob.ExecName;
                                                ob2.FinalCommission = ob.FinalCommission;
                                                ob2.invoicedate = ob.invoicedate;
                                                ob2.InvoiceNo = ob.InvoiceNo;
                                                ob2.isreversal = ob.isreversal;
                                                ob2.ItemCommission = ob.ItemCommission;
                                                ob2.ItemCommissionRate = ob.ItemCommissionRate;
                                                ob2.ManagerCd = ob.ManagerCd;
                                                ob2.ManagerCommission = ob.ManagerCommission;
                                                ob2.ProfitCenter = ob.ProfitCenter;
                                                ob2.Qty = ob.Qty;
                                                ob2.Settlementdates = ob.Settlementdates;
                                                ob2.stdates = ob.stdates;
                                                ob2.taxammount = app.Tax_amt;
                                                ob2.TotValue = app.Tot_amt - app.Tax_amt;


                                                _29tarlist = _29tarlist.Where(a => a.rctc_anal1 == "APPLE").ToList();
                                                _29tarlist = _29tarlist.Where(a => a.rctc_st_per <= perc && a.rctc_end_per >= perc).ToList();
                                                ob2.Item = app.Item_code;
                                                ob2.ItemCommissionRate = _29tarlist.First().rctc_exc_rate;
                                                ob2.TotValue = app.Tot_amt - app.Tax_amt;
                                                ob2.ItemCommission = (app.Tot_amt - app.Tax_amt) * _29tarlist.First().rctc_exc_rate * item.Rcd_comm_val / 100;
                                                invcommsummety1.Add(ob2);
                                            }
                                            else if (app.Brand != "APPLE" && item.Rcd_brand != "APPLE")
                                            {
                                                Invoice_Commission ob2 = new Invoice_Commission();
                                                ob2.commissioncode = ob.commissioncode;
                                                ob2.Company = ob.Company;
                                                ob2.discountammount = ob.discountammount;
                                                ob2.empcat = ob.empcat;
                                                ob2.empcode = ob.empcode;
                                                ob2.EmpCommission = ob.EmpCommission;
                                                ob2.enddates = ob.enddates;
                                                ob2.ExecCode = ob.ExecCode;
                                                ob2.ExecName = ob.ExecName;
                                                ob2.FinalCommission = ob.FinalCommission;
                                                ob2.invoicedate = ob.invoicedate;
                                                ob2.InvoiceNo = ob.InvoiceNo;
                                                ob2.isreversal = ob.isreversal;
                                                ob2.ItemCommission = ob.ItemCommission;
                                                ob2.ItemCommissionRate = ob.ItemCommissionRate;
                                                ob2.ManagerCd = ob.ManagerCd;
                                                ob2.ManagerCommission = ob.ManagerCommission;
                                                ob2.ProfitCenter = ob.ProfitCenter;
                                                ob2.Qty = ob.Qty;
                                                ob2.Settlementdates = ob.Settlementdates;
                                                ob2.stdates = ob.stdates;
                                                ob2.taxammount = app.Tax_amt;
                                                ob2.TotValue = app.Tot_amt - app.Tax_amt;
                                                _29tarlist = _29tarlist.Where(a => a.rctc_anal1 != "APPLE").ToList();
                                                _29tarlist = _29tarlist.Where(a => a.rctc_st_per <= perc && a.rctc_end_per >= perc).ToList();
                                                ob2.Item = app.Item_code;
                                                ob2.ItemCommissionRate = _29tarlist.First().rctc_exc_rate;
                                                ob2.TotValue = app.Tot_amt - app.Tax_amt;
                                                ob2.ItemCommission = (app.Tot_amt - app.Tax_amt) * _29tarlist.First().rctc_exc_rate * item.Rcd_comm_val / 100;
                                                invcommsummety1.Add(ob2);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        _29tarlist = _29tarlist.Where(a => a.rctc_st_per <= perc && a.rctc_end_per >= perc).ToList();
                                        if (_29tarlist != null && _29tarlist.Count > 0)
                                        {
                                            if (halfrate)
                                            {
                                                _29tarlist.First().rctc_exc_rate = _29tarlist.First().rctc_exc_rate / 2;
                                            }
                                            else
                                            {
                                                if (isratezoro)
                                                {
                                                    _29tarlist.First().rctc_exc_rate = 0;
                                                }
                                            }

                                            ob.ItemCommission = (vainlist.Tot_amt - vainlist.Tax_amt) * _29tarlist.First().rctc_exc_rate / 100;
                                            invcommsummety1.Add(ob);
                                        }
                                        else
                                        {
                                            ob.ItemCommission = 0;
                                            invcommsummety1.Add(ob);
                                        }

                                    }
                                    if (_29tarlist != null && _29tarlist.Count > 0 && !string.IsNullOrEmpty(_29tarlist.First().rctc_mngr) && _29tarlist.First().rctc_mngr_rate > 0)
                                    {
                                        Invoice_Commission ob2 = new Invoice_Commission();
                                        ob2.commissioncode = ob.commissioncode;
                                        ob2.Company = ob.Company;
                                        ob2.discountammount = ob.discountammount;
                                        ob2.empcat = ob.empcat;
                                        ob2.empcode = ob.empcode;
                                        ob2.EmpCommission = ob.EmpCommission;
                                        ob2.enddates = ob.enddates;
                                        ob2.ExecCode = ob.ExecCode;
                                        ob2.ExecName = ob.ExecName;
                                        ob2.FinalCommission = ob.FinalCommission;
                                        ob2.invoicedate = ob.invoicedate;
                                        ob2.InvoiceNo = ob.InvoiceNo;
                                        ob2.isreversal = ob.isreversal;
                                        ob2.Item = ob.Item;
                                        ob2.ItemCommission = ob.ItemCommission;
                                        ob2.ItemCommissionRate = ob.ItemCommissionRate;
                                        ob2.ManagerCd = ob.ManagerCd;
                                        ob2.ManagerCommission = ob.ManagerCommission;
                                        ob2.ProfitCenter = ob.ProfitCenter;
                                        ob2.Qty = ob.Qty;
                                        ob2.Settlementdates = ob.Settlementdates;
                                        ob2.stdates = ob.stdates;
                                        ob2.taxammount = ob.taxammount;
                                        ob2.TotValue = ob.TotValue;
                                        ob2.ExecCode = _29tarlist.First().rctc_mngr;
                                        ob2.ExecName = "Manager of " + _29tarlist.First().rctc_exec;
                                        ob2.ItemCommission = (vainlist.Tot_amt - vainlist.Tax_amt) * _29tarlist.First().rctc_mngr_rate / 100;
                                        invcommsummety1.Add(ob2);
                                    }


                                }
                                company = vainlist.Com_code;
                                if (vainlist.Pc_code != "29" && vainlist.Pc_code != "162" && vainlist.Pc_code != "122" && vainlist.Pc_code != "164")
                                {
                                    invcommsummety1.Add(ob);
                                }

                                //Manager Exec Code
                                List<ref_comm_mngr> _execmanager = _financialDAL.GetCommissionExcmngrates(item.Rcd_comm_cd, vainlist.Ex_code);
                                if (_execmanager != null)
                                {
                                    if (_execmanager.Count > 0)
                                    {

                                        foreach (var _mnger in _execmanager)
                                        {
                                            ob = new Invoice_Commission();
                                            if ((setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days >= Convert.ToInt32(_mnger.Rcm_st_dates) && setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= Convert.ToInt32(_mnger.Rcm_end_dates)) == false)
                                            {
                                                if (setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days <= 0)
                                                {

                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                //genarate item commission
                                                if (_mnger.Rcm_rate >= 100)
                                                {
                                                    ob.ItemCommission = _mnger.Rcm_rate * vainlist.Qty;
                                                }
                                                else
                                                {
                                                    ob.ItemCommission = (vainlist.Tot_amt - vainlist.Tax_amt) * _mnger.Rcm_rate / 100;
                                                }


                                                ob.ExecCode = _mnger.Rcm_mngr_cd;
                                                ob.ExecName = _mnger.Rcm_anal1 + " of " + vainlist.Ex_code + " Rate: " + _mnger.Rcm_rate.ToString();

                                                ob.InvoiceNo = vainlist.Inv_no;
                                                ob.Item = vainlist.Item_code;
                                                ob.Qty = Convert.ToInt32(vainlist.Qty);
                                                ob.TotValue = vainlist.Tot_amt;
                                                ob.taxammount = vainlist.Tax_amt;
                                                ob.discountammount = vainlist.Disc_amt;
                                                ob.commissioncode = item.Rcd_comm_cd;
                                                ob.invoicedate = vainlist.Inv_date;
                                                ob.ProfitCenter = vainlist.Pc_code;
                                                ob.stdates = Convert.ToInt32(_mnger.Rcm_st_dates);
                                                ob.enddates = Convert.ToInt32(_mnger.Rcm_end_dates);
                                                ob.Settlementdates = setldt.AddDays(-1).Subtract(vainlist.Inv_date).Days;
                                                if (vainlist.Inv_subtp == "REV")
                                                {
                                                    ob.isreversal = 1;
                                                }
                                                else
                                                {
                                                    ob.isreversal = 0;
                                                }
                                                ob.ItemCommissionRate = _mnger.Rcm_rate;
                                                ob.Company = vainlist.Com_code;

                                                //29/162 pc


                                                invcommsummety1.Add(ob);
                                                company = vainlist.Com_code;
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                }
                //add managerS, DGM ,EXC target commissiom
                if (recinv != null)
                {
                    if (recinv.Count > 0)
                    {
                        List<ref_comm_mngr_targt> _trgt_mnager = _financialDAL.GetCommissionExcmngrates(pc);
                        if (_trgt_mnager != null)
                        {
                            if (_trgt_mnager.Count > 0)
                            {
                                foreach (var _tar in _trgt_mnager)
                                {
                                    if (_tar.Rcmt_type == "DGM")
                                    {
                                        List<ref_comm_mngr_targt> _trgt_dgm = _trgt_mnager.Where(a => a.Rcmt_type == "DGM").ToList();
                                        decimal total = recinv.Sum(a => a.total);
                                        if (total >= _tar.Rcmt_target && total <= Convert.ToDecimal(_tar.Rcmt_anal2))
                                        {
                                            Invoice_Commission ob1 = new Invoice_Commission();
                                            ob1.ItemCommission = _tar.Rcmt_rate * total / 100;
                                            ob1.ExecCode = _tar.Rcmt_emp;
                                            ob1.ExecName = " DGM Target:" + _tar.Rcmt_target.ToString() + " Rate:" + _tar.Rcmt_rate.ToString();
                                            ob1.InvoiceNo = pc + "DGM";
                                            ob1.Item = pc + "DGM";
                                            ob1.Qty = Convert.ToInt32(0);
                                            ob1.TotValue = total;
                                            ob1.taxammount = 0;
                                            ob1.discountammount = 0;
                                            ob1.commissioncode = commicd;
                                            ob1.invoicedate = DateTime.Now;
                                            ob1.ProfitCenter = pc;
                                            ob1.stdates = 0;
                                            ob1.enddates = 0;
                                            ob1.isreversal = 0;
                                            ob1.ItemCommissionRate = _tar.Rcmt_rate;
                                            ob1.Company = company;
                                            ob1.Item = pc + "DGM";
                                            invcommsummety1.Add(ob1);
                                        }
                                    }
                                    if (_tar.Rcmt_type == "PRESALE")
                                    {
                                        foreach (var _list in recinv)
                                        {
                                            decimal _invamt = 0;
                                            if (_list.invno == "A2CR-08217")
                                            {
                                                string a = "";
                                            }
                                            var fullysettlecount = invcommsummety1.Where(a => a.InvoiceNo == _list.invno).Count();
                                            if (fullysettlecount == 0)
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                decimal invamt = invcommsummety1.Where(a => a.InvoiceNo == _list.invno).Sum(a => a.TotValue - a.taxammount);
                                                _invamt = invamt;
                                            }

                                            Invoice_Commission ob1 = new Invoice_Commission();
                                            ob1.ItemCommission = _tar.Rcmt_rate * _invamt / 100;
                                            ob1.ExecCode = _tar.Rcmt_emp;
                                            ob1.ExecName = " PRESALE : Rate" + _tar.Rcmt_rate.ToString();
                                            ob1.InvoiceNo = _list.invno;
                                            ob1.Item = pc + "PRESALE";
                                            ob1.Qty = Convert.ToInt32(0);
                                            ob1.TotValue = _list.total;
                                            ob1.taxammount = 0;
                                            ob1.discountammount = 0;
                                            ob1.commissioncode = commicd;
                                            ob1.invoicedate = DateTime.Now;
                                            ob1.ProfitCenter = pc;
                                            ob1.stdates = 0;
                                            ob1.enddates = 0;
                                            ob1.isreversal = 0;
                                            ob1.ItemCommissionRate = _tar.Rcmt_rate;
                                            ob1.Company = company;
                                            ob1.Item = pc + "PRESALE";
                                            if (ob1.InvoiceNo != null && ob1.InvoiceNo != "")
                                            {
                                                invcommsummety1.Add(ob1);
                                            }

                                        }
                                    }
                                    if (_tar.Rcmt_type == "MNG" || _tar.Rcmt_type == "EXC")
                                    {
                                        decimal total = recinv.Where(a => a.Execcode == _tar.Rcmt_anal2).Sum(a => a.total);
                                        if (total >= _tar.Rcmt_target)
                                        {
                                            Invoice_Commission ob1 = new Invoice_Commission();
                                            ob1.ItemCommission = _tar.Rcmt_rate * total / 100;
                                            ob1.ExecCode = _tar.Rcmt_anal2;
                                            ob1.ExecName = _tar.Rcmt_type + " Target :" + _tar.Rcmt_target.ToString() + " Rate:" + _tar.Rcmt_rate;
                                            ob1.InvoiceNo = pc + _tar.Rcmt_type;
                                            ob1.Item = "";
                                            ob1.Qty = Convert.ToInt32(0);
                                            ob1.TotValue = total;
                                            ob1.taxammount = 0;
                                            ob1.discountammount = 0;
                                            ob1.commissioncode = commicd;
                                            ob1.invoicedate = DateTime.Now;
                                            ob1.ProfitCenter = pc;
                                            ob1.stdates = 0;
                                            ob1.enddates = 0;
                                            ob1.isreversal = 0;
                                            ob1.ItemCommissionRate = _tar.Rcmt_rate;
                                            ob1.Company = company;
                                            invcommsummety1.Add(ob1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion
            #region overide
            if (comm_emp != null)
            {
                foreach (var emps in comm_emp)
                {
                    if (emps.Rce_anal1 == "ACAC")
                    {

                    }
                    foreach (var final in invcommsummety1)
                    {
                        if (final.InvoiceNo == "A2CR-08217")
                        {
                            string a = "";
                        }
                        if (emps.Rce_st_days == 0 && emps.Rce_end_days == 0)
                        {
                            if (emps.Rce_anal2 == "0")
                            {
                                if (Convert.ToDecimal(emps.Rce_commission) >= 100)
                                {

                                    Employee _employee = new Employee();
                                    _employee = _generalDAL.GetEmployeeMaster(final.ExecCode.ToUpper(), final.Company);
                                    MasterItem _masterItem = _inventoryDAL.GetItem(final.Company, final.Item);
                                    if (_employee != null)
                                    {
                                        if (_masterItem.Mi_cate_3 == "INV" && emps.Rce_btu_inv == "1" && emps.Rce_anal1 == _employee.ESEP_supwise_cd)
                                        {
                                            final.EmpCommission = final.EmpCommission + Convert.ToDecimal(emps.Rce_commission) * final.Qty;
                                            final.empcode = emps.Rce_anal1;
                                            final.empcat = emps.Rce_emp_type;
                                            final.FinalCommission = final.ItemCommission;
                                        }
                                        else if (_masterItem.Mi_cate_3 != "INV" && emps.Rce_btu_inv == "0" && emps.Rce_anal1 == _employee.ESEP_supwise_cd)
                                        {
                                            final.EmpCommission = final.EmpCommission + Convert.ToDecimal(emps.Rce_commission) * final.Qty;
                                            final.empcode = emps.Rce_anal1;
                                            final.empcat = emps.Rce_emp_type;
                                            final.FinalCommission = final.ItemCommission;
                                        }
                                        else if (emps.Rce_anal1 == _employee.ESEP_supwise_cd)
                                        {
                                            final.empcode = emps.Rce_anal1;
                                            final.empcat = emps.Rce_emp_type;
                                            final.FinalCommission = final.ItemCommission;
                                            continue;
                                        }
                                    }





                                }
                                else
                                {
                                    final.EmpCommission = final.EmpCommission + (final.ItemCommission * Convert.ToDecimal(emps.Rce_commission) / final.ItemCommissionRate);
                                    final.empcode = emps.Rce_anal1;
                                    final.empcat = emps.Rce_emp_type;
                                    final.FinalCommission = final.ItemCommission;
                                }


                            }
                            else
                            {
                                if (emps.Rce_commission >= 100)
                                {

                                    Employee _employee = new Employee();
                                    _employee = _generalDAL.GetEmployeeMaster(final.ExecCode.ToUpper(), final.Company);

                                    MasterItem _masterItem = _inventoryDAL.GetItem(final.Company, final.Item);
                                    if (_employee != null)
                                    {
                                        if (_masterItem.Mi_cate_3 == "INV" && emps.Rce_btu_inv == "1" && emps.Rce_anal1 == _employee.ESEP_supwise_cd)
                                        {
                                            final.EmpCommission = final.EmpCommission + emps.Rce_commission * final.Qty;
                                            final.FinalCommission = final.ItemCommission - final.EmpCommission;
                                            final.empcode = emps.Rce_anal1;
                                            final.empcat = emps.Rce_emp_type;
                                        }
                                        else if (_masterItem.Mi_cate_3 != "INV" && emps.Rce_btu_inv == "0" && emps.Rce_anal1 == _employee.ESEP_supwise_cd)
                                        {
                                            final.EmpCommission = final.EmpCommission + emps.Rce_commission * final.Qty;
                                            final.FinalCommission = final.ItemCommission - final.EmpCommission;
                                            final.empcode = emps.Rce_anal1;
                                            final.empcat = emps.Rce_emp_type;
                                        }
                                        else
                                        {
                                            final.empcode = emps.Rce_anal1;
                                            final.empcat = emps.Rce_emp_type;
                                            final.FinalCommission = final.ItemCommission;
                                            continue;
                                        }
                                    }


                                }
                                else
                                {
                                    final.EmpCommission = final.EmpCommission + final.ItemCommission * emps.Rce_commission / 100;
                                    final.FinalCommission = final.ItemCommission - final.EmpCommission;
                                    final.empcode = emps.Rce_anal1;
                                    final.empcat = emps.Rce_emp_type;
                                }


                            }

                        }
                        else if (emps.Rce_st_days == final.stdates && emps.Rce_end_days == final.enddates)
                        {
                            if (emps.Rce_anal2 == "0")
                            {
                                if (Convert.ToDecimal(emps.Rce_commission) >= 100)
                                {
                                    final.EmpCommission = final.EmpCommission = Convert.ToDecimal(emps.Rce_commission);
                                }
                                else
                                {
                                    final.EmpCommission = final.EmpCommission + (final.ItemCommission * Convert.ToDecimal(emps.Rce_commission) / final.ItemCommissionRate);
                                }

                                final.empcode = emps.Rce_anal1;
                                final.empcat = emps.Rce_emp_type;
                                final.FinalCommission = final.ItemCommission;
                            }
                            else
                            {
                                final.EmpCommission = final.EmpCommission + final.ItemCommission * emps.Rce_commission / 100;
                                final.FinalCommission = final.ItemCommission - final.EmpCommission;
                                final.empcode = emps.Rce_anal1;
                                final.empcat = emps.Rce_emp_type;
                            }
                        }

                    }
                }
            }
            else
            {
                foreach (var final in invcommsummety1)
                {
                    final.EmpCommission = 0;
                    final.FinalCommission = final.ItemCommission;
                    List<ref_comm_spc_ovr> _spc_ovt = _financialDAL.GetSpecialOverrideManagers(pc, final.ExecCode);
                    if (_spc_ovt != null)
                    {
                        if (_spc_ovt.Count > 0)
                        {
                            _spc_ovt = _spc_ovt.Where(a => a.Rcso_st_dt <= final.Settlementdates && a.Rcso_end_dt >= final.Settlementdates).ToList();
                        }
                    }

                    if (_spc_ovt != null)
                    {
                        if (_spc_ovt.Count > 0)
                        {
                            final.EmpCommission = final.EmpCommission + final.ItemCommission * _spc_ovt.First().Rcso_rate / 100;
                            final.empcode = _spc_ovt.First().Rcso_mngr;
                            final.empcat = "Manager";
                            final.FinalCommission = final.ItemCommission - final.EmpCommission;
                        }
                    }

                }


            }
            #endregion
            invcommsummety = invcommsummety1;
            invcommfull = full_invoicelist;

        }
        public bool IsValidDateTimeTest(string dateTime)
        {
            string[] formats = { "MM/dd/yy", "dd/MM/yy", "MM/dd/yyyy", "dd/MM/yyyy", "dd/MMM/yyyy", "yyyyMMddHHmmss", "dd MMM yyyy" };
            dateTime = dateTime.Replace(@"–", "/");
            dateTime = dateTime.Replace(@"-", "/");
            DateTime parsedDateTime;
            return DateTime.TryParseExact(dateTime, formats, new CultureInfo("en-US"),
                                           DateTimeStyles.None, out parsedDateTime);
        }
        //Lakshan 22 Feb 2017
        public ImportsCostHeader GetImpCstHdrForGrn(string _docNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetImpCstHdrForGrn(_docNo);
        }
        //Subodana 2017/02/23
        public int SaveCommissionInvoices(List<Invoice_Commission> _inv, List<Invoice_Commission> _emp, DateTime fromdate, DateTime todate, out string err)
        {
            err = "";
            int result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                var resultlist = _inv.GroupBy(test => test.ProfitCenter)
                   .Select(grp => grp.First())
                   .ToList();

                foreach (var _pclist in resultlist)
                {
                    //delete sp_save_comm_inv
                    result = _financialDAL.DeleteCommissionTrackData(_pclist.Company, _pclist.ProfitCenter, fromdate, todate);
                }

                foreach (var list in _inv)
                {
                    if (list.InvoiceNo == "A2CR-08217")
                    {
                        string a = "";
                    }
                    result = _financialDAL.SaveCommissionInvoices(list, fromdate, todate);
                }
                if (_emp != null)
                {
                    foreach (var list in _emp)
                    {

                        if (list.InvoiceNo == "A2CR-08217")
                        {
                            string a = "";
                        }
                        result = _financialDAL.SaveCommissionEmployee(list, fromdate, todate);
                    }
                }
                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                result = -1;
            }
            return result;
        }
        //subodana
        public int UpdateCusdecEntryData(string entry, string cusentry, DateTime cusentrydate)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.UpdateCusdecEntryData(entry, cusentry, cusentrydate);
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return effect;
        }

        //Isuru 2017/03/28
        public DataTable GET_Commission_Details(DateTime fdate, DateTime tdate, string commcode, string userId, string PC)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GET_Commission_Details(fdate, tdate, commcode, userId, PC);

        }
        //Dilshan 2017/03/28
        public DataTable GET_Bonus_Details(DateTime fdate, DateTime tdate, string commcode, string userId, string PC)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GET_Bonus_Details(fdate, tdate, commcode, userId, PC);

        }
        // Udaya 05/04/2017
        public string GetAndUpdateAutoNo(string _module, Int16? _direction, string _startChar, string _catType, string _catCode, DateTime? _modifyDate, Int32? _year)
        {
            int effect = 0;
            string _RccNo = string.Empty;
            MasterAutoNumber _masterAutoNumber = new MasterAutoNumber();
            _masterAutoNumber.Aut_moduleid = _module;
            _masterAutoNumber.Aut_direction = _direction;
            _masterAutoNumber.Aut_start_char = _startChar;
            _masterAutoNumber.Aut_cate_tp = _catType;
            _masterAutoNumber.Aut_cate_cd = _catCode;
            _masterAutoNumber.Aut_modify_dt = _modifyDate;
            _masterAutoNumber.Aut_year = _year;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
            _RccNo = _masterAutoNumber.Aut_cate_cd + '-' + _masterAutoNumber.Aut_start_char + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
            effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
            _financialDAL.ConnectionClose();
            return _RccNo;
        }
        public DataTable getInvoiceValues(string commcode, string proCenter, string invNo)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.getInvoiceValues(commcode, proCenter, invNo);

        }
        // Udaya 06/04/2017
        public Int32 saveCreditNote(List<CreditNoteHdr> _CreditNoteHdr, List<CreditNotes> _CreditNotes, MasterAutoNumber mastAutoNo, out string doc)
        {
            Int32 _effect = 0;
            doc = string.Empty;
            int chk = _CreditNotes.FindIndex(f => f.CreditNoteNo == null || f.CreditNoteNo == "");
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                if (_CreditNotes != null)
                {
                    if (_CreditNotes != null)
                    {
                        if (mastAutoNo != null)
                        {
                            if (chk >= 0)
                            {
                                Int32 _autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                                doc = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                //_CreditNotes.Add(new CreditNotes() {CreditNoteNo = doc});
                                _CreditNoteHdr.FirstOrDefault().CreditNoteNo = doc;
                                _effect = _financialDAL.UpdateAutoNumber(mastAutoNo);
                            }
                        }
                        int sline = 1;
                        foreach (CreditNoteHdr _CreNoteHdr in _CreditNoteHdr)
                        {
                            _effect = _financialDAL.saveCreditNoteHdr(_CreNoteHdr);
                        }
                        foreach (CreditNotes _CreNote in _CreditNotes)
                        {
                            _CreNote.CreditNoteNo = doc;
                            _effect = _financialDAL.saveCreditNote(_CreNote);
                            sline++;
                        }
                    }
                }
                _financialDAL.TransactionCommit();
                _effect = 1;
            }
            catch (Exception err)
            {
                _effect = -1;
                _financialDAL.TransactionRollback();
            }
            return _effect;
        }
        //Udaya 07/04/2017
        public DataTable getComDetails(string commcode)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.getComDetails(commcode);
        }
        //Udaya 07/04/2017
        public int CreditNoteCancel(string invoiceNo, decimal amt, string sessiomModBy, DateTime sessiomModDate, string sessionId)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.CreditNoteCancel(invoiceNo, amt, sessiomModBy, sessiomModDate, sessionId);
            _financialDAL.ConnectionClose();
            return effect;
        }
        //subodana
        public List<ref_comm_target> GetCommissionTargetDetails(string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCommissionTargetDetails(doc);
        }
        //subodana
        public List<ref_comm_target_ovrt> GetCommissionTargetOvtDetails(string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCommissionTargetOvtDetails(doc);
        }
        //subodana
        public List<ref_comm_collect_ovrt> GetCommissionCollectionOvtDetails(string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCommissionCollectionOvtDetails(doc);
        }
        //subodana
        public List<sat_settl_discount> GetSettleDiscountDetails(string com, string pc, string invtype)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSettleDiscountDetails(com, pc, invtype);
        }
        public List<HsCode> GetHSCodeList(string hs)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetHSCodeList(hs);
        }
        // Udaya 11/04/2017
        public Int32 saveDebitNote(List<DebitNoteHdr> _DebitNoteHdr, List<DebitNotes> _DebitNotes, MasterAutoNumber mastAutoNo, out string doc)
        {
            Int32 _effect = 0;
            doc = string.Empty;
            var _doc = string.Empty;
            int chk = _DebitNotes.FindIndex(f => f.DebitNoteNo == null || f.DebitNoteNo == "");
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                if (_DebitNotes != null)
                {
                    if (mastAutoNo != null)
                    {
                        if (chk >= 0)
                        {
                            Int32 _autoNo = _financialDAL.GetAutoNumber(mastAutoNo.Aut_moduleid, mastAutoNo.Aut_direction, mastAutoNo.Aut_start_char, mastAutoNo.Aut_cate_tp, mastAutoNo.Aut_cate_cd, mastAutoNo.Aut_modify_dt, mastAutoNo.Aut_year).Aut_number;
                            _doc = mastAutoNo.Aut_cate_cd + "-" + mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            //_CreditNotes.Add(new CreditNotes() {CreditNoteNo = doc});
                            _DebitNoteHdr.ForEach(r => r.DebitNoteNo = _doc);
                            _effect = _financialDAL.UpdateAutoNumber(mastAutoNo);
                            doc = _doc;
                        }
                    }

                    int sline = 1;
                    foreach (DebitNoteHdr _DbtNteHdr in _DebitNoteHdr)
                    {
                        _effect = _financialDAL.saveDebitNoteHdr(_DbtNteHdr);
                    }
                    foreach (DebitNotes _DbtNote in _DebitNotes)
                    {
                        _DbtNote.DebitNoteNo = doc;
                        _effect = _financialDAL.saveDebitNote(_DbtNote);
                        sline++;
                    }
                }
                _financialDAL.TransactionCommit();
                _effect = 1;
            }
            catch (Exception err)
            {
                _effect = -1;
                _financialDAL.TransactionRollback();
            }
            return _effect;
        }
        //Udaya 11/04/2017
        public int DebitNoteCancel(string invoiceNo, decimal amt, string sessiomModBy, DateTime sessiomModDate, string sessionId)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.DebitNoteCancel(invoiceNo, amt, sessiomModBy, sessiomModDate, sessionId);
            _financialDAL.ConnectionClose();
            return effect;
        }

        public int PanaltyChargeProcess(string com, string pc, string invtype, string user, string session, DateTime Date, out string docs)
        {
            try
            {
                _financialDAL = new FinancialDAL();
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();
                _financialDAL.ConnectionOpen();
                _salesDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                _salesDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                docs = "";
                int effect = 0;
                int i = 0;
                int k = 0;
                List<InvoiceHeader> invhdlist = _financialDAL.GET_OUTSTNDING_INVS(com, pc, invtype);
                foreach (var hdr in invhdlist)
                {
                    i++;
                    List<sat_settl_discount> disclist = _salesDAL.GetPanaltyDisDetails(hdr.Sah_com, hdr.Sah_pc, hdr.Sah_inv_tp);

                    if (disclist != null)
                    {
                        if (disclist.Count > 0)
                        {
                            DataTable stdates = _financialDAL.GET_SETTLMNT_DT(hdr.Sah_inv_no, DateTime.Now.Date);
                            if (stdates != null)
                            {
                                if (stdates.Rows.Count > 0)
                                {
                                    if (stdates.Rows[0][1].ToString() == "")
                                    {
                                        continue;
                                    }
                                    DateTime setldt = Convert.ToDateTime(stdates.Rows[0][0].ToString());
                                    decimal settlammount = Convert.ToDecimal(stdates.Rows[0][1].ToString());
                                    if (Math.Abs(hdr.Sah_anal_7 - hdr.Sah_anal_8) > 10 && DateTime.Now.Date.AddDays(-1).Subtract(hdr.Sah_dt).Days >= disclist.First().ssd_from_period && DateTime.Now.Date.AddDays(-1).Subtract(hdr.Sah_dt).Days <= disclist.First().ssd_to_period)
                                    {
                                        List<Penalty_Invoice> loglist = _financialDAL.GET_PNLTYLOG_INVS(hdr.Sah_inv_no, DateTime.Now.Date);
                                        if (loglist != null)
                                        {
                                            if (loglist.Count > 0)
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                Penalty_Invoice obpnl = new Penalty_Invoice();
                                                obpnl.spil_cre_by = user;
                                                obpnl.spil_cre_dt = DateTime.Now;
                                                obpnl.spil_date = Date;
                                                obpnl.spil_from_dt = disclist.First().ssd_from_period;
                                                obpnl.spil_inv_no = hdr.Sah_inv_no;
                                                obpnl.spil_rate = disclist.First().ssd_dis_rate;
                                                obpnl.spil_session = session;
                                                obpnl.spil_to_date = disclist.First().ssd_to_period;

                                                effect = _financialDAL.SavePenaltyInvoiceLog(obpnl);
                                            }
                                        }
                                        else
                                        {
                                            Penalty_Invoice obpnl = new Penalty_Invoice();
                                            obpnl.spil_cre_by = user;
                                            obpnl.spil_cre_dt = DateTime.Now;
                                            obpnl.spil_date = Date;
                                            obpnl.spil_from_dt = disclist.First().ssd_from_period;
                                            obpnl.spil_inv_no = hdr.Sah_inv_no;
                                            obpnl.spil_rate = disclist.First().ssd_dis_rate;
                                            obpnl.spil_session = session;
                                            obpnl.spil_to_date = disclist.First().ssd_to_period;

                                            effect = _financialDAL.SavePenaltyInvoiceLog(obpnl);
                                        }
                                        decimal _revValue = 0;
                                        Int32 _invoiceLine = 1;
                                        // List<InvoiceItem> items = _salesDAL.GetRegAllowInvItem(com, hdr.Sah_pc, hdr.Sah_inv_no);
                                        MasterAutoNumber _invoiceAuto = new MasterAutoNumber();
                                        _invoiceAuto.Aut_cate_cd = hdr.Sah_pc;
                                        _invoiceAuto.Aut_cate_tp = "PC";
                                        _invoiceAuto.Aut_direction = 0;
                                        _invoiceAuto.Aut_modify_dt = null;
                                        _invoiceAuto.Aut_moduleid = "DEBT";
                                        _invoiceAuto.Aut_number = 1;
                                        _invoiceAuto.Aut_start_char = "DEBT";
                                        _invoiceAuto.Aut_year = null;

                                        MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                                        string InvoiceNo = _invoiceAuto.Aut_cate_cd + "-" + _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                                        _inventoryDAL.UpdateAutoNumber(_invoiceAuto);
                                        //Generate SeqNo
                                        Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();

                                        //Set HDR Data
                                        hdr.Sah_seq_no = InvoiceSeqNo;
                                        hdr.Sah_ref_doc = hdr.Sah_inv_no;
                                        hdr.Sah_inv_no = InvoiceNo;
                                        hdr.Sah_inv_tp = "DEBT";
                                        hdr.Sah_dt = Date;
                                        hdr.Sah_stus = "A";
                                        hdr.Sah_anal_7 = (hdr.Sah_anal_7 - hdr.Sah_anal_8) * disclist.First().ssd_dis_rate / 100;
                                        hdr.Sah_anal_8 = 0;


                                        List<InvoiceItem> invitem = new List<InvoiceItem>();
                                        InvoiceItem ob = new InvoiceItem();
                                        ob.Sad_alt_itm_cd = "PENALTY";
                                        ob.Sad_alt_itm_desc = "PENALTY";
                                        ob.Sad_chk_soa = 0;
                                        ob.Sad_comm_amt = 0;
                                        ob.Sad_conf_line = 1;
                                        ob.Sad_conf_no = "";
                                        ob.Sad_dis_line = 1;
                                        //ob.Sad_dis_seq = InvoiceSeqNo;
                                        ob.Sad_dis_type = "";
                                        ob.Sad_disc_amt = 0;
                                        ob.Sad_disc_rt = 0;
                                        ob.Sad_do_qty = 1;
                                        ob.Sad_fws_ignore_qty = 1;
                                        ob.Sad_inv_no = "";
                                        ob.Sad_is_promo = false;
                                        ob.Sad_isapp = false;
                                        ob.Sad_iscovernote = false;
                                        ob.Sad_itm_cd = "PENALTY";
                                        ob.Sad_itm_line = 1;
                                        ob.Sad_itm_seq = 0;
                                        ob.Sad_itm_stus = "GOD";
                                        ob.Sad_itm_stus_desc = "GOOD";
                                        ob.Sad_itm_tax_amt = 0;
                                        ob.Sad_itm_tp = "";
                                        ob.Sad_job_line = 1;
                                        ob.Sad_job_no = "";
                                        ob.Sad_merge_itm = "";
                                        ob.Sad_original_itemcd = "PENALTY";
                                        ob.Sad_outlet_dept = "";
                                        ob.Sad_pb_lvl = "";
                                        //  ob.Sad_pb_price = "";
                                        ob.Sad_pbook = "";
                                        ob.Sad_pc = hdr.Sah_pc;
                                        // ob.Sad_print_stus = 0;
                                        ob.Sad_promo_cd = "";
                                        ob.Sad_qty = 1;
                                        ob.Sad_res_line_no = 0;
                                        ob.Sad_res_no = "";
                                        ob.sad_resupdate = 0;
                                        ob.Sad_seq = 0;
                                        ob.Sad_seq_no = 0;
                                        ob.Sad_sim_itm_cd = "PENALTY";
                                        ob.Sad_srn_qty = 1;
                                        ob.Sad_tot_amt = hdr.Sah_anal_7;
                                        ob.Sad_trd_svc_chrg = 0;
                                        ob.Sad_unit_amt = hdr.Sah_anal_7;
                                        ob.Sad_unit_rt = hdr.Sah_anal_7;
                                        ob.Sad_uom = "";
                                        ob.Sad_warr_based = false;
                                        ob.Sad_warr_period = 0;
                                        ob.Sad_warr_remarks = "";
                                        ob.Sad_inv_no = hdr.Sah_inv_no;
                                        ob.Sad_seq = InvoiceSeqNo;
                                        invitem.Add(ob);
                                        k++;

                                        //Save Invoice Header
                                        effect = _salesDAL.SaveSalesHeader(hdr);
                                        //Save Invoice Items
                                        foreach (InvoiceItem _itm in invitem)
                                        {
                                            List<InvoiceItemTax> _itmTax = new List<InvoiceItemTax>();
                                            List<SaleCommission> _tmpComm = new List<SaleCommission>();
                                            _itmTax = _salesDAL.GetInvItemTax(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_itm_line);

                                            // decimal _fwsQty = _itm.Sad_srn_qty - _itm.Sad_fws_ignore_qty;
                                            decimal _fwsQty = _itm.Sad_fws_ignore_qty;

                                            if (_fwsQty < 0)
                                            {
                                                _fwsQty = 0;
                                            }

                                            _salesDAL.UpdateInvRevQty(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_srn_qty, _itm.Sad_itm_line, _fwsQty);

                                            // get commission details for peticular item

                                            _tmpComm = new List<SaleCommission>();
                                            _tmpComm = _salesDAL.GetCommForRev(_itm.Sad_inv_no, _itm.Sad_itm_cd, _itm.Sad_itm_line);

                                            _itm.Sad_seq_no = InvoiceSeqNo;
                                            //_itm.Sad_itm_line = _invoiceLine;
                                            _itm.Sad_inv_no = Convert.ToString(InvoiceNo);
                                            effect = _salesDAL.SaveReverseItem(_itm);

                                            //kapila 18/11/2016
                                            _revValue = _revValue + _itm.Sad_tot_amt;


                                            InvoiceItemTax _tax = new InvoiceItemTax();
                                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                                            _tax.Satx_itm_tax_amt = _itm.Sad_itm_tax_amt;
                                            _tax.Satx_itm_tax_rt = _itm.Sad_itm_tax_amt * 100 / _itm.Sad_tot_amt;
                                            _tax.Satx_itm_tax_tp = "VAT";
                                            _tax.Satx_job_line = 0;
                                            _tax.Satx_job_no = "";
                                            _tax.Satx_seq_no = _itm.Sad_seq_no;
                                            _salesDAL.SaveSalesItemTax(_tax);

                                        }

                                        docs = docs + "---" + hdr.Sah_inv_no + "--(" + hdr.Sah_ref_doc + ")" + "--" + hdr.Sah_anal_7;

                                        _financialDAL.TransactionCommit();
                                        _salesDAL.TransactionCommit();
                                        _inventoryDAL.TransactionCommit();
                                    }

                                }

                            }
                        }
                    }
                }

                docs = docs + " " + k + " Documents Genarated!!!";

                return effect;
            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                docs = ex.Message;
                return -1;
            }


        }

        //Add by Lakshan 29Apr2017 copy of ChequeReturn
        public Int32 ChequeReturnWeb(RecieptHeader recieptHeadder, RecieptItem recieptItem, ChequeReturn chequeReturn, List<RecieptItem> recieptItemList, out string _erro)
        {
            Int32 res = 0;
            _erro = "";
            try
            {
                Int32 eff = 1;
                Int32 _sat_hdr = 0;
                _salesDAL = new SalesDAL();
                _financialDAL = new FinancialDAL();
                _salesDAL.ConnectionOpen();
                _financialDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _financialDAL.BeginTransaction();
                eff = _salesDAL.SaveReceiptHeader(recieptHeadder);
                eff = _salesDAL.SaveReceiptItem(recieptItem);
                eff = _financialDAL.SaveReturnCheque(chequeReturn);
                //  _sat_hdr = _salesDAL.Update_sat_hdr_for_chk_return(recieptItem.Sard_inv_no, recieptItem.Sard_settle_amt);
                foreach (RecieptItem item in recieptItemList)
                {
                    _sat_hdr = _salesDAL.Update_sat_hdr_for_chk_return(item.Sard_inv_no, item.Sard_settle_amt);
                }
                if (eff > 0)
                {
                    _salesDAL.TransactionCommit();
                    _financialDAL.TransactionCommit();
                    _salesDAL.ConnectionClose();
                    _financialDAL.ConnectionClose();
                    res = 1;
                }
                else
                {
                    //if (string.IsNullOrEmpty(recieptItem.Sard_inv_no))
                    //{
                    //    _erro = "Invalid Invoice No !";
                    //}
                    _salesDAL.TransactionRollback();
                    _financialDAL.TransactionRollback();
                    _salesDAL.ConnectionClose();
                    _financialDAL.ConnectionClose();
                    res = -1;
                }
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
                _salesDAL.ConnectionClose();
                _financialDAL.ConnectionClose();
                res = -1;
                _erro = ex.Message;
            }
            return res;
        }

        //Add by Lakshan 05 May 2017 get copy from GetReturnCheques
        public DataTable GetReturnChequesNew(string _loc, string _ref, string _bCode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetReturnChequesNew(_loc, _ref, _bCode);
        }

        //Subodana 2017-05-09
        public int SaveProductBonus(REF_BONUS_HDR _hdr, List<ref_bonus_det> _det, List<ref_bonus_loc> _loc, MasterAutoNumber _masterAutoNumber, out string Docno)
        {
            Docno = "";
            int result = 0;
            int seqno = 0;
            string documentNo = "";
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                if (_hdr.Rbh_doc_no == null || _hdr.Rbh_doc_no == "")
                {
                    Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_masterAutoNumber.Aut_year).Remove(0, 2) + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                    result = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                    _hdr.Rbh_doc_no = documentNo;
                    Docno = documentNo;
                }
                result = _financialDAL.SaveProductBonusHDR(_hdr, out seqno);

                _financialDAL.DeleteBonusDetails(seqno);
                if (_det != null)
                {
                    if (_det.Count > 0)
                    {
                        int k = 1;
                        foreach (var dlist in _det)
                        {
                            dlist.Rbd_seq = seqno;
                            dlist.Rbd_docno = _hdr.Rbh_doc_no;
                            dlist.Rdb_line = k;
                            k++;
                            result = _financialDAL.SaveProductBonusDetails(dlist);
                        }
                    }
                }
                _financialDAL.DeleteBonusLoc(seqno);
                if (_loc != null)
                {
                    if (_loc.Count > 0)
                    {
                        int p = 1;
                        foreach (var loclist in _loc)
                        {
                            loclist.Rbl_seq = seqno;
                            loclist.Rbl_docno = _hdr.Rbh_doc_no;
                            loclist.Rbl_line = p;
                            p++;
                            result = _financialDAL.SaveProductBonusLoc(loclist);
                        }
                    }
                }

                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                Docno = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                result = -1;
            }
            return result;
        }

        //Udesh 2018-10-11
        public string GetProductBonusExcel(string _Com, string _User, string _bonusCode, out string _err)
        {
            _err = string.Empty;
            string _filePath = string.Empty;
            _financialDAL = new FinancialDAL();
            DataTable _dtResults = new DataTable();

            if (_bonusCode.Trim().Length > 0)
            {

                DataTable TitleData = new DataTable();
                DataRow dataRow;
                DataColumn dataCol = new DataColumn();
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c7"; TitleData.Columns.Add(dataCol);
                dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c8"; TitleData.Columns.Add(dataCol);
                dataRow = TitleData.NewRow(); dataRow["c5"] = _Com; TitleData.Rows.Add(dataRow);
                dataRow = TitleData.NewRow(); dataRow["c5"] = "Product Bonus Definition Report"; TitleData.Rows.Add(dataRow);
                dataRow = TitleData.NewRow();
                dataRow = TitleData.NewRow();
                dataRow["c1"] = "Bonus Code :"; dataRow["c2"] = _bonusCode;
                //dataRow["c3"] = "Date To :"; dataRow["c4"] = _toDate.ToString("dd/MMM/yyyy");
                dataRow["c6"] = "User : "; dataRow["c7"] = _User + " , Printed on " + System.DateTime.Now;

                TitleData.Rows.Add(dataRow);
                _err = "";
                _filePath = "";

                List<DataTable> _dtList = new List<DataTable>();
                _dtResults = _financialDAL.Get_Product_Bonus_Header_Records(_Com, _User, _bonusCode);
                _dtList.Add(_dtResults);

                _dtResults = new DataTable();
                _dtResults = _financialDAL.Get_Product_Bonus_Detail_Records(_Com, _User, _bonusCode);
                _dtList.Add(_dtResults);

                _dtResults = new DataTable();
                _dtResults = _financialDAL.Get_Product_Bonus_Location_Records(_Com, _User, _bonusCode);
                _dtList.Add(_dtResults);


                _filePath = ExportExcel2007_multisheet(_Com, _User, TitleData, _dtList, _dtResults, out _err);

                if (_dtResults.Rows.Count == 0)
                {
                    _err = "No Records Found.";
                }
            }
            else
            {
                _err = "Please enter bounus code";
                _filePath = string.Empty;
            }

            return _filePath;
        }


        //Udesh 2018-10-11
        public string ExportExcel2007_multisheet(string _com, string _user, DataTable TitleData, List<DataTable> _dtList, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx_DynamicMultisheet(_user, _com, TitleData, _dtList, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }


        //Udaya 15/05/2017
        public List<CreditNotes> CreditNoteDetails(string invNo, string comCode, string proCenter)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CreditNoteDetails(invNo, comCode, proCenter);
        }

        //Udaya 15/05/2017
        public List<DebitNotes> DebitNoteDetails(string invNo, string comCode, string proCenter)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.DebitNoteDetails(invNo, comCode, proCenter);
        }

        //subodana
        public List<ref_bonus_loc> GetBonusLoc(string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBonusLoc(doc);
        }
        //subodana
        public List<ref_bonus_det> GetBonusDetails(string doc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBonusDetails(doc);
        }
        //subodana
        public List<REF_BONUS_HDR> GetBonusHDR(string doc, string com)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBonusHDR(com, doc);
        }
        public decimal TotCombineItemQty(List<DELI_SALE_NEW> totinvlist, List<ref_bonus_det> details, string param, string combno)
        {
            decimal totqty = 0;
            details = details.Where(a => a.Rdb_anal3 == combno).ToList();
            foreach (var detailsob in details)
            {
                if (param == "CAT1")
                {
                    totqty = totqty + totinvlist.Where(a => a.Cat1 == detailsob.Rbd_cat1).Sum(a => a.Qty);
                }
                else if (param == "CAT2")
                {
                    totqty = totqty + totinvlist.Where(a => a.Cat2 == detailsob.Rbd_cat2).Sum(a => a.Qty);
                }
                else if (param == "BRAND")
                {
                    totqty = totqty + totinvlist.Where(a => a.Brand == detailsob.Rdb_brand).Sum(a => a.Qty);
                }
                else if (param == "MODEL")
                {
                    totqty = totqty + totinvlist.Where(a => a.Model == detailsob.Rbd_model).Sum(a => a.Qty);
                }
                else if (param == "ITEM")
                {
                    totqty = totqty + totinvlist.Where(a => a.Item_code == detailsob.Rbd_item_cd).Sum(a => a.Qty);
                }
            }
            return totqty;
        }
        //subodana 2017-05-17
        public List<PoductBonusData> BonusProcess(string Code, DateTime fromdate, DateTime todate, string Com, DateTime salesfdate, DateTime salestdate)
        {
            List<PoductBonusData> data = new List<PoductBonusData>();
            List<DELI_SALE_NEW> totinvlist = new List<DELI_SALE_NEW>();
            List<DELI_SALE_NEW> invdetcalist = new List<DELI_SALE_NEW>();
            List<DELI_SALE_NEW> byexec = new List<DELI_SALE_NEW>();
            List<DELI_SALE_NEW> byloc = new List<DELI_SALE_NEW>();

            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();

            List<REF_BONUS_HDR> hdr = _financialDAL.GetBonusHDR(Code, Com);
            if (hdr != null)
            {
                //Get Bonus Loc Data
                List<ref_bonus_loc> locdata = _financialDAL.GetBonusLoc(Code);
                //Get Bonus Details
                List<ref_bonus_det> details = _financialDAL.GetBonusDetails(Code);
                if (hdr.First().Rbh_anal2 == "1")
                {
                    details = details.OrderBy(a => a.Rdb_anal3).ToList();
                }

                foreach (var loclist in locdata)
                {
                    // check expire date
                    if (todate > hdr.FirstOrDefault().Rbh_date && fromdate < hdr.FirstOrDefault().Rbh_valid_from)
                    {
                        return data;
                    }
                    if (hdr.FirstOrDefault().Rbh_sales_methd == "INVC")
                    {
                        //GET INV WITHOUT REV
                        if (loclist.Rbl_chnl != null && loclist.Rbl_chnl != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", loclist.Rbl_chnl, "CHNL", null);
                            outdatalist = outdatalist.Where(a => a.Cash_dir == 1).ToList();
                            totinvlist.AddRange(outdatalist);
                        }
                        if (loclist.Rbl_region != null && loclist.Rbl_region != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", loclist.Rbl_region, "REGION", null);
                            outdatalist = outdatalist.Where(a => a.Cash_dir == 1).ToList();
                            totinvlist.AddRange(outdatalist);
                        }
                        if (loclist.Rbl_sub_chnl != null && loclist.Rbl_sub_chnl != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", loclist.Rbl_sub_chnl, "SCHNL", null);
                            outdatalist = outdatalist.Where(a => a.Cash_dir == 1).ToList();
                            totinvlist.AddRange(outdatalist);
                        }
                        if (loclist.Rbl_zone != null && loclist.Rbl_zone != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", loclist.Rbl_zone, "ZONE", null);
                            outdatalist = outdatalist.Where(a => a.Cash_dir == 1).ToList();
                            totinvlist.AddRange(outdatalist);
                        }
                        if (loclist.Rbl_pc != null && loclist.Rbl_pc != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", "", "", loclist.Rbl_pc);
                            outdatalist = outdatalist.Where(a => a.Cash_dir == 1).ToList();
                            totinvlist.AddRange(outdatalist);
                        }


                    }
                    else if (hdr.FirstOrDefault().Rbh_sales_methd == "DELI" || hdr.FirstOrDefault().Rbh_sales_methd == "INV")
                    {
                        // GET DO DATA
                        #region chanal
                        if (loclist.Rbl_chnl != null && loclist.Rbl_chnl != "")
                        {
                            List<SALE_BAL_DETAILS> dolist = _salesDAL.GetDOLocWiseDataInvDt(loclist.Rbl_anal1, fromdate, todate, loclist.Rbl_chnl, "CHNL", null, salesfdate, salestdate);
                            //totinvlist = new List<DELI_SALE_NEW>();
                            foreach (var lst in dolist)
                            {
                                DELI_SALE_NEW ob = new DELI_SALE_NEW();
                                ob.Brand = lst.Brand;
                                ob.Cat1 = lst.Cat1;
                                ob.Cat1_desc = lst.Cat1_desc;
                                ob.Cat2 = lst.Cat2;
                                ob.Cat2_desc = lst.Cat2_desc;
                                ob.Cat3 = lst.Cat3;
                                ob.Cat3_desc = lst.Cat3_desc;
                                ob.Cat4 = lst.Cat4;
                                ob.Cat4_desc = lst.Cat4_desc;
                                ob.Cat5 = lst.Cat5;
                                ob.Cat5_desc = lst.Cat5_desc;
                                ob.Com_code = lst.Com_code;
                                ob.Com_name = lst.Com_name;
                                ob.Currency = lst.Currency;
                                ob.Cust_code = lst.Cust_code;
                                ob.Cust_name = lst.Cust_name;
                                ob.Disc_amt = lst.Disc_amt;
                                ob.Do_date = lst.Do_date;
                                ob.Do_loc = lst.Do_loc;
                                ob.Do_loc_desc = lst.Do_loc_desc;
                                ob.Do_no = lst.Do_no;
                                ob.Ex_code = lst.Ex_code;
                                ob.Ex_name = lst.Ex_name;
                                ob.Gross_amt = lst.Gross_amt;
                                ob.Inv_date = lst.Inv_date;
                                ob.Inv_no = lst.Inv_no;
                                ob.Inv_subtp = lst.Inv_subtp;
                                ob.Inv_type = lst.Inv_type;
                                ob.Item_code = lst.Item_code;
                                ob.Item_desc = lst.Item_desc;
                                ob.Model = lst.Model;
                                ob.Net_amt = lst.Net_amt;
                                ob.Pb_lvl = lst.Pb_lvl;
                                ob.Pc_code = lst.Pc_code;
                                ob.Pc_desc = lst.Pc_desc;
                                ob.Price_book = lst.Price_book;
                                ob.Qty = lst.Qty;
                                ob.Tax_amt = lst.Tax_amt;
                                ob.Tot_amt = lst.Tot_amt;
                                ob.anal_7 = lst.anal_7;
                                ob.anal_8 = lst.anal_8;
                                ob.DiscountRate = lst.DiscountRate;
                                ob.PromotionType = lst.PromotionType;
                                totinvlist.Add(ob);
                            }

                        }
                        #endregion
                        #region region
                        if (loclist.Rbl_region != null && loclist.Rbl_region != "")
                        {
                            List<SALE_BAL_DETAILS> dolist = _salesDAL.GetDOLocWiseDataInvDt(loclist.Rbl_anal1, fromdate, todate, loclist.Rbl_region, "REGION", null, salesfdate, salestdate);
                            foreach (var lst in dolist)
                            {
                                DELI_SALE_NEW ob = new DELI_SALE_NEW();
                                ob.Brand = lst.Brand;
                                ob.Cat1 = lst.Cat1;
                                ob.Cat1_desc = lst.Cat1_desc;
                                ob.Cat2 = lst.Cat2;
                                ob.Cat2_desc = lst.Cat2_desc;
                                ob.Cat3 = lst.Cat3;
                                ob.Cat3_desc = lst.Cat3_desc;
                                ob.Cat4 = lst.Cat4;
                                ob.Cat4_desc = lst.Cat4_desc;
                                ob.Cat5 = lst.Cat5;
                                ob.Cat5_desc = lst.Cat5_desc;
                                ob.Com_code = lst.Com_code;
                                ob.Com_name = lst.Com_name;
                                ob.Currency = lst.Currency;
                                ob.Cust_code = lst.Cust_code;
                                ob.Cust_name = lst.Cust_name;
                                ob.Disc_amt = lst.Disc_amt;
                                ob.Do_date = lst.Do_date;
                                ob.Do_loc = lst.Do_loc;
                                ob.Do_loc_desc = lst.Do_loc_desc;
                                ob.Do_no = lst.Do_no;
                                ob.Ex_code = lst.Ex_code;
                                ob.Ex_name = lst.Ex_name;
                                ob.Gross_amt = lst.Gross_amt;
                                ob.Inv_date = lst.Inv_date;
                                ob.Inv_no = lst.Inv_no;
                                ob.Inv_subtp = lst.Inv_subtp;
                                ob.Inv_type = lst.Inv_type;
                                ob.Item_code = lst.Item_code;
                                ob.Item_desc = lst.Item_desc;
                                ob.Model = lst.Model;
                                ob.Net_amt = lst.Net_amt;
                                ob.Pb_lvl = lst.Pb_lvl;
                                ob.Pc_code = lst.Pc_code;
                                ob.Pc_desc = lst.Pc_desc;
                                ob.Price_book = lst.Price_book;
                                ob.Qty = lst.Qty;
                                ob.Tax_amt = lst.Tax_amt;
                                ob.Tot_amt = lst.Tot_amt;
                                ob.anal_7 = lst.anal_7;
                                ob.anal_8 = lst.anal_8;
                                ob.DiscountRate = lst.DiscountRate;
                                ob.PromotionType = lst.PromotionType;
                                totinvlist.Add(ob);
                            }


                        }
                        #endregion
                        #region sub channel
                        if (loclist.Rbl_sub_chnl != null && loclist.Rbl_sub_chnl != "")
                        {
                            List<SALE_BAL_DETAILS> dolist = _salesDAL.GetDOLocWiseDataInvDt(loclist.Rbl_anal1, fromdate, todate, loclist.Rbl_sub_chnl, "SCHNL", null, salesfdate, salestdate);
                            foreach (var lst in dolist)
                            {
                                DELI_SALE_NEW ob = new DELI_SALE_NEW();
                                ob.Brand = lst.Brand;
                                ob.Cat1 = lst.Cat1;
                                ob.Cat1_desc = lst.Cat1_desc;
                                ob.Cat2 = lst.Cat2;
                                ob.Cat2_desc = lst.Cat2_desc;
                                ob.Cat3 = lst.Cat3;
                                ob.Cat3_desc = lst.Cat3_desc;
                                ob.Cat4 = lst.Cat4;
                                ob.Cat4_desc = lst.Cat4_desc;
                                ob.Cat5 = lst.Cat5;
                                ob.Cat5_desc = lst.Cat5_desc;
                                ob.Com_code = lst.Com_code;
                                ob.Com_name = lst.Com_name;
                                ob.Currency = lst.Currency;
                                ob.Cust_code = lst.Cust_code;
                                ob.Cust_name = lst.Cust_name;
                                ob.Disc_amt = lst.Disc_amt;
                                ob.Do_date = lst.Do_date;
                                ob.Do_loc = lst.Do_loc;
                                ob.Do_loc_desc = lst.Do_loc_desc;
                                ob.Do_no = lst.Do_no;
                                ob.Ex_code = lst.Ex_code;
                                ob.Ex_name = lst.Ex_name;
                                ob.Gross_amt = lst.Gross_amt;
                                ob.Inv_date = lst.Inv_date;
                                ob.Inv_no = lst.Inv_no;
                                ob.Inv_subtp = lst.Inv_subtp;
                                ob.Inv_type = lst.Inv_type;
                                ob.Item_code = lst.Item_code;
                                ob.Item_desc = lst.Item_desc;
                                ob.Model = lst.Model;
                                ob.Net_amt = lst.Net_amt;
                                ob.Pb_lvl = lst.Pb_lvl;
                                ob.Pc_code = lst.Pc_code;
                                ob.Pc_desc = lst.Pc_desc;
                                ob.Price_book = lst.Price_book;
                                ob.Qty = lst.Qty;
                                ob.Tax_amt = lst.Tax_amt;
                                ob.Tot_amt = lst.Tot_amt;
                                ob.anal_7 = lst.anal_7;
                                ob.anal_8 = lst.anal_8;
                                ob.DiscountRate = lst.DiscountRate;
                                ob.PromotionType = lst.PromotionType;
                                totinvlist.Add(ob);
                            }


                        }
                        #endregion
                        #region zone
                        if (loclist.Rbl_zone != null && loclist.Rbl_zone != "")
                        {
                            List<SALE_BAL_DETAILS> dolist = _salesDAL.GetDOLocWiseDataInvDt(loclist.Rbl_anal1, fromdate, todate, loclist.Rbl_zone, "ZONE", null, salesfdate, salestdate);
                            foreach (var lst in dolist)
                            {
                                DELI_SALE_NEW ob = new DELI_SALE_NEW();
                                ob.Brand = lst.Brand;
                                ob.Cat1 = lst.Cat1;
                                ob.Cat1_desc = lst.Cat1_desc;
                                ob.Cat2 = lst.Cat2;
                                ob.Cat2_desc = lst.Cat2_desc;
                                ob.Cat3 = lst.Cat3;
                                ob.Cat3_desc = lst.Cat3_desc;
                                ob.Cat4 = lst.Cat4;
                                ob.Cat4_desc = lst.Cat4_desc;
                                ob.Cat5 = lst.Cat5;
                                ob.Cat5_desc = lst.Cat5_desc;
                                ob.Com_code = lst.Com_code;
                                ob.Com_name = lst.Com_name;
                                ob.Currency = lst.Currency;
                                ob.Cust_code = lst.Cust_code;
                                ob.Cust_name = lst.Cust_name;
                                ob.Disc_amt = lst.Disc_amt;
                                ob.Do_date = lst.Do_date;
                                ob.Do_loc = lst.Do_loc;
                                ob.Do_loc_desc = lst.Do_loc_desc;
                                ob.Do_no = lst.Do_no;
                                ob.Ex_code = lst.Ex_code;
                                ob.Ex_name = lst.Ex_name;
                                ob.Gross_amt = lst.Gross_amt;
                                ob.Inv_date = lst.Inv_date;
                                ob.Inv_no = lst.Inv_no;
                                ob.Inv_subtp = lst.Inv_subtp;
                                ob.Inv_type = lst.Inv_type;
                                ob.Item_code = lst.Item_code;
                                ob.Item_desc = lst.Item_desc;
                                ob.Model = lst.Model;
                                ob.Net_amt = lst.Net_amt;
                                ob.Pb_lvl = lst.Pb_lvl;
                                ob.Pc_code = lst.Pc_code;
                                ob.Pc_desc = lst.Pc_desc;
                                ob.Price_book = lst.Price_book;
                                ob.Qty = lst.Qty;
                                ob.Tax_amt = lst.Tax_amt;
                                ob.Tot_amt = lst.Tot_amt;
                                ob.anal_7 = lst.anal_7;
                                ob.anal_8 = lst.anal_8;
                                ob.DiscountRate = lst.DiscountRate;
                                ob.PromotionType = lst.PromotionType;
                                totinvlist.Add(ob);
                            }


                        }
                        #endregion
                        #region pc
                        if (loclist.Rbl_pc != null && loclist.Rbl_pc != "")
                        {
                            List<SALE_BAL_DETAILS> dolist = _salesDAL.GetDOLocWiseDataInvDt(loclist.Rbl_anal1, fromdate, todate, "", "", loclist.Rbl_pc, salesfdate, salestdate);
                            foreach (var lst in dolist)
                            {
                                DELI_SALE_NEW ob = new DELI_SALE_NEW();
                                ob.Brand = lst.Brand;
                                ob.Cat1 = lst.Cat1;
                                ob.Cat1_desc = lst.Cat1_desc;
                                ob.Cat2 = lst.Cat2;
                                ob.Cat2_desc = lst.Cat2_desc;
                                ob.Cat3 = lst.Cat3;
                                ob.Cat3_desc = lst.Cat3_desc;
                                ob.Cat4 = lst.Cat4;
                                ob.Cat4_desc = lst.Cat4_desc;
                                ob.Cat5 = lst.Cat5;
                                ob.Cat5_desc = lst.Cat5_desc;
                                ob.Com_code = lst.Com_code;
                                ob.Com_name = lst.Com_name;
                                ob.Currency = lst.Currency;
                                ob.Cust_code = lst.Cust_code;
                                ob.Cust_name = lst.Cust_name;
                                ob.Disc_amt = lst.Disc_amt;
                                ob.Do_date = lst.Do_date;
                                ob.Do_loc = lst.Do_loc;
                                ob.Do_loc_desc = lst.Do_loc_desc;
                                ob.Do_no = lst.Do_no;
                                ob.Ex_code = lst.Ex_code;
                                ob.Ex_name = lst.Ex_name;
                                ob.Gross_amt = lst.Gross_amt;
                                ob.Inv_date = lst.Inv_date;
                                ob.Inv_no = lst.Inv_no;
                                ob.Inv_subtp = lst.Inv_subtp;
                                ob.Inv_type = lst.Inv_type;
                                ob.Item_code = lst.Item_code;
                                ob.Item_desc = lst.Item_desc;
                                ob.Model = lst.Model;
                                ob.Net_amt = lst.Net_amt;
                                ob.Pb_lvl = lst.Pb_lvl;
                                ob.Pc_code = lst.Pc_code;
                                ob.Pc_desc = lst.Pc_desc;
                                ob.Price_book = lst.Price_book;
                                ob.Qty = lst.Qty;
                                ob.Tax_amt = lst.Tax_amt;
                                ob.Tot_amt = lst.Tot_amt;
                                ob.anal_7 = lst.anal_7;
                                ob.anal_8 = lst.anal_8;
                                ob.DiscountRate = lst.DiscountRate;
                                ob.PromotionType = lst.PromotionType;
                                totinvlist.Add(ob);
                            }


                        }
                        #endregion
                    }
                    else
                    {
                        // WITH REV
                        if (loclist.Rbl_chnl != null && loclist.Rbl_chnl != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", loclist.Rbl_chnl, "CHNL", null);
                            totinvlist.AddRange(outdatalist);
                        }
                        if (loclist.Rbl_region != null && loclist.Rbl_region != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", loclist.Rbl_region, "REGION", null);
                            totinvlist.AddRange(outdatalist);
                        }
                        if (loclist.Rbl_sub_chnl != null && loclist.Rbl_sub_chnl != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", loclist.Rbl_sub_chnl, "SCHNL", null);
                            totinvlist.AddRange(outdatalist);
                        }
                        if (loclist.Rbl_zone != null && loclist.Rbl_zone != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", loclist.Rbl_zone, "ZONE", null);
                            totinvlist.AddRange(outdatalist);
                        }
                        if (loclist.Rbl_pc != null && loclist.Rbl_pc != "")
                        {
                            List<DELI_SALE_NEW> outdatalist = _salesDAL.GetTotInvForLocwise(loclist.Rbl_anal1, "", "", "", "", "", fromdate, todate, "", "", "", "", "", loclist.Rbl_pc);
                            totinvlist.AddRange(outdatalist);
                        }
                    }
                }
                int currno = 0;
                int earli = 0;
                int totcount = 0;
                int combcount = 0;
                string curritem = "";
                string previtm = "";
                int _incremnt = 1;
                string param = "";

                //delete no need price level price books
                if (hdr.FirstOrDefault().Rbh_pb_cond == 0)
                {
                    foreach (var detlist in details)
                    {
                        totinvlist.RemoveAll(a => a.Price_book == detlist.Rbd_pb && a.Pb_lvl == detlist.Rbd_pl);
                    }
                }
                //delete no need promo circula
                if (hdr.FirstOrDefault().Rbh_anal5 == "0")
                {
                    foreach (var detlist in details)
                    {
                        totinvlist.RemoveAll(a => a.PriceCircula == detlist.Rbd_price_circul);
                    }
                }

                foreach (var detlist in details)
                {
                    if (detlist.Rbd_slab_base == "QTY")
                    {
                        #region Qty Base
                        invdetcalist = new List<DELI_SALE_NEW>();
                        invdetcalist.AddRange(totinvlist);
                        if (detlist.Rbd_cat1 != "" && detlist.Rbd_cat1 != null)
                        {
                            param = "CAT1";
                            invdetcalist = invdetcalist.Where(a => a.Cat1 == detlist.Rbd_cat1).ToList();
                        }
                        if (detlist.Rbd_cat2 != "" && detlist.Rbd_cat2 != null)
                        {
                            param = "CAT2";
                            invdetcalist = invdetcalist.Where(a => a.Cat2 == detlist.Rbd_cat2).ToList();
                        }
                        if (detlist.Rdb_brand != "" && detlist.Rdb_brand != null)
                        {
                            param = "BRAND";
                            invdetcalist = invdetcalist.Where(a => a.Brand == detlist.Rdb_brand).ToList();
                        }
                        if (detlist.Rbd_model != "" && detlist.Rbd_model != null)
                        {
                            param = "MODEL";
                            invdetcalist = invdetcalist.Where(a => a.Model == detlist.Rbd_model).ToList();
                        }
                        if (detlist.Rbd_item_cd != "" && detlist.Rbd_item_cd != null)
                        {
                            param = "ITEM";
                            invdetcalist = invdetcalist.Where(a => a.Item_code == detlist.Rbd_item_cd).ToList();
                        }
                        if (detlist.Rbd_cus_cd != "" && detlist.Rbd_cus_cd != null)
                        {
                            invdetcalist = invdetcalist.Where(a => a.Cust_code == detlist.Rbd_cus_cd).ToList();
                        }
                        if (detlist.Rbd_pb != "" && detlist.Rbd_pb != null)
                        {
                            if (hdr.FirstOrDefault().Rbh_pb_cond == 1)
                            {
                                invdetcalist = invdetcalist.Where(a => a.Price_book == detlist.Rbd_pb).ToList();
                            }
                        }
                        if (detlist.Rbd_pl != "" && detlist.Rbd_pl != null)
                        {
                            if (hdr.FirstOrDefault().Rbh_pb_cond == 1)
                            {
                                invdetcalist = invdetcalist.Where(a => a.Pb_lvl == detlist.Rbd_pl).ToList();
                            }
                        }
                        if (detlist.Rbd_price_circul != "" && detlist.Rbd_price_circul != null)
                        {
                            if (hdr.FirstOrDefault().Rbh_anal5 == "1")
                            {
                                invdetcalist = invdetcalist.Where(a => a.PriceCircula == detlist.Rbd_price_circul).ToList();
                            }
                        }
                        if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                        {
                            invdetcalist = invdetcalist.Where(a => a.PromotionType == detlist.Rbd_pay_sub_tp).ToList();
                        }
                        //if (detlist.Rbd_sales_tp != "" && detlist.Rbd_sales_tp != null)
                        //{
                        //    invdetcalist = invdetcalist.Where(a => a.Inv_type == detlist.Rbd_sales_tp).ToList();
                        //}
                        //if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                        //{
                        //    invdetcalist = invdetcalist.Where(a => a.Inv_subtp == detlist.Rbd_pay_sub_tp).ToList();
                        //}
                        invdetcalist = invdetcalist.GroupBy(l => new { l.Item_code, l.Model, l.Brand, l.Cat1, l.Cat2, l.Cust_code, l.Inv_type, l.Inv_subtp, l.Inv_no, l.Price_book, l.Pb_lvl, l.Ex_code })
.Select(cl => new DELI_SALE_NEW
{
    Ex_code = cl.First().Ex_code,
    Ex_name = cl.First().Ex_name,
    Inv_no = cl.First().Inv_no,
    Item_code = cl.First().Item_code,
    Qty = cl.Sum(a => a.Qty),
    Gross_amt = cl.Sum(a => a.Gross_amt),
    Net_amt = cl.Sum(a => a.Net_amt),
    Tot_amt = cl.Sum(a => a.Tot_amt),
    Cost_amt = cl.Sum(a => a.Cost_amt),
    Tax_amt = cl.Sum(a => a.Tax_amt),
    Disc_amt = cl.Sum(a => a.Disc_amt),
    Inv_subtp = cl.First().Inv_subtp,
    Inv_date = cl.First().Inv_date,
    Model = cl.First().Model,
    Cat1 = cl.First().Cat1,
    Cat2 = cl.First().Cat2,
    Brand = cl.First().Brand,
    Pc_code = cl.First().Pc_code,
    Inv_type = cl.First().Inv_type,
    Com_code = cl.First().Com_code,
    Price_book = cl.First().Price_book,
    Pb_lvl = cl.First().Pb_lvl,
    Do_date = cl.Max(a => a.Do_date),
    DiscountRate = cl.Max(a => a.DiscountRate),
    anal_7 = cl.Sum(a => a.anal_7),
    anal_8 = cl.Sum(a => a.anal_8)
}).ToList();

                        byexec = invdetcalist.GroupBy(l => new { l.Ex_code })
 .Select(cl => new DELI_SALE_NEW
 {
     Ex_code = cl.First().Ex_code,
     Ex_name = cl.First().Ex_name,
     Inv_no = cl.First().Inv_no,
     Item_code = cl.First().Item_code,
     Qty = cl.Sum(a => a.Qty),
     Gross_amt = cl.Sum(a => a.Gross_amt),
     Net_amt = cl.Sum(a => a.Net_amt),
     Tot_amt = cl.Sum(a => a.Tot_amt),
     Cost_amt = cl.Sum(a => a.Cost_amt),
     Tax_amt = cl.Sum(a => a.Tax_amt),
     Disc_amt = cl.Sum(a => a.Disc_amt),
     Inv_subtp = cl.First().Inv_subtp,
     Inv_date = cl.First().Inv_date,
     Model = cl.First().Model,
     Cat1 = cl.First().Cat1,
     Cat2 = cl.First().Cat2,
     Brand = cl.First().Brand,
     Pc_code = cl.First().Pc_code,
     Inv_type = cl.First().Inv_type,
     Com_code = cl.First().Com_code,
     Price_book = cl.First().Price_book,
     Pb_lvl = cl.First().Pb_lvl,
     Do_date = cl.Max(a => a.Do_date),
     DiscountRate = cl.Max(a => a.DiscountRate),
     anal_7 = cl.Sum(a => a.anal_7),
     anal_8 = cl.Sum(a => a.anal_8)
 }).ToList();

                        byloc = invdetcalist.GroupBy(l => new { l.Pc_code })
.Select(cl => new DELI_SALE_NEW
{
    Ex_code = cl.First().Ex_code,
    Ex_name = cl.First().Ex_name,
    Inv_no = cl.First().Inv_no,
    Item_code = cl.First().Item_code,
    Qty = cl.Sum(a => a.Qty),
    Gross_amt = cl.Sum(a => a.Gross_amt),
    Net_amt = cl.Sum(a => a.Net_amt),
    Tot_amt = cl.Sum(a => a.Tot_amt),
    Cost_amt = cl.Sum(a => a.Cost_amt),
    Tax_amt = cl.Sum(a => a.Tax_amt),
    Disc_amt = cl.Sum(a => a.Disc_amt),
    Inv_subtp = cl.First().Inv_subtp,
    Inv_date = cl.First().Inv_date,
    Model = cl.First().Model,
    Cat1 = cl.First().Cat1,
    Cat2 = cl.First().Cat2,
    Brand = cl.First().Brand,
    Pc_code = cl.First().Pc_code,
    Inv_type = cl.First().Inv_type,
    Com_code = cl.First().Com_code,
    Price_book = cl.First().Price_book,
    Pb_lvl = cl.First().Pb_lvl,
    Do_date = cl.Max(a => a.Do_date),
    DiscountRate = cl.Max(a => a.DiscountRate),
    anal_7 = cl.Sum(a => a.anal_7),
    anal_8 = cl.Sum(a => a.anal_8)
}).ToList();

                        foreach (var execinvlist in byexec)
                        {
                            #region exec base
                            if (detlist.Rdb_anal2 == "Exec" && hdr.First().Rbh_anal2 != "1")
                            {
                                if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                {
                                    #region basic cal
                                    //Add to data list
                                    var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                    string nxtpc = "";
                                    foreach (var mainlist in dtlist)
                                    {

                                        //Check Re Report Option
                                        #region Rereport
                                        //Re report Filteration
                                        //all
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                {
                                                    if (Oldinvdate.Date != DateTime.Now.Date)
                                                    {
                                                        if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                        //period
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                {
                                                    if (Oldinvdate.Date != DateTime.Now.Date)
                                                    {
                                                        if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                        //period
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                continue;

                                            }
                                        }
                                        #endregion


                                        Int32 fwdtlmt = 0;
                                        Int32 fulldoqty = 0;
                                        //check forwdsales limit
                                        if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                        {
                                            fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                            if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                            {
                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                continue;
                                            }
                                            else
                                            {
                                                //check full do
                                                DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                if (doqty != null)
                                                {
                                                    if (doqty.Rows.Count > 0)
                                                    {
                                                        if (doqty.Rows[0][0].ToString() != "")
                                                        {
                                                            fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                            if (mainlist.Qty > fulldoqty)
                                                            {
                                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }

                                            }
                                        }

                                        //Check Discount Consider
                                        if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                        {
                                            if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                            {
                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                continue;
                                            }
                                        }


                                        //Check Areas Limit
                                        decimal areas = 0;
                                        Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                        DataTable hpacc = new DataTable();

                                        hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                        if (hpacc != null)
                                        {
                                            if (hpacc.Rows.Count > 0)
                                            {
                                                foreach (var acc in hpacc.Rows)
                                                {
                                                    if (hpacc.Rows[0][0].ToString() != "")
                                                    {
                                                        areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                    }
                                                }
                                            }
                                        }
                                        if (areas > 10)
                                        {
                                            //add limit and check again
                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                continue;
                                            }
                                        }
                                        //check outstanding limit
                                        if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                        {
                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                            continue;
                                        }
                                        //check outstanding date limit
                                        //check settlment date and full settle
                                        DateTime setldt = DateTime.Now;
                                        decimal settlammount = 0;
                                        DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                        if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                        {
                                            if (setdtdt.Rows.Count > 0)
                                            {
                                                if (setdtdt.Rows[0][1].ToString() == "")
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                                setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                continue;
                                            }
                                        }
                                        //credit card types
                                        if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                        {
                                            Int32 paytypecount = 0;
                                            DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                            if (chkpaytype != null)
                                            {
                                                if (chkpaytype.Rows.Count > 0)
                                                {
                                                    if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                    {
                                                        paytypecount = chkpaytype.Rows.Count;

                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                continue;
                                            }
                                        }
                                        if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                        {
                                            Int32 paytypecount = 0;
                                            DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                            if (chkpaytype != null)
                                            {
                                                if (chkpaytype.Rows.Count > 0)
                                                {
                                                    if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                    {
                                                        paytypecount = chkpaytype.Rows.Count;

                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                continue;
                                            }
                                        }


                                        if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                        {


                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = detlist.Rdb_marks;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;

                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob.TotMarks = detlist.Rdb_marks * ob.Qty;
                                            }

                                            data.Add(ob);
                                        }
                                        nxtpc = mainlist.Pc_code;
                                    }
                                    #endregion
                                }
                                else
                                {
                                    continue;
                                }

                            }
                            #endregion
                            #region loc base
                            else if (((detlist.Rdb_anal2 == "Loc" || detlist.Rdb_anal2 == "Area" || detlist.Rdb_anal2 == "Region" || detlist.Rdb_anal2 == "Zone") || detlist.Rdb_anal2 == "Area" || detlist.Rdb_anal2 == "Region" || detlist.Rdb_anal2 == "Zone") && hdr.First().Rbh_anal2 != "1")
                            {
                                if (execinvlist.Pc_code == "RTHOY")
                                {

                                }
                                decimal totqty = byloc.Where(a => a.Pc_code == execinvlist.Pc_code).Sum(a => a.Qty);


                                if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                {
                                    //Add to data list
                                    var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                    string nxtpc = "";
                                    foreach (var mainlist in dtlist)
                                    {
                                        //Check Re Report Option
                                        #region Rereport
                                        //Re report Filteration
                                        //all
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                {
                                                    if (Oldinvdate.Date != DateTime.Now.Date)
                                                    {
                                                        if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                        //period
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                {
                                                    if (Oldinvdate.Date != DateTime.Now.Date)
                                                    {
                                                        if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                        //period
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                totqty = totqty - mainlist.Qty;
                                                continue;

                                            }
                                        }
                                        #endregion


                                        Int32 fwdtlmt = 0;
                                        Int32 fulldoqty = 0;
                                        //check forwdsales limit
                                        if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                        {
                                            fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                            if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                            {
                                                totqty = totqty - mainlist.Qty;
                                                continue;
                                            }
                                            else
                                            {
                                                //check full do
                                                DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                if (doqty != null)
                                                {
                                                    if (doqty.Rows.Count > 0)
                                                    {
                                                        if (doqty.Rows[0][0].ToString() != "")
                                                        {
                                                            fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                            if (mainlist.Qty > fulldoqty)
                                                            {
                                                                totqty = totqty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }

                                            }
                                        }
                                        //Check Discount Consider
                                        if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                        {
                                            if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                            {
                                                totqty = totqty - mainlist.Qty;
                                                continue;
                                            }
                                        }

                                        //Check Areas Limit
                                        decimal areas = 0;
                                        Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                        DataTable hpacc = new DataTable();

                                        hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                        if (hpacc != null)
                                        {
                                            if (hpacc.Rows.Count > 0)
                                            {
                                                foreach (var acc in hpacc.Rows)
                                                {
                                                    if (hpacc.Rows[0][0].ToString() != "")
                                                    {
                                                        areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                    }
                                                }
                                            }
                                        }
                                        if (areas > 10)
                                        {
                                            //add limit and check again
                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                totqty = totqty - mainlist.Qty;
                                                continue;
                                            }
                                        }
                                        //check outstanding limit
                                        if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                        {
                                            totqty = totqty - mainlist.Qty;
                                            continue;
                                        }
                                        //check outstanding date limit
                                        //check settlment date and full settle
                                        DateTime setldt = DateTime.Now;
                                        decimal settlammount = 0;
                                        DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                        if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                        {
                                            if (setdtdt.Rows.Count > 0)
                                            {
                                                if (setdtdt.Rows[0][1].ToString() == "")
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                                setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                totqty = totqty - mainlist.Qty;
                                                continue;
                                            }
                                        }
                                        //credit card types
                                        if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                        {
                                            Int32 paytypecount = 0;
                                            DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                            if (chkpaytype != null)
                                            {
                                                if (chkpaytype.Rows.Count > 0)
                                                {
                                                    if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                    {
                                                        paytypecount = chkpaytype.Rows.Count;

                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                totqty = totqty - mainlist.Qty;
                                                continue;
                                            }
                                        }
                                        if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                        {
                                            Int32 paytypecount = 0;
                                            DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                            if (chkpaytype != null)
                                            {
                                                if (chkpaytype.Rows.Count > 0)
                                                {
                                                    if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                    {
                                                        paytypecount = chkpaytype.Rows.Count;

                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                totqty = totqty - mainlist.Qty;
                                                continue;
                                            }
                                        }


                                        if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                        {


                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = detlist.Rdb_marks;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;
                                            ob.ShowroomCat = detlist.Rdb_anal2;

                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob.TotMarks = detlist.Rdb_marks * ob.Qty;
                                            }

                                            data.Add(ob);
                                        }
                                        nxtpc = mainlist.Pc_code;
                                    }
                                }
                                else
                                {
                                    continue;
                                }

                            }
                            #endregion
                            #region combineitem- exec
                            else if (detlist.Rdb_anal2 == "Exec" && hdr.First().Rbh_anal2 == "1")
                            {

                                currno = Convert.ToInt16(detlist.Rdb_anal3);
                                if (detlist.Rbd_cat1 != "" && detlist.Rbd_cat1 != null)
                                {
                                    curritem = detlist.Rbd_cat1;
                                }
                                if (detlist.Rbd_cat2 != "" && detlist.Rbd_cat2 != null)
                                {
                                    curritem = detlist.Rbd_cat2;
                                }
                                if (detlist.Rdb_brand != "" && detlist.Rdb_brand != null)
                                {
                                    curritem = detlist.Rdb_brand;
                                }
                                if (detlist.Rbd_model != "" && detlist.Rbd_model != null)
                                {
                                    curritem = detlist.Rbd_model;
                                }
                                if (detlist.Rbd_item_cd != "" && detlist.Rbd_item_cd != null)
                                {
                                    curritem = detlist.Rbd_item_cd;
                                }
                                if (details.Count == _incremnt)
                                {
                                    combcount++;
                                    if (totcount == combcount)
                                    {
                                        if (detlist != null && detlist.Rdb_tot_comb_qty > 0)
                                        {
                                            decimal commqty = TotCombineItemQty(totinvlist, details, param, detlist.Rdb_anal3);
                                            if (Convert.ToDecimal(detlist.Rdb_tot_comb_qty) > commqty)
                                            {
                                                continue;
                                            }
                                        }

                                        if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                        {


                                            #region basic cal
                                            totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                            var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                            string nxtpc = "";
                                            foreach (var mainlist in dtlist)
                                            {

                                                //Check Re Report Option
                                                #region Rereport
                                                //Re report Filteration
                                                //all
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                    continue;

                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;

                                                    }
                                                }
                                                #endregion

                                                Int32 fwdtlmt = 0;
                                                Int32 fulldoqty = 0;
                                                //check forwdsales limit
                                                if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                                {
                                                    fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                    if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        //check full do
                                                        DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                        if (doqty != null)
                                                        {
                                                            if (doqty.Rows.Count > 0)
                                                            {
                                                                if (doqty.Rows[0][0].ToString() != "")
                                                                {
                                                                    fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                    if (mainlist.Qty > fulldoqty)
                                                                    {
                                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                        continue;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }

                                                    }
                                                }

                                                //Check Discount Consider
                                                if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                                {
                                                    if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //Check Areas Limit
                                                decimal areas = 0;
                                                Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                                DataTable hpacc = new DataTable();

                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    //add limit and check again
                                                    hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                    if (hpacc != null)
                                                    {
                                                        if (hpacc.Rows.Count > 0)
                                                        {
                                                            foreach (var acc in hpacc.Rows)
                                                            {
                                                                if (hpacc.Rows[0][0].ToString() != "")
                                                                {
                                                                    areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (areas > 10)
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //check outstanding limit
                                                if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                                //check outstanding date limit
                                                //check settlment date and full settle
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                                if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                        if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //credit card types
                                                if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }

                                                if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                                {


                                                    PoductBonusData ob = new PoductBonusData();
                                                    ob.ExecCode = mainlist.Ex_code;
                                                    ob.ExecName = mainlist.Ex_name;
                                                    ob.InvoiceDate = mainlist.Inv_date;
                                                    ob.InvoiceNo = mainlist.Inv_no;
                                                    ob.ItemCode = mainlist.Item_code;
                                                    ob.ItemDesc = mainlist.Item_desc;
                                                    ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                    ob.TotAmmount = mainlist.Tot_amt;
                                                    ob.TotMarks = 0;
                                                    ob.circular = Code;
                                                    ob.frmdate = fromdate;
                                                    ob.todate = todate;
                                                    ob.pc = mainlist.Pc_code;
                                                    ob.loc = mainlist.Pc_code;
                                                    ob.FromsalesDate = salesfdate;
                                                    ob.TosalesDate = salestdate;

                                                    if (detlist.Rdb_anal1 == "1")
                                                    {
                                                        ob.TotMarks = 0 * ob.Qty;
                                                    }
                                                    ob.Combineno = Convert.ToInt16(currno);
                                                    data.Add(ob);
                                                }
                                                nxtpc = mainlist.Pc_code;
                                            }
                                            PoductBonusData ob1 = new PoductBonusData();
                                            ob1.ExecCode = dtlist.First().Ex_code;
                                            ob1.ExecName = dtlist.First().Ex_name;
                                            ob1.InvoiceDate = DateTime.Now.Date;
                                            ob1.InvoiceNo = "ALL";
                                            ob1.ItemCode = "ALL";
                                            ob1.ItemDesc = "ALL";
                                            ob1.Qty = 0;
                                            ob1.TotAmmount = 0;
                                            ob1.TotMarks = detlist.Rdb_marks;
                                            ob1.circular = Code;
                                            ob1.frmdate = fromdate;
                                            ob1.todate = todate;
                                            ob1.pc = dtlist.First().Pc_code;
                                            ob1.loc = dtlist.First().Pc_code;


                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                            }

                                            data.Add(ob1);
                                            #endregion
                                        }

                                        combcount = 1;
                                        earli = currno;
                                    }
                                    else
                                    {
                                        data.RemoveAll(a => a.Combineno == earli);

                                        #region basic cal
                                        totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        string nxtpc = "";
                                        foreach (var mainlist in dtlist)
                                        {

                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion


                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }

                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    continue;
                                                }
                                            }
                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }



                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = 0;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;

                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob.TotMarks = 0 * ob.Qty;
                                            }
                                            ob.Combineno = Convert.ToInt16(currno);
                                            data.Add(ob);
                                            nxtpc = mainlist.Pc_code;
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;

                                        if (detlist.Rdb_anal1 == "1")
                                        {
                                            ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                        }

                                        data.Add(ob1);
                                        #endregion
                                        earli = currno;
                                        combcount = 1;
                                    }
                                }
                                else if (earli == 0 || earli == currno)
                                {
                                    if (detlist != null && detlist.Rdb_tot_comb_qty > 0)
                                    {
                                        decimal commqty = TotCombineItemQty(totinvlist, details, param, detlist.Rdb_anal3);
                                        if (Convert.ToDecimal(detlist.Rdb_tot_comb_qty) > commqty)
                                        {
                                            continue;
                                        }
                                    }
                                    totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                    if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                    {
                                        if (curritem != previtm) combcount++;
                                        earli = currno;

                                        //
                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        string nxtpc = "";
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;

                                                }
                                            }
                                            #endregion



                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }

                                                }
                                            }


                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                            }


                                            if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                            {
                                                PoductBonusData ob = new PoductBonusData();
                                                ob.ExecCode = mainlist.Ex_code;
                                                ob.ExecName = mainlist.Ex_name;
                                                ob.InvoiceDate = mainlist.Inv_date;
                                                ob.InvoiceNo = mainlist.Inv_no;
                                                ob.ItemCode = mainlist.Item_code;
                                                ob.ItemDesc = mainlist.Item_desc;
                                                ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                ob.TotAmmount = mainlist.Tot_amt;
                                                ob.TotMarks = 0;
                                                ob.circular = Code;
                                                ob.frmdate = fromdate;
                                                ob.todate = todate;
                                                ob.pc = mainlist.Pc_code;
                                                ob.loc = mainlist.Pc_code;
                                                ob.FromsalesDate = salesfdate;
                                                ob.TosalesDate = salestdate;

                                                if (detlist.Rdb_anal1 == "1")
                                                {
                                                    ob.TotMarks = 0 * ob.Qty;
                                                }
                                                ob.Combineno = Convert.ToInt16(currno);
                                                data.Add(ob);
                                            }
                                            nxtpc = mainlist.Pc_code;
                                        }
                                        if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                        {
                                            PoductBonusData ob1 = new PoductBonusData();
                                            ob1.ExecCode = dtlist.First().Ex_code;
                                            ob1.ExecName = dtlist.First().Ex_name;
                                            ob1.InvoiceDate = DateTime.Now.Date;
                                            ob1.InvoiceNo = "ALL";
                                            ob1.ItemCode = "ALL";
                                            ob1.ItemDesc = "ALL";
                                            ob1.Qty = 0;
                                            ob1.TotAmmount = 0;
                                            ob1.TotMarks = detlist.Rdb_marks;
                                            ob1.circular = Code;
                                            ob1.frmdate = fromdate;
                                            ob1.todate = todate;
                                            ob1.pc = dtlist.First().Pc_code;
                                            ob1.loc = dtlist.First().Pc_code;
                                            ob1.FromsalesDate = salesfdate;
                                            ob1.TosalesDate = salestdate;

                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                            }

                                            data.Add(ob1);
                                        }
                                        #endregion

                                    }
                                    else
                                    {
                                        earli = currno;
                                        continue;
                                    }
                                }
                                else
                                {
                                    if (totcount == combcount)
                                    {
                                        if (detlist != null && detlist.Rdb_tot_comb_qty > 0)
                                        {
                                            decimal commqty = TotCombineItemQty(totinvlist, details, param, detlist.Rdb_anal3);
                                            if (Convert.ToDecimal(detlist.Rdb_tot_comb_qty) > commqty)
                                            {
                                                continue;
                                            }
                                        }
                                        if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                        {
                                            #region basic cal
                                            totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                            var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                            string nxtpc = "";
                                            foreach (var mainlist in dtlist)
                                            {

                                                //Check Re Report Option
                                                #region Rereport
                                                //Re report Filteration
                                                //all
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;

                                                    }
                                                }
                                                #endregion


                                                Int32 fwdtlmt = 0;
                                                Int32 fulldoqty = 0;
                                                //check forwdsales limit
                                                if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                                {
                                                    fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                    if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        //check full do
                                                        DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                        if (doqty != null)
                                                        {
                                                            if (doqty.Rows.Count > 0)
                                                            {
                                                                if (doqty.Rows[0][0].ToString() != "")
                                                                {
                                                                    fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                    if (mainlist.Qty > fulldoqty)
                                                                    {
                                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                        continue;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }

                                                    }
                                                }


                                                //Check Areas Limit
                                                decimal areas = 0;
                                                Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                                DataTable hpacc = new DataTable();

                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    //add limit and check again
                                                    hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                    if (hpacc != null)
                                                    {
                                                        if (hpacc.Rows.Count > 0)
                                                        {
                                                            foreach (var acc in hpacc.Rows)
                                                            {
                                                                if (hpacc.Rows[0][0].ToString() != "")
                                                                {
                                                                    areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (areas > 10)
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //check outstanding limit
                                                if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                                {
                                                    execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                    continue;
                                                }
                                                //check outstanding date limit
                                                //check settlment date and full settle
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                                if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                        if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //credit card types
                                                if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        execinvlist.Qty = execinvlist.Qty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }


                                                if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                                {
                                                    PoductBonusData ob = new PoductBonusData();
                                                    ob.ExecCode = mainlist.Ex_code;
                                                    ob.ExecName = mainlist.Ex_name;
                                                    ob.InvoiceDate = mainlist.Inv_date;
                                                    ob.InvoiceNo = mainlist.Inv_no;
                                                    ob.ItemCode = mainlist.Item_code;
                                                    ob.ItemDesc = mainlist.Item_desc;
                                                    ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                    ob.TotAmmount = mainlist.Tot_amt;
                                                    ob.TotMarks = 0;
                                                    ob.circular = Code;
                                                    ob.frmdate = fromdate;
                                                    ob.todate = todate;
                                                    ob.pc = mainlist.Pc_code;
                                                    ob.loc = mainlist.Pc_code;
                                                    ob.FromsalesDate = salesfdate;
                                                    ob.TosalesDate = salestdate;

                                                    if (detlist.Rdb_anal1 == "1")
                                                    {
                                                        ob.TotMarks = 0 * ob.Qty;
                                                    }
                                                    ob.Combineno = Convert.ToInt16(currno);
                                                    data.Add(ob);
                                                }
                                                nxtpc = mainlist.Pc_code;
                                            }
                                            if (execinvlist.Qty >= detlist.Rbd_from_val && execinvlist.Qty < detlist.Rdb_to_val)
                                            {
                                                PoductBonusData ob1 = new PoductBonusData();
                                                ob1.ExecCode = dtlist.First().Ex_code;
                                                ob1.ExecName = dtlist.First().Ex_name;
                                                ob1.InvoiceDate = DateTime.Now.Date;
                                                ob1.InvoiceNo = "ALL";
                                                ob1.ItemCode = "ALL";
                                                ob1.ItemDesc = "ALL";
                                                ob1.Qty = 0;
                                                ob1.TotAmmount = 0;
                                                ob1.TotMarks = detlist.Rdb_marks;
                                                ob1.circular = Code;
                                                ob1.frmdate = fromdate;
                                                ob1.todate = todate;
                                                ob1.pc = dtlist.First().Pc_code;
                                                ob1.loc = dtlist.First().Pc_code;
                                                ob1.FromsalesDate = salesfdate;
                                                ob1.TosalesDate = salestdate;

                                                if (detlist.Rdb_anal1 == "1")
                                                {
                                                    ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                                }

                                                data.Add(ob1);
                                            }
                                            #endregion
                                        }

                                        combcount = 1;
                                        earli = currno;
                                    }
                                    else
                                    {
                                        data.RemoveAll(a => a.Combineno == earli);

                                        #region basic cal
                                        totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        string nxtpc = "";
                                        foreach (var mainlist in dtlist)
                                        {

                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion

                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }


                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }



                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = 0;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;

                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob.TotMarks = 0 * ob.Qty;
                                            }
                                            ob.Combineno = Convert.ToInt16(currno);
                                            data.Add(ob);
                                            nxtpc = mainlist.Pc_code;
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;

                                        if (detlist.Rdb_anal1 == "1")
                                        {
                                            ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                        }

                                        data.Add(ob1);
                                        #endregion
                                        earli = currno;
                                        combcount = 1;
                                    }
                                }

                            }
                            #endregion
                            #region combineitem- loc
                            else if ((detlist.Rdb_anal2 == "Loc" || detlist.Rdb_anal2 == "Area" || detlist.Rdb_anal2 == "Region" || detlist.Rdb_anal2 == "Zone") && hdr.First().Rbh_anal2 == "1")
                            {
                                currno = Convert.ToInt16(detlist.Rdb_anal3);
                                if (detlist.Rbd_cat1 != "" && detlist.Rbd_cat1 != null)
                                {
                                    curritem = detlist.Rbd_cat1;
                                }
                                if (detlist.Rbd_cat2 != "" && detlist.Rbd_cat2 != null)
                                {
                                    curritem = detlist.Rbd_cat2;
                                }
                                if (detlist.Rdb_brand != "" && detlist.Rdb_brand != null)
                                {
                                    curritem = detlist.Rdb_brand;
                                }
                                if (detlist.Rbd_model != "" && detlist.Rbd_model != null)
                                {
                                    curritem = detlist.Rbd_model;
                                }
                                if (detlist.Rbd_item_cd != "" && detlist.Rbd_item_cd != null)
                                {
                                    curritem = detlist.Rbd_item_cd;
                                }
                                if (details.Count == _incremnt)
                                {
                                    combcount++;
                                    if (totcount == combcount)
                                    {
                                        if (detlist != null && detlist.Rdb_tot_comb_qty > 0)
                                        {
                                            decimal commqty = TotCombineItemQty(totinvlist, details, param, detlist.Rdb_anal3);
                                            if (Convert.ToDecimal(detlist.Rdb_tot_comb_qty) > commqty)
                                            {
                                                continue;
                                            }
                                        }
                                        totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                        decimal totqty = byloc.Where(a => a.Pc_code == execinvlist.Pc_code).Sum(a => a.Qty);
                                        if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                        {
                                            #region basic cal
                                            //Add to data list
                                            var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                            string nxtpc = "";
                                            foreach (var mainlist in dtlist)
                                            {
                                                //Check Re Report Option
                                                #region Rereport
                                                //Re report Filteration
                                                //all
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    totqty = totqty - mainlist.Qty;
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    totqty = totqty - mainlist.Qty;
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;

                                                    }
                                                }
                                                #endregion


                                                Int32 fwdtlmt = 0;
                                                Int32 fulldoqty = 0;
                                                //check forwdsales limit
                                                if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                                {
                                                    fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                    if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        //check full do
                                                        DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                        if (doqty != null)
                                                        {
                                                            if (doqty.Rows.Count > 0)
                                                            {
                                                                if (doqty.Rows[0][0].ToString() != "")
                                                                {
                                                                    fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                    if (mainlist.Qty > fulldoqty)
                                                                    {
                                                                        totqty = totqty - mainlist.Qty;
                                                                        continue;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }

                                                    }
                                                }

                                                //Check Discount Consider
                                                if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                                {
                                                    if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //Check Areas Limit
                                                decimal areas = 0;
                                                Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                                DataTable hpacc = new DataTable();

                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    //add limit and check again
                                                    hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                    if (hpacc != null)
                                                    {
                                                        if (hpacc.Rows.Count > 0)
                                                        {
                                                            foreach (var acc in hpacc.Rows)
                                                            {
                                                                if (hpacc.Rows[0][0].ToString() != "")
                                                                {
                                                                    areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (areas > 10)
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //check outstanding limit
                                                if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                                //check outstanding date limit
                                                //check settlment date and full settle
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                                if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                        if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //credit card types
                                                if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                totqty = totqty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                totqty = totqty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }


                                                if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                                {
                                                    PoductBonusData ob = new PoductBonusData();
                                                    ob.ExecCode = mainlist.Ex_code;
                                                    ob.ExecName = mainlist.Ex_name;
                                                    ob.InvoiceDate = mainlist.Inv_date;
                                                    ob.InvoiceNo = mainlist.Inv_no;
                                                    ob.ItemCode = mainlist.Item_code;
                                                    ob.ItemDesc = mainlist.Item_desc;
                                                    ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                    ob.TotAmmount = mainlist.Tot_amt;
                                                    ob.TotMarks = 0;
                                                    ob.circular = Code;
                                                    ob.frmdate = fromdate;
                                                    ob.todate = todate;
                                                    ob.pc = mainlist.Pc_code;
                                                    ob.loc = mainlist.Pc_code;
                                                    ob.FromsalesDate = salesfdate;
                                                    ob.TosalesDate = salestdate;
                                                    ob.ShowroomCat = detlist.Rdb_anal2;


                                                    if (detlist.Rdb_anal1 == "1")
                                                    {
                                                        ob.TotMarks = 0 * ob.Qty;
                                                    }

                                                    data.Add(ob);
                                                }
                                                nxtpc = mainlist.Pc_code;
                                            }
                                            if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                            {
                                                PoductBonusData ob1 = new PoductBonusData();
                                                ob1.ExecCode = dtlist.First().Ex_code;
                                                ob1.ExecName = dtlist.First().Ex_name;
                                                ob1.InvoiceDate = DateTime.Now.Date;
                                                ob1.InvoiceNo = "ALL";
                                                ob1.ItemCode = "ALL";
                                                ob1.ItemDesc = "ALL";
                                                ob1.Qty = 0;
                                                ob1.TotAmmount = 0;
                                                ob1.TotMarks = detlist.Rdb_marks;
                                                ob1.circular = Code;
                                                ob1.frmdate = fromdate;
                                                ob1.todate = todate;
                                                ob1.pc = dtlist.First().Pc_code;
                                                ob1.loc = dtlist.First().Pc_code;
                                                ob1.FromsalesDate = salesfdate;
                                                ob1.TosalesDate = salestdate;
                                                ob1.ShowroomCat = detlist.Rdb_anal2;


                                                if (detlist.Rdb_anal1 == "1")
                                                {
                                                    ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                                }

                                                data.Add(ob1);
                                            }
                                            #endregion
                                        }


                                        combcount = 1;
                                        earli = currno;
                                        previtm = curritem;
                                    }
                                    else
                                    {
                                        data.RemoveAll(a => a.Combineno == earli);

                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        string nxtpc = "";
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion


                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }
                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    continue;
                                                }
                                            }

                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }



                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = 0;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;
                                            ob.ShowroomCat = detlist.Rdb_anal2;


                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob.TotMarks = 0 * ob.Qty;
                                            }

                                            data.Add(ob);
                                            nxtpc = mainlist.Pc_code;
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;
                                        ob1.ShowroomCat = detlist.Rdb_anal2;


                                        if (detlist.Rdb_anal1 == "1")
                                        {
                                            ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                        }

                                        data.Add(ob1);
                                        #endregion
                                        earli = currno;
                                        previtm = curritem;
                                        combcount = 1;
                                    }
                                }
                                else if (earli == 0 || earli == currno)
                                {
                                    if (detlist != null && detlist.Rdb_tot_comb_qty > 0)
                                    {
                                        decimal commqty = TotCombineItemQty(totinvlist, details, param, detlist.Rdb_anal3);
                                        if (Convert.ToDecimal(detlist.Rdb_tot_comb_qty) > commqty)
                                        {
                                            continue;
                                        }
                                    }
                                    totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                    decimal totqty = byloc.Where(a => a.Pc_code == execinvlist.Pc_code).Sum(a => a.Qty);
                                    if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                    {
                                        if (curritem != previtm) combcount++;

                                        earli = currno;
                                        previtm = curritem;
                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        string nxtpc = "";
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                totqty = totqty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                totqty = totqty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;

                                                }
                                            }
                                            #endregion


                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    totqty = totqty - mainlist.Qty;
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }

                                                }
                                            }
                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                            }

                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                totqty = totqty - mainlist.Qty;
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                            }


                                            if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                            {
                                                PoductBonusData ob = new PoductBonusData();
                                                ob.ExecCode = mainlist.Ex_code;
                                                ob.ExecName = mainlist.Ex_name;
                                                ob.InvoiceDate = mainlist.Inv_date;
                                                ob.InvoiceNo = mainlist.Inv_no;
                                                ob.ItemCode = mainlist.Item_code;
                                                ob.ItemDesc = mainlist.Item_desc;
                                                ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                ob.TotAmmount = mainlist.Tot_amt;
                                                ob.TotMarks = 0;
                                                ob.circular = Code;
                                                ob.frmdate = fromdate;
                                                ob.todate = todate;
                                                ob.pc = mainlist.Pc_code;
                                                ob.loc = mainlist.Pc_code;
                                                ob.FromsalesDate = salesfdate;
                                                ob.TosalesDate = salestdate;
                                                ob.ShowroomCat = detlist.Rdb_anal2;


                                                if (detlist.Rdb_anal1 == "1")
                                                {
                                                    ob.TotMarks = 0 * ob.Qty;
                                                }

                                                data.Add(ob);
                                            }
                                            nxtpc = mainlist.Pc_code;
                                        }
                                        if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                        {
                                            PoductBonusData ob1 = new PoductBonusData();
                                            ob1.ExecCode = dtlist.First().Ex_code;
                                            ob1.ExecName = dtlist.First().Ex_name;
                                            ob1.InvoiceDate = DateTime.Now.Date;
                                            ob1.InvoiceNo = "ALL";
                                            ob1.ItemCode = "ALL";
                                            ob1.ItemDesc = "ALL";
                                            ob1.Qty = 0;
                                            ob1.TotAmmount = 0;
                                            ob1.TotMarks = detlist.Rdb_marks;
                                            ob1.circular = Code;
                                            ob1.frmdate = fromdate;
                                            ob1.todate = todate;
                                            ob1.pc = dtlist.First().Pc_code;
                                            ob1.loc = dtlist.First().Pc_code;
                                            ob1.FromsalesDate = salesfdate;
                                            ob1.TosalesDate = salestdate;
                                            ob1.ShowroomCat = detlist.Rdb_anal2;


                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                            }

                                            data.Add(ob1);
                                        }
                                        #endregion

                                    }
                                    else
                                    {
                                        earli = currno;
                                        previtm = curritem;
                                        continue;
                                    }
                                }
                                else
                                {
                                    if (totcount == combcount)
                                    {
                                        if (detlist != null && detlist.Rdb_tot_comb_qty > 0)
                                        {
                                            decimal commqty = TotCombineItemQty(totinvlist, details, param, detlist.Rdb_anal3);
                                            if (Convert.ToDecimal(detlist.Rdb_tot_comb_qty) > commqty)
                                            {
                                                continue;
                                            }
                                        }
                                        totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                        decimal totqty = byloc.Where(a => a.Pc_code == execinvlist.Pc_code).Sum(a => a.Qty);
                                        if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                        {
                                            #region basic cal
                                            //Add to data list
                                            var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                            string nxtpc = "";
                                            foreach (var mainlist in dtlist)
                                            {
                                                //Check Re Report Option
                                                #region Rereport
                                                //Re report Filteration
                                                //all
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    totqty = totqty - mainlist.Qty;
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    totqty = totqty - mainlist.Qty;
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;

                                                    }
                                                }
                                                #endregion


                                                Int32 fwdtlmt = 0;
                                                Int32 fulldoqty = 0;
                                                //check forwdsales limit
                                                if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                                {
                                                    fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                    if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        //check full do
                                                        DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                        if (doqty != null)
                                                        {
                                                            if (doqty.Rows.Count > 0)
                                                            {
                                                                if (doqty.Rows[0][0].ToString() != "")
                                                                {
                                                                    fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                    if (mainlist.Qty > fulldoqty)
                                                                    {
                                                                        totqty = totqty - mainlist.Qty;
                                                                        continue;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }

                                                    }
                                                }

                                                //Check Discount Consider
                                                if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                                {
                                                    if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //Check Areas Limit
                                                decimal areas = 0;
                                                Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                                DataTable hpacc = new DataTable();

                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    //add limit and check again
                                                    hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                    if (hpacc != null)
                                                    {
                                                        if (hpacc.Rows.Count > 0)
                                                        {
                                                            foreach (var acc in hpacc.Rows)
                                                            {
                                                                if (hpacc.Rows[0][0].ToString() != "")
                                                                {
                                                                    areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (areas > 10)
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //check outstanding limit
                                                if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                                {
                                                    totqty = totqty - mainlist.Qty;
                                                    continue;
                                                }
                                                //check outstanding date limit
                                                //check settlment date and full settle
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                                if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                        if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                //credit card types
                                                if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                totqty = totqty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }
                                                if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                totqty = totqty - mainlist.Qty;
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            totqty = totqty - mainlist.Qty;
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        totqty = totqty - mainlist.Qty;
                                                        continue;
                                                    }
                                                }

                                                if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                                {

                                                    PoductBonusData ob = new PoductBonusData();
                                                    ob.ExecCode = mainlist.Ex_code;
                                                    ob.ExecName = mainlist.Ex_name;
                                                    ob.InvoiceDate = mainlist.Inv_date;
                                                    ob.InvoiceNo = mainlist.Inv_no;
                                                    ob.ItemCode = mainlist.Item_code;
                                                    ob.ItemDesc = mainlist.Item_desc;
                                                    ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                    ob.TotAmmount = mainlist.Tot_amt;
                                                    ob.TotMarks = 0;
                                                    ob.circular = Code;
                                                    ob.frmdate = fromdate;
                                                    ob.todate = todate;
                                                    ob.pc = mainlist.Pc_code;
                                                    ob.loc = mainlist.Pc_code;
                                                    ob.FromsalesDate = salesfdate;
                                                    ob.TosalesDate = salestdate;
                                                    ob.ShowroomCat = detlist.Rdb_anal2;


                                                    if (detlist.Rdb_anal1 == "1")
                                                    {
                                                        ob.TotMarks = 0 * ob.Qty;
                                                    }

                                                    data.Add(ob);
                                                }
                                                nxtpc = mainlist.Pc_code;
                                            }
                                            if (totqty >= detlist.Rbd_from_val && totqty < detlist.Rdb_to_val)
                                            {
                                                PoductBonusData ob1 = new PoductBonusData();
                                                ob1.ExecCode = dtlist.First().Ex_code;
                                                ob1.ExecName = dtlist.First().Ex_name;
                                                ob1.InvoiceDate = DateTime.Now.Date;
                                                ob1.InvoiceNo = "ALL";
                                                ob1.ItemCode = "ALL";
                                                ob1.ItemDesc = "ALL";
                                                ob1.Qty = 0;
                                                ob1.TotAmmount = 0;
                                                ob1.TotMarks = detlist.Rdb_marks;
                                                ob1.circular = Code;
                                                ob1.frmdate = fromdate;
                                                ob1.todate = todate;
                                                ob1.pc = dtlist.First().Pc_code;
                                                ob1.loc = dtlist.First().Pc_code;
                                                ob1.FromsalesDate = salesfdate;
                                                ob1.TosalesDate = salestdate;
                                                ob1.ShowroomCat = detlist.Rdb_anal2;


                                                if (detlist.Rdb_anal1 == "1")
                                                {
                                                    ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                                }

                                                data.Add(ob1);
                                            }
                                            #endregion
                                        }


                                        combcount = 1;
                                        earli = currno;
                                        previtm = curritem;
                                    }
                                    else if (combcount != 0)
                                    {
                                        data.RemoveAll(a => a.Combineno == earli);

                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        string nxtpc = "";
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion


                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }
                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    continue;
                                                }
                                            }

                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_dt_lmt) && (mainlist.anal_7 - mainlist.anal_8) > 10)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }



                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = 0;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;
                                            ob.ShowroomCat = detlist.Rdb_anal2;


                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob.TotMarks = 0 * ob.Qty;
                                            }

                                            data.Add(ob);
                                            nxtpc = mainlist.Pc_code;
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;
                                        ob1.ShowroomCat = detlist.Rdb_anal2;


                                        if (detlist.Rdb_anal1 == "1")
                                        {
                                            ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                        }

                                        data.Add(ob1);
                                        #endregion
                                        earli = currno;
                                        previtm = curritem;
                                        combcount = 1;
                                    }
                                }
                            }
                            #endregion




                        }

                        #endregion
                    }
                    else if (detlist.Rbd_slab_base == "VALUE")
                    {
                        #region Value Base
                        invdetcalist.AddRange(totinvlist);
                        if (detlist.Rbd_cat1 != "" && detlist.Rbd_cat1 != null)
                        {
                            invdetcalist = invdetcalist.Where(a => a.Cat1 == detlist.Rbd_cat1).ToList();
                        }
                        if (detlist.Rbd_cat2 != "" && detlist.Rbd_cat2 != null)
                        {
                            invdetcalist = invdetcalist.Where(a => a.Cat2 == detlist.Rbd_cat2).ToList();
                        }
                        if (detlist.Rdb_brand != "" && detlist.Rdb_brand != null)
                        {
                            invdetcalist = invdetcalist.Where(a => a.Brand == detlist.Rdb_brand).ToList();
                        }
                        if (detlist.Rbd_model != "" && detlist.Rbd_model != null)
                        {
                            invdetcalist = invdetcalist.Where(a => a.Model == detlist.Rbd_model).ToList();
                        }
                        if (detlist.Rbd_item_cd != "" && detlist.Rbd_item_cd != null)
                        {
                            invdetcalist = invdetcalist.Where(a => a.Item_code == detlist.Rbd_item_cd).ToList();
                        }
                        if (detlist.Rbd_cus_cd != "" && detlist.Rbd_cus_cd != null)
                        {
                            invdetcalist = invdetcalist.Where(a => a.Cust_code == detlist.Rbd_cus_cd).ToList();
                        }
                        if (detlist.Rbd_pb != "" && detlist.Rbd_pb != null)
                        {
                            if (hdr.FirstOrDefault().Rbh_pb_cond == 1)
                            {
                                invdetcalist = invdetcalist.Where(a => a.Price_book == detlist.Rbd_pb).ToList();
                            }
                        }
                        if (detlist.Rbd_pl != "" && detlist.Rbd_pl != null)
                        {
                            if (hdr.FirstOrDefault().Rbh_pb_cond == 1)
                            {
                                invdetcalist = invdetcalist.Where(a => a.Pb_lvl == detlist.Rbd_pl).ToList();
                            }
                        }
                        if (detlist.Rbd_price_circul != "" && detlist.Rbd_price_circul != null)
                        {
                            if (hdr.FirstOrDefault().Rbh_anal5 == "1")
                            {
                                invdetcalist = invdetcalist.Where(a => a.PriceCircula == detlist.Rbd_price_circul).ToList();
                            }
                        }
                        if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                        {
                            invdetcalist = invdetcalist.Where(a => a.PromotionType == detlist.Rbd_pay_sub_tp).ToList();
                        }

                        invdetcalist = invdetcalist.GroupBy(l => new { l.Item_code, l.Model, l.Brand, l.Cat1, l.Cat2, l.Cust_code, l.Inv_type, l.Inv_subtp, l.Inv_no, l.Price_book, l.Pb_lvl, l.Ex_code })
.Select(cl => new DELI_SALE_NEW
{
    Ex_code = cl.First().Ex_code,
    Ex_name = cl.First().Ex_name,
    Inv_no = cl.First().Inv_no,
    Item_code = cl.First().Item_code,
    Qty = cl.Sum(a => a.Qty),
    Gross_amt = cl.Sum(a => a.Gross_amt),
    Net_amt = cl.Sum(a => a.Net_amt),
    Tot_amt = cl.Sum(a => a.Tot_amt),
    Cost_amt = cl.Sum(a => a.Cost_amt),
    Tax_amt = cl.Sum(a => a.Tax_amt),
    Disc_amt = cl.Sum(a => a.Disc_amt),
    Inv_subtp = cl.First().Inv_subtp,
    Inv_date = cl.First().Inv_date,
    Model = cl.First().Model,
    Cat1 = cl.First().Cat1,
    Cat2 = cl.First().Cat2,
    Brand = cl.First().Brand,
    Pc_code = cl.First().Pc_code,
    Inv_type = cl.First().Inv_type,
    Com_code = cl.First().Com_code,
    Price_book = cl.First().Price_book,
    Pb_lvl = cl.First().Pb_lvl,
    DiscountRate = cl.Max(a => a.DiscountRate)
}).ToList();

                        byexec = invdetcalist.GroupBy(l => new { l.Ex_code })
 .Select(cl => new DELI_SALE_NEW
 {
     Ex_code = cl.First().Ex_code,
     Ex_name = cl.First().Ex_name,
     Inv_no = cl.First().Inv_no,
     Item_code = cl.First().Item_code,
     Qty = cl.Sum(a => a.Qty),
     Gross_amt = cl.Sum(a => a.Gross_amt),
     Net_amt = cl.Sum(a => a.Net_amt),
     Tot_amt = cl.Sum(a => a.Tot_amt),
     Cost_amt = cl.Sum(a => a.Cost_amt),
     Tax_amt = cl.Sum(a => a.Tax_amt),
     Disc_amt = cl.Sum(a => a.Disc_amt),
     Inv_subtp = cl.First().Inv_subtp,
     Inv_date = cl.First().Inv_date,
     Model = cl.First().Model,
     Cat1 = cl.First().Cat1,
     Cat2 = cl.First().Cat2,
     Brand = cl.First().Brand,
     Pc_code = cl.First().Pc_code,
     Inv_type = cl.First().Inv_type,
     Com_code = cl.First().Com_code,
     Price_book = cl.First().Price_book,
     Pb_lvl = cl.First().Pb_lvl,
     DiscountRate = cl.Max(a => a.DiscountRate)
 }).ToList();
                        byloc = invdetcalist.GroupBy(l => new { l.Pc_code })
 .Select(cl => new DELI_SALE_NEW
 {
     Ex_code = cl.First().Ex_code,
     Ex_name = cl.First().Ex_name,
     Inv_no = cl.First().Inv_no,
     Item_code = cl.First().Item_code,
     Qty = cl.Sum(a => a.Qty),
     Gross_amt = cl.Sum(a => a.Gross_amt),
     Net_amt = cl.Sum(a => a.Net_amt),
     Tot_amt = cl.Sum(a => a.Tot_amt),
     Cost_amt = cl.Sum(a => a.Cost_amt),
     Tax_amt = cl.Sum(a => a.Tax_amt),
     Disc_amt = cl.Sum(a => a.Disc_amt),
     Inv_subtp = cl.First().Inv_subtp,
     Inv_date = cl.First().Inv_date,
     Model = cl.First().Model,
     Cat1 = cl.First().Cat1,
     Cat2 = cl.First().Cat2,
     Brand = cl.First().Brand,
     Pc_code = cl.First().Pc_code,
     Inv_type = cl.First().Inv_type,
     Com_code = cl.First().Com_code,
     Price_book = cl.First().Price_book,
     Pb_lvl = cl.First().Pb_lvl,
     DiscountRate = cl.Max(a => a.DiscountRate)
 }).ToList();
                        foreach (var execinvlist in byexec)
                        {
                            if (detlist.Rdb_anal2 == "Exec" && hdr.First().Rbh_anal2 != "1")
                            {
                                #region exc wise
                                if (execinvlist.Tot_amt >= detlist.Rbd_from_val && execinvlist.Tot_amt < detlist.Rdb_to_val)
                                {
                                    //Add to data list
                                    var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                    foreach (var mainlist in dtlist)
                                    {
                                        //Check Re Report Option
                                        #region Rereport
                                        //Re report Filteration
                                        //all
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                {
                                                    if (Oldinvdate.Date != DateTime.Now.Date)
                                                    {
                                                        if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                        //period
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                {
                                                    if (Oldinvdate.Date != DateTime.Now.Date)
                                                    {
                                                        if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                        //period
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                continue;

                                            }
                                        }
                                        #endregion

                                        Int32 fwdtlmt = 0;
                                        Int32 fulldoqty = 0;
                                        //check forwdsales limit
                                        if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                        {
                                            fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                            if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                //check full do
                                                DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                if (doqty != null)
                                                {
                                                    if (doqty.Rows.Count > 0)
                                                    {
                                                        if (doqty.Rows[0][0].ToString() != "")
                                                        {
                                                            fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                            if (mainlist.Qty > fulldoqty)
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }

                                            }
                                        }
                                        //Check Discount Consider
                                        if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                        {
                                            if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                            {
                                                continue;
                                            }
                                        }
                                        //Check Areas Limit
                                        //Check Areas Limit
                                        decimal areas = 0;
                                        Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                        DataTable hpacc = new DataTable();

                                        hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                        if (hpacc != null)
                                        {
                                            if (hpacc.Rows.Count > 0)
                                            {
                                                foreach (var acc in hpacc.Rows)
                                                {
                                                    if (hpacc.Rows[0][0].ToString() != "")
                                                    {
                                                        areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                    }
                                                }
                                            }
                                        }
                                        if (areas > 10)
                                        {
                                            //add limit and check again
                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                continue;
                                            }
                                        }
                                        //check outstanding limit
                                        if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                        {
                                            continue;
                                        }
                                        //check outstanding date limit
                                        //check settlment date and full settle
                                        DateTime setldt = DateTime.Now;
                                        decimal settlammount = 0;
                                        DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                        if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                        {
                                            if (setdtdt.Rows.Count > 0)
                                            {
                                                if (setdtdt.Rows[0][1].ToString() == "")
                                                {
                                                    continue;
                                                }
                                                setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                        //credit card types
                                        if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                        {
                                            Int32 paytypecount = 0;
                                            DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                            if (chkpaytype != null)
                                            {
                                                if (chkpaytype.Rows.Count > 0)
                                                {
                                                    if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                    {
                                                        paytypecount = chkpaytype.Rows.Count;

                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                        if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                        {
                                            Int32 paytypecount = 0;
                                            DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                            if (chkpaytype != null)
                                            {
                                                if (chkpaytype.Rows.Count > 0)
                                                {
                                                    if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                    {
                                                        paytypecount = chkpaytype.Rows.Count;

                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }

                                        PoductBonusData ob = new PoductBonusData();
                                        ob.ExecCode = mainlist.Ex_code;
                                        ob.ExecName = mainlist.Ex_name;
                                        ob.InvoiceDate = mainlist.Inv_date;
                                        ob.InvoiceNo = mainlist.Inv_no;
                                        ob.ItemCode = mainlist.Item_code;
                                        ob.ItemDesc = mainlist.Item_desc;
                                        ob.Qty = Convert.ToInt32(mainlist.Qty);
                                        ob.TotAmmount = mainlist.Tot_amt;
                                        ob.TotMarks = detlist.Rdb_marks;
                                        ob.circular = Code;
                                        ob.frmdate = fromdate;
                                        ob.todate = todate;
                                        ob.pc = mainlist.Pc_code;
                                        ob.loc = mainlist.Pc_code;
                                        ob.FromsalesDate = salesfdate;
                                        ob.TosalesDate = salestdate;
                                        data.Add(ob);
                                    }
                                }
                                else
                                {
                                    continue;
                                }
                                #endregion
                            }
                            else if ((detlist.Rdb_anal2 == "Loc" || detlist.Rdb_anal2 == "Area" || detlist.Rdb_anal2 == "Region" || detlist.Rdb_anal2 == "Zone") && hdr.First().Rbh_anal2 != "1")
                            {
                                #region loc wise
                                decimal loctotal = 0;

                                loctotal = byloc.Where(a => a.Pc_code == execinvlist.Pc_code).Sum(a => a.Tot_amt);
                                if (loctotal >= detlist.Rbd_from_val && loctotal < detlist.Rdb_to_val)
                                {
                                    //Add to data list
                                    var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                    foreach (var mainlist in dtlist)
                                    {
                                        //Check Re Report Option
                                        #region Rereport
                                        //Re report Filteration
                                        //all
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                {
                                                    if (Oldinvdate.Date != DateTime.Now.Date)
                                                    {
                                                        if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                }

                                            }

                                        }
                                        //period
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                {
                                                    if (Oldinvdate.Date != DateTime.Now.Date)
                                                    {
                                                        if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                        {

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                }

                                            }
                                        }
                                        //period
                                        if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                        {
                                            string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                            if (Crno != "")
                                            {
                                                continue;

                                            }
                                        }
                                        #endregion

                                        Int32 fwdtlmt = 0;
                                        Int32 fulldoqty = 0;
                                        //check forwdsales limit
                                        if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                        {
                                            fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                            if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                //check full do
                                                DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                if (doqty != null)
                                                {
                                                    if (doqty.Rows.Count > 0)
                                                    {
                                                        if (doqty.Rows[0][0].ToString() != "")
                                                        {
                                                            fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                            if (mainlist.Qty > fulldoqty)
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }

                                            }
                                        }
                                        //Check Discount Consider
                                        if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                        {
                                            if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                            {
                                                continue;
                                            }
                                        }
                                        //Check Areas Limit
                                        //Check Areas Limit
                                        decimal areas = 0;
                                        Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                        DataTable hpacc = new DataTable();

                                        hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                        if (hpacc != null)
                                        {
                                            if (hpacc.Rows.Count > 0)
                                            {
                                                foreach (var acc in hpacc.Rows)
                                                {
                                                    if (hpacc.Rows[0][0].ToString() != "")
                                                    {
                                                        areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                    }
                                                }
                                            }
                                        }
                                        if (areas > 10)
                                        {
                                            //add limit and check again
                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                continue;
                                            }
                                        }
                                        //check outstanding limit
                                        if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                        {
                                            continue;
                                        }
                                        //check outstanding date limit
                                        //check settlment date and full settle
                                        DateTime setldt = DateTime.Now;
                                        decimal settlammount = 0;
                                        DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                        if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                        {
                                            if (setdtdt.Rows.Count > 0)
                                            {
                                                if (setdtdt.Rows[0][1].ToString() == "")
                                                {
                                                    continue;
                                                }
                                                setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                        //credit card types
                                        if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                        {
                                            Int32 paytypecount = 0;
                                            DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                            if (chkpaytype != null)
                                            {
                                                if (chkpaytype.Rows.Count > 0)
                                                {
                                                    if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                    {
                                                        paytypecount = chkpaytype.Rows.Count;

                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                        if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                        {
                                            Int32 paytypecount = 0;
                                            DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                            if (chkpaytype != null)
                                            {
                                                if (chkpaytype.Rows.Count > 0)
                                                {
                                                    if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                    {
                                                        paytypecount = chkpaytype.Rows.Count;

                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }

                                        PoductBonusData ob = new PoductBonusData();
                                        ob.ExecCode = mainlist.Ex_code;
                                        ob.ExecName = mainlist.Ex_name;
                                        ob.InvoiceDate = mainlist.Inv_date;
                                        ob.InvoiceNo = mainlist.Inv_no;
                                        ob.ItemCode = mainlist.Item_code;
                                        ob.ItemDesc = mainlist.Item_desc;
                                        ob.Qty = Convert.ToInt32(mainlist.Qty);
                                        ob.TotAmmount = mainlist.Tot_amt;
                                        ob.TotMarks = detlist.Rdb_marks;
                                        ob.circular = Code;
                                        ob.frmdate = fromdate;
                                        ob.todate = todate;
                                        ob.pc = mainlist.Pc_code;
                                        ob.loc = mainlist.Pc_code;
                                        ob.FromsalesDate = salesfdate;
                                        ob.TosalesDate = salestdate;
                                        ob.ShowroomCat = detlist.Rdb_anal2;
                                        data.Add(ob);
                                    }
                                }
                                else
                                {
                                    continue;
                                }
                                #endregion
                            }
                            #region combineitem- exec
                            else if (detlist.Rdb_anal2 == "Exec" && hdr.First().Rbh_anal2 == "1")
                            {

                                currno = Convert.ToInt16(detlist.Rdb_anal3);
                                if (detlist.Rbd_cat1 != "" && detlist.Rbd_cat1 != null)
                                {
                                    curritem = detlist.Rbd_cat1;
                                }
                                if (detlist.Rbd_cat2 != "" && detlist.Rbd_cat2 != null)
                                {
                                    curritem = detlist.Rbd_cat2;
                                }
                                if (detlist.Rdb_brand != "" && detlist.Rdb_brand != null)
                                {
                                    curritem = detlist.Rdb_brand;
                                }
                                if (detlist.Rbd_model != "" && detlist.Rbd_model != null)
                                {
                                    curritem = detlist.Rbd_model;
                                }
                                if (detlist.Rbd_item_cd != "" && detlist.Rbd_item_cd != null)
                                {
                                    curritem = detlist.Rbd_item_cd;
                                }
                                if (details.Count == _incremnt)
                                {
                                    combcount++;
                                    if (totcount == combcount)
                                    {
                                        if (execinvlist.Tot_amt >= detlist.Rbd_from_val && execinvlist.Tot_amt < detlist.Rdb_to_val)
                                        {
                                            #region basic cal
                                            //Add to data list
                                            var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                            foreach (var mainlist in dtlist)
                                            {
                                                //Check Re Report Option
                                                #region Rereport
                                                //Re report Filteration
                                                //all
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        continue;

                                                    }
                                                }
                                                #endregion

                                                Int32 fwdtlmt = 0;
                                                Int32 fulldoqty = 0;
                                                //check forwdsales limit
                                                if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                                {
                                                    fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                    if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                    {
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        //check full do
                                                        DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                        if (doqty != null)
                                                        {
                                                            if (doqty.Rows.Count > 0)
                                                            {
                                                                if (doqty.Rows[0][0].ToString() != "")
                                                                {
                                                                    fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                    if (mainlist.Qty > fulldoqty)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }

                                                    }
                                                }
                                                //Check Discount Consider
                                                if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                                {
                                                    if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //Check Areas Limit
                                                //Check Areas Limit
                                                decimal areas = 0;
                                                Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                                DataTable hpacc = new DataTable();

                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    //add limit and check again
                                                    hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                    if (hpacc != null)
                                                    {
                                                        if (hpacc.Rows.Count > 0)
                                                        {
                                                            foreach (var acc in hpacc.Rows)
                                                            {
                                                                if (hpacc.Rows[0][0].ToString() != "")
                                                                {
                                                                    areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (areas > 10)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //check outstanding limit
                                                if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                                {
                                                    continue;
                                                }
                                                //check outstanding date limit
                                                //check settlment date and full settle
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                                if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                        if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //credit card types
                                                if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }

                                                PoductBonusData ob = new PoductBonusData();
                                                ob.ExecCode = mainlist.Ex_code;
                                                ob.ExecName = mainlist.Ex_name;
                                                ob.InvoiceDate = mainlist.Inv_date;
                                                ob.InvoiceNo = mainlist.Inv_no;
                                                ob.ItemCode = mainlist.Item_code;
                                                ob.ItemDesc = mainlist.Item_desc;
                                                ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                ob.TotAmmount = mainlist.Tot_amt;
                                                ob.TotMarks = detlist.Rdb_marks;
                                                ob.circular = Code;
                                                ob.frmdate = fromdate;
                                                ob.todate = todate;
                                                ob.pc = mainlist.Pc_code;
                                                ob.loc = mainlist.Pc_code;
                                                ob.FromsalesDate = salesfdate;
                                                ob.TosalesDate = salestdate;
                                                data.Add(ob);
                                            }
                                            PoductBonusData ob1 = new PoductBonusData();
                                            ob1.ExecCode = dtlist.First().Ex_code;
                                            ob1.ExecName = dtlist.First().Ex_name;
                                            ob1.InvoiceDate = DateTime.Now.Date;
                                            ob1.InvoiceNo = "ALL";
                                            ob1.ItemCode = "ALL";
                                            ob1.ItemDesc = "ALL";
                                            ob1.Qty = 0;
                                            ob1.TotAmmount = 0;
                                            ob1.TotMarks = detlist.Rdb_marks;
                                            ob1.circular = Code;
                                            ob1.frmdate = fromdate;
                                            ob1.todate = todate;
                                            ob1.pc = dtlist.First().Pc_code;
                                            ob1.loc = dtlist.First().Pc_code;
                                            ob1.FromsalesDate = salesfdate;
                                            ob1.TosalesDate = salestdate;


                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                            }

                                            data.Add(ob1);
                                            #endregion
                                        }

                                        combcount = 1;
                                        earli = currno;
                                    }
                                    else
                                    {
                                        data.RemoveAll(a => a.Combineno == earli);

                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion

                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }
                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    continue;
                                                }
                                            }
                                            //Check Areas Limit
                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }

                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = detlist.Rdb_marks;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;
                                            data.Add(ob);
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;


                                        if (detlist.Rdb_anal1 == "1")
                                        {
                                            ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                        }

                                        data.Add(ob1);
                                        #endregion
                                        earli = currno;
                                        combcount = 1;
                                    }

                                }
                                else if (earli == 0 || earli == currno)
                                {
                                    totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                    if (execinvlist.Tot_amt >= detlist.Rbd_from_val && execinvlist.Tot_amt < detlist.Rdb_to_val)
                                    {
                                        if (curritem != previtm) combcount++;
                                        earli = currno;

                                        //
                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion

                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }
                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    continue;
                                                }
                                            }
                                            //Check Areas Limit
                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }

                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = detlist.Rdb_marks;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;
                                            data.Add(ob);
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;


                                        if (detlist.Rdb_anal1 == "1")
                                        {
                                            ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                        }

                                        data.Add(ob1);
                                        #endregion

                                    }
                                    else
                                    {
                                        earli = currno;
                                        continue;
                                    }
                                }
                                else
                                {
                                    if (totcount == combcount)
                                    {
                                        if (execinvlist.Tot_amt >= detlist.Rbd_from_val && execinvlist.Tot_amt < detlist.Rdb_to_val)
                                        {
                                            #region basic cal
                                            //Add to data list
                                            var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                            foreach (var mainlist in dtlist)
                                            {
                                                //Check Re Report Option
                                                #region Rereport
                                                //Re report Filteration
                                                //all
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        continue;

                                                    }
                                                }
                                                #endregion

                                                Int32 fwdtlmt = 0;
                                                Int32 fulldoqty = 0;
                                                //check forwdsales limit
                                                if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                                {
                                                    fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                    if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                    {
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        //check full do
                                                        DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                        if (doqty != null)
                                                        {
                                                            if (doqty.Rows.Count > 0)
                                                            {
                                                                if (doqty.Rows[0][0].ToString() != "")
                                                                {
                                                                    fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                    if (mainlist.Qty > fulldoqty)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }

                                                    }
                                                }
                                                //Check Discount Consider
                                                if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                                {
                                                    if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //Check Areas Limit
                                                //Check Areas Limit
                                                decimal areas = 0;
                                                Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                                DataTable hpacc = new DataTable();

                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    //add limit and check again
                                                    hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                    if (hpacc != null)
                                                    {
                                                        if (hpacc.Rows.Count > 0)
                                                        {
                                                            foreach (var acc in hpacc.Rows)
                                                            {
                                                                if (hpacc.Rows[0][0].ToString() != "")
                                                                {
                                                                    areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (areas > 10)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //check outstanding limit
                                                if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                                {
                                                    continue;
                                                }
                                                //check outstanding date limit
                                                //check settlment date and full settle
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                                if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                        if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //credit card types
                                                if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }

                                                PoductBonusData ob = new PoductBonusData();
                                                ob.ExecCode = mainlist.Ex_code;
                                                ob.ExecName = mainlist.Ex_name;
                                                ob.InvoiceDate = mainlist.Inv_date;
                                                ob.InvoiceNo = mainlist.Inv_no;
                                                ob.ItemCode = mainlist.Item_code;
                                                ob.ItemDesc = mainlist.Item_desc;
                                                ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                ob.TotAmmount = mainlist.Tot_amt;
                                                ob.TotMarks = detlist.Rdb_marks;
                                                ob.circular = Code;
                                                ob.frmdate = fromdate;
                                                ob.todate = todate;
                                                ob.pc = mainlist.Pc_code;
                                                ob.loc = mainlist.Pc_code;
                                                ob.FromsalesDate = salesfdate;
                                                ob.TosalesDate = salestdate;
                                                data.Add(ob);
                                            }
                                            PoductBonusData ob1 = new PoductBonusData();
                                            ob1.ExecCode = dtlist.First().Ex_code;
                                            ob1.ExecName = dtlist.First().Ex_name;
                                            ob1.InvoiceDate = DateTime.Now.Date;
                                            ob1.InvoiceNo = "ALL";
                                            ob1.ItemCode = "ALL";
                                            ob1.ItemDesc = "ALL";
                                            ob1.Qty = 0;
                                            ob1.TotAmmount = 0;
                                            ob1.TotMarks = detlist.Rdb_marks;
                                            ob1.circular = Code;
                                            ob1.frmdate = fromdate;
                                            ob1.todate = todate;
                                            ob1.pc = dtlist.First().Pc_code;
                                            ob1.loc = dtlist.First().Pc_code;
                                            ob1.FromsalesDate = salesfdate;
                                            ob1.TosalesDate = salestdate;


                                            if (detlist.Rdb_anal1 == "1")
                                            {
                                                ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                            }

                                            data.Add(ob1);
                                            #endregion
                                        }

                                        combcount = 1;
                                        earli = currno;
                                    }
                                    else
                                    {
                                        data.RemoveAll(a => a.Combineno == earli);

                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion

                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }
                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    continue;
                                                }
                                            }
                                            //Check Areas Limit
                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }

                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = detlist.Rdb_marks;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;
                                            data.Add(ob);
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;


                                        if (detlist.Rdb_anal1 == "1")
                                        {
                                            ob1.TotMarks = detlist.Rdb_marks * ob1.Qty;
                                        }

                                        data.Add(ob1);
                                        #endregion
                                        earli = currno;
                                        combcount = 1;
                                    }
                                }
                            }
                            #endregion
                            #region combineitem- LOC
                            else if ((detlist.Rdb_anal2 == "Loc" || detlist.Rdb_anal2 == "Area" || detlist.Rdb_anal2 == "Region" || detlist.Rdb_anal2 == "Zone") && hdr.First().Rbh_anal2 == "1")
                            {
                                currno = Convert.ToInt16(detlist.Rdb_anal3);
                                if (detlist.Rbd_cat1 != "" && detlist.Rbd_cat1 != null)
                                {
                                    curritem = detlist.Rbd_cat1;
                                }
                                if (detlist.Rbd_cat2 != "" && detlist.Rbd_cat2 != null)
                                {
                                    curritem = detlist.Rbd_cat2;
                                }
                                if (detlist.Rdb_brand != "" && detlist.Rdb_brand != null)
                                {
                                    curritem = detlist.Rdb_brand;
                                }
                                if (detlist.Rbd_model != "" && detlist.Rbd_model != null)
                                {
                                    curritem = detlist.Rbd_model;
                                }
                                if (detlist.Rbd_item_cd != "" && detlist.Rbd_item_cd != null)
                                {
                                    curritem = detlist.Rbd_item_cd;
                                }
                                if (details.Count == _incremnt)
                                {
                                    combcount++;
                                    if (totcount == combcount)
                                    {
                                        totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                        decimal loctotal = 0;
                                        if (loctotal >= detlist.Rbd_from_val && loctotal < detlist.Rdb_to_val)
                                        {
                                            #region basic cal
                                            //Add to data list
                                            var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                            foreach (var mainlist in dtlist)
                                            {
                                                //Check Re Report Option
                                                #region Rereport
                                                //Re report Filteration
                                                //all
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        continue;

                                                    }
                                                }
                                                #endregion

                                                Int32 fwdtlmt = 0;
                                                Int32 fulldoqty = 0;
                                                //check forwdsales limit
                                                if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                                {
                                                    fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                    if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                    {
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        //check full do
                                                        DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                        if (doqty != null)
                                                        {
                                                            if (doqty.Rows.Count > 0)
                                                            {
                                                                if (doqty.Rows[0][0].ToString() != "")
                                                                {
                                                                    fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                    if (mainlist.Qty > fulldoqty)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }

                                                    }
                                                }
                                                //Check Discount Consider
                                                if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                                {
                                                    if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //Check Areas Limit
                                                //Check Areas Limit
                                                decimal areas = 0;
                                                Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                                DataTable hpacc = new DataTable();

                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    //add limit and check again
                                                    hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                    if (hpacc != null)
                                                    {
                                                        if (hpacc.Rows.Count > 0)
                                                        {
                                                            foreach (var acc in hpacc.Rows)
                                                            {
                                                                if (hpacc.Rows[0][0].ToString() != "")
                                                                {
                                                                    areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (areas > 10)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //check outstanding limit
                                                if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                                {
                                                    continue;
                                                }
                                                //check outstanding date limit
                                                //check settlment date and full settle
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                                if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                        if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //credit card types
                                                if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }

                                                PoductBonusData ob = new PoductBonusData();
                                                ob.ExecCode = mainlist.Ex_code;
                                                ob.ExecName = mainlist.Ex_name;
                                                ob.InvoiceDate = mainlist.Inv_date;
                                                ob.InvoiceNo = mainlist.Inv_no;
                                                ob.ItemCode = mainlist.Item_code;
                                                ob.ItemDesc = mainlist.Item_desc;
                                                ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                ob.TotAmmount = mainlist.Tot_amt;
                                                ob.TotMarks = 0;
                                                ob.circular = Code;
                                                ob.frmdate = fromdate;
                                                ob.todate = todate;
                                                ob.pc = mainlist.Pc_code;
                                                ob.loc = mainlist.Pc_code;
                                                ob.FromsalesDate = salesfdate;
                                                ob.TosalesDate = salestdate;
                                                ob.ShowroomCat = detlist.Rdb_anal2;
                                                data.Add(ob);
                                            }
                                            PoductBonusData ob1 = new PoductBonusData();
                                            ob1.ExecCode = dtlist.First().Ex_code;
                                            ob1.ExecName = dtlist.First().Ex_name;
                                            ob1.InvoiceDate = DateTime.Now.Date;
                                            ob1.InvoiceNo = "ALL";
                                            ob1.ItemCode = "ALL";
                                            ob1.ItemDesc = "ALL";
                                            ob1.Qty = 0;
                                            ob1.TotAmmount = 0;
                                            ob1.TotMarks = detlist.Rdb_marks;
                                            ob1.circular = Code;
                                            ob1.frmdate = fromdate;
                                            ob1.todate = todate;
                                            ob1.pc = dtlist.First().Pc_code;
                                            ob1.loc = dtlist.First().Pc_code;
                                            ob1.FromsalesDate = salesfdate;
                                            ob1.TosalesDate = salestdate;
                                            ob1.ShowroomCat = detlist.Rdb_anal2;
                                            data.Add(ob1);
                                            #endregion
                                        }


                                        combcount = 1;
                                        earli = currno;
                                        previtm = curritem;
                                    }
                                    else
                                    {
                                        data.RemoveAll(a => a.Combineno == earli);

                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion

                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }
                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    continue;
                                                }
                                            }
                                            //Check Areas Limit
                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }

                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = 0;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;
                                            ob.ShowroomCat = detlist.Rdb_anal2;
                                            data.Add(ob);
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;
                                        ob1.ShowroomCat = detlist.Rdb_anal2;
                                        data.Add(ob1);
                                        #endregion
                                        earli = currno;
                                        previtm = curritem;
                                        combcount = 1;
                                    }
                                }
                                else if (earli == 0 || earli == currno)
                                {
                                    totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                    decimal loctotal = 0;
                                    loctotal = byloc.Where(a => a.Pc_code == execinvlist.Pc_code).Sum(a => a.Tot_amt);
                                    if (loctotal >= detlist.Rbd_from_val && loctotal < detlist.Rdb_to_val)
                                    {
                                        if (curritem != previtm) combcount++;

                                        earli = currno;
                                        previtm = curritem;
                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion

                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }
                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    continue;
                                                }
                                            }
                                            //Check Areas Limit
                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }

                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = 0;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;
                                            ob.ShowroomCat = detlist.Rdb_anal2;
                                            data.Add(ob);
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;
                                        ob1.ShowroomCat = detlist.Rdb_anal2;
                                        data.Add(ob1);
                                        #endregion

                                    }
                                    else
                                    {
                                        earli = currno;
                                        previtm = curritem;
                                        continue;
                                    }
                                }
                                else
                                {
                                    if (totcount == combcount)
                                    {
                                        totcount = details.Where(a => a.Rdb_anal3 == currno.ToString()).Count();
                                        decimal loctotal = 0;
                                        if (loctotal >= detlist.Rbd_from_val && loctotal < detlist.Rdb_to_val)
                                        {
                                            #region basic cal
                                            //Add to data list
                                            var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                            foreach (var mainlist in dtlist)
                                            {
                                                //Check Re Report Option
                                                #region Rereport
                                                //Re report Filteration
                                                //all
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                        if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                        {
                                                            if (Oldinvdate.Date != DateTime.Now.Date)
                                                            {
                                                                if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                                {

                                                                }
                                                                else
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                                //period
                                                if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                                {
                                                    string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                    if (Crno != "")
                                                    {
                                                        continue;

                                                    }
                                                }
                                                #endregion

                                                Int32 fwdtlmt = 0;
                                                Int32 fulldoqty = 0;
                                                //check forwdsales limit
                                                if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                                {
                                                    fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                    if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                    {
                                                        continue;
                                                    }
                                                    else
                                                    {
                                                        //check full do
                                                        DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                        if (doqty != null)
                                                        {
                                                            if (doqty.Rows.Count > 0)
                                                            {
                                                                if (doqty.Rows[0][0].ToString() != "")
                                                                {
                                                                    fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                    if (mainlist.Qty > fulldoqty)
                                                                    {
                                                                        continue;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }

                                                    }
                                                }
                                                //Check Discount Consider
                                                if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                                {
                                                    if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //Check Areas Limit
                                                //Check Areas Limit
                                                decimal areas = 0;
                                                Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                                DataTable hpacc = new DataTable();

                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    //add limit and check again
                                                    hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                    if (hpacc != null)
                                                    {
                                                        if (hpacc.Rows.Count > 0)
                                                        {
                                                            foreach (var acc in hpacc.Rows)
                                                            {
                                                                if (hpacc.Rows[0][0].ToString() != "")
                                                                {
                                                                    areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (areas > 10)
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //check outstanding limit
                                                if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                                {
                                                    continue;
                                                }
                                                //check outstanding date limit
                                                //check settlment date and full settle
                                                DateTime setldt = DateTime.Now;
                                                decimal settlammount = 0;
                                                DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                                if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                                {
                                                    if (setdtdt.Rows.Count > 0)
                                                    {
                                                        if (setdtdt.Rows[0][1].ToString() == "")
                                                        {
                                                            continue;
                                                        }
                                                        setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                        settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                        if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                //credit card types
                                                if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                                {
                                                    Int32 paytypecount = 0;
                                                    DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                    if (chkpaytype != null)
                                                    {
                                                        if (chkpaytype.Rows.Count > 0)
                                                        {
                                                            if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                            {
                                                                paytypecount = chkpaytype.Rows.Count;

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }

                                                PoductBonusData ob = new PoductBonusData();
                                                ob.ExecCode = mainlist.Ex_code;
                                                ob.ExecName = mainlist.Ex_name;
                                                ob.InvoiceDate = mainlist.Inv_date;
                                                ob.InvoiceNo = mainlist.Inv_no;
                                                ob.ItemCode = mainlist.Item_code;
                                                ob.ItemDesc = mainlist.Item_desc;
                                                ob.Qty = Convert.ToInt32(mainlist.Qty);
                                                ob.TotAmmount = mainlist.Tot_amt;
                                                ob.TotMarks = 0;
                                                ob.circular = Code;
                                                ob.frmdate = fromdate;
                                                ob.todate = todate;
                                                ob.pc = mainlist.Pc_code;
                                                ob.loc = mainlist.Pc_code;
                                                ob.FromsalesDate = salesfdate;
                                                ob.TosalesDate = salestdate;
                                                ob.ShowroomCat = detlist.Rdb_anal2;
                                                data.Add(ob);
                                            }
                                            PoductBonusData ob1 = new PoductBonusData();
                                            ob1.ExecCode = dtlist.First().Ex_code;
                                            ob1.ExecName = dtlist.First().Ex_name;
                                            ob1.InvoiceDate = DateTime.Now.Date;
                                            ob1.InvoiceNo = "ALL";
                                            ob1.ItemCode = "ALL";
                                            ob1.ItemDesc = "ALL";
                                            ob1.Qty = 0;
                                            ob1.TotAmmount = 0;
                                            ob1.TotMarks = detlist.Rdb_marks;
                                            ob1.circular = Code;
                                            ob1.frmdate = fromdate;
                                            ob1.todate = todate;
                                            ob1.pc = dtlist.First().Pc_code;
                                            ob1.loc = dtlist.First().Pc_code;
                                            ob1.FromsalesDate = salesfdate;
                                            ob1.TosalesDate = salestdate;
                                            ob1.ShowroomCat = detlist.Rdb_anal2;
                                            data.Add(ob1);
                                            #endregion
                                        }


                                        combcount = 1;
                                        earli = currno;
                                        previtm = curritem;
                                    }
                                    else
                                    {
                                        data.RemoveAll(a => a.Combineno == earli);

                                        #region basic cal
                                        //Add to data list
                                        var dtlist = invdetcalist.Where(a => a.Ex_code == execinvlist.Ex_code).OrderBy(a => a.Pc_code).ToList();
                                        foreach (var mainlist in dtlist)
                                        {
                                            //Check Re Report Option
                                            #region Rereport
                                            //Re report Filteration
                                            //all
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "A")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate.AddMonths(-1 * Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3)) <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }

                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "M")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    DateTime Oldinvdate = _financialDAL.GetCreditNoteInvDate(Crno);
                                                    if (hdr.FirstOrDefault().Rbh_anal3 != "" && Convert.ToInt32(hdr.FirstOrDefault().Rbh_anal3) > 0)
                                                    {
                                                        if (Oldinvdate.Date != DateTime.Now.Date)
                                                        {
                                                            if (fromdate <= Oldinvdate && Oldinvdate <= todate)
                                                            {

                                                            }
                                                            else
                                                            {
                                                                continue;
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                            //period
                                            if (hdr.FirstOrDefault().Rbh_rerept_opt == "N")
                                            {
                                                string Crno = _financialDAL.GetCreditNoteNo(mainlist.Inv_no);
                                                if (Crno != "")
                                                {
                                                    continue;

                                                }
                                            }
                                            #endregion

                                            Int32 fwdtlmt = 0;
                                            Int32 fulldoqty = 0;
                                            //check forwdsales limit
                                            if (hdr.FirstOrDefault().Rbh_fw_sale_lmt > 0)
                                            {
                                                fwdtlmt = hdr.FirstOrDefault().Rbh_fw_sale_lmt;
                                                if (mainlist.Inv_date.AddDays(fwdtlmt) < mainlist.Do_date)
                                                {
                                                    continue;
                                                }
                                                else
                                                {
                                                    //check full do
                                                    DataTable doqty = _financialDAL.Sp_Check_Inv_fullDo(mainlist.Inv_no, mainlist.Item_code);
                                                    if (doqty != null)
                                                    {
                                                        if (doqty.Rows.Count > 0)
                                                        {
                                                            if (doqty.Rows[0][0].ToString() != "")
                                                            {
                                                                fulldoqty = Convert.ToInt32(doqty.Rows[0][0].ToString());
                                                                if (mainlist.Qty > fulldoqty)
                                                                {
                                                                    continue;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }

                                                }
                                            }
                                            //Check Discount Consider
                                            if (hdr.FirstOrDefault().Rbh_disc_con < 100)
                                            {
                                                if (mainlist.DiscountRate > hdr.FirstOrDefault().Rbh_disc_con)
                                                {
                                                    continue;
                                                }
                                            }
                                            //Check Areas Limit
                                            //Check Areas Limit
                                            decimal areas = 0;
                                            Int32 areaslimit = hdr.FirstOrDefault().Rbh_areas_lmt;
                                            DataTable hpacc = new DataTable();

                                            hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate);
                                            if (hpacc != null)
                                            {
                                                if (hpacc.Rows.Count > 0)
                                                {
                                                    foreach (var acc in hpacc.Rows)
                                                    {
                                                        if (hpacc.Rows[0][0].ToString() != "")
                                                        {
                                                            areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                        }
                                                    }
                                                }
                                            }
                                            if (areas > 10)
                                            {
                                                //add limit and check again
                                                hpacc = _financialDAL.Get_HP_Accounts_Areas(mainlist.Inv_no, todate.AddDays(areaslimit));
                                                if (hpacc != null)
                                                {
                                                    if (hpacc.Rows.Count > 0)
                                                    {
                                                        foreach (var acc in hpacc.Rows)
                                                        {
                                                            if (hpacc.Rows[0][0].ToString() != "")
                                                            {
                                                                areas = Convert.ToDecimal(hpacc.Rows[0][0].ToString());
                                                            }
                                                        }
                                                    }
                                                }
                                                if (areas > 10)
                                                {
                                                    continue;
                                                }
                                            }
                                            //check outstanding limit
                                            if ((mainlist.anal_7 - mainlist.anal_8) > hdr.FirstOrDefault().Rbh_outs_lmt)
                                            {
                                                continue;
                                            }
                                            //check outstanding date limit
                                            //check settlment date and full settle
                                            DateTime setldt = DateTime.Now;
                                            decimal settlammount = 0;
                                            DataTable setdtdt = _financialDAL.GET_SETTLMNT_DT_FOR_BONUS(mainlist.Inv_no, todate);
                                            if (setdtdt != null && mainlist.Inv_no.Contains("-HS-") == false)
                                            {
                                                if (setdtdt.Rows.Count > 0)
                                                {
                                                    if (setdtdt.Rows[0][1].ToString() == "")
                                                    {
                                                        continue;
                                                    }
                                                    setldt = Convert.ToDateTime(setdtdt.Rows[0][0].ToString());
                                                    settlammount = Convert.ToDecimal(setdtdt.Rows[0][1].ToString());
                                                    if (setldt.AddDays(-1).Subtract(mainlist.Inv_date).Days > Convert.ToInt32(hdr.FirstOrDefault().Rbh_outs_lmt))
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            //credit card types
                                            if (detlist.Rbd_pay_sub_tp != "" && detlist.Rbd_pay_sub_tp != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_sub_tp.ToUpper(), false);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }
                                            if (detlist.Rbd_pay_mode != "" && detlist.Rbd_pay_mode != null)
                                            {
                                                Int32 paytypecount = 0;
                                                DataTable chkpaytype = _financialDAL.CheckCrCdType(mainlist.Inv_no, detlist.Rbd_pay_mode.ToUpper(), true);
                                                if (chkpaytype != null)
                                                {
                                                    if (chkpaytype.Rows.Count > 0)
                                                    {
                                                        if (chkpaytype.Rows[0][0].ToString() != "" && chkpaytype.Rows[0][0].ToString() != "0")
                                                        {
                                                            paytypecount = chkpaytype.Rows.Count;

                                                        }
                                                        else
                                                        {
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        continue;
                                                    }
                                                }
                                                else
                                                {
                                                    continue;
                                                }
                                            }

                                            PoductBonusData ob = new PoductBonusData();
                                            ob.ExecCode = mainlist.Ex_code;
                                            ob.ExecName = mainlist.Ex_name;
                                            ob.InvoiceDate = mainlist.Inv_date;
                                            ob.InvoiceNo = mainlist.Inv_no;
                                            ob.ItemCode = mainlist.Item_code;
                                            ob.ItemDesc = mainlist.Item_desc;
                                            ob.Qty = Convert.ToInt32(mainlist.Qty);
                                            ob.TotAmmount = mainlist.Tot_amt;
                                            ob.TotMarks = 0;
                                            ob.circular = Code;
                                            ob.frmdate = fromdate;
                                            ob.todate = todate;
                                            ob.pc = mainlist.Pc_code;
                                            ob.loc = mainlist.Pc_code;
                                            ob.FromsalesDate = salesfdate;
                                            ob.TosalesDate = salestdate;
                                            ob.ShowroomCat = detlist.Rdb_anal2;
                                            data.Add(ob);
                                        }
                                        PoductBonusData ob1 = new PoductBonusData();
                                        ob1.ExecCode = dtlist.First().Ex_code;
                                        ob1.ExecName = dtlist.First().Ex_name;
                                        ob1.InvoiceDate = DateTime.Now.Date;
                                        ob1.InvoiceNo = "ALL";
                                        ob1.ItemCode = "ALL";
                                        ob1.ItemDesc = "ALL";
                                        ob1.Qty = 0;
                                        ob1.TotAmmount = 0;
                                        ob1.TotMarks = detlist.Rdb_marks;
                                        ob1.circular = Code;
                                        ob1.frmdate = fromdate;
                                        ob1.todate = todate;
                                        ob1.pc = dtlist.First().Pc_code;
                                        ob1.loc = dtlist.First().Pc_code;
                                        ob1.FromsalesDate = salesfdate;
                                        ob1.TosalesDate = salestdate;
                                        ob1.ShowroomCat = detlist.Rdb_anal2;
                                        data.Add(ob1);
                                        #endregion
                                        earli = currno;
                                        previtm = curritem;
                                        combcount = 1;
                                    }
                                }
                            }
                            #endregion
                        }
                        #endregion
                    }
                    _incremnt++;
                }

                //goup by exec code

            }


            return data;
        }

        //subodana 2017-05-23
        public DataTable GetPenaltyInvoices(DateTime fromdate, DateTime todate)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.Get_Penalty_Invoices(fromdate, todate);
        }
        //subodana
        public int CancelPenalty(string InvNo)
        {
            Int32 effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            effect = _financialDAL.CancelPenalty(InvNo);
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return effect;
        }
        public int SaveProductBonusdata(List<PoductBonusData> _bnslist, string com, string user, out string err)
        {
            err = "";
            int result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                _generalDAL = new GeneralDAL();
                foreach (var list in _bnslist)
                {
                    string name = "";
                    if (list.ShowroomCat == "Loc")
                    {
                        MasterProfitCenter _mpc = _generalDAL.GetPCByPCCode(com, list.pc);
                        list.ExecName = _mpc.Mpc_desc;
                        list.ExecCode = list.pc;
                    }
                    else if (list.ShowroomCat == "Area")
                    {
                        name = _financialDAL.GetShowRoomChnl(com, list.pc, "AREA_CODE", DateTime.Now.Date);
                        list.ExecCode = name;
                        name = _financialDAL.GetShowRoomChnl(com, list.pc, "AREA_NAME", DateTime.Now.Date);
                        list.ExecName = name;
                    }
                    else if (list.ShowroomCat == "Region")
                    {
                        name = _financialDAL.GetShowRoomChnl(com, list.pc, "REGION_CODE", DateTime.Now.Date);
                        list.ExecCode = name;
                        name = _financialDAL.GetShowRoomChnl(com, list.pc, "REGION_NAME", DateTime.Now.Date);
                        list.ExecName = name;
                    }
                    else if (list.ShowroomCat == "Zone")
                    {
                        name = _financialDAL.GetShowRoomChnl(com, list.pc, "ZONE_CODE", DateTime.Now.Date);
                        list.ExecCode = name;
                        name = _financialDAL.GetShowRoomChnl(com, list.pc, "ZONE_NAME", DateTime.Now.Date);
                        list.ExecName = name;
                    }



                    result = _financialDAL.SaveProductBonus(list, user);
                }
                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                result = -1;
            }
            return result;
        }
        //Udaya 02/06/2017
        public DataTable getInvoiceDetailsValues(string itemCode, string invNo)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.getInvoiceDetailsValues(itemCode, invNo);
        }
        //subodana 2017-05-23
        public DataTable Sp_GetbtuItems(string cat1, string type, string btu, string btu2)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.Sp_GetbtuItems(cat1, type, btu, btu2);
        }
        //Udaya 10.07.2017
        public DataTable sp_getCommSalesTypes(string cirCode)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.sp_getCommSalesTypes(cirCode);
        }
        public List<DELI_SALE_NEW> GetDeliversaleList()
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            return _salesDAL.GetDeliversaleList();
        }
        public DataTable Get_Gp_Data(DateTime _fromDate, DateTime _toDate, string _Cust, string _Exec, string _DocTp, string _ItemCode, string _Brand, string _Model, string _Cat1, string _Cat2, string _Cat3, string _Cat4, string _Cat5, string _User, string _RepType, string _StockType, string _InvNo, string _Pc, string _Com, string _Promotor, int _freeissue, string _itemclasif, string _brndmgr, bool withReversal, int _rplitm, DateTime _fromDate2, DateTime _toDate2, Int16 _intercom)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            return _salesDAL.Get_Gp_Data(_fromDate, _toDate, _Cust, _Exec, _DocTp, _ItemCode, _Brand, _Model, _Cat1, _Cat2, _Cat3, _Cat4, _Cat5, _User, _RepType, _StockType, _InvNo, _Pc, _Com, _Promotor, _freeissue, _itemclasif, _brndmgr, withReversal, _rplitm, _fromDate2, _toDate2, _intercom);
        }
        //Udaya 11.07.2017
        public List<SalesTarget> GetTargetSales(string cirCode, string frmDate, string toDate)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetTargetSales(cirCode, frmDate, toDate);
        }
        //Udaya 11.07.2017
        public DataTable SalesTargetLevel(string cirCode)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.SalesTargetLevel(cirCode);
        }
        public DataTable CommisionReport(string cirCode, string pcCode, DateTime frmDate, DateTime toDate, string comCode, String EmpCode, out List<DELI_SALE_NEW> _totSales, out List<SalesTarget> SlsTarList, out DataTable sales_Level)
        {
            _salesDAL = new SalesDAL();
            _salesDAL.ConnectionOpen();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            string transcomm = string.Empty;

            _totSales = new List<DELI_SALE_NEW>();
            SlsTarList = null;
            sales_Level = null;

            List<DELI_SALE_NEW> totsalelistavg = new List<DELI_SALE_NEW>();
            List<DELI_SALE_NEW> _salesTrget = new List<DELI_SALE_NEW>();
            DataTable dt = new DataTable();
            DataTable salesInvTypes = new DataTable();
            dt = _salesDAL.executive_Sales_Target(pcCode, frmDate, toDate, cirCode, EmpCode);
            dt.Columns.Add("elapsDays", typeof(string));

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                var tempRow = dt.Rows[i];
                var temp = dt.Rows[i][0];
                for (int j = 0; j < dt.Rows.Count; j++)
                {
                    DataRow rows = dt.Rows[j];
                    if (temp.ToString() == rows[0].ToString())
                    {
                        rows["elapsDays"] = (rows.Field<DateTime>("rcptdate").Subtract(rows.Field<DateTime>("invdate"))).TotalDays - 1;
                    }
                }
            }

            salesInvTypes = _financialDAL.sp_getCommSalesTypes(cirCode);
            transcomm = salesInvTypes.Rows[0].Field<string>("rch_sales_type");
            // SlsTarList = _financialDAL.GetTargetSales(comCode, pcCode.Replace(",", ""), frmDate, toDate);
            SlsTarList = _financialDAL.GetTargetSales(cirCode, frmDate.ToString("MM"), toDate.ToString("MM"));
            sales_Level = _financialDAL.SalesTargetLevel(cirCode);

            //// get 9 month avg sale
            //for (int i = -9; i <= 0; i++)
            //{
            //    if (transcomm == "INV")
            //    {
            //        _salesDAL.GetDeliveredSalesDetails(frmDate.AddMonths(i), toDate.AddMonths(i), "", EmpCode, "", "", "", "", "", "", "", "", "", "", "", "", pcCode.Replace(",", ""), comCode, "", 11, 2, 11, "", "");
            //        totsalelistavg = _salesDAL.GetDeliversaleList();
            //    }
            //    else if (transcomm == "DELI")
            //    {
            //        _salesDAL.Get_Gp_Data(frmDate.AddMonths(i), toDate.AddMonths(i), "", EmpCode, "", "", "", "", "", "", "", "", "", "", "", "", "", pcCode.Replace(",", ""), comCode, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
            //        totsalelistavg = _salesDAL.GetDeliversaleList();
            //    }
            //    else
            //    {
            //        _salesDAL.GetDeliveredSalesDetails(frmDate.AddMonths(i), toDate.AddMonths(i), "", EmpCode, "", "", "", "", "", "", "", "", "", "", "", "", pcCode.Replace(",", ""), comCode, "", 11, 2, 11, "", "");
            //        totsalelistavg = _salesDAL.GetDeliversaleList();
            //        totsalelistavg = totsalelistavg.Where(a => a.Cash_dir == 1).ToList();
            //    }
            //    totsalelistavg = totsalelistavg.GroupBy(r => new { r.Ex_code }).Select(s => new DELI_SALE_NEW
            //    {
            //        Ex_code = s.First().Ex_code,
            //        Net_amt = s.Sum(a => a.Net_amt),
            //        TargetFromDate = frmDate.AddMonths(i),
            //        TargetToDate = toDate.AddMonths(i)
            //    }).ToList();
            //    _salesTrget.AddRange(totsalelistavg);
            //    _totSales = _salesTrget;
            //}

            //List<Comm_recinv> recinv = new List<Comm_recinv>();
            //recinv = _financialDAL.GetCommRecInv(comCode, pcCode.Replace(@",", string.Empty), frmDate, toDate);
            //if (recinv != null && recinv.Count != 0)
            //{
            //    recinv = recinv.GroupBy(r => new { r.Execcode }).Select(s => new Comm_recinv
            //    {
            //        Execcode = s.First().Execcode,
            //        total = s.Sum(a => a.total),
            //    }).ToList();
            //    foreach (var recinvob in recinv)
            //    {
            //        DELI_SALE_NEW ob = new DELI_SALE_NEW();
            //        ob.Ex_code = recinvob.Execcode;
            //        ob.Net_amt = recinvob.total;
            //        ob.TargetFromDate = frmDate;
            //        ob.TargetToDate = toDate;
            //        _totSales.Add(ob);
            //    }
            //}
            List<SALE_BAL_DETAILS> _dotargt = new List<SALE_BAL_DETAILS>();
            _dotargt = _salesDAL.GetDODetailsFormonth(comCode, frmDate, toDate, "", "", pcCode.Replace(@",", string.Empty), "");
            if (_dotargt != null && _dotargt.Count > 0)
            {
                _dotargt = _dotargt.GroupBy(r => new { r.Ex_code }).Select(s => new SALE_BAL_DETAILS
                {
                    Ex_code = s.First().Ex_code,
                    Tot_amt = s.Sum(a => a.Tot_amt),
                }).ToList();
                foreach (var recinvob in _dotargt)
                {
                    DELI_SALE_NEW ob = new DELI_SALE_NEW();
                    ob.Ex_code = recinvob.Ex_code;
                    ob.Net_amt = recinvob.Net_amt;
                    ob.TargetFromDate = frmDate;
                    ob.TargetToDate = toDate;
                    _totSales.Add(ob);
                }
            }

            return dt;
        }
        //Lakshan 24 Jul 2017
        public List<ImpCusdecHdr> GET_CUSTDEC_HDR_BY_CUSTDEC_ENTRY_NO(String _entryNo)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GET_CUSTDEC_HDR_BY_CUSTDEC_ENTRY_NO(_entryNo);
        }
        //subodana
        public string GetAccountCodeByTp(string _company, string _type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAccountCodeByTp(_company, _type);
        }
        public Int32 UpdateCusdecEntryNoDate(List<ImpCusdecHdr> _obJList, out string err)
        {
            err = "";
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                foreach (var list in _obJList)
                {
                    result = _financialDAL.UpdateCusdecEntryNoDate(list);
                }
                _financialDAL.TransactionCommit();
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                result = -1;
            }
            return result;
        }
        public int UpdateTargertMonth(string com, string calcd, string prcd, DateTime fdate, DateTime tdate)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            effect = _financialDAL.UpdateTargertMonth(com, calcd, prcd, fdate, tdate);
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return effect;
        }

        //Add by Akila 2017/08/17
        public DataTable GetInvalidReceiptsForSunUpload(string _company, string _profitCenter, DateTime _fromDate, DateTime _toDate)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetInvalidReceiptsForSunUpload(_company, _profitCenter, _fromDate, _toDate);
        }
        //subodana 2017-08-21
        public List<ref_comm_mngr> GetCommissionExcmngrates(String doc, string exec)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetCommissionExcmngrates(doc, exec);
        }
        //subodana 2017-08-30
        public List<mst_proc> GetProcByConsignee(String com, string type, string consign)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetProcByConsignee(com, type, consign);
        }
        //subodana 2017-08-30
        public List<BOIProc> GetDutyProc(String com)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetDutyProc(com);
        }
        //subodana 2017-08-30
        public List<mst_proc_ele> GetProcDutyByConsignee(String com, string proc, string consign)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetProcDutyByConsignee(com, proc, consign);
        }

        //subodana 2017/08/31
        public int SaveProcElements(List<mst_proc_ele> _lst, out string _errer)
        {
            Int32 effect = 0;
            _errer = "";
            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            _financialDAL.ConnectionOpen();
            _salesDAL.ConnectionOpen();
            try
            {
                CustomsProcedureCodes _ob = new CustomsProcedureCodes();
                foreach (var list in _lst)
                {
                    effect = _financialDAL.SaveProcElement(list);

                    _ob.Mph_act = 1;
                    _ob.Mph_cnty = list.Mphe_cnty;
                    _ob.Mph_cogn_cd = list.Mphe_consin;
                    _ob.Mph_cogn_tp = "C";
                    _ob.Mph_com = list.Mphe_com;
                    _ob.Mph_cre_by = list.Mphe_cre_by;
                    _ob.Mph_cre_dt = list.Mphe_cre_dt;
                    _ob.Mph_cre_session = list.Mphe_cre_session;
                    _ob.Mph_decl_1 = "I";
                    _ob.Mph_decl_2 = "M";
                    _ob.Mph_decl_3 = "7";
                    _ob.Mph_def = 1;
                    _ob.Mph_doc_tp = "BOI";
                    _ob.Mph_ignore_duty = 0;
                    _ob.Mph_mod_by = list.Mphe_mod_by;
                    _ob.Mph_mod_dt = list.Mphe_mod_dt;
                    _ob.Mph_mod_session = list.Mphe_mod_session;
                    _ob.Mph_print_1 = list.Mphe_proc_cd;
                    _ob.Mph_print_2 = list.Mphe_proc_cd;
                    _ob.Mph_proc_cd = list.Mphe_proc_cd;
                    _ob.Mph_proc_desc = list.Mphe_proc_cd;


                }

                effect = _salesDAL.SaveSalesForecastingDetail(_ob);

                _financialDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                effect = -1;
            }
            return effect;
        }
        //Added By Udaya 08.09.207 Collect Sales Exc Contribution to WEBMCV
        public DataTable SalesEx_Contribution(string cirCode, string pcCode, DateTime frmDate, DateTime toDate, string comCode)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.SalesEx_Contribution(cirCode, pcCode, frmDate, toDate, comCode);
        }

        //subodana 2017-09-12

        public int SaveHandOverAccounts(List<hpr_hand_over_ac> _lst, out string _errer)
        {
            int effect = 0;
            _errer = "";
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {
                foreach (var list in _lst)
                {
                    effect = _financialDAL.SaveHandOverAccounts(list);
                }
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                effect = -1;
            }
            return effect;
        }

        public List<hpr_hand_over_ac> GetHandOverData(String com, string proc, bool avail)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetHandOverData(com, proc, avail);
        }
        //subodana 2017-09-14
        public int AccountsArrearsProcess(DateTime bonusmonth, string user, string com, out string _errer)
        {
            int effect = 0;
            _errer = "";
            int savecount = 0;

            _financialDAL = new FinancialDAL();
            _salesDAL = new SalesDAL();
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();

            try
            {
                _errer = _financialDAL.GetAccountCodeByTp(com, "PATHARREARS");
                List<ArrearsPC> pc_lst = _financialDAL.GetArrearsPC();
                _financialDAL.ConnectionOpen();
                FileInfo info = new FileInfo("C:/CollBonusErrLog" + "/" + user + "CBErrorLog.txt");
                using (StreamWriter writer = info.CreateText())
                {

                    #region Start Email
                    string _toemail = "";
                    DataTable dtCreateUser = _inventoryDAL.GetUserNameByUserID(user);
                    if (dtCreateUser != null && dtCreateUser.Rows.Count > 0)
                    {
                        if (dtCreateUser.Rows[0]["se_email"] != null && dtCreateUser.Rows[0]["se_email"].ToString().ToLower().Contains("abansgroup.com"))
                        {
                            _toemail = dtCreateUser.Rows[0]["se_email"].ToString();
                        }
                        SmtpClient smtpClient = new SmtpClient();
                        MailMessage message = new MailMessage();
                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                        smtpClient.Host = _generalDAL.GetMailHost();
                        smtpClient.Port = 25;
                        message.From = fromAddress;
                        string FOOTER = _generalDAL.GetMailFooterMsg();
                        string _email = "Dear Sir/Madam, <br>" + "Your Arrears Process Started.  <br> Procesing!!!!.";
                        message.To.Add(_toemail);
                        message.Subject = "Arrears Process";
                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                        message.Bcc.Add(new MailAddress("Dilanda@abansgroup.com"));
                        //Attachment at = new Attachment(_filePath);
                        //message.Attachments.Add(at);
                        message.IsBodyHtml = false;
                        message.Body = _email;
                        message.IsBodyHtml = true;
                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                        // Send SMTP mail
                        smtpClient.Send(message);
                    }
                    #endregion



                    foreach (var list in pc_lst)
                    {
                        hpt_arr_acc ob = new hpt_arr_acc();
                        //check already data
                        List<hpt_arr_acc> chk = _financialDAL.GetArrBalAccHdr(list.hpa_com, list.hpa_pc, bonusmonth);
                        if (chk != null && chk.Count > 0)
                        {
                            continue;
                        }
                        else
                        {
                            //delete details
                            effect = _financialDAL.DeleteArrearsDetails(list.hpa_com, list.hpa_pc, bonusmonth);
                            effect = 0;
                        }

                        List<MgrCreation> _manager = _financialDAL.GetManagerDetails2(list.hpa_com, list.hpa_pc, bonusmonth);
                        if (_manager == null)
                        {
                            //writer.WriteLine("Com:" + list.hpa_com + " PC:" + list.hpa_pc + " Error: Not Define Manager");
                            continue;
                        }
                        else
                        {
                            if (_manager.Count == 0)
                            {
                                // writer.WriteLine("Com:" + list.hpa_com + " PC:" + list.hpa_pc + " Error: Not Define Manager");
                                continue;
                            }
                        }

                        List<ArrearsAccDetails> _arrears_acc = _financialDAL.GetArrearsBalDetails(list.hpa_com, bonusmonth, list.hpa_pc);
                        if (_arrears_acc != null && _arrears_acc.Count > 0)
                        {
                            //check arrears ignore limit
                            decimal arrignlmt = _financialDAL.ArrearsIgnoreLmt(list.hpa_pc);
                            // check close bal ignore limit
                            decimal clsballmt = _financialDAL.ClsbalIgnoreLmt(list.hpa_pc);
                            //save


                            foreach (var acclist in _arrears_acc)
                            {
                                hpt_arr_acc_det ob2 = new hpt_arr_acc_det();

                                List<hpt_arr_acc_det> _checklistdt = _financialDAL.GetArrBalAccDetailsfordt(list.hpa_pc, acclist.hal_acc_no, bonusmonth);
                                if (_checklistdt != null)
                                {
                                    if (_checklistdt.Count > 0)
                                    {
                                        continue;
                                    }
                                }

                                //accounts
                                ob.Haa_tot_no_of_acc = ob.Haa_tot_no_of_acc + 1;
                                ob2.Haad_tot_no_of_acc = 1;

                                //over accounts
                                bool _isover = _financialDAL.IsOverCollAccount(acclist.hal_acc_no, bonusmonth.AddDays(1).AddMonths(-1));
                                if (_isover)
                                {
                                    ob.Haa_peri_ovr_acc = ob.Haa_peri_ovr_acc + 1;
                                    ob2.Haad_peri_ovr_acc = 1;
                                }
                                else
                                {
                                    ob2.Haad_peri_ovr_acc = 0;
                                }
                                if (acclist.ARREARS > 0)
                                {
                                    ob.Haa_act_arr_amt = ob.Haa_act_arr_amt + acclist.ARREARS;
                                    ob2.Haad_act_arr_amt = acclist.ARREARS;
                                    ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 1;
                                    ob2.Haad_tot_no_of_arr_acc = 1;
                                }
                                //closing balance
                                if (clsballmt <= acclist.CLOSING_BALANCE)
                                {
                                    ob.Haa_tot_clos_bal = ob.Haa_tot_clos_bal + acclist.CLOSING_BALANCE;
                                    ob.Haa_tot_no_of_act_acc = ob.Haa_tot_no_of_act_acc + 1 - ob2.Haad_peri_ovr_acc;
                                    ob2.Haad_tot_clos_bal = acclist.CLOSING_BALANCE;
                                    ob2.Haad_tot_no_of_act_acc = 1 - ob2.Haad_peri_ovr_acc;
                                }
                                else
                                {
                                    ob2.Haad_tot_clos_bal = acclist.CLOSING_BALANCE;
                                    ob.Haa_tot_clos_bal = ob.Haa_tot_clos_bal + acclist.CLOSING_BALANCE;
                                    ob2.Haad_tot_no_of_act_acc = 0;
                                }
                                //gracedate
                                ob.HAA_GRCE_DATE = acclist.GRASDATE;
                                ob2.HAAD_GRCE_DATE = acclist.GRASDATE;
                                ob2.Haad_suppl_dt = acclist.SUPDATE;
                                ob.Haa_suppl_dt = acclist.SUPDATE;
                                ob2.HAAD_GRCE_DATE = acclist.SUPDATE;

                                //due
                                decimal remited = _financialDAL.getSuppliValue(acclist.hal_acc_no, "REMIT", bonusmonth.AddDays(1).AddMonths(-1), bonusmonth, list.hpa_com, list.hpa_pc);
                                ob.HAA_TOT_REMITT = ob.HAA_TOT_REMITT + remited;
                                ob2.Haad_anal3 = remited.ToString();
                                //supplimen val
                                decimal suplval = _financialDAL.getSuppliValue(acclist.hal_acc_no, "SUPPL", bonusmonth.AddDays(1).AddMonths(-1), bonusmonth, list.hpa_com, list.hpa_pc);
                                ob.HAA_SUPP_COLL = ob.HAA_SUPP_COLL + suplval;
                                ob2.Haad_anal2 = suplval.ToString();

                                //DUE


                                if (acclist.HAL_CLS_DT <= bonusmonth)
                                {

                                    ob.HAA_CURR_DUE_TOT = ob.HAA_CURR_DUE_TOT + 0;
                                    ob.Haa_currnt_month_due = ob.Haa_currnt_month_due + 0;
                                    ob2.Haad_currnt_month_due = 0;
                                }
                                else
                                {
                                    if (acclist.HAL_RV_DT <= bonusmonth && acclist.HAL_RLS_DT > bonusmonth)
                                    {
                                        ob.HAA_CURR_DUE_TOT = ob.HAA_CURR_DUE_TOT + 0;
                                        ob.Haa_currnt_month_due = ob.Haa_currnt_month_due + 0;
                                        ob2.Haad_currnt_month_due = 0;
                                    }
                                    else
                                    {
                                        decimal duevall = _financialDAL.getDueValue(acclist.hal_acc_no, bonusmonth.AddDays(1).AddMonths(-1), bonusmonth);
                                        ob.HAA_CURR_DUE_TOT = ob.HAA_CURR_DUE_TOT + duevall;
                                        ob.Haa_currnt_month_due = ob.Haa_currnt_month_due + duevall;
                                        ob2.Haad_currnt_month_due = duevall;
                                    }


                                }

                                //standard arreas
                                if (ob.Haa_anal1 == "" || ob.Haa_anal1 == null)
                                {
                                    ob.Haa_anal1 = "0";
                                }
                                ob.Haa_anal1 = (Convert.ToDecimal(ob.Haa_anal1.ToString()) + Convert.ToDecimal(acclist.STANDEDARREARS.ToString())).ToString();
                                ob2.Haad_anal1 = (acclist.STANDEDARREARS).ToString();
                                // arears process
                                if (arrignlmt <= acclist.ARREARS)
                                {
                                    decimal bal = 0;
                                    bal = acclist.ARREARS;
                                    //get rec supli

                                    // check balance
                                    List<hpr_hand_over_ac> _hand_over = _financialDAL.GetHandOverDataAcc(list.hpa_com, list.hpa_pc, bonusmonth, acclist.hal_acc_no);
                                    //log val 
                                    decimal _logbal = _financialDAL.HOSetOffVall(list.hpa_com, acclist.hal_acc_no, list.hpa_pc);

                                    if (_hand_over != null && _hand_over.Count > 0)
                                    {
                                        #region with hand over
                                        if (_hand_over.First().Hhoa_avl_bal + _logbal >= acclist.ARREARS)
                                        {
                                            //det arre= 0
                                            bal = _hand_over.First().Hhoa_avl_bal + _logbal - acclist.ARREARS;

                                            //effect = _financialDAL.UpdateHandOverBalance(list.hpa_com, list.hpa_pc, acclist.hal_acc_no, bonusmonth, bal);

                                            ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                            // ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 0;
                                            // ob2.Haad_tot_no_of_arr_acc = 0;
                                            ob2.Haad_tot_arr_amt = 0;
                                            ob.HAA_HAND_OVER = ob.HAA_HAND_OVER + acclist.ARREARS; //handing over colom-acclist.ARREARS
                                            ob2.HAAD_HAND_OVER = acclist.ARREARS;
                                            _hand_over[0].Hhoa_bonus_month = bonusmonth;
                                            //update balance and insert hand over log
                                            _hand_over[0].setoffval = ob2.HAAD_HAND_OVER;
                                            effect = _financialDAL.SaveHandOverAccountsLog(_hand_over[0]);
                                        }
                                        else
                                        {
                                            //
                                            bal = acclist.ARREARS - _hand_over.First().Hhoa_avl_bal;
                                            // effect = _financialDAL.UpdateHandOverBalance(list.hpa_com, list.hpa_pc, acclist.hal_acc_no, bonusmonth, 0);
                                            // effect = _financialDAL.SaveHandOverAccountsLog(_hand_over[0]);
                                            ob.HAA_HAND_OVER = ob.HAA_HAND_OVER + _hand_over.First().Hhoa_avl_bal;
                                            ob2.HAAD_HAND_OVER = _hand_over.First().Hhoa_avl_bal;
                                            //handing over colom-_hand_over.First().Hhoa_avl_bal

                                            //update balance and insert hand over log
                                            _hand_over[0].setoffval = ob2.HAAD_HAND_OVER;
                                            _hand_over[0].Hhoa_bonus_month = bonusmonth;
                                            effect = _financialDAL.SaveHandOverAccountsLog(_hand_over[0]);


                                            //check due
                                            int months = _financialDAL.getDueMonths(acclist.HAL_SCH_CD, acclist.HAL_SCH_TP, bonusmonth, acclist.HPA_ACC_CRE_DT, list.hpa_pc);
                                            if (months == 0)
                                            {
                                                months = _financialDAL.getDueMonthsforchanal(acclist.HAL_SCH_CD, acclist.HAL_SCH_TP, bonusmonth, acclist.HPA_ACC_CRE_DT, list.channel);
                                            }
                                            decimal dueval = _financialDAL.getDueValue(acclist.hal_acc_no, bonusmonth.AddDays(1).AddMonths((months * -1)), bonusmonth);
                                            if (months == 0)
                                            {
                                                dueval = 0;
                                            }
                                            if (dueval >= bal)
                                            {
                                                ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                                // ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 0;
                                                ob2.Haad_tot_arr_amt = 0;
                                                ob.HAA_ARR_RELE_MONTHS = ob.HAA_ARR_RELE_MONTHS + bal;
                                                ob2.HAAD_ARR_RELE_MONTHS = bal;

                                            }
                                            else
                                            {
                                                bal = bal - dueval;
                                                ob.HAA_ARR_RELE_MONTHS = ob.HAA_ARR_RELE_MONTHS + dueval;
                                                ob2.HAAD_ARR_RELE_MONTHS = dueval;

                                                ///////grace path

                                                //check revert
                                                bool isrevert = _financialDAL.CheckRevert(acclist.hal_acc_no, bonusmonth, list.hpa_pc);
                                                if (isrevert)
                                                {
                                                    ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                                    ob.HAA_GRCE_SETT = ob.HAA_GRCE_SETT + bal;//ask dilanda
                                                    ob.HAA_TOT_GRCE_SETT = ob.HAA_TOT_GRCE_SETT + bal;
                                                    //  ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 0;
                                                    //  ob2.Haad_tot_no_of_arr_acc = 0;
                                                    ob2.HAAD_GRCE_SETT = bal;
                                                    ob2.Haad_tot_arr_amt = 0;
                                                    ob.HAA_ORIG_GRACE_AMT = ob.HAA_ORIG_GRACE_AMT + ob2.HAAD_GRCE_SETT;
                                                    ob2.HAAD_ORIG_GRACE_AMT = ob2.HAAD_GRCE_SETT;
                                                }
                                                else
                                                {
                                                    bool isreverscc = _financialDAL.CheckReversCC(acclist.hal_acc_no, bonusmonth, list.hpa_pc);
                                                    if (isreverscc)
                                                    {
                                                        ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                                        ob.HAA_GRCE_SETT = ob.HAA_GRCE_SETT + bal;
                                                        ob.HAA_TOT_GRCE_SETT = ob.HAA_TOT_GRCE_SETT + bal;
                                                        // ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 0;
                                                        //  ob2.Haad_tot_no_of_arr_acc = 0;
                                                        ob2.HAAD_GRCE_SETT = bal;
                                                        ob2.Haad_tot_arr_amt = 0;
                                                        ob.HAA_ORIG_GRACE_AMT = ob.HAA_ORIG_GRACE_AMT + ob2.HAAD_GRCE_SETT;
                                                        ob2.HAAD_ORIG_GRACE_AMT = ob2.HAAD_GRCE_SETT;
                                                    }
                                                    else
                                                    {
                                                        decimal gracelimit = _financialDAL.getGrageLimit(acclist.hal_acc_no, bonusmonth);
                                                        if (gracelimit - ob2.HAAD_ARR_RELE_MONTHS < arrignlmt)
                                                        {
                                                            ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                                            ob.HAA_TOT_GRCE_SETT = ob.HAA_TOT_GRCE_SETT + bal;
                                                            ob.HAA_GRCE_SETT = ob.HAA_GRCE_SETT + bal;
                                                            //  ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 0;
                                                            //  ob2.Haad_tot_no_of_arr_acc = 0;
                                                            ob2.Haad_tot_arr_amt = 0;
                                                            decimal _gracecollect = _financialDAL.GetGraceCollection(acclist.hal_acc_no, acclist.SUPDATE, acclist.GRASDATE, list.hpa_com, list.hpa_pc, bonusmonth) - ob2.HAAD_ARR_RELE_MONTHS;
                                                            if (_gracecollect < 0)
                                                            {
                                                                _gracecollect = 0;
                                                            } ob2.HAAD_GRCE_PER_COLL = _gracecollect; //GetNonUtiRecTotal gracelimit collection
                                                            ob.HAA_GRCE_PER_COLL = ob.HAA_GRCE_PER_COLL + _gracecollect;
                                                            ob2.HAAD_GRCE_SETT = bal;
                                                            ob2.HAAD_ORIG_GRACE_AMT = bal;
                                                            ob.HAA_ORIG_GRACE_AMT = ob.HAA_ORIG_GRACE_AMT + ob2.HAAD_GRCE_SETT;
                                                        }
                                                        else
                                                        {
                                                            ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + bal;
                                                            // ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 1;
                                                            //  ob2.Haad_tot_no_of_arr_acc = 1;
                                                            ob2.Haad_tot_arr_amt = bal;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        //after hand over
                                        #region
                                        //after hand over
                                        //check due
                                        int months = _financialDAL.getDueMonths(acclist.HAL_SCH_CD, acclist.HAL_SCH_TP, bonusmonth, acclist.HPA_ACC_CRE_DT, list.hpa_pc);
                                        if (months == 0)
                                        {
                                            months = _financialDAL.getDueMonthsforchanal(acclist.HAL_SCH_CD, acclist.HAL_SCH_TP, bonusmonth, acclist.HPA_ACC_CRE_DT, list.channel);
                                        }
                                        decimal dueval = _financialDAL.getDueValue(acclist.hal_acc_no, bonusmonth.AddDays(1).AddMonths((months * -1)), bonusmonth);
                                        if (months == 0)
                                        {
                                            dueval = 0;
                                        }
                                        if (dueval >= bal)
                                        {
                                            ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                            ob2.Haad_tot_arr_amt = 0;
                                            ob.HAA_ARR_RELE_MONTHS = ob.HAA_ARR_RELE_MONTHS + bal;
                                            ob2.HAAD_ARR_RELE_MONTHS = bal;

                                        }
                                        else
                                        {
                                            bal = bal - dueval;

                                            ///////grace path
                                            ob.HAA_ARR_RELE_MONTHS = ob.HAA_ARR_RELE_MONTHS + dueval;
                                            ob2.HAAD_ARR_RELE_MONTHS = dueval;

                                            //check revert
                                            bool isrevert = _financialDAL.CheckRevert(acclist.hal_acc_no, bonusmonth, list.hpa_pc);
                                            if (isrevert)
                                            {
                                                ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                                ob.HAA_GRCE_SETT = ob.HAA_GRCE_SETT + bal;
                                                ob.HAA_TOT_GRCE_SETT = ob.HAA_TOT_GRCE_SETT + bal;
                                                //  ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 0;
                                                // ob2.Haad_tot_no_of_arr_acc = 0;
                                                ob2.HAAD_GRCE_SETT = bal;
                                                ob2.Haad_tot_arr_amt = 0;
                                                ob.HAA_ORIG_GRACE_AMT = ob.HAA_ORIG_GRACE_AMT + ob2.HAAD_GRCE_SETT;
                                                ob2.HAAD_ORIG_GRACE_AMT = ob2.HAAD_GRCE_SETT;
                                            }
                                            else
                                            {
                                                bool isreverscc = _financialDAL.CheckReversCC(acclist.hal_acc_no, bonusmonth, list.hpa_pc);
                                                if (isreverscc)
                                                {
                                                    ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                                    ob.HAA_GRCE_SETT = ob.HAA_GRCE_SETT + bal;
                                                    ob.HAA_TOT_GRCE_SETT = ob.HAA_TOT_GRCE_SETT + bal;
                                                    //  ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 0;
                                                    //  ob2.Haad_tot_no_of_arr_acc = 0;
                                                    ob2.HAAD_GRCE_SETT = bal;
                                                    ob2.Haad_tot_arr_amt = 0;
                                                    ob.HAA_ORIG_GRACE_AMT = ob.HAA_ORIG_GRACE_AMT + ob2.HAAD_GRCE_SETT;
                                                    ob2.HAAD_ORIG_GRACE_AMT = ob2.HAAD_GRCE_SETT;
                                                }
                                                else
                                                {
                                                    decimal gracelimit = _financialDAL.getGrageLimit(acclist.hal_acc_no, bonusmonth);
                                                    if (gracelimit - ob2.HAAD_ARR_RELE_MONTHS < arrignlmt)
                                                    {
                                                        ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                                        ob.HAA_GRCE_SETT = ob.HAA_GRCE_SETT + bal;
                                                        ob.HAA_TOT_GRCE_SETT = ob.HAA_TOT_GRCE_SETT + bal;
                                                        // ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 0;
                                                        //  ob2.Haad_tot_no_of_arr_acc = 0;
                                                        ob2.HAAD_GRCE_SETT = bal;
                                                        ob2.Haad_tot_arr_amt = 0;
                                                        decimal _gracecollect = _financialDAL.GetGraceCollection(acclist.hal_acc_no, acclist.SUPDATE, acclist.GRASDATE, list.hpa_com, list.hpa_pc, bonusmonth) - ob2.HAAD_ARR_RELE_MONTHS;
                                                        if (_gracecollect < 0)
                                                        {
                                                            _gracecollect = 0;
                                                        }
                                                        ob2.HAAD_GRCE_PER_COLL = _gracecollect; //GetNonUtiRecTotal gracelimit collection
                                                        ob.HAA_GRCE_PER_COLL = ob.HAA_GRCE_PER_COLL + _gracecollect;
                                                        ob.HAA_ORIG_GRACE_AMT = ob.HAA_ORIG_GRACE_AMT + ob2.HAAD_GRCE_SETT;
                                                        ob2.HAAD_ORIG_GRACE_AMT = ob2.HAAD_GRCE_SETT;
                                                    }
                                                    else
                                                    {
                                                        ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + bal;
                                                        // ob.Haa_tot_no_of_arr_acc = ob.Haa_tot_no_of_arr_acc + 1;
                                                        // ob2.Haad_tot_no_of_arr_acc = 1;
                                                        ob2.Haad_tot_arr_amt = bal;
                                                    }
                                                }
                                            }
                                        }
                                        #endregion
                                    }

                                }
                                else
                                {
                                    ob.Haa_tot_arr_amt = ob.Haa_tot_arr_amt + 0;
                                }
                                // _manager = _financialDAL.GetManagerDetails(list.hpa_com, list.hpa_pc, "");
                                string _managercode = "NOMNGR";

                                if (_manager != null)
                                {
                                    if (_manager.Count > 0)
                                    {
                                        _managercode = _manager.First().hmfa_mgr_cd;
                                    }
                                }

                                ob.Haa_com = list.hpa_com;
                                ob.Haa_cre_by = user;
                                ob.Haa_cre_dt = DateTime.Now;
                                ob.Haa_date = bonusmonth;
                                ob.Haa_mod_by = user;
                                ob.Haa_mod_dt = DateTime.Now.Date;
                                ob.Haa_pc = list.hpa_pc;
                                ob.Haa_pc_cat = "";
                                ob.Haa_mng_cd = _managercode;
                                ob.HAA_EFFECT_DT = bonusmonth;

                                ob2.Haad_com = list.hpa_com;
                                ob2.Haad_cre_by = user;
                                ob2.Haad_cre_dt = DateTime.Now;
                                ob2.Haad_date = bonusmonth;
                                ob2.Haad_mod_by = user;
                                ob2.Haad_mod_dt = DateTime.Now.Date;
                                ob2.Haad_pc = list.hpa_pc;
                                ob2.Haad_pc_cat = "";
                                ob2.Haad_acc_cd = acclist.hal_acc_no;
                                ob2.Haad_mng_cd = _managercode;
                                ob2.HAAD_EFFECT_DT = bonusmonth;

                                if (ob2.Haad_com != null)
                                {
                                    effect = _financialDAL.Savehpt_arr_acc_det(ob2);
                                    savecount++;
                                }

                            }
                        }
                        else
                        {
                            string _managercode = "NOMNGR";

                            if (_manager != null)
                            {
                                if (_manager.Count > 0)
                                {
                                    _managercode = _manager.First().hmfa_mgr_cd;
                                }
                            }
                            ob.Haa_com = list.hpa_com;
                            ob.Haa_cre_by = user;
                            ob.Haa_cre_dt = DateTime.Now;
                            ob.Haa_date = bonusmonth;
                            ob.HAA_EFFECT_DT = bonusmonth;
                            ob.Haa_mod_by = user;
                            ob.Haa_mod_dt = DateTime.Now.Date;
                            ob.Haa_pc = list.hpa_pc;
                            ob.Haa_pc_cat = "";
                            ob.Haa_mng_cd = _managercode;
                            ob.Haa_act_arr_amt = 0;
                            ob.HAA_ADJ_AMT = 0;
                            ob.HAA_ADJ_CURR_ARR = 0;
                            ob.HAA_ADJ_DUE_TOT = 0;
                            ob.HAA_ADJ_GRA_PER = 0;
                            ob.HAA_ADJ_GRA_PER_SETT = 0;
                            ob.HAA_ADJ_PR_MO_SUP_COLL = 0;
                            ob.HAA_ADJ_PRE_GR_PER_COLL = 0;
                            ob.HAA_ADJ_PREV_TOTARR = 0;
                            ob.HAA_ADJ_REMITT = 0;
                            ob.HAA_ADJ_TOT = 0;
                            ob.HAA_ADJESMENT = 0;
                            ob.HAA_ALL_DUE_TOT = 0;
                            ob.HAA_ALL_TOT_ADJ = 0;
                            ob.Haa_anal1 = "0";
                            ob.Haa_anal2 = "0";
                            ob.Haa_anal3 = "0";
                            ob.HAA_ARR_RELE_MONTHS = 0;
                            ob.HAA_ARR_SCH_ADJ = 0;
                            ob.HAA_ARRE_PER = 0;
                            ob.HAA_BONUS_AMT = 0;
                            ob.HAA_BONUS_REF_DED = 0;
                            ob.HAA_BONUS_RT = 0;
                            ob.HAA_CURR_DUE_TOT = 0;
                            ob.Haa_currnt_month_due = 0;
                            ob.HAA_DIRIYA_ADJ = 0;
                            ob.HAA_DISP_ADJ = 0;
                            ob.HAA_DISREG_AMT = 0;
                            ob.HAA_EPF_RT = 0;
                            ob.HAA_ESD_RT = 0;
                            ob.HAA_GRC_PER_NT_QL = 0;
                            ob.HAA_GRCE_DATE = DateTime.Now.Date;
                            ob.HAA_GRCE_PER_COLL = 0;
                            ob.HAA_GRCE_SETT = 0;
                            ob.HAA_GRCE_SETT_ADJ = 0;
                            ob.HAA_GRO_COLL_BONUS = 0;
                            ob.HAA_HAND_OVER = 0;
                            ob.HAA_ISSUE_CHQ_RTN_ADJ = 0;
                            ob.HAA_LOD_ADJ = 0;
                            ob.HAA_NET_ARR_AMT = 0;
                            ob.HAA_NET_REMIT = 0;
                            ob.HAA_OTH = 0;
                            ob.HAA_PRE_MON_SUP_COLL = 0;
                            ob.HAA_PREV_ARR_TOT = 0;
                            ob.HAA_PREV_GRACE_PER_COLL = 0;
                            ob.HAA_SER_PROB = 0;
                            ob.HAA_TOT_REMITT = 0;
                            ob.HAA_TOT_REC_BAL = 0;
                            ob.Haa_tot_no_of_arr_acc = 0;
                            ob.Haa_tot_no_of_act_acc = 0;
                            ob.Haa_tot_no_of_acc = 0;
                            ob.HAA_TOT_NET_BONUS = 0;
                            ob.HAA_TOT_GRCE_SETT_ADJ = 0;
                            ob.HAA_TOT_GRCE_SETT = 0;
                            ob.Haa_tot_clos_bal = 0;
                            ob.Haa_tot_arr_amt = 0;
                            ob.HAA_TAG_PER = 0;
                            ob.HAA_TAG_ACCT = 0;

                        }
                        //connection closed
                        if (ob.Haa_com != null)
                        {
                            effect = _financialDAL.Savehpt_arr_acc(ob);
                        }

                        // effect = _financialDAL.UpdateARR_ACCNew(ob);
                        _financialDAL.TransactionCommit();

                    }

                    DataTable odt = _financialDAL.BonusCalculation_process(bonusmonth);
                    _financialDAL.TransactionCommit();
                    #region End Email


                    if (dtCreateUser != null && dtCreateUser.Rows.Count > 0)
                    {
                        if (dtCreateUser.Rows[0]["se_email"] != null && dtCreateUser.Rows[0]["se_email"].ToString().ToLower().Contains("abansgroup.com"))
                        {
                            _toemail = dtCreateUser.Rows[0]["se_email"].ToString();
                        }
                        SmtpClient smtpClient = new SmtpClient();
                        MailMessage message = new MailMessage();
                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                        smtpClient.Host = _generalDAL.GetMailHost();
                        smtpClient.Port = 25;
                        message.From = fromAddress;
                        string FOOTER = _generalDAL.GetMailFooterMsg();
                        string _email = "Dear Sir/Madam, <br>" + "Your Arrears Process Completed.  <br> Done!!.";
                        message.To.Add(_toemail);
                        message.Subject = "Arrears Process";
                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                        message.Bcc.Add(new MailAddress("Dilanda@abansgroup.com"));
                        //Attachment at = new Attachment(_filePath);
                        //message.Attachments.Add(at);
                        message.IsBodyHtml = false;
                        message.Body = _email;
                        message.IsBodyHtml = true;
                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                        // Send SMTP mail
                        smtpClient.Send(message);
                    }
                    #endregion
                }

                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                effect = -1;

                #region End Email
                string _toemail = "";
                DataTable dtCreateUser = _inventoryDAL.GetUserNameByUserID(user);

                if (dtCreateUser != null && dtCreateUser.Rows.Count > 0)
                {
                    if (dtCreateUser.Rows[0]["se_email"] != null && dtCreateUser.Rows[0]["se_email"].ToString().ToLower().Contains("abansgroup.com"))
                    {
                        _toemail = dtCreateUser.Rows[0]["se_email"].ToString();
                    }
                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();
                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;
                    string FOOTER = _generalDAL.GetMailFooterMsg();
                    string _email = _errer;
                    message.To.Add(_toemail);
                    message.Subject = "Arrears Process";
                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    message.Bcc.Add(new MailAddress("Dilanda@abansgroup.com"));
                    //Attachment at = new Attachment(_filePath);
                    //message.Attachments.Add(at);
                    message.IsBodyHtml = false;
                    message.Body = _email;
                    message.IsBodyHtml = true;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    // Send SMTP mail
                    smtpClient.Send(message);
                }
                #endregion

                return effect;
            }

            if (savecount == 0)
            {
                string localpath = "C:/CollBonusErrLog" + "/CollectBonusErrorLog.txt";
                System.IO.File.Copy(@localpath, _errer + "ErrorLog", true);
                _errer = "Please Refer File :" + _errer;
            }
            else
            {
                _errer = "";
                effect = 1;
            }

            return effect;
        }
        //add by tharanga 2017/09/16
        public DataTable ProcessSUNUpload_Cedit_note(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _acc_period, string _sunID, string _file)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.ProcessSUNUpload_Cedit_note(_from, _to, _com, _pc, _user, _acc_period, _sunID, _file);
        }
        public List<hpt_arr_acc_det> GetArrBalAccDetails(string procen, DateTime date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetArrBalAccDetails(procen, date);
        }
        //GetHandOverDataAcc subodana
        public List<hpr_hand_over_ac> GetHandOverDataAccAll(string com, string pc, DateTime month, string acc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetHandOverDataAccAll(com, pc, month, acc);
        }

        //subodana 2017-09-21
        public int SaveAccountAdjDetails(hpt_arr_acc_det _old, hpt_arr_acc_det _new, out string _errer)
        {
            int effect = 0;
            _errer = "";
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {
                List<hpt_arr_acc> _hdr = _financialDAL.GetArrBalAccHdr(_new.Haad_com, _new.Haad_pc, _new.Haad_date);
                if (_hdr != null)
                {
                    if (_hdr.Count > 0)
                    {

                        if (_new.Haad_tot_arr_amt > 0)
                        {
                            if (_new.HAAD_GRCE_SETT_ADJ > _new.HAAD_GRCE_PER_COLL)
                            {
                                if (_old.Haad_tot_arr_amt < _new.Haad_tot_arr_amt)
                                {
                                    decimal grdif = _new.HAAD_GRCE_SETT_ADJ - _new.HAAD_GRCE_PER_COLL;
                                    decimal arrdef = _new.Haad_tot_arr_amt - _old.Haad_tot_arr_amt;
                                    if (arrdef <= grdif)
                                    {
                                        //   _new.Haad_tot_arr_amt = _old.Haad_tot_arr_amt;
                                        _new.HAAD_GRCE_PER_COLL = _new.HAAD_GRCE_PER_COLL + arrdef;
                                    }
                                    else
                                    {
                                        _new.HAAD_GRCE_PER_COLL = _new.HAAD_GRCE_SETT_ADJ;
                                        //   _new.Haad_tot_arr_amt = _new.Haad_tot_arr_amt - grdif;

                                    }
                                }
                            }
                        }


                        _hdr[0].HAA_ADJ_TOT = _hdr[0].HAA_ADJ_TOT - _old.HAAD_ADJ_AMT + _new.HAAD_ADJ_AMT;
                        _hdr[0].Haa_com = _new.Haad_com;
                        _hdr[0].Haa_tot_arr_amt = _hdr[0].Haa_tot_arr_amt;// -_old.Haad_tot_arr_amt + _new.Haad_tot_arr_amt;
                        _hdr[0].HAA_GRCE_SETT = _hdr[0].HAA_GRCE_SETT - _old.HAAD_GRCE_SETT + _new.HAAD_GRCE_SETT;
                        _hdr[0].HAA_TOT_GRCE_SETT = _hdr[0].HAA_GRCE_SETT;
                        _hdr[0].HAA_SER_PROB = _hdr[0].HAA_SER_PROB - _old.HAAD_SER_PROB + _new.HAAD_SER_PROB;
                        _hdr[0].HAA_OTH = _hdr[0].HAA_OTH - _old.HAAD_OTH + _new.HAAD_OTH;
                        _hdr[0].HAA_LOD_ADJ = _hdr[0].HAA_LOD_ADJ - _old.HAAD_LOD_ADJ + _new.HAAD_LOD_ADJ;
                        _hdr[0].HAA_DISP_ADJ = _hdr[0].HAA_DISP_ADJ - _old.HAAD_DISP_ADJ + _new.HAAD_DISP_ADJ;
                        _hdr[0].HAA_DIRIYA_ADJ = _hdr[0].HAA_DIRIYA_ADJ - _old.HAAD_DIRIYA_ADJ + _new.HAAD_DIRIYA_ADJ;
                        _hdr[0].Haa_pc = _new.Haad_pc;
                        _hdr[0].Haa_date = _old.Haad_date;
                        _hdr[0].HAA_SHOP_COM_ADJ = _hdr[0].HAA_SHOP_COM_ADJ - _old.HAAD_SHOP_COM_ADJ + _new.HAAD_SHOP_COM_ADJ;

                        effect = _financialDAL.UpdateARR_ACC(_hdr[0]);
                    }
                }
                _new.Haad_seq = _new.Haad_seq;
                effect = _financialDAL.UpdateARR_ACC_DET(_new);
                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                effect = -1;
            }


            return effect;
        }
        //Dilshan 2017-09-30 collection bonus process
        public int SaveBonusVouDetails(List<BonusVoucher> _lst, out string _errer)
        {
            int effect = 0;
            _errer = "";
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {
                foreach (var list in _lst)
                {
                    effect = _financialDAL.SaveBonusVouDetails(list);
                }
                _financialDAL.TransactionCommit();
                //_salesDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                //_salesDAL.TransactionRollback();
                effect = -1;
            }
            return effect;
        }

        //Dilshan 2017-09-30 collection bonus process
        public int UpdateARR_ACCNew(List<hpt_arr_acc> _lst, out string _errer)
        {
            int effect = 0;
            _errer = "";
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {
                effect = _financialDAL.UpdateARR_ACCNew(_lst[0]);

                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                effect = -1;
            }
            return effect;
        }
        //subodana
        public List<MgrCreation> GetManagerDetails(string com, string pc, string mngr)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetManagerDetails(com, pc, mngr);
        }
        //subodana
        public List<hpt_arr_acc> GetArrBalAccHdrByCode(string com, string manager, DateTime date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetArrBalAccHdrByCode(com, manager, date);
        }
        //subodana
        public List<hpt_arr_acc> GetArrBalAccHdr(string com, string pc, DateTime date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetArrBalAccHdr(com, pc, date);
        }
        //subodana
        public List<hpr_disr_val_ref> AmountDisregard(decimal clsbal, Int32 tp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.AmountDisregard(clsbal, tp);
        }
        //subodana
        public List<hpr_disr_val_ref> GraceperiodnotQulified(DateTime days, Int32 tp, string com, string pc, decimal val)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GraceperiodnotQulified(days, tp, com, pc, val);
        }
        //subodana
        public List<BonusDefinition> GetCollecBonusDet(string com, decimal rates, decimal yrs, string pccat, DateTime mngcrdt, Int64 accounts, decimal Avgacc, DateTime Commdate, String PC)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCollecBonusDet(com, rates, yrs, pccat, mngcrdt, accounts, Avgacc, Commdate, PC);
        }
        //SUBODABA
        public DataTable GetPCType(string cat)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPCType(cat);
        }
        //SUBODABA
        public DataTable GetEPF_ESP(string com, string pc, DateTime date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetEPF_ESP(com, pc, date);
        }
        public int FinalizCollecBonus(hpt_col_bonus_vou _lst, MasterAutoNumber _masterAutoNumber, out string _errer)
        {
            int effect = 0;
            int result = 0;
            _errer = "";
            string documentNo;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {
                bool isfinalz = _financialDAL.IsCollectFinalize(_lst.hpbv_com, _lst.hpbv_pc, _lst.hpbv_month);
                if (_lst.arranal1 == 2 && isfinalz == false)
                {
                    Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    documentNo = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(_masterAutoNumber.Aut_year).Remove(0, 2) + "-" + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                    result = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                    _lst.hpbv_vou_no = documentNo;
                }
                else if (_lst.arranal1 != 2)
                {
                    _errer = "Please Save Before The Finalize";
                    _financialDAL.TransactionRollback();
                    effect = -1;
                }
                effect = _financialDAL.FinalizCollecBonus(_lst);
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
                _errer = _lst.hpbv_vou_no;
            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                effect = -1;
            }
            return effect;
        }

        //Dilshan 04/10/2017
        public DataTable CollBonusVoucher(string pcCode, DateTime frmDate, string comCode)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.CollBonusVoucher(pcCode, frmDate, comCode);
        }
        public bool CheckSunRef(string refno, string _trdt)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CheckSunRef(refno, _trdt);
        }
        public bool CheckClosBal(string accno, DateTime date, decimal sysbal, out decimal _bal)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CheckClosBal(accno, date, sysbal, out _bal);
        }
        //Rukshan 04/Nov/2015
        public int SaveCusdecEntry(InventoryRequest _inventoryRequest, MasterAutoNumber _mastAutoNo, List<ImportsBLItems> _ImportsBLItems, out string _docNo)
        {
            int result = 0;
            _docNo = "";
            string _documentNo = string.Empty;
            try
            {
                _inventoryDAL = new InventoryDAL();
                _financialDAL = new FinancialDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL = new SalesDAL();
                FinancialBLL _finbll = new FinancialBLL();
                invtbll = new InventoryBLL();
                _cusserDal = new CustServiceDAL();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _cusserDal.ConnectionOpen();
                _cusserDal.BeginTransaction();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();
                if (_inventoryRequest != null)
                {
                    if (_inventoryRequest.Itr_tp == "CUSR")
                    {
                        Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                        _documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                        _inventoryRequest.Itr_req_no = _documentNo;



                        result = _financialDAL.SaveInventoryRequest(_inventoryRequest);
                        int _lineNo = 1;
                        foreach (InventoryRequestItem _ReqItem in _inventoryRequest.InventoryRequestItemList)
                        {

                            _ReqItem.Itri_line_no = _lineNo;
                            _ReqItem.Itri_seq_no = result;
                            _financialDAL.SaveInventoryRequestItem(_ReqItem);
                            _lineNo++;
                        }
                        _docNo = _documentNo;
                        int upresult2 = _inventoryDAL.Update_ResHeaderStatus("F", _inventoryRequest.Itr_cre_by, _inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);
                    }
                    else if (_inventoryRequest.Itr_tp == "CUSA")
                    {


                        var _scanItems = _inventoryRequest.InventoryRequestItemList.GroupBy(x => new { x.ITRI_ITM_COND, x.Itri_com, x.Itri_job_no }).Select(group => new { Peo = group.Key, theCount = group.Count() }).ToList();
                        int i = 1;
                        foreach (var itm in _scanItems)
                        {

                            // if (i == 1)
                            // {
                            if ((itm.Peo.Itri_job_no == "0") || (itm.Peo.Itri_job_no == "N/A") || (itm.Peo.Itri_job_no == ""))
                            {
                                _docNo = "Job Number Cannot 0";
                                return -1;
                            }
                            else
                            {
                                _inventoryRequest.Itr_job_no = itm.Peo.Itri_job_no;

                                // check valid bond no
                                DataTable _tblbond = _inventoryDAL.CHECKBONDNO(_inventoryRequest.Itr_com, _inventoryRequest.Itr_job_no);
                                if (_tblbond != null)
                                {
                                    if (_tblbond.Rows.Count > 0)
                                    {
                                        string _SINO = _tblbond.Rows[0][0].ToString();
                                        if (_inventoryRequest.Itr_anal2 != _SINO)
                                        {
                                            _inventoryRequest.Itr_anal2 = _SINO;
                                        }

                                    }
                                }

                            }


                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_mastAutoNo.Aut_moduleid, _mastAutoNo.Aut_direction, _mastAutoNo.Aut_start_char, _mastAutoNo.Aut_cate_tp, _mastAutoNo.Aut_cate_cd, _mastAutoNo.Aut_modify_dt, _mastAutoNo.Aut_year).Aut_number;
                            //_documentNo = _inventoryRequest.Itr_loc + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            _documentNo = _inventoryRequest.Itr_com + "-" + _mastAutoNo.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _mastAutoNo.Aut_moduleid + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                            _inventoryDAL.UpdateAutoNumber(_mastAutoNo);
                            _inventoryRequest.Itr_req_no = _documentNo;

                            //GRN LOCATION
                            DataTable _tblBalance = _inventoryDAL.CHECK_TOBOND_GRN(_inventoryRequest.Itr_com, _inventoryRequest.Itr_job_no, null);
                            if (_tblBalance.Rows.Count > 0)
                            {
                                string loc = _tblBalance.Rows[0]["Location"].ToString();
                                _inventoryRequest.Itr_loc = loc;
                                _inventoryRequest.Itr_issue_from = loc;
                            }

                            result = _financialDAL.SaveInventoryRequest(_inventoryRequest);

                            // }
                            // i++;

                            int upresult = _cusserDal.Update_ReqHeaderStatus("F", _inventoryRequest.Itr_cre_by, _inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);
                            //Check Reserve QTY balance
                            string finish = "";
                            int resqty = 0;
                            int totreqqty = 0;
                            int k = 0;
                            List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
                            if (_ImportsBLItems != null)
                            {
                                foreach (var _BlItem in _inventoryRequest.InventoryRequestItemList)
                                {
                                    DataTable resitms = _inventoryDAL.GetResavationQty(_inventoryRequest.Itr_ref, _BlItem.Itri_itm_cd);
                                    if (resitms.Rows.Count > 0)
                                    {
                                        resqty = resqty + Convert.ToInt32(resitms.Rows[0]["ird_res_bqty"].ToString());
                                    }

                                    totreqqty = totreqqty + Convert.ToInt32(_BlItem.Itri_qty);
                                    //Update Reserve QTY
                                    int _res = 0;
                                    if (!string.IsNullOrEmpty(_BlItem.Itri_res_no) && _BlItem.Itri_res_no != "N/A")
                                    {
                                        _res = _financialDAL.UPDATE_RES_BQTYNew(_BlItem.Itri_res_no, _BlItem.Itri_job_line, _BlItem.Itri_qty);
                                    }


                                    #region
                                    if (_inventoryRequest.UpdateResLog && (!string.IsNullOrEmpty(_BlItem.Itri_res_no) && _BlItem.Itri_res_no != "N/A"))
                                    {
                                        string itemcode = _BlItem.Itri_itm_cd;
                                        _resLogAvaData = _inventoryDAL.GET_INR_RES_LOG_DATA_NEW(
                                        new INR_RES_LOG()
                                        {
                                            IRL_RES_NO = _BlItem.Itri_res_no,
                                            IRL_ITM_CD = _BlItem.Itri_itm_cd,
                                            IRL_ITM_STUS = _BlItem.Itri_itm_stus,
                                            IRL_ACT = 1,
                                            IRL_CURT_DOC_TP = "INV"
                                            // IRL_CURT_LOC = "DFS08",
                                        });
                                        if (_resLogAvaData == null || _resLogAvaData.Count == 0)
                                        {
                                            _resLogAvaData = _inventoryDAL.GET_INR_RES_LOG_DATA_NEW(
                                                                                    new INR_RES_LOG()
                                                                                    {
                                                                                        IRL_RES_NO = _BlItem.Itri_res_no,
                                                                                        IRL_ITM_CD = _BlItem.Itri_old_itm_cd,
                                                                                        IRL_ITM_STUS = _BlItem.Itri_itm_stus,
                                                                                        IRL_ACT = 1,
                                                                                        IRL_CURT_DOC_TP = "INV"
                                                                                        // IRL_CURT_LOC = "DFS08",
                                                                                    });
                                            itemcode = _BlItem.Itri_old_itm_cd;
                                        }

                                        if (_resLogAvaData.Count > 0)
                                        {
                                            _res = ReservationLogDataUpdateCancel(new INR_RES_LOG()
                                            {
                                                IRL_CURT_COM = _inventoryRequest.Itr_com,
                                                IRL_CURT_LOC = _resLogAvaData[0].IRL_ORIG_LOC,
                                                IRL_ORIG_DOC_TP = "INV",
                                                IRL_ORIG_DOC_NO = _BlItem.Itri_res_no,
                                                IRL_ORIG_DOC_DT = DateTime.Now,
                                                IRL_ORIG_LOC = _resLogAvaData[0].IRL_ORIG_LOC,
                                                IRL_CURT_DOC_TP = "CUSA",
                                                IRL_CURT_DOC_NO = _documentNo,
                                                IRL_CURT_DOC_DT = _inventoryRequest.Itr_dt,
                                                IRL_RES_NO = _BlItem.Itri_res_no,
                                                IRL_ITM_CD = itemcode,
                                                IRL_ITM_STUS = _BlItem.Itri_itm_stus,
                                                IRL_MOD_BY_NEW = _inventoryRequest.Itr_cre_by,
                                                IRL_MOD_SESSION = _inventoryRequest.Itr_session_id,
                                                IRL_MOD_DT = DateTime.Now,
                                                IRL_CRE_BY = _inventoryRequest.Itr_cre_by,
                                                IRL_CRE_DT = DateTime.Now,
                                                IRL_CRE_SESSION = _inventoryRequest.Itr_session_id,
                                                IRL_RES_QTY = _BlItem.Itri_qty,
                                                IRL_RES_WP = 1
                                            }, 0, _financialDAL, out _docNo);
                                        }
                                        if (_res < 1)
                                        {
                                            result = -1;
                                            _inventoryDAL.TransactionRollback();
                                            _cusserDal.TransactionRollback();
                                            _financialDAL.TransactionRollback();
                                            _generalDAL.TransactionRollback();
                                            _docNo = "Process Terminate - reseravation log update fail";
                                            return result;
                                        }
                                    }
                                    #endregion

                                    k++;

                                }

                            }

                            if (resqty == totreqqty) finish = "F";




                            //Update Res HDR if res qty balance==0
                            int upresult2 = 0;
                            //if (finish == "F")
                            //    upresult2 = _inventoryDAL.Update_ResHeaderStatus("F", _inventoryRequest.Itr_cre_by, _inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);
                            int _lineNo = 1;
                            var _SelectItem = _inventoryRequest.InventoryRequestItemList.Where(x => x.Itri_job_no == itm.Peo.Itri_job_no && x.Itri_com == itm.Peo.Itri_com).ToList();
                            foreach (InventoryRequestItem _ReqItem in _SelectItem)
                            {

                                //TOBOND QTY
                                if (_inventoryRequest.balancechek)
                                {
                                    decimal _resqty = 0;

                                    if (_ReqItem.Itri_res_no != null)
                                    {
                                        if (_ReqItem.Itri_res_no.Trim() == "" && _ReqItem.Itri_res_no.Trim() == "N/A")
                                        {
                                            //check bal qty
                                            //  _resqty = _salesDAL.GetResQty(itm_d.IRD_SI_NO, _ReqItem.Itri_job_line);
                                        }
                                    }


                                    decimal totalrqy = _inventoryDAL.GetTotalreqQty(_ReqItem.Itri_job_no, _inventoryRequest.Itr_com, _ReqItem.Itri_itm_cd, _ReqItem.Itri_job_line);
                                    List<TobondItemQty> Tobondqty = new List<TobondItemQty>();
                                    Tobondqty = _financialDAL.GetTobondQty(_inventoryRequest.Itr_job_no, _ReqItem.Itri_job_line);
                                    decimal tobontqty = Tobondqty.Sum(a => a.Tobond_Qty);
                                    decimal pendingresqty = _financialDAL.PendinResQtyFTobond(_inventoryRequest.Itr_job_no, _ReqItem.Itri_job_line);
                                    //TOBOND BASE ALL ENTRY SUM
                                    if (tobontqty > 0)
                                    {
                                        List<TobondItemQty> EntryQty = new List<TobondItemQty>();
                                        EntryQty = _financialDAL.GetEntryQty(_inventoryRequest.Itr_job_no, _ReqItem.Itri_job_line, _inventoryRequest.Itr_com);
                                        decimal entryqty = EntryQty.Sum(a => a.Entry_Qty);
                                        if (tobontqty < entryqty + _ReqItem.Itri_qty + totalrqy + pendingresqty)
                                        {
                                            result = -1;
                                            _inventoryDAL.TransactionRollback();
                                            _cusserDal.TransactionRollback();
                                            _financialDAL.TransactionRollback();
                                            _generalDAL.TransactionRollback();
                                            _docNo = "Balance exceed " + "Req Qty : " + totalrqy + " Res Qty : " + pendingresqty + " Item :" + _ReqItem.Itri_itm_cd;
                                            return result;
                                        }
                                    }

                                }

                                // _financialDAL.Update_Cusdec_Bqty(_inventoryRequest.Itr_ref, _ReqItem.Itri_itm_cd, _ReqItem.Itri_line_no, _ReqItem.Itri_qty);
                                _ReqItem.Itri_line_no = _lineNo;
                                _ReqItem.Itri_seq_no = result;

                                if (_ReqItem.Itri_job_line == 0)
                                {
                                    result = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _cusserDal.TransactionRollback();
                                    _financialDAL.TransactionRollback();
                                    _generalDAL.TransactionRollback();
                                    _docNo = "Process Terminate - Item not save";
                                    return result;
                                }
                                if (_inventoryRequest._checkLineno)
                                {
                                    var _checkItemline = _inventoryRequest.InventoryRequestItemList.Where(x => x.Itri_job_no == itm.Peo.Itri_job_no && x.Itri_com == itm.Peo.Itri_com
                                        && x.Itri_job_line == _ReqItem.Itri_job_line).ToList();

                                    if (_checkItemline.Count > 1)
                                    {
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        _cusserDal.TransactionRollback();
                                        _financialDAL.TransactionRollback();
                                        _generalDAL.TransactionRollback();
                                        _docNo = "Process Terminate - item line duplicate";
                                        return result;
                                    }
                                }
                                _financialDAL.SaveInventoryRequestItem(_ReqItem);

                                _lineNo++;

                                //check bl balance : by subodana
                                ImportsBLItems blitems = _inventoryDAL.GET_BL_ITMBYITMLINE(_inventoryRequest.Itr_anal2, _ReqItem.Itri_job_line);
                                if (blitems != null)
                                {
                                    if (blitems.Ibi_itm_cd == _ReqItem.Itri_itm_cd)
                                    {
                                        int currentqty = Convert.ToInt32(_ReqItem.Itri_qty);
                                        int balblqty = Convert.ToInt32(blitems.Ibi_bal_qty);
                                        if (currentqty > balblqty)
                                        {
                                            result = -1;
                                            _inventoryDAL.TransactionRollback();
                                            _cusserDal.TransactionRollback();
                                            _financialDAL.TransactionRollback();
                                            _generalDAL.TransactionRollback();
                                            _docNo = "Cant Process,  Please Check " + _ReqItem.Itri_itm_cd + " BL Balance";
                                            return result;
                                        }
                                    }
                                    else
                                    {
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        _cusserDal.TransactionRollback();
                                        _financialDAL.TransactionRollback();
                                        _generalDAL.TransactionRollback();
                                        _docNo = "Cant Found  Item : " + _ReqItem.Itri_itm_cd + " in BL";
                                        return result;
                                    }
                                }
                                else
                                {
                                    result = -1;
                                    _inventoryDAL.TransactionRollback();
                                    _cusserDal.TransactionRollback();
                                    _financialDAL.TransactionRollback();
                                    _generalDAL.TransactionRollback();
                                    _docNo = "Can't Found BL Items For : Line " + _ReqItem.Itri_job_line + " SI :" + _inventoryRequest.Itr_anal2;
                                    return result;
                                }
                                if (_ImportsBLItems != null)
                                {
                                    string _invSi = _financialDAL.InvSINo(_ReqItem.Itri_job_no);
                                    if (_invSi == "")
                                    {
                                        _invSi = _ReqItem.Itri_job_no;
                                    }

                                    List<ImportsBLItems> _newblitems = _ImportsBLItems.Where(a => a.Ibi_line == _ReqItem.Itri_job_line && a.Ibi_itm_cd == _ReqItem.Itri_itm_cd && a.Ibi_doc_no == _invSi).ToList();

                                    foreach (ImportsBLItems _BlItem in _newblitems)
                                    {
                                        bool _updatebl = true;
                                        if (!string.IsNullOrEmpty(_ReqItem.Itri_res_no) && _ReqItem.Itri_res_no != "N/A")
                                        {
                                            INR_RES _REDOBJ = new INR_RES();
                                            _REDOBJ.IRS_RES_NO = _ReqItem.Itri_res_no;
                                            _REDOBJ.IRS_COM = _inventoryRequest.Itr_com;
                                            List<INR_RES> _RES = _inventoryDAL.GET_INR_RES_DATA(_REDOBJ);
                                            if (_RES.Count > 0)
                                            {
                                                _updatebl = false;
                                            }
                                        }
                                        if (_updatebl)
                                        {
                                            int result_ = _financialDAL.Update_BI_Rqty(_BlItem.Ibi_seq_no, _BlItem.Ibi_itm_cd, _BlItem.Ibi_line, _BlItem.Ibi_req_qty, 1);

                                            if (result_ == 0)
                                            {
                                                result = -1;
                                                _inventoryDAL.TransactionRollback();
                                                _cusserDal.TransactionRollback();
                                                _financialDAL.TransactionRollback();
                                                _generalDAL.TransactionRollback();
                                                _docNo = "Process Terminate - Bl item update fail";
                                                return result;
                                            }
                                        }
                                    }

                                }

                            }
                            _docNo = _documentNo + "|" + _docNo;
                            //var _SelectItem = _inventoryRequest.InventoryRequestItemList.Where(y=>y.)

                            //Walf Automation Process By Subodana 2017-10-18

                            //Check Company Avalability
                            if (_financialDAL.CheckIsAutoEntry(_inventoryRequest.Itr_com, _inventoryRequest.Itr_sub_tp) == true)
                            {
                                string _msg = string.Empty;
                                string _returnMsg = "";
                                string Docnum = "";
                                ImpCusdecHdr oCusdecHdr0 = new ImpCusdecHdr();
                                List<ImpCusdecItm> oCusdecItm0 = new List<ImpCusdecItm>();
                                List<ImpCusdecItmCost> oCusdecItmCost0 = new List<ImpCusdecItmCost>();
                                List<ImpCusdecCost> oCusdecCost0 = new List<ImpCusdecCost>();
                                List<ImportsBLContainer> oCusdecContainer0 = new List<ImportsBLContainer>();

                                MasterCompany oMstCom = _generalDAL.GetCompByCode(Convert.ToString(_inventoryRequest.Itr_com));
                                int _custStatus = GetCusdecReqData(_inventoryRequest.Itr_com, oMstCom.Mc_anal19, _inventoryRequest.Itr_sub_tp, _documentNo, out oCusdecHdr0, out oCusdecItm0, out oCusdecItmCost0, out oCusdecCost0, out oCusdecContainer0, out _msg, false);
                                if (_custStatus == 1)
                                {
                                    ImpCusdecHdr oCusdecHdr = oCusdecHdr0;
                                    List<ImpCusdecItm> oCusdecItm = oCusdecItm0;
                                    List<ImpCusdecItmCost> oCusdecItmCost = oCusdecItmCost0;
                                    List<ImpCusdecCost> oCusdecCost = oCusdecCost0.OrderBy(x => x.Cus_line).ToList();
                                    List<ImportsBLContainer> oCusdecContainer = oCusdecContainer0;

                                    if (_inventoryRequest.Itr_sub_tp == "EX") oCusdecHdr.CUH_TP = "EX";
                                    if (_inventoryRequest.Itr_sub_tp == "RE") oCusdecHdr.CUH_TP = "RE";
                                    if (_inventoryRequest.Itr_sub_tp == "EXP") oCusdecHdr.CUH_TP = "EXP";
                                    oCusdecHdr.CUH_DT = DateTime.Now.Date;
                                    oCusdecHdr.CUH_TOT_AMT = Math.Round(oCusdecHdr.CUH_TOT_AMT, 2);
                                    CusdecCommon oCusdecCommon = _financialDAL.Get_CusdecCommon(oMstCom.Mc_anal19);
                                    if (oCusdecCommon != null)
                                    {
                                        oCusdecHdr.CUH_COM_CHG = oCusdecCommon.Rcsc_comchg_0;
                                    }
                                    if (string.IsNullOrEmpty(oCusdecHdr.CUH_PROCE_CD_1.ToString()))
                                    {
                                        oCusdecHdr.CUH_PROCE_CD_1 = "4172";
                                        oCusdecHdr.CUH_PROCE_CD_2 = "000";
                                    }
                                    if (_inventoryRequest.Itr_bus_code != null && _inventoryRequest.Itr_bus_code != "")
                                    {
                                        MasterBusinessEntity _mstBusEntity = _salesDAL.GetCustomerProfileNew(
                                                new MasterBusinessEntity() { Mbe_com = _inventoryRequest.Itr_com, Mbe_cd = _inventoryRequest.Itr_bus_code, Mbe_tp = "C" }
                                                ).FirstOrDefault();
                                        if (_mstBusEntity != null)
                                        {
                                            oCusdecHdr.CUH_PROC_CD = _mstBusEntity.Mbe_proc_cd;
                                            oCusdecHdr.CUH_PROCE_CD_1 = _mstBusEntity.Mbe_proc_val1;
                                            oCusdecHdr.CUH_PROCE_CD_2 = _mstBusEntity.Mbe_proc_val2;

                                            if (string.IsNullOrEmpty(oCusdecHdr.CUH_PROC_CD) || string.IsNullOrEmpty(oCusdecHdr.CUH_PROCE_CD_1) || string.IsNullOrEmpty(oCusdecHdr.CUH_PROCE_CD_2))
                                            {
                                                result = -1;
                                                _inventoryDAL.TransactionRollback();
                                                _cusserDal.TransactionRollback();
                                                _financialDAL.TransactionRollback();
                                                _generalDAL.TransactionRollback();
                                                _docNo = "Please Setup Proc Code For  :" + _inventoryRequest.Itr_bus_code;
                                                return result;
                                            }
                                            List<CustomsProcedureCodes> _custProcCds = _financialDAL.GetCustomsProcedureCodes(oMstCom.Mc_anal19, Convert.ToString(_inventoryRequest.Itr_com), string.Empty, string.Empty, _inventoryRequest.Itr_sub_tp, oCusdecHdr.CUH_PROC_CD);
                                            if (_custProcCds == null)
                                            {
                                                result = -1;
                                                _inventoryDAL.TransactionRollback();
                                                _cusserDal.TransactionRollback();
                                                _financialDAL.TransactionRollback();
                                                _generalDAL.TransactionRollback();
                                                _docNo = "Proc Code Not Setup :" + oCusdecHdr.CUH_PROC_CD;
                                                return result;
                                            }
                                            _custProcCds = _custProcCds.Where(a => a.Mph_def == 1).ToList();
                                            if (_custProcCds != null && _custProcCds.Count > 0)
                                            {
                                                oCusdecHdr.CUH_DECL_1 = _custProcCds.First().Mph_decl_1;
                                                oCusdecHdr.CUH_DECL_2 = _custProcCds.First().Mph_decl_2;
                                                oCusdecHdr.CUH_DECL_3 = _custProcCds.First().Mph_decl_3;

                                            }
                                            else
                                            {
                                                result = -1;
                                                _inventoryDAL.TransactionRollback();
                                                _cusserDal.TransactionRollback();
                                                _financialDAL.TransactionRollback();
                                                _generalDAL.TransactionRollback();
                                                _docNo = "Proc Code Not Setup :" + oCusdecHdr.CUH_PROC_CD;
                                                return result;
                                            }

                                        }
                                    }
                                    oCusdecHdr.CUH_STUS = "A";
                                    oCusdecHdr.CUH_CRE_BY = Convert.ToString(_inventoryRequest.Itr_cre_by);
                                    oCusdecHdr.CUH_CRE_SESSION = Convert.ToString(_inventoryRequest.Itr_session_id);
                                    oCusdecHdr.CUH_MOD_BY = Convert.ToString(_inventoryRequest.Itr_cre_by);
                                    oCusdecHdr.CUH_MOD_SESSION = Convert.ToString(_inventoryRequest.Itr_session_id);
                                    oCusdecHdr.CUH_PPC_NO = oCusdecHdr.CUH_CUSDEC_ENTRY_NO.ToString() + " OF " + oCusdecHdr.CUH_CUSDEC_ENTRY_DT.ToString("dd/MM/yyyy");
                                    oCusdecHdr.CUH_NATURE_OF_TRANCE = "AUTOGENARATED";
                                    if (oCusdecHdr.CUH_TP == "RE")
                                    {
                                        MasterBusinessEntity _mstBusEntity = _salesDAL.GetCustomerProfileNew(
                                                new MasterBusinessEntity() { Mbe_com = _inventoryRequest.Itr_com, Mbe_cd = oCusdecHdr.CUH_CONSI_CD, Mbe_tp = "C" }
                                                ).FirstOrDefault();
                                        if (_mstBusEntity != null)
                                        {
                                            oCusdecHdr.CUH_CONSI_TIN = _mstBusEntity.Mbe_oth_id_no;
                                        }
                                    }
                                    string accountNo = _salesDAL.GetAccountNo(oCusdecHdr.CUH_CONSI_CD, oCusdecHdr.CUH_COM);
                                    if (!(accountNo.Equals(string.Empty)))
                                    {
                                        oCusdecHdr.CUH_ACC_NO = accountNo;
                                    }
                                    else
                                    {
                                        oCusdecHdr.CUH_ACC_NO = oCusdecCommon.Rcsc_acc_no;
                                    }
                                    DataTable _cusdet = _financialDAL.GetEntryDateSNo(_inventoryRequest.Itr_com, oCusdecHdr.CUH_SUN_BOND_NO);
                                    if (_cusdet != null && _cusdet.Rows.Count > 0)
                                    {
                                        // oCusdecHdr.CUH_CUSDEC_ENTRY_NO = _cusdet.Rows[0][1].ToString();
                                        // oCusdecHdr.CUH_CUSDEC_ENTRY_DT = Convert.ToDateTime(_cusdet.Rows[0][2].ToString()).Date;
                                        oCusdecHdr.CUH_PPC_NO = _cusdet.Rows[0][1].ToString() + " Of " + Convert.ToDateTime(_cusdet.Rows[0][2].ToString()).Date.ToString("dd/MM/yyyy");
                                        oCusdecHdr.CUH_BL_NO = _cusdet.Rows[0][1].ToString() + " Of " + Convert.ToDateTime(_cusdet.Rows[0][2].ToString()).Date.ToString("dd/MM/yyyy");
                                    }
                                    result = SaveCusdec(oCusdecHdr, oCusdecItm, oCusdecCost, false, out _returnMsg, 1, out Docnum, false, false);
                                    if (result < 0)
                                    {
                                        result = -1;
                                        _inventoryDAL.TransactionRollback();
                                        _cusserDal.TransactionRollback();
                                        _financialDAL.TransactionRollback();
                                        _generalDAL.TransactionRollback();
                                        _docNo = _returnMsg;
                                        return result;
                                    }

                                    _docNo = _docNo + " | Entry No:" + Docnum;
                                }

                            }
                        }

                    }

                    // _inventoryDAL.Change_MRNReq_status(_inventoryRequest.Itr_com, _inventoryRequest.Itr_ref);




                    _financialDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _cusserDal.TransactionCommit();
                    _generalDAL.TransactionCommit();

                    result = 1;

                }

            }
            catch (Exception ex)
            {
                result = -1;
                _inventoryDAL.TransactionRollback();
                _cusserDal.TransactionRollback();
                _financialDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _docNo = ex.Message;
            }
            return result;
        }
        public Int32 ReservationLogDataUpdateCancel(INR_RES_LOG _obj, Int32 _updateTp, FinancialDAL _findal, out string _err)
        {
            _err = string.Empty;
            Int32 _res = 0;
            List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
            INR_RES_LOG _resLogSave = new INR_RES_LOG();
            INR_RES _resHdr = new INR_RES();
            INR_RES_DET _resDet = new INR_RES_DET();
            bool _resDetDataAva = false;
            bool _resLogDataAva = false;
            try
            {
                #region collect data 1
                _resHdr = _findal.GET_INR_RES_DATA(new INR_RES() { IRS_RES_NO = _obj.IRL_RES_NO, IRS_COM = _obj.IRL_CURT_COM }).FirstOrDefault();
                _resDet = _findal.GET_INR_RES_DET_DATA(new INR_RES_DET()
                {
                    IRD_RES_NO = _obj.IRL_RES_NO,
                    IRD_ITM_CD = _obj.IRL_ITM_CD,
                    IRD_ITM_STUS = _obj.IRL_ITM_STUS
                }).FirstOrDefault();
                if (_resDet != null)
                {
                    _resDetDataAva = true;
                }
                if (!_resDetDataAva)
                {
                    _res = -1;
                    _err = "Reservation detail data not found !";
                    return _res;
                }
                #endregion
                if (_updateTp == 0)//Insert
                {
                    #region collect data 2
                    INR_RES_LOG _resObj = new INR_RES_LOG();
                    _resObj.IRL_RES_NO = _obj.IRL_RES_NO;
                    _resObj.IRL_ITM_CD = _obj.IRL_ITM_CD;
                    _resObj.IRL_ITM_STUS = _obj.IRL_ITM_STUS;
                    _resObj.IRL_CURT_COM = _obj.IRL_CURT_COM;
                    _resObj.IRL_CURT_LOC = _obj.IRL_CURT_LOC;
                    _resObj.IRL_CURT_DOC_NO = _obj.IRL_ORIG_DOC_NO;
                    _resObj.IRL_CURT_DOC_TP = _obj.IRL_ORIG_DOC_TP;
                    _resObj.IRL_ACT = 1;
                    if (_obj.IRL_CURT_DOC_TP == "AOD-IN")
                    {
                        _resObj.IRL_CURT_COM = "GIT";
                        _resObj.IRL_CURT_LOC = "GIT";
                    }
                    _resLogAvaData = _findal.GET_INR_RES_LOG_DATA_NEW(_resObj);

                    if (_resLogAvaData != null)
                    {
                        if (_resLogAvaData.Count > 0)
                        {
                            _resLogDataAva = true;
                        }
                    }
                    if (!_resLogDataAva)
                    {
                        _res = -1;
                        _err = "Reservation log data not found !";
                        return _res;
                    }
                    #endregion
                    if (_resLogAvaData.Count > 0)
                    {
                        #region update temp bal column
                        INR_RES_LOG _tmpLogRes = new INR_RES_LOG();
                        foreach (var _tmpResData in _resLogAvaData)
                        {
                            _tmpLogRes = INR_RES_LOG.CreateNewObject(_tmpResData);
                            _tmpResData.TMP_IRL_RES_BQTY = _tmpResData.IRL_RES_BQTY;
                        }
                        #endregion
                        _resLogAvaData = _resLogAvaData.OrderBy(c => c.IRL_CURT_DOC_DT).ToList();
                        //Update process
                        while (_obj.IRL_RES_QTY > 0)
                        {
                            decimal _reAvaCount = 0;
                            if (_resLogAvaData.Count > 0)
                            {
                                _reAvaCount = _resLogAvaData.Sum(c => c.IRL_RES_BQTY);
                            }
                            if (_reAvaCount <= 0)
                            {
                                break;
                            }

                            foreach (var _resAva in _resLogAvaData)
                            {
                                if (_obj.IRL_RES_QTY > 0)
                                {
                                    if (_resAva.IRL_RES_BQTY > 0)
                                    {
                                        //if (_resAva.TMP_IRL_RES_BQTY >= _obj.IRL_RES_QTY)
                                        if (_obj.IRL_RES_QTY <= _resAva.IRL_RES_BQTY)
                                        {
                                            #region if available balance equal or grater
                                            #region update
                                            _resLogSave = new INR_RES_LOG();
                                            _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                            _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                            _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                            _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                            _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                            _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                            _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                            _resLogSave.IRL_LINE = _resAva.IRL_LINE;


                                            _resLogSave.IRL_RES_IQTY = _obj.IRL_RES_QTY;
                                            _resAva.IRL_RES_BQTY = _resAva.IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                            //_resAva.TMP_IRL_RES_BQTY = _resAva.TMP_IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                            _resLogSave.IRL_ACT = _resAva.IRL_RES_BQTY <= 0 ? 0 : 1;
                                            _res = _findal.InrResLogDataUpdateIssue(_resLogSave);
                                            #endregion
                                            #region save
                                            _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;

                                            _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                            _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_QTY = _obj.IRL_RES_QTY;
                                            _resLogSave.IRL_RES_BQTY = _obj.IRL_RES_QTY;
                                            _resLogSave.IRL_RES_IQTY = 0;
                                            _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                            _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                            _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                            _resLogSave.IRL_ACT = _resLogSave.IRL_RES_BQTY <= 0 ? 0 : 1;

                                            _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                            _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                            _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                            {
                                                _resLogSave.IRL_CURT_COM = "GIT";
                                                _resLogSave.IRL_CURT_LOC = "GIT";
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                            {
                                                _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                                _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                                _resLogSave.IRL_RES_WP = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "DO")
                                            {
                                                _resLogSave.IRL_RES_BQTY = 0;
                                                _resLogSave.IRL_RES_IQTY = _resLogSave.IRL_RES_QTY;
                                                _resLogSave.IRL_ACT = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP != "INV")
                                            {
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            _resLogSave.IRL_BASE_LINE = _resAva.IRL_LINE;
                                            _res = _findal.InrResLogDataSave(_resLogSave);
                                            #endregion
                                            _obj.IRL_RES_QTY = _obj.IRL_RES_QTY - _obj.IRL_RES_QTY;
                                            #endregion
                                        }
                                        else
                                        {
                                            #region if available balance  less
                                            _resLogSave = new INR_RES_LOG();
                                            _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                            _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                            _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                            _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                            _resLogSave.IRL_RES_IQTY = _resAva.IRL_RES_BQTY;
                                            _resAva.IRL_RES_BQTY = 0;
                                            // _resAva.TMP_IRL_RES_BQTY = 0;
                                            _resLogSave.IRL_ACT = 0;
                                            _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                            _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                            _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                            _resLogSave.IRL_LINE = _resAva.IRL_LINE;
                                            _res = _findal.InrResLogDataUpdateIssue(_resLogSave);

                                            _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;
                                            _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                            _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_QTY = _resLogSave.IRL_RES_IQTY;
                                            _resLogSave.IRL_RES_BQTY = _resLogSave.IRL_RES_IQTY;
                                            _resLogSave.IRL_RES_IQTY = 0;
                                            _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                            _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                            _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                            _resLogSave.IRL_ACT = 1;

                                            _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                            _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                            _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                            {
                                                _resLogSave.IRL_CURT_COM = "GIT";
                                                _resLogSave.IRL_CURT_LOC = "GIT";
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                            {
                                                _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                                _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                                _resLogSave.IRL_RES_WP = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "INV")
                                            {
                                                _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                                _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                                _resLogSave.IRL_RES_WP = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "DO")
                                            {
                                                _resLogSave.IRL_RES_BQTY = 0;
                                                _resLogSave.IRL_RES_IQTY = _resLogSave.IRL_RES_QTY;
                                                _resLogSave.IRL_ACT = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP != "INV")
                                            {
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            _resLogSave.IRL_BASE_LINE = _resAva.IRL_LINE;
                                            _res = _findal.InrResLogDataSave(_resLogSave);
                                            _obj.IRL_RES_QTY = _obj.IRL_RES_QTY - _resLogSave.IRL_RES_QTY;
                                            if (_obj.IRL_RES_QTY == 0)
                                            {
                                                continue;
                                            }
                                            #endregion
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message.ToString();
                _res = -1;
            }
            return _res;
        }
        //subodana
        public DateTime GetEntryDatetime(string Com, string Entry)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetEntryDatetime(Com, Entry);
        }

        //subodana
        public DataTable GetEntryNumbers(string com, string Type, DateTime frmDate, DateTime todate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetEntryNumbers(com, Type, frmDate, todate);
        }
        public List<ref_comm_trgt_comm> GetTargetCommRates(string docno, string exec, Int32 _month, Int32 Year)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetTargetCommRates(docno, exec, _month, Year);
        }
        public int SaveCommTargetCommission(List<ref_comm_trgt_comm> list, out string _errer)
        {
            int effect = 0;
            _errer = "";
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {
                foreach (var _list in list)
                {
                    effect = _financialDAL.SaveTargetCommRates(_list);
                }
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                effect = -1;
            }
            return effect;
        }
        public DataTable GET_TAX_BY_INV_TYPE(string p_pc, DateTime p_from, DateTime p_to, string p_inv_type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_TAX_BY_INV_TYPE(p_pc, p_from, p_to, p_inv_type);
        }
        public DataTable GNT_REM_SUM(string p_pc, DateTime p_from, DateTime p_to, Int32 p_rem_dayend)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GNT_REM_SUM(p_pc, p_from, p_to, p_rem_dayend);
        }
        public DataTable SAT_RECEIPT_ALL_DET(string p_com, string p_pc, DateTime p_from, DateTime p_to)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SAT_RECEIPT_ALL_DET(p_com, p_pc, p_from, p_to);
        }
        public DataTable SAT_Collec_summery(string p_com, string p_pc, DateTime p_from, DateTime p_to, Int32 p_oth_shp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SAT_Collec_summery(p_com, p_pc, p_from, p_to, p_oth_shp);
        }
        public Int32 ReservationLogDataUpdateCancel(INR_RES_LOG _obj, Int32 _updateTp, InventoryDAL _invDal, out string _err)
        {
            _err = string.Empty;
            Int32 _res = 0;
            List<INR_RES_LOG> _resLogAvaData = new List<INR_RES_LOG>();
            INR_RES_LOG _resLogSave = new INR_RES_LOG();
            INR_RES _resHdr = new INR_RES();
            INR_RES_DET _resDet = new INR_RES_DET();
            bool _resDetDataAva = false;
            bool _resLogDataAva = false;
            try
            {
                #region collect data 1
                _resHdr = _financialDAL.GET_INR_RES_DATA(new INR_RES() { IRS_RES_NO = _obj.IRL_RES_NO, IRS_COM = _obj.IRL_CURT_COM }).FirstOrDefault();
                _resDet = _financialDAL.GET_INR_RES_DET_DATA(new INR_RES_DET()
                {
                    IRD_RES_NO = _obj.IRL_RES_NO,
                    IRD_ITM_CD = _obj.IRL_ITM_CD,
                    IRD_ITM_STUS = _obj.IRL_ITM_STUS
                }).FirstOrDefault();
                if (_resDet != null)
                {
                    _resDetDataAva = true;
                }
                if (!_resDetDataAva)
                {
                    _res = -1;
                    _err = "Reservation detail data not found !";
                    return _res;
                }
                #endregion
                if (_updateTp == 0)//Insert
                {
                    #region collect data 2
                    INR_RES_LOG _resObj = new INR_RES_LOG();
                    _resObj.IRL_RES_NO = _obj.IRL_RES_NO;
                    _resObj.IRL_ITM_CD = _obj.IRL_ITM_CD;
                    _resObj.IRL_ITM_STUS = _obj.IRL_ITM_STUS;
                    _resObj.IRL_CURT_COM = _obj.IRL_CURT_COM;
                    _resObj.IRL_CURT_LOC = _obj.IRL_CURT_LOC;
                    _resObj.IRL_CURT_DOC_NO = _obj.IRL_ORIG_DOC_NO;
                    _resObj.IRL_CURT_DOC_TP = _obj.IRL_ORIG_DOC_TP;
                    _resObj.IRL_ACT = 1;
                    if (_obj.IRL_CURT_DOC_TP == "AOD-IN")
                    {
                        _resObj.IRL_CURT_COM = "GIT";
                        _resObj.IRL_CURT_LOC = "GIT";
                    }
                    _resLogAvaData = _financialDAL.GET_INR_RES_LOG_DATA_NEW(_resObj);

                    if (_resLogAvaData != null)
                    {
                        if (_resLogAvaData.Count > 0)
                        {
                            _resLogDataAva = true;
                        }
                    }
                    if (!_resLogDataAva)
                    {
                        _res = -1;
                        _err = "Reservation log data not found !";
                        return _res;
                    }
                    #endregion
                    if (_resLogAvaData.Count > 0)
                    {
                        #region update temp bal column
                        INR_RES_LOG _tmpLogRes = new INR_RES_LOG();
                        foreach (var _tmpResData in _resLogAvaData)
                        {
                            _tmpLogRes = INR_RES_LOG.CreateNewObject(_tmpResData);
                            _tmpResData.TMP_IRL_RES_BQTY = _tmpResData.IRL_RES_BQTY;
                        }
                        #endregion
                        _resLogAvaData = _resLogAvaData.OrderBy(c => c.IRL_CURT_DOC_DT).ToList();
                        //Update process
                        while (_obj.IRL_RES_QTY > 0)
                        {
                            decimal _reAvaCount = 0;
                            if (_resLogAvaData.Count > 0)
                            {
                                _reAvaCount = _resLogAvaData.Sum(c => c.IRL_RES_BQTY);
                            }
                            if (_reAvaCount <= 0)
                            {
                                break;
                            }

                            foreach (var _resAva in _resLogAvaData)
                            {
                                if (_obj.IRL_RES_QTY > 0)
                                {
                                    if (_resAva.IRL_RES_BQTY > 0)
                                    {
                                        //if (_resAva.TMP_IRL_RES_BQTY >= _obj.IRL_RES_QTY)
                                        if (_obj.IRL_RES_QTY <= _resAva.IRL_RES_BQTY)
                                        {
                                            #region if available balance equal or grater
                                            #region update
                                            _resLogSave = new INR_RES_LOG();
                                            _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                            _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                            _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                            _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                            _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                            _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                            _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                            _resLogSave.IRL_LINE = _resAva.IRL_LINE;


                                            _resLogSave.IRL_RES_IQTY = _obj.IRL_RES_QTY;
                                            _resAva.IRL_RES_BQTY = _resAva.IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                            //_resAva.TMP_IRL_RES_BQTY = _resAva.TMP_IRL_RES_BQTY - _obj.IRL_RES_QTY;
                                            _resLogSave.IRL_ACT = _resAva.IRL_RES_BQTY <= 0 ? 0 : 1;
                                            _res = _financialDAL.InrResLogDataUpdateIssue(_resLogSave);
                                            #endregion
                                            #region save
                                            _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;

                                            _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                            _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_QTY = _obj.IRL_RES_QTY;
                                            _resLogSave.IRL_RES_BQTY = _obj.IRL_RES_QTY;
                                            _resLogSave.IRL_RES_IQTY = 0;
                                            _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                            _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                            _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                            _resLogSave.IRL_ACT = _resLogSave.IRL_RES_BQTY <= 0 ? 0 : 1;

                                            _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                            _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                            _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                            {
                                                _resLogSave.IRL_CURT_COM = "GIT";
                                                _resLogSave.IRL_CURT_LOC = "GIT";
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                            {
                                                _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                                _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                                _resLogSave.IRL_RES_WP = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "DO")
                                            {
                                                _resLogSave.IRL_RES_BQTY = 0;
                                                _resLogSave.IRL_RES_IQTY = _resLogSave.IRL_RES_QTY;
                                                _resLogSave.IRL_ACT = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP != "INV")
                                            {
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            _resLogSave.IRL_BASE_LINE = _resAva.IRL_LINE;
                                            _res = _financialDAL.InrResLogDataSave(_resLogSave);
                                            #endregion
                                            _obj.IRL_RES_QTY = _obj.IRL_RES_QTY - _obj.IRL_RES_QTY;
                                            #endregion
                                        }
                                        else
                                        {
                                            #region if available balance  less
                                            _resLogSave = new INR_RES_LOG();
                                            _resLogSave.IRL_RES_NO = _resAva.IRL_RES_NO;
                                            _resLogSave.IRL_CURT_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_CURT_LOC = _resAva.IRL_CURT_LOC;
                                            _resLogSave.IRL_CURT_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ITM_CD = _resAva.IRL_ITM_CD;
                                            _resLogSave.IRL_ITM_STUS = _resAva.IRL_ITM_STUS;
                                            _resLogSave.IRL_RES_IQTY = _resAva.IRL_RES_BQTY;
                                            _resAva.IRL_RES_BQTY = 0;
                                            // _resAva.TMP_IRL_RES_BQTY = 0;
                                            _resLogSave.IRL_ACT = 0;
                                            _resLogSave.IRL_MOD_BY_NEW = _obj.IRL_MOD_BY_NEW;
                                            _resLogSave.IRL_MOD_DT = _obj.IRL_MOD_DT;
                                            _resLogSave.IRL_MOD_SESSION = _obj.IRL_MOD_SESSION;
                                            _resLogSave.IRL_LINE = _resAva.IRL_LINE;
                                            _res = _financialDAL.InrResLogDataUpdateIssue(_resLogSave);

                                            _resLogSave.IRL_ORIG_COM = _resAva.IRL_CURT_COM;
                                            _resLogSave.IRL_ORIG_LOC = _resAva.IRL_CURT_LOC;
                                            _resLogSave.IRL_SEQ = _resHdr.IRS_SEQ;
                                            _resLogSave.IRL_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_LINE = _resDet.IRD_LINE;
                                            _resLogSave.IRL_RES_QTY = _resLogSave.IRL_RES_IQTY;
                                            _resLogSave.IRL_RES_BQTY = _resLogSave.IRL_RES_IQTY;
                                            _resLogSave.IRL_RES_IQTY = 0;
                                            _resLogSave.IRL_CRE_BY = _obj.IRL_CRE_BY;
                                            _resLogSave.IRL_CRE_DT = _obj.IRL_CRE_DT;
                                            _resLogSave.IRL_CRE_SESSION = _obj.IRL_CRE_SESSION;
                                            _resLogSave.IRL_ACT = 1;

                                            _resLogSave.IRL_ORIG_DOC_NO = _resAva.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_ORIG_DOC_TP = _resAva.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_ORIG_DOC_DT = _resAva.IRL_CURT_DOC_DT;

                                            _resLogSave.IRL_CURT_DOC_NO = _obj.IRL_CURT_DOC_NO;
                                            _resLogSave.IRL_CURT_DOC_TP = _obj.IRL_CURT_DOC_TP;
                                            _resLogSave.IRL_CURT_DOC_DT = _obj.IRL_CURT_DOC_DT;
                                            _resLogSave.IRL_RES_WP = _obj.IRL_RES_WP;
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-OUT")
                                            {
                                                _resLogSave.IRL_CURT_COM = "GIT";
                                                _resLogSave.IRL_CURT_LOC = "GIT";
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "AOD-IN")
                                            {
                                                _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                                _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                                _resLogSave.IRL_RES_WP = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "INV")
                                            {
                                                _resLogSave.IRL_CURT_COM = _obj.TMP_AOD_IN_COM;
                                                _resLogSave.IRL_CURT_LOC = _obj.TMP_AOD_IN_LOC;
                                                _resLogSave.IRL_RES_WP = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP == "DO")
                                            {
                                                _resLogSave.IRL_RES_BQTY = 0;
                                                _resLogSave.IRL_RES_IQTY = _resLogSave.IRL_RES_QTY;
                                                _resLogSave.IRL_ACT = 0;
                                            }
                                            if (_resLogSave.IRL_CURT_DOC_TP != "INV")
                                            {
                                                _resLogSave.IRL_RES_WP = 1;
                                            }
                                            _resLogSave.IRL_BASE_LINE = _resAva.IRL_LINE;
                                            _res = _financialDAL.InrResLogDataSave(_resLogSave);
                                            _obj.IRL_RES_QTY = _obj.IRL_RES_QTY - _resLogSave.IRL_RES_QTY;
                                            if (_obj.IRL_RES_QTY == 0)
                                            {
                                                continue;
                                            }
                                            #endregion
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message.ToString();
                _res = -1;
            }
            return _res;
        }
        // subodana
        public string GetRecAccount(string InvNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRecAccount(InvNo);
        }
        // subodana
        public decimal GetBDLTransINV(string InvNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBDLTransINV(InvNo);
        }
        //subodana
        public string GetRecChassisNo(string InvNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRecChassisNo(InvNo);
        }
        public List<MST_COST_ELE> GetCostEleSubType(string com, string code)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostEleSubType(com, code);
        }
        public List<ImportsBLContainer> GetCostContainers(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostContainers(sino);
        }
        public List<IMP_CST_ELEREF_DET> GetCostEleSubDetails(Int64 seq, Int32 refline)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostEleSubDetails(seq, refline);
        }
        public List<IMP_CST_ELEREF_DET> GetCostEleSubDetailsAll(Int64 seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostEleSubDetailsAll(seq);
        }
        public List<SunAALRec> GET_SUNRECREF(String InvNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_SUNRECREF(InvNo);
        }
        public DataTable Process_Age_Anal_Debt_Outstand_veh_re(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _cust, Int32 _tp)
        {

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            _securityDAL = new SecurityDAL();   //Tharanga 14/11/2017
            if (_securityDAL.Is_Report_DR("AgeAnalDebtOutstandVehiReg") == true) _financialDAL.ConnectionOpen_DR();

            return _financialDAL.Process_Age_Anal_Debt_Outstand_veh_re(_from, _to, _com, _pc, _user, _cust, _tp);
        }
        public List<ImportsBLContainer> GetSIByContainer(string contai)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSIByContainer(contai);
        }
        //subodana
        public decimal CostTransCost(string com, string type, string costtype, string loc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CostTransCost(com, type, costtype, loc);
        }
        //subodana
        public decimal Ship_BankCost(string _com, string _bank, Int32 _foc, Int32 _garrent, string _type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Ship_BankCost(_com, _bank, _foc, _garrent, _type);
        }
        //add by tharnga 2017/11/23
        public DataTable GET_HP_Acc_Resc_His(string p_pc, DateTime _fromDate, DateTime _toDate, Int32 as_at_date)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            _securityDAL = new SecurityDAL();   //Tharanga 14/11/2017
            if (_securityDAL.Is_Report_DR("HP_Acc_Rescription_History") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.GET_HP_Acc_Resc_His(p_pc, _fromDate, _toDate, as_at_date);
        }
        public DataTable Get_rejectAccBalance_New(string _com, string _loc, DateTime _asatDate, string _userID)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            _securityDAL = new SecurityDAL();   //Dilshan 02/11/2018
            if (_securityDAL.Is_Report_DR("HP_Reject_Acc_Details") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.Get_rejectAccBalance_New(_com, _loc, _asatDate, _userID);
        }
        public decimal Isurance_balance(string p_acc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Isurance_balance(p_acc);
        }
        public DataTable Collection_det(string p_pc, string accno, DateTime _Date, decimal _amount, out decimal _ins, out decimal _diriya, out decimal _collection, out decimal _servicecharge, Int32 p_ecd)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Collection_det(p_pc, accno, _Date, _amount, out _ins, out _diriya, out _collection, out _servicecharge, p_ecd);
        }
        public List<InventoryRequestItem> GET_INT_REQ_ITM_BY_SEQ(Int32 seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_INT_REQ_ITM_BY_SEQ(seq);
        }
        public List<INT_REQ_SER> _INT_REQ_SER(Int32 _seqNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL._INT_REQ_SER(_seqNo);
        }
        //subodana
        public bool isstatusvalidation(string com, string item, string status, string tobond, decimal currqty)
        {
            bool avalable = false;
            _financialDAL = new FinancialDAL();


            string _realtobondno = _financialDAL.ToBondSINo(tobond);
            if (_realtobondno != "")
            {
                tobond = _realtobondno;
            }

            decimal totgrnqty = _financialDAL.AvalableGRNStatusQty(com, item, status, tobond);
            if (totgrnqty == -1)
            {
                avalable = true;
                return avalable;
            }
            if (totgrnqty >= 0)
            {
                decimal pendingqty = _financialDAL.PendingResQty(com, item, status, tobond);

                if ((totgrnqty - pendingqty - currqty) < 0)
                {
                    avalable = false;
                    return avalable;
                }
                else
                {
                    avalable = true;
                    return avalable;
                }

            }
            return avalable;
        }
        //subodana
        public string GetFinBankCode(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetFinBankCode(sino);
        }
        public Int32 CreateOrderPlansusingExcel(List<OrderPlanExcelUploader> _opExcelData, MasterAutoNumber _masterAutoNumber, out List<OrderPlanHeader> _opHdrdocs, out string _docNo, out string _err)
        {
            Int32 _res = -1;
            _opHdrdocs = new List<OrderPlanHeader>();
            List<MasterItemAllocate> _alloList = new List<MasterItemAllocate>();
            MasterItemAllocate _allo = new MasterItemAllocate();
            List<OrderPlanExcelUploader> _newModList = new List<OrderPlanExcelUploader>();
            _docNo = "";
            _err = "";
            Int32 _effect = 0, _tmpDocNo = 0;
            Tuple<int, int> _effect2;
            _financialDAL = new FinancialDAL();
            try
            {
                #region MyRegion
                List<OrderPlanHeader> _opList = new List<OrderPlanHeader>();
                OrderPlanHeader _opHdr = new OrderPlanHeader();
                OrderPlanItem _opItm = new OrderPlanItem();
                MasterItemModel _model = new MasterItemModel();
                List<MasterItemModel> _modelList = new List<MasterItemModel>();
                List<MasterBufferChannel> _bufList = new List<MasterBufferChannel>();
                MasterBufferChannel _bufLvl = new MasterBufferChannel();
                #endregion
                #region
                // var _opNewModList = _opExcelData.Where(c => c.Is_itm_base == false).ToList();
                #region model list create
                foreach (var item in _opExcelData)
                {
                    if (!item.Is_itm_base)
                    {
                        var _opNewMod = _newModList.Where(c => c.Model == item.Model).FirstOrDefault();
                        if (_opNewMod == null)
                        {
                            _newModList.Add(item);
                        }
                    }
                }
                #endregion
                var _opExcList = _opExcelData.GroupBy(x => new { x.Supplier, x.Mode_of_shipment, x.Port_of_origin, x.Traid_term }).Select(group => new { Peo = group.Key });
                foreach (var item in _opExcelData)
                {
                    #region order plan data setup
                    _tmpDocNo = 1;
                    var vOpHdr = _opList.Where(c => c.IO_SUPP == item.Supplier && c.IO_TOS == item.Mode_of_shipment && c.IO_FRM_PORT == item.Port_of_origin && c.IO_TOP == item.Traid_term).FirstOrDefault();
                    if (vOpHdr == null)
                    {
                        #region hdr
                        _opHdr = new OrderPlanHeader();
                        _opHdr.IO_OP_NO = "";
                        _opHdr.IO_REF_NO = item.Ref_no;
                        _opHdr.IO_OP_DT = DateTime.Today;
                        _opHdr.IO_COM = item.IO_COM;
                        _opHdr.IO_SBU = item.IO_SBU;
                        _opHdr.IO_SUPP = item.Supplier;
                        _opHdr.IO_TP = "S";
                        _opHdr.IO_RMK = item.IO_REM;
                        _opHdr.IO_CUR = item.Currency;
                        _opHdr.IO_EX_RT = item.CurrencyRate;// Convert.ToDecimal(exchangerate);
                        _opHdr.IO_TOP_CAT = "TOT";
                        _opHdr.IO_TOP = item.Traid_term;
                        _opHdr.IO_TOS = item.Mode_of_shipment;
                        _opHdr.IO_FRM_PORT = item.Port_of_origin;
                        _opHdr.IO_TO_PORT = "CMB";
                        _opHdr.IO_ETA_DT = DateTime.Today.AddDays(2).Date;//Convert.ToDateTime(txteta.Text.Trim());
                        _opHdr.IO_IS_KIT = 0;// Convert.ToInt32(kituses);
                        _opHdr.IO_STUS = "P";
                        _opHdr.IO_SEND = 0;//Convert.ToInt32(IO_SEND);
                        _opHdr.IO_SEND_DT = DateTime.Today;//Convert.ToDateTime(IO_SEND_DT);
                        _opHdr.IO_AMD_SEQ = 0;
                        _opHdr.IO_TOT_QTY = 0;// Convert.ToDecimal(lbltotordqty.Text);
                        _opHdr.IO_TOT_AMT = 0;// Convert.ToDecimal(lbltotordval.Text);
                        _opHdr.IO_ANAL_1 = string.Empty;
                        _opHdr.IO_ANAL_2 = string.Empty;
                        _opHdr.IO_ANAL_3 = string.Empty;
                        _opHdr.IO_ANAL_4 = string.Empty;
                        _opHdr.IO_ANAL_5 = string.Empty;
                        _opHdr.IO_CRE_BY = item.IO_CRE_BY;
                        _opHdr.IO_CRE_DT = DateTime.Now.Date;
                        _opHdr.IO_MOD_BY = item.IO_MOD_BY;
                        _opHdr.IO_MOD_DT = DateTime.MinValue.Date;
                        _opHdr.IO_SESSION_ID = item.IO_SESSION_ID;
                        if (_opList != null)
                        {
                            if (_opList.Count > 0)
                            {
                                _tmpDocNo = _opList.Count + 1;
                            }
                        }
                        _opHdr.Tmp_doc_no = _tmpDocNo;
                        #endregion
                        #region itm
                        _opHdr.OrdPlnItmList = new List<OrderPlanItem>();
                        foreach (var _mth in item.MonthDataList)
                        {
                            _opItm = new OrderPlanItem();
                            _opItm.IOI_SEQ_NO = 0;
                            _opItm.IOI_OP_NO = "";
                            _opItm.IOI_LINE = 1;
                            _opItm.IOI_REF_LINE = _opItm.IOI_LINE;
                            _opItm.IOI_F_LINE = _opItm.IOI_LINE;
                            _opItm.IOI_STUS = 1;
                            _opItm.IOI_YY = _mth.Year;
                            _opItm.IOI_MM = _mth.Mth;
                            _opItm.IOI_ITM_CD = item.Is_itm_base ? item.Itm_cd : item.Model;
                            _opItm.IOI_ITM_STUS = _opHdr.IO_COM == "LRP" ? "GDLP" : "GOD";
                            _opItm.IOI_MODEL = item.Model;
                            _opItm.IOI_BRAND = item.Brand;
                            _opItm.IOI_DESC = item.Is_itm_base ? item.Itm_desc : item.Model_desc;
                            _opItm.IOI_ITM_TP = item.Itm_tp;
                            _opItm.IOI_COLOR = string.IsNullOrEmpty(item.Itm_clr) ? "N/A" : item.Itm_clr;
                            _opItm.IOI_MFC = string.Empty;
                            _opItm.IOI_QTY = _mth.Mth_qty;
                            _opItm.IOI_BAL_QTY = _mth.Mth_qty;
                            _opItm.IOI_UOM = item.Uom;
                            _opItm.IOI_UNIT_RT = item.Unit_price;
                            _opItm.IOI_PI_QTY = _mth.Mth_qty; ;
                            _opItm.IOI_KIT_LINE = 0;
                            _opItm.IOI_KIT_ITM_CD = "";
                            _opItm.IOI_CRE_BY = item.IO_CRE_BY;
                            _opItm.IOI_CRE_DT = DateTime.Now.Date;
                            _opItm.IOI_MOD_BY = item.IO_MOD_BY;
                            _opItm.IOI_MOD_DT = DateTime.Now.Date; ;
                            _opItm.IOI_SESSION_ID = item.IO_SESSION_ID;
                            _opItm.IOI_TAG = item.Price_tp;
                            _opItm.IOI_Trade_AgreeMent = item.TradeAgreement;
                            _opItm.IOI_ProjectName = item.Proj_name;
                            _opItm.Ioi_line_amt = _opItm.IOI_QTY * _opItm.IOI_UNIT_RT;
                            _opItm.IOI_CONT_TYPE = item.ContainerType;
                            _opItm.IOI_CONT_QTY = item.ContainerQty;
                            if (_opHdr.OrdPlnItmList != null)
                            {
                                if (_opHdr.OrdPlnItmList.Count > 0)
                                {
                                    _opItm.IOI_LINE = _opHdr.OrdPlnItmList.Max(c => c.IOI_LINE) + 1;
                                }
                            }
                            _opItm.IOI_REF_LINE = _opItm.IOI_LINE;
                            _opItm.IOI_F_LINE = _opItm.IOI_LINE;
                            _opHdr.OrdPlnItmList.Add(_opItm);
                        }
                        _opList.Add(_opHdr);
                        #endregion
                    }
                    else
                    {
                        #region itm
                        foreach (var _mth in item.MonthDataList)
                        {
                            _opItm = new OrderPlanItem();
                            _opItm.IOI_SEQ_NO = 0;
                            _opItm.IOI_OP_NO = "";
                            _opItm.IOI_LINE = 1;
                            _opItm.IOI_REF_LINE = _opItm.IOI_LINE;
                            _opItm.IOI_F_LINE = _opItm.IOI_LINE;
                            _opItm.IOI_STUS = 1;
                            _opItm.IOI_YY = _mth.Year;
                            _opItm.IOI_MM = _mth.Mth;
                            _opItm.IOI_ITM_CD = item.Is_itm_base ? item.Itm_cd : item.Model;
                            _opItm.IOI_ITM_STUS = vOpHdr.IO_COM == "LRP" ? "GDLP" : "GOD";
                            _opItm.IOI_MODEL = item.Model;
                            _opItm.IOI_BRAND = item.Brand;
                            _opItm.IOI_DESC = item.Is_itm_base ? item.Itm_desc : item.Model_desc;
                            _opItm.IOI_ITM_TP = item.Itm_tp;
                            _opItm.IOI_COLOR = string.IsNullOrEmpty(item.Itm_clr) ? "N/A" : item.Itm_clr;
                            _opItm.IOI_MFC = string.Empty;
                            _opItm.IOI_QTY = _mth.Mth_qty;
                            _opItm.IOI_BAL_QTY = _mth.Mth_qty;
                            _opItm.IOI_UOM = item.Uom;
                            _opItm.IOI_UNIT_RT = item.Unit_price;
                            _opItm.IOI_PI_QTY = _mth.Mth_qty; ;
                            _opItm.IOI_KIT_LINE = 0;
                            _opItm.IOI_KIT_ITM_CD = "";
                            _opItm.IOI_CRE_BY = item.IO_CRE_BY;
                            _opItm.IOI_CRE_DT = DateTime.Now.Date;
                            _opItm.IOI_MOD_BY = string.Empty;
                            _opItm.IOI_MOD_DT = DateTime.Now.Date; ;
                            _opItm.IOI_SESSION_ID = item.IO_SESSION_ID;
                            _opItm.IOI_TAG = item.Price_tp;
                            _opItm.IOI_ProjectName = item.Proj_name;
                            _opItm.IOI_Trade_AgreeMent = item.TradeAgreement;
                            _opItm.IOI_CONT_TYPE = item.ContainerType;
                            _opItm.IOI_CONT_QTY = item.ContainerQty;
                            _opItm.Ioi_line_amt = _opItm.IOI_QTY * _opItm.IOI_UNIT_RT;

                            if (vOpHdr.OrdPlnItmList != null)
                            {
                                if (vOpHdr.OrdPlnItmList.Count > 0)
                                {
                                    _opItm.IOI_LINE = vOpHdr.OrdPlnItmList.Max(c => c.IOI_LINE) + 1;
                                }
                            }
                            _opItm.IOI_REF_LINE = _opItm.IOI_LINE;
                            _opItm.IOI_F_LINE = _opItm.IOI_LINE;
                            vOpHdr.OrdPlnItmList.Add(_opItm);
                        }
                        #endregion
                    }
                    #endregion
                    #region allocation data setup
                    if (item.ChnlDataList != null)
                    {
                        foreach (var _chnlData in item.ChnlDataList)
                        {
                            var _allIsAva = _alloList.Where(c => c.Isa_chnl == _chnlData.All_ch_cd
                                && c.Isa_chnl == _chnlData.All_ch_cd
                                && c.Tmp_doc_no == _tmpDocNo).FirstOrDefault();
                            if (_allIsAva == null)
                            {
                                _allo = new MasterItemAllocate();
                                _allo.Tmp_doc_no = _tmpDocNo;
                                _allo.Isa_act = true;
                                _allo.Isa_aloc_bqty = _chnlData.All_ch_qty;
                                _allo.Isa_aloc_qty = _chnlData.All_ch_qty;
                                _allo.Isa_chnl = _chnlData.All_ch_cd;
                                _allo.Isa_com = item.IO_COM;
                                _allo.Isa_cre_by = item.IO_CRE_BY;
                                _allo.Isa_cre_dt = DateTime.Now;
                                _allo.Isa_doc_dt = DateTime.Today;
                                _allo.Isa_doc_no = "";
                                _allo.Isa_doc_tp = "OP";
                                _allo.Isa_dt = System.DateTime.Now;
                                _allo.Isa_itm_cd = string.IsNullOrEmpty(item.Itm_cd) ? item.Model : item.Itm_cd;
                                _allo.Isa_itm_changed = true;
                                _allo.Isa_itm_stus = "GOD";
                                _allo.Isa_loc = item.Def_loc;
                                _allo.Isa_ref_no = "";
                                _allo.Isa_req_bqty = 0;
                                _allo.Isa_req_qty = 0;
                                _allo.Isa_tp = "p";
                                _allo.Isa_session_id = item.IO_SESSION_ID;
                                _alloList.Add(_allo);
                            }
                            else
                            {
                                _allIsAva.Isa_aloc_bqty = _allIsAva.Isa_aloc_bqty + _chnlData.All_ch_qty;
                                _allIsAva.Isa_aloc_qty = _allIsAva.Isa_aloc_qty + _chnlData.All_ch_qty;
                            }
                        }
                    }
                    #endregion
                    #region buffer lvl data setup
                    foreach (var _bufItm in item.BuffLvlDataList)
                    {
                        _bufLvl = new MasterBufferChannel();
                        _bufLvl.MBC_ACT = 1;
                        _bufLvl.MBC_CHNL = _bufItm.Mbc_chnl;
                        _bufLvl.MBC_COM = item.IO_COM;
                        _bufLvl.MBC_CRE_BY = item.IO_CRE_BY;
                        _bufLvl.MBC_CRE_SESSION = item.IO_SESSION_ID;
                        _bufLvl.MBC_GRADE = _bufItm.Mbc_grade;
                        _bufLvl.MBC_ITM_CD = item.Is_itm_base ? item.Itm_cd : item.Model;
                        _bufLvl.MBC_ITM_STUS = _bufLvl.MBC_COM == "LRP" ? "GDLP" : "GOD";
                        _bufLvl.MBC_SEASON = _bufItm.Mbc_season;
                        _bufLvl.MBC_MOD_BY = item.IO_MOD_BY;
                        _bufLvl.MBC_DEC_QTY = _bufItm.Buff_qty;
                        _bufLvl.MBC_MOD_SESSION = item.IO_SESSION_ID;
                        _bufList.Add(_bufLvl);
                    }
                    #endregion
                }
                #endregion
                #region save area

                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                if (_newModList != null)
                {
                    foreach (var item in _newModList)
                    {
                        _model = new MasterItemModel();
                        _model.Mm_cd = item.Model;
                        _model.Mm_desc = item.Model_desc;
                        _model.Mm_act = true;
                        _model.Mm_cre_by = item.IO_CRE_BY;
                        _model.Mm_mod_by = item.IO_CRE_BY;
                        _model.Mm_cat1 = item.Main_cat;
                        _model.Mm_cat2 = string.IsNullOrEmpty(item.Cat_1) ? "N/A" : item.Cat_1;
                        _model.Mm_cat3 = string.IsNullOrEmpty(item.Cat_2) ? "N/A" : item.Cat_2;
                        _model.Mm_cat4 = string.IsNullOrEmpty(item.Cat_3) ? "N/A" : item.Cat_3;
                        _model.Mm_cat5 = "";
                        _model.Mm_is_dis = false;
                        _model.Mm_dis_dt = DateTime.MinValue.Date;
                        _model.Mm_taxstruc_cd = "";
                        _model.Mm_uom = item.Uom;
                        _model.Mm_intro_dt = DateTime.Today;
                        _model.Mm_lifes = 0;
                        _model.Mm_brand = item.Brand;
                        _model.Mm_cntry_of_orgn = "";
                        var vMod = _modelList.Where(c => c.Mm_cd == item.Model).FirstOrDefault();
                        if (vMod == null)
                        {
                            _modelList.Add(_model);
                        }
                    }
                    foreach (var item in _modelList)
                    {
                        _effect = _financialDAL.SaveItemModelInOrderPlan(item);
                        if (_effect < 1)
                        {
                            _res = -1;
                            _err = "ERROR : Model data not saved !";
                            _financialDAL.TransactionRollback();
                            _financialDAL.ConnectionClose();
                            return _res;
                        }
                    }
                }

                foreach (var _hdr in _opList)
                {
                    Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    string _autoDoc = _masterAutoNumber.Aut_cate_cd + "-" + _masterAutoNumber.Aut_start_char + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                    _docNo = string.IsNullOrEmpty(_docNo) ? _autoDoc : _docNo + "," + _autoDoc;
                    _effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                    if (_effect > 0)
                    {
                        _hdr.IO_OP_NO = _autoDoc;
                        _hdr.IO_TOT_QTY = _hdr.OrdPlnItmList.Sum(c => c.IOI_QTY);
                        _hdr.IO_TOT_AMT = _hdr.OrdPlnItmList.Sum(c => c.Ioi_line_amt);
                        //_hdr.IO_REF_NO = _autoDoc;
                        _effect2 = _financialDAL.PlaceOrderWeb(_hdr);
                        _opHdrdocs.Add(_hdr);
                        int _seq = Convert.ToInt32(_effect2.Item2);
                        if (_effect2.Item1 == 1)
                        {
                            foreach (var _itm in _hdr.OrdPlnItmList)
                            {
                                _itm.IOI_SEQ_NO = _seq;
                                _itm.IOI_OP_NO = _autoDoc;
                                _itm.IOI_MOD_BY = _hdr.IO_MOD_BY;
                                _effect = _financialDAL.SaveOPItemsWeb(_itm);
                            }
                        }
                        if (_alloList != null)
                        {
                            if (_alloList.Count > 0)
                            {
                                var _vAllDta = _alloList.Where(c => c.Tmp_doc_no == _hdr.Tmp_doc_no).ToList();
                                if (_vAllDta != null)
                                {
                                    foreach (var _v in _vAllDta)
                                    {
                                        _v.Isa_doc_no = _hdr.IO_OP_NO;
                                    }

                                }
                            }
                        }
                    }
                }
                #endregion
                #region allocatin data save
                foreach (var _all in _alloList)
                {
                    _financialDAL.SaveStockAllocate(_all);
                }
                #endregion
                #region buff lvl update
                foreach (var _buff in _bufList)
                {
                    _financialDAL.SaveBufferLevelOrderPlan(_buff);
                }
                #endregion
                //Added By Dulaj 2018/May/16
                #region containerDetails
                int containerCount = 0;
                foreach (OrderPlanHeader orderPlanHeader in _opList)
                {
                    foreach (OrderPlanItem opi in orderPlanHeader.OrdPlnItmList)
                    {
                        OrderPlanExcelUploader orderPlanExelUploader = _opExcelData.ElementAt(containerCount);
                        int lineNo = 1;
                        if (!(orderPlanExelUploader.Af.Equals(string.Empty)))
                        {
                            ImportsBLContainer blContainer = new ImportsBLContainer();
                            blContainer.Ibc_act = 1;
                            blContainer.Ibc_cre_by = orderPlanHeader.IO_CRE_BY;
                            blContainer.Ibc_desc = "AIR FREIGHT";
                            blContainer.Ibc_doc_no = orderPlanHeader.IO_OP_NO;
                            blContainer.Ibc_line = lineNo;
                            blContainer.Ibc_seq_no = opi.IOI_SEQ_NO;
                            blContainer.Ibc_tp = "AIR";
                            blContainer.Ibc_cre_dt = DateTime.Now;
                            blContainer.Ibc_unit = Convert.ToInt32(orderPlanExelUploader.Af);
                            _financialDAL.SaveOPContanier(blContainer);
                            lineNo++;
                        }
                        if (!(orderPlanExelUploader.Ft20.Equals(string.Empty)))
                        {
                            ImportsBLContainer blContainer = new ImportsBLContainer();
                            blContainer.Ibc_act = 1;
                            blContainer.Ibc_cre_by = orderPlanHeader.IO_CRE_BY;
                            blContainer.Ibc_desc = "PART OF 20 FOOTER";
                            blContainer.Ibc_doc_no = orderPlanHeader.IO_OP_NO;
                            blContainer.Ibc_line = lineNo;
                            blContainer.Ibc_seq_no = opi.IOI_SEQ_NO;
                            blContainer.Ibc_tp = "20FT";
                            blContainer.Ibc_cre_dt = DateTime.Now;
                            blContainer.Ibc_unit = Convert.ToInt32(orderPlanExelUploader.Ft20);
                            _financialDAL.SaveOPContanier(blContainer);
                            lineNo++;
                        }
                        if (!(orderPlanExelUploader.Ft40.Equals(string.Empty)))
                        {
                            ImportsBLContainer blContainer = new ImportsBLContainer();
                            blContainer.Ibc_act = 1;
                            blContainer.Ibc_cre_by = orderPlanHeader.IO_CRE_BY;
                            blContainer.Ibc_desc = "PART OF 40 FOOTER";
                            blContainer.Ibc_doc_no = orderPlanHeader.IO_OP_NO;
                            blContainer.Ibc_line = lineNo;
                            blContainer.Ibc_seq_no = opi.IOI_SEQ_NO;
                            blContainer.Ibc_tp = "40FT";
                            blContainer.Ibc_cre_dt = DateTime.Now;
                            blContainer.Ibc_unit = Convert.ToInt32(orderPlanExelUploader.Ft40);
                            _financialDAL.SaveOPContanier(blContainer);
                            lineNo++;
                        }
                        if (!(orderPlanExelUploader.Hq40.Equals(string.Empty)))
                        {
                            ImportsBLContainer blContainer = new ImportsBLContainer();
                            blContainer.Ibc_act = 1;
                            blContainer.Ibc_cre_by = orderPlanHeader.IO_CRE_BY;
                            blContainer.Ibc_desc = "PART OF 40 HIGH CUBE";
                            blContainer.Ibc_doc_no = orderPlanHeader.IO_OP_NO;
                            blContainer.Ibc_line = lineNo;
                            blContainer.Ibc_seq_no = opi.IOI_SEQ_NO;
                            blContainer.Ibc_tp = "40HC";
                            blContainer.Ibc_cre_dt = DateTime.Now;
                            blContainer.Ibc_unit = Convert.ToInt32(orderPlanExelUploader.Hq40);
                            _financialDAL.SaveOPContanier(blContainer);
                            lineNo++;
                        }
                        if (!(orderPlanExelUploader.LcL.Equals(string.Empty)))
                        {
                            ImportsBLContainer blContainer = new ImportsBLContainer();
                            blContainer.Ibc_act = 1;
                            blContainer.Ibc_cre_by = orderPlanHeader.IO_CRE_BY;
                            blContainer.Ibc_desc = "LCL";
                            blContainer.Ibc_doc_no = orderPlanHeader.IO_OP_NO;
                            blContainer.Ibc_line = lineNo;
                            blContainer.Ibc_seq_no = opi.IOI_SEQ_NO;
                            blContainer.Ibc_tp = "LCL";
                            blContainer.Ibc_cre_dt = DateTime.Now;
                            blContainer.Ibc_unit = Convert.ToInt32(orderPlanExelUploader.LcL);
                            _financialDAL.SaveOPContanier(blContainer);
                        }

                        containerCount++;
                    }
                }
                #endregion
                if (_effect == 1)
                {

                    _financialDAL.TransactionCommit();
                    _res = 1;
                }
                else
                {
                    _err = "";
                    _financialDAL.TransactionRollback();
                }
                return _res;
            }
            catch (Exception ex)
            {
                _res = -1;
                _err = "ERROR : " + ex.Message.ToString();
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                return _res;
            }
        }
        //subodana
        public string GetFinPaytype(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetFinPaytype(sino);
        }
        //subodana
        public string GetFinPaySubtype(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetFinPaySubtype(sino);
        }
        //subodana
        public bool IsfocSI(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsfocSI(sino);
        }
        //subodana
        public bool IsShipGrnty(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsShipGrnty(sino);
        }
        //subodana
        public Int32 GetExpiryMonths(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetExpiryMonths(sino);
        }
        //subodana
        public decimal GetLCVal(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetLCVal(sino);
        }
        //subodana
        public decimal GetLCValFin(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetLCValFin(sino);
        }
        public List<imp_cst_shp_bnk> GetAllBankData(string _com, string _bank, Int32 _foc, Int32 _garrent, string _type, string term, string subterm)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAllBankData(_com, _bank, _foc, _garrent, _type, term, subterm);
        }
        //subodana
        public string GetShipSeqNo(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetShipSeqNo(sino);
        }
        //subodana
        public bool IsTOTFOC(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsTOTFOC(sino);
        }
        //subodana
        public string GetGRNno(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetGRNno(sino);
        }
        //subodana
        public string GetGRNnoSBU(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetGRNnoSBU(sino);
        }
        //subodana
        public DateTime GetGRNDate(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetGRNDate(sino);
        }

        public DataTable GetMigrateSerialDetails(string _com, string _loc, DateTime _date)
        {   // Sanjeewa
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetMigrateSerialDetails(_com, _loc, _date);
        }

        //subodana 2018-01-04
        public int SaveSunEntries(List<SunAccountall> list, string com, DateTime todate, MasterAutoNumber _masterAutoNumber, MasterAutoNumber _masterAutoNumber2, out string _errer, out long _journo)
        {
            int effect = 0;
            _errer = "";
            _journo = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {
                Int64 journo = 0;
                //get max jornal
                Int64 _naxjornal = _financialDAL.GetJournalMaxSeq(com, "A");
                //update max jornal
                Int64 effect1 = _financialDAL.UpdateMaxJournalNo(com, "A", _naxjornal + 1);
                //journo = _naxjornal; //Commented by Wimal @ 26/06/208 as per the instruction given by Dilanda
                journo = (_naxjornal + 1);//Added by Wimal @ 26/06/208 as per the instruction given by Dilanda
                _journo = journo; ;//Added by Wimal @ 05/07/208 to give jurnal number to user
                int i = 1;
                foreach (var _list in list)
                {
                    _list.jrnal_line = i;
                    _list.jrnal_no = journo;
                    if (_list.d_c == "D")
                    {
                        _list.amount = _list.amount * -1;
                    }
                    if (_list.amount != 0)
                    {
                        DataTable _dt = _financialDAL.CheckSUNLC2(com, "T2", _list.anal_t2);
                        if (_dt != null && _dt.Rows.Count > 0)
                        {

                        }
                        else
                        {
                            savejobnosun(com, "T2", _list.anal_t2, DateTime.Now.Date, _list.anal_t2, _financialDAL);
                        }
                        //Wimal
                        /////////////////////////////New Code
                        _dt = _financialDAL.CheckSUNLC2(com, "T0", _list.anal_t0);
                        if (_dt.Rows.Count > 0) { }
                        else { savejobnosun(com, "T0", _list.anal_t0, DateTime.Now.Date, _list.anal_t0, _financialDAL); }

                        _dt = _financialDAL.CheckSUNLC2(com, "T1", _list.anal_t1);
                        if (_dt.Rows.Count > 0) { }
                        else { savejobnosun(com, "T1", _list.anal_t1, DateTime.Now.Date, _list.anal_t1, _financialDAL); }

                        _dt = _financialDAL.CheckSUNLC2(com, "T3", _list.anal_t3);
                        if (_dt.Rows.Count > 0) { }
                        else { savejobnosun(com, "T3", _list.anal_t3, DateTime.Now.Date, _list.anal_t3, _financialDAL); }

                        _dt = _financialDAL.CheckSUNLC2(com, "T4", _list.anal_t4);
                        if (_dt.Rows.Count > 0) { }
                        else { savejobnosun(com, "T4", _list.anal_t4, DateTime.Now.Date, _list.anal_t4, _financialDAL); }

                        _dt = _financialDAL.CheckSUNLC2(com, "T5", _list.anal_t5);
                        if (_dt.Rows.Count > 0) { }
                        else { savejobnosun(com, "T5", _list.anal_t5, DateTime.Now.Date, _list.anal_t5, _financialDAL); }

                        _dt = _financialDAL.CheckSUNLC2(com, "T6", _list.anal_t6);
                        if (_dt.Rows.Count > 0) { }
                        else { savejobnosun(com, "T6", _list.anal_t6, DateTime.Now.Date, _list.anal_t6, _financialDAL); }

                        _dt = _financialDAL.CheckSUNLC2(com, "T7", _list.anal_t7);
                        if (_dt.Rows.Count > 0) { }
                        else { savejobnosun(com, "T7", _list.anal_t7, DateTime.Now.Date, _list.anal_t7, _financialDAL); }

                        _dt = _financialDAL.CheckSUNLC2(com, "T8", _list.anal_t8);
                        if (_dt.Rows.Count > 0) { }
                        else { savejobnosun(com, "T8", _list.anal_t8, DateTime.Now.Date, _list.anal_t8, _financialDAL); }

                        _dt = _financialDAL.CheckSUNLC2(com, "T9", _list.anal_t5);
                        if (_dt.Rows.Count > 0) { }
                        else { savejobnosun(com, "T9", _list.anal_t9, DateTime.Now.Date, _list.anal_t9, _financialDAL); }


                        //ob.anal_t0 = pcnew;
                        //ob.anal_t1 = annlcd1;
                        //ob.anal_t2 = annlcd2;
                        //ob.anal_t3 = seqnew;
                        //ob.anal_t4 = annlcd5;
                        //ob.anal_t5 = annlcd6;
                        //ob.anal_t6 = ann7new;
                        //ob.anal_t7 = annlcd8;
                        //ob.anal_t8 = annlcd9;
                        //ob.anal_t9 = space15;
                        /////////////////////////////////New Code

                        effect = _financialDAL.SaveSunAccountsAll(_list);
                        effect = _financialDAL.UPDATE_ADJSUN(_list.doc, 1, _list.Com);
                    }

                    effect = _financialDAL.UPDATE_LOCPCH_HDRENGLOG(_list.ActGRNNo, 5, com);

                    i++;

                }
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                effect = -1;
            }
            return effect;
        }
        private void savejobnosun(string com, string cat, string code, DateTime date, string name, FinancialDAL _financialDAL)
        {
            SunLC ob = new SunLC();
            ob.category = cat;
            string space15 = "               ";
            string space30 = "                            ";
            if (code.Length > 15)
            {
                int sunrefmaxle = code.Length;

                //newrefNo = refNo.Substring(0, 5) + refNo.Substring(refNo.Length - 5);
                code = code.Substring(sunrefmaxle - 15);
            }
            else
            {
                int defref = 15 - code.Length;
                code = code + space15.Substring(0, defref);
            }
            ob.code = code;
            if (name.Length > 30)
            {
                int sunrefmaxle = name.Length;

                //newrefNo = refNo.Substring(0, 5) + refNo.Substring(refNo.Length - 5);
                name = name.Substring(sunrefmaxle - 30);
            }
            else
            {
                int defref = 30 - name.Length;
                name = name + space30.Substring(0, defref);
            }
            ob.name = name;

            ob.sun_db = com;

            ob.updated = Convert.ToInt32(date.ToString("yyyyMMdd")).ToString();
            ob.lookup = code.Substring(0, 5) + "     ";
            ob.prohb_post = " ";
            ob.budget_check = " ";
            ob.data_1 = "     ";
            ob.budget_stop = " ";

            int effect = _financialDAL.SaveSunT4web(ob);

        }
        //subodana
        public DataTable GetCanibalizeHdrData(string docno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCanibalizeHdrData(docno);
        }

        //subodana 2018-01-15
        public int SaveCredCardAchknow(SAT_ADJ_CRCD Crecdlist, MasterAutoNumber _masterAutoNumber, out String Error)
        {
            int effect = 0;
            string _documentNo = "";
            try
            {

                Error = string.Empty;
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                if (Crecdlist.staj_ref == null || Crecdlist.staj_ref == "")
                {
                    Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    _documentNo = Crecdlist.staj_pc + "-" + _masterAutoNumber.Aut_start_char + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                    effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                    Crecdlist.staj_ref = _documentNo;
                    Error = _documentNo;
                }
                else
                {
                    Error = Crecdlist.staj_ref;
                }

                effect = _financialDAL.InsertTo_sat_Adjcrecd(Crecdlist);
                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                effect = -1;
                Error = ex.Message;
                _financialDAL.TransactionRollback();
            }

            return effect;
        }
        //Dilshan 2018-03-27
        public int SaveCredCardAchknow_new(List<SAT_ADJ_CRCD> Crecdlist, MasterAutoNumber _masterAutoNumber, out String Error)
        {
            int effect = 0;
            string _documentNo = "";
            try
            {

                Error = string.Empty;
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                if (Crecdlist.FirstOrDefault().staj_ref == null || Crecdlist.FirstOrDefault().staj_ref == "")
                {
                    Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                    _documentNo = Crecdlist.FirstOrDefault().staj_pc + "-" + _masterAutoNumber.Aut_start_char + _autoNo.ToString("0000", CultureInfo.InvariantCulture);
                    Crecdlist.FirstOrDefault().staj_ref = _documentNo;
                    effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                    //Crecdlist.staj_ref = _documentNo;

                    Error = _documentNo;
                }
                else
                {
                    Error = Crecdlist.FirstOrDefault().staj_ref;
                }
                foreach (SAT_ADJ_CRCD _CreNoteHdr in Crecdlist)
                {
                    //_effect = _financialDAL.saveCreditNoteHdr(_CreNoteHdr);
                    _CreNoteHdr.staj_ref = _documentNo;
                    effect = _financialDAL.InsertTo_sat_Adjcrecd(_CreNoteHdr);
                }

                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                effect = -1;
                Error = ex.Message;
                _financialDAL.TransactionRollback();
            }

            return effect;
        }
        //subodana
        public List<SAT_ADJ_CRCD> GetAdjDetByCirc(string _com, string _ref, string _type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAdjDetByCirc(_com, _ref, _type);
        }
        //subodana
        public bool IsSunAcc(string acc, string com)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsSunAcc(acc, com);
        }
        //subodana
        public bool IsTodayStatemant(string com, string pc, DateTime date, string bank)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsTodayStatemant(com, pc, date, bank);
        }
        public List<SAT_ADJ_CRCD> GetCreditCardSunData(string _com, string _pc, string _type, DateTime _fdate, DateTime _tdate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCreditCardSunData(_com, _pc, _type, _fdate, _tdate);
        }
        //subodana
        public decimal GetFinINSVal(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetFinINSVal(sino);
        }
        //subodana
        public decimal GetFinWOFOCVal(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetFinWOFOCVal(sino);
        }
        public decimal GetBLCostVal(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBLCostVal(sino);
        }
        public decimal GetBLInsuVal(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBLInsuVal(sino);
        }
        //subodana
        public decimal GetBLOTHAmtVal(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBLOTHAmtVal(sino);
        }
        //subodana
        public decimal GetTaxValForCode(string invno, string taxcode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetTaxValForCode(invno, taxcode);
        }

        //subodana
        public DateTime GetPCComGraceDate(string comcode, string pccode, DateTime month)
        {
            _financialDAL = new FinancialDAL();
            DateTime gracedate = DateTime.Now.Date;

            gracedate = _financialDAL.GetPCComGraceDate("PC", pccode, month);
            if (gracedate == DateTime.Now.Date)
            {
                gracedate = _financialDAL.GetPCComGraceDate("COM", comcode, month);
            }

            return gracedate;
        }
        //subodana
        public string GetSchemePeriod(string acc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSchemePeriod(acc);
        }
        //subodana
        public string GetFinRefNo(string sino)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetFinRefNo(sino);
        }
        //subodana
        public DataTable LoadBonusAdjResons()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LoadBonusAdjResons();
        }
        public DataTable CheckSUNLC2(string COM, string CAT, string CODE)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.CheckSUNLC2(COM, CAT, CODE);
        }

        //Add lakshan 13Nov2017
        public List<ImpCusdecItm> GET_CUSDEC_GRNITEM_DOC_WEB(String docno, string _type = null)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GET_CUSDEC_GRNITEM_DOC_WEB(docno, _type);
        }
        //Dulaj 2018-Feb-19
        public Int32 CheckReturnCheque(string srcq_chq, string chq_rtn_bank)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.CheckReturnCheque(srcq_chq, chq_rtn_bank);
        }
        //Dulaj 2018-Feb-20
        public string GetRefNumber(string srcq_chq, string chq_rtn_bank)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            return _financialDAL.GetRefNumber(srcq_chq, chq_rtn_bank);
        }
        //Dulaj 2018-Feb-22
        public DataTable GetReturnChequeCountWithoutPc(string _ref, string _bCode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetReturnChequeCountWithoutPc(_ref, _bCode);
        }

        //Tharindu 2018-02-07
        public DataTable Age_Anal_Debt_Outstand_Adv(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _cust, Int32 _tp)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();   //kapila 30/11/2015
            if (_securityDAL.Is_Report_DR("AgeAnalDebtOutstand") == true) _financialDAL.ConnectionOpen_DR();
            DataTable X = _financialDAL.Age_Anal_Debt_Outstand_Adv(_from, _to, _com, _pc, _user, _cust, _tp);
            _financialDAL.ConnectionClose();
            return X;
        }

        //Tharindu 2018-02-07
        public DataTable Age_Anal_Debt_Outstand_Credit(DateTime _from, DateTime _to, string _com, string _pc, string _user, string _cust, Int32 _tp)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _securityDAL = new SecurityDAL();   //kapila 30/11/2015
            if (_securityDAL.Is_Report_DR("AgeAnalDebtOutstand") == true) _financialDAL.ConnectionOpen_DR();
            DataTable X = _financialDAL.Age_Anal_Debt_Outstand_Credit(_from, _to, _com, _pc, _user, _cust, _tp);
            _financialDAL.ConnectionClose();
            return X;
        }
        //subodana
        public Int64 GetEffectiveCollSeq(string com, string pc, string account, DateTime bonusdate, DateTime effectivedate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetEffectiveCollSeq(com, pc, account, bonusdate, effectivedate);
        }
        //subodana
        public Int64 GetAllCollSeq(string com, string pc, string account, DateTime bonusdate, DateTime effectivedate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAllCollSeq(com, pc, account, bonusdate, effectivedate);
        }
        //subodana 2018-03-09
        public int SaveAccountAdjEffectDetails(hpt_arr_acc_det _old, hpt_arr_acc_det _new, out string _errer)
        {
            int effect = 0;
            _errer = "";
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {
                List<hpt_arr_acc> _hdr = _financialDAL.GetArrBalAccHdr(_new.Haad_com, _new.Haad_pc, _new.Haad_date);
                List<hpt_arr_acc> _hdreffectold = new List<hpt_arr_acc>();
                if (_new.Haad_date != _new.HAAD_EFFECT_DT)
                {
                    _hdreffectold = _hdr.Where(a => a.HAA_EFFECT_DT == _new.HAAD_EFFECT_DT).ToList();
                }

                if (_hdr != null)
                {
                    if (_hdr.Count > 0)
                    {

                        if (_new.Haad_tot_arr_amt > 0)
                        {
                            if (_new.HAAD_GRCE_SETT_ADJ > _new.HAAD_GRCE_PER_COLL)
                            {
                                if (_old.Haad_tot_arr_amt < _new.Haad_tot_arr_amt)
                                {
                                    decimal grdif = _new.HAAD_GRCE_SETT_ADJ - _new.HAAD_GRCE_PER_COLL;
                                    decimal arrdef = _new.Haad_tot_arr_amt - _old.Haad_tot_arr_amt;
                                    if (arrdef <= grdif)
                                    {
                                        //   _new.Haad_tot_arr_amt = _old.Haad_tot_arr_amt;
                                        _new.HAAD_GRCE_PER_COLL = _new.HAAD_GRCE_PER_COLL + arrdef;
                                    }
                                    else
                                    {
                                        _new.HAAD_GRCE_PER_COLL = _new.HAAD_GRCE_SETT_ADJ;
                                        //   _new.Haad_tot_arr_amt = _new.Haad_tot_arr_amt - grdif;

                                    }
                                }
                            }
                        }


                        _hdr[0].HAA_ADJ_TOT = _hdr[0].HAA_ADJ_TOT - _old.HAAD_ADJ_AMT + _new.HAAD_ADJ_AMT;
                        _hdr[0].Haa_com = _new.Haad_com;
                        _hdr[0].Haa_tot_arr_amt = _hdr[0].Haa_tot_arr_amt;// -_old.Haad_tot_arr_amt + _new.Haad_tot_arr_amt;
                        _hdr[0].HAA_GRCE_SETT = _hdr[0].HAA_GRCE_SETT - _old.HAAD_GRCE_SETT + _new.HAAD_GRCE_SETT;
                        _hdr[0].HAA_TOT_GRCE_SETT = _hdr[0].HAA_GRCE_SETT;
                        _hdr[0].HAA_SER_PROB = _hdr[0].HAA_SER_PROB - _old.HAAD_SER_PROB + _new.HAAD_SER_PROB;
                        _hdr[0].HAA_OTH = _hdr[0].HAA_OTH - _old.HAAD_OTH + _new.HAAD_OTH;
                        _hdr[0].HAA_LOD_ADJ = _hdr[0].HAA_LOD_ADJ - _old.HAAD_LOD_ADJ + _new.HAAD_LOD_ADJ;
                        _hdr[0].HAA_DISP_ADJ = _hdr[0].HAA_DISP_ADJ - _old.HAAD_DISP_ADJ + _new.HAAD_DISP_ADJ;
                        _hdr[0].HAA_DIRIYA_ADJ = _hdr[0].HAA_DIRIYA_ADJ - _old.HAAD_DIRIYA_ADJ + _new.HAAD_DIRIYA_ADJ;
                        _hdr[0].Haa_pc = _new.Haad_pc;
                        _hdr[0].Haa_date = _new.Haad_date;
                        _hdr[0].HAA_SHOP_COM_ADJ = _hdr[0].HAA_SHOP_COM_ADJ - _old.HAAD_SHOP_COM_ADJ + _new.HAAD_SHOP_COM_ADJ;
                        _hdr[0].HAA_EFFECT_DT = _new.HAAD_EFFECT_DT;

                        if (_hdreffectold != null && _hdreffectold.Count > 0)
                        {
                            //update
                            effect = _financialDAL.UpdateARR_ACC(_hdr[0]);

                        }
                        else
                        {
                            // insert
                            effect = _financialDAL.Savehpt_arr_acc(_hdr[0]);

                        }

                    }
                }
                _new.Haad_seq = _new.Haad_seq;
                _new.Haad_pc = _new.Haad_pc;

                if (_financialDAL.IsEffectiveColl(_new.Haad_com, _new.Haad_pc, _new.Haad_acc_cd, _new.Haad_date, _new.HAAD_EFFECT_DT))
                {
                    effect = _financialDAL.UpdateARR_ACC_DET(_new);
                }
                else
                {
                    //insert
                    effect = _financialDAL.Savehpt_arr_acc_det(_new);
                }

                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                effect = -1;
            }


            return effect;
        }
        //subodana
        public Int64 GetEffectiveCollHDRSeq(string com, string pc, DateTime bonusdate, DateTime effectivedate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetEffectiveCollHDRSeq(com, pc, bonusdate, effectivedate);
        }
        public int SaveARR_ACCNew(List<hpt_arr_acc> _lst, out string _errer)
        {
            int effect = 0;
            _errer = "";
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {

                effect = _financialDAL.Savehpt_arr_acc(_lst[0]);

                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _errer = ex.Message;
                _financialDAL.TransactionRollback();
                effect = -1;
            }
            return effect;
        }
        //subodana
        public decimal GetCostExchangeRAte(string SINO)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCostExchangeRAte(SINO);
        }
        //add by tharanga 2018/03/15
        public Decimal get_advance_count_itm_wise(string _itm, string _com, string _pc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_advance_count_itm_wise(_itm, _com, _pc);
        }

        //Akila 2018/02/26
        public DataTable ProcessSunUploadElite_New(string _user_id, DateTime _fromdate, DateTime _toDate, string _Company, string _Profit, out string _errorMsg)
        {
            _financialDAL = new FinancialDAL();
            DataTable _returnDataSet = new DataTable();
            _errorMsg = string.Empty;

            try
            {
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                //get processed Dataset
                DataTable _processedData = new DataTable();
                _processedData = _financialDAL.ProcessSunUploadElite(_user_id, _fromdate, _toDate, _Company, _Profit);
                if (_processedData.Rows.Count > 0)
                {
                    //get profit center hierarchy
                    List<MasterSalesPriorityHierarchy> _pcInfo = new List<MasterSalesPriorityHierarchy>();
                    _pcInfo = _financialDAL.GetPcInfo(_Company, _Profit, string.Empty, string.Empty);
                    if (_pcInfo != null && _pcInfo.Count > 0)
                    {
                        string _chnlCode = _pcInfo.Where(x => x.Mpi_cd == "CHNL").Select(s => s.Mpi_val).FirstOrDefault();
                        string _subChnl = _pcInfo.Where(x => x.Mpi_cd == "SCHNL").Select(s => s.Mpi_val).FirstOrDefault();

                        //group processed data set
                        var groupedProcessedData = _processedData.AsEnumerable()
                            .GroupBy(grp =>
                                new
                                {
                                    AccountNo = grp.Field<string>("str_01"),
                                    JournalType = grp.Field<string>("str_13"),
                                    JournalSource = grp.Field<string>("str_14")
                                }).Select(x => x.Key).ToList();

                        if (groupedProcessedData != null && groupedProcessedData.Count > 0)
                        {
                            foreach (var _data in groupedProcessedData)
                            {
                                //Get account definitions
                                DataTable _accountDefDetails = new DataTable();
                                _accountDefDetails = _financialDAL.GetSunAccountDefinition(_Company, _chnlCode, _subChnl, (string.IsNullOrEmpty(_data.AccountNo) ? string.Empty : _data.AccountNo.Trim()), _data.JournalType.Trim(), _data.JournalSource.Trim());
                                if (_accountDefDetails.Rows.Count > 0)
                                {
                                    foreach (DataRow _det in _accountDefDetails.Rows)
                                    {
                                        //updated processed data with definition
                                        _financialDAL.UpdateGlbSosUpload(_data.AccountNo, _data.JournalType, _data.JournalSource, (_det["accd_journal_txn_ref"] == DBNull.Value ? string.Empty : _det["accd_journal_txn_ref"].ToString()), (_det["accd_journal_tp_desc"] == DBNull.Value ? string.Empty : _det["accd_journal_tp_desc"].ToString()));
                                        //_processedData.AsEnumerable()
                                        //    .Where(x=>x.Field<string>("str_01") == _data.AccountNo && x.Field<string>("str_13") == _data.JournalType && x.Field<string>("str_14") == _data.JournalSource).ToList()
                                        //    .ForEach(y=>
                                        //        {
                                        //            y["str_15"] = (_det["accd_journal_txn_ref"] == DBNull.Value ? string.Empty : _det["accd_journal_txn_ref"].ToString());
                                        //            y["str_17"] = (_det["accd_journal_tp_desc"] == DBNull.Value ? string.Empty : _det["accd_journal_tp_desc"].ToString());
                                        //        });
                                    }

                                }
                            }
                            _returnDataSet = _financialDAL.GetGlbSosSummery();
                        }
                        else
                        {
                            _errorMsg = "Couldn't grouped processed data from list";
                        }
                    }
                    else
                    {
                        _errorMsg = "Couldn't find profit center details";
                    }
                }
                else
                {
                    _errorMsg = "No record found !";
                }

                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _errorMsg = ex.Message;
            }

            return _returnDataSet;
        }
        //subodana
        public string GetSICurrency(string SINO)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSICurrency(SINO);
        }
        //subodana
        public decimal GetPrevMonthAdj(string pc, DateTime bonusdate, DateTime effectivedate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPrevMonthAdj(pc, bonusdate, effectivedate);
        }
        public DataTable GetPrevMonthActArrears(string pc, DateTime bonusdate, DateTime effectivedate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPrevMonthActArrears(pc, bonusdate, effectivedate);
        }
        //subodana
        public int UpdateBuyingRates(string sino, decimal buying, decimal costing, decimal frieghtRate, string remarks, decimal exRate)
        {
            Int32 effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            effect = _financialDAL.UpdateBuyingRates(sino, buying, costing, frieghtRate, remarks, exRate);
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return effect;
        }
        //subodana
        public DataTable GetBuyingRates(string sinum)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBuyingRates(sinum);
        }
        //subodana
        public DataTable GetForcastRate(string sinum, string type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetForcastRate(sinum, type);
        }
        //subodana
        public bool IsTOTOItem(string si)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsTOTOItem(si);
        }
        //subodana
        public bool IsHUGOItem(string si)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsHUGOItem(si);
        }
        //subodana
        public bool IsMotoBike(string si)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsMotoBike(si);
        }
        //tharanga 2018/04/05
        public List<Deposit_Bank_Pc_wise> get_Deposit_Bank_Pc_wise_det(string p_com, string p_prof_cen, string p_mid_no, DateTime p_frm_date, DateTime p_to_date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_Deposit_Bank_Pc_wise_det(p_com, p_prof_cen, p_mid_no, p_frm_date, p_to_date);
        }

        public List<Deposit_Bank_Pc_wise> get_mid_details(string p_com, string p_prof_cen, string p_mid_no, string p_bandk, int p_period, string p_price_book, string p_price_level, string p_item, string p_promotion, string p_cat, string p_brand, DateTime p_to_date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_mid_details(p_com, p_prof_cen, p_mid_no, p_bandk, p_period, p_price_book, p_price_level, p_item, p_promotion, p_cat, p_brand, p_to_date);
        }
        //subodana
        public string GetEXPBOISunReqNo(string BondNo, string Loc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetEXPBOISunReqNo(BondNo, Loc);
        }
        //subodana
        public int UpdateBondLoc(string sunreq, string bondno, string loc)
        {
            Int32 effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            effect = _financialDAL.UpdateBondLoc(sunreq, bondno, loc);
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return effect;
        }
        //add by tharanga 2018/04/11
        public DataTable get_cred_realization_Hdr(string _com, string _mid, string p_bank, DateTime _date, string p_user, string p_session, string p_account)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_cred_realization_Hdr(_com, _mid, p_bank, _date, p_user, p_session, p_account);
        }
        //add by tharanga 2018/04/18
        public DataTable get_advance_dete(string _itm, string _loc)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_advance_dete(_itm, _loc);
        }
        //Wimal 18/May/2018
        public int Allocate_SUNReceipt(string p_comcode, string p_receiptno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Allocate_SUNReceipt(p_comcode, p_receiptno);
        }
        //Wimal 18/May/2018
        public bool SUNPeriodclose(string p_comcode, string p_db, DateTime chkDate)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.SUNPeriodclose(p_comcode, p_db, chkDate);
        }
        //Wimal 18/May/2018
        public bool validateSUNACC(string p_comcode, string p_db, string p_accno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.validateSUNACC(p_comcode, p_db, p_accno);
        }

        //subodana
        public List<hpt_arr_acc> GetAllBonusPCData(string pc, DateTime date, string com, string mnger)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAllBonusPCData(pc, date, com, mnger);
        }
        //subodana
        public List<hpt_arr_acc> GetMonthlyBonusPCData(string pc, DateTime date, string com, string mnger, DateTime effectdt)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetMonthlyBonusPCData(pc, date, com, mnger, effectdt);
        }
        //adb by tharanga 2018/04/24
        public DataTable Process_cred_realization(string in_com, string in_pc, DateTime in_recept_date, DateTime in_date, string in_user, string in_session, Int32 in_seq, string in_bank_cd, string in_mid_cd, string in_acc_no)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Process_cred_realization(in_com, in_pc, in_recept_date, in_date, in_user, in_session, in_seq, in_bank_cd, in_mid_cd, in_acc_no);
        }
        //add by tharanga 2018/05/02
        public int GetCCRecTot_cred(string _com, DateTime _date, string _accno, out decimal _val)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCCRecTot_cred(_com, _date, _accno, out  _val);
        }
        //add by tharanga 2018/05/02
        public Int32 UpdatecrdRealizationDet(List<gnt_cred_stmnt_det> _credRlsList, string _Bsth_com, DateTime _Bsth_dt, string _Bsth_accno, Decimal _Bsth_opbal, Decimal _Bsth_realizes, Decimal _Bsth_prv_realize, Decimal _Bsth_cc, Decimal _Bsth_adj, Decimal _Bsth_clbal, Decimal _Bsth_state_bal, string _Bsth_stus, string _Bsth_cre_by, string _STH_MID, out string _msg, string _sessionid)
        {
            Int32 result = 0;
            _msg = "";
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                foreach (gnt_cred_stmnt_det _lst in _credRlsList)
                {
                    result = _financialDAL.UpdatecredRealizationDetails(_lst);      //gnt_bnk_stmnt_det
                }
                //gnt_bnk_stmnt_hdr
                Int32 _eff = _financialDAL.UpdatecredRealizationHdr(_Bsth_com, _Bsth_dt, _Bsth_accno, _Bsth_opbal, _Bsth_realizes, _Bsth_prv_realize, _Bsth_cc, _Bsth_adj, _Bsth_clbal, _Bsth_state_bal, _Bsth_stus, _Bsth_cre_by, _STH_MID, _sessionid);

                _financialDAL.TransactionCommit();
                result = 1;
                _msg = string.Empty;
            }
            catch (Exception ex)
            {
                result = -1;
                _msg = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
            }
            return result;
        }
        //add by tharanga 2018/05/02
        public DataTable get_cred_serch_det(string _com, string _pc, DateTime _date, string _accno, string _doctp, Decimal _amtfrom, Decimal _amtto, Int32 _is_real_stus, Int32 _nt_in_state, Int32 _oth_bank, Int32 _withNIS, string _ref, string _bank, string _mid)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_cred_serch_det(_com, _pc, _date, _accno, _doctp, _amtfrom, _amtto, _is_real_stus, _nt_in_state, _oth_bank, _withNIS, _ref, _bank, _mid);

        }
        //add by tharanga 2018/05/02
        public Boolean checkDoc_credk_State(string _pc, DateTime _dt, string _doctp, string _ref)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.checkDoc_credk_State(_pc, _dt, _doctp, _ref);
        }
        //add by tharanga 2018/05/02
        public Int32 Save_cred_Adj(ScanPhysicalDocReceiveDet _doc, string _bsta_com, string _bsta_pc, DateTime _bsta_dt, string _bsta_accno, string _bsta_adj_tp, string _bsta_adj_tp_desc, Decimal _bsta_amt, string _bsta_refno, string _bsta_rem, string _bsta_cre_by, DateTime _month, Int32 _week, string _bnk_id, string _bnk_cd, string _mid, Int32 _seq)
        {
            Int32 effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                //GNT_BNK_STMNT_ADJ
                int X = _financialDAL.SavecredAdj(_bsta_com, _bsta_pc, _bsta_dt, _bsta_accno, _bsta_adj_tp, _bsta_amt, _bsta_refno, _bsta_rem, _bsta_cre_by, _mid, _seq, _bnk_cd);

                //GNT_BNK_STMNT_DET || if p_adj_tp in ('DEPOSIT','CHEQUE','CS_CHEQUE') GNT_RCV_DSK_DOC
                effect = _financialDAL.Save_cred_AdjDet(_bsta_com, _bsta_pc, _bsta_dt, _bsta_accno, _bsta_adj_tp, _bsta_adj_tp_desc, _bsta_refno, _bsta_amt, 1, _bsta_dt, 1, _bsta_cre_by, _month, _week, _bnk_id, _bnk_cd, _bsta_rem, _mid, _seq, _doc.bsta_bnk_charge);


                _financialDAL.TransactionCommit();

            }
            catch (Exception err)
            {
                effect = -1;
                _financialDAL.TransactionRollback();

            }

            return effect;
        }
        //add by tharanga 2018/05/02
        public DataTable Get_cred_Adj(string _com, DateTime _date, string _accno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Get_cred_Adj(_com, _date, _accno);
        }
        //add by tharanga 2018/05/02
        public Int32 Finalize_cred_Realization(string _Bsth_com, DateTime _Bsth_dt, string _Bsth_accno, string _user, string _session, List<gnt_cred_stmnt_det> _credlsList, string _mid)
        {
            Int32 result = 0;
            try
            {

                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                if (_credlsList != null)
                {
                    foreach (gnt_cred_stmnt_det _lst in _credlsList)
                    {
                        result = _financialDAL.update_cred_REALIZED(_lst);
                    }
                }

                result = _financialDAL.Finalize_cred_Realization_final(_Bsth_com, _Bsth_dt, _Bsth_accno, _user, _session, _mid);
                _financialDAL.TransactionCommit();
            }
            catch (Exception)
            {

                result = -1;
                _financialDAL.TransactionRollback();
            }


            _financialDAL.ConnectionClose();
            return result;
        }
        public Int32 Update_cred_AdjPC(string _com, string _pc, DateTime _date, string _accno, string _adjtp, string _ref, string _newpc, Decimal _val, string _newrem)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.Update_cred_AdjPC(_com, _pc, _date, _accno, _adjtp, _ref, _newpc, _val, _newrem);
            _financialDAL.ConnectionClose();
            return _eff;

        }
        //add by tharanga 2018/05/04
        public Int32 Update_bank_recon_remark(string _com, string _pc, DateTime _date, string _accno, string _adjtp, string _ref, string remark, Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.Update_bank_recon_remark(_com, _pc, _date, _accno, _adjtp, _ref, remark, _seq);
            _financialDAL.ConnectionClose();
            return _eff;
        }
        //add by tharanga 2018/05/08
        public Int32 Update_bank_recon_hdr_status(string _com, DateTime _date, string _accno, string _status)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.Update_bank_recon_hdr_status(_com, _date, _accno, _status);
            _financialDAL.ConnectionClose();
            return _eff;
        }
        //add by tharanga 2018/05/08
        public Int32 uploda_excle_BankAdj(List<ScanPhysicalDocReceiveDet> _doc)
        {
            Int32 effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                foreach (ScanPhysicalDocReceiveDet item in _doc)
                {
                    int X = _financialDAL.SaveBankAdj(item.bsta_com, item.bsta_pc, item.bsta_dt, item.bsta_accno, item.bsta_adj_tp, item.bsta_amt, item.bsta_refno, item.bsta_rem, item.bsta_cre_by, item.bsta_mid);

                    //GNT_BNK_STMNT_DET || if p_adj_tp in ('DEPOSIT','CHEQUE','CS_CHEQUE') GNT_RCV_DSK_DOC
                    effect = _financialDAL.SaveBankAdjDet(item.bsta_com, item.bsta_pc, item.bsta_dt, item.bsta_accno, item.bsta_adj_tp, item.bsta_adj_tp, item.bsta_refno, item.bsta_amt, 1, item.bsta_dt, 1, item.bsta_cre_by, item.Grdd_month, item.Grdd_week, item.bank_id, item.Grdd_doc_bank_cd, item.Grdd_rmk, item.bsta_mid, item.Grdd_doc_bank_branch, item.BSTD_SUN_ACC);

                }
                //GNT_BNK_STMNT_ADJ


                _financialDAL.TransactionCommit();

            }
            catch (Exception err)
            {
                effect = -1;
                _financialDAL.TransactionRollback();

            }

            return effect;
        }
        //add by tharanga 2018/05/08
        public DataTable chk_cheque_realized(string _com, string _pc, DateTime _date, string _doc_tp, string _doc_ref, string _acc_no)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.chk_cheque_realized(_com, _pc, _date, _doc_tp, _doc_ref, _acc_no);
        }
        //Nuwan 2018.05.09 account 
        public List<REF_TMPLT_HED> getTemplateHeaderDetails(bool withdeleted, int pgeNum, int pgeSize, string searchFld, string searchVal, out string error)
        {
            error = "";
            List<REF_TMPLT_HED> list = new List<REF_TMPLT_HED>();
            try
            {
                _financialDAL = new FinancialDAL();
                list = _financialDAL.getTemplateHeaderDetails(withdeleted, pgeNum, pgeSize, searchFld, searchVal);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return list;
        }
        public Int32 updateStusTemplateHeader(Int32 hedid, Int32 stus, string updateby, out string error)
        {
            error = "";
            Int32 eff = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                Int32 count = _financialDAL.getTepmplateUsedCount(hedid);
                if (count > 0)
                {
                    error = "Template already used in another places.Please remove those before delete.";
                }
                else
                {
                    eff = _financialDAL.updateStusTemplateHeader(hedid, stus, updateby);
                }
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return eff;
        }
        public REF_TMPLT_HED getTemplateHedDet(Int32 hedid, out string error)
        {
            error = "";
            REF_TMPLT_HED list = new REF_TMPLT_HED();
            try
            {
                _financialDAL = new FinancialDAL();
                list = _financialDAL.getTemplateHedDet(hedid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return list;
        }
        public List<REF_TMP_OBJHEDDET> getTemplateHedItemDet(Int32 hedid, out string error)
        {
            error = "";
            List<REF_TMP_OBJHEDDET> list = new List<REF_TMP_OBJHEDDET>();
            try
            {
                _financialDAL = new FinancialDAL();
                list = _financialDAL.getTemplateHedItemDet(hedid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return list;
        }
        public List<REF_OBJ_LIST_DET> getTemplateComboDet(Int32 detid, out string error)
        {
            error = "";
            List<REF_OBJ_LIST_DET> list = new List<REF_OBJ_LIST_DET>();
            try
            {
                _financialDAL = new FinancialDAL();
                list = _financialDAL.getTemplateComboDet(detid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return list;
        }
        public Int32 updateItemListStatus(Int32 detid, string userid, out string error)
        {
            error = "";
            Int32 eff = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                eff = _financialDAL.updateItemListStatus(detid, userid);
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return eff;
        }
        public List<REF_OBJ> getAllTemplateItemDetails(out string error)
        {
            error = "";
            List<REF_OBJ> list = new List<REF_OBJ>();
            try
            {
                _financialDAL = new FinancialDAL();
                list = _financialDAL.getAllTemplateItemDetails();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return list;
        }
        public List<REF_OBJ_LIST_DET> getTemplateComboDetItmDet(Int32 itmid, out string error)
        {
            error = "";
            List<REF_OBJ_LIST_DET> list = new List<REF_OBJ_LIST_DET>();
            try
            {
                _financialDAL = new FinancialDAL();
                list = _financialDAL.getTemplateComboDetItmDet(itmid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return list;
        }
        public Int32 addTemplateField(Int32 hedid, Int32 detid, string name, string creby, out string error)
        {
            error = "";
            Int32 eff = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                eff = _financialDAL.addTemplateField(hedid, detid, name, creby);
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return eff;
        }
        public DataTable LOAD_MID_DET(string _bank, string _mid)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.LOAD_MID_DET(_bank, _mid);
        }
        public Int32 updateLabelText(Int32 id, string name, string userId, out string error)
        {
            error = "";
            Int32 eff = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                eff = _financialDAL.updateLabelText(id, name, userId);
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return eff;
        }
        public Int32 createNewTemplate(string desc, string createby, List<REF_TMPLT_DET_SIN> details, out string error)
        {
            error = "";
            Int32 eff = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                string name = desc.Replace(" ", "");
                Int32 seq = _financialDAL.GetHeaderSeqID();
                eff = _financialDAL.createTemplateHdr(seq, createby, name, desc);
                if (eff > 0)
                {
                    foreach (REF_TMPLT_DET_SIN itm in details)
                    {
                        Int32 res = _financialDAL.createTemplateDet(seq, itm);
                    }
                }
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                error = ex.Message.ToString();
            }
            return eff;

        }
        public List<REF_OBJ_TEMPITMFRM> getTemplateDetailtoFrom(Int32 hedid, out string error)
        {
            error = "";
            List<REF_OBJ_TEMPITMFRM> list = new List<REF_OBJ_TEMPITMFRM>();
            try
            {
                _financialDAL = new FinancialDAL();
                list = _financialDAL.getTemplateDetailtoFrom(hedid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return list;
        }
        public Int32 saveAccountDefinitionData(string name, List<REF_TMPLT_VALUE> itemVal, out string error)
        {
            error = "";
            Int32 eff = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                eff = commonSaveDynamicFieldValue(itemVal, name);
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                error = ex.Message.ToString();
            }
            return eff;
        }

        public Int32 commonSaveDynamicFieldValue(List<REF_TMPLT_VALUE> itemVal, string uniqFieldValue)
        {
            try
            {
                Int32 res = 0;
                foreach (REF_TMPLT_VALUE itm in itemVal)
                {
                    res = _financialDAL.commonSaveDynamicFieldValue(itm, uniqFieldValue);
                }
                return res;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public List<REF_OBJ_TEMPITMFRM> getTeplateSavedData(string code, string company, out string error)
        {
            error = "";
            List<REF_OBJ_TEMPITMFRM> list = new List<REF_OBJ_TEMPITMFRM>();
            try
            {
                _financialDAL = new FinancialDAL();
                list = _financialDAL.getTeplateSavedData(code, company);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return list;
        }
        public Int32 removeDocumentTepllate(Int32 hed, string assigncode, string userid, out string error)
        {
            error = "";
            Int32 eff = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                eff = _financialDAL.removeDocumentTepllate(hed, assigncode, userid);
                _financialDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                error = ex.Message.ToString();
            }
            return eff;
        }


        //Tharindu 2017-11-24
        public Int32 SaveFineChargesExecl(List<FineCharges> _lstfinecharges, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                effect = _financialDAL.SaveFineChargesExecl(_lstfinecharges);
                if (effect > 0)
                {
                    _financialDAL.TransactionCommit();
                }
                else
                {
                    _err = "Data not saved correctly / Already inserted!";
                    _financialDAL.TransactionRollback();
                    _financialDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }

        //Tharindu 2017-11-24
        public Int32 SaveFineSetOff(string com, string pc, DateTime setdt, int status, string creby, DateTime credt, decimal setoffval, int seqno, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                effect = _financialDAL.SaveFineSetOff(com, pc, setdt, status, creby, credt, setoffval, seqno);
                if (effect > 0)
                {
                    _financialDAL.TransactionCommit();
                }
                else
                {
                    _err = "Data not saved correctly !";
                    _financialDAL.TransactionRollback();
                    _financialDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }

        //Tharindu 2018-05-18

        public DataTable ChekSchemeValidCode(string p_type, string p_term)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.chekSchemeValidCode(p_type, p_term);
        }

        //Tharindu 2018-05-18
        public Int32 SaveTradingInterestDetails(List<TradingInterest> _lstTradingInterest, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                effect = _financialDAL.SaveTradingInterestDetails(_lstTradingInterest);
                if (effect > 0)
                {
                    _financialDAL.TransactionCommit();
                }
                else
                {
                    _err = "Data not saved correctly !";
                    _financialDAL.TransactionRollback();
                    _financialDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }

        //Tharindu 2018-05-18
        public DataTable GetTradingdetails(DateTime frmdte, DateTime todte)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetTradingdetails(frmdte, todte);
        }




        public List<ref_acc_sgrp> GetAccMainType(string com, string mtype)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAccMainType(com, mtype);
        }

        //pasindu 2018/05/16
        public int SAVE_RENT_PAYMENT_DETAILS(MasterAutoNumber _masterAutoNumber, string p_paymenttype, string p_paymentsubtype, string psh_com, string psh_pc, string psh_add1, string psh_add2, string psh_dist, string psh_prv, string p_creditaccount, string p_debitaccount, string psh_frm_dt, string psh_to_dt, string psh_ref_no, string psh_rmk, string psh_trm, string psh_cre_by, string p_sqfeet, List<PAY_SCH_OWNERS_DET> ownerlist, string p_psh_no, List<PAY_SCHEDULE_DETAILS> schedule_data, out string err)
        {
            int val = 0;
            int valown = 0;
            int valown1 = 0;
            err = string.Empty;
            int effect = 0;
            string autono = "";
            try
            {
                FinancialDAL _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                Int32 _autoNo = _financialDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                effect = _financialDAL.UpdateAutoNumber(_masterAutoNumber);
                autono = _masterAutoNumber.Aut_start_char + "-" + _autoNo.ToString();
                val = _financialDAL.SAVE_RENT_PAYMENT_DETAILS(autono, p_paymenttype, p_paymentsubtype, psh_com, psh_pc, psh_add1, psh_add2, psh_dist, psh_prv, p_creditaccount, p_debitaccount, psh_frm_dt, psh_to_dt, psh_ref_no, psh_rmk, psh_trm, psh_cre_by, p_sqfeet, p_psh_no);
                foreach (PAY_SCH_OWNERS_DET item in ownerlist)
                {
                    valown = _financialDAL.SAVE_SCH_OWNER_DETAILS(item.psa_fld_cd, item.psa_hed_cd, item.psa_clm_id, item.psa_rec_id, item.psa_value, psh_cre_by);
                }

                FinancialBLL _financialBL = new FinancialBLL();
                if (p_psh_no == "")
                {
                    p_psh_no = autono;
                }

                foreach (PAY_SCHEDULE_DETAILS item in schedule_data)
                {
                    item.psd_no = p_psh_no;
                }

                foreach (PAY_SCHEDULE_DETAILS item in schedule_data)
                {
                    valown1 = _financialBL.UPDATE_PAY_SCH_DETAILS(schedule_data, psh_cre_by, out err);
                }

                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _securityDAL.TransactionRollback();
                err = ex.Message;
            }
            return val;
        }

        public Int32 UPDATE_SCH_STATUS(string p_psh_no, string p_userid, out string err)
        {
            Int32 val = 0;
            err = string.Empty;
            try
            {
                FinancialDAL _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                val = _financialDAL.UPDATE_SCH_STATUS(p_psh_no, p_userid);
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _securityDAL.TransactionRollback();
                err = ex.Message;
            }
            return val;
        }

        public List<SCH_PAY_COLUMN> getSCHColumns(string p_type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getSCHColumns(p_type);
        }

        public List<PAY_SCHEDULE_DETAILS> getScheduleDetails(string p_psh_no)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getScheduleDetails(p_psh_no);
        }

        public List<PAY_SCH_OWNERS_DET> getSCHOwnerDetails(string p_schid, string p_type)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getSCHOwnerDetails(p_schid, p_type);
        }

        public Int32 REMOVE_SCH_OWNER(string p_psa_fld_cd, string p_psa_hed_cd, string p_psa_rec_id, string p_user)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.REMOVE_SCH_OWNER(p_psa_fld_cd, p_psa_hed_cd, p_psa_rec_id, p_user);
            _financialDAL.ConnectionClose();
            return _eff;
        }

        public Int32 UPDATE_PAY_SCH_DETAILS(List<PAY_SCHEDULE_DETAILS> schedule_data, string p_user, out string err)
        {
            int valown = 0;
            err = "";
            try
            {
                FinancialDAL _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();
                foreach (PAY_SCHEDULE_DETAILS item in schedule_data)
                {
                    valown = _financialDAL.SAVE_PAY_SCH_DETAILS(item.psd_no, item.psd_line, DateTime.Parse(item.psd_due), item.psd_amt, item.psd_ded_amt, item.psd_net_amt, p_user);
                }
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                _securityDAL.TransactionRollback();
                err = ex.Message;
            }

            return valown;
        }

        public DataTable GetSubTypes(string _com, string sungrp)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSubTypes(_com, sungrp);
        }
        public DataTable GetAccountFMainTypes(string _com)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAccountFMainTypes(_com);
        }
        //subodana 2018-05-31
        public Int32 UPDATE_ClosingBalAccounts(Int64 accounts, decimal closingbal, Int64 Seq, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                effect = _financialDAL.UPDATE_ClosingBalAccounts(accounts, closingbal, Seq);
                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }
        public Int32 save_cred_rls_hdr(gnt_cred_stmnt_hdr _gnt_cred_stmnt_hdr, out string _err)
        {
            _err = "";
            Int32 effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                effect = _financialDAL.save_cred_rls_hdr(_gnt_cred_stmnt_hdr);
                if (effect > 0)
                {
                    _financialDAL.TransactionCommit();
                }
                else
                {
                    _err = "Data not saved correctly !";
                    _financialDAL.TransactionRollback();
                    _financialDAL.ConnectionClose();
                    effect = -1;
                }
            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                effect = -1;
            }
            return effect;

        }
        //subodana 2018-06-02
        public Int32 SaveAccountGroupDetails(ref_acc_sgrp GrpOb, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                effect = _financialDAL.SaveAccountGrpDetails(GrpOb);
                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }
        //subodana 2018-06-05
        public Int32 SaveChartAccDetails(List<ref_cht_acc> _list, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                foreach (var acc in _list)
                {
                    effect = _financialDAL.SaveChartAccountDetails(acc);
                    effect = _financialDAL.SaveChartAccountGRPDetails(acc);
                }
                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }
        public List<ref_cht_accgrp> GetAccGroup(string Code)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAccGroup(Code);
        }
        public List<ref_cht_acc> GetAcc(string Code)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAcc(Code);
        }
        public DataTable GetAccHeading()
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAccHeading();
        }
        public decimal HeroMotobikeCharge(string sino)
        {
            _financialDAL = new FinancialDAL();

            bool isherobike = _financialDAL.IsHEROMotoBike(sino);
            decimal cost = 0;
            if (isherobike)
            {
                decimal qty = _financialDAL.HEROMotoBikeQTY(sino);
                cost = qty * 2000;
            }
            else
            {
                cost = 0;
            }
            return cost;
        }
        public DataTable GetAccHeadingdetails(string Code)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAccHeadingDetails(Code);
        }
        public List<ref_acc_sgrp> GetAccMainTypeDet(string com, string mtype, string sub)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetAccMainTypeDet(com, mtype, sub);
        }
        public DataTable GetSubTypesDetails(string _com, string sungrp, string tsub)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSubTypesDetails(_com, sungrp, tsub);
        }
        //subodana
        public string GetSIItemCat1(string ItemCode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSIItemCat1(ItemCode);
        }
        public string GetSIItemCat2(string ItemCode)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetSIItemCat2(ItemCode);
        }
        public Boolean IsCosting(string SINO)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.IsCosting(SINO);
        }
        public List<REF_OBJ_TEMPITMFRM> getSavedItemTemplateVal(string module, string code, string company, string savedVal, out string error)
        {
            error = "";
            List<REF_OBJ_TEMPITMFRM> lst = new List<REF_OBJ_TEMPITMFRM>();
            try
            {
                _financialDAL = new FinancialDAL();
                lst = _financialDAL.getSavedItemTemplateVal(module, code, company, savedVal);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return lst;

        }

        public DataTable GetBnkdetails(string _com, string _loc, string _chkref, string _accno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetBnkdetails(_com, _loc, _chkref, _accno);
        }

        public DataTable getcurrfinecharges(string com, string p_pc, DateTime _date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.getcurrfinecharges(com, p_pc, _date);
        }

        public List<TABLE_HED> getTemplateTableColum(string company, string code, out string error)
        {
            error = string.Empty;
            List<TABLE_HED> lst = new List<TABLE_HED>();
            try
            {

                _financialDAL = new FinancialDAL();
                lst = _financialDAL.getTemplateTableColum(company, code);
                //if (res.Rows.Count > 0)
                //{
                //    foreach (DataRow rw in res.Rows)
                //    {
                //        string val = rw["RTD_NAME"].ToString();
                //        lst.Add(val);
                //    }
                //}
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return lst;

        }
        public List<REF_TMPLT_ITM_VALUE_TABLE> getItemSavedValues(string module, string code, string company, string savedVal, out String error)
        {
            error = "";
            List<REF_TMPLT_ITM_VALUE_TABLE> res = new List<REF_TMPLT_ITM_VALUE_TABLE>();
            try
            {
                _financialDAL = new FinancialDAL();
                res = _financialDAL.getItemSavedValues(module, code, company, savedVal);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }
        public string getFieldType(Int32 hedid, Int32 detid, out string error)
        {
            error = "";
            string output = "";
            try
            {
                _financialDAL = new FinancialDAL();
                output = _financialDAL.getFieldType(hedid, detid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return output;
        }
        public Int32 savePaymentRequestDetails(MST_PAY_REQ_HDR hdr, List<MST_PAY_REQ_DET> det, List<VALUE_ITM_LIST> rndmItm, List<MST_ACC_TAX> MST_ACC_TAX, List<PUR_SELECTED> PUR_SELECTED, MasterAutoNumber _masterAutoNumber, out string error)
        {
            error = "";
            Int32 rep = -1;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            _inventoryDAL = new InventoryDAL();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();
            string _documentNo = "";
            try
            {
                Int32 seq = 0;
                Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                _documentNo = _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("0000000", CultureInfo.InvariantCulture);
                hdr.MPRH_SEQ = _autoNo;
                hdr.MPRH_REQ_NO = _documentNo;
                Int32 effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);

                rep = _financialDAL.savePeymentRequestHdr(hdr);
                if (rep > 0)
                {
                    foreach (MST_PAY_REQ_DET dt in det)
                    {
                        dt.MPRD_REQ_NO = _documentNo;
                        dt.MPRD_SEQ = _autoNo;
                        dt.MPRD_CRE_BY = hdr.MPRH_CRE_BY;
                        dt.MPRD_CRE_DT = hdr.MPRH_CRE_DT;
                        rep = _financialDAL.savePeymentRequestDtl(dt);
                    }

                    foreach (VALUE_ITM_LIST itm in rndmItm)
                    {
                        foreach (REF_TMPLT_ITM_VALUE_TABLE tempitm in itm.ITEMS)
                        {
                            rep = _financialDAL.savePeymentRequestTempDet(tempitm, itm.RTIV_SEQ, itm.STUS, itm.UNQ_VAL, hdr.MPRH_CRE_BY, hdr.MPRH_CRE_DT, _documentNo);
                        }
                    }

                    if (MST_ACC_TAX != null && MST_ACC_TAX.Count > 0)
                    {
                        foreach (MST_ACC_TAX itm in MST_ACC_TAX)
                        {
                            itm.MAT_REQ_NO = _documentNo;
                            rep = _financialDAL.saveRequetTaxDetails(itm);
                        }
                    }

                    if (PUR_SELECTED != null && PUR_SELECTED.Count > 0)
                    {
                        foreach (PUR_SELECTED itm in PUR_SELECTED)
                        {
                            rep = _financialDAL.saveRequetPoDetails(itm, _documentNo, hdr.MPRH_CRE_BY, hdr.MPRH_CRE_DT);
                        }
                    }
                }
                else
                {
                    error = "Unable to save payment request details.";
                }

            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();

                rep = -1;
                error = ex.Message.ToString();
                return rep;
            }
            error = "Successfully created request number : " + _documentNo;
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            _inventoryDAL.TransactionCommit();
            _inventoryDAL.ConnectionClose();
            return rep;
        }
        public MST_PAY_REQ_HDR getPaymentreqHdr(string reqno, string com, string reqtp, out string error)
        {
            error = "";
            MST_PAY_REQ_HDR hdr = new MST_PAY_REQ_HDR();
            try
            {
                _financialDAL = new FinancialDAL();
                hdr = _financialDAL.getPaymentreqHdr(reqno, com, reqtp);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return hdr;
        }
        public List<MST_PAY_REQ_DET> getPayReqdetails(string com, string type, string reqno, out string error)
        {
            error = "";
            List<MST_PAY_REQ_DET> det = new List<MST_PAY_REQ_DET>();
            try
            {
                _financialDAL = new FinancialDAL();
                det = _financialDAL.getPayReqdetails(com, type, reqno);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return det;

        }
        //add by tharanga 2018/08/24
        public DataTable chk_vreg_available(string _com, string _pc, string _invno, string _sal_tp, string _itm, string _engine, string _chasi)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL._chk_vreg_available(_com, _pc, _invno, _sal_tp, _itm, _engine, _chasi);
        }
        //subodana 2018-08-29
        public Int32 UpdateHPRAccRemks(List<hpt_arr_acc> _list, out string _err)
        {

            _err = "";
            int effect = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                foreach (var acc in _list)
                {
                    effect = _financialDAL.UpdateHPRAccRemks(acc);
                    if (effect == 0)
                    {
                        _err = "Cant Find Details : Pc-" + acc.Haa_pc + " Date-" + acc.Haa_date.Date.ToString();
                        _financialDAL.TransactionRollback();
                        _financialDAL.ConnectionClose();
                        effect = 0;
                        return effect;
                    }
                }
                _financialDAL.TransactionCommit();

            }
            catch (Exception ex)
            {
                _err = ex.Message;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                effect = -1;
            }
            return effect;
        }
        public Int32 Update_cred_recon_hdr_status(string _com, DateTime _date, string _accno, string _status)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.Update_cred_recon_hdr_status(_com, _date, _accno, _status);
            _financialDAL.ConnectionClose();
            return _eff;
        }
        //add by tharanga 2018/05/04
        public Int32 Update_cred_recon_remark(string _com, string _pc, DateTime _date, string _accno, string _adjtp, string _ref, string remark, Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.Update_cred_recon_remark(_com, _pc, _date, _accno, _adjtp, _ref, remark, _seq);
            _financialDAL.ConnectionClose();
            return _eff;
        }
        public Int32 updateTempFiledDefNumber(Int32 detid, bool value, string user, out string error)
        {
            error = "";
            Int32 res = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                return _financialDAL.updateTempFiledDefNumber(detid, value, user);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }
        public Int32 updateTempFiledSrch(Int32 objid, string value, string userId, out string error)
        {
            error = "";
            Int32 res = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                return _financialDAL.updateTempFiledSrch(objid, value, userId);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }
        public int updatePaymentRequestDetails(MST_PAY_REQ_HDR hdr, List<MST_PAY_REQ_DET> accdet, List<VALUE_ITM_LIST> VALUE_ITM_LIST, List<MST_ACC_TAX> MST_ACC_TAX, out string error)
        {
            error = "";
            Int32 ret = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _financialDAL.BeginTransaction();
            try
            {
                if (!string.IsNullOrEmpty(hdr.MPRH_REQ_NO))
                {
                    ret = _financialDAL.updatePayreqHdr(hdr);

                    //if (accdet.Count > 0)
                    //{
                    //    foreach (MST_PAY_REQ_DET acc in accdet)
                    //    {
                    //        if (acc.UPDATED == 1 || acc.NEW_ADDED == 1)
                    //        {
                    //            acc.MPRD_MOD_BY = hdr.MPRH_MOD_BY;
                    //            acc.MPRD_MOD_DT = hdr.MPRH_MOD_DT;
                    //            acc.MPRD_SEQ = hdr.MPRH_SEQ;
                    //            acc.MPRD_REQ_NO = hdr.MPRH_REQ_NO;
                    //            ret = _financialDAL.updatePayreqDtl(acc);
                    //        }
                    //    }
                    if (VALUE_ITM_LIST.Count > 0)
                    {
                        foreach (VALUE_ITM_LIST itm in VALUE_ITM_LIST)
                        {
                            foreach (REF_TMPLT_ITM_VALUE_TABLE tempitm in itm.ITEMS)
                            {
                                if (itm.IS_UPDATED == 1 || itm.NEW_ADDED == 1)
                                {
                                    ret = _financialDAL.updatePeymentRequestTempDet(tempitm, tempitm.RTIV_SEQ, itm.STUS, itm.UNQ_VAL, hdr.MPRH_CRE_BY, hdr.MPRH_CRE_DT, itm.IS_UPDATED, itm.NEW_ADDED, hdr.MPRH_REQ_NO, itm.RTIV_DIRECT);
                                }
                            }
                        }
                    }
                    else
                    {
                        ret = -1;
                        _financialDAL.TransactionRollback();
                        _financialDAL.ConnectionClose();
                        error = "Please enter valid account details.";
                    }

                    if (MST_ACC_TAX.Count > 0)
                    {
                        foreach (MST_ACC_TAX item in MST_ACC_TAX)
                        {
                            if (item.NEW_ADDED == 1 || item.UPDATED == 1)
                            {
                                item.MAT_REQ_NO = hdr.MPRH_REQ_NO;
                                ret = _financialDAL.saveRequetTaxDetails(item);
                            }
                        }

                    }
                    else
                    {
                        ret = -1;
                        _financialDAL.TransactionRollback();
                        _financialDAL.ConnectionClose();
                        error = "Please enter valid tax details.";
                    }
                    //}
                    //else
                    //{
                    //    ret = -1;
                    //    _financialDAL.TransactionRollback();
                    //    _financialDAL.ConnectionClose();
                    //    error = "Please enter valid account details.";
                    //}
                }
                else
                {
                    ret = -1;
                    _financialDAL.TransactionRollback();
                    _financialDAL.ConnectionClose();
                    error = "Invalid request details.";
                }
            }
            catch (Exception ex)
            {
                ret = -1;
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                error = ex.Message.ToString();
            }
            error = "Successfully uppdated request no :" + hdr.MPRH_REQ_NO;
            _financialDAL.TransactionCommit();
            _financialDAL.ConnectionClose();
            return ret;
        }
        //subodana
        public List<ref_eli_comm_targ> GetEliteCommTrgt(Int64 Seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetEliteCommTargets(Seq);
        }
        //subodana
        public List<ref_comm_add_trgt> GetEliteCommAdditional(Int64 Seq)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetEliteCommAdditional(Seq);
        }
        public SAR_PAY_TP getAccPAymentType(string code, string company, out string error)
        {
            error = "";
            SAR_PAY_TP det = new SAR_PAY_TP();
            try
            {
                _financialDAL = new FinancialDAL();
                det = _financialDAL.getAccountPayTpDet(code, company);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return det;
        }
        public REF_CHT_ACC getAccountDetail(string code, string company, out string error)
        {
            error = "";
            REF_CHT_ACC det = new REF_CHT_ACC();
            try
            {
                _financialDAL = new FinancialDAL();
                det = _financialDAL.getAccountDetail(code, company);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return det;
        }
        public Int32 getTepmplateUsedCount(Int32 hedid, out string error)
        {
            error = "";
            Int32 count = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                count = _financialDAL.getTepmplateUsedCount(hedid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return count;
        }
        public Int32 approvePaymentRequet(string ReqNo, string company, string userId, string stus, string remark, string sessionid, out string error)
        {
            error = "";
            Int32 eff = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                eff = _financialDAL.approvePaymentRequet(ReqNo, company, userId, stus, remark, sessionid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return eff;
        }
        public Int32 processPaymentRequest(string ReqNo, string company, string userId, MasterAutoNumber _masterAutoNumber, string sessionid, string reqtp, out string error)
        {
            error = "";
            Int32 eff = 0;
            bool succcess = true;
            string _documentNo = "";
            try
            {
                _financialDAL = new FinancialDAL();
                _inventoryDAL = new InventoryDAL();
                _financialDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
                _financialDAL.BeginTransaction();

                MST_PAY_REQ_HDR hdr = _financialDAL.getPaymentreqHdr(ReqNo, company, reqtp);
                if (hdr != null && hdr.MPRH_REQ_NO != null)
                {
                    if (hdr.MPRH_STUS != "F")
                    {
                        if (hdr.MPRH_STUS == "A")
                        {

                            MST_PAY_HDR phd = new MST_PAY_HDR();
                            Int32 seq = 0;
                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_masterAutoNumber.Aut_moduleid, _masterAutoNumber.Aut_direction, _masterAutoNumber.Aut_start_char, _masterAutoNumber.Aut_cate_tp, _masterAutoNumber.Aut_cate_cd, _masterAutoNumber.Aut_modify_dt, _masterAutoNumber.Aut_year).Aut_number;
                            _documentNo = _masterAutoNumber.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("0000000", CultureInfo.InvariantCulture);
                            Int32 effect = _inventoryDAL.UpdateAutoNumber(_masterAutoNumber);
                            phd.MPH_SEQ = _autoNo;
                            phd.MPH_PAY_NO = _documentNo;
                            phd.MPH_PAY_DT = DateTime.Now;
                            phd.MPH_COM = company;
                            phd.MPH_OTHDOC_NO = hdr.MPRH_REQ_NO;
                            phd.MPH_PAY_TP = hdr.MPRH_PAY_TP;
                            phd.MPH_CREDITOR = hdr.MPRH_CREDITOR;
                            phd.MPH_RMK = hdr.MPRH_RMK;
                            phd.MPH_GROS_AMT = hdr.MPRH_GROS_AMT;
                            phd.MPH_TAX = hdr.MPRH_TAX;
                            phd.MPH_NET_AMT = hdr.MPRH_NET_AMT;
                            phd.MPH_ANAL1 = hdr.MPRH_ANAL1;
                            phd.MPH_ANAL2 = hdr.MPRH_ANAL2;
                            phd.MPH_ANAL3 = hdr.MPRH_ANAL3;
                            phd.MPH_ANAL4 = hdr.MPRH_ANAL4;
                            phd.MPH_STUS = "P";
                            phd.MPH_CRE_BY = userId;
                            phd.MPH_CRE_DT = DateTime.Now;
                            phd.MPH_SESSION_ID = sessionid;
                            eff = _financialDAL.savePaymentHdr(phd);

                            if (eff == 1)
                            {
                                eff = _financialDAL.approvePaymentRequet(ReqNo, company, userId, "F", "", sessionid);
                                if (eff == 1)
                                {
                                    //List<MST_PAY_REQ_DET> det = _financialDAL.getPayReqdetails(hdr.MPRH_SEQ, ReqNo);
                                    //foreach (MST_PAY_REQ_DET im in det)
                                    //{
                                    //    eff = _financialDAL.savePaymentDtl(im, userId, _autoNo, _documentNo);
                                    //}
                                    eff = _financialDAL.saveTempItemValue(ReqNo, userId, _documentNo, company);
                                }
                                else
                                {
                                    error = "Unable to update payment request : " + ReqNo;
                                    succcess = false;

                                }

                            }
                            else
                            {
                                error = "Unable to process request number : " + ReqNo;
                                succcess = false;
                            }

                        }
                        else
                        {
                            error = "Please approve request before process.";
                            succcess = false;
                        }
                    }
                    else
                    {
                        error = ReqNo + " already processed by  " + hdr.MPRH_MOD_BY + " user.";
                        succcess = false;
                    }
                }
                else
                {
                    error = "Please select valid request number.";
                    succcess = false;
                }

                if (succcess)
                {
                    error = "Payment request process success.Payment No :" + _documentNo;
                    _financialDAL.TransactionCommit();
                    _financialDAL.ConnectionClose();
                    _inventoryDAL.TransactionCommit();
                    _inventoryDAL.ConnectionClose();
                    eff = 1;
                }
                else
                {
                    _financialDAL.TransactionRollback();
                    _financialDAL.ConnectionClose();
                    _inventoryDAL.TransactionRollback();
                    _inventoryDAL.ConnectionClose();
                    eff = -1;
                }
            }
            catch (Exception ex)
            {
                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                _inventoryDAL.TransactionRollback();
                _inventoryDAL.ConnectionClose();
                eff = -1;
                error = ex.Message.ToString();
            }
            return eff;
        }
        //Dulaj 2018/Oct/05
        public decimal GetAssemblyAmountProfitability(string com, string itemCd, string model, string cat01, string cat02)
        {
            decimal assmeblyAmt = 0;
            DataTable dt = new DataTable();
            _financialDAL = new FinancialDAL();
            if (!(itemCd.Equals("")))
            {
                dt = _financialDAL.GetAssemblyAmountProfitability(com, itemCd, "", "", "");
            }
            if (dt.Rows.Count < 1)
            {
                if (!(model.Equals("")))
                {
                    dt = _financialDAL.GetAssemblyAmountProfitability(com, "", model, "", "");
                }
            }
            if (dt.Rows.Count < 1)
            {
                if (!(cat01.Equals("")) && !(cat02.Equals("")))
                {
                    dt = _financialDAL.GetAssemblyAmountProfitability(com, "", "", cat01, cat02);
                }
            }
            if (dt.Rows.Count < 1)
            {
                if (!(cat01.Equals("")))
                {
                    dt = _financialDAL.GetAssemblyAmountProfitability(com, "", "", cat01, "");
                }
            }
            if (dt != null)
            {
                if (dt.Rows.Count > 0)
                {
                    string amt = dt.Rows[0]["aut_pro_amount"].ToString();
                    if (!(string.IsNullOrEmpty(amt)))
                    {
                        assmeblyAmt = Convert.ToDecimal(amt);
                    }
                }
            }
            return assmeblyAmt;
        }
        public DataTable GetBlItm(string siNo)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.BLItm(siNo);
        }
        //tharanga 2018/12/22 
        public List<ChequeReturn> Getreturn_cheq_cout_data(string _pc, DateTime rtndt, string _com, Int16 _datecount)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.Getreturn_cheq_cout_data(_pc, rtndt, _com, _datecount);
        }
        public List<Ref_Bill_Collet> GetRef_Bill_Collet_dayend(string Com, string Pc, DateTime Date)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetRef_Bill_Collet_dayend(Com, Pc, Date);
        }
        public Int32 ref_bill_collect_conform(string _com, string _pc, DateTime _date, string _user, Int32 conf_stus, Int32 _seq)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            Int32 _eff = _financialDAL.ref_bill_collect_conform(_com, _pc, _date, _user, conf_stus, _seq);
            _financialDAL.ConnectionClose();
            return _eff;
        }
        public DataTable GetRevertReleaseAccountDetail(string _COM, string _PC, string _ACC, string _ITM)
        {
            _inventoryDAL = new InventoryDAL();
            return _inventoryDAL.GetRevertReleaseAccountDetail(_COM, _PC, _ACC, _ITM);
        }
        public List<MST_PAY_REQ_HDR> getAllRequestDetails(string company, string stus, string type, out string error)
        {
            error = "";
            List<MST_PAY_REQ_HDR> dtl = new List<MST_PAY_REQ_HDR>();
            try
            {
                _financialDAL = new FinancialDAL();
                dtl = _financialDAL.getAllRequestDetails(company, stus, type);

            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return dtl;
        }
        public int UpdateBLItmRemarks(string blNo, string itmCd, Int32 lineNo, string remarks)
        {
            Int32 effect = 0;

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            effect = _financialDAL.UpdateBLItmRemarks(blNo, itmCd, lineNo, remarks);
            _financialDAL.ConnectionClose();
            return effect;
        }
        //Wimal 28/11/2018
        public DataTable get_DepositBank_Pc_wise(string p_com, string p_prof_cen)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.get_DepositBank_Pc_wise(p_com, p_prof_cen);
        }


        //add by tharanga 2018/11/06
        public Int32 save_log_sunupload(log_sunupload _log_sunupload, out string error)
        {
            error = "";
            Int32 eff = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                // foreach (log_sunupload item in _log_sunupload)
                //{
                eff = _financialDAL.save_log_sunupload(_log_sunupload);
                // }
                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();

            }
            catch (Exception ex)
            {

                _financialDAL.TransactionRollback();
                _financialDAL.ConnectionClose();
                eff = -1;
                error = ex.Message.ToString();
            }
            return eff;
        }
        public List<log_sunupload> getlog_sunupload(log_sunupload _log_sunupload, out string err)
        {
            List<log_sunupload> temp = null;

            _financialDAL = new FinancialDAL();
            try
            {

                temp = _financialDAL.getlog_sunupload(_log_sunupload);
                err = "";
            }
            catch (Exception ex)
            {
                err = ex.Message.ToString();
            }
            return temp;
        }
        public DataTable GetCusdecHDRDataShipment(string entryno)
        {
            _financialDAL = new FinancialDAL();
            DataTable Hdrdata = _financialDAL.GetCusdecHDRDataShipment(entryno);
            return Hdrdata;
        }
        public int UPDATE_CUS_DEC_HDR(string bondNo, string model, string clrBy, decimal cif, string rmk, string user, string entry, DateTime actulaDate, DateTime filereceidDate)
        {
            int effect = 0;
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            try
            {
                effect = _financialDAL.UPDATE_CUS_DEC_HDR(bondNo, model, clrBy, cif, rmk, user, entry, actulaDate, filereceidDate);
                if (effect > 0)
                {
                    _financialDAL.TransactionCommit();
                    _financialDAL.TransactionRollback();
                }
            }
            catch (Exception EX)
            {
                _financialDAL.TransactionRollback();
                _financialDAL.TransactionRollback();

            }
            return effect;
        }
        public List<MasterSalesPriorityHierarchy> GetPcInfo(string com, string pc, string code, string type)
        {
            List<MasterSalesPriorityHierarchy> pcList = new List<MasterSalesPriorityHierarchy>();
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetPcInfo(com, pc, code, type);
        }
        //Wimal 13/Dec/2018
        public DataTable Get_RevertReconDetl(string _com, string _pc, DateTime _fromDate, DateTime _toDate, string _userID)
        {
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();

            _securityDAL = new SecurityDAL();   //Dilshan 02/11/2018
            if (_securityDAL.Is_Report_DR("RVT_RECON_DTL") == true) _financialDAL.ConnectionOpen_DR();
            return _financialDAL.Get_RevertReconDetl(_com, _pc, _fromDate, _toDate, _userID);
        }

        public List<MST_ACC_TAX> getRequestTaxDetails(string com, string reqno, out string error)
        {
            error = "";
            List<MST_ACC_TAX> itm = new List<MST_ACC_TAX>();
            try
            {
                _financialDAL = new FinancialDAL();
                itm = _financialDAL.getRequestTax(com, reqno);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return itm;
        }
        public List<MST_BUSENTITY_TAX> getCreditorTaxStructure(string creditor, string company, out string error)
        {
            error = "";
            List<MST_BUSENTITY_TAX> tax = new List<MST_BUSENTITY_TAX>();
            try
            {
                _financialDAL = new FinancialDAL();
                tax = _financialDAL.getCreditorTaxStructure(creditor, company);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return tax;
        }
        //Nuwan 2018.12.27
        public Int32 getPurCostAndTax(string purno, string company, out decimal cost, out decimal vat, out decimal nbt, out string error)
        {
            error = "";
            cost = 0;
            vat = 0;
            nbt = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                DataTable result = _financialDAL.getPurCostAndTax(purno, company);
                if (result.Rows.Count > 0)
                {
                    if (result.Rows[0]["COST"] != DBNull.Value)
                    {
                        cost = Convert.ToDecimal(result.Rows[0]["COST"].ToString());

                    }
                    if (result.Rows[0]["VAT"] != DBNull.Value)
                    {
                        vat = Convert.ToDecimal(result.Rows[0]["VAT"].ToString());

                    }
                    if (result.Rows[0]["NBT"] != DBNull.Value)
                    {
                        nbt = Convert.ToDecimal(result.Rows[0]["NBT"].ToString());

                    }
                }
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return 1;
        }
        public List<MST_PAY_REQ_REF> getPayReqPoDet(string reqno, string reqtp, string company, out string error)
        {
            error = "";
            List<MST_PAY_REQ_REF> lst = new List<MST_PAY_REQ_REF>();
            try
            {
                _financialDAL = new FinancialDAL();
                lst = _financialDAL.getPayReqPoDet(reqno, company, reqtp);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return lst;
        }
        public DataTable GetCusdechdrByBond(string com, string blno)
        {
            _financialDAL = new FinancialDAL();
            return _financialDAL.GetCusdechdrByBond(com, blno);
        }

        public Int32 SaveCusdec_comm(ImpCusdecHdr _cusdecHdr, List<ImpCusdecItm> _cusdecItm, List<ImpCusdecCost> _cusdecCost, bool _isUpdate, out string msg, int isres, out string doc, bool _isconncopen, bool _hsopen, InventoryBLL _InventoryBLLtemp = null,
                FinancialDAL _FinancialDALtemp = null, GeneralDAL _GeneralDALtemp = null, InventoryDAL _inventoryDALtemp = null, CustServiceDAL _CustServiceDALtemp = null)
        {
            Int32 _effect = 0;
            Int32 _cusdecSeq = 0;
            string _msg = string.Empty;
            string _doc = "";
            int _costSheetSeq = 0;
            int _reqNo = 0;

            ImportsCostHeader p_costSheetHeader = new ImportsCostHeader();

            List<ImpCusdecItm> p_cusdecItem = new List<ImpCusdecItm>();
            List<ImportsCostItem> p_costSheetItem = new List<ImportsCostItem>();

            List<ImpCusdecItmCost> p_cusdecCostEleItem = new List<ImpCusdecItmCost>();
            List<ImportsCostElementItem> p_costSheetCostEleItem = new List<ImportsCostElementItem>();

            List<ImpCusdecCost> p_cusdecCost = new List<ImpCusdecCost>();
            List<ImportsCostElement> p_costSheetCostEleSum = new List<ImportsCostElement>();

            List<ImpCusdecDutySum> p_cusdecDutySum = new List<ImpCusdecDutySum>();

            InventoryRequest p_inventoryRequest = new InventoryRequest();

            try
            {
                if (_isconncopen == true)
                {
                    invtbll = new InventoryBLL();
                    _financialDAL = new FinancialDAL();
                    _generalDAL = new GeneralDAL();
                    _inventoryDAL = new InventoryDAL();
                    _cusserDal = new CustServiceDAL();
                    _financialDAL.ConnectionOpen();
                    _cusserDal.ConnectionOpen();
                    _generalDAL.ConnectionOpen();
                    _inventoryDAL.ConnectionOpen();
                }
                else
                {
                    invtbll = _InventoryBLLtemp;
                    _financialDAL = _FinancialDALtemp;
                    _generalDAL = _GeneralDALtemp;
                    _inventoryDAL = _inventoryDALtemp;
                    _cusserDal = _CustServiceDALtemp;
                }

                string glbtype = _cusdecHdr.CUH_TP;

                if (_isUpdate == true)
                {
                    ImportsCostHeader _csHdr = _financialDAL.GET_IMP_CST_HDR_BY_DOC(_cusdecHdr.CUH_OTH_NO, null);
                    if (_csHdr != null)
                    {
                        if (_csHdr.Ich_is_grn == 1)
                        {
                            msg = "Can't proceed. Entry already used!";
                            doc = "";
                            _financialDAL.ConnectionClose();
                            return -1;
                        }

                    }
                    if (_cusdecCost == null)
                    {
                        msg = "Can't proceed. Please Load Duty Detais";
                        doc = "";
                        _financialDAL.ConnectionClose();
                        return -1;
                    }

                    ImpCusdecHdr _cusdHdr = _financialDAL.GET_CUSDEC_HEADER_BY_DOC(_cusdecHdr.CUH_COM, _cusdecHdr.CUH_CNTY, _cusdecHdr.CUH_TP, _cusdecHdr.CUH_DOC_NO);
                    if (_cusdHdr != null)
                    {
                        if (_cusdHdr.CUH_TP == "TO" || _cusdHdr.CUH_TP == "LR" || _cusdHdr.CUH_TP == "AIR")
                        {
                            if (_csHdr != null)
                            {
                                if (_csHdr.Ich_actl == 1)
                                {
                                    msg = "Can't update. Costing already completed!";
                                    doc = "";
                                    _financialDAL.ConnectionClose();
                                    return -1;
                                }
                            }
                        }

                        if (_cusdHdr.CUH_STUS == "C")
                        {
                            msg = "Cannot Proceed ! Entry has been already cancelled !";
                            doc = "";
                            _financialDAL.ConnectionClose();
                            return -1;
                        }

                        if (_cusdHdr.CUH_AST_STUS == 1)
                        {
                            msg = "Can't proceed. Entry already reimbursement!";
                            doc = "";
                            _financialDAL.ConnectionClose();
                            return -1;
                        }
                    }

                }

                if (_isconncopen == true)
                {
                    _financialDAL.BeginTransaction();
                    _generalDAL.BeginTransaction();
                    _inventoryDAL.BeginTransaction();
                    _cusserDal.BeginTransaction();
                }
                CusdecTypes _cusdecType = _generalDAL.GetCusdecEntryTypes(_cusdecHdr.CUH_COM).FindAll(y => y.Rcut_tp == _cusdecHdr.CUH_TP)[0];

                if (_isUpdate == false)
                {
                    _cusdecHdr.CUH_SEQ_NO = 0;
                    string _cusdecTypeAuto = _cusdecType.Rcut_tp;
                    if (_cusdecHdr.CUH_SUB_TP != "N/A")
                    {
                        CusdecSubTypes _cusdecSubType = _generalDAL.GetCusdecEntrySubTypes(_cusdecHdr.CUH_COM, _cusdecHdr.CUH_TP, _cusdecHdr.CUH_SUB_TP);
                        _cusdecType.Rcuit_auto_no_char = _cusdecSubType.Rcust_auto_no_char;
                    }
                    MasterAutoNumber _number = _financialDAL.GetAutoNumber(_cusdecTypeAuto, 0, _cusdecType.Rcuit_auto_no_char, "CNTY", _cusdecHdr.CUH_CNTY, null, _cusdecHdr.CUH_DT.Date.Year);
                    _cusdecHdr.CUH_DOC_NO = _cusdecType.Rcuit_auto_no_char + _cusdecHdr.CUH_DT.Date.Year.ToString() + string.Format("{0:00000}", _number.Aut_number);
                    _financialDAL.UpdateAutoNumber(_number);
                }
                string currloc = "";
                string _err;
                string oridoc = "";
                string oridoctp = "";

                #region Tobond, Longroom, Air Freight, Exbond

                if (_cusdecType.Rcuit_grup_id == 1 || _cusdecType.Rcuit_grup_id == 2)
                {
                    _effect = _financialDAL.SaveCusdecHdr(_cusdecHdr, out  _cusdecSeq);

                    if (_cusdecType.Rcuit_grup_id == 2)
                    {
                        if (_isUpdate == false)
                        {
                            p_inventoryRequest.Itr_req_no = _cusdecHdr.CUH_OTH_NO;
                            InventoryRequest reqHdrTemp = _financialDAL.GetInventoryRequestDataByReqNo(p_inventoryRequest);
                            currloc = reqHdrTemp.Itr_loc;
                            p_inventoryRequest.Ird_res_no = "";
                            p_inventoryRequest.Itr_act = 1;
                            p_inventoryRequest.Itr_anal1 = "";
                            p_inventoryRequest.Itr_anal2 = _cusdecHdr.CUH_SUN_REQ_NO;
                            p_inventoryRequest.Itr_bus_code = "N/A";
                            p_inventoryRequest.Itr_com = _cusdecHdr.CUH_COM;
                            p_inventoryRequest.Itr_country_cd = _cusdecHdr.CUH_CNTY;
                            p_inventoryRequest.Itr_cre_by = _cusdecHdr.CUH_CRE_BY;
                            p_inventoryRequest.Itr_cur_code = _cusdecHdr.CUH_CUR_CD;
                            p_inventoryRequest.Itr_direct = 0;
                            p_inventoryRequest.Itr_dt = _cusdecHdr.CUH_DT.Date;
                            p_inventoryRequest.Itr_exg_rate = _cusdecHdr.CUH_EX_RT;
                            p_inventoryRequest.Itr_exp_dt = _cusdecHdr.CUH_DT.Date;
                            p_inventoryRequest.Itr_issue_com = _cusdecHdr.CUH_COM;
                            p_inventoryRequest.Itr_issue_from = reqHdrTemp.Itr_issue_from;
                            p_inventoryRequest.Itr_loc = reqHdrTemp.Itr_loc;
                            p_inventoryRequest.Itr_mod_by = _cusdecHdr.CUH_CRE_BY;
                            p_inventoryRequest.Itr_note = "";
                            p_inventoryRequest.Itr_rec_to = reqHdrTemp.Itr_rec_to;
                            p_inventoryRequest.Itr_ref = _cusdecHdr.CUH_OTH_NO;
                            p_inventoryRequest.Itr_req_no = _cusdecHdr.CUH_DOC_NO;
                            p_inventoryRequest.Itr_seq_no = 0;
                            p_inventoryRequest.Itr_session_id = _cusdecHdr.CUH_CRE_SESSION;
                            p_inventoryRequest.Itr_stus = "A";
                            p_inventoryRequest.Itr_sub_tp = _cusdecHdr.CUH_SUB_TP;
                            p_inventoryRequest.Itr_tp = _cusdecHdr.CUH_TP;
                            p_inventoryRequest.Itr_job_no = _cusdecHdr.CUH_SUN_BOND_NO;

                            oridoc = p_inventoryRequest.Itr_ref;
                            oridoctp = p_inventoryRequest.Itr_tp;
                            _reqNo = _financialDAL.SaveInventoryRequest(p_inventoryRequest);

                            p_costSheetHeader.Ich_seq_no = _financialDAL.Get_BL_Seq();
                            p_costSheetHeader.Ich_com = _cusdecHdr.CUH_COM;
                            p_costSheetHeader.Ich_tp = _cusdecHdr.CUH_TP;
                            p_costSheetHeader.Ich_doc_no = _cusdecHdr.CUH_OTH_NO;
                            p_costSheetHeader.Ich_ref_no = _cusdecHdr.CUH_DOC_NO;
                            p_costSheetHeader.Ich_pre = 1;
                            p_costSheetHeader.Ich_pre_dt = _cusdecHdr.CUH_DT.Date;
                            p_costSheetHeader.Ich_pre_by = _cusdecHdr.CUH_CRE_BY;
                            p_costSheetHeader.Ich_pre_sysdt = DateTime.Now;
                            p_costSheetHeader.Ich_actl = 1;
                            p_costSheetHeader.Ich_actl_dt = _cusdecHdr.CUH_DT.Date;
                            p_costSheetHeader.Ich_actl_by = _cusdecHdr.CUH_CRE_BY;
                            p_costSheetHeader.Ich_actl_sysdt = DateTime.Now;
                            p_costSheetHeader.Ich_finl = 1;
                            p_costSheetHeader.Ich_finl_dt = _cusdecHdr.CUH_DT.Date;
                            p_costSheetHeader.Ich_finl_by = _cusdecHdr.CUH_CRE_BY;
                            p_costSheetHeader.Ich_finl_sysdt = DateTime.Now;
                            p_costSheetHeader.Ich_stus = "A";
                            p_costSheetHeader.Ich_is_grn = 0;
                            p_costSheetHeader.Ich_cur = _cusdecHdr.CUH_CUR_CD;
                            p_costSheetHeader.Ich_anal_1 = "";
                            p_costSheetHeader.Ich_anal_2 = "";
                            p_costSheetHeader.Ich_anal_3 = "";
                            p_costSheetHeader.Ich_anal_4 = "";
                            p_costSheetHeader.Ich_anal_5 = "";
                            p_costSheetHeader.Ich_ex_rt = _cusdecHdr.CUH_EX_RT;
                            _effect = _financialDAL.SAVE_IMP_CST_HDR_NEW(p_costSheetHeader, out _costSheetSeq);
                        }
                        else
                        {
                            if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") _cusdecHdr.CUH_OTH_NO = _cusdecHdr.CUH_OTH_NO;
                            p_costSheetHeader = _financialDAL.GET_IMP_CST_HDR_BY_DOC(_cusdecHdr.CUH_OTH_NO, "");
                            p_costSheetHeader.Ich_ref_no = _cusdecHdr.CUH_DOC_NO.ToString();
                            p_costSheetHeader.Ich_ex_rt = _cusdecHdr.CUH_EX_RT;
                            _effect = _financialDAL.SAVE_IMP_CST_HDR(p_costSheetHeader, out _costSheetSeq);
                        }
                    }
                    else
                    {
                        if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") _cusdecHdr.CUH_OTH_NO = _cusdecHdr.CUH_DOC_NO;
                        p_costSheetHeader = _financialDAL.GET_IMP_CST_HDR_BY_DOC(_cusdecHdr.CUH_OTH_NO, "I");
                        p_costSheetHeader.Ich_ref_no = _cusdecHdr.CUH_DOC_NO.ToString();
                        p_costSheetHeader.Ich_ex_rt = _cusdecHdr.CUH_EX_RT;
                        _effect = _financialDAL.SAVE_IMP_CST_HDR(p_costSheetHeader, out _costSheetSeq);
                    }

                    //decimal _per_compter_val = _cusdecHdr.CUH_COM_CHG / Convert.ToDecimal(_cusdecHdr.CUH_TOT_PKG);
                    //Edit by Chamal 02-Aug-2016
                    decimal _per_compter_val = _cusdecHdr.CUH_COM_CHG / _cusdecItm.Sum(t => t.Cui_qty);

                    _cusdecCost = _cusdecCost.OrderBy(x => x.Cus_line).ToList();

                    #region Cusdec Item
                    foreach (ImpCusdecItm cusdecItm in _cusdecItm)
                    {
                        decimal _tot_act_tax_val = 0;
                        decimal _tot_pre_tax_val = 0;
                        decimal _itemPrice = 0;
                        decimal _totCost = 0;
                        decimal _costEleVal = 0;
                        decimal _costEleValUSD = 0;
                        decimal _cif = 0;
                        decimal _per_item_compter_val = 0;

                        int _itmEleLine = 1;

                        foreach (ImpCusdecCost cusdecCost in _cusdecCost)
                        {
                            #region Item with Cost, Freight, Insurance elements
                            if (cusdecCost.Cus_ele_cd == "COST") _totCost = cusdecCost.Cus_amt;
                            _costEleValUSD = (cusdecItm.Cui_qty * cusdecItm.Cui_unit_rt / _totCost) * cusdecCost.Cus_amt;
                            _itemPrice = _itemPrice + _costEleValUSD;

                            if (_itemPrice > 0) _itemPrice = Math.Round(_itemPrice, 2);
                            _costEleVal = _costEleValUSD * _cusdecHdr.CUH_EX_RT;
                            if (_costEleVal > 0) _costEleVal = Math.Round(_costEleVal, 2);

                            ImpCusdecItmCost oImpCusdecItmCost = new ImpCusdecItmCost();
                            oImpCusdecItmCost.Cuic_anal_1 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_2 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_3 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_4 = string.Empty;
                            oImpCusdecItmCost.Cuic_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImpCusdecItmCost.Cuic_cre_session = _cusdecHdr.CUH_CRE_SESSION;
                            oImpCusdecItmCost.Cuic_doc_no = _cusdecHdr.CUH_DOC_NO;
                            oImpCusdecItmCost.Cuic_ele_mp = 1;
                            oImpCusdecItmCost.Cuic_ele_amt = _costEleVal;
                            oImpCusdecItmCost.Cuic_ele_amt = Math.Round(oImpCusdecItmCost.Cuic_ele_amt, 4);
                            oImpCusdecItmCost.Cuic_ele_amt_claim = 0;
                            oImpCusdecItmCost.Cuic_ele_base = 0;
                            oImpCusdecItmCost.Cuic_ele_rt = 0;
                            oImpCusdecItmCost.Cuic_ele_cat = cusdecCost.Cus_ele_cat;
                            oImpCusdecItmCost.Cuic_ele_tp = cusdecCost.Cus_ele_tp;
                            oImpCusdecItmCost.Cuic_ele_cd = cusdecCost.Cus_ele_cd;
                            oImpCusdecItmCost.Cuic_ele_line = _itmEleLine;
                            oImpCusdecItmCost.Cuic_itm_cd = cusdecItm.Cui_itm_cd;
                            oImpCusdecItmCost.Cuic_itm_line = cusdecItm.Cui_line;
                            oImpCusdecItmCost.Cuic_itm_stus = cusdecItm.Cui_itm_stus;
                            oImpCusdecItmCost.Cuic_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImpCusdecItmCost.Cuic_mod_session = _cusdecHdr.CUH_MOD_SESSION;
                            oImpCusdecItmCost.Cuic_print_order = 0;
                            oImpCusdecItmCost.Cuic_seq_no = _cusdecSeq;
                            oImpCusdecItmCost.Cuic_ele_amt_usd = _costEleValUSD;
                            oImpCusdecItmCost.Cuic_ele_amt_usd = Math.Round(oImpCusdecItmCost.Cuic_ele_amt_usd, 4);

                            p_cusdecCostEleItem.Add(oImpCusdecItmCost);

                            if (oImpCusdecItmCost.Cuic_ele_cat == "TOT")
                            {
                                ImportsCostElementItem oImportsCostElementItem = new ImportsCostElementItem();
                                oImportsCostElementItem.Ice_finl_amnt = 0;
                                oImportsCostElementItem.Ice_finl_rt = 0;
                                oImportsCostElementItem.Ice_actl_amnt = _costEleVal;
                                oImportsCostElementItem.Ice_actl_amnt = Math.Round(oImportsCostElementItem.Ice_actl_amnt, 4);
                                oImportsCostElementItem.Ice_actl_rt = oImportsCostElementItem.Ice_actl_rt / cusdecItm.Cui_qty;
                                oImportsCostElementItem.Ice_actl_rt = Math.Round(oImportsCostElementItem.Ice_actl_rt, 4);
                                oImportsCostElementItem.Ice_pre_amnt = _costEleVal;
                                oImportsCostElementItem.Ice_pre_amnt = Math.Round(oImportsCostElementItem.Ice_pre_amnt, 4);
                                oImportsCostElementItem.Ice_pre_rt = oImportsCostElementItem.Ice_pre_amnt / cusdecItm.Cui_qty;
                                oImportsCostElementItem.Ice_pre_rt = Math.Round(oImportsCostElementItem.Ice_pre_rt, 4);
                                oImportsCostElementItem.Ice_ele_amnt = _costEleVal;
                                oImportsCostElementItem.Ice_ele_amnt = Math.Round(oImportsCostElementItem.Ice_ele_amnt, 4);
                                oImportsCostElementItem.Ice_ele_rt = oImportsCostElementItem.Ice_ele_rt / cusdecItm.Cui_qty;
                                oImportsCostElementItem.Ice_ele_rt = Math.Round(oImportsCostElementItem.Ice_ele_rt, 4);
                                oImportsCostElementItem.Ice_anal_1 = "";
                                oImportsCostElementItem.Ice_anal_2 = "1";
                                oImportsCostElementItem.Ice_anal_3 = cusdecItm.Cui_qty.ToString();
                                oImportsCostElementItem.Ice_anal_4 = "";
                                oImportsCostElementItem.Ice_anal_5 = "";
                                oImportsCostElementItem.Ice_cre_by = _cusdecHdr.CUH_CRE_BY;
                                oImportsCostElementItem.Ice_doc_no = p_costSheetHeader.Ich_doc_no;
                                oImportsCostElementItem.Ice_ele_cat = cusdecCost.Cus_ele_cat;
                                oImportsCostElementItem.Ice_ele_tp = cusdecCost.Cus_ele_tp;
                                oImportsCostElementItem.Ice_ele_cd = cusdecCost.Cus_ele_cd;
                                oImportsCostElementItem.Ice_ele_cd_Desc = "";
                                oImportsCostElementItem.Ice_itm_cd = cusdecItm.Cui_itm_cd;
                                oImportsCostElementItem.Ice_itm_stus = cusdecItm.Cui_itm_stus;
                                oImportsCostElementItem.Ice_line = _itmEleLine;
                                oImportsCostElementItem.Ice_mod_by = _cusdecHdr.CUH_MOD_BY;
                                oImportsCostElementItem.Ice_ref_line = cusdecItm.Cui_line;
                                oImportsCostElementItem.Ice_seq_no = _costSheetSeq;
                                oImportsCostElementItem.Ice_session_id = _cusdecHdr.CUH_CRE_SESSION;
                                oImportsCostElementItem.Ice_stus = 1;
                                p_costSheetCostEleItem.Add(oImportsCostElementItem);
                                _itmEleLine++;
                            }
                            #endregion
                        }
                        _cif = Math.Round(_itemPrice, 2) * _cusdecHdr.CUH_EX_RT;
                        _cif = Math.Round(_cif, 2);

                        if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                        {
                            List<mst_proc_ele> _pr_list = _financialDAL.GetProcDutyByConsignee(_cusdecHdr.CUH_COM, _cusdecHdr.CUH_PROC_CD, _cusdecHdr.CUH_CONSI_CD);
                            if (_pr_list != null)
                            {
                                if (_pr_list.Count == 0)
                                {
                                    _effect = -1;
                                    _msg = "Can't Process!! Please Setup Proc/Code , Consignee, Duties !! ";
                                    _financialDAL.TransactionRollback();
                                    _generalDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    _cusserDal.TransactionRollback();
                                    msg = _msg;
                                    doc = "";
                                    return _effect;
                                }
                            }
                            else
                            {
                                _effect = -1;
                                _msg = "Can't Process!! Please Setup Proc/Code , Consignee, Duties !! ";
                                _financialDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _cusserDal.TransactionRollback();
                                msg = _msg;
                                doc = "";
                                return _effect;
                            }
                        }

                        List<HsCode> _hsDutyValues = GetHSDutyCalculation(_hsopen, _cusdecHdr.CUH_COM, _cusdecHdr.CUH_DT, "C", _cusdecHdr.CUH_CONSI_CD, _cusdecHdr.CUH_PROC_CD, _cusdecHdr.CUH_TP, "ALL", _cusdecHdr.CUH_CNTY, _cusdecType.Rcuit_duty_mp, _cif, cusdecItm.Cui_itm_cd, cusdecItm.Cui_hs_cd, cusdecItm.Cui_qty, cusdecItm.Cui_net_mass, cusdecItm.Cui_def_cnty, out _tot_act_tax_val, out _tot_pre_tax_val);
                        foreach (HsCode hsDutyValues in _hsDutyValues)
                        {
                            #region Item with Duty elements
                            ImpCusdecItmCost oImpCusdecItmCost = new ImpCusdecItmCost();
                            oImpCusdecItmCost.Cuic_anal_1 = "DUTY";
                            oImpCusdecItmCost.Cuic_anal_2 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_3 = string.Empty;
                            oImpCusdecItmCost.Cuic_anal_4 = string.Empty;
                            oImpCusdecItmCost.Cuic_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImpCusdecItmCost.Cuic_cre_session = _cusdecHdr.CUH_CRE_SESSION;
                            oImpCusdecItmCost.Cuic_doc_no = _cusdecHdr.CUH_DOC_NO;
                            oImpCusdecItmCost.Cuic_ele_mp = hsDutyValues.Mhc_mp;
                            oImpCusdecItmCost.Cuic_ele_amt = hsDutyValues.Tax_amount;
                            oImpCusdecItmCost.Cuic_ele_amt_claim = hsDutyValues.Tax_claim;
                            oImpCusdecItmCost.Cuic_ele_base = hsDutyValues.Tax_base;
                            oImpCusdecItmCost.Cuic_ele_rt = hsDutyValues.Tax_rate;
                            oImpCusdecItmCost.Cuic_ele_cat = hsDutyValues.Mhc_cost_cat;
                            oImpCusdecItmCost.Cuic_ele_tp = hsDutyValues.Mhc_cost_tp;
                            oImpCusdecItmCost.Cuic_ele_cd = hsDutyValues.Mhc_cost_ele;
                            oImpCusdecItmCost.Cuic_ele_line = _itmEleLine;
                            oImpCusdecItmCost.Cuic_itm_cd = cusdecItm.Cui_itm_cd;
                            oImpCusdecItmCost.Cuic_itm_line = cusdecItm.Cui_line;
                            oImpCusdecItmCost.Cuic_itm_stus = cusdecItm.Cui_itm_stus;
                            oImpCusdecItmCost.Cuic_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImpCusdecItmCost.Cuic_mod_session = _cusdecHdr.CUH_MOD_SESSION;
                            oImpCusdecItmCost.Cuic_print_order = 0;
                            oImpCusdecItmCost.Cuic_seq_no = _cusdecSeq;
                            p_cusdecCostEleItem.Add(oImpCusdecItmCost);

                            ImportsCostElementItem oImportsCostElementItem = new ImportsCostElementItem();
                            //if (hsDutyValues.Mhc_mp == 1)
                            //{
                            oImportsCostElementItem.Ice_finl_amnt = hsDutyValues.Tax_amount - hsDutyValues.Tax_claim;
                            //oImportsCostElementItem.Ice_finl_rt = hsDutyValues.Tax_rate;
                            oImportsCostElementItem.Ice_finl_rt = oImportsCostElementItem.Ice_finl_amnt / cusdecItm.Cui_qty;
                            oImportsCostElementItem.Ice_actl_amnt = hsDutyValues.Tax_amount - hsDutyValues.Tax_claim;
                            //oImportsCostElementItem.Ice_actl_rt = hsDutyValues.Tax_rate;
                            oImportsCostElementItem.Ice_actl_rt = oImportsCostElementItem.Ice_actl_amnt / cusdecItm.Cui_qty;

                            oImportsCostElementItem.Ice_finl_amnt = Math.Round(oImportsCostElementItem.Ice_finl_amnt, 4);
                            oImportsCostElementItem.Ice_finl_rt = Math.Round(oImportsCostElementItem.Ice_finl_rt, 4);
                            oImportsCostElementItem.Ice_actl_amnt = Math.Round(oImportsCostElementItem.Ice_actl_amnt, 4);
                            oImportsCostElementItem.Ice_actl_rt = Math.Round(oImportsCostElementItem.Ice_actl_rt, 4);
                            //}
                            oImportsCostElementItem.Ice_pre_amnt = hsDutyValues.Tax_amount - hsDutyValues.Tax_claim;
                            //oImportsCostElementItem.Ice_pre_rt = hsDutyValues.Tax_rate;
                            oImportsCostElementItem.Ice_pre_rt = oImportsCostElementItem.Ice_pre_amnt / cusdecItm.Cui_qty;
                            oImportsCostElementItem.Ice_ele_amnt = hsDutyValues.Tax_amount - hsDutyValues.Tax_claim;
                            oImportsCostElementItem.Ice_ele_rt = hsDutyValues.Tax_rate;

                            oImportsCostElementItem.Ice_pre_amnt = Math.Round(oImportsCostElementItem.Ice_pre_amnt, 4);
                            oImportsCostElementItem.Ice_pre_rt = Math.Round(oImportsCostElementItem.Ice_pre_rt, 4);
                            oImportsCostElementItem.Ice_ele_amnt = Math.Round(oImportsCostElementItem.Ice_ele_amnt, 4);
                            oImportsCostElementItem.Ice_ele_rt = Math.Round(oImportsCostElementItem.Ice_ele_rt, 4);
                            oImportsCostElementItem.Ice_anal_1 = "DUTY";
                            if (hsDutyValues.Mhc_mp == 1)
                            { oImportsCostElementItem.Ice_anal_2 = "1"; }
                            else
                            { oImportsCostElementItem.Ice_anal_2 = "0"; }
                            oImportsCostElementItem.Ice_anal_3 = cusdecItm.Cui_qty.ToString();
                            oImportsCostElementItem.Ice_anal_4 = "";
                            oImportsCostElementItem.Ice_anal_5 = "";
                            oImportsCostElementItem.Ice_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImportsCostElementItem.Ice_doc_no = p_costSheetHeader.Ich_doc_no;
                            oImportsCostElementItem.Ice_ele_cat = hsDutyValues.Mhc_cost_cat;
                            oImportsCostElementItem.Ice_ele_tp = hsDutyValues.Mhc_cost_tp;
                            oImportsCostElementItem.Ice_ele_cd = hsDutyValues.Mhc_cost_ele;
                            oImportsCostElementItem.Ice_ele_cd_Desc = "";
                            oImportsCostElementItem.Ice_itm_cd = cusdecItm.Cui_itm_cd;
                            oImportsCostElementItem.Ice_itm_stus = cusdecItm.Cui_itm_stus;
                            oImportsCostElementItem.Ice_line = _itmEleLine;
                            oImportsCostElementItem.Ice_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImportsCostElementItem.Ice_ref_line = cusdecItm.Cui_line;
                            oImportsCostElementItem.Ice_seq_no = _costSheetSeq;
                            oImportsCostElementItem.Ice_session_id = _cusdecHdr.CUH_CRE_SESSION;
                            oImportsCostElementItem.Ice_stus = 1;
                            p_costSheetCostEleItem.Add(oImportsCostElementItem);
                            _itmEleLine++;
                            #endregion
                        }

                        #region Add Computer Charge for Cost Element Item
                        if (_per_compter_val > 0)
                        {
                            _per_item_compter_val = Math.Round(_per_compter_val * cusdecItm.Cui_qty, 4);
                            ImpCusdecItmCost oImpCusdecItmCost1 = new ImpCusdecItmCost();
                            oImpCusdecItmCost1.Cuic_anal_1 = string.Empty;
                            oImpCusdecItmCost1.Cuic_anal_2 = string.Empty;
                            oImpCusdecItmCost1.Cuic_anal_3 = string.Empty;
                            oImpCusdecItmCost1.Cuic_anal_4 = string.Empty;
                            oImpCusdecItmCost1.Cuic_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImpCusdecItmCost1.Cuic_cre_session = _cusdecHdr.CUH_CRE_SESSION;
                            oImpCusdecItmCost1.Cuic_doc_no = _cusdecHdr.CUH_DOC_NO;
                            oImpCusdecItmCost1.Cuic_ele_mp = 1;
                            oImpCusdecItmCost1.Cuic_ele_amt = _per_item_compter_val;
                            oImpCusdecItmCost1.Cuic_ele_amt_claim = 0;
                            oImpCusdecItmCost1.Cuic_ele_base = 1;
                            oImpCusdecItmCost1.Cuic_ele_rt = 1;
                            oImpCusdecItmCost1.Cuic_ele_cat = "OTH";
                            oImpCusdecItmCost1.Cuic_ele_tp = "OTH";
                            oImpCusdecItmCost1.Cuic_ele_cd = "CE&S";
                            oImpCusdecItmCost1.Cuic_ele_line = _itmEleLine;
                            oImpCusdecItmCost1.Cuic_itm_cd = cusdecItm.Cui_itm_cd;
                            oImpCusdecItmCost1.Cuic_itm_line = cusdecItm.Cui_line;
                            oImpCusdecItmCost1.Cuic_itm_stus = cusdecItm.Cui_itm_stus;
                            oImpCusdecItmCost1.Cuic_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImpCusdecItmCost1.Cuic_mod_session = _cusdecHdr.CUH_MOD_SESSION;
                            oImpCusdecItmCost1.Cuic_print_order = 0;
                            oImpCusdecItmCost1.Cuic_seq_no = _cusdecSeq;
                            p_cusdecCostEleItem.Add(oImpCusdecItmCost1);

                            ImportsCostElementItem oImportsCostElementItem1 = new ImportsCostElementItem();
                            oImportsCostElementItem1.Ice_finl_amnt = 0;
                            oImportsCostElementItem1.Ice_finl_rt = 0;
                            oImportsCostElementItem1.Ice_actl_amnt = _per_item_compter_val;
                            oImportsCostElementItem1.Ice_actl_rt = _per_item_compter_val / cusdecItm.Cui_qty; ;
                            oImportsCostElementItem1.Ice_pre_amnt = _per_item_compter_val;
                            oImportsCostElementItem1.Ice_pre_rt = _per_item_compter_val / cusdecItm.Cui_qty;
                            oImportsCostElementItem1.Ice_ele_amnt = _per_item_compter_val;
                            oImportsCostElementItem1.Ice_ele_rt = 1;
                            oImportsCostElementItem1.Ice_anal_1 = "";
                            oImportsCostElementItem1.Ice_anal_2 = "1";
                            oImportsCostElementItem1.Ice_anal_3 = "";
                            oImportsCostElementItem1.Ice_anal_4 = "";
                            oImportsCostElementItem1.Ice_anal_5 = "";
                            oImportsCostElementItem1.Ice_cre_by = _cusdecHdr.CUH_CRE_BY;
                            oImportsCostElementItem1.Ice_doc_no = p_costSheetHeader.Ich_doc_no;
                            oImportsCostElementItem1.Ice_ele_cat = "OTH";
                            oImportsCostElementItem1.Ice_ele_tp = "OTH";
                            oImportsCostElementItem1.Ice_ele_cd = "CE&S";
                            oImportsCostElementItem1.Ice_ele_cd_Desc = "";
                            oImportsCostElementItem1.Ice_itm_cd = cusdecItm.Cui_itm_cd;
                            oImportsCostElementItem1.Ice_itm_stus = cusdecItm.Cui_itm_stus;
                            oImportsCostElementItem1.Ice_line = _itmEleLine;
                            oImportsCostElementItem1.Ice_mod_by = _cusdecHdr.CUH_MOD_BY;
                            oImportsCostElementItem1.Ice_ref_line = cusdecItm.Cui_line;
                            oImportsCostElementItem1.Ice_seq_no = _costSheetSeq;
                            oImportsCostElementItem1.Ice_session_id = _cusdecHdr.CUH_CRE_SESSION;
                            oImportsCostElementItem1.Ice_stus = 1;
                            p_costSheetCostEleItem.Add(oImportsCostElementItem1);
                            _itmEleLine++;
                        }
                        #endregion


                        decimal _unitpriceRs = _cif / cusdecItm.Cui_qty;
                        decimal _unitpricePreRs = (_cif + _per_item_compter_val + _tot_pre_tax_val) / cusdecItm.Cui_qty;
                        decimal _unitpriceActualRs = (_cif + _per_item_compter_val + _tot_act_tax_val) / cusdecItm.Cui_qty;

                        if (_cusdecType.Rcuit_grup_id == 2)
                        {
                            ImportsCostItem _siCostItems = null;
                            if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                            {
                                _siCostItems = _financialDAL.GET_IMP_CST_ITM_BY_SI_ITEM(cusdecItm.Cui_anal_1, cusdecItm.Cui_oth_doc_line);

                            }
                            else
                            {
                                _siCostItems = _financialDAL.GET_IMP_CST_ITM_BY_SI_ITEM(_cusdecHdr.CUH_SUN_REQ_NO, cusdecItm.Cui_line);
                            }
                            _unitpriceActualRs = _siCostItems.Ici_actl_rt + ((_cusdecHdr.CUH_COM_CHG / cusdecItm.Cui_qty) + (_tot_act_tax_val / cusdecItm.Cui_qty));
                        }
                        //get to bond line
                        if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                        {

                            DataTable tobondline = _financialDAL.GetBOIlineDT(cusdecItm.Cui_oth_doc_no, cusdecItm.Cui_oth_doc_line);
                            if (Convert.ToInt32(tobondline.Rows[0][0].ToString()) > 0)
                            {
                                cusdecItm.Cui_pi_line = Convert.ToInt32(tobondline.Rows[0][0].ToString());
                            }
                            else
                            {
                                _effect = -1;
                                _msg = "Can't Process!! (To Bond Oth Line No 0) ";
                                _financialDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _cusserDal.TransactionRollback();
                                msg = _msg;
                                doc = "";
                                return _effect;
                            }

                        }
                        if (_unitpriceRs > 0) _unitpriceRs = Math.Round(_unitpriceRs, 4);
                        if (_unitpricePreRs > 0) _unitpricePreRs = Math.Round(_unitpricePreRs, 4);
                        if (_unitpriceActualRs > 0) _unitpriceActualRs = Math.Round(_unitpriceActualRs, 4);

                        #region Create Cost Sheet Item
                        ImportsCostItem oImportsCostItem = new ImportsCostItem();
                        oImportsCostItem.Ici_actl_amt = _unitpriceActualRs * cusdecItm.Cui_qty;
                        oImportsCostItem.Ici_actl_amt = Math.Round(oImportsCostItem.Ici_actl_amt, 4);
                        oImportsCostItem.Ici_actl_rt = _unitpriceActualRs;
                        oImportsCostItem.Ici_actl_rt = Math.Round(oImportsCostItem.Ici_actl_rt, 4);
                        oImportsCostItem.Ici_anal_1 = "";
                        oImportsCostItem.Ici_anal_2 = "";
                        oImportsCostItem.Ici_anal_3 = "";
                        oImportsCostItem.Ici_anal_4 = "";
                        oImportsCostItem.Ici_anal_5 = "";
                        oImportsCostItem.Ici_base_line = 0;
                        oImportsCostItem.Ici_cre_by = _cusdecHdr.CUH_CRE_BY;
                        oImportsCostItem.Ici_cre_dt = DateTime.Now.Date;
                        oImportsCostItem.Ici_doc_no = p_costSheetHeader.Ich_doc_no;
                        oImportsCostItem.Ici_f_line = 0;
                        oImportsCostItem.Ici_finl_amt = 0;
                        oImportsCostItem.Ici_finl_rt = 0;
                        oImportsCostItem.Ici_itm_cd = cusdecItm.Cui_itm_cd;
                        oImportsCostItem.Ici_itm_stus = cusdecItm.Cui_itm_stus;
                        oImportsCostItem.Ici_line = cusdecItm.Cui_line;
                        oImportsCostItem.Ici_mod_by = _cusdecHdr.CUH_MOD_BY;
                        oImportsCostItem.Ici_mod_dt = DateTime.Now.Date;
                        oImportsCostItem.Ici_pre_amt = _unitpricePreRs * cusdecItm.Cui_qty;
                        oImportsCostItem.Ici_pre_rt = _unitpricePreRs;
                        oImportsCostItem.Ici_qty = cusdecItm.Cui_qty;
                        oImportsCostItem.Ici_ref_line = 0;
                        oImportsCostItem.Ici_seq_no = _costSheetSeq;
                        oImportsCostItem.Ici_session_id = _cusdecHdr.CUH_CRE_SESSION;
                        oImportsCostItem.Ici_stus = 1;
                        oImportsCostItem.Ici_unit_amt = _unitpriceRs * cusdecItm.Cui_qty;
                        oImportsCostItem.Ici_unit_amt = Math.Round(oImportsCostItem.Ici_unit_amt, 4);
                        oImportsCostItem.Ici_unit_rt = _unitpriceRs;
                        oImportsCostItem.Ici_unit_rt = Math.Round(oImportsCostItem.Ici_unit_rt, 4);
                        p_costSheetItem.Add(oImportsCostItem);
                        #endregion
                        #region Create Cusdec Item other columns
                        cusdecItm.Cui_seq_no = _cusdecSeq;
                        cusdecItm.Cui_doc_no = _cusdecHdr.CUH_DOC_NO;
                        cusdecItm.Cui_cre_by = _cusdecHdr.CUH_CRE_BY;
                        cusdecItm.Cui_cre_session = _cusdecHdr.CUH_CRE_SESSION;
                        cusdecItm.Cui_mod_by = _cusdecHdr.CUH_MOD_BY;
                        cusdecItm.Cui_mod_session = _cusdecHdr.CUH_MOD_SESSION;
                        cusdecItm.Cui_orgin_cnty = _cusdecHdr.CUH_CNTY_OF_ORIGIN;
                        #endregion
                        cusdecItm.Cui_bal_qty1 = cusdecItm.Cui_qty; //Add by Chamal 19-Aug-2016
                        //SUBODANA 2016-10-20
                        if ((_cusdecHdr.CUH_TP == "EX" | _cusdecHdr.CUH_TP == "RE" | _cusdecHdr.CUH_TP == "BOI" | _cusdecHdr.CUH_TP == "EXP") && _isUpdate == false)
                        {
                            Int32 CUSDECLINE = 0;
                            if (_cusdecHdr.CUH_TP == "EX" | _cusdecHdr.CUH_TP == "RE")
                            {
                                cusdecItm.Cui_oth_doc_no = _cusdecHdr.CUH_SUN_BOND_NO.ToString();
                                CUSDECLINE = cusdecItm.Cui_line;
                            }
                            else if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                            {
                                CUSDECLINE = cusdecItm.Cui_oth_doc_line;
                            }
                            //CHECK QTY BALANCE 2016-11-09

                            //TOBOND QTY

                            //List<TobondItemQty> Tobondqty = _financialDAL.GetTobondQty(cusdecItm.Cui_oth_doc_no, CUSDECLINE);
                            List<TobondItemQty> Tobondqty = _inventoryDAL.GetTobondQty_new(cusdecItm.Cui_oth_doc_no, CUSDECLINE);
                            decimal tobontqty = Tobondqty.Sum(a => a.Tobond_Qty);
                            //TOBOND BASE ALL ENTRY SUM

                            //List<TobondItemQty> EntryQty = _financialDAL.GetEntryQty(cusdecItm.Cui_oth_doc_no, CUSDECLINE, _cusdecHdr.CUH_COM);
                            List<TobondItemQty> EntryQty = _inventoryDAL.GetEntryQty_new(cusdecItm.Cui_oth_doc_no, CUSDECLINE, _cusdecHdr.CUH_COM);
                            
                            decimal entryqty = EntryQty.Sum(a => a.Entry_Qty);
                            if (tobontqty < entryqty + cusdecItm.Cui_qty)
                            {
                                _effect = -1;
                                _msg = "Please Check " + "Tobond No :" + cusdecItm.Cui_oth_doc_no + " Item Code :" + cusdecItm.Cui_itm_cd;
                                _financialDAL.TransactionRollback();
                                _generalDAL.TransactionRollback();
                                _inventoryDAL.TransactionRollback();
                                _cusserDal.TransactionRollback();
                                msg = _msg;
                                doc = "";
                                return _effect;
                            }
                        }
                        _financialDAL.SaveCusdecItem(cusdecItm);
                        if ((_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") && _isUpdate == false)
                        {
                            _effect = _financialDAL.UpdateToBondBalQty(cusdecItm.Cui_oth_doc_no.ToString(), cusdecItm.Cui_oth_doc_line, Convert.ToInt32(cusdecItm.Cui_qty));

                        }
                        else if ((_cusdecHdr.CUH_TP == "EX" || _cusdecHdr.CUH_TP == "RE") && _isUpdate == false)
                        {
                            _effect = _financialDAL.UpdateToBondBalQty(_cusdecHdr.CUH_SUN_BOND_NO.ToString(), cusdecItm.Cui_line, Convert.ToInt32(cusdecItm.Cui_qty));
                        }
                        _financialDAL.UPDATE_COST_SHEET_ITEM(oImportsCostItem);
                        if (_cusdecType.Rcuit_grup_id == 2)
                        {
                            InventoryRequestItem _inventoryRequestItem = new InventoryRequestItem();
                            MasterItem _mstItem = new MasterItem();
                            _mstItem.Mi_cd = cusdecItm.Cui_itm_cd;
                            _inventoryRequestItem.MasterItem = _mstItem;
                            _inventoryRequestItem.Itri_advan_qty = 0;
                            _inventoryRequestItem.Itri_base_req_line = 0;
                            _inventoryRequestItem.Itri_base_req_no = "";
                            _inventoryRequestItem.Itri_batchno = "";
                            _inventoryRequestItem.Itri_buffer = 0;
                            _inventoryRequestItem.Itri_cncl_qty = 0;
                            _inventoryRequestItem.Itri_com = _cusdecHdr.CUH_COM;
                            _inventoryRequestItem.Itri_seq_no = _reqNo;
                            _inventoryRequestItem.Itri_line_no = cusdecItm.Cui_line;
                            _inventoryRequestItem.Itri_itm_cd = cusdecItm.Cui_itm_cd;
                            _inventoryRequestItem.Itri_itm_stus = cusdecItm.Cui_itm_stus;
                            _inventoryRequestItem.Itri_qty = cusdecItm.Cui_qty;
                            _inventoryRequestItem.Itri_bqty = cusdecItm.Cui_qty;
                            _inventoryRequestItem.Itri_unit_price = 0;
                            _inventoryRequestItem.Itri_app_qty = cusdecItm.Cui_qty;
                            _inventoryRequestItem.Itri_bqty = cusdecItm.Cui_qty;
                            _inventoryRequestItem.Itri_job_no = _cusdecHdr.CUH_SUN_BOND_NO;
                            _inventoryRequestItem.Itri_job_line = cusdecItm.Cui_line;
                            _inventoryRequestItem.Mi_app_itm_cond = cusdecItm.itri_itm_cond;
                            if (cusdecItm.itri_itm_cond)
                            {
                                _inventoryRequestItem.ITRI_ITM_COND = "1";
                            }

                            if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                            {
                                _inventoryRequestItem.Itri_job_no = cusdecItm.Cui_oth_doc_no;
                                _inventoryRequestItem.Itri_job_line = cusdecItm.Cui_oth_doc_line;
                            }

                            _inventoryRequestItem.MasterItem.Mi_cd = cusdecItm.Cui_itm_cd;
                            _inventoryRequestItem.Itri_res_no = cusdecItm.Cui_anal_5.ToString();
                            if (!string.IsNullOrEmpty(cusdecItm.Cui_anal_3) && _cusdecHdr.CUH_TP != "BOI" && _cusdecHdr.CUH_TP != "EXP")
                            {
                                _inventoryRequestItem.Itri_res_line = Convert.ToInt32(cusdecItm.Cui_anal_3.ToString());
                            }
                            _inventoryRequestItem.Itri_res_qty = cusdecItm.Cui_bal_qty3;
                            if ((_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") && (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no) && _inventoryRequestItem.Itri_res_no != "N/A"))
                            {
                                _inventoryRequestItem.Itri_res_qty = cusdecItm.Cui_qty;
                            }
                            _financialDAL.SaveInventoryRequestItem(_inventoryRequestItem);

                            //subodana pass reslog data(Lakshan Common Function)
                            if (isres == 1 && (!string.IsNullOrEmpty(_inventoryRequestItem.Itri_res_no) && _inventoryRequestItem.Itri_res_no != "N/A"))
                            {
                                INR_RES_LOG _resLog = new INR_RES_LOG();
                                _resLog.IRL_RES_NO = _inventoryRequestItem.Itri_res_no;
                                _resLog.IRL_CURT_DOC_NO = oridoc;
                                if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                                {
                                    _resLog.IRL_CURT_DOC_NO = cusdecItm.Cui_anal_2;
                                    _resLog.IRL_RES_NO = cusdecItm.Cui_anal_5;
                                }
                                _resLog.IRL_CURT_DOC_TP = "CUSA";
                                List<INR_RES_LOG> LODDATA = _financialDAL.GET_INR_RES_LOG_DATA_NEW(_resLog);
                                if (LODDATA.Count > 0)
                                {
                                    if ((_cusdecHdr.CUH_TP == "EX" || _cusdecHdr.CUH_TP == "RE" || _cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP") && _inventoryRequestItem.Itri_res_no != "" && _inventoryRequestItem.Itri_res_no != "N/A" && _isUpdate == false)
                                    {
                                        string ORIGLOC = LODDATA.First().IRL_ORIG_LOC;
                                        currloc = LODDATA.First().IRL_CURT_LOC;
                                        INR_RES_LOG _obj = new INR_RES_LOG();
                                        _obj.IRL_RES_NO = _inventoryRequestItem.Itri_res_no;
                                        if (_cusdecHdr.CUH_TP == "BOI" || _cusdecHdr.CUH_TP == "EXP")
                                        {
                                            _obj.IRL_RES_LINE = Convert.ToInt32(cusdecItm.Cui_oth_doc_line.ToString());
                                            _obj.IRL_LINE = Convert.ToInt32(cusdecItm.Cui_oth_doc_line.ToString());
                                        }
                                        else
                                        {
                                            _obj.IRL_RES_LINE = Convert.ToInt32(cusdecItm.Cui_anal_3.ToString());
                                            _obj.IRL_LINE = Convert.ToInt32(cusdecItm.Cui_anal_3.ToString());
                                        }

                                        _obj.IRL_ITM_CD = _inventoryRequestItem.Itri_itm_cd;
                                        _obj.IRL_ITM_STUS = _inventoryRequestItem.Itri_itm_stus;
                                        _obj.IRL_RES_QTY = _inventoryRequestItem.Itri_res_qty;
                                        _obj.IRL_RES_BQTY = _inventoryRequestItem.Itri_res_qty;
                                        _obj.IRL_ORIG_DOC_TP = "CUSA";
                                        _obj.IRL_ORIG_DOC_NO = cusdecItm.Cui_anal_2;
                                        _obj.IRL_ORIG_LOC = ORIGLOC;
                                        _obj.IRL_CURT_DOC_TP = _cusdecHdr.CUH_TP;
                                        _obj.IRL_CURT_DOC_NO = _cusdecHdr.CUH_DOC_NO;
                                        _obj.IRL_CURT_DOC_DT = _cusdecHdr.CUH_DT;
                                        _obj.IRL_CURT_COM = _cusdecHdr.CUH_COM;
                                        _obj.IRL_CURT_LOC = currloc;
                                        _obj.IRL_ACT = 1;
                                        _obj.IRL_CRE_BY = _cusdecHdr.CUH_CRE_BY;
                                        _obj.IRL_CRE_DT = _cusdecHdr.CUH_CRE_DT;
                                        _obj.IRL_MOD_DT = _cusdecHdr.CUH_MOD_DT;
                                        _obj.IRL_CRE_SESSION = _cusdecHdr.CUH_CRE_SESSION;
                                        _obj.IRL_MOD_SESSION = _cusdecHdr.CUH_CRE_SESSION;
                                        _obj.IRL_RES_WP = 1;
                                        if (_inventoryDAL != null)
                                        {
                                            int effectnew = ReservationLogDataUpdateCancel(_obj, 0, _financialDAL, out _err);
                                            if (effectnew < 1)
                                            {
                                                _effect = -1;
                                                _msg = _err;
                                                _financialDAL.TransactionRollback();
                                                _generalDAL.TransactionRollback();
                                                _inventoryDAL.TransactionRollback();
                                                _cusserDal.TransactionRollback();
                                                msg = "Reservation Data Not Updated...";
                                                doc = "";
                                                return _effect;
                                            }
                                        }

                                    }

                                }
                                else
                                {
                                    _effect = -1;
                                    //_msg = _err;
                                    _financialDAL.TransactionRollback();
                                    _generalDAL.TransactionRollback();
                                    _inventoryDAL.TransactionRollback();
                                    _cusserDal.TransactionRollback();
                                    msg = "Reservation Data Not Avalable...";
                                    doc = "";
                                    return _effect;
                                }
                            }


                        }

                    }
                    #endregion

                    #region Cusdec Cost / Cost Sheet Cost  Process
                    int _cusdecCostLine = 0;
                    foreach (ImpCusdecCost cusdecCost in _cusdecCost)
                    {
                        _cusdecCostLine = _cusdecCostLine + 1;
                        ImpCusdecCost oCusdecCost = new ImpCusdecCost();
                        oCusdecCost.Cuc_seq_no = _cusdecSeq;
                        oCusdecCost.Cus_act = 1;
                        oCusdecCost.Cus_amt = cusdecCost.Cus_amt;
                        oCusdecCost.Cus_amt_com = cusdecCost.Cus_amt * _cusdecHdr.CUH_EX_RT;
                        oCusdecCost.Cus_cre_by = _cusdecHdr.CUH_CRE_BY;
                        oCusdecCost.Cus_cre_dt = DateTime.Now.Date;
                        oCusdecCost.Cus_doc_no = _cusdecHdr.CUH_DOC_NO;
                        oCusdecCost.Cus_ele_cat = cusdecCost.Cus_ele_cat;
                        oCusdecCost.Cus_ele_cd = cusdecCost.Cus_ele_cd;
                        oCusdecCost.Cus_ele_cd_name = "";
                        oCusdecCost.Cus_ele_tp = cusdecCost.Cus_ele_tp;
                        oCusdecCost.Cus_line = _cusdecCostLine;
                        p_cusdecCost.Add(oCusdecCost);
                    }
                    var _resultCusdecCost = p_cusdecCostEleItem.GroupBy(x => new { x.Cuic_ele_cat, x.Cuic_ele_tp, x.Cuic_ele_cd, x.Cuic_ele_mp, x.Cuic_anal_1 }).Select(g => new { g.Key.Cuic_ele_cat, g.Key.Cuic_ele_tp, g.Key.Cuic_ele_cd, g.Key.Cuic_ele_mp, g.Key.Cuic_anal_1, amt = g.Sum(p => p.Cuic_ele_amt - p.Cuic_ele_amt_claim) }).Where(a => a.Cuic_ele_mp == 1 && a.Cuic_anal_1 == "DUTY");
                    foreach (var resultCusdecCost in _resultCusdecCost)
                    {
                        _cusdecCostLine = _cusdecCostLine + 1;
                        ImpCusdecCost oCusdecCost = new ImpCusdecCost();
                        oCusdecCost.Cuc_seq_no = _cusdecSeq;
                        oCusdecCost.Cus_act = 1;
                        oCusdecCost.Cus_amt = 0;
                        oCusdecCost.Cus_amt_com = resultCusdecCost.amt;
                        oCusdecCost.Cus_cre_by = _cusdecHdr.CUH_CRE_BY;
                        oCusdecCost.Cus_cre_dt = DateTime.Now.Date;
                        oCusdecCost.Cus_doc_no = _cusdecHdr.CUH_DOC_NO;
                        oCusdecCost.Cus_ele_cat = resultCusdecCost.Cuic_ele_cat;
                        oCusdecCost.Cus_ele_cd = resultCusdecCost.Cuic_ele_cd;
                        oCusdecCost.Cus_ele_cd_name = "";
                        oCusdecCost.Cus_ele_tp = resultCusdecCost.Cuic_ele_tp;
                        oCusdecCost.Cus_line = _cusdecCostLine;
                        p_cusdecCost.Add(oCusdecCost);
                    }
                    _cusdecCostLine = 0;
                    var _resultCostSheetCost = p_costSheetCostEleItem.GroupBy(x => new { x.Ice_ele_cat, x.Ice_ele_tp, x.Ice_ele_cd }).Select(g => new { g.Key.Ice_ele_cat, g.Key.Ice_ele_tp, g.Key.Ice_ele_cd, eleAmt = g.Sum(p => p.Ice_ele_amnt), preAmt = g.Sum(p => p.Ice_pre_amnt), actAmt = g.Sum(p => p.Ice_actl_amnt), finlAmt = g.Sum(p => p.Ice_finl_amnt) });
                    foreach (var resultCostSheetCost in _resultCostSheetCost)
                    {
                        _cusdecCostLine = _cusdecCostLine + 1;
                        ImportsCostElement oCostElement = new ImportsCostElement();
                        oCostElement.Icet_actl_rt = resultCostSheetCost.actAmt;
                        oCostElement.Icet_actl_rt = Math.Round(oCostElement.Icet_actl_rt, 4);
                        oCostElement.Icet_anal_1 = "";
                        oCostElement.Icet_anal_2 = "";
                        oCostElement.Icet_anal_3 = "";
                        oCostElement.Icet_anal_4 = "";
                        oCostElement.Icet_anal_5 = "";
                        oCostElement.Icet_cre_by = _cusdecHdr.CUH_CRE_BY;
                        oCostElement.Icet_cre_dt = DateTime.Now.Date;
                        oCostElement.Icet_doc_no = p_costSheetHeader.Ich_doc_no.Trim();
                        oCostElement.Icet_ele_cat = resultCostSheetCost.Ice_ele_cat;
                        oCostElement.Icet_ele_cd = resultCostSheetCost.Ice_ele_cd;
                        oCostElement.Icet_ele_cd_desc = "";
                        oCostElement.Icet_ele_rt = resultCostSheetCost.eleAmt;
                        oCostElement.Icet_ele_rt = Math.Round(oCostElement.Icet_ele_rt, 4);
                        oCostElement.Icet_ele_tp = resultCostSheetCost.Ice_ele_tp;
                        oCostElement.Icet_finl_rt = resultCostSheetCost.finlAmt;
                        oCostElement.Icet_finl_rt = Math.Round(oCostElement.Icet_finl_rt, 4);
                        oCostElement.Icet_line = _cusdecCostLine;
                        oCostElement.Icet_mod_by = _cusdecHdr.CUH_MOD_BY;
                        oCostElement.Icet_mod_dt = _cusdecHdr.CUH_MOD_DT.Date;
                        oCostElement.Icet_pre_rt = resultCostSheetCost.preAmt;
                        oCostElement.Icet_pre_rt = Math.Round(oCostElement.Icet_pre_rt, 4);
                        oCostElement.Icet_seq_no = _costSheetSeq;
                        oCostElement.Icet_session_id = _cusdecHdr.CUH_CRE_SESSION;
                        oCostElement.Icet_stus = 1;
                        p_costSheetCostEleSum.Add(oCostElement);
                    }
                    #endregion

                    #region Cusdec Duty Total Process
                    var _resultCusdecDutyTot = p_cusdecCostEleItem.GroupBy(x => new { x.Cuic_ele_cat, x.Cuic_ele_tp, x.Cuic_ele_cd, x.Cuic_anal_1, x.Cuic_ele_mp }).Select(g => new { g.Key.Cuic_ele_cat, g.Key.Cuic_ele_tp, g.Key.Cuic_ele_cd, g.Key.Cuic_anal_1, g.Key.Cuic_ele_mp, amtELE = g.Sum(p => p.Cuic_ele_amt), amtUNClaim = g.Sum(p => p.Cuic_ele_amt) - g.Sum(p => p.Cuic_ele_amt_claim), amtClaim = g.Sum(p => p.Cuic_ele_amt_claim) }).Where(a => a.Cuic_anal_1 == "DUTY" && a.Cuic_ele_mp == 1);
                    foreach (var resultCusdecDutyTot in _resultCusdecDutyTot)
                    {
                        ImpCusdecDutySum oImpCusdecDutySum = new ImpCusdecDutySum();
                        oImpCusdecDutySum.CUDS_COST_CAT = resultCusdecDutyTot.Cuic_ele_cat;
                        oImpCusdecDutySum.CUDS_COST_TP = resultCusdecDutyTot.Cuic_ele_tp;
                        oImpCusdecDutySum.CUDS_COST_ELE = resultCusdecDutyTot.Cuic_ele_cd;
                        oImpCusdecDutySum.CUDS_COST_ELE_AMT = resultCusdecDutyTot.amtELE;
                        oImpCusdecDutySum.CUDS_COST_CLAIM_AMT = resultCusdecDutyTot.amtClaim;
                        oImpCusdecDutySum.CUDS_COST_UNCLAIM_AMT = resultCusdecDutyTot.amtUNClaim;
                        oImpCusdecDutySum.CUDS_COST_STL_AMT = 0;
                        oImpCusdecDutySum.CUDS_SEQ_NO = _cusdecSeq;
                        oImpCusdecDutySum.CUDS_DOC_NO = _cusdecHdr.CUH_DOC_NO;
                        p_cusdecDutySum.Add(oImpCusdecDutySum);
                    }


                    ImpCusdecDutySum oImpCusdecDutySumCom = new ImpCusdecDutySum();
                    oImpCusdecDutySumCom.CUDS_COST_CAT = "OTH";
                    oImpCusdecDutySumCom.CUDS_COST_TP = "OTH";
                    oImpCusdecDutySumCom.CUDS_COST_ELE = "CE&S";
                    oImpCusdecDutySumCom.CUDS_COST_ELE_AMT = _cusdecHdr.CUH_COM_CHG;
                    oImpCusdecDutySumCom.CUDS_COST_CLAIM_AMT = 0;
                    oImpCusdecDutySumCom.CUDS_COST_UNCLAIM_AMT = _cusdecHdr.CUH_COM_CHG;
                    oImpCusdecDutySumCom.CUDS_COST_STL_AMT = 0;
                    oImpCusdecDutySumCom.CUDS_SEQ_NO = _cusdecSeq;
                    oImpCusdecDutySumCom.CUDS_DOC_NO = _cusdecHdr.CUH_DOC_NO;
                    p_cusdecDutySum.Add(oImpCusdecDutySumCom);
                    #endregion

                    //Save Cusdec Item with cost element
                    if (_isUpdate == true)
                    {
                        _financialDAL.DeleteCusdecElementItems(_cusdecHdr.CUH_SEQ_NO, _costSheetSeq);
                    }
                    foreach (ImpCusdecItmCost cusdecItmCost in p_cusdecCostEleItem) _financialDAL.SaveCusdecItmCost(cusdecItmCost);
                    //Save Cost Sheet Item with cost element
                    foreach (ImportsCostElementItem costSheetCostEleItem in p_costSheetCostEleItem) _financialDAL.UPDATE_COST_SHEET_ITEM_ELEMENT(costSheetCostEleItem);
                    //Save Cusdec Total cost element
                    foreach (ImpCusdecCost cusdecCost in p_cusdecCost) _financialDAL.SaveCusdecCost(cusdecCost);
                    //Save Cost Sheet Total cost element
                    foreach (ImportsCostElement costSheetCostEleSum in p_costSheetCostEleSum) _financialDAL.UPDATE_COST_SHEET_ELE_SUM(costSheetCostEleSum);
                    //Save Cusdec Duty Total 
                    foreach (ImpCusdecDutySum cusdecDutySum in p_cusdecDutySum) _financialDAL.SaveCusdecDutySum(cusdecDutySum);
                    if (_cusdecType.Rcuit_grup_id == 2) _financialDAL.Update_ReqHeaderStatus("F", _cusdecHdr.CUH_MOD_BY.ToString(), _cusdecHdr.CUH_COM.ToString(), _cusdecHdr.CUH_OTH_NO.ToString());
                }
                #endregion
                // UPDATE TO BOND ORDER LINE NO
                if (glbtype == "TO")
                {
                    saveorderno(_cusdecHdr.CUH_DOC_NO, _cusdecHdr.CUH_COM);
                }


                if (_isUpdate == false)
                {
                    _msg = "Document saved successfully. System generated document no is " + _cusdecHdr.CUH_DOC_NO;
                    _doc = _cusdecHdr.CUH_DOC_NO;
                }
                else
                {
                    _msg = "Document no " + _cusdecHdr.CUH_DOC_NO + " amended successfully.";
                    _doc = _cusdecHdr.CUH_DOC_NO;
                }
                if (_isconncopen == true)
                {
                    _financialDAL.TransactionCommit();
                    _generalDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _cusserDal.TransactionCommit();
                }


                //_financialDAL.TransactionRollback();
                //_generalDAL.TransactionRollback();
                //_inventoryDAL.TransactionRollback();

            }
            catch (Exception ex)
            {
                _effect = -99;
                _msg = ex.Message.ToString();
                _financialDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _cusserDal.TransactionRollback();
            }
            finally
            {
                if (_isconncopen == true)
                {
                    _financialDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    _generalDAL.ConnectionClose();
                    _cusserDal.ConnectionClose();
                }
            }
            msg = _msg;
            doc = _doc;
            return _effect;

        }
        public int GetCusdecData_comm(string _company, string _country, string _docType, string _docNo, out ImpCusdecHdr _custHdr, out List<ImpCusdecItm> _custItems, out List<ImpCusdecItmCost> _custItemsCost, out List<ImpCusdecCost> _custCost, out List<ImportsBLContainer> _custContainer, out string _msg, Boolean withconn = false, FinancialDAL _FinancialDALtemp=null)
        {
            ImpCusdecHdr custHdr = new ImpCusdecHdr();
            List<ImpCusdecItm> custItems = new List<ImpCusdecItm>();
            List<ImpCusdecItmCost> custItemsCost = new List<ImpCusdecItmCost>();
            List<ImpCusdecCost> custCost = new List<ImpCusdecCost>();
            List<ImportsBLContainer> blContainers = new List<ImportsBLContainer>();
            string msg = string.Empty;
            if (withconn == false)
            {
                _financialDAL = new FinancialDAL();
            }
            else
            {
                _financialDAL = _FinancialDALtemp;
            }
          
            bool _noDataFound = false;
            try
            {
                custHdr = _financialDAL.GET_CUSDEC_HEADER_BY_DOC(_company, _country, _docType, _docNo);
                if (custHdr != null)
                {
                    custItems = _financialDAL.GET_CUSDEC_ITEM_BY_DOCNEW(_docNo);

                    foreach (var item in custItems)
                    {
                        //bind cat desc
                        string cat1 = _financialDAL.GetSIItemCat1(item.Cui_itm_cd);
                        string cat2 = _financialDAL.GetSIItemCat2(item.Cui_itm_cd);

                        item.ItemCat1 = cat1;
                        item.ItemCat2 = cat2;
                    }

                    custItemsCost = _financialDAL.GET_CUSDEC_ITEM_COST_BY_DOC(_docNo);
                    custCost = _financialDAL.GET_CUSDEC_COST_BY_DOC(_docNo);
                    blContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(custHdr.CUH_SUN_REQ_NO);
                    if (custCost != null)
                    {
                        custCost = custCost.Where(i => i.Cus_ele_cat == "TOT").ToList();
                        foreach (ImpCusdecCost itm in custCost)
                        {
                            if (itm.Cus_ele_cd == "COST")
                            { itm.Cus_ele_cd_name = "Cost"; itm.Cus_line = 1; }
                            if (itm.Cus_ele_cd == "FRGT")
                            { itm.Cus_ele_cd_name = "Freight"; itm.Cus_line = 2; }
                            if (itm.Cus_ele_cd == "INSU")
                            { itm.Cus_ele_cd_name = "Insurance"; itm.Cus_line = 3; }
                            if (itm.Cus_ele_cd == "OTH")
                            { itm.Cus_ele_cd_name = "Other"; itm.Cus_line = 4; }
                        }
                    }
                }
                else
                {
                    _noDataFound = true;
                }

                _custHdr = custHdr;
                _custItems = custItems;
                _custItemsCost = custItemsCost;
                _custCost = custCost;
                _custContainer = blContainers;
                if (_noDataFound == true)
                {
                    _msg = "Invalid Entry No";
                    return -1;
                }
                else
                {
                    _msg = msg;
                    return 1;
                }
            }
            catch (Exception ex)
            {
                _custHdr = null;
                _custItems = null;
                _custItemsCost = null;
                _custCost = null;
                _custContainer = null;
                _msg = ex.Message.ToString();
                return -1;
            }
        }
        public int GetBLData_com(string _company, string _blNo, out ImpCusdecHdr _custHdr, out List<ImpCusdecItm> _custItems, out List<ImpCusdecCost> _custCost, out List<ImportsBLContainer> _custContainer, out string _msg,Boolean withconn = false, FinancialDAL _FinancialDALtemp=null,SalesDAL _SalesDALtemp=null)
        {
            ImpCusdecHdr custHdr = new ImpCusdecHdr();
            List<ImpCusdecItm> custItems = new List<ImpCusdecItm>();
            List<ImpCusdecCost> custCost = new List<ImpCusdecCost>();
            List<ImportsBLContainer> blContainers = new List<ImportsBLContainer>();
            string msg = string.Empty;
            try
            {
                if (withconn=false)
                {
		  _financialDAL = new FinancialDAL();
                //_generalDAL = new GeneralDAL(); 
                _salesDAL = new SalesDAL();
                }
                else
                {
                _financialDAL = _FinancialDALtemp;
                //_generalDAL = new GeneralDAL(); 
                _salesDAL = _SalesDALtemp;
                }
               
                ImportsBLHeader _impBLHdr = GET_BL_HEADER_BY_DOC(_company, _blNo, "A");
                if (_impBLHdr != null)
                {
                    if (_impBLHdr.Ib_is_cusdec == 1)
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "Already cusdec processed! - Bond No : " + _impBLHdr.Ib_ref_no;
                        return 0;
                    }


                    //Add by Chamal in Subo Mechine 24/04/2017
                    if (_impBLHdr.Ib_clear_pty == true)
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "You can't proceed that shipment, Because this was cleared by out side party!";
                        return 0;
                    }

                    custHdr.CUH_ACC_NO = "";
                    custHdr.CUH_BANK_BRANCH = "";
                    custHdr.CUH_BANK_CD = "";
                    custHdr.CUH_BANK_NAME = "";
                    custHdr.CUH_BANK_REF_CD = "";

                    custHdr.CUH_BL_NO = _impBLHdr.Ib_bl_no;
                    custHdr.CUH_CITY_OF_LAST_CONSIGNEE = "CITY_OF_LAST_CONSIGNEE";
                    custHdr.CUH_CNTY = _impBLHdr.CountryCode;
                    custHdr.CUH_CNTY_OF_DESTINATION = _impBLHdr.Ib_desti_cnty;
                    custHdr.CUH_CNTY_OF_EXPORT = _impBLHdr.Ib_expo_cnty;
                    custHdr.CUH_CNTY_OF_ORIGIN = _impBLHdr.Ib_origin_cnty;
                    custHdr.CUH_COM = _impBLHdr.Ib_com;
                    custHdr.CUH_CONSI_CD = _impBLHdr.Ib_consi_cd;
                    custHdr.CUH_CONSI_NAME = _impBLHdr.ConsigneeName;
                    custHdr.CUH_CONSI_TIN = _impBLHdr.ConsigneeTin;
                    custHdr.CUH_CONSI_ADDR = _impBLHdr.ConsigneeAddress;
                    custHdr.CUH_CONTAINER_FCL = "";
                    custHdr.CUH_CUR_CD = _impBLHdr.Ib_cur_cd;
                    custHdr.CUH_CUSDEC_ENTRY_NO = _impBLHdr.Ib_cusdec_entryno;
                    custHdr.CUH_DECL_ADDR = _impBLHdr.DeclarantAddress;
                    custHdr.CUH_DECL_CD = _impBLHdr.DeclarantCode;
                    custHdr.CUH_DECL_NAME = _impBLHdr.DeclarantName;
                    custHdr.CUH_DECL_TIN = _impBLHdr.DeclarantTin;
                    custHdr.CUH_DELIVERY_TERMS = _impBLHdr.Ib_anal_1;
                    custHdr.CUH_DESTI_CNTY_NAME = _impBLHdr.DestiCntyName;
                    custHdr.CUH_DOC_NO = _blNo;
                    custHdr.CUH_EX_RT = _impBLHdr.Ib_ex_rt;
                    custHdr.CUH_EXP_CNTY_NAME = _impBLHdr.ExpCntyName;
                    custHdr.CUH_FCL = _impBLHdr.Ib_carry_tp;
                    custHdr.CUH_FIN_DOC_NO = string.Empty;
                    custHdr.CUH_ITEMS_QTY = 0;
                    custHdr.CUH_LISION_NO = "";
                    custHdr.CUH_ORIGIN_CNTY_NAME = _impBLHdr.OriginCntyName;
                    custHdr.CUH_PLACE_OF_LOADING = _impBLHdr.Ib_loading_place;
                    custHdr.CUH_SBU = _impBLHdr.Ib_sbu;
                    custHdr.CUH_SUPP_ADDR = _impBLHdr.ExporterAddress;
                    custHdr.CUH_SUPP_CD = _impBLHdr.Ib_supp_cd;
                    custHdr.CUH_SUPP_NAME = _impBLHdr.ExporterName;
                    custHdr.CUH_SUPP_TIN = _impBLHdr.ExporterTin;
                    custHdr.CUH_TERMS_OF_PAYMENT = _impBLHdr.Ib_anal_1;
                    custHdr.CUH_TOT_AMT = _impBLHdr.Ib_tot_bl_amt;
                    custHdr.CUH_TOT_PKG = _impBLHdr.Ib_tot_pkg;
                    custHdr.CUH_TOT_PKG_UNIT = _impBLHdr.Ib_anal_2;
                    custHdr.CUH_TRADING_COUNTRY = "";
                    custHdr.CUH_VESSEL = _impBLHdr.Ib_vessel_no;
                    custHdr.CUH_VOYAGE = _impBLHdr.Ib_voyage;
                    custHdr.CUH_VOYAGE_DT = _impBLHdr.Ib_etd.Date;
                    custHdr.OwnCurrencyCode = _impBLHdr.ConsigneeCurrencyCode;
                    if (_impBLHdr.Ib_tot_foc == true)
                    {
                        custHdr.CUH_BANK_BRANCH = "000";
                        custHdr.CUH_BANK_CD = "9999";
                        custHdr.CUH_BANK_NAME = "Other Bank (Not Registered)";
                        custHdr.CUH_BANK_REF_CD = _impBLHdr.Ib_bl_ref_no.ToUpper().ToString(); //Edit by Chamal 05-Oct-2016, Lakshitha requested
                        custHdr.CUH_FILE_NO = _impBLHdr.Ib_bl_ref_no.ToUpper().ToString();
                        custHdr.CUH_TERMS_OF_PAYMENT = "FOC";
                        custHdr.CUH_CUSTOM_LC_TP = "90";
                    }
                    MasterExchangeRate _exRate = _salesDAL.GetExchangeRate(_company, custHdr.CUH_CUR_CD, DateTime.Now.Date, custHdr.OwnCurrencyCode, "WHARF");
                    if (_exRate != null)
                    {
                        custHdr.CUH_EX_RT = _exRate.Mer_cussel_rt;
                    }

                    List<ImportsBLItems> _impBLItems = _financialDAL.GET_BL_ITMS_BY_SEQ(_impBLHdr.Ib_seq_no);
                    if (_impBLItems != null && _impBLItems.Count > 0)
                    {
                        foreach (ImportsBLItems itm in _impBLItems)
                        {
                            ImpCusdecItm cItm = new ImpCusdecItm();
                            cItm.Cui_line = itm.Ibi_line;
                            cItm.Cui_itm_cd = itm.Ibi_itm_cd;
                            cItm.Cui_model = itm.Ibi_model;
                            cItm.Cui_itm_desc = itm.MI_SHORTDESC;
                            cItm.Cui_hs_cd = itm.Ibi_hs_cd;
                            cItm.Cui_bl_unit_rt = itm.Ibi_unit_rt;
                            cItm.Cui_pi_unit_rt = itm.Ibi_pi_unit_rt;
                            cItm.Cui_pi_no = itm.Ibi_pi_no;
                            cItm.Cui_pi_line = itm.Ibi_pi_line;
                            cItm.Cui_qty = itm.Ibi_qty;
                            cItm.Cui_tag = itm.Ibi_tag;
                            cItm.Cui_tp = itm.Ibi_tp;
                            cItm.Cui_itm_stus = itm.Ibi_itm_stus;
                            cItm.Cui_itm_price = itm.Ibi_unit_rt;
                            cItm.Cui_unit_rt = itm.Ibi_unit_rt;
                            cItm.Cui_unit_amt = itm.Ibi_qty * itm.Ibi_unit_rt;

                            //bind cat desc
                            string cat1 = _financialDAL.GetSIItemCat1(itm.Ibi_itm_cd);
                            string cat2 = _financialDAL.GetSIItemCat2(itm.Ibi_itm_cd);

                            //get hs codes
                            if (cItm.Cui_hs_cd == null || cItm.Cui_hs_cd == "" || cItm.Cui_hs_cd == "NULL" || cItm.Cui_hs_cd == "null")
                            {
                                //GetModelHScode
                                string hs = _financialDAL.GetModelHScode(itm.Ibi_model);
                                cItm.Cui_hs_cd = hs;
                            }

                            cItm.ItemCat1 = cat1;
                            cItm.ItemCat2 = cat2;

                            Decimal _mass = 0;
                            if (!string.IsNullOrEmpty(itm.Ibi_anal_2.ToString()))
                            {
                                if (!Decimal.TryParse(itm.Ibi_anal_2.ToString(), out _mass))
                                {
                                }
                                cItm.Cui_gross_mass = _mass;
                            }
                            if (!string.IsNullOrEmpty(itm.Ibi_anal_3.ToString()))
                            {
                                if (!Decimal.TryParse(itm.Ibi_anal_3.ToString(), out _mass))
                                {
                                }
                                cItm.Cui_net_mass = _mass;
                            }
                            custItems.Add(cItm);
                            if (string.IsNullOrEmpty(custHdr.CUH_FIN_DOC_NO)) custHdr.CUH_FIN_DOC_NO = itm.Ibi_fin_no;
                        }
                    }

                    List<ImportsBLSInvoice> _impBLSI = _financialDAL.GET_IMP_BL_SI_BY_SEQ(_impBLHdr.Ib_seq_no);
                    if (_impBLSI != null && _impBLSI.Count > 0)
                    {
                        foreach (ImportsBLSInvoice itm in _impBLSI)
                        {
                            custHdr.CUH_REF_NO = itm.Ibs_si_no;
                            break;
                        }
                    }

                    Order_Financing _lcHdr = _financialDAL.GET_IMP_FIN_HDR_BY_DOC(_company, custHdr.CUH_FIN_DOC_NO);
                    if (_lcHdr != null)
                    {
                        custHdr.CUH_BANK_BRANCH = _lcHdr.If_anal_1;
                        custHdr.CUH_BANK_CD = _lcHdr.If_bank_cd;

                        List<MasterOutsideParty> _banks = _financialDAL.GetBusCom("BANK");
                        if (_banks != null)
                        {
                            MasterOutsideParty _bank = _banks.FindAll(x => x.Mbi_country_cd == custHdr.CUH_CNTY && x.Mbi_cd == custHdr.CUH_BANK_CD)[0];
                            if (_bank != null) { custHdr.CUH_BANK_NAME = _bank.Mbi_desc; }
                        }
                        string _shipmentSeq = "";
                        if (_impBLHdr.Ib_si_seq_no > 0) _shipmentSeq = "-" + _impBLHdr.Ib_si_seq_no.ToString();
                        custHdr.CUH_BANK_REF_CD = _lcHdr.If_ref_no + _shipmentSeq; //Financial Document No (Bank LC No)
                        custHdr.CUH_FILE_NO = _lcHdr.If_file_no + _shipmentSeq;
                        custHdr.CUH_TERMS_OF_PAYMENT = _lcHdr.If_tp;
                        List<ImportCostType> _costTypes = _financialDAL.GET_MST_COST_TP("IPM");
                        if (_costTypes != null)
                        {
                            ImportCostType _costType = _costTypes.FindAll(x => x.Mcat_cd == _lcHdr.If_tp)[0];
                            custHdr.CUH_CUSTOM_LC_TP = _costType.Mcat_oth_cd;
                        }
                    }

                    blContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_SEQ(_impBLHdr.Ib_seq_no);
                    List<ImportsBLCost> _impBLCost = _financialDAL.GET_IMP_BL_COST_BY_SEQ(_impBLHdr.Ib_seq_no);
                    if (_impBLCost != null && _impBLCost.Count > 0)
                    {
                        foreach (ImportsBLCost itm in _impBLCost)
                        {
                            ImpCusdecCost cCost = new ImpCusdecCost();
                            cCost.Cus_act = 1;
                            cCost.Cus_amt = itm.Ibcs_amt;
                            cCost.Cus_amt_com = itm.Ibcs_amt * custHdr.CUH_EX_RT;
                            cCost.Cus_ele_cat = itm.Ibcs_ele_cat;
                            cCost.Cus_ele_tp = itm.Ibcs_ele_tp;
                            cCost.Cus_ele_cd = itm.Ibcs_ele_cd;
                            cCost.Cus_line = itm.Ibcs_line;
                            if (cCost.Cus_ele_cd == "COST")
                            {
                                cCost.Cus_amt = _impBLItems.Sum(x => x.Ibi_qty * x.Ibi_unit_rt);
                                cCost.Cus_ele_cd_name = "Cost";
                                cCost.Cus_line = 1;
                            }
                            if (cCost.Cus_ele_cd == "FRGT")
                            { cCost.Cus_ele_cd_name = "Freight"; cCost.Cus_line = 2; }
                            if (cCost.Cus_ele_cd == "INSU")
                            { cCost.Cus_ele_cd_name = "Insurance"; cCost.Cus_line = 3; }
                            if (cCost.Cus_ele_cd == "OTH")
                            { cCost.Cus_ele_cd_name = "Other"; cCost.Cus_line = 4; }
                            custCost.Add(cCost);
                        }

                    }

                    ImportsBLCost oFindEle = _impBLCost.Find(x => x.Ibcs_ele_cd == "FRGT");
                    if (oFindEle == null || oFindEle.Ibcs_ele_cd == "")
                    {
                        ImpCusdecCost cCost = new ImpCusdecCost();
                        cCost.Cus_act = 1;
                        cCost.Cus_amt = 0;
                        cCost.Cus_amt_com = 0;
                        cCost.Cus_ele_cat = "TOT";
                        cCost.Cus_ele_tp = "CIF";
                        cCost.Cus_ele_cd = "FRGT";
                        cCost.Cus_ele_cd_name = "Freight";
                        cCost.Cus_line = 2;
                        custCost.Add(cCost);
                    }
                    oFindEle = new ImportsBLCost();
                    oFindEle = _impBLCost.Find(x => x.Ibcs_ele_cd == "INSU");
                    if (oFindEle == null || oFindEle.Ibcs_ele_cd == "")
                    {
                        ImpCusdecCost cCost = new ImpCusdecCost();
                        cCost.Cus_act = 1;
                        cCost.Cus_amt = 0;
                        cCost.Cus_amt_com = 0;
                        cCost.Cus_ele_cat = "TOT";
                        cCost.Cus_ele_tp = "CIF";
                        cCost.Cus_ele_cd = "INSU";
                        cCost.Cus_ele_cd_name = "Insurance";
                        cCost.Cus_line = 3;
                        custCost.Add(cCost);
                    }
                    oFindEle = new ImportsBLCost();
                    oFindEle = _impBLCost.Find(x => x.Ibcs_ele_cd == "OTH");
                    if (oFindEle == null || oFindEle.Ibcs_ele_cd == "")
                    {
                        ImpCusdecCost cCost = new ImpCusdecCost();
                        cCost.Cus_act = 1;
                        cCost.Cus_amt = 0;
                        cCost.Cus_amt_com = 0;
                        cCost.Cus_ele_cat = "TOT";
                        cCost.Cus_ele_tp = "CIF";
                        cCost.Cus_ele_cd = "OTH";
                        cCost.Cus_ele_cd_name = "Other";
                        cCost.Cus_line = 4;
                        custCost.Add(cCost);
                    }

                    custHdr.CUH_TOT_AMT = custCost.Sum(x => x.Cus_amt);

                    _custHdr = custHdr;
                    _custItems = custItems;
                    _custCost = custCost;
                    _custContainer = blContainers;
                    _msg = msg;
                    return 1;
                }
                else
                {
                    _custHdr = null;
                    _custItems = null;
                    _custCost = null;
                    _custContainer = null;
                    _msg = "Invalid document no";
                    return 0;
                }
            }
            catch (Exception ex)
            {
                _custHdr = null;
                _custItems = null;
                _custCost = null;
                _custContainer = null;
                _msg = ex.Message.ToString();
                return -1;
            }
        }
         public int GetCusdecReqData_comm(string _company, string _country, string _docType, string _reqNo, out ImpCusdecHdr _custHdr, out List<ImpCusdecItm> _custItems, out List<ImpCusdecItmCost> _custItemsCost, out List<ImpCusdecCost> _custCost, out List<ImportsBLContainer> _custContainer, out string _msg, bool _connopen,
             FinancialDAL _FinancialDALtemp = null, InventoryDAL _InventoryDALtemp = null, GeneralDAL _GeneralDALtemp = null, SalesDAL _SalesDALtemp=null)
        {
            Int32 _rtnVal = 0;
            InventoryRequest reqHdr = new InventoryRequest();
            ImpCusdecHdr custHdr = new ImpCusdecHdr();
            List<ImpCusdecItm> custItems = new List<ImpCusdecItm>();
            //List<ImpCusdecItmCost> custItemsCost = new List<ImpCusdecItmCost>();
            List<ImportsCostElementItem> custItemsCost = new List<ImportsCostElementItem>();
            List<ImpCusdecCost> custCost = new List<ImpCusdecCost>();
            List<ImportsBLContainer> blContainers = new List<ImportsBLContainer>();
            string msg = string.Empty;
            if (_connopen == true)
            {
                _financialDAL = new FinancialDAL();
                _inventoryDAL = new InventoryDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL = new SalesDAL();
            }
            else
            {
                _financialDAL = _FinancialDALtemp;
                _inventoryDAL = _InventoryDALtemp;
                _generalDAL = _GeneralDALtemp;
                _salesDAL = _SalesDALtemp;
            }

            try
            {

                reqHdr.Itr_req_no = _reqNo;
                reqHdr = _financialDAL.GetInventoryRequestDataByReqNo(reqHdr);

                if (reqHdr != null)
                {

                    if (reqHdr.Itr_stus == "C")
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custItemsCost = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "Request already canceled!";
                        return -1;
                    }

                    if (reqHdr.Itr_stus == "F")
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custItemsCost = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "Request already proceed!";
                        return -1;
                    }

                    custHdr = _financialDAL.GET_CUSDEC_HEADER_BY_DOC(_company, _country, "TO", reqHdr.Itr_job_no.ToString());
                    if (custHdr != null)
                    {
                        custHdr.CUH_SUN_REQ_NO = custHdr.CUH_OTH_NO.ToString();
                        custHdr.CUH_SUN_BOND_NO = reqHdr.Itr_job_no.ToString();
                        List<ImpCusdecCost> custCost1 = new List<ImpCusdecCost>();
                        List<ImpCusdecItm> custItems1 = _financialDAL.GET_CUSDEC_ITEM_BY_DOC(reqHdr.Itr_job_no.ToString());
                        List<InventoryRequestItem> reqItems1 = _financialDAL.GET_INT_REQ_ITM_BY_SEQ(reqHdr.Itr_seq_no);
                        //custItemsCost = _financialDAL.GET_CUSDEC_ITEM_COST_BY_DOC(reqHdr.Itr_job_no.ToString());
                        custItemsCost = _financialDAL.GET_IMP_CST_ELE_ITM_BY_SINO(custHdr.CUH_OTH_NO);
                        foreach (InventoryRequestItem itm in reqItems1)
                        {
                            custHdr.CUH_ITEMS_QTY = reqItems1.Count();
                            ImpCusdecItm custItems2 = custItems1.FindAll(x => x.Cui_line == itm.Itri_job_line)[0];
                            custItems2.Cui_req_qty = custItems2.Cui_qty;
                            itm.Itri_advan_qty = custItems2.Cui_qty;
                            custItems2.Cui_bal_qty3 = custItems2.Cui_qty;
                            custItems2.Cui_qty = itm.Itri_qty;
                            custItems2.Cui_bal_qty1 = 0;
                            custItems2.Cui_bal_qty2 = 0;


                            //bind cat desc
                            string cat1 = _financialDAL.GetSIItemCat1(custItems2.Cui_itm_cd);
                            string cat2 = _financialDAL.GetSIItemCat2(custItems2.Cui_itm_cd);

                            custItems2.ItemCat1 = cat1;
                            custItems2.ItemCat2 = cat2;

                            if (itm.ITRI_ITM_COND == "1")
                            {
                                custItems2.itri_itm_cond = true;
                            }
                            else
                            {
                                custItems2.itri_itm_cond = false;
                            }
                            //subodadana 2016-12-24
                            custItems2.Cui_itm_stus = itm.Itri_itm_stus;

                            custItems2.Cui_bal_qty3 = itm.Itri_res_qty;//Reservation Qty; Chamal 31-08-2016
                            custItems2.Cui_anal_5 = itm.Itri_res_no; //Reservation No; Chamal 31-08-2016
                            custItems2.Cui_anal_3 = itm.Itri_res_line.ToString(); //Reservation Line  No; Chamal 18-10-2016
                            decimal mass = CAL_WEIGHT_APPORTION(custItems2.Cui_qty, custItems2.Cui_qty, custItems2.Cui_req_qty, custItems2.Cui_gross_mass);
                            custItems2.Cui_gross_mass = mass;
                            mass = CAL_WEIGHT_APPORTION(custItems2.Cui_qty, custItems2.Cui_qty, custItems2.Cui_req_qty, custItems2.Cui_net_mass);
                            custItems2.Cui_net_mass = mass;
                            custItems2.Cui_unit_amt = custItems2.Cui_unit_rt * custItems2.Cui_qty;
                            custItems.Add(custItems2);
                            if (custItemsCost != null)
                            {
                                List<ImportsCostElementItem> custItemsCost1 = custItemsCost.FindAll(x => x.Ice_ref_line == itm.Itri_job_line && (x.Ice_ele_cd == "COST" || x.Ice_ele_cd == "FRGT" || x.Ice_ele_cd == "INSU" || x.Ice_ele_cd == "OTH"));
                                foreach (ImportsCostElementItem itmcost in custItemsCost1)
                                {
                                    ImpCusdecCost custCost2 = new ImpCusdecCost();
                                    custCost2.Cus_act = 1;
                                    custCost2.Cus_amt = ((itmcost.Ice_pre_amnt / itm.Itri_advan_qty) / custHdr.CUH_EX_RT) * itm.Itri_qty;
                                    custCost2.Cus_amt_com = (itmcost.Ice_pre_amnt / itm.Itri_advan_qty) * itm.Itri_qty;
                                    custCost2.Cus_ele_cat = itmcost.Ice_ele_cat;
                                    custCost2.Cus_ele_cd = itmcost.Ice_ele_cd;
                                    custCost2.Cus_ele_tp = itmcost.Ice_ele_tp;

                                    custCost2.Cus_amt = Math.Round(custCost2.Cus_amt, 2);
                                    custCost2.Cus_amt_com = Math.Round(custCost2.Cus_amt_com, 2);
                                    custCost1.Add(custCost2);
                                }
                            }

                        }

                        var result = from x in custCost1
                                     group x by new { x.Cus_ele_cat, x.Cus_ele_tp, x.Cus_ele_cd }
                                         into g
                                         select new { g.Key.Cus_ele_cat, g.Key.Cus_ele_tp, g.Key.Cus_ele_cd, eleVal = g.Sum(s => s.Cus_amt_com), eleValUSD = g.Sum(s => s.Cus_amt) };
                        foreach (var itm in result)
                        {
                            ImpCusdecCost custCost2 = new ImpCusdecCost();
                            custCost2.Cus_act = 1;
                            custCost2.Cus_amt = itm.eleValUSD;
                            custCost2.Cus_amt_com = itm.eleValUSD;
                            custCost2.Cus_ele_cat = itm.Cus_ele_cat;
                            custCost2.Cus_ele_cd = itm.Cus_ele_cd;
                            custCost2.Cus_ele_tp = itm.Cus_ele_tp;
                            custCost.Add(custCost2);
                        }
                        blContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(custHdr.CUH_OTH_NO);
                        foreach (ImpCusdecCost itm in custCost)
                        {
                            if (itm.Cus_ele_cd == "COST")
                            { itm.Cus_ele_cd_name = "Cost"; itm.Cus_line = 1; }
                            if (itm.Cus_ele_cd == "FRGT")
                            { itm.Cus_ele_cd_name = "Freight"; itm.Cus_line = 2; }
                            if (itm.Cus_ele_cd == "INSU")
                            { itm.Cus_ele_cd_name = "Insurance"; itm.Cus_line = 3; }
                            if (itm.Cus_ele_cd == "OTH")
                            { itm.Cus_ele_cd_name = "Other"; itm.Cus_line = 4; }
                        }
                        MasterCompany company = _inventoryDAL.GetCompByCode(_company);
                        MasterExchangeRate _exRate = _salesDAL.GetExchangeRate(_company, custHdr.CUH_CUR_CD, DateTime.Now.Date, company.Mc_cur_cd, "WHARF");
                        if (_exRate != null) custHdr.CUH_EX_RT = _exRate.Mer_cussel_rt;
                        custHdr.CUH_TOT_PKG = custItems.Sum(x => x.Cui_qty).ToString();
                        custHdr.CUH_TOT_AMT = custCost.Sum(x => x.Cus_amt);
                        custHdr.CUH_OTH_NO = _reqNo;

                        //if (_docType == "RE")
                        //{
                        //    MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                        //    custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                        //    custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                        //    custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                        //    custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                        //    custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                        //}
                        if (!string.IsNullOrEmpty(reqHdr.Itr_bus_code.ToString()) && reqHdr.Itr_bus_code.ToString() != "N/A")
                        {
                            if (_docType == "EX")
                            {

                                MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                                custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                                custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                                //custHdr.CUH_CONSI_TIN = _cust.Mbe_tax_no.ToString();
                                custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                                custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                                custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                                custHdr.CUH_PROCE_CD_1 = _cust.Mbe_proc_val1;
                                custHdr.CUH_PROCE_CD_2 = _cust.Mbe_proc_val2;
                            }
                            if (_docType == "EXP" || _docType == "RE")
                            {
                                custHdr.CUH_SUPP_CD = custHdr.CUH_CONSI_CD;
                                custHdr.CUH_SUPP_NAME = custHdr.CUH_CONSI_NAME;
                                custHdr.CUH_SUPP_TIN = custHdr.CUH_CONSI_TIN;
                                custHdr.CUH_SUPP_ADDR = custHdr.CUH_CONSI_ADDR;

                                MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                                custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                                custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                                //custHdr.CUH_CONSI_TIN = _cust.Mbe_tax_no.ToString();
                                custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                                custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                                custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                                if (_docType == "RE")
                                {
                                    custHdr.CUH_PROC_CD = _cust.Mbe_proc_cd;
                                    custHdr.CUH_PROCE_CD_1 = _cust.Mbe_proc_val1;
                                    custHdr.CUH_PROCE_CD_2 = _cust.Mbe_proc_val2;
                                    custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd;
                                }
                            }
                        }
                        else
                        {
                            if (_docType == "EX") //Added by Chamal 13-09-2016
                            {
                                custHdr.CUH_PROCE_CD_1 = string.Empty;
                                custHdr.CUH_PROCE_CD_2 = string.Empty;
                            }
                        }

                        InventoryHeader _invHdr = _inventoryDAL.GetINTHDRByOthDoc(_company, "GRN", custHdr.CUH_SUN_REQ_NO.ToString()); //Edit SI no load variable by Chamal 08-Sep-2016
                        if (_invHdr != null)
                        {
                            if (!string.IsNullOrEmpty(_invHdr.Ith_entry_no) && !string.IsNullOrEmpty(_invHdr.Ith_loc))
                            {
                                if (_invHdr.Ith_entry_no == "N/A")
                                {
                                    _invHdr.Ith_entry_no = custHdr.CUH_CUSDEC_ENTRY_NO;
                                    _invHdr.Ith_git_close_date = custHdr.CUH_DT;
                                }
                                custHdr.CUH_BL_NO = _invHdr.Ith_entry_no.ToString() + " OF " + _invHdr.Ith_git_close_date.ToString("dd/MM/yyyy");
                                custHdr.CUH_ENTRY_NO = _invHdr.Ith_entry_no.ToString();
                                MasterLocation _mstLoc = _generalDAL.GetLocationInfor(_company, _invHdr.Ith_loc.ToString());
                                custHdr.CUH_MARKS_AND_NO = _mstLoc.Ml_loc_desc.ToString();
                            }
                            else
                            {
                                custHdr.CUH_BL_NO = "-";
                                custHdr.CUH_MARKS_AND_NO = "-";
                            }
                        }
                        else
                        {
                            custHdr.CUH_BL_NO = "Still not GRN";
                            custHdr.CUH_MARKS_AND_NO = "Still not GRN";
                        }
                        custHdr.CUH_CUSDEC_ENTRY_NO = string.Empty;

                        _custHdr = custHdr;
                        _custItems = custItems;
                        //_custItemsCost = custItemsCost;
                        _custItemsCost = null;
                        _custCost = custCost;
                        _custContainer = blContainers;
                        _msg = msg;
                        _rtnVal = 1;
                    }
                    else
                    {
                        _custHdr = null;
                        _custItems = null;
                        _custItemsCost = null;
                        _custCost = null;
                        _custContainer = null;
                        _msg = "Invalid Tobond No";
                        _rtnVal = -99;
                    }
                }
                else
                {
                    _custHdr = null;
                    _custItems = null;
                    _custItemsCost = null;
                    _custCost = null;
                    _custContainer = null;
                    _msg = "Invalid Request No";
                    _rtnVal = -99;
                }

                return _rtnVal;
            }
            catch (Exception ex)
            {
                _custHdr = null;
                _custItems = null;
                _custItemsCost = null;
                _custCost = null;
                _custContainer = null;
                _msg = ex.Message.ToString();
                return -99;
            }
        }
         public int GetCusdecReqData_comm(string _company, string _country, string _docType, string _reqNo, out ImpCusdecHdr _custHdr, out List<ImpCusdecItm> _custItems, out List<ImpCusdecItmCost> _custItemsCost, out List<ImpCusdecCost> _custCost, out List<ImportsBLContainer> _custContainer, out string _msg, bool _connopen,
             FinancialDAL _FinancialDALtemp = null, InventoryDAL _InventoryDALtemp = null, SalesDAL _SalesDALtemp=null,GeneralDAL _GeneralDALtemp=null)
         {
             Int32 _rtnVal = 0;
             InventoryRequest reqHdr = new InventoryRequest();
             ImpCusdecHdr custHdr = new ImpCusdecHdr();
             List<ImpCusdecItm> custItems = new List<ImpCusdecItm>();
             //List<ImpCusdecItmCost> custItemsCost = new List<ImpCusdecItmCost>();
             List<ImportsCostElementItem> custItemsCost = new List<ImportsCostElementItem>();
             List<ImpCusdecCost> custCost = new List<ImpCusdecCost>();
             List<ImportsBLContainer> blContainers = new List<ImportsBLContainer>();
             string msg = string.Empty;
             if (_connopen == true)
             {
                 _financialDAL = new FinancialDAL();
                 _inventoryDAL = new InventoryDAL();
                 _generalDAL = new GeneralDAL();
                 _salesDAL = new SalesDAL();
             }
             else
             {
                 _financialDAL = _FinancialDALtemp;
                 _inventoryDAL = _InventoryDALtemp;
                 _generalDAL = _GeneralDALtemp;
                 _salesDAL = _SalesDALtemp;
             
             }

             try
             {

                 reqHdr.Itr_req_no = _reqNo;
                 reqHdr = _financialDAL.GetInventoryRequestDataByReqNo(reqHdr);

                 if (reqHdr != null)
                 {

                     if (reqHdr.Itr_stus == "C")
                     {
                         _custHdr = null;
                         _custItems = null;
                         _custItemsCost = null;
                         _custCost = null;
                         _custContainer = null;
                         _msg = "Request already canceled!";
                         return -1;
                     }

                     if (reqHdr.Itr_stus == "F")
                     {
                         _custHdr = null;
                         _custItems = null;
                         _custItemsCost = null;
                         _custCost = null;
                         _custContainer = null;
                         _msg = "Request already proceed!";
                         return -1;
                     }

                     custHdr = _financialDAL.GET_CUSDEC_HEADER_BY_DOC(_company, _country, "TO", reqHdr.Itr_job_no.ToString());
                     if (custHdr != null)
                     {
                         custHdr.CUH_SUN_REQ_NO = custHdr.CUH_OTH_NO.ToString();
                         custHdr.CUH_SUN_BOND_NO = reqHdr.Itr_job_no.ToString();
                         List<ImpCusdecCost> custCost1 = new List<ImpCusdecCost>();
                         List<ImpCusdecItm> custItems1 = _financialDAL.GET_CUSDEC_ITEM_BY_DOC(reqHdr.Itr_job_no.ToString());
                         List<InventoryRequestItem> reqItems1 = _financialDAL.GET_INT_REQ_ITM_BY_SEQ(reqHdr.Itr_seq_no);
                         //custItemsCost = _financialDAL.GET_CUSDEC_ITEM_COST_BY_DOC(reqHdr.Itr_job_no.ToString());
                         custItemsCost = _financialDAL.GET_IMP_CST_ELE_ITM_BY_SINO(custHdr.CUH_OTH_NO);
                         foreach (InventoryRequestItem itm in reqItems1)
                         {
                             custHdr.CUH_ITEMS_QTY = reqItems1.Count();
                             ImpCusdecItm custItems2 = custItems1.FindAll(x => x.Cui_line == itm.Itri_job_line)[0];
                             custItems2.Cui_req_qty = custItems2.Cui_qty;
                             itm.Itri_advan_qty = custItems2.Cui_qty;
                             custItems2.Cui_bal_qty3 = custItems2.Cui_qty;
                             custItems2.Cui_qty = itm.Itri_qty;
                             custItems2.Cui_bal_qty1 = 0;
                             custItems2.Cui_bal_qty2 = 0;


                             //bind cat desc
                             string cat1 = _financialDAL.GetSIItemCat1(custItems2.Cui_itm_cd);
                             string cat2 = _financialDAL.GetSIItemCat2(custItems2.Cui_itm_cd);

                             custItems2.ItemCat1 = cat1;
                             custItems2.ItemCat2 = cat2;

                             if (itm.ITRI_ITM_COND == "1")
                             {
                                 custItems2.itri_itm_cond = true;
                             }
                             else
                             {
                                 custItems2.itri_itm_cond = false;
                             }
                             //subodadana 2016-12-24
                             custItems2.Cui_itm_stus = itm.Itri_itm_stus;

                             custItems2.Cui_bal_qty3 = itm.Itri_res_qty;//Reservation Qty; Chamal 31-08-2016
                             custItems2.Cui_anal_5 = itm.Itri_res_no; //Reservation No; Chamal 31-08-2016
                             custItems2.Cui_anal_3 = itm.Itri_res_line.ToString(); //Reservation Line  No; Chamal 18-10-2016
                             decimal mass = CAL_WEIGHT_APPORTION(custItems2.Cui_qty, custItems2.Cui_qty, custItems2.Cui_req_qty, custItems2.Cui_gross_mass);
                             custItems2.Cui_gross_mass = mass;
                             mass = CAL_WEIGHT_APPORTION(custItems2.Cui_qty, custItems2.Cui_qty, custItems2.Cui_req_qty, custItems2.Cui_net_mass);
                             custItems2.Cui_net_mass = mass;
                             custItems2.Cui_unit_amt = custItems2.Cui_unit_rt * custItems2.Cui_qty;
                             custItems.Add(custItems2);
                             if (custItemsCost != null)
                             {
                                 List<ImportsCostElementItem> custItemsCost1 = custItemsCost.FindAll(x => x.Ice_ref_line == itm.Itri_job_line && (x.Ice_ele_cd == "COST" || x.Ice_ele_cd == "FRGT" || x.Ice_ele_cd == "INSU" || x.Ice_ele_cd == "OTH"));
                                 foreach (ImportsCostElementItem itmcost in custItemsCost1)
                                 {
                                     ImpCusdecCost custCost2 = new ImpCusdecCost();
                                     custCost2.Cus_act = 1;
                                     custCost2.Cus_amt = ((itmcost.Ice_pre_amnt / itm.Itri_advan_qty) / custHdr.CUH_EX_RT) * itm.Itri_qty;
                                     custCost2.Cus_amt_com = (itmcost.Ice_pre_amnt / itm.Itri_advan_qty) * itm.Itri_qty;
                                     custCost2.Cus_ele_cat = itmcost.Ice_ele_cat;
                                     custCost2.Cus_ele_cd = itmcost.Ice_ele_cd;
                                     custCost2.Cus_ele_tp = itmcost.Ice_ele_tp;

                                     custCost2.Cus_amt = Math.Round(custCost2.Cus_amt, 2);
                                     custCost2.Cus_amt_com = Math.Round(custCost2.Cus_amt_com, 2);
                                     custCost1.Add(custCost2);
                                 }
                             }

                         }

                         var result = from x in custCost1
                                      group x by new { x.Cus_ele_cat, x.Cus_ele_tp, x.Cus_ele_cd }
                                          into g
                                          select new { g.Key.Cus_ele_cat, g.Key.Cus_ele_tp, g.Key.Cus_ele_cd, eleVal = g.Sum(s => s.Cus_amt_com), eleValUSD = g.Sum(s => s.Cus_amt) };
                         foreach (var itm in result)
                         {
                             ImpCusdecCost custCost2 = new ImpCusdecCost();
                             custCost2.Cus_act = 1;
                             custCost2.Cus_amt = itm.eleValUSD;
                             custCost2.Cus_amt_com = itm.eleValUSD;
                             custCost2.Cus_ele_cat = itm.Cus_ele_cat;
                             custCost2.Cus_ele_cd = itm.Cus_ele_cd;
                             custCost2.Cus_ele_tp = itm.Cus_ele_tp;
                             custCost.Add(custCost2);
                         }
                         blContainers = _financialDAL.GET_IMP_BL_CONTNR_BY_BLNO(custHdr.CUH_OTH_NO);
                         foreach (ImpCusdecCost itm in custCost)
                         {
                             if (itm.Cus_ele_cd == "COST")
                             { itm.Cus_ele_cd_name = "Cost"; itm.Cus_line = 1; }
                             if (itm.Cus_ele_cd == "FRGT")
                             { itm.Cus_ele_cd_name = "Freight"; itm.Cus_line = 2; }
                             if (itm.Cus_ele_cd == "INSU")
                             { itm.Cus_ele_cd_name = "Insurance"; itm.Cus_line = 3; }
                             if (itm.Cus_ele_cd == "OTH")
                             { itm.Cus_ele_cd_name = "Other"; itm.Cus_line = 4; }
                         }
                         MasterCompany company = _inventoryDAL.GetCompByCode(_company);
                         MasterExchangeRate _exRate = _salesDAL.GetExchangeRate(_company, custHdr.CUH_CUR_CD, DateTime.Now.Date, company.Mc_cur_cd, "WHARF");
                         if (_exRate != null) custHdr.CUH_EX_RT = _exRate.Mer_cussel_rt;
                         custHdr.CUH_TOT_PKG = custItems.Sum(x => x.Cui_qty).ToString();
                         custHdr.CUH_TOT_AMT = custCost.Sum(x => x.Cus_amt);
                         custHdr.CUH_OTH_NO = _reqNo;

                         //if (_docType == "RE")
                         //{
                         //    MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                         //    custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                         //    custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                         //    custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                         //    custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                         //    custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                         //}
                         if (!string.IsNullOrEmpty(reqHdr.Itr_bus_code.ToString()) && reqHdr.Itr_bus_code.ToString() != "N/A")
                         {
                             if (_docType == "EX")
                             {

                                 MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                                 custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                                 custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                                 //custHdr.CUH_CONSI_TIN = _cust.Mbe_tax_no.ToString();
                                 custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                                 custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                                 custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                                 custHdr.CUH_PROCE_CD_1 = _cust.Mbe_proc_val1;
                                 custHdr.CUH_PROCE_CD_2 = _cust.Mbe_proc_val2;
                             }
                             if (_docType == "EXP" || _docType == "RE")
                             {
                                 custHdr.CUH_SUPP_CD = custHdr.CUH_CONSI_CD;
                                 custHdr.CUH_SUPP_NAME = custHdr.CUH_CONSI_NAME;
                                 custHdr.CUH_SUPP_TIN = custHdr.CUH_CONSI_TIN;
                                 custHdr.CUH_SUPP_ADDR = custHdr.CUH_CONSI_ADDR;

                                 MasterBusinessEntity _cust = _salesDAL.GetBusinessCompanyDetail(custHdr.CUH_COM.ToString(), reqHdr.Itr_bus_code.ToString(), string.Empty, string.Empty, "C");
                                 custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd.ToString();
                                 custHdr.CUH_CONSI_TIN = _cust.Mbe_oth_id_no.ToString();
                                 //custHdr.CUH_CONSI_TIN = _cust.Mbe_tax_no.ToString();
                                 custHdr.CUH_CONSI_CD = _cust.Mbe_cd.ToString();
                                 custHdr.CUH_CONSI_NAME = _cust.Mbe_name.ToString();
                                 custHdr.CUH_CONSI_ADDR = _cust.Mbe_add1.ToString() + " " + _cust.Mbe_add2.ToString();
                                 if (_docType == "RE")
                                 {
                                     custHdr.CUH_PROC_CD = _cust.Mbe_proc_cd;
                                     custHdr.CUH_PROCE_CD_1 = _cust.Mbe_proc_val1;
                                     custHdr.CUH_PROCE_CD_2 = _cust.Mbe_proc_val2;
                                     custHdr.CUH_WH_AND_PERIOD = _cust.Mbe_wh_cd;
                                 }
                             }
                         }
                         else
                         {
                             if (_docType == "EX") //Added by Chamal 13-09-2016
                             {
                                 custHdr.CUH_PROCE_CD_1 = string.Empty;
                                 custHdr.CUH_PROCE_CD_2 = string.Empty;
                             }
                         }

                         InventoryHeader _invHdr = _inventoryDAL.GetINTHDRByOthDoc(_company, "GRN", custHdr.CUH_SUN_REQ_NO.ToString()); //Edit SI no load variable by Chamal 08-Sep-2016
                         if (_invHdr != null)
                         {
                             if (!string.IsNullOrEmpty(_invHdr.Ith_entry_no) && !string.IsNullOrEmpty(_invHdr.Ith_loc))
                             {
                                 if (_invHdr.Ith_entry_no == "N/A")
                                 {
                                     _invHdr.Ith_entry_no = custHdr.CUH_CUSDEC_ENTRY_NO;
                                     _invHdr.Ith_git_close_date = custHdr.CUH_DT;
                                 }
                                 custHdr.CUH_BL_NO = _invHdr.Ith_entry_no.ToString() + " OF " + _invHdr.Ith_git_close_date.ToString("dd/MM/yyyy");
                                 custHdr.CUH_ENTRY_NO = _invHdr.Ith_entry_no.ToString();
                                 MasterLocation _mstLoc = _generalDAL.GetLocationInfor(_company, _invHdr.Ith_loc.ToString());
                                 custHdr.CUH_MARKS_AND_NO = _mstLoc.Ml_loc_desc.ToString();
                             }
                             else
                             {
                                 custHdr.CUH_BL_NO = "-";
                                 custHdr.CUH_MARKS_AND_NO = "-";
                             }
                         }
                         else
                         {
                             custHdr.CUH_BL_NO = "Still not GRN";
                             custHdr.CUH_MARKS_AND_NO = "Still not GRN";
                         }
                         custHdr.CUH_CUSDEC_ENTRY_NO = string.Empty;

                         _custHdr = custHdr;
                         _custItems = custItems;
                         //_custItemsCost = custItemsCost;
                         _custItemsCost = null;
                         _custCost = custCost;
                         _custContainer = blContainers;
                         _msg = msg;
                         _rtnVal = 1;
                     }
                     else
                     {
                         _custHdr = null;
                         _custItems = null;
                         _custItemsCost = null;
                         _custCost = null;
                         _custContainer = null;
                         _msg = "Invalid Tobond No";
                     }
                 }
                 else
                 {
                     _custHdr = null;
                     _custItems = null;
                     _custItemsCost = null;
                     _custCost = null;
                     _custContainer = null;
                     _msg = "Invalid Request No";
                 }

                 return _rtnVal;
             }
             catch (Exception ex)
             {
                 _custHdr = null;
                 _custItems = null;
                 _custItemsCost = null;
                 _custCost = null;
                 _custContainer = null;
                 _msg = ex.Message.ToString();
                 return -1;
             }
         }

    }
}

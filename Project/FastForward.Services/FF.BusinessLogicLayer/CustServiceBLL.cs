using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using FF.BusinessObjects;
using FF.DataAccessLayer;
using FF.Interfaces;
using System.Net.Mail;
using System.Text.RegularExpressions;
using System.IO;
using System.ComponentModel;
using FF.BusinessObjects.CustService;
using FF.BusinessObjects.Services;
using FF.BusinessObjects.TempObject;
using System.Text;
using FF.BusinessObjects.General;
using FF.BusinessObjects.Inventory;

namespace FF.BusinessLogicLayer
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    public class CustServiceBLL : ICustService
    {
        public InventoryDAL _inventoryDAL = null;

        public CustServiceDAL _custServiceDAL = null;
        public GeneralDAL _generalDAL = null;
        public SalesDAL _salesDAL = null;
        public ReptCommonDAL _inventoryRepDAL = null;
        public SCMCommonDAL _ScmCommonDAL = null;
        public FMS_InventoryDAL _fmsInventoryDal = null;
        public SecurityDAL _securityDAL = null;
        public CommonSearchDAL _commonSearchDAL = null;
        public ReptDAL _reportDAL = null;




        //Chamal 26-Sep-2014
        public int Sample01(string _com, string _pc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Sample01(_com, _pc);
        }

        public DataTable Get_oldpart_byjob(string _com, string _job)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Get_oldpart_byjob(_com, _job);
        }
        public string InsuranceForServiceReport(string _com,  DateTime _from, DateTime _to, string _user, out string _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _custServiceDAL = new CustServiceDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("InsuranceForServiceReport") == true) _custServiceDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _custServiceDAL.InsuranceForServiceReport(_com, drow["tpl_pc"].ToString(), _from, _to);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }
        public List<Service_Purchase_Approval> GetServicePOApp(string _job, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServicePOApp(_job, _line);
        }

        public DataTable getServicejobDetBySer(string _ser)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getServicejobDetBySer(_ser);
        }
        public DataTable get_receipt_byjobno(string _com, string _jobno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_receipt_byjobno(_com, _jobno);
        }
        //kapila
        public DataTable Get_Job_Item_grade_Val(string _com, DateTime _date, string _item)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Get_Job_Item_grade_Val(_com, _date, _item);
        }
        //kapila
        public DataTable get_gatepass_byjob(string _job, DateTime _date)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_gatepass_byjob(_job, _date);
        }
        //kapila
        public DataTable sp_get_pcbyloc_details(string _com, string _loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_pcbyloc_details(_com, _loc);
        }

        //kapila
        public DataTable get_SCV_CLS_ALW_LOC(string _com, string _loc, string _type, Int32 _isDef, string _alwloc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_SCV_CLS_ALW_LOC(_com, _loc, _type, _isDef, _alwloc);
        }
        public DataTable get_JobHeader(string _job)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_JobHeader(_job);
        }


        //kapila
        public List<InvoiceItem> GetSCMInvDetails(string _invoice, string _itm, string _ser)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSCMInvDetails(_invoice, _itm, _ser);
        }
        //kapila
        public string GetServiceSupplierWarranty_Excel(string _com, string _loc, string _supp, string _cat1, string _cat2, string _cat3, string _model, string _brand, string _item, DateTime _fdate, DateTime _tdate, string _doctp, string _user, out string _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _custServiceDAL = new CustServiceDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _custServiceDAL.GetServiceSupplierWarranty(_com, drow["tpl_pc"].ToString(), _supp, _cat1, _cat2, _cat3, _model, _brand, _item, _fdate, _tdate, _doctp);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;
        }

        //kapila
        public Int32 UpdateAcceptedPendJobs(List<Service_Job_StageLog> oMainList)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                foreach (Service_Job_StageLog oLog in oMainList)
                {
                    int Effect = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    int Effect2 = _custServiceDAL.Update_JobDetailStage(oLog.SJL_JOBNO, oLog.SJL_JOBLINE, oLog.SJL_JOBSTAGE);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();



                return 1;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();

                _effects = -1;
                return _effects;
            }
        }

        //Sanjeewa 2017-01-05
        public Int32 UpdateAgreementSession(string _agreeNo, int _agreeline, int _agreeSession, string _ReqNo)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                int Effect = _custServiceDAL.UpdateAgreementSession(_agreeNo, _agreeline, _agreeSession, _ReqNo);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return 1;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();

                _effects = -1;
                return _effects;
            }
        }

        //kapila
        public DataTable GetAcceptPendingJobs(string _com, string _pc, string _ser, string _job, string _tech, string _chnl, Int32 _istech, decimal _stage)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetAcceptPendingJobs(_com, _pc, _ser, _job, _tech, _chnl, _istech, _stage);
        }

        //kapila
        public DataTable GetPendingAcceptanceStatus(string _com, string _loc, string _cat)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetPendingAcceptanceStatus(_com, _loc, _cat);
        }

        public DataTable getTransportMethod()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getTransportMethod();
        }
        //kapila
        public DataTable getAllocatedPendingJobs(string _com, string _empCd, Int32 _istech, string _chnl, DateTime _fdate, DateTime _tdate)
        {
            _custServiceDAL = new CustServiceDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("PendingJobInq") == true) _custServiceDAL.ConnectionOpen_DR();
            return _custServiceDAL.getAllocatedPendingJobs(_com, _empCd, _istech, _chnl, _fdate, _tdate);
        }
        //kapila
        public DataTable getNotAllocatedJobs(string _com, string _loc, DateTime _fdate, DateTime _tdate)
        {
            _custServiceDAL = new CustServiceDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("PendingJobInq") == true) _custServiceDAL.ConnectionOpen_DR();
            return _custServiceDAL.getNotAllocatedJobs(_com, _loc, _fdate, _tdate);
        }
        //kapila
        public Int32 UPD_TMP_ISSUE_RET(List<Service_TempIssue> oMainList)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                foreach (Service_TempIssue item in oMainList)
                {
                    _effects += _custServiceDAL.UPD_TMP_ISSUE_RET(item.STI_COM, item.STI_LOC, item.STI_ISSUEITMCD, item.STI_ISSUESERIALNO, item.STI_DOC_TP);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();



                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();

                _effects = -1;
                return _effects;
            }
        }
        //kapila
        public Boolean IsWarReplaceFound(string _jobno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.IsWarReplaceFound(_jobno);
        }
        public Boolean IsWarReplaceFound_Exchnge(string _jobno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.IsWarReplaceFound_Exchnge(_jobno);
        }
        public DataTable GetSCVReqData(string reqNo, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSCVReqData(reqNo, com);
        }

        public DataTable GetJobConfByJob(string _com, string _jobNo, string _confNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobConfByJob(_com, _jobNo, _confNo);
        }
        public Int32 DeleteCustFeedback(String job, Int32 Line)
        {
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            Int32 _eff = _custServiceDAL.DeleteCustFeedback(job, Line);
            _custServiceDAL.ConnectionClose();
            return _eff;
        }
        public DataTable getCreditNote4PendingSRN(string _com, DateTime _from, DateTime _to, string _delLoc, string _custCd, string _invno, Int32 _isDelAny)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getCreditNote4PendingSRN(_com, _from, _to, _delLoc, _custCd, _invno, _isDelAny);
        }
        public DataTable GetCustJobFeedback(string _jobno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustJobFeedback(_jobno);
        }

        public Int32 SAVE_SCV_JOBCUS_FEED(string _sjf_jobno, Int32 _sjf_jobline, DateTime _sjf_date, string _sjf_cuscd, string _sjf_feedback, string _sjf_cre_by, Int32 _sjf_jb_type, Int32 sjf_jb_stage, Int32 sjf_infm_all, Int32 sjf_infm_tech, Int32 sjf_is_sms,string com, string pc)
        {
            _custServiceDAL = new CustServiceDAL();
          //  _generalDAL = new GeneralDAL();
            _custServiceDAL.ConnectionOpen();
           // _generalDAL.ConnectionOpen();

            int _eff = _custServiceDAL.SAVE_SCV_JOBCUS_FEED(_sjf_jobno, _sjf_jobline, _sjf_date, _sjf_cuscd, _sjf_feedback, _sjf_cre_by, _sjf_jb_type, sjf_jb_stage, sjf_infm_all, sjf_infm_tech, sjf_is_sms);
            _custServiceDAL.ConnectionClose();

            //Tharindu 2018-07-10
            //if (_eff == 1)
            //{
            //    //send SMS 
            //    List<MsgInformation> _msg = new List<MsgInformation>();
            ////    _msg = _generalDAL.GetMsgForCustCom(com, pc, "TEST", _sjf_jobno);

            //    if (_msg != null)
            //        if (_msg.Count > 0)
            //        {
            //            foreach (MsgInformation _info in _msg)
            //            {
            //                string _mg = "Customer Comment For job # " + _sjf_jobno + "" + _sjf_feedback + " ";
            //                OutSMS _out = new OutSMS();
            //                _out.Msg = _mg;
            //                _out.Msgstatus = 0;
            //                _out.Msgtype = _info.Mmi_msg_tp;
            //                _out.Receivedtime = DateTime.Now;
            //                _out.Receiver = _info.Mmi_receiver;
            //                //_out.Receiverphno = _info.Mmi_mobi_no; //Edit by Chamal 31-Mar-2015
            //                _out.Senderphno = _info.Mmi_mobi_no;
            //                _out.Refdocno = _sjf_jobno;
            //                _out.Sender = "ABANS";
            //                _out.Createtime = DateTime.Now;
            //                _generalDAL.SaveSMSOut(_out);

            //            }
            //        }

            //    _generalDAL.TransactionCommit();
            //}

            return _eff;
        }

        public Int32 upd_brnd_man_alloc(string _com, string _man)
        {
            Int32 _eff = 0;
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            _eff = _custServiceDAL.upd_brnd_man_alloc(_com, _man);
            _custServiceDAL.ConnectionClose();
            return _eff;
        }

        public int GetScvAgreement(string _com, string _AgrNo, out SCV_AGR_HDR _agrHdr, out List<SCV_AGR_ITM> _agrDet, out List<SCV_AGR_SES> _agrSess, out List<scv_agr_cha> _agrCha, out List<scv_agr_payshed> _agrPayShed, out string _returnMsg)
        {

            _custServiceDAL = new CustServiceDAL();
            int _rtnStatus = 0;
            string _rtnMsg = string.Empty;

            _agrSess = new List<SCV_AGR_SES>();


            _agrHdr = _custServiceDAL.GetServiceAgrHeader(_AgrNo);
            if (_agrHdr == null)
            { _returnMsg = "Invalid Agreement No"; _agrHdr = null; _agrDet = null; _agrSess = null; _agrCha = null; _agrPayShed = null; return _rtnStatus; }

            _agrDet = _custServiceDAL.GetServiceAgrItems(_AgrNo);

            _agrSess = _custServiceDAL.GetServiceAgrSessions(_AgrNo);

            _agrCha = _custServiceDAL.GetServiceAgrCharges(_AgrNo);

            _agrPayShed = _custServiceDAL.GetServiceAgrPayShed(_AgrNo);


            _returnMsg = _rtnMsg;
            return 1;

        }

        public DataTable getBrandMgrAlloc(string _com, string _man)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getBrandMgrAlloc(_com, _man);
        }
        public DataTable getAgrNo4ReqGen(string _com, string _pc, DateTime _from, DateTime _to, string _agrNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getAgrNo4ReqGen(_com, _pc, _from, _to, _agrNo);
        }

        public DataTable getAgrNoInv(string _com, string _pc, DateTime _from, DateTime _to)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getAgrNoInv(_com, _pc, _from, _to);
        }

        public List<scv_agr_payshed> getAgrPay(string _Agree)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getAgrPay(_Agree);
        }
        public List<scv_agr_cha> getAgrItem(string _Agree)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getAgrItem(_Agree);
        }

        public DataTable getAgreementItems(string _agrno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getAgreementItems(_agrno);
        }
        public DataTable getAgrDetailsGenReq(string _agrno, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getAgrDetailsGenReq(_agrno, _line);
        }
        public Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>> GetWarrantyMasterAgr(string _ser1, string _ser2, string _regno, string _warr, string _invoice, string _item, int _serid, out int _returnStatus, out string _returnMsg)
        {
            try
            {
                Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>> _result = new Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>>();
                List<InventorySerialMaster> _warrDet = null;
                List<InventorySubSerialMaster> _warrDetSub = null;
                _custServiceDAL = new CustServiceDAL();
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();

                int _rtnStatus = 0;
                string _rtnMsg = string.Empty;

                _warrDet = _custServiceDAL.GetWarrantyMaster(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
                if (_warrDet == null)
                {
                    _rtnStatus = 1;
                    _rtnMsg = "There is no warranty details available.";
                    _returnMsg = _rtnMsg;
                    _returnStatus = _rtnStatus;
                    return null;
                }
                if (_warrDet.Count <= 0)
                {
                    _rtnStatus = 1;
                    _rtnMsg = "There is no warranty details available.";
                    _returnMsg = _rtnMsg;
                    _returnStatus = _rtnStatus;
                    return null;
                }
                else
                {
                    foreach (InventorySerialMaster _mst in _warrDet)
                    {
                        bool _custFound = false;
                        if (!string.IsNullOrEmpty(_mst.Irsm_cust_cd) && _mst.Irsm_cust_cd != "CASH")
                        {
                            //Check is SCM2 invoice
                            GroupBussinessEntity _custGrup = null;
                            _custGrup = _salesDAL.GetCustomerProfileByGrup(_mst.Irsm_cust_cd, "", "", "", "", "");
                            if (!string.IsNullOrEmpty(_custGrup.Mbg_cd))
                            {
                                _mst.Irsm_cust_cd = _custGrup.Mbg_cd;
                                _mst.Irsm_cust_prefix = _custGrup.Mbg_tit;
                                _mst.Irsm_cust_name = _custGrup.Mbg_name;
                                _custFound = true;
                            }
                        }

                        if (!string.IsNullOrEmpty(_mst.Irsm_invoice_no))
                        {
                            InvoiceHeader _invHdr = new InvoiceHeader();
                            _invHdr = _salesDAL.GetInvoiceHeader(_mst.Irsm_invoice_no);

                            if (_invHdr == null)
                            {
                                _invHdr = new InvoiceHeader();
                                DataTable _dt = _salesDAL.GetInvoiceHeaderSCM(_mst.Irsm_invoice_no);
                                if (_dt != null)
                                {
                                    if (_dt.Rows.Count > 0)
                                    {
                                        for (int i = 0; i < _dt.Rows.Count; i++)
                                        {
                                            _invHdr.Sah_cus_cd = _dt.Rows[i]["CUSTOMER_CODE"].ToString();
                                            _invHdr.Sah_pc = _dt.Rows[i]["PROFIT_CENTER_CODE"].ToString();
                                            _invHdr.Sah_com = _dt.Rows[i]["COMPANY_CODE"].ToString();
                                            break;
                                        }
                                    }
                                }
                            }

                            if (_invHdr != null)
                            {
                                if (_custFound == false)
                                {
                                    //Check is SCM2 invoice
                                    MasterBusinessEntity _cust = null;
                                    _cust = _salesDAL.GetAllCustomerProfileByCom(_invHdr.Sah_cus_cd, "", "", "", "", _invHdr.Sah_com, "C");
                                    if (!string.IsNullOrEmpty(_cust.Mbe_cd))
                                    {
                                        _mst.Irsm_cust_cd = _cust.Mbe_cd;
                                        _mst.Irsm_cust_prefix = _cust.MBE_TIT;
                                        _mst.Irsm_cust_name = _cust.Mbe_name;
                                    }
                                }
                            }
                        }



                        DataTable LocDes = _salesDAL.getLocDesc("", "", _mst.Irsm_loc);
                        foreach (DataRow row2 in LocDes.Rows)
                        {
                            _mst.Irsm_loc_desc = row2["descp"].ToString();
                        }



                        if (!string.IsNullOrEmpty(_mst.Irsm_orig_supp))
                        {
                            GroupBussinessEntity _supp = null;
                            _supp = _salesDAL.GetCustomerProfileByGrup(_mst.Irsm_orig_supp, "", "", "", "", "");
                            if (_supp != null) _mst.Irsm_exist_supp = _supp.Mbg_name;
                        }

                        MasterItem _itm = _inventoryDAL.GetItem("", _mst.Irsm_itm_cd);
                        _mst.Irsm_anal_3 = _itm.Mi_itm_tp;
                        _mst.Irsm_anal_4 = _itm.Mi_cate_1;
                        if (_itm.Mi_is_scansub == true)
                        {
                            _warrDetSub = _custServiceDAL.GetWarrantyMasterSub(_mst.Irsm_warr_no, 0);
                            foreach (InventorySubSerialMaster _subSer in _warrDetSub)
                            {
                                MasterItem _itm0 = _inventoryDAL.GetItem("", _subSer.Irsms_itm_cd);
                                _subSer.Irsms_warr_no = _itm0.Mi_longdesc;
                            }
                        }

                        _mst.PartNumber = _itm.Mi_part_no;
                        _mst.InssuranceRemark = _custServiceDAL.GET_OTH_WRR_REMARK(_mst.Irsm_itm_cd, _mst.Irsm_ser_1);

                        GroupBussinessEntity _custGrup1 = null;
                        _custGrup1 = _salesDAL.GetCustomerProfileByGrup(_mst.Irsm_cust_cd, "", "", "", "", "");
                        if (string.IsNullOrEmpty(_custGrup1.Mbg_cd))
                        {
                            _mst.Irsm_cust_cd = "CASH";
                        }

                    }
                }

                _returnStatus = _rtnStatus;
                _returnMsg = _rtnMsg;
                _result.Add(_warrDet, _warrDetSub);
                return _result;
            }
            catch (Exception ex)
            {
                _returnStatus = -1;
                _returnMsg = ex.Message.ToString();
                return null;
            }
        }

        public DataTable GetJobTaskByJob(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobTaskByJob(Com, job, jobline);
        }

        public Int32 updateAgreement(string _agrno, string _stus, string _user)
        {
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            int _eff = _custServiceDAL.updateAgreement(_agrno, _stus, _user);
            _custServiceDAL.ConnectionClose();
            return _eff;
        }
        public DataTable getJobTechnician(string _jobno, string _com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getJobTechnician(_jobno, _com);
        }
        //public Int32 Process_Service_Agreement(SCV_AGR_HDR oHeader, MasterAutoNumber _Auto, List<SCV_AGR_ITM> oAgrItems, List<SCV_AGR_SES> oAgrSes, List<SCV_AGR_COVER_ITM> oAgrCovItm, InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, List<InvoiceSerial> _invoiceSerial, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, out string GenAgr)
        //{
        //    Int32 _effects = 0;
        //    bool isInsert = true;
        //    try
        //    {
        //        _custServiceDAL = new CustServiceDAL();
        //        _custServiceDAL.ConnectionOpen();
        //        _custServiceDAL.BeginTransaction();

        //        _inventoryDAL = new InventoryDAL();
        //        _inventoryDAL.ConnectionOpen();
        //        _inventoryDAL.BeginTransaction();

        //        _salesDAL = new SalesDAL();
        //        _salesDAL.ConnectionOpen();
        //        _salesDAL.BeginTransaction();

        //        _generalDAL = new GeneralDAL();
        //        _generalDAL.ConnectionOpen();
        //        _generalDAL.BeginTransaction();

        //        int GenSeq = -99;

        //        if (oHeader.Sag_seq_no == -99)
        //        {
        //            oHeader.Sag_seq_no = _custServiceDAL.GetEstimateSeq();
        //        }

        //        string _ESTNO = string.Empty;
        //        if (oHeader.Sag_agr_no == "" || oHeader.Sag_agr_no == null)
        //        {
        //            MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_Auto.Aut_moduleid, _Auto.Aut_direction, _Auto.Aut_start_char, _Auto.Aut_cate_tp, _Auto.Aut_cate_cd, _Auto.Aut_modify_dt, _Auto.Aut_year);

        //            _reversInv.Aut_direction = null;
        //            _reversInv.Aut_modify_dt = null;
        //            _ESTNO = _reversInv.Aut_cate_cd + "-" + _reversInv.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

        //            _inventoryDAL.UpdateAutoNumber(_reversInv);

        //            oHeader.Sag_agr_no = _ESTNO;
        //            isInsert = true;
        //            int resultHDr = _custServiceDAL.SaveAgreementHeader(oHeader);
        //            GenAgr = _ESTNO;
        //        }
        //        else
        //        {
        //            isInsert = false;
        //            _ESTNO = oHeader.Sag_agr_no;
        //            _custServiceDAL.SaveAgreementHeader(oHeader);
        //            GenSeq = oHeader.Sag_seq_no;
        //            GenAgr = oHeader.Sag_agr_no;
        //        }

        //        foreach (SCV_AGR_ITM item in oAgrItems)
        //        {
        //            if (isInsert == true)
        //                item.Sai_seq_no = oHeader.Sag_seq_no;

        //            item.Sai_agr_no = _ESTNO;
        //            _effects += _custServiceDAL.SaveAgreementItem(item);

        //        }

        //        foreach (SCV_AGR_SES sess in oAgrSes)
        //        {
        //            if (isInsert == true)
        //                sess.Saga_seq_no = oHeader.Sag_seq_no;

        //            sess.Saga_agr_no = _ESTNO;
        //            _effects += _custServiceDAL.SaveAgreementSess(sess);

        //        }
        //        foreach (SCV_AGR_COVER_ITM _cov in oAgrCovItm)
        //        {
        //            if (isInsert == true)
        //                _cov.Saic_seq_no = oHeader.Sag_seq_no;

        //            _cov.Saic_agr_no = _ESTNO;
        //            _effects += _custServiceDAL.SaveAgreementCoverItem(_cov);

        //        }

        //        SalesBLL _salesBLL = new SalesBLL();
        //        string _invNo = "";
        //        string _DONo = "";
        //        string _recNo = "";
        //        string _error = "";
        //        string _invoiceSeq = "";
        //        string _recieptSeq = "";
        //        InventoryHeader _invHdr = new InventoryHeader();
        //        DataTable _dataTable = null;

        //        if (_recieptHeader.Sar_tot_settle_amt > 0)
        //            _salesBLL.Service_SaveInvoiceWithDeliveryOrderWithTransaction(_invoiceHeader, _invoiceItem, _invoiceSerial, _recieptHeader, _recieptItem, null, null, null, _invoiceAuto, _recieptAuto, null, false, out _invNo, out _recNo, out _DONo, _inventoryDAL, _salesDAL, _generalDAL, _inventoryRepDAL, false, false, out _error, false, out _invoiceSeq, out _recieptSeq, out _invHdr, out _dataTable);

        //        if (!string.IsNullOrEmpty(_error))
        //        {
        //            _custServiceDAL.TransactionRollback();
        //            _inventoryDAL.TransactionRollback();
        //            _salesDAL.TransactionRollback();
        //            _effects = -1;
        //            GenAgr = _error;
        //            return _effects;
        //        }

        //        _custServiceDAL.TransactionCommit();
        //        _custServiceDAL.ConnectionClose();

        //        _inventoryDAL.TransactionCommit();
        //        _inventoryDAL.ConnectionClose();

        //        _salesDAL.TransactionCommit();
        //        _salesDAL.ConnectionClose();

        //        _generalDAL.TransactionCommit();
        //        _generalDAL.ConnectionClose();

        //        return _effects;
        //    }
        //    catch (Exception ex)
        //    {
        //        _custServiceDAL.TransactionRollback();
        //        _inventoryDAL.TransactionRollback();
        //        _salesDAL.TransactionRollback();
        //        _generalDAL.TransactionRollback();
        //        _effects = -1;
        //        GenAgr = ex.Message;
        //        return _effects;
        //    }
        //}

        public DataTable GetRecByJobline(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetRecByJobline(Com, job, jobline);
        }

        public DataTable GetAgrClaimType(string _code)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetAgrClaimType(_code);
        }
        public DataTable GetAgrType(string _code)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetAgrType(_code);
        }
        public DataTable GetEstiByJobline(string Com, string job, string _type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetEstiByJobline(Com, job, _type);
        }
        //kapila
        public int DeleteSatisVal(Int32 _seq, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            int _eff = _custServiceDAL.DeleteSatisVal(_seq, _line);
            _custServiceDAL.ConnectionClose();
            return _eff;
        }
        //kapila
        public Int32 Save_Supplier_Claim_Itm(List<Service_supp_claim_itm> _supClaimList, List<SCV_SUPP_CLAIM_REC> _lstamt, out string _msg)
        {
            Int32 result = 0;
            _msg = "";
            try
            {
                int SeqNum = 0;
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                if (_supClaimList[0].SSC_SEQ == 0)
                {
                    SeqNum = _custServiceDAL.GetSuppWaraSeq();
                }

                foreach (Service_supp_claim_itm _lst in _supClaimList)
                {
                    _lst.SSC_SEQ = SeqNum;
                    result = _custServiceDAL.Save_Supplier_Claim_Itm(_lst);
                }

                foreach (SCV_SUPP_CLAIM_REC _lst in _lstamt)
                {
                    _lst.Scc_seq = SeqNum;
                    result = _custServiceDAL.Save_Supplier_Claim_Amt(_lst);
                }


                _custServiceDAL.TransactionCommit();
                result = 1;
                _msg = string.Empty;

            }
            catch (Exception ex)
            {
                result = -1;
                _msg = ex.Message;
                _custServiceDAL.TransactionRollback();
                _custServiceDAL.ConnectionClose();
            }
            return result;
        }

        public DataTable GetTempIssueItemsByJobline(string Com, string job, Int32 jobline, string _type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetTempIssueItemsByJobline(Com, job, jobline, _type);
        }
        //kapila
        public DataTable GetJobMRNByJobline(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobMRNByJobline(Com, job, jobline);
        }
        public DataTable GetJobTaskByJobline(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobTaskByJobline(Com, job, jobline);
        }
        public DataTable GetReqByJobline(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetReqByJobline(Com, job, jobline);
        }

        public DataTable GetReceiptByJobNo(string _job, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetReceiptByJobNo(_job, _line);
        }
        public DataTable GetJobServiceCharge(string _job, Int32 _line, string _cust)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobServiceCharge(_job, _line, _cust);
        }

        public DataTable GetPartRemoveByJobline(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetPartRemoveByJobline(Com, job, jobline);
        }

        public Int32 Save_Cust_Satis(List<SCV_JOB_SATIS> _jobSatis, out string _err)
        {
            int effect = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                foreach (SCV_JOB_SATIS _lst in _jobSatis)
                {
                    int _eff = _custServiceDAL.SaveCustomerSatis(_lst);
                }
                _custServiceDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;

            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _custServiceDAL.TransactionRollback();
            }
            return effect;

        }
        public DataTable GetCustSatisReplyVal(string _com, string _chnl, Int32 _issms, string _job)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustSatisReplyVal(_com, _chnl, _issms, _job);
        }

        //kapila
        public DataTable GetCustSatisByChnl(string _com, string _chnl, Int32 _issms)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustSatisByChnl(_com, _chnl, _issms);
        }

        //kapila
        public Int32 UpdateCustomerQuest(Int32 ssq_seq, string ssq_com, string ssq_schnl, string ssq_quest, Int32 ssq_act, string ssq_cre_by, Int32 ssq_issms)
        {
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            Int32 _ef = _custServiceDAL.UpdateCustomerQuest(ssq_seq, ssq_com, ssq_schnl, ssq_quest, ssq_act, ssq_cre_by, ssq_issms);
            _custServiceDAL.ConnectionClose();
            return _ef;
        }

        public Int32 UpdateCustomerQSatis(Int32 ssv_seq, Int32 ssv_line, string ssv_desc, string ssv_grade, Int32 ssv_act, string ssv_cre_by)
        {
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            Int32 _ef = _custServiceDAL.UpdateCustomerQSatis(ssv_seq, ssv_line, ssv_desc, ssv_grade, ssv_act, ssv_cre_by);
            _custServiceDAL.ConnectionClose();
            return _ef;
        }

        public DataTable GetCustQuestData(Int32 _seq)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustQuestData(_seq);
        }
        public DataTable GetCustSatisfData(Int32 _seq, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustSatisfData(_seq, _line);
        }
        //kapila
        public DataTable ReorderItemsPrint(string _com, string _user, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3, Int32 _withStores)
        {
            _custServiceDAL = new CustServiceDAL();
            _securityDAL = new SecurityDAL();       //kapila 17/12/2015
            if (_securityDAL.Is_Report_DR("ReorderReport") == true) _custServiceDAL.ConnectionOpen_DR();
            return _custServiceDAL.ReorderItemsPrint(_com, _user, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3, _withStores);
        }

        //kapila
        public Int32 Update_SCV_Req_Hdr(string _reqno)
        {
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            Int32 _ef = _custServiceDAL.Update_SCV_Req_Hdr(_reqno);
            _custServiceDAL.ConnectionClose();
            return _ef;
        }
        //kapila
        public Boolean IsJobOpenReq(string _reqno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.IsJobOpenReq(_reqno);
        }

        public Int32 Save_Req(Service_Req_Hdr _jobHdr, List<Service_Req_Det> _jobItems, List<Service_Req_Def> _jobDefList, List<Service_Req_Det_Sub> _jobDetSubList, MasterAutoNumber _recAuto, string _sbChnl, string _itemType, string _brand, Int32 _warStus, MasterAutoNumber _masterAuto, out string _err, out string _jNo, Int32 _isProcess, DateTime _fromDate, DateTime _toDate)
            
        {
            int effect = 0;
            string _jobNo = "";
            string _com = _jobHdr.Srb_com;
            string _docMonth = _jobHdr.Srb_dt.ToString("MM"); string _docYear = _jobHdr.Srb_dt.ToString("yy"); string _docDate = _jobHdr.Srb_dt.ToString("dd");
            string _reqCate = "";
            int SeqNo = 0;
            int _jobItmLine = 1;
            int _subLine = 0;

            _jNo = string.Empty;

            _custServiceDAL = new CustServiceDAL();
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();

            _custServiceDAL.ConnectionOpen();

            foreach (Service_Req_Det _lstJob in _jobItems)
            {
                if (_lstJob.Jrd_isexternalitm == 0)
                {
                    MasterItem _mitm = _inventoryDAL.GetItem("", _lstJob.Jrd_itm_cd);
                    if (_mitm.Mi_is_ser1 == 1)
                    {
                        //#region Get Supplier
                        //if (string.IsNullOrEmpty(_lstJob.Jrd_supp_cd) || _lstJob.Jrd_supp_cd.ToUpper() == "N/A")
                        //{
                        //    DataTable _dtSupp = new DataTable();
                        //    _dtSupp = _generalDAL.GetSerialSupplierCode(_jobHdr.Srb_com, _lstJob.Jrd_itm_cd, _lstJob.Jrd_ser1, 1);
                        //    if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                        //    {
                        //        for (int i = 0; i < _dtSupp.Rows.Count; i++)
                        //        {
                        //            _lstJob.Jrd_supp_cd = _dtSupp.Rows[i]["EXPORTER"].ToString();
                        //            break;
                        //        }
                        //    }
                        //    else
                        //    {
                        //        _dtSupp = new DataTable();
                        //        _dtSupp = _generalDAL.GetSerialSupplierCode(_jobHdr.Srb_com, _lstJob.Jrd_itm_cd, _lstJob.Jrd_ser1, 2);
                        //        if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                        //        {
                        //            for (int j = 0; j < _dtSupp.Rows.Count; j++)
                        //            {
                        //                _lstJob.Jrd_supp_cd = _dtSupp.Rows[j]["EXPORTER"].ToString();
                        //                break;
                        //            }
                        //        }
                        //    }
                        //}
                        //#endregion
                        #region Get Serial ID
                        List<InventorySerialMaster> _serMst = _custServiceDAL.GetWarrantyMasterSCM2(_lstJob.Jrd_itm_cd, _lstJob.Jrd_ser1, null, null, null, null, 0);
                        if (_serMst != null && _serMst.Count > 0)
                        {
                            _lstJob.Jrd_ser_id = _serMst[0].Irsm_ser_id.ToString();
                        }
                        else
                        {
                            //_custServiceDAL.Save_Inr_SerMst_Bulk(_lstJob.Jrd_warr); 
                        }
                        #endregion
                    }

                }
            }

            _custServiceDAL.ConnectionClose();
            _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

            int jobSeqNo = _custServiceDAL.GetJobSerialID();
            _jobHdr.Srb_seq_no = jobSeqNo;

            if (string.IsNullOrEmpty(_jobHdr.Srb_reqno))
            {
                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);

                _jobNo = _masterAuto.Aut_cate_cd + "-" + _masterAuto.Aut_start_char + "-" + string.Format("{0:0000}", _number.Aut_number);
                _inventoryDAL.UpdateAutoNumber(_masterAuto);//update MST_AUTO table
            }
            else
                _jobNo = _jobHdr.Srb_reqno;

            _jobHdr.Srb_reqno = _jobNo;


            effect = _custServiceDAL.SaveRequestHeader(_jobHdr);

            //updated by akila 2017/07/13
            #region New Code
            if ((_jobItems != null) && (_jobItems.Count > 0))
            {
            foreach (Service_Req_Det _lstJob in _jobItems)
            {
                //_jobDefList.Where(x => x.SRD_JOB_LINE == _lstJob.Jrd_jobline).ToList().ForEach(x => x.SRD_JOB_LINE = _jobItmLine);

                _lstJob.Jrd_seq_no = _jobHdr.Srb_seq_no;
                _lstJob.Jrd_reqno = _jobNo;
                _lstJob.Jrd_stage = Convert.ToInt32(_jobHdr.Srb_jobstage);
                _lstJob.Jrd_sjobno = _jobNo + "-" + _lstJob.Jrd_jobline;
                effect = _custServiceDAL.SaveRequestDetail(_lstJob);
            }
            }

            if ((_jobDefList != null) && (_jobDefList.Count > 0))
            {
            foreach (Service_Req_Def _lstJobDef in _jobDefList)
            {
                _lstJobDef.Srdf_seq_no = _jobHdr.Srb_seq_no;
                _lstJobDef.Srdf_req_no = _jobNo;
                _lstJobDef.Srdf_stage = "J";
                _lstJobDef.Srdf_cre_by = _jobHdr.Srb_cre_by;
                _lstJobDef.Srdf_mod_by = _jobHdr.Srb_cre_by;
                _lstJobDef.Srdf_act = true;
                Int32 eff1 = _custServiceDAL.SaveRequestDefDetail(_lstJobDef);
                _subLine++;
            }
            }

            #endregion

            #region Old Code
            //foreach (Service_Req_Det _lstJob in _jobItems)
            //{
            //    //_jobDefList.Where(x => x.SRD_JOB_LINE == _lstJob.Jrd_jobline).ToList().ForEach(x => x.SRD_JOB_LINE = _jobItmLine);

            //    _lstJob.Jrd_seq_no = _jobHdr.Srb_seq_no;
            //    _lstJob.Jrd_reqno = _jobNo;
            //    _lstJob.Jrd_stage = Convert.ToInt32(_jobHdr.Srb_jobstage);
            //    //_lstJob.Jrd_sjobno = _jobNo + "-" + _jobItmLine;
            //    //_lstJob.Jrd_jobline = _jobItmLine;

            //    _lstJob.Jrd_sjobno = _jobNo + "-" + _lstJob.Jrd_jobline;

            //    //if (_jobHdr.SJB_RECALL == 2) if (_lstJob.Jrd_jobline == 1) _lstJob.Jrd_act = 0;
            //    //if (_lstJob.Jrd_isstockupdate == 1)
            //    //{
            //    //    _isStockUpdate = true;
            //    //    _aodOutNo = _lstJob.Jrd_aodissueno;
            //    //    _aodOutLoc = _lstJob.Jrd_aodissueloc;
            //    //    _aodInLoc = _lstJob.Jrd_loc;
            //    //}

            //    effect = _custServiceDAL.SaveRequestDetail(_lstJob);
            //    //if (!string.IsNullOrEmpty(_lstJob.Jrd_reqno)) effect = _custServiceDAL.UpdateRequestItemViaJob(_lstJob);
            //    ////_jobItmLine = _jobItmLine + 1;

            //    //// THaraka 2015-01-28 Update warranty details
            //    //if (_jobHdr.JobCategori == 2 || _jobHdr.JobCategori == 3)
            //    //{
            //    //    int result = _custServiceDAL.UPDATE_INRSEMST_BY_WARR(_jobHdr.SJB_B_CUST_CD, _jobHdr.SJB_B_CUST_TIT, _jobHdr.SJB_B_CUST_NAME, _jobHdr.SJB_B_ADD1 + ", " + _jobHdr.SJB_B_ADD2 + ", " + _jobHdr.SJB_B_ADD3, _jobHdr.SJB_B_TOWN, _jobHdr.SJB_B_PHNO, _jobHdr.SJB_B_MOBINO, _lstJob.Jrd_warr);
            //    //    result = _custServiceDAL.UPDATE_INRSEMST_BY_WARR(_jobHdr.SJB_B_CUST_CD, _jobHdr.SJB_B_CUST_TIT, _jobHdr.SJB_B_CUST_NAME, _jobHdr.SJB_B_ADD1 + ", " + _jobHdr.SJB_B_ADD2 + ", " + _jobHdr.SJB_B_ADD3, _jobHdr.SJB_B_TOWN, _jobHdr.SJB_B_PHNO, _jobHdr.SJB_B_MOBINO, _lstJob.Jrd_warr);
            //    //}
            //}            

            //foreach (Service_Req_Def _lstJobDef in _jobDefList)
            //{
            //    _lstJobDef.Srdf_seq_no = _jobHdr.Srb_seq_no;
            //    _lstJobDef.Srdf_req_no = _jobNo;
            //    //_lstJobDef.SRD_JOB_LINE =_jobItmLine;
            //    _lstJobDef.Srdf_stage = "J";
            //    //_lstJobDef.SRD_DEF_LINE = _subLine;
            //    _lstJobDef.Srdf_cre_by = _jobHdr.Srb_cre_by;
            //    _lstJobDef.Srdf_mod_by = _jobHdr.Srb_cre_by;
            //    _lstJobDef.Srdf_act = true;
            //    Int32 eff1 = _custServiceDAL.SaveRequestDefDetail(_lstJobDef);
            //    _subLine++;
            //}
            #endregion

            if (_jobDetSubList != null)
            {
                if (_jobDetSubList.Count > 0)
                {
                    foreach (Service_Req_Det_Sub _lst in _jobDetSubList)
                    {
                        _lst.Jrds_seq_no = _jobHdr.Srb_seq_no;
                        _lst.Jrds_jobno = _jobNo;
                        MasterItem _mitm = _inventoryDAL.GetItem("", _lst.Jrds_itm_cd);
                        _lst.Jrds_brand = _mitm.Mi_brand;
                        _lst.Jrds_model = _mitm.Mi_model;
                        _lst.Jrds_cre_by = _jobHdr.Srb_cre_by;
                        _lst.Jrds_sjobno = _jobNo + "-" + _lst.Jrds_jobline;
                        _lst.Jrds_itm_cost = 0;
                        //     effect = _custServiceDAL.SAVE_SCV_JOB_DET_SUB(_lst);
                        _subLine++;
                    }
                }
            }

            if (_isProcess == 1)
            {
                _custServiceDAL.UpdateAgrSession(_jobHdr.Srb_otherref, _fromDate, _toDate, _jobNo);
            }

            _custServiceDAL.TransactionCommit();
            _inventoryDAL.TransactionCommit();

            
            //_custServiceDAL.TransactionCommit();
            //_inventoryDAL.TransactionCommit();

            _err = "Successfully Saved!\nSystem generated req no is " + _jobNo;

            effect = 1;
            _jNo = _jobNo;

            return effect;
        }

        public DataTable getSCVAGRITM_bySer(string _ser)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getSCVAGRITM_bySer(_ser);
        }
        //kapila
        public int GetScvReq(string _com, string _jobNo, out Service_Req_Hdr _jobHdr, out List<Service_Req_Det> _jobDet, out List<Service_Req_Det_Sub> _jobDetSub, out List<Service_Req_Def> _jobDef, out string _returnMsg)
        {

            _custServiceDAL = new CustServiceDAL();
            int _rtnStatus = 0;
            string _rtnMsg = string.Empty;

            _jobDef = new List<Service_Req_Def>();
            //_jobEmp = new List<Service_Tech_Aloc_Hdr>();
            //_jobTempIssue = new List<Service_TempIssue>();

            _jobHdr = _custServiceDAL.GetSCVReqHeader(_jobNo, _com);
            if (_jobHdr == null)
            { _returnMsg = "Invalid Job No"; _jobHdr = null; _jobDet = null; _jobDetSub = null; _jobDef = null; return _rtnStatus; }

            _jobDet = _custServiceDAL.GetSCVReqDetails(_jobNo, _com);
            if (_jobDet == null) { _returnMsg = "Job item not found"; ; _jobHdr = null; _jobDet = null; _jobDetSub = null; _jobDef = null; return _rtnStatus; }
            if (_jobDet.Count <= 0) { _returnMsg = "Job item not found"; ; _jobHdr = null; _jobDet = null; _jobDetSub = null; _jobDef = null; return _rtnStatus; }

            _jobDetSub = null;

            foreach (Service_Req_Det _det in _jobDet)
            {
                List<Service_Req_Def> _def = new List<Service_Req_Def>();
                _def = _custServiceDAL.GetSCVreqDefects(_jobNo, _det.Jrd_reqline);
                _jobDef.AddRange(_def);

                //List<Service_Tech_Aloc_Hdr> _emp = new List<Service_Tech_Aloc_Hdr>();
                //_emp = _custServiceDAL.GetJobAllocations(_jobNo, _det.Jrd_jobline, _com);
                //_jobEmp.AddRange(_emp);

                //List<Service_TempIssue> _issueItm = new List<Service_TempIssue>();
                //_issueItm = _custServiceDAL.Get_ServiceWIP_TempIssued_Items(_com, _jobNo, _det.Jrd_jobline, null, _det.Jrd_loc, "STBYI");
                //_jobTempIssue.AddRange(_issueItm);

            }

            _returnMsg = _rtnMsg;
            return 1;

        }


        public Int32 Save_Allocated_Employee(List<MasterServiceEmployee> lst_all_items, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _custServiceDAL.Save_Allocated_Employee(lst_all_items);
                _custServiceDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _custServiceDAL.TransactionRollback();
            }
            return effect;
        }

        public DataTable sp_get_job_hdrby_jobno(string _jobNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_job_hdrby_jobno(_jobNo);
        }

        public DataTable sp_get_job_category(string _jobcat)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_job_category(_jobcat);
        }

        public DataTable getServicejobDet(string _jobNo, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getServicejobDet(_jobNo, _line);
        }
        public DataTable getServicejobDef(string _jobNo, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getServicejobDef(_jobNo, _line);
        }
        public DataTable getServiceTempIssuItems(string _jobNo, Int32 _line, Int32 _visitline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getServiceTempIssuItems(_jobNo, _line, _visitline);
        }
        //--
        public DataTable sp_get_job_header(string _jobNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_job_header(_jobNo);
        }
        public DataTable get_agree_header(string _agreeNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_agree_header(_agreeNo);
        }
        public DataTable get_agree_item(string _agreeNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_agree_item(_agreeNo);
        }
        public DataTable get_agree_session(string _agreeNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_agree_session(_agreeNo);
        }
        public DataTable get_agree_charge(string _agreeNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_agree_charge(_agreeNo);
        }
        public DataTable getServiceJobUser(string _UserID)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getServiceJobUser(_UserID);
        }
        public DataTable get_profitcenter(string _com, string _pc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_profitcenter(_com, _pc);
        }
        public DataTable sp_get_Report_info_chnl(string _report, string _channel)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_Report_info_chnl(_report, _channel);
        }
        public DataTable sp_get_job_details(string _jobNo, string _type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_job_details(_jobNo, _type);
        }
        public DataTable sp_get_job_detailsSub(string _jobNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_job_detailsSub(_jobNo);
        }

        public string DFExchangeDetails1(DateTime _from, DateTime _to, string _com, int _isExport, string _reqtp, string _user, out string _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _custServiceDAL = new CustServiceDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _custServiceDAL.DFExchangeDetails(_from, _to, _com, drow["tpl_pc"].ToString(), _isExport, _reqtp);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public DataTable DFExchangeDetails(DateTime _from, DateTime _to, string _com, string _pc, int _isExport, string _reqtp)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.DFExchangeDetails(_from, _to, _com, _pc, _isExport, _reqtp);
        }
        public DataTable sp_get_job_defects(string _jobNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_job_defects(_jobNo);
        }
        public DataTable sp_get_com_details(string _comcode)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_com_details(_comcode);
        }
        public DataTable sp_get_loc_details(string _loccode)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_loc_details(_loccode);
        }

        public DataTable sp_get_locbypc_details(string _com, string _pc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_locbypc_details(_com, _pc);
        }
        public DataTable sp_get_gatepass_details(string _gpNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_gatepass_details(_gpNo);
        }

        public DataTable sp_get_gpOldpart_details(string _jobNo, Int32 _jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_gpOldpart_details(_jobNo, _jobline);
        }

        public DataTable sp_get_Estimate_details(string _EstNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_Estimate_details(_EstNo);
        }

        public DataTable sp_get_EstimateItem_details(string _EstNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_EstimateItem_details(_EstNo);
        }

        public DataTable sp_get_Estimatejobs(string _com, string _pc, DateTime _from, DateTime _to, string _estTp, string _cust, string _tech)
        {   // kapila
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_Estimatejobs(_com, _pc, _from, _to, _estTp, _cust, _tech);
        }
        public DataTable sp_get_Estimate_det(string _com, string _EstNo)
        {   // kapila
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_Estimate_det(_com, _EstNo);
        }
        public DataTable sp_get_EstimateItem_det(string _EstNo)
        {   // kapila
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_EstimateItem_det(_EstNo);
        }

        public DataTable getItemComponentDet()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getItemComponentDet();
        }

        public Int32 UpdateItemComponent(string _cat1, string _cat2, string _cat3, string _item, Int32 _qty, Int32 _war, Int32 _act, Int32 _isser, string _user)
        {
            CustServiceDAL _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            Int32 _eff = _custServiceDAL.UpdateItemComponent(_cat1, _cat2, _cat3, _item, _qty, _war, _act, _isser, _user);
            _custServiceDAL.ConnectionClose();
            return _eff;
        }

        public DataTable getJobStageByJobNo(string JOb, string Com, Int32 _isSCM2)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getJobStageByJobNo(JOb, Com, _isSCM2);
        }

        public Int32 Save_Allocated_Priority(List<scv_prit_task> lst_all_items, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _custServiceDAL.Save_Allocated_Priority(lst_all_items);
                _custServiceDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _custServiceDAL.TransactionRollback();
            }
            return effect;
        }

        public DataTable getPriorityDataByCode(string _code)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getPriorityDataByCode(_code);
        }

        public Int32 updatePriorityData(string _code, string _desc, Int32 _act, Int32 _def, string _color, string _user)
        {
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            Int32 _eff = _custServiceDAL.updatePriorityData(_code, _desc, _act, _def, _color, _user);
            _custServiceDAL.ConnectionClose();
            return _eff;
        }

        public DataTable getPriorityData()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getPriorityData();
        }

        public DataTable getChannelPara(string _com, string _code)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getChannelPara(_com, _code);
        }

        //kapila
        public List<Service_Confirm_detail> GetServiceConfirmDet(string _jobNo, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceConfirmDet(_jobNo, _line);
        }
        // Nadeeka (Fixed Connection issue) 09-10-2015
        public List<Service_Confirm_detail> GetServiceConfirmDetGP(string _jobNo, Int32 _line)
        {
            // _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceConfirmDet(_jobNo, _line);
        }


        // Nadeeka
        public List<Service_confirm_Header> GetConfDetByJobNo(string _com, string _jobNo, Int32 _jobLine)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetConfDetByJobNo(_com, _jobNo, _jobLine);
        }

        // Nadeeka
        public List<Service_Confirm_detail> GetServiceConfirmDetJob(string _jobNo, string _conNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceConfirmDetJob(_jobNo, _conNo);
        }

        // Nadeeka
        public DataTable geTechAllocationPending(string _com, string _userid)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.geTechAllocationPending(_com, _userid);
        }

        public DataTable getCustSatisData(string _com, string _schnl, string _code)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getCustSatisData(_com, _schnl, _code);
        }

        //kapila
        public Boolean IsJobLineInvoiced(string _jobno, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.IsJobLineInvoiced(_jobno, _line);
        }

        public Boolean checkFiedJob(string _jobno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.checkFiedJob(_jobno);
        }

        //kapila
        public Boolean IsCustAllwGatePassWOutInv(string _com, string _code)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.IsCustAllwGatePassWOutInv(_com, _code);
        }

        //kapila
        public DataTable getSerialIDByDocument(string _doc, string _item, string _ser)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getSerialIDByDocument(_doc, _item, _ser);
        }

        public DataTable PrintTechComments(string _com, string _pc, DateTime _from, DateTime _to, string _user, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3, string _job, string _coment, string _jobcat)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.PrintTechComments(_com, _pc, _from, _to, _user, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3, _job, _coment, _jobcat);
        }

        public DataTable PrintRepeatedJobs(string _com, string _pc, DateTime _from, DateTime _to, string _user, string in_Brand, string in_Model, string in_Itemcode, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3, string _ser, string _jobcat, Int32 _jobstus)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.PrintRepeatedJobs(_com, _pc, Convert.ToDateTime(_from).Date, Convert.ToDateTime(_to).Date, _user, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3, _ser, _jobcat, _jobstus);
            //_salesDAL = new SalesDAL();

            //DataTable GLOB_DataTable = new DataTable();

            //DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        DataTable TMP_INV_BAL = new DataTable();
            //        TMP_INV_BAL = _custServiceDAL.PrintRepeatedJobs(_com, drow["tpl_pc"].ToString(), Convert.ToDateTime(_from).Date, Convert.ToDateTime(_to).Date, _user, in_Brand, in_Model, in_Itemcode, in_Itemcat1, in_Itemcat2, in_Itemcat3,_ser);

            //        GLOB_DataTable.Merge(TMP_INV_BAL);
            //    }
            //}

            //return GLOB_DataTable;
        }

        public DataTable DefectAnalysisDetails(DateTime _from, DateTime _to, string _com, string _loc, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3, string in_defect, string in_Warrstatus, string _user)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.DefectAnalysisDetails(_from, _to, _com, _loc, in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3, in_defect, in_Warrstatus, _user);

        }

        public DataTable BERLetterDetails(string _jobno, string _type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.BERLetterDetails(_jobno, _type);
        }

        public DataTable JobSummaryDetails(DateTime _from, DateTime _to, string _com, string _loc, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
                    string in_Itemcat2, string in_Itemcat3, string _technician, string _jobcat, string _itemtp, Int16 _jobstatus, Int16 _warrstatus, string _jobno, string _user)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.JobSummaryDetails(_from, _to, _com, _loc, in_Itemcode, in_Brand, in_Model, in_Itemcat1,
            in_Itemcat2, in_Itemcat3, _technician, _jobcat, _itemtp, _jobstatus, _warrstatus, _jobno, _user);
        }

        public string JobProcessTrackingDetails(DateTime _from, DateTime _to, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
                    string in_Itemcat2, string in_Itemcat3, string _technician, string _jobcat, string _itemtp, decimal _jobstatus, string _warrstatus, string _jobno, string _user, string _option, int _export, string _origin, out string _err, int _chkw_cr_time, DateTime _create_from, DateTime _create_to)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _custServiceDAL = new CustServiceDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ProcessTracking") == true) _custServiceDAL.ConnectionOpen_DR();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _custServiceDAL.JobProcessTrackingDetails(_from, _to, _com, drow["tpl_pc"].ToString(), in_Itemcode, in_Brand, in_Model, in_Itemcat1,
                                in_Itemcat2, in_Itemcat3, _technician, _jobcat, _itemtp, _jobstatus, _warrstatus, _jobno, _user, _option, _export, _origin, _chkw_cr_time, _create_from, _create_to);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }


        public string JobDetails(DateTime _from, DateTime _to, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
                    string in_Itemcat2, string in_Itemcat3, string _technician, string _jobcat, string _itemtp, decimal _jobstatus, string _warrstatus, string _jobno, string _user, out string _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _custServiceDAL = new CustServiceDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ProcessTracking") == true) _custServiceDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _custServiceDAL.JobDetails(_from, _to, _com, drow["tpl_pc"].ToString(), in_Itemcode, in_Brand, in_Model, in_Itemcat1,
                                in_Itemcat2, in_Itemcat3, _technician, _jobcat, _itemtp, _jobstatus, _warrstatus, _jobno, _user);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string AgreementDetailsReport(DateTime _from, DateTime _to, string _com, string _user, out string _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _custServiceDAL = new CustServiceDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("AgreementDetailsReport") == true) _custServiceDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _custServiceDAL.AgreementDetailsReport(_from, _to, _com, drow["tpl_pc"].ToString(), _user);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public string JobTimeDetails(DateTime _from, DateTime _to, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
                   string in_Itemcat2, string in_Itemcat3, string _user, string _defect, string _serial, out string _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults;
            _custServiceDAL = new CustServiceDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ProcessTracking") == true) _custServiceDAL.ConnectionOpen_DR();
            if (tmp_user_pc.Rows.Count > 0)
            {
                foreach (DataRow drow in tmp_user_pc.Rows)
                {
                    _dtResults = _custServiceDAL.JobTimeDetails(_from, _to, _com, drow["tpl_pc"].ToString(), in_Itemcode, in_Brand, in_Model, in_Itemcat1,
                                in_Itemcat2, in_Itemcat3, _user, _defect, _serial);
                    GLOB_DataTable.Merge(_dtResults);
                    in_ISlast = in_ISlast + 1;
                }
            }

            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, GLOB_DataTable, out _err);
            if (GLOB_DataTable.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }

            return _filePath;

        }

        public DataTable JobProcessTrackingDetails1(DateTime _from, DateTime _to, string _com, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
                    string in_Itemcat2, string in_Itemcat3, string _technician, string _jobcat, string _itemtp, decimal _jobstatus, string _warrstatus, string _jobno, string _user, string _option, string _loc, int _export, string _origin, int _chkw_cr_time, DateTime _create_from, DateTime _create_to)
        {
            _custServiceDAL = new CustServiceDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("ProcessTracking") == true) _custServiceDAL.ConnectionOpen_DR();
            return _custServiceDAL.JobProcessTrackingDetails(_from, _to, _com, _loc, in_Itemcode, in_Brand, in_Model, in_Itemcat1,
                                in_Itemcat2, in_Itemcat3, _technician, _jobcat, _itemtp, _jobstatus, _warrstatus, _jobno, _user, _option, _export, _origin, _chkw_cr_time, _create_from, _create_to);
        }

        public DataTable SmartInsuClaimDetails(DateTime _from, DateTime _to, string _com, string _loc, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1, string in_Itemcat2, string in_Itemcat3)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.SmartInsuClaimDetails(_from, _to, _com, _loc, in_Itemcode, in_Brand, in_Model, in_Itemcat1, in_Itemcat2, in_Itemcat3);
        }

        public DataTable JobProcesses()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.JobProcesses();
        }

        public DataTable InvoiceByJobLine(string _jobno, Int32 _line, string _item, string _stus)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.InvoiceByJobLine(_jobno, _line, _item, _stus);
        }

        public Int32 Cancel_Gate_Pass(string _com, string _jobno, DateTime _jobdate, string _rccno, string _rccLoca, string _serLoca, string _user, out string _err)
        {
            int effect = 0;
            string _tmpErr = "";

            try
            {
                InventoryBLL _InventoryBLL = new InventoryBLL();


                _custServiceDAL = new CustServiceDAL();
                _inventoryDAL = new InventoryDAL();

                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();


                //update RCC , cancel gate pass , update scv_oldpart , update job detail
                _custServiceDAL.cancel_gate_pass(_jobno, _rccno);

                //Cancel AOD
                DataTable _dtDoc = _inventoryDAL.Get_DocBy_Rcc(_com, _serLoca, _jobdate, _jobno, _rccno, _rccLoca);
                if (_dtDoc.Rows.Count > 0)
                    _inventoryDAL.CancelInventoryDocument(_dtDoc.Rows[0]["ith_doc_no"].ToString(), _user);

                //Cancel DO
                DataTable _dtDocJob = _inventoryDAL.Get_DocBy_Job(_com, _serLoca, _jobdate, _jobno);
                if (_dtDocJob.Rows.Count > 0)
                    _inventoryDAL.CancelInventoryDocument(_dtDocJob.Rows[0]["ith_doc_no"].ToString(), _user);


                _inventoryDAL.TransactionCommit();
                _custServiceDAL.TransactionCommit();

                _err = "";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = err.Message.ToString();
                _inventoryDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
            }

            return effect;
        }
        public Int32 Process_Gate_Pass(List<Service_job_Det> _jobDetList, RCC _rcc, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, List<ReptPickSerials> _reptPickSerials, string _loc, DateTime _date, string _custSatis, string _custSatisRem, string _user, string _transMethod, string _ref, MasterAutoNumber _masterAuto, MasterAutoNumber _masterAutoDo, string _session, out string _err, out string _docNo)
        {
            int effect = 0;
            string _gatepass = "";
            string _tmpErr = "";
            Int32 _isInvMaintain = 0;
            string _invNo = "";
            Int32 _invLine = 0;

            try
            {

                //AOD out
                InventoryBLL _InventoryBLL = new InventoryBLL();


                _custServiceDAL = new CustServiceDAL();
                _inventoryDAL = new InventoryDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _generalDAL = new GeneralDAL();
                _salesDAL = new SalesDAL();

                _inventoryDAL.ConnectionOpen();

                _inventoryDAL.BeginTransaction();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();


                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _salesDAL.ConnectionOpen();
                _generalDAL.ConnectionOpen();

                MasterAutoNumber _gtPass = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);
                _inventoryDAL.UpdateAutoNumber(_masterAuto);

                _gatepass = _loc + "-" + _gtPass.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _gtPass.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _tmpErr = "Sucessfully Saved!\nSystem generated gatepass no is " + _gatepass;


                if (_inventoryHeader != null)
                {

                    _inventoryAuto.Aut_moduleid = "AOD";
                    _inventoryAuto.Aut_start_char = "AOD";
                    _inventoryAuto.Aut_direction = 0;

                    //string _AODNo = "";  
                    //effect = _inventoryDAL.UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out _AODNo);
                    //_inventoryHeader.Ith_doc_no = _AODNo;


                    _InventoryBLL.SaveOutwardScanSerial(_inventoryHeader, _reptPickSerials, null, _inventoryDAL, true);
                    string documentNo = "";
                    effect = _InventoryBLL.UpdateInventoryAutoNumber(_inventoryHeader, _inventoryAuto, "-", out documentNo);

                    // string _message = "";
                    // string _genSalesDoc = ""; string _genInventoryDoc = "";
                    // _InventoryBLL.SaveCommonOutWardEntry(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, _inventoryHeader.Ith_com, null, _inventoryHeader, _inventoryAuto, null, null, _reptPickSerials, null, out _message, out _genSalesDoc, out _genInventoryDoc, false, false);
                }
                //RCC update
                _inventoryDAL.Update_RCC_Repair(_rcc);

                //DO

                List<Service_job_Det> _jobDetListNew = new List<Service_job_Det>();

                _jobDetListNew = _jobDetList.GroupBy(x => x.Jbd_jobno).Select(x => x.First()).ToList<Service_job_Det>();
                foreach (Service_job_Det _lstJobDet in _jobDetListNew)
                {
                    List<ReptPickSerials> reptPickSerialsList = new List<ReptPickSerials>();

                    InventoryHeader invHdr = new InventoryHeader();
                    invHdr.Ith_loc = _lstJobDet.Jbd_loc;
                    invHdr.Ith_com = _lstJobDet.Jbd_com;
                    invHdr.Ith_doc_tp = "DO";
                    invHdr.Ith_doc_date = Convert.ToDateTime(_date).Date;
                    invHdr.Ith_doc_year = Convert.ToDateTime(_date).Year;
                    //invHdr.Ith_cate_tp = txtInvoiceType.Text;
                    invHdr.Ith_sub_tp = "DPS";
                    //invHdr.Ith_bus_entity = txtCustomer.Text.Trim();
                    //invHdr.Ith_del_add1 = txtAddressDD.Text.Trim();
                    //invHdr.Ith_del_add1 = txtAddress2DD.Text.Trim();
                    invHdr.Ith_is_manual = false;
                    invHdr.Ith_stus = "A";
                    invHdr.Ith_cre_by = _user;
                    invHdr.Ith_mod_by = _user;
                    invHdr.Ith_direct = false;
                    invHdr.Ith_session_id = _session;
                    invHdr.Ith_manual_ref = "";
                    invHdr.Ith_vehi_no = string.Empty;
                    invHdr.Ith_remarks = string.Empty;

                    invHdr.Ith_job_no = _lstJobDet.Jbd_jobno;

                    List<Service_job_Det> _invItems = (from _rec in _jobDetList
                                                       where _rec.Jbd_jobno == _lstJobDet.Jbd_jobno
                                                       select _rec).ToList<Service_job_Det>();

                    foreach (Service_job_Det _lstJob_Det in _invItems)
                    {

                        List<Service_Confirm_detail> oItmes = GetServiceConfirmDetGP(_lstJobDet.Jbd_jobno, _lstJobDet.Jbd_jobline);
                        foreach (Service_Confirm_detail _lstjobconfDet in oItmes)
                        {
                            //add by akila 2017/11/21
                            string serviceInvoicePc = string.Empty;
                            DataTable _dtInvNo = null;
                            _dtInvNo = _custServiceDAL.InvoiceByJobConfirmLine(_lstjobconfDet.Jcd_no, _lstjobconfDet.Jcd_line); //kapila 16/10/2015
                            if (_dtInvNo.Rows.Count > 0)
                            {
                                //updated by akila 2017/08/08
                                foreach (DataRow _data in _dtInvNo.Rows)
                                {
                                    if (_data["sad_itm_tp"].ToString().ToUpper() != "V")
                                    {
                                        _invNo = _data["sad_inv_no"].ToString();
                                        _invLine = Convert.ToInt32(_data["sad_itm_line"]);
                                    }
                                    serviceInvoicePc = _data["sah_pc"] == DBNull.Value ? string.Empty : _data["sah_pc"].ToString(); //by akila 2017/11/21
                                }

                                //_invNo = _dtInvNo.Rows[0]["sad_inv_no"].ToString();
                                //_invLine = Convert.ToInt32(_dtInvNo.Rows[0]["sad_itm_line"]);
                            }
                            else
                            {
                                _dtInvNo = _custServiceDAL.InvoiceByJobLine(_lstJobDet.Jbd_jobno, _lstJobDet.Jbd_jobline, _lstjobconfDet.Jcd_itmcd, _lstjobconfDet.Jcd_itmstus);
                                if (_dtInvNo.Rows.Count > 0)
                                {
                                    _invNo = _dtInvNo.Rows[0]["sad_inv_no"].ToString();     //21/5/2015
                                    _invLine = Convert.ToInt32(_dtInvNo.Rows[0]["sad_itm_line"]);     //27/8/2015  _lstjobconfDet.Jcd_line;  //
                                    serviceInvoicePc = _dtInvNo.Rows[0]["sah_pc"] == DBNull.Value ? string.Empty : _dtInvNo.Rows[0]["sah_pc"].ToString(); //by akila 2017/11/21
                                }
                                else
                                {
                                    //kapila 27/4/2016
                                    effect = -1;
                                    _docNo = "";
                                    _err = "Invoice not found for the confirmation # " + _lstjobconfDet.Jcd_no;
                                    _inventoryDAL.TransactionRollback();
                                    _inventoryRepDAL.TransactionRollback();
                                    _custServiceDAL.TransactionRollback();
                                    _generalDAL.ConnectionClose();
                                    return effect;
                                }
                            }

                            invHdr.Ith_oth_docno = _invNo;
                            invHdr.Ith_pc = serviceInvoicePc;

                            MasterItem itemDetails = _inventoryDAL.GetItem(_lstJob_Det.Jbd_com, _lstjobconfDet.Jcd_itmcd);
                            DataTable _chk = _salesDAL.GetItemTp(itemDetails.Mi_itm_tp);
                            if (_chk != null && _chk.Rows.Count > 0)
                            {
                                _isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
                            }
                            else
                            {
                                continue;
                            }

                            if (_isInvMaintain == 1)
                            {
                                if (itemDetails.Mi_is_ser1 == 1)
                                {
                                    ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(_lstJob_Det.Jbd_com, _lstJobDet.Jbd_loc, null, itemDetails.Mi_cd, _lstjobconfDet.Jcd_ser_id);
                                    //kapila 13/5/2016
                                    if (String.IsNullOrEmpty(PickSerials.Tus_itm_cd))
                                    {
                                        effect = -1;
                                        _docNo = "";
                                        _err = "Serial is not available for Delivery - Item Code : " + itemDetails.Mi_cd;
                                        _inventoryDAL.TransactionRollback();
                                        _inventoryRepDAL.TransactionRollback();
                                        _custServiceDAL.TransactionRollback();
                                        _generalDAL.ConnectionClose();
                                        return effect;
                                    }
                                    PickSerials.Tus_job_no = _lstJob_Det.Jbd_jobno;
                                    PickSerials.Tus_job_line = _lstjobconfDet.Jcd_joblineno;
                                    PickSerials.Tus_base_doc_no = _invNo;  //27/8/2015
                                    PickSerials.Tus_base_itm_line = _invLine;  //27/8/2015
                                    reptPickSerialsList.Add(PickSerials);
                                }
                                else
                                {
                                    ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                                    _reptPickSerial_.Tus_com = _lstJob_Det.Jbd_com;
                                    _reptPickSerial_.Tus_base_doc_no = _invNo;  //27/8/2015
                                    _reptPickSerial_.Tus_base_itm_line = _invLine;  //27/8/2015
                                    _reptPickSerial_.Tus_bin = _inventoryDAL.GetDefaultBinCode(_lstJob_Det.Jbd_com, _lstJob_Det.Jbd_loc);
                                    _reptPickSerial_.Tus_cre_by = _user;
                                    _reptPickSerial_.Tus_cre_dt = DateTime.Now;
                                    _reptPickSerial_.Tus_cross_batchline = 0;
                                    _reptPickSerial_.Tus_cross_itemline = 0;
                                    _reptPickSerial_.Tus_cross_seqno = 0;
                                    _reptPickSerial_.Tus_cross_serline = 0;
                                    _reptPickSerial_.Tus_doc_dt = Convert.ToDateTime(_date).Date;
                                    _reptPickSerial_.Tus_doc_no = _lstjobconfDet.Jcd_mov_doc;  //25/9/2015 string.Empty;
                                    _reptPickSerial_.Tus_exist_grncom = string.Empty;
                                    _reptPickSerial_.Tus_isapp = 1;
                                    _reptPickSerial_.Tus_iscovernote = 1;
                                    _reptPickSerial_.Tus_itm_brand = itemDetails.Mi_brand;
                                    _reptPickSerial_.Tus_itm_cd = itemDetails.Mi_cd;
                                    _reptPickSerial_.Tus_itm_desc = itemDetails.Mi_longdesc;

                                    _reptPickSerial_.Tus_itm_model = itemDetails.Mi_model;
                                    _reptPickSerial_.Tus_itm_stus = _lstjobconfDet.Jcd_itmstus;
                                    _reptPickSerial_.Tus_loc = _lstJob_Det.Jbd_loc;
                                    _reptPickSerial_.Tus_new_status = string.Empty;
                                    _reptPickSerial_.Tus_qty = _lstjobconfDet.Jcd_qty;
                                    _reptPickSerial_.Tus_ser_1 = "N/A";
                                    _reptPickSerial_.Tus_ser_2 = "N/A";
                                    _reptPickSerial_.Tus_ser_id = 0;
                                    _reptPickSerial_.Tus_ser_line = 0;
                                    _reptPickSerial_.Tus_session_id = _session;
                                    _reptPickSerial_.Tus_unit_cost = 0;
                                    _reptPickSerial_.Tus_unit_price = 0;
                                    _reptPickSerial_.Tus_usrseq_no = -100;
                                    _reptPickSerial_.Tus_warr_no = "N/A";
                                    _reptPickSerial_.Tus_warr_period = 0;
                                    _reptPickSerial_.Tus_new_remarks = string.Empty;
                                    //25/9/2015
                                    _reptPickSerial_.Tus_batch_line = _lstjobconfDet.Jcd_batchline;
                                    _reptPickSerial_.Tus_itm_line = _lstjobconfDet.Jcd_itmline;
                                    _reptPickSerial_.Tus_ser_line = _lstjobconfDet.Jcd_serline;

                                    _reptPickSerial_.Tus_job_no = _lstjobconfDet.Jcd_jobno;
                                    _reptPickSerial_.Tus_job_line = _lstjobconfDet.Jcd_joblineno;

                                    if (itemDetails.Mi_is_ser1 == 0)
                                    {
                                        List<ReptPickSerials> _chkList;
                                        _chkList = _inventoryDAL.GetNonSerializedItemRandomlyByByDoc(_lstJob_Det.Jbd_com, _lstJob_Det.Jbd_loc, itemDetails.Mi_cd, string.Empty, _lstjobconfDet.Jcd_qty, _date.Date, _lstjobconfDet.Jcd_mov_doc, _lstjobconfDet.Jcd_batchline, _lstjobconfDet.Jcd_itmline);
                                        if (_chkList.Count <= 0)
                                        {
                                            effect = -1;
                                            _docNo = "";
                                            _err = "Item is not available for Delivery - Item Code : " + itemDetails.Mi_cd;
                                            _inventoryDAL.TransactionRollback();
                                            _inventoryRepDAL.TransactionRollback();
                                            _custServiceDAL.TransactionRollback();
                                            _generalDAL.ConnectionClose();
                                            return effect;
                                        }
                                        foreach (ReptPickSerials _pick in _chkList)
                                        {
                                            _pick.Tus_base_doc_no = _invNo;
                                            _pick.Tus_base_itm_line = _invLine;
                                            _pick.Tus_job_no = _lstjobconfDet.Jcd_jobno;
                                            _pick.Tus_job_line = _lstjobconfDet.Jcd_joblineno;
                                            reptPickSerialsList.Add(_pick);
                                        }

                                    }
                                    else
                                        reptPickSerialsList.Add(_reptPickSerial_);
                                }
                            }

                        }

                        //ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(_lstJob_Det.Jbd_com, _lstJob_Det.Jbd_loc, null, _lstJob_Det.Jbd_itm_cd, Convert.ToInt32(_lstJob_Det.Jbd_ser_id));
                        //reptPickSerialsList.Add(PickSerials);
                    }

                    //kapila 22/12/2015
                    MasterCompany _masterComp = new MasterCompany();
                    _masterComp = _generalDAL.GetCompByCode(invHdr.Ith_com);

                    if (_masterComp.Mc_anal13 == 0)
                    {

                        string documntNo = string.Empty;
                        if (reptPickSerialsList != null && reptPickSerialsList.Count > 0)
                            if (_InventoryBLL.Check_Cons_Item_has_Quo(invHdr.Ith_com, invHdr.Ith_doc_date, reptPickSerialsList, out documntNo) < 0)
                            {
                                effect = -1;
                                _docNo = "";
                                _err = documntNo;
                                _inventoryDAL.TransactionRollback();
                                _inventoryRepDAL.TransactionRollback();
                                _custServiceDAL.TransactionRollback();
                                _generalDAL.ConnectionClose();
                                return effect;
                            }


                    }

                    //insert gatepass header , update job detail , update old part
                    foreach (Service_job_Det _lstJob in _jobDetList)
                    {
                        int _ef = _inventoryDAL.SaveGatePassHdr(_lstJob.Jbd_com, _lstJob.Jbd_loc, _gatepass, _date, _lstJob.Jbd_jobno, _lstJob.Jbd_jobline, "", "A", _user, _custSatis, _custSatisRem, _transMethod, _ref);
                        int _ef1 = _inventoryDAL.UPDATE_SCV_JOB_DET_BY_GATEPASS(_lstJob.Jbd_jobno, _lstJob.Jbd_jobline, _user);
                        int _ef2 = _inventoryDAL.UPDATE_OLD_PART_BY_GATEPASS(_lstJob.Jbd_jobno, _lstJob.Jbd_jobline);

                        //kapila 16/3/2016
                        Service_Job_StageLog oLog2 = new Service_Job_StageLog();
                        oLog2.SJL_REQNO = "";
                        oLog2.SJL_JOBNO = _lstJob.Jbd_jobno;
                        oLog2.SJL_JOBLINE = _lstJob.Jbd_jobline;
                        oLog2.SJL_COM = _lstJob.Jbd_com;
                        oLog2.SJL_LOC = _loc;
                        oLog2.SJL_JOBSTAGE = 11;
                        oLog2.SJL_CRE_BY = _user;
                        oLog2.SJL_CRE_DT = DateTime.Now;
                        oLog2.SJL_SESSION_ID = _session;
                        oLog2.SJL_INFSUP = 0;
                        int Effect1 = _custServiceDAL.Save_ServiceJobStageLog(oLog2);

                    }

                    string documentNoDO = "";
                    Int32 _effDO = 0;
                    if (reptPickSerialsList.Count > 0)
                    {
                        _effDO = _InventoryBLL.DeliveryOrder(invHdr, reptPickSerialsList, null, _masterAutoDo, out documentNoDO, _inventoryRepDAL, _inventoryDAL, true);
                        _tmpErr = "Sucessfully Saved!\nSystem generated DO no is " + documentNoDO;
                    }
                }


              
                bool inv_balance = _inventoryDAL.check_qty_inv_balance(_invNo, null, null, null);
                 if (inv_balance == false)
                {
                    _err = "Invoice quantity does not match with used item  quantity";
                    _invNo = string.Empty;
                    _docNo = string.Empty;
                    effect = -1;
                    _gatepass = string.Empty;
                    _inventoryDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _custServiceDAL.TransactionRollback();
                    _generalDAL.ConnectionClose();
                   
                }
                else
                {
                _inventoryDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _custServiceDAL.TransactionCommit();
                _generalDAL.ConnectionClose();
                _docNo = _gatepass;
                _err = _tmpErr;
                effect = 1;
            }
                    

                //_inventoryDAL.TransactionCommit();
                //_inventoryRepDAL.TransactionCommit();
                //_custServiceDAL.TransactionCommit();
                //_generalDAL.ConnectionClose();
                //_docNo = _gatepass;
                //_err = _tmpErr;
                //effect = 1;
            }
            catch (Exception err)
            {
         
                effect = -1;
                _err = err.Message.ToString();
                if (_err.Contains("NO_STOCK_BALANCE"))
                {
                    _err = "Inventory balance mismatch. Please contact IT Department.";
                }
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _generalDAL.ConnectionClose();
            }
            _docNo = _gatepass;
            return effect;
        }

        //kapila
        public DataTable GET_TEMPISSUE_By_SER(string Com, string loc, string Item, string ser, string Type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_TEMPISSUE_By_SER(Com, loc, Item, ser, Type);
        }

        //kapila
        public Int32 SaveRequestDetail(Service_Req_Det _serviceReqDet)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.SaveRequestDetail(_serviceReqDet);
        }

        //kapila
        public Int32 SaveRequestHeader(Service_Req_Hdr _serviceReqHdr)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.SaveRequestHeader(_serviceReqHdr);
        }

        public Int32 GetJobsmsSeq()
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                _effects = _custServiceDAL.GetJobsmsSeq();

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();


            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();



                _effects = -1;
                //  _err = ex.Message.ToString();
            }
            return _effects;
        }

        // //Nadeeka
        public Int32 Save_Job_Transfer(List<Service_job_Det> _jobItems, List<SCV_TRANS_LOG> _jobTransfer, MasterAutoNumber _masterAuto, string _loc, DateTime _transDate, string _com, string _sbChnl, string _itemType, string _brand, Int32 _warStus, Int32 _isJobClose, string _sessionID, string _PC, out string _err)
        {
            Int32 _effects = 0;
            string _aodoutno = string.Empty;
            InventoryBLL _InventoryBLL = new InventoryBLL();
            SalesBLL _SalesBLL = new SalesBLL();
            string _recNo = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _custServiceDAL = new CustServiceDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _fmsInventoryDal = new FMS_InventoryDAL();
            _salesDAL = new SalesDAL();
            _generalDAL = new GeneralDAL();
            string _db = string.Empty;
            MasterItem _itmlist = new MasterItem();
            List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
            string documntNo = "";
            int SeqNo = 0;
            SCV_TRANS_LOG _jobTrans = new SCV_TRANS_LOG();
            Int32 result = 0;
            string _warStatus = "";
            string _jobNo = "";
            bool _is_Auto_no_reset = false;
            string _locLetter = "";
            string _reqCate = "";
            int _auto_no_group = 0;
            bool _isMonthAdv = false;
            string docNum = "";
            int effect = 0;
            string _docMonth = _transDate.ToString("MM"); string _docYear = _transDate.ToString("yy"); string _docDate = _transDate.ToString("dd");
            try
            {




                _custServiceDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _salesDAL.ConnectionOpen();
                _inventoryRepDAL.ConnectionOpen();
                _fmsInventoryDal.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                _salesDAL.BeginTransaction();
                _fmsInventoryDal.BeginTransaction();
                _inventoryRepDAL.BeginTransaction();
                _generalDAL.BeginTransaction();



                int SeqNum = _custServiceDAL.GetJobTransSeq();

                #region job no creation

                DataTable _dtSbChnl = _generalDAL.getSubChannelDet(_com, _sbChnl);
                if (_dtSbChnl == null)
                {
                    effect = -1;
                    _err = "Service channel " + _sbChnl + " has not define system generated no format!";
                    return 0;
                }
                _is_Auto_no_reset = Convert.ToBoolean(_dtSbChnl.Rows[0]["mssc_is_reset_autono"]);
                _auto_no_group = Convert.ToInt32(_dtSbChnl.Rows[0]["mssc_auto_no_grp"]);
                _is_Auto_no_reset = Convert.ToBoolean(_dtSbChnl.Rows[0]["mssc_is_reset_autono"]);

                //int jobSeqNo = _custServiceDAL.GetJobSerialID();
                //_jobHdr.SJB_SEQ_NO = jobSeqNo;

                _warStatus = (_warStus == 1) ? "U" : "O";
                _masterAuto.Aut_start_char = _locLetter;
                //_masterAuto.Aut_modify_dt = _jobHdr.SJB_DT.Date;
                var _firstDay = new DateTime(_transDate.Date.Year, _transDate.Date.Month, 1);
                _masterAuto.Aut_modify_dt = _firstDay.Date;
                // _reqCate = Mid(txtCategory.Text.Trim, 1, 1)

                //check for month advancement
                if (_is_Auto_no_reset == true)
                {

                    //check month is changed
                    _isMonthAdv = _custServiceDAL.IsMonthAdvance(_com, _transDate, _masterAuto.Aut_moduleid, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd);
                    //if (_isMonthAdv == false)
                    //{//new month
                    //    SeqNo = 1;
                    //}
                    //else
                    //{
                    SeqNo = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year).Aut_number;
                    //   }
                    _inventoryDAL.UpdateAutoNumber(_masterAuto);
                }

                if (_auto_no_group == 1 || _auto_no_group == 4)
                    _jobNo = _locLetter + _itemType + "/" + _com + "/" + _docMonth + _docYear + "-" + SeqNo.ToString("0000");
                if (_auto_no_group == 2)
                    _jobNo = _locLetter + _warStatus + _brand + _itemType + _docDate + _docMonth + _docYear + _reqCate + SeqNo.ToString("0000");
                if (_auto_no_group == 3)
                    _jobNo = _locLetter + "-" + _warStatus + "-" + _itemType + SeqNo.ToString("00000000");
                if (_auto_no_group == 5)
                    _jobNo = _locLetter + _docYear + _docMonth + _docDate + _warStatus + _itemType + SeqNo.ToString("00000");
                if (_auto_no_group == 6)
                    _jobNo = _com + "/" + _itemType + "/" + _docYear + "/" + _docMonth + "/" + SeqNo.ToString("0000");

                #endregion job no creation

                foreach (SCV_TRANS_LOG item in _jobTransfer)
                {
                    item.Stl_seq = SeqNum;
                    item.Stl_sjobno = _jobNo;
                    _custServiceDAL.Save_scv_JobTransfer(item);

                    decimal _jobstg = 0;
                    String _orgLoc = string.Empty;
                    DataTable _oriLoc = _custServiceDAL.Get_service_originalLoc(item.Stl_jobno);
                    if (_oriLoc.Rows.Count > 0)
                    {
                        _orgLoc = Convert.ToString(_oriLoc.Rows[0]["stl_cur_loc"]);
                    }
                    if (_orgLoc == _loc)
                    {
                        List<Service_job_Det> _jDet = _custServiceDAL.GetJobDetails(item.Stl_jobno, item.Stl_jobline, _com);

                        _jobstg = _jDet[0].Jbd_stage;
                        if (Convert.ToInt32(_jDet[0].Jbd_stage) < 7)// 24-08-2015
                        {
                            Service_Tech_Aloc_Hdr _techAlloc = _custServiceDAL.GetAllocationDet_loc(_com, item.Stl_jobno, _loc);//23-10-2015
                            if (_techAlloc != null)
                            {
                                _jobstg = 3;
                            }
                            else
                            {
                                _jobstg = 2;
                            }
                        }

                    }
                    else
                    {
                        List<Service_job_Det> _jDet = _custServiceDAL.GetJobDetails(item.Stl_jobno, item.Stl_jobline, _com);

                        _jobstg = _jDet[0].Jbd_stage;

                        if (Convert.ToInt32(_jDet[0].Jbd_stage) < 7)// 11-07-2015
                        {
                            Service_Tech_Aloc_Hdr _techAlloc = _custServiceDAL.GetAllocationDet_loc(_com, item.Stl_jobno, _loc);
                            if (_techAlloc != null)
                            {
                                _jobstg = 3;
                            }
                            {
                                _jobstg = 2;
                            }
                        }
                    }

                    #region Original Location
                    Service_Job_StageLog oLog1 = new Service_Job_StageLog();
                    oLog1.SJL_REQNO = "";
                    oLog1.SJL_JOBNO = item.Stl_jobno;
                    oLog1.SJL_JOBLINE = item.Stl_jobline;
                    oLog1.SJL_COM = _com;
                    oLog1.SJL_LOC = item.Stl_from_loc;

                    if (_orgLoc == _loc)
                    {
                        if (_isJobClose == 1)
                        {
                            oLog1.SJL_JOBSTAGE = 6;
                        }
                        else
                        {
                            oLog1.SJL_JOBSTAGE = Convert.ToDecimal(6.2);
                        }
                    }
                    else
                    {
                        oLog1.SJL_JOBSTAGE = 16;// Tranfer Close
                    }

                    oLog1.SJL_CRE_BY = item.Stl_cre_by;
                    oLog1.SJL_CRE_DT = DateTime.Now;
                    oLog1.SJL_SESSION_ID = _sessionID;
                    oLog1.SJL_INFSUP = 0;
                    int Effect1 = _custServiceDAL.Save_ServiceJobStageLog(oLog1);

                    #endregion  Original Location




                    #region Tansfer Location
                    Service_Job_StageLog oLog2 = new Service_Job_StageLog();
                    oLog2.SJL_REQNO = "";
                    oLog2.SJL_JOBNO = item.Stl_jobno;
                    oLog2.SJL_JOBLINE = item.Stl_jobline;
                    oLog2.SJL_COM = _com;
                    oLog2.SJL_LOC = _loc;
                    oLog2.SJL_JOBSTAGE = _jobstg;
                    oLog2.SJL_CRE_BY = item.Stl_cre_by;
                    oLog2.SJL_CRE_DT = DateTime.Now;
                    oLog2.SJL_SESSION_ID = _sessionID;
                    oLog2.SJL_INFSUP = 0;
                    Effect1 = _custServiceDAL.Save_ServiceJobStageLog(oLog2);

                    #endregion  Tansfer Location

                    MasterLocation _locList = _generalDAL.GetLocationInfor(_com, _loc);

                    _custServiceDAL.Update_Job_trans(item.Stl_jobno, item.Stl_jobline, _loc, _jobNo, _jobstg, _locList.Ml_def_pc);



                    _custServiceDAL.Update_Job_trans_mrn(item.Stl_jobno, item.Stl_jobline, "C");// Cancell Pending MRN

                    #region Cancel Confimation
                    List<Service_confirm_Header> _confHdr = new List<Service_confirm_Header>();
                    _confHdr = _custServiceDAL.GetConfDetByJobNo(_com, item.Stl_jobno, item.Stl_jobline);
                    if (_confHdr.Count > 0)
                    {



                        _confHdr[0].Jch_loc = _loc;
                        _confHdr[0].Jch_pc = _locList.Ml_def_pc;


                        List<Service_Confirm_detail> _confDet = _custServiceDAL.GetServiceConfirmDet(item.Stl_jobno, item.Stl_jobline);
                        List<Service_Cost_sheet> _JobCost = _custServiceDAL.GET_SCV_ITM_COST_SHEET(_com, item.Stl_jobno, item.Stl_jobline);

                        MasterAutoNumber masterAuto = new MasterAutoNumber();
                        masterAuto.Aut_cate_cd = _PC;
                        masterAuto.Aut_cate_tp = "PC";
                        masterAuto.Aut_direction = null;
                        masterAuto.Aut_modify_dt = null;
                        masterAuto.Aut_moduleid = "CONF";
                        masterAuto.Aut_number = 5;//what is Aut_number
                        masterAuto.Aut_start_char = "CONF";
                        masterAuto.Aut_year = null;
                        string errmsg = string.Empty;
                        _custServiceDAL.UPDATE_SCV_CONF_HDR_STUS("C", _confHdr[0].Jch_seq, _com, _confHdr[0].Jch_no);
                        int _effectCount = Save_Job_ConfirmationforJobTranfer(_confHdr, _confDet, _JobCost, masterAuto, null, null, null, null, null, null, false, _jobItems, null, null, _custServiceDAL, _inventoryDAL, _salesDAL, _inventoryRepDAL, _fmsInventoryDal, _generalDAL, out errmsg, _sessionID);
                        if ((_effectCount == -1) && (!string.IsNullOrEmpty(errmsg)))
                        {
                            throw new Exception(errmsg);
                        }
                    }
                    #endregion
                }

                _custServiceDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _inventoryRepDAL.ConnectionClose();
                _fmsInventoryDal.ConnectionClose();
                _generalDAL.ConnectionClose();





                _err = "Successfully Saved! " + docNum;
                _effects = 1;

            }
            catch (Exception ex)
            {

                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();


                _effects = -1;
                _err = ex.Message.ToString();
            }

            return _effects;
        }

        //Nadeeka
        public Int32 Save_Job_ConfirmationforJobTranfer(List<Service_confirm_Header> _confHdr, List<Service_Confirm_detail> _confDet, List<Service_Cost_sheet> _jobCost, MasterAutoNumber _masterAuto, InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, Boolean _isInv, List<Service_job_Det> _processJobList, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, CustServiceDAL custServiceDAL, InventoryDAL inventoryDAL, SalesDAL salesDAL, ReptCommonDAL inventoryRepDAL, FMS_InventoryDAL fmsInventoryDal, GeneralDAL generalDAL, out string errorMsg,string _seccion=null)
        {
            errorMsg = string.Empty;
            Int32 _invoiceLine = 0;
            Int32 _effects = 0;
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;

            Int32 _isInvMaintain = 0;
            Int32 InventorySeqNo = 0;
            List<ReptPickSerials> _pickSerial = new List<ReptPickSerials>();
            List<ReptPickSerialsSub> _pickSubSerial = new List<ReptPickSerialsSub>();
            try
            {


                _custServiceDAL = custServiceDAL;
                _inventoryDAL = inventoryDAL;
                _salesDAL = salesDAL;
                _inventoryRepDAL = inventoryRepDAL;
                _fmsInventoryDal = fmsInventoryDal;
                _generalDAL = generalDAL;

                //_custServiceDAL.ConnectionOpen();
                //_inventoryDAL.ConnectionOpen();
                //_salesDAL.ConnectionOpen();
                //_inventoryRepDAL.ConnectionOpen();
                //_fmsInventoryDal.ConnectionOpen();
                //_generalDAL.ConnectionOpen();
                //_custServiceDAL.BeginTransaction();
                //_inventoryDAL.BeginTransaction();
                //_salesDAL.BeginTransaction();
                //_fmsInventoryDal.BeginTransaction();
                //_inventoryRepDAL.BeginTransaction();
                //_generalDAL.BeginTransaction();

                foreach (Service_confirm_Header _saveHdr in _confHdr)
                {
                    int SeqNum = _custServiceDAL.GetConfSeq();

                    string DocNum = string.Empty;
                    MasterAutoNumber _ClaimDoc = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);

                    DocNum = _saveHdr.Jch_pc + "-" + _ClaimDoc.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _ClaimDoc.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _inventoryDAL.UpdateAutoNumber(_ClaimDoc);

                    _saveHdr.Jch_seq = SeqNum;
                    _saveHdr.Jch_no = DocNum;

                    _custServiceDAL.save_Conf_Hdr(_saveHdr);

                    Int32 _line = 1;
                    foreach (Service_Confirm_detail _tmpDet in _confDet)
                    {
                        // if (_tmpDet.Jcd_cuscd == _saveHdr.Jch_cust_cd && _tmpDet.Jcd_cusname == _saveHdr.Jch_cust_name && _tmpDet.Jcd_cusadd1 == _saveHdr.Jch_add1 && _tmpDet.Jcd_cusadd2 == _saveHdr.Jch_add2)
                        //  {
                        _tmpDet.Jcd_seq = SeqNum;
                        _tmpDet.Jcd_no = DocNum;
                        // _tmpDet.Jcd_line = _line;
                        _custServiceDAL.save_Conf_Det(_tmpDet);
                        _line = _line + 1;


                        //  }
                    }
                }
                //iF JOB IS WRPL
                //if (_confHdr[0].Jch_jobclosetp == "WRPL")
                //{
                //    foreach (Service_job_Det _WRLP in _processJobList)
                //    {
                //        MasterAutoNumber _ReqAppAuto = new MasterAutoNumber();
                //        RequestApprovalDetail _tempReqAppDet = new RequestApprovalDetail();
                //        RequestApprovalSerials _tempReqAppSer = new RequestApprovalSerials();
                //        RequestApprovalHeader _ReqAppHdr = new RequestApprovalHeader();
                //        RequestApprovalDetailLog _tempReqAppDetLog = new RequestApprovalDetailLog();
                //        RequestApprovalSerialsLog _tempReqAppSerLog = new RequestApprovalSerialsLog();
                //        RequestApprovalHeaderLog _ReqAppHdrLog = new RequestApprovalHeaderLog();


                //        _ReqAppAuto = new MasterAutoNumber();
                //        _ReqAppAuto.Aut_cate_cd = _confHdr[0].Jch_pc;
                //        _ReqAppAuto.Aut_cate_tp = "PC";
                //        _ReqAppAuto.Aut_direction = 1;
                //        _ReqAppAuto.Aut_modify_dt = null;
                //        _ReqAppAuto.Aut_moduleid = "REQ";
                //        _ReqAppAuto.Aut_number = 0;
                //        _ReqAppAuto.Aut_start_char = "EXREQ";
                //        _ReqAppAuto.Aut_year = null;

                //        string DocNum = string.Empty;
                //        MasterAutoNumber _wrplNo = _inventoryDAL.GetAutoNumber(_ReqAppAuto.Aut_moduleid, _ReqAppAuto.Aut_direction, _ReqAppAuto.Aut_start_char, _ReqAppAuto.Aut_cate_tp, _ReqAppAuto.Aut_cate_cd, _ReqAppAuto.Aut_modify_dt, _ReqAppAuto.Aut_year);

                //        DocNum = _confHdr[0].Jch_pc + "-" + _wrplNo.Aut_start_char + "-" + _wrplNo.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                //        _inventoryDAL.UpdateAutoNumber(_wrplNo);

                //        InvoiceHeader _invHdr = new InvoiceHeader();
                //        _invHdr = _salesDAL.GetInvoiceHdrByCom(_WRLP.Jbd_com, _WRLP.Jbd_invc_no);

                //        _ReqAppHdr.Grah_com = _confHdr[0].Jch_com;
                //        _ReqAppHdr.Grah_loc = _confHdr[0].Jch_pc;
                //        _ReqAppHdr.Grah_app_tp = "ARQT035";
                //        _ReqAppHdr.Grah_fuc_cd = _WRLP.Jbd_invc_no;
                //        _ReqAppHdr.Grah_ref = DocNum;
                //        _ReqAppHdr.Grah_oth_loc = _WRLP.Jbd_loc;
                //        _ReqAppHdr.Grah_cre_by = _confHdr[0].Jch_cre_by;
                //        _ReqAppHdr.Grah_cre_dt = Convert.ToDateTime(DateTime.Now).Date;
                //        _ReqAppHdr.Grah_mod_by = _confHdr[0].Jch_cre_by;
                //        _ReqAppHdr.Grah_mod_dt = Convert.ToDateTime(DateTime.Now).Date;
                //        _ReqAppHdr.Grah_app_stus = "P";
                //        _ReqAppHdr.Grah_app_lvl = 0;
                //        _ReqAppHdr.Grah_app_by = string.Empty;
                //        _ReqAppHdr.Grah_app_dt = Convert.ToDateTime(DateTime.Now).Date;
                //        _ReqAppHdr.Grah_remaks = _confHdr[0].Jch_jobclosermk;
                //        _ReqAppHdr.Grah_sub_type = "SAME_VALUE";
                //        if (_invHdr.Sah_inv_no != null)
                //        {
                //            _ReqAppHdr.Grah_oth_pc = _invHdr.Sah_pc;
                //        }
                //        else
                //        {
                //            _ReqAppHdr.Grah_oth_pc = "";
                //        }

                //        _ReqAppHdrLog.Grah_com = _confHdr[0].Jch_com;
                //        _ReqAppHdrLog.Grah_loc = _confHdr[0].Jch_pc;
                //        _ReqAppHdrLog.Grah_app_tp = "ARQT035";
                //        _ReqAppHdrLog.Grah_fuc_cd = _WRLP.Jbd_invc_no;
                //        _ReqAppHdrLog.Grah_ref = DocNum;
                //        _ReqAppHdrLog.Grah_oth_loc = _WRLP.Jbd_loc;
                //        _ReqAppHdrLog.Grah_cre_by = _confHdr[0].Jch_cre_by;
                //        _ReqAppHdrLog.Grah_cre_dt = Convert.ToDateTime(DateTime.Now).Date;
                //        _ReqAppHdrLog.Grah_mod_by = _confHdr[0].Jch_cre_by;
                //        _ReqAppHdrLog.Grah_mod_dt = Convert.ToDateTime(DateTime.Now).Date;
                //        _ReqAppHdrLog.Grah_app_stus = "P";
                //        _ReqAppHdrLog.Grah_app_lvl = 0;
                //        _ReqAppHdrLog.Grah_app_by = string.Empty;
                //        _ReqAppHdrLog.Grah_app_dt = Convert.ToDateTime(DateTime.Now).Date;
                //        _ReqAppHdrLog.Grah_remaks = _confHdr[0].Jch_jobclosermk;
                //        _ReqAppHdrLog.Grah_sub_type = "SAME_VALUE";
                //        if (_invHdr.Sah_inv_no != null)
                //        {
                //            _ReqAppHdrLog.Grah_oth_pc = _invHdr.Sah_pc;
                //        }
                //        else
                //        {
                //            _ReqAppHdrLog.Grah_oth_pc = "";
                //        }
                //        _generalDAL.SaveRequestApproveHear(_ReqAppHdr);
                //        _generalDAL.SaveRequestApproveHear_Log(_ReqAppHdrLog);

                //        DataTable _invDet = _custServiceDAL.GetInvDetBySerId(_WRLP.Jbd_invc_no, Convert.ToInt32(_WRLP.Jbd_ser_id), _WRLP.Jbd_itm_cd);
                //        Service_JOB_HDR _jobHdr = _custServiceDAL.GET_SCV_JOB_HDR(_WRLP.Jbd_jobno, _WRLP.Jbd_com);

                //        //Request approval details
                //        _tempReqAppDet.Grad_ref = DocNum;
                //        _tempReqAppDet.Grad_line = _WRLP.Jbd_jobline;
                //        _tempReqAppDet.Grad_req_param = _WRLP.Jbd_itm_cd;
                //        _tempReqAppDet.Grad_val1 = 1;
                //        if (_invDet != null && _invDet.Rows.Count > 0)
                //        {
                //            //_isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
                //            _tempReqAppDet.Grad_val2 = _invDet.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
                //            _tempReqAppDet.Grad_val5 = _invDet.Rows[0].Field<decimal>("sad_tot_amt"); //item.Sad_tot_amt;
                //            _tempReqAppDet.Grad_anal1 = _invDet.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                //            _tempReqAppDet.Grad_anal2 = _invDet.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                //            _tempReqAppDet.Grad_anal3 = _invDet.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;
                //            _tempReqAppDet.Grad_anal4 = _invDet.Rows[0].Field<string>("sad_seq"); //Convert.ToString(item.Sad_seq);
                //            _tempReqAppDet.Grad_anal7 = _invDet.Rows[0].Field<string>("ith_doc_no");
                //            _tempReqAppDet.Grad_anal15 = _invDet.Rows[0].Field<string>("sad_itm_stus");
                //        }
                //        else
                //        {
                //            _tempReqAppDet.Grad_val2 = 0; //item.Sad_unit_rt;
                //            _tempReqAppDet.Grad_val5 = 0;
                //            _tempReqAppDet.Grad_anal1 = "";
                //            _tempReqAppDet.Grad_anal2 = "";
                //            _tempReqAppDet.Grad_anal3 = "";
                //            _tempReqAppDet.Grad_anal4 = "";
                //            _tempReqAppDet.Grad_anal7 = "";
                //            _tempReqAppDet.Grad_anal15 = "";
                //        }
                //        _tempReqAppDet.Grad_val3 = 1;
                //        _tempReqAppDet.Grad_val4 = 0;//item.Sad_itm_tax_amt
                //        _tempReqAppDet.Grad_anal5 = "EX-RECEIVE";
                //        _tempReqAppDet.Grad_date_param = _confHdr[0].Jch_dt;
                //        _tempReqAppDet.Grad_is_rt1 = true;
                //        _tempReqAppDet.Grad_is_rt2 = false;
                //        _tempReqAppDet.Grad_anal6 = _WRLP.Jbd_invc_no;
                //        _tempReqAppDet.Grad_anal8 = _jobHdr.SJB_CUST_CD;
                //        _tempReqAppDet.Grad_anal9 = "SCM2";

                //        int diffResult = (_jobHdr.SJB_DT.Month - _WRLP.Jbd_warrstartdt.Month) + 12 * (_jobHdr.SJB_DT.Year - _WRLP.Jbd_warrstartdt.Year);
                //        _tempReqAppDet.Grad_anal10 = diffResult.ToString(); //Convert.ToString(UsedWarrantyPeriod);
                //        _tempReqAppDet.Grad_anal11 = (_WRLP.Jbd_warrperiod - diffResult).ToString(); //Convert.ToString(RemainingWarrantyPeriod);
                //        _tempReqAppDet.Grad_anal12 = _WRLP.Jbd_jobno;
                //        _tempReqAppDet.Grad_anal13 = _confHdr[0].Jch_dt.ToShortDateString();
                //        _tempReqAppDet.Grad_anal14 = _WRLP.Jbd_warrstartdt.ToShortDateString();

                //        //Request log
                //        _tempReqAppDetLog.Grad_ref = DocNum;
                //        _tempReqAppDetLog.Grad_line = _WRLP.Jbd_jobline;
                //        _tempReqAppDetLog.Grad_req_param = _WRLP.Jbd_itm_cd;
                //        _tempReqAppDetLog.Grad_val1 = 1;
                //        if (_invDet != null && _invDet.Rows.Count > 0)
                //        {
                //            //_isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
                //            _tempReqAppDetLog.Grad_val2 = _invDet.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
                //            _tempReqAppDetLog.Grad_val5 = _invDet.Rows[0].Field<decimal>("sad_tot_amt"); //item.Sad_tot_amt;
                //            _tempReqAppDetLog.Grad_anal1 = _invDet.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                //            _tempReqAppDetLog.Grad_anal2 = _invDet.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                //            _tempReqAppDetLog.Grad_anal3 = _invDet.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;
                //            _tempReqAppDetLog.Grad_anal4 = _invDet.Rows[0].Field<string>("sad_seq"); //Convert.ToString(item.Sad_seq);
                //            //_tempReqAppDetLog.Grad_anal7 = _invDet.Rows[0].Field<string>("ith_doc_no");
                //            //_tempReqAppDetLog.Grad_anal15 = _invDet.Rows[0].Field<string>("sad_itm_stus");
                //        }
                //        else
                //        {
                //            _tempReqAppDetLog.Grad_val2 = 0; //item.Sad_unit_rt;
                //            _tempReqAppDetLog.Grad_val5 = 0;
                //            _tempReqAppDetLog.Grad_anal1 = "";
                //            _tempReqAppDetLog.Grad_anal2 = "";
                //            _tempReqAppDetLog.Grad_anal3 = "";
                //            _tempReqAppDetLog.Grad_anal4 = "";
                //            // _tempReqAppDetLog.Grad_anal7 = "";
                //            // _tempReqAppDetLog.Grad_anal15 = "";
                //        }
                //        _tempReqAppDetLog.Grad_val3 = 1;
                //        _tempReqAppDetLog.Grad_val4 = 0;//item.Sad_itm_tax_amt
                //        _tempReqAppDetLog.Grad_anal5 = "EX-RECEIVE";
                //        _tempReqAppDetLog.Grad_date_param = _confHdr[0].Jch_dt;
                //        _tempReqAppDetLog.Grad_is_rt1 = true;
                //        _tempReqAppDetLog.Grad_is_rt2 = false;
                //        //_tempReqAppDetLog.Grad_anal6 = _WRLP.Jbd_invc_no;
                //        //_tempReqAppDetLog.Grad_anal8 = _jobHdr.SJB_CUST_CD;
                //        //_tempReqAppDetLog.Grad_anal9 = "SCM2";

                //        //int diffResult = (_jobHdr.SJB_DT.Month - _WRLP.Jbd_warrstartdt.Month) + 12 * (_jobHdr.SJB_DT.Year - _WRLP.Jbd_warrstartdt.Year);
                //        //_tempReqAppDetLog.Grad_anal10 = diffResult.ToString(); //Convert.ToString(UsedWarrantyPeriod);
                //        //_tempReqAppDetLog.Grad_anal11 = (_WRLP.Jbd_warrperiod - diffResult).ToString(); //Convert.ToString(RemainingWarrantyPeriod);
                //        //_tempReqAppDetLog.Grad_anal12 = _WRLP.Jbd_jobno;
                //        //_tempReqAppDetLog.Grad_anal13 = _confHdr[0].Jch_dt.ToShortDateString();
                //        //_tempReqAppDetLog.Grad_anal14 = _WRLP.Jbd_warrstartdt.ToShortDateString();

                //        _generalDAL.Save_RequestApprove_Det(_tempReqAppDet);
                //        _generalDAL.Save_RequestApprove_Det_Log(_tempReqAppDetLog);

                //        _tempReqAppSer.Gras_ref = DocNum;
                //        _tempReqAppSer.Gras_line = _WRLP.Jbd_jobline;
                //        if (_invDet != null && _invDet.Rows.Count > 0)
                //        {
                //            _tempReqAppSer.Gras_anal1 = _invDet.Rows[0].Field<string>("ith_doc_no");
                //            _tempReqAppSer.Gras_anal7 = _invDet.Rows[0].Field<Int32>("ITB_BASE_REFLINE");
                //        }
                //        else
                //        {
                //            _tempReqAppSer.Gras_anal1 = "";
                //            _tempReqAppSer.Gras_anal7 = 0;
                //        }
                //        _tempReqAppSer.Gras_anal2 = _WRLP.Jbd_itm_cd;
                //        _tempReqAppSer.Gras_anal3 = _WRLP.Jbd_ser1;
                //        _tempReqAppSer.Gras_anal4 = "";
                //        _tempReqAppSer.Gras_anal5 = _WRLP.Jbd_warr;
                //        _tempReqAppSer.Gras_anal6 = Convert.ToInt32(_WRLP.Jbd_ser_id);
                //        _tempReqAppSer.Gras_anal8 = _WRLP.Jbd_warrperiod;
                //        _tempReqAppSer.Gras_anal9 = 0;
                //        _tempReqAppSer.Gras_anal10 = 0;

                //        _generalDAL.Save_RequestApprove_Ser(_tempReqAppSer);
                //        _generalDAL.Save_RequestApprove_Ser_Log(_tempReqAppSer, 0);

                //    }
                //}

                //If job is BR....
                if (_confHdr[0].Jch_jobclosetp == "BER")
                {
                    foreach (Service_job_Det _br in _processJobList)
                    {
                        BRServiceApproval _saveBrApp = new BRServiceApproval();
                        Service_JOB_HDR _jobHdr = _custServiceDAL.GET_SCV_JOB_HDR(_br.Jbd_jobno, _br.Jbd_com);

                        if (_jobHdr.SJB_JOBSTP == "RCC")
                        {
                            _saveBrApp.Inra_no = _jobHdr.SJB_REQNO;
                            RCC _rccDet = _inventoryDAL.GetRCCbyNo(_jobHdr.SJB_REQNO);
                            if (_rccDet != null)
                            {
                                _saveBrApp.Insa_tp = _rccDet.Inr_tp;
                                _saveBrApp.Insa_sub_tp = _rccDet.Inr_sub_tp;
                                _saveBrApp.Insa_agent = _rccDet.Inr_agent;
                                _saveBrApp.Insa_col_method = _rccDet.Inr_col_method;
                                _saveBrApp.Insa_def_cd = _rccDet.Inr_def_cd;
                                _saveBrApp.Insa_def = _rccDet.Inr_def;
                                _saveBrApp.Insa_condition = _rccDet.Inr_condition;
                                _saveBrApp.Insa_accessories = _rccDet.Inr_accessories;
                                _saveBrApp.Insa_easy_loc = _rccDet.Inr_easy_loc;
                                _saveBrApp.Insa_insp_by = _rccDet.Inr_insp_by;
                                _saveBrApp.Insa_rem1 = _rccDet.Inr_rem1;
                                _saveBrApp.Insa_def_rem = _rccDet.Inr_def_rem;

                            }
                        }
                        else
                        {
                            _saveBrApp.Inra_no = _jobHdr.SJB_JOBNO;
                        }
                        _saveBrApp.Insa_com_cd = _br.Jbd_com;
                        _saveBrApp.Insa_loc_cd = _br.Jbd_loc;
                        _saveBrApp.Insa_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_is_manual = 0;
                        _saveBrApp.Insa_manual_ref = _jobHdr.SJB_MANUALREF;
                        _saveBrApp.Insa_inv_no = _br.Jbd_invc_no;

                        InvoiceHeader _invDet = _salesDAL.GetInvoiceHeader(_saveBrApp.Insa_inv_no);
                        if (_invDet != null)
                        {
                            _saveBrApp.Insa_acc_no = _invDet.Sah_acc_no;
                            _saveBrApp.Insa_inv_dt = _invDet.Sah_dt;
                        }

                        _saveBrApp.Insa_cust_cd = _jobHdr.SJB_CUST_CD;
                        _saveBrApp.Insa_cust_name = _jobHdr.SJB_CUST_NAME;
                        _saveBrApp.Insa_addr = _jobHdr.SJB_ADD1 + " " + _jobHdr.SJB_ADD2;
                        _saveBrApp.Insa_tel = _jobHdr.SJB_MOBINO;
                        _saveBrApp.Insa_itm = _br.Jbd_itm_cd;
                        _saveBrApp.Insa_ser = _br.Jbd_ser1;
                        _saveBrApp.Insa_warr = _br.Jbd_warr;
                        _saveBrApp.Insa_is_jb_open = 1;
                        _saveBrApp.Insa_jb_no = _br.Jbd_jobno;
                        _saveBrApp.Insa_jb_rem = _confHdr[0].Jch_jobclosermk;
                        _saveBrApp.Insa_stage = 4;
                        _saveBrApp.Insa_stus = "A";
                        _saveBrApp.Insa_cre_by = _confHdr[0].Jch_cre_by;
                        _saveBrApp.Insa_mod_by = _confHdr[0].Jch_cre_by;
                        _saveBrApp.Insa_war_period = _br.Jbd_warrperiod;
                        _saveBrApp.Insa_job_dt = _jobHdr.SJB_DT;
                        _saveBrApp.Insa_oth_doc_dt = _jobHdr.SJB_DT;
                        _saveBrApp.Insa_return_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_acknoledge_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_complete_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_anal5 = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_anal6 = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_app_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_rej_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_repair_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_disprem1_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_disprem2_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_disprem3_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_rem1_dt = _confHdr[0].Jch_dt;

                        _custServiceDAL.SaveBRServiceApproval(_saveBrApp);


                        //Service_Message oMessage = new Service_Message();
                        //oMessage.Sm_com = _br.Jbd_com;
                        //oMessage.Sm_jobno = _br.Jbd_jobno;
                        //oMessage.Sm_joboline = _br.Jbd_jobline;
                        //oMessage.Sm_jobstage = 7;
                        //oMessage.Sm_ref_num = _saveBrApp.Inra_no;
                        //oMessage.Sm_status = 0;
                        //oMessage.Sm_msg_tmlt_id = 11;

                        //_custServiceDAL.SaveServiceMsg(oMessage);

                    }
                }

                foreach (Service_Cost_sheet _tmpCost in _jobCost)
                {
                    _custServiceDAL.save_JobCostSheet(_tmpCost);
                }

                foreach (Service_job_Det _tmpJobDet in _processJobList)
                {
                    Int32 _updateStage = 0;
                    if (_isInv == true)
                    {
                        _updateStage = 8;
                    }
                    else if (_confDet.Count <= 0)
                    {
                        _updateStage = 8;
                    }
                    else
                    {
                        _updateStage = 7;
                    }
                    Service_Job_StageLog oLog = new Service_Job_StageLog();
                    oLog.SJL_REQNO = "";
                    oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                    oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                    oLog.SJL_COM = _tmpJobDet.Jbd_com;
                    oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                    oLog.SJL_JOBSTAGE = _updateStage;
                    oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                    oLog.SJL_CRE_DT = DateTime.Now;
                    oLog.SJL_SESSION_ID = _seccion;
                    oLog.SJL_INFSUP = 0;
                    _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    _custServiceDAL.Update_JobDetailStage(_tmpJobDet.Jbd_jobno, _tmpJobDet.Jbd_jobline, _updateStage);
                }

                if (_isInv == true)
                {
                    foreach (Service_Confirm_detail _itm in _confDet)
                    {
                      
                        List<Service_job_Det> oJobitms = new List<Service_job_Det>();
                        oJobitms = _custServiceDAL.GetJobDetails(_itm.Jcd_jobno, _itm.Jcd_joblineno, _invoiceHeader.Sah_com);

                        Service_job_Det JobDetailLine;
                        if (oJobitms.Count > 0)
                        {
                            JobDetailLine = oJobitms[0];
                        }
                        else
                        {
                            JobDetailLine = new Service_job_Det();
                        }

                        Service_Chanal_parameter oChnnalPara = _generalDAL.GetChannelParamers(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                        if (oChnnalPara.SP_ISNEEDGATEPASS == 0)
                        {
                            //continue;
                        }
                        else
                        {
                            //check is job F or W
                            Service_Category ocate = _custServiceDAL.GET_SCV_CATE_BY_JOB(_itm.Jcd_jobno, _invoiceHeader.Sah_com);
                            if (ocate != null && ocate.Sc_direct.ToUpper() == "F")
                            {
                                //continue;
                            }
                            else
                            {
                                if (JobDetailLine.Jbd_isgatepass == 1)
                                {
                                    //continue;
                                }
                                else
                                {
                                    continue;
                                }
                            }
                        }

                        //Service_Job_StageLog oLog = new Service_Job_StageLog();
                        //oLog.SJL_REQNO = "";
                        //oLog.SJL_JOBNO = _itm.Jcd_jobno;
                        //oLog.SJL_JOBLINE = _itm.Jcd_joblineno;
                        //oLog.SJL_COM = _invoiceHeader.Sah_com;
                        //oLog.SJL_LOC = _inventoryHeader.Ith_loc;
                        //oLog.SJL_JOBSTAGE = Convert.ToInt32(JobDetailLine.Jbd_stage);
                        //oLog.SJL_CRE_BY = _invoiceHeader.Sah_cre_by;
                        //oLog.SJL_CRE_DT = DateTime.Now;
                        //oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                        //oLog.SJL_INFSUP = 0;
                        //_effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);

                        MasterItem itemDetails = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Jcd_itmcd);
                        DataTable _chk = _salesDAL.GetItemTp(itemDetails.Mi_itm_tp);
                        if (_chk != null && _chk.Rows.Count > 0)
                        {
                            _isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
                        }
                        else
                        {
                            continue;
                        }

                        if (_isInvMaintain == 1)
                        {
                            if (itemDetails.Mi_is_ser1 == 1)
                            {
                                ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc, null, itemDetails.Mi_cd, _itm.Jcd_ser_id);
                                PickSerials.Tus_job_no = _itm.Jcd_jobno;
                                PickSerials.Tus_job_line = _itm.Jcd_joblineno;
                                _pickSerial.Add(PickSerials);
                            }
                            else
                            {
                                ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                                _reptPickSerial_.Tus_com = _invoiceHeader.Sah_com;
                                _reptPickSerial_.Tus_base_doc_no = _itm.Jcd_mov_doc;
                                _reptPickSerial_.Tus_base_itm_line = _itm.Jcd_itmline;
                                _reptPickSerial_.Tus_bin = _inventoryDAL.GetDefaultBinCode(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                                _reptPickSerial_.Tus_cre_by = _invoiceHeader.Sah_cre_by;
                                _reptPickSerial_.Tus_cre_dt = DateTime.Now;
                                _reptPickSerial_.Tus_cross_batchline = 0;
                                _reptPickSerial_.Tus_cross_itemline = 0;
                                _reptPickSerial_.Tus_cross_seqno = 0;
                                _reptPickSerial_.Tus_cross_serline = 0;
                                _reptPickSerial_.Tus_doc_dt = Convert.ToDateTime(_invoiceHeader.Sah_dt);
                                _reptPickSerial_.Tus_doc_no = string.Empty;
                                _reptPickSerial_.Tus_exist_grncom = string.Empty;
                                _reptPickSerial_.Tus_isapp = 1;
                                _reptPickSerial_.Tus_iscovernote = 1;
                                _reptPickSerial_.Tus_itm_brand = itemDetails.Mi_brand;
                                _reptPickSerial_.Tus_itm_cd = itemDetails.Mi_cd;
                                _reptPickSerial_.Tus_itm_desc = itemDetails.Mi_longdesc;
                                _reptPickSerial_.Tus_itm_line = 0;
                                _reptPickSerial_.Tus_itm_model = itemDetails.Mi_model;
                                _reptPickSerial_.Tus_itm_stus = _itm.Jcd_itmstus;
                                _reptPickSerial_.Tus_loc = _inventoryHeader.Ith_loc;
                                _reptPickSerial_.Tus_new_status = string.Empty;
                                _reptPickSerial_.Tus_qty = _itm.Jcd_qty;
                                _reptPickSerial_.Tus_ser_1 = "N/A";
                                _reptPickSerial_.Tus_ser_2 = "N/A";
                                _reptPickSerial_.Tus_ser_id = 0;
                                _reptPickSerial_.Tus_ser_line = 0;
                                _reptPickSerial_.Tus_session_id = _invoiceHeader.Sah_session_id;
                                _reptPickSerial_.Tus_unit_cost = 0;
                                _reptPickSerial_.Tus_unit_price = 0;
                                _reptPickSerial_.Tus_usrseq_no = -100;
                                _reptPickSerial_.Tus_warr_no = "N/A";
                                _reptPickSerial_.Tus_warr_period = 0;
                                _reptPickSerial_.Tus_new_remarks = string.Empty;
                                _reptPickSerial_.Tus_job_no = _itm.Jcd_jobno;
                                _reptPickSerial_.Tus_job_line = _itm.Jcd_joblineno;
                                _pickSerial.Add(_reptPickSerial_);
                            }
                        }
                    }


                    Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
                    Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _inventoryDAL.GetSerialID() : -1;

                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);

                    _invoiceHeader.Sah_inv_no = _invNo;
                    _invoiceHeader.Sah_seq_no = InvoiceSeqNo;

                    decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
                    decimal _totalReceiptAmt = 0;
                    if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

                    _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                    _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount


                    if (_invoiceHeader.Sah_is_svat && _invoiceHeader.Sah_inv_tp == "CRED")
                    {
                        decimal vatTotal = _invoiceItem.Sum(X => X.Sad_itm_tax_amt);
                        _invoiceHeader.Sah_anal_8 = _invoiceHeader.Sah_anal_8 + vatTotal;
                    }

                    _salesDAL.SaveSalesHeader(_invoiceHeader);


                    #region Invoice Item Detail
                    foreach (InvoiceItem _itm in _invoiceItem)
                    {
                        MasterItem _item = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                        _invoiceLine = _invoiceLine + 1;

                        _itm.Sad_seq_no = InvoiceSeqNo;
                        //_itm.Sad_itm_line = _invoiceLine;
                        //_itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                        _itm.Sad_inv_no = _invoiceHeader.Sah_inv_no;
                        _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                        _itm.Sad_itm_tp = _item.Mi_itm_tp;
                        _itm.Sad_uom = _item.Mi_itm_uom;
                        _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                        if (_invoiceHeader.Sah_tax_exempted)
                        {
                            _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                            _itm.Sad_itm_tax_amt = 0;
                        }

                        //update DO qty
                        //if (_isDeliveryNow)
                        //{
                        //    decimal _doQty = 0;
                        //    List<ReptPickSerials> _temp = _pickSerial.Where(x => x.Tus_base_itm_line == _itm.Sad_itm_line).ToList<ReptPickSerials>();
                        //    if (_temp != null && _temp.Count > 0)
                        //    {
                        //        _doQty = _temp.Sum(p => p.Tus_qty);
                        //    }
                        //    _itm.Sad_do_qty = _doQty;
                        //}
                        _salesDAL.SaveSalesItem(_itm);
                        _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                        if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
                        {
                            List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                            _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                            foreach (MasterItemTax _one in _itmTax)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;
                                _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                        }
                        else
                        {
                            List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                            _itmTaxEff = _salesDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                            if (_itmTaxEff.Count > 0)
                            {
                                foreach (MasterItemTax _one in _itmTaxEff)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _salesDAL.SaveSalesItemTax(_tax);
                                }
                            }
                            else
                            {

                                List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                                _itmTax = _salesDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                foreach (LogMasterItemTax _one in _itmTax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;
                                    _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                    _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _salesDAL.SaveSalesItemTax(_tax);
                                }
                            }
                        }

                    }
                    #endregion

                    #region Payment
                    string _shortcompany = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com).Mc_anal5;
                    if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                    {
                        _recieptAuto.Aut_year = null;
                        MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        _recNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _recieptAuto.Aut_year = null;
                        _recieptAuto.Aut_modify_dt = null;

                        _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);

                        _recieptHeader.Sar_seq_no = RecieptSeqNo;
                        _recieptHeader.Sar_receipt_no = _recNo;
                        _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
                        _salesDAL.SaveReceiptHeader(_recieptHeader);

                        if (_recieptItem != null)
                            if (_recieptItem.Count > 0)
                            {
                                foreach (RecieptItem _itm in _recieptItem)
                                {
                                    _itm.Sard_seq_no = RecieptSeqNo;
                                    _itm.Sard_inv_no = _invoiceHeader.Sah_inv_no;
                                    _itm.Sard_receipt_no = _recNo;
                                    _salesDAL.SaveReceiptItem(_itm);

                                    if (_itm.Sard_pay_tp.Trim() == "ADVAN")
                                    {
                                        _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
                                        RecieptHeader _rHdr = new RecieptHeader();
                                        _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
                                        _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
                                        _rHdr.Sar_act = true;
                                        _rHdr.Sar_direct = true;
                                        _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
                                        _salesDAL.SaveReceiptHeader(_rHdr);
                                    }
                                    if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                    {
                                        _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                        MasterBusinessEntity _entity = _salesDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");
                                        MasterProfitCenter _profit = _salesDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);
                                        if (_entity != null)
                                            if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                            {
                                                string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                                OutSMS _out = new OutSMS();
                                                _out.Createtime = DateTime.Now;
                                                _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
                                                _out.Msgstatus = 0;
                                                _out.Msgtype = "S";
                                                _out.Receivedtime = DateTime.Now;
                                                _out.Receiver = _entity.Mbe_cd;
                                                //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                                _out.Senderphno = _entity.Mbe_mob;
                                                _out.Refdocno = _itm.Sard_ref_no;
                                                _out.Sender = _invoiceHeader.Sah_cre_by;
                                                _out.Createtime = DateTime.Now;
                                                _inventoryDAL.SaveSMSOut(_out);
                                            }
                                    }

                                    if (_itm.Sard_pay_tp.Trim() == "LORE")
                                    {
                                        _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _invoiceHeader.Sah_cus_cd, _itm.Sard_anal_4);
                                    }

                                    if (_itm.Sard_pay_tp.Trim() == "GVO")
                                    {
                                        _fmsInventoryDal.UpdateRedeemVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                    }

                                }
                            }
                    }
                    #endregion

                    InventoryHeader _invHdr = null;
                    DataTable _dataTable = null; ;
                    if (_pickSerial.Count > 0)
                    {
                        InventorySeqNo = _inventoryDAL.GetSerialID();
                        _pickSerial.ForEach(x => x.Tus_base_doc_no = _invoiceHeader.Sah_inv_no);
                        _pickSerial.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                        _inventoryHeader.Ith_oth_docno = _invoiceHeader.Sah_inv_no;
                        _inventoryHeader.Ith_entry_no = _invoiceHeader.Sah_inv_no;
                        _inventoryHeader.Ith_seq_no = InventorySeqNo;
                        InventoryBLL _bll = new InventoryBLL();


                        _bll.DeliveryOrderWithoutAutoNo(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, _inventoryRepDAL, _inventoryDAL, true, out _invHdr, out _dataTable);

                        // string _doc;
                        _inventoryDAL.UpdateInventoryAutoNumber(_invHdr, _inventoryAuto, "-", out _DONo);
                        MasterAutoNumber _AutoNo = new MasterAutoNumber();
                        int _e = 0;
                        if (_dataTable.Rows.Count > 0)
                        {
                            for (int i = 0; i < _dataTable.Rows.Count; i++)
                            {
                                if (_dataTable.Rows[i]["DocType"].ToString() == "ADJ")
                                {
                                    _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                    _AutoNo.Aut_moduleid = "ADJ";
                                    _AutoNo.Aut_direction = null;
                                    _AutoNo.Aut_start_char = "ADJ";
                                    _AutoNo.Aut_cate_tp = "LOC";
                                    //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                    _AutoNo.Aut_year = null;

                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                    string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                }
                                else if (_dataTable.Rows[i]["DocType"].ToString() == "GRN")
                                {
                                    _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                    _AutoNo.Aut_moduleid = "GRN";
                                    _AutoNo.Aut_direction = null;
                                    _AutoNo.Aut_start_char = "GRN";
                                    _AutoNo.Aut_cate_tp = "LOC";
                                    //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                    _AutoNo.Aut_year = _invHdr.Ith_doc_date.Year;

                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                    string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                }
                                else if (_dataTable.Rows[i]["DocType"].ToString() == "PO")
                                {
                                    //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                                    //_AutoNo.Aut_moduleid = "PO_LOCAL";
                                    //_AutoNo.Aut_direction = null;
                                    //_AutoNo.Aut_start_char = "PO";
                                    //_AutoNo.Aut_cate_tp = "COM";
                                    //_AutoNo.Aut_year = null;

                                    _AutoNo.Aut_cate_cd = _invHdr.Ith_com;
                                    _AutoNo.Aut_cate_tp = "COM";
                                    _AutoNo.Aut_direction = null;
                                    _AutoNo.Aut_modify_dt = null;
                                    _AutoNo.Aut_moduleid = "PUR";
                                    _AutoNo.Aut_start_char = "PUR";
                                    _AutoNo.Aut_year = null;

                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                    string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                                    _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                }
                            }
                        }

                        //update inv no
                        _inventoryDAL.UpdateOtherDocuments(_DONo, _invNo);
                        _inventoryDAL.UpdateBatchRefDoc(_DONo, _invNo);
                    }

                }

                //inr_sermstsub
                List<MST_ITM_CAT_COMP> _itmCompList = new List<MST_ITM_CAT_COMP>();
                Int32 _serLine = 0;
                foreach (Service_job_Det _tmpJobDet in _processJobList)
                {
                    MasterItem _mstItm = _inventoryDAL.GetItem(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_itm_cd);
                    _itmCompList = _custServiceDAL.getMasterItmCatComponant(_mstItm.Mi_cate_1, _mstItm.Mi_cate_2, _mstItm.Mi_cate_3);

                    if (_itmCompList.Count <= 0)
                    {
                        _itmCompList = _custServiceDAL.getMasterItmCatComponant(_mstItm.Mi_cate_1, _mstItm.Mi_cate_2, null);
                    }

                    if (_itmCompList.Count > 0)
                    {
                        foreach (MST_ITM_CAT_COMP _tmpItmcomp in _itmCompList)
                        {
                            foreach (Service_Confirm_detail _tmpConDet in _confDet)
                            {
                                if (_tmpItmcomp.Mcc_itm_cd == _tmpConDet.Jcd_itmcd)
                                {

                                    _custServiceDAL.Update_INR_SERMSTSUB(Convert.ToInt32(_tmpJobDet.Jbd_ser_id), _tmpConDet.Jcd_itmcd, 0);
                                    InventoryWarrantySubDetail _invSerSubMst = new InventoryWarrantySubDetail();
                                    _invSerSubMst.Irsms_act = true;
                                    _invSerSubMst.Irsms_itm_cd = _tmpConDet.Jcd_itmcd;
                                    _invSerSubMst.Irsms_itm_stus = _tmpConDet.Jcd_itmstus;
                                    _invSerSubMst.Irsms_mfc = "N/A";
                                    _invSerSubMst.Irsms_qty = _tmpConDet.Jcd_qty;
                                    _invSerSubMst.Irsms_ser_id = Convert.ToInt32(_tmpJobDet.Jbd_ser_id);
                                    if (_serLine == 0)
                                    {
                                        List<InventoryWarrantySubDetail> _getCurList = new List<InventoryWarrantySubDetail>();
                                        _getCurList = _custServiceDAL.getSerMstSubBySerID(_invSerSubMst.Irsms_ser_id);

                                        if (_getCurList != null)
                                        {
                                            _serLine = _getCurList.Count + 1;
                                        }
                                        else
                                        {
                                            _serLine = _serLine + 1;
                                        }

                                    }
                                    else
                                    {
                                        _serLine = _serLine + 1;
                                    }
                                    _invSerSubMst.Irsms_ser_line = _serLine;
                                    ReptPickSerials _serDet = _inventoryDAL.GetReservedByserialID(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_loc, null, _tmpConDet.Jcd_itmcd, _tmpConDet.Jcd_ser_id);
                                    _invSerSubMst.Irsms_sub_ser = _serDet.Tus_ser_1;
                                    _invSerSubMst.Irsms_tp = "C";
                                    _invSerSubMst.Irsms_warr_no = _tmpJobDet.Jbd_mainitmwarr;
                                    _invSerSubMst.Irsms_warr_period = _tmpJobDet.Jbd_warrperiod;
                                    _invSerSubMst.Irsms_warr_rem = _tmpJobDet.Jbd_warrrmk;
                                    _custServiceDAL.SAVE_INR_SERMSTSUB(_invSerSubMst);
                                }
                            }
                        }
                    }
                }


                //_custServiceDAL.TransactionCommit();
                //_inventoryDAL.TransactionCommit();
                //_salesDAL.TransactionCommit();
                //_inventoryRepDAL.TransactionCommit();
                //_fmsInventoryDal.TransactionCommit();
                //_generalDAL.TransactionCommit();
                //_custServiceDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_generalDAL.ConnectionClose();

                _effects = 1;
                return _effects;
            }
            catch (Exception ex)
            {
                //_custServiceDAL.TransactionRollback();
                //_inventoryDAL.TransactionRollback();
                //_salesDAL.TransactionRollback();
                //_inventoryRepDAL.TransactionRollback();
                //_fmsInventoryDal.TransactionRollback();
                //_generalDAL.TransactionRollback();
                errorMsg = ex.Message;
                _effects = -1;
                return _effects;
            }

        }

        //Nadeeka
        public Int32 Save_ItemCanibalize(MasterAutoNumber _masterAuto_out, InventoryHeader _outHeader, List<ReptPickSerials> _outSerial, List<InventorySubSerialMaster> _inserList, string Type, out string _err)
        {
            Int32 _effects = 0;
            string _aodoutno = string.Empty;
            InventoryBLL _InventoryBLL = new InventoryBLL();
            SalesBLL _SalesBLL = new SalesBLL();
            string _recNo = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            string _db = string.Empty;
            MasterItem _itmlist = new MasterItem();
            List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
            string documntNo = "";

            Int32 result = 0;
            try
            {


                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();
                string docNum = "";


                result = _InventoryBLL.ADJMinus_Service(_inventoryDAL, _inventoryRepDAL, _outHeader, _outSerial, null, _masterAuto_out, out documntNo);
                docNum += "\nAdjustment minus doc number:" + documntNo;

                List<String> _LocList = _inserList.Select(x => x.Irsms_loc_chg).Distinct().ToList();

                foreach (String _loc in _LocList)
                {
                    string _aodInNo = string.Empty;
                    #region SaveAODIn
                    MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                    #region Fill MasterAutoNumber
                    _inventoryAutoin.Aut_cate_cd = _loc;
                    _inventoryAutoin.Aut_cate_tp = "LOC";
                    _inventoryAutoin.Aut_direction = null;
                    _inventoryAutoin.Aut_modify_dt = null;
                    _inventoryAutoin.Aut_moduleid = "ADJ";
                    _inventoryAutoin.Aut_number = 5;//what is Aut_number
                    _inventoryAutoin.Aut_start_char = "ADJ";
                    _inventoryAutoin.Aut_year = null;
                    #endregion


                    List<InventorySubSerialMaster> oList = _inserList.FindAll(x => (x.Irsms_loc_chg == _loc));
                    string _binCode = _inventoryDAL.GetDefaultBinCode(_outHeader.Ith_com, _loc);
                    foreach (InventorySubSerialMaster item in oList)
                    {


                        ReptPickSerials _pick = new ReptPickSerials();
                        #region Fill Serial
                        _itmlist = _inventoryDAL.GetItem(_outHeader.Ith_com, item.Irsms_itm_cd);

                        if (_itmlist != null)
                        {
                            _pick.Tus_ser_id = _inventoryDAL.GetSerialID();
                            _pick.Tus_ser_1 = item.Irsms_sub_ser;
                            _pick.Tus_warr_no = item.Irsms_warr_no;
                            _pick.Tus_base_doc_no = string.Empty;
                            _pick.Tus_bin = _binCode;
                            _pick.Tus_com = _outHeader.Ith_com;
                            _pick.Tus_cre_by = _outHeader.Ith_cre_by;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_doc_dt = _outHeader.Ith_doc_date;
                            _pick.Tus_doc_no = string.Empty;
                            _pick.Tus_exist_grncom = string.Empty;
                            _pick.Tus_exist_grnno = string.Empty;
                            _pick.Tus_exist_supp = string.Empty;
                            _pick.Tus_itm_stus = item.Irsms_itm_sts_chg;
                            _pick.Tus_unit_price = 0;
                            _pick.Tus_ageloc = string.Empty;
                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = item.Irsms_itm_cd;
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _loc;
                            _pick.Tus_new_remarks = "ADJ";
                            _pick.Tus_new_status = String.Empty;
                            _pick.Tus_ser_4 = string.Empty;
                            _pick.Tus_qty = 1;
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_job_no = string.Empty;
                            _pick.Tus_job_line = 0;
                            if (Type == "M")
                            {
                                if (item.Irsms_costType == "AMT")
                                {
                                    _pick.Tus_unit_cost = item.Irsms_cost_per;
                                }
                                else
                                {
                                    _pick.Tus_unit_cost = _outSerial[0].Tus_unit_cost * (item.Irsms_cost_per / 100);
                                }
                            }
                            else
                            {
                                _pick.Tus_unit_cost = _outSerial[0].Tus_unit_cost * (item.Irsms_cost_per / 100);
                            }
                            _picklist.Add(_pick);



                        }

                        #endregion



                    }
                    _outHeader.Ith_loc = _loc;
                    _outHeader.Ith_direct = true;
                    _outHeader.Ith_seq_no = 0;
                    _outHeader.Ith_oth_docno = documntNo; // 15-07-2015 Nadeeka

                    _picklist.ForEach(x => x.Tus_bin = _binCode);
                    _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, _outHeader, _picklist, null, _inventoryAutoin, out _aodInNo);
                    _picklist = new List<ReptPickSerials>();
                    docNum += "\nAdjustment plus doc number:" + _aodInNo;
                    #endregion
                }






                // _custServiceDAL.TransactionCommit();
                //_custServiceDAL.ConnectionClose();


                _inventoryDAL.TransactionCommit();

                _inventoryDAL.ConnectionClose();





                _err = "Successfully Saved! " + docNum;
                _effects = 1;

            }
            catch (Exception ex)
            {

                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();


                _effects = -1;
                _err = ex.Message.ToString();
            }

            return _effects;
        }


        //Nadeeka
        public Int32 Save_SupplierClaim(Service_WCN_Hdr _ReqSupHdr, List<Service_WCN_Detail> _claimItemList, MasterAutoNumber _masterAuto, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, MasterAutoNumber _recieptAuto, InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, MasterAutoNumber _invoiceAuto, string _type, Boolean _isRecall, string _sessionID, out string _err)
        {
            Int32 _effects = 0;
            string _aodoutno = string.Empty;
            InventoryBLL _InventoryBLL = new InventoryBLL();
            SalesBLL _SalesBLL = new SalesBLL();
            string _recNo = string.Empty;
            _inventoryDAL = new InventoryDAL();
            string _db = string.Empty;
            try
            {
                List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
                MasterAutoNumber _inventoryAuto = new MasterAutoNumber();
                MasterItem _itmlist = new MasterItem();
                _custServiceDAL = new CustServiceDAL();
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                int SeqNum = _custServiceDAL.GetSupClaimSeq();
                string _message = string.Empty;
                string _genSalesDoc = string.Empty;
                string _genInventoryDoc = string.Empty;
                string DocNum = string.Empty;
                string _claimNum = string.Empty;
                string _errLoc = _InventoryBLL.GetGITCorrectLocation(_ReqSupHdr.Swc_com);
                string _errLocBin = _InventoryBLL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _errLoc);

                _ReqSupHdr.SWC_REC_TYPE = _type;

                #region Request
                if ((_ReqSupHdr.Swc_stus == "P" || _ReqSupHdr.Swc_stus == "L") && _isRecall == false)
                {
                    if (string.IsNullOrEmpty(_errLoc))
                    {
                        _effects = -1;
                        _err = "AOD correction virtual location not setup for company code " + _ReqSupHdr.Swc_com;

                        return _effects;
                    }
                    //if (_ReqSupHdr.Swc_stus != "L")
                    //{
                    if (_isRecall == false)
                    {
                        MasterAutoNumber _ClaimDoc = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);

                        DocNum = _ReqSupHdr.Swc_loc + "-" + _ClaimDoc.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _ClaimDoc.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                        _inventoryDAL.UpdateAutoNumber(_masterAuto);

                        _ReqSupHdr.Swc_seq_no = SeqNum;
                        _ReqSupHdr.Swc_doc_no = DocNum;
                    }


                    //     }
                    //   else
                    //{
                    //_claimNum = _ReqSupHdr.Swc_doc_no;
                    //SeqNum = _ReqSupHdr.Swc_seq_no;
                    if (_ReqSupHdr.Swc_stus == "L")
                    {
                        _custServiceDAL.UpdateSupplierClaimWarrantySts(_claimNum, "P"); //Sanjeewa 2015-01-18 Changed type From "L" to "P"
                        _ReqSupHdr.Swc_stus = "P";
                    }
                    //   }
                    if (_ReqSupHdr.Swc_stus == "P" && _isRecall == false)
                    {
                        #region Invoice
                        if (_invoiceHeader != null)
                        {
                            Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();

                            _invoiceAuto.Aut_year = null;
                            MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                            string _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                            _invoiceAuto.Aut_year = null;
                            _invoiceAuto.Aut_modify_dt = null;
                            _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);

                            _invoiceHeader.Sah_inv_no = _invNo;
                            _invoiceHeader.Sah_seq_no = InvoiceSeqNo;



                            _salesDAL.SaveSalesHeader(_invoiceHeader);


                            #region Invoice Item Detail
                            Int64 _invoiceLine = 0;
                            foreach (InvoiceItem _itm in _invoiceItem)
                            {
                                MasterItem _item = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                _invoiceLine = _invoiceLine + 1;

                                _itm.Sad_seq_no = InvoiceSeqNo;
                                //_itm.Sad_itm_line = _invoiceLine;
                                //_itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                                _itm.Sad_inv_no = _invoiceHeader.Sah_inv_no;
                                _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                                _itm.Sad_itm_tp = _item.Mi_itm_tp;
                                _itm.Sad_uom = _item.Mi_itm_uom;
                                _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                                if (_invoiceHeader.Sah_tax_exempted)
                                {
                                    _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                                    _itm.Sad_itm_tax_amt = 0;
                                }


                                _salesDAL.SaveSalesItem(_itm);
                                _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                                if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
                                {
                                    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty);

                                    decimal newTaxValue = 0;

                                    foreach (MasterItemTax _one in _itmTax)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100; // ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _salesDAL.SaveSalesItemTax(_tax);
                                        newTaxValue += _tax.Satx_itm_tax_amt;
                                    }

                                    _itmTax = new List<MasterItemTax>();
                                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty);

                                    foreach (MasterItemTax _one in _itmTax)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _salesDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                                else
                                {
                                    List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                                    _itmTaxEff = _salesDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                    if (_itmTaxEff.Count > 0)
                                    {
                                        foreach (MasterItemTax _one in _itmTaxEff)
                                        {
                                            InvoiceItemTax _tax = new InvoiceItemTax();
                                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                                            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                            _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                            _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                            _tax.Satx_job_line = 0;
                                            _tax.Satx_job_no = "";
                                            _tax.Satx_seq_no = InvoiceSeqNo;
                                            _salesDAL.SaveSalesItemTax(_tax);
                                        }
                                    }
                                    else
                                    {

                                        List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                                        _itmTax = _salesDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                        foreach (LogMasterItemTax _one in _itmTax)
                                        {
                                            InvoiceItemTax _tax = new InvoiceItemTax();
                                            _tax.Satx_inv_no = _itm.Sad_inv_no;
                                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                            _tax.Satx_itm_line = _itm.Sad_itm_line;
                                            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                            _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                            _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                            _tax.Satx_job_line = 0;
                                            _tax.Satx_job_no = "";
                                            _tax.Satx_seq_no = InvoiceSeqNo;
                                            _salesDAL.SaveSalesItemTax(_tax);
                                        }
                                    }
                                }



                            }
                            #endregion
                        }
                        #endregion Invoice
                    }

                }
                else if (_ReqSupHdr.Swc_stus == "I")
                {
                    _claimNum = _ReqSupHdr.Swc_doc_no;

                    MasterAutoNumber _ClaimDoc = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);

                    DocNum = _ReqSupHdr.Swc_loc + "-" + _ClaimDoc.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _ClaimDoc.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _inventoryDAL.UpdateAutoNumber(_masterAuto);

                    _ReqSupHdr.Swc_seq_no = SeqNum;
                    _ReqSupHdr.Swc_doc_no = DocNum;
                    _ReqSupHdr.Swc_othdocno = _claimNum;


                }
                else
                {
                    SeqNum = _ReqSupHdr.Swc_seq_no;
                    DocNum = _ReqSupHdr.Swc_doc_no;
                }
                if ((_ReqSupHdr.Swc_stus == "P" || _ReqSupHdr.Swc_stus == "L") || _ReqSupHdr.Swc_stus == "I")
                {
                    _custServiceDAL.Save_scv_SupplierClaim(_ReqSupHdr);
                }


                if (_type == "REJ")// Supplier Reject
                {
                    _custServiceDAL.UpdateSupplierClaimWarrantySts(_ReqSupHdr.Swc_doc_no, "J");
                }
                Int32 _reqAct = 0;
                DataTable dtcnt = _custServiceDAL.getWCNTypes(_type);
                if (_ReqSupHdr.Swc_stus == "I")
                {
                    if (dtcnt != null && dtcnt.Rows.Count > 0)
                    {
                        foreach (DataRow r in dtcnt.Rows)
                        {
                            _reqAct = Convert.ToInt32(r["SST_REQ_ACT"]);

                        }
                    }
                }


                foreach (Service_WCN_Detail item in _claimItemList)
                {
                    if (_ReqSupHdr.Swc_stus == "I")
                    {
                        //updated by akila 2018/02/21
                        _custServiceDAL.UpdateSupplierClaimrec(_claimNum, item.Original_Swd_line);
                        //_custServiceDAL.UpdateSupplierClaimrec(_claimNum, item.SWD_LINE);

                        _custServiceDAL.UpdateSupplierClaimWarrantySts(_claimNum, "I");
                        string _tech = string.Empty;
                        Service_Tech_Aloc_Hdr _techAlloc = _custServiceDAL.GetAllocationDet(_ReqSupHdr.Swc_com, item.SWD_JOBNO);
                        if (_techAlloc != null)
                        {
                            DataTable dtl = _custServiceDAL.GetUserNameByEmpCode(_techAlloc.STH_EMP_CD);

                            foreach (DataRow r in dtl.Rows)
                            {
                                _tech = (string)r["se_usr_id"];

                            }
                            string message = string.Empty;
                            message = "Supplier Claim Received . Job # " + item.SWD_JOBNO;

                            PopupCollect oPopupCollect = new PopupCollect();
                            oPopupCollect.Doc_type = "SUPWARA";
                            oPopupCollect.Cur_date = DateTime.Now;
                            oPopupCollect.Sender = "SUPWARA";
                            oPopupCollect.Receiver = _tech;
                            oPopupCollect.Message = message;
                            oPopupCollect.Doc_no = DocNum;
                            oPopupCollect.Other_doc_no = string.Empty;
                            oPopupCollect.Direction = "1";
                            oPopupCollect.Isvisible = false;
                            oPopupCollect.Create_user = _ReqSupHdr.Swc_cre_by;
                            oPopupCollect.Create_when = DateTime.Now;
                            oPopupCollect.Modify_by = _ReqSupHdr.Swc_cre_by;
                            oPopupCollect.Modify_when = DateTime.Now;
                            oPopupCollect.Remarks = string.Empty;
                            oPopupCollect.Company = _ReqSupHdr.Swc_cre_by;
                            oPopupCollect.Location = _ReqSupHdr.Swc_loc;
                            oPopupCollect.Channel = string.Empty;
                            oPopupCollect.Doc_status = string.Empty;

                            int result = _salesDAL.InsertIntoSCM_POPUP_COLECTOR(oPopupCollect);

                        }
                    }
                    item.SWD_SEQ_NO = SeqNum;
                    item.SWD_DOC_NO = DocNum;
                    item.SWD_OLDPARTSEQ = item.SWD_IS_PART;

                    if ((_ReqSupHdr.Swc_stus == "P" || _ReqSupHdr.Swc_stus == "L") || _ReqSupHdr.Swc_stus == "I")
                    {
                        _effects += _custServiceDAL.Save_scv_SupplierClaimDet(item);
                    }

                    if ((_ReqSupHdr.Swc_stus == "P") && _isRecall == false)//07-08-2015 Nadeeka
                    //if ((_ReqSupHdr.Swc_stus == "P" || _ReqSupHdr.Swc_stus == "H") && _isRecall == false)//07-08-2015 Nadeeka
                    {
                        if (item.SWD_IS_PART == 0)
                        {
                            _custServiceDAL.UpdateSupplierClaimWarrantySent_job(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, 1);
                        }
                        else
                        {
                            _custServiceDAL.UpdateSupplierClaimWarrantySent_job_oldpt(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, item.SWD_ITMCD, item.SWD_SER1, 1);
                        }//23-07-2015
                    }






                    if (_ReqSupHdr.Swc_stus == "R")//07-08-2015 Nadeeka (Rejecet)
                    {
                        _custServiceDAL.UpdateSupplierClaimWarrantySts(_ReqSupHdr.Swc_doc_no, "R");//26-08-2015

                        if (item.SWD_IS_PART == 0)
                        {
                            _custServiceDAL.UpdateSupplierClaimWarrantySent_job_Reject(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, _ReqSupHdr.Swc_mod_by, 2, _ReqSupHdr.SWC_HOLD_REASON);
                        }
                        else
                        {
                            _custServiceDAL.UpdateSupplierClaimWarrantySent_job_oldpt_Reject(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, item.SWD_ITMCD, item.SWD_SER1, _ReqSupHdr.Swc_mod_by, 2, _ReqSupHdr.SWC_HOLD_REASON, item.old_pt_seq);
                        }//23-07-2015
                    }


                    if (_ReqSupHdr.Swc_stus == "H")//07-08-2015 Nadeeka (Hold)
                    {
                        _custServiceDAL.UpdateSupplierClaimWarrantySts(_ReqSupHdr.Swc_doc_no, "H");//26-08-2015

                        if (item.SWD_IS_PART == 0)
                        {
                            _custServiceDAL.UpdateSupplierClaimWarrantySent_job_Reject(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, _ReqSupHdr.Swc_mod_by, 3, _ReqSupHdr.SWC_HOLD_REASON);
                        }
                        else
                        {
                            _custServiceDAL.UpdateSupplierClaimWarrantySent_job_oldpt_Reject(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, item.SWD_ITMCD, item.SWD_SER1, _ReqSupHdr.Swc_mod_by, 3, _ReqSupHdr.SWC_HOLD_REASON, item.old_pt_seq);
                        }//23-07-2015
                    }

                    if (_ReqSupHdr.Swc_stus == "C")//07-08-2015 Nadeeka (Rejecet)
                    {
                        _custServiceDAL.UpdateSupplierClaimWarrantySts(_ReqSupHdr.Swc_doc_no, "C");//26-08-2015

                        if (item.SWD_IS_PART == 0)
                        {
                            _custServiceDAL.UpdateSupplierClaimWarrantySent_job_cancel(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, _ReqSupHdr.Swc_mod_by);
                        }
                        else
                        {
                            _custServiceDAL.UpdateSupplierClaimWarrantySent_job_oldpt_Cancel(item.SWD_JOBNO_PRV, item.SWD_JOBLINE, item.SWD_ITMCD, item.SWD_SER1, _ReqSupHdr.Swc_mod_by);
                        }//23-07-2015
                    }


                    if (_ReqSupHdr.Swc_stus == "I")
                    {
                        if (_reqAct == 0)
                        {
                            if (item.SWD_IS_PART == 0)
                            {
                                _custServiceDAL.UpdateSupplierClaimWarrantyRec_job(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV);
                            }
                            else
                            {
                                _custServiceDAL.UpdateSupplierClaimWarrantyRec_job_oldpt(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, item.SWD_ITMCD, item.SWD_OLD_SER, item.SWD_SER1);//23-07-2015
                            }
                        }
                        else
                        {
                            if (item.SWD_IS_PART == 0)
                            {
                                _custServiceDAL.UpdateSupplierClaimWarrantySent_job(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, 0);
                            }
                            else
                            {
                                _custServiceDAL.UpdateSupplierClaimWarrantySent_job_oldpt(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, item.SWD_ITMCD, item.SWD_OLD_SER, 0);


                            }


                            if (item.SWD_IS_PART == 0)
                            {
                                _custServiceDAL.UpdateSupplierClaimWarrantySent_job_Reject(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, _ReqSupHdr.Swc_mod_by, 4, _ReqSupHdr.SWC_HOLD_REASON);
                            }
                            else
                            {
                                _custServiceDAL.UpdateSupplierClaimWarrantySent_job_oldpt_Reject(item.SWD_JOBNO_PRV, item.SWD_JOBLINE_PRV, item.SWD_ITMCD, item.SWD_OLD_SER, _ReqSupHdr.Swc_mod_by, 4, _ReqSupHdr.SWC_HOLD_REASON, item.old_pt_seq);
                            }//
                        }

                    }
                }
                if (_ReqSupHdr.Swc_stus == "P" && _isRecall == false)
                {
                    #region AOD Out/ IN
                    //  List<String> _JobNumList = _claimItemList.Distinct().Where(p => (p.SWD_IS_PART == 0 && p.SWD_IS_STOCK == 1)).Select(x => x.SWD_JOBNO).ToList();
                    //  List<String> _JobNumList = _claimItemList.Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<String> _JobNumList = _claimItemList.Where(p => (p.SWD_IS_PART == 0) && (p.SWD_IS_STOCK == 1)).Select(X => X.SWD_JOBNO).Distinct().ToList();

                    List<Service_WCN_Detail> oList1 = _claimItemList.FindAll(x => (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1));
                    foreach (String _jobNum in _JobNumList)
                    {
                        InventoryHeader invHdr = new InventoryHeader();
                        MasterAutoNumber masterAutoNum = new MasterAutoNumber();

                        #region Inventory Header
                        invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                        invHdr.Ith_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_docno = string.Empty;
                        invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                        invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                        invHdr.Ith_doc_tp = "AOD";
                        invHdr.Ith_cate_tp = "SERVICE";
                        invHdr.Ith_sub_tp = "NOR";
                        invHdr.Ith_is_manual = false;
                        invHdr.Ith_stus = "A";
                        invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                        invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                        invHdr.Ith_direct = false;
                        invHdr.Ith_session_id = _sessionID;
                        invHdr.Ith_manual_ref = DocNum;
                        invHdr.Ith_remarks = string.Empty;
                        invHdr.Ith_vehi_no = "N/A";
                        invHdr.Ith_bus_entity = "N/A";
                        invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_loc = _errLoc;
                        invHdr.Ith_pc = "N/A";
                        invHdr.Ith_job_no = _jobNum;
                        invHdr.Ith_sub_docno = string.Empty;
                        #endregion

                        #region Auto Number
                        if (invHdr != null)
                        {

                            _inventoryAuto.Aut_moduleid = "AOD";
                            _inventoryAuto.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                            _inventoryAuto.Aut_cate_tp = "LOC";
                            _inventoryAuto.Aut_direction = 0;
                            _inventoryAuto.Aut_modify_dt = null;
                            _inventoryAuto.Aut_year = DateTime.Now.Year;
                            _inventoryAuto.Aut_start_char = "AOD";
                        }
                        #endregion


                        //  foreach (Service_WCN_Detail jobitem in _claimItemList)
                        // {
                        //  List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1));

                        foreach (Service_WCN_Detail item in oList1.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            #region Inventory Serial



                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {
                                    //  _picklist = _inventoryDAL.GetInventorySerialListById(Convert.ToString(item.SWD_SERID), _ReqSupHdr.Swc_loc);
                                    ReptPickSerials _serDet = _inventoryDAL.GetReservedByserialID(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc, null, item.SWD_ITMCD, item.SWD_SERID);
                                    if (_serDet == null)
                                    {
                                        _err = "Serial not available" + item.SWD_SER1;
                                        _effects = -1;
                                        break;
                                    }

                                    _serDet.Tus_new_remarks = "AOD-OUT";
                                    _picklist.Add(_serDet);
                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _binCode;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                    if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion
                        }
                        // }

                        //AOD out
                        # region Save aod out



                        if (invHdr != null)
                        {
                            // MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                            //_inventoryAutoin.Aut_moduleid = "AOD";
                            //_inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                            //_inventoryAutoin.Aut_cate_tp = "LOC";
                            //_inventoryAutoin.Aut_direction = 1;
                            //_inventoryAutoin.Aut_modify_dt = null;
                            //_inventoryAutoin.Aut_year = DateTime.Now.Year;

                            //int _effect = _InventoryBLL.SaveCommonOutWardEntryService(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc, _ReqSupHdr.Swc_com, null, invHdr, _inventoryAuto, null, null, _picklist, null, out _message, out _genSalesDoc, out _genInventoryDoc, false, false, _inventoryDAL, _salesDAL, _inventoryRepDAL, _generalDAL, _fmsInventoryDal);

                            _aodoutno = string.Empty;
                            Int16 effect = _InventoryBLL.SaveOutwardWithoutAutoNo(invHdr, _picklist, null, _inventoryAuto, _inventoryDAL, out _aodoutno);
                            _picklist = new List<ReptPickSerials>();
                            invHdr = new InventoryHeader();
                            //Int16 effect = _InventoryBLL.SaveOutwardScanSerial(invHdr, _picklist, null);
                            //effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAuto, "-", out _aodoutno);


                        }
                        #endregion

                        #region AOD In

                        invHdr = new InventoryHeader();
                        masterAutoNum = new MasterAutoNumber();

                        #region Inventory Header
                        invHdr.Ith_loc = _errLoc;
                        invHdr.Ith_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_docno = _aodoutno;
                        invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                        invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                        invHdr.Ith_doc_tp = "AOD";
                        invHdr.Ith_cate_tp = "SERVICE";
                        invHdr.Ith_sub_tp = "NOR";
                        invHdr.Ith_is_manual = false;
                        invHdr.Ith_stus = "A";
                        invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                        invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                        invHdr.Ith_direct = true;
                        invHdr.Ith_session_id = _sessionID;
                        invHdr.Ith_manual_ref = DocNum;
                        invHdr.Ith_remarks = string.Empty;
                        invHdr.Ith_vehi_no = "N/A";
                        invHdr.Ith_bus_entity = "N/A";
                        invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_loc = _ReqSupHdr.Swc_loc;
                        invHdr.Ith_pc = "N/A";
                        invHdr.Ith_job_no = _jobNum;
                        invHdr.Ith_sub_docno = string.Empty;
                        #endregion




                        //  foreach (Service_WCN_Detail jobitem in _claimItemList)
                        //  {
                        //  List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1));

                        foreach (Service_WCN_Detail item in oList1.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            #region Inventory Serial



                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            // string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {

                                    _pick.Tus_ser_id = item.SWD_SERID;
                                    _pick.Tus_ser_1 = item.SWD_SER1;
                                    _pick.Tus_warr_no = item.SWD_WARRNO;
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _errLocBin;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _errLoc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                    if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    _picklist.Add(_pick);

                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _errLocBin;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _errLoc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                    if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion
                        }



                        # region Save aod In



                        if (invHdr != null)
                        {
                            MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                            _inventoryAutoin.Aut_moduleid = "AOD";
                            _inventoryAutoin.Aut_cate_cd = _errLoc;
                            _inventoryAutoin.Aut_cate_tp = "LOC";
                            _inventoryAutoin.Aut_direction = 1;
                            _inventoryAutoin.Aut_modify_dt = null;
                            _inventoryAutoin.Aut_year = DateTime.Now.Year;
                            _inventoryAutoin.Aut_start_char = "AOD";


                            //  _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, null);
                            string _aodInNo = string.Empty;
                            _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, null, _inventoryAutoin, out _aodInNo);



                            //   int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                            // _inventoryDAL.UpdateSupplierClaimDoc(_aodInNo, DocNum, _jobNum);
                            invHdr = new InventoryHeader();
                            _picklist = new List<ReptPickSerials>();

                        }
                        #endregion
                        //   }
                        #endregion


                    }
                    #endregion


                }
                #endregion


                #region 1.Received Main item
                if (_ReqSupHdr.Swc_stus == "I")
                {
                    #region AOD Out Receive \ Issue
                    List<String> _JobNumListRec = _claimItemList.Where(p => (p.SWD_SER1 == p.SWD_OLD_SER) && (p.SWD_IS_PART == 0) && (p.SWD_IS_STOCK == 1) && (p.Swd_need_chk == 0)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_SER1 == x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1) && (x.Swd_need_chk == 0));
                    List<Service_WCN_Detail> oList1 = _claimItemList.FindAll(x => (x.SWD_SER1 == x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1) && (x.Swd_need_chk == 0));

                    // List<String> _JobNumListRec = _claimItemList.Distinct().Where(p => (p.SWD_SER1 == p.SWD_OLD_SER) && (p.SWD_IS_PART == 0) && p.SWD_IS_STOCK == 1 && p.SWD_IS_STOCK == 1).Select(x => x.SWD_JOBNO).ToList();
                    foreach (String _jobNum in _JobNumListRec)
                    {
                        InventoryHeader invHdr = new InventoryHeader();
                        MasterAutoNumber masterAutoNum = new MasterAutoNumber();

                        #region Inventory Header
                        invHdr.Ith_loc = _errLoc;
                        invHdr.Ith_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_docno = string.Empty;
                        invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                        invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                        invHdr.Ith_doc_tp = "AOD";
                        invHdr.Ith_cate_tp = "SERVICE";
                        invHdr.Ith_sub_tp = "NOR";
                        invHdr.Ith_is_manual = false;
                        invHdr.Ith_stus = "A";
                        invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                        invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                        invHdr.Ith_direct = false;
                        invHdr.Ith_session_id = _sessionID;
                        invHdr.Ith_manual_ref = DocNum;
                        invHdr.Ith_remarks = string.Empty;
                        invHdr.Ith_vehi_no = "N/A";
                        invHdr.Ith_bus_entity = "N/A";
                        invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_loc = _ReqSupHdr.Swc_loc;
                        invHdr.Ith_pc = "N/A";
                        invHdr.Ith_job_no = _jobNum;
                        invHdr.Ith_sub_docno = string.Empty;
                        #endregion

                        #region Auto Number
                        if (invHdr != null)
                        {

                            _inventoryAuto.Aut_moduleid = "AOD";
                            _inventoryAuto.Aut_cate_cd = _errLoc;
                            _inventoryAuto.Aut_cate_tp = "LOC";
                            _inventoryAuto.Aut_direction = 0;
                            _inventoryAuto.Aut_modify_dt = null;
                            _inventoryAuto.Aut_year = DateTime.Now.Year;
                            _inventoryAuto.Aut_start_char = "AOD";

                        }
                        #endregion


                        //  foreach (Service_WCN_Detail jobitem in _claimItemList)
                        //  {
                        //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_SER1 == x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1));

                        foreach (Service_WCN_Detail item in oList.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            #region Inventory Serial


                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _errLoc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {
                                    //  _picklist = _inventoryDAL.GetInventorySerialListById(Convert.ToString(item.SWD_SERID), _ReqSupHdr.Swc_loc);
                                    ReptPickSerials _serDet = _inventoryDAL.GetReservedByserialID(_ReqSupHdr.Swc_com, _errLoc, null, item.SWD_ITMCD, item.SWD_SERID);
                                    if (_serDet == null)
                                    {
                                        _err = "Serial not available" + item.SWD_OLD_SER;
                                        _effects = -1;
                                        break;
                                    }
                                    _serDet.Tus_new_remarks = "AOD-OUT";
                                    _picklist.Add(_serDet);
                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _errLocBin;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _errLoc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                    if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion
                        }
                        // }


                        # region Save aod out



                        if (invHdr != null)
                        {

                            //int _effect = _InventoryBLL.SaveCommonOutWardEntryService(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc, _ReqSupHdr.Swc_com, null, invHdr, _inventoryAuto, null, null, _picklist, null, out _message, out _genSalesDoc, out _genInventoryDoc, false, false,  _inventoryDAL, _salesDAL, _inventoryRepDAL, _generalDAL, _fmsInventoryDal);
                            _aodoutno = string.Empty;
                            Int16 effect = _InventoryBLL.SaveOutwardWithoutAutoNo(invHdr, _picklist, null, _inventoryAuto, _inventoryDAL, out _aodoutno);
                            invHdr = new InventoryHeader();
                            _picklist = new List<ReptPickSerials>();
                            //Int16 effect = _InventoryBLL.SaveOutwardScanSerial(invHdr, _picklist, null);
                            //effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAuto, "-", out _aodoutno);


                        }
                        #endregion

                        #region AOD In Receive

                        invHdr = new InventoryHeader();
                        masterAutoNum = new MasterAutoNumber();


                        //Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //if (_jobobj.SJB_JOBSTAGE >= 6)
                        //{
                        //    _jobNO = string.Empty;
                        //}
                        //else
                        //{
                        //    _jobNO = _jobNum;
                        //}







                        //foreach (Service_WCN_Detail jobitem in _claimItemList)
                        //{

                        foreach (Service_WCN_Detail item in oList1.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            string _jobNO = string.Empty;
                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage >= 6)
                            {
                                _jobNO = string.Empty;

                            }
                            else
                            {
                                _jobNO = _jobNum;
                            }

                            #region Inventory Header
                            invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                            invHdr.Ith_com = _ReqSupHdr.Swc_com;
                            invHdr.Ith_oth_docno = _aodoutno;
                            invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                            invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                            invHdr.Ith_doc_tp = "AOD";
                            invHdr.Ith_cate_tp = "SERVICE";
                            invHdr.Ith_sub_tp = "NOR";
                            invHdr.Ith_is_manual = false;
                            invHdr.Ith_stus = "A";
                            invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                            invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                            invHdr.Ith_direct = true;
                            invHdr.Ith_session_id = string.Empty;
                            invHdr.Ith_manual_ref = DocNum;
                            invHdr.Ith_remarks = string.Empty;
                            invHdr.Ith_vehi_no = "N/A";
                            invHdr.Ith_bus_entity = "N/A";
                            invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                            invHdr.Ith_oth_loc = _errLoc;
                            invHdr.Ith_pc = "N/A";
                            invHdr.Ith_job_no = _jobNO;
                            invHdr.Ith_sub_docno = string.Empty;
                            #endregion


                            #region Inventory Serial



                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {

                                    _pick.Tus_ser_id = item.SWD_SERID;
                                    _pick.Tus_ser_1 = item.SWD_SER1;
                                    _pick.Tus_warr_no = item.SWD_WARRNO;
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _binCode;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (_jobNO == _jobNum)
                                    {
                                        if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                        if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    }
                                    else
                                    {
                                        _pick.Tus_job_no = string.Empty;
                                        _pick.Tus_job_line = 0;
                                    }
                                    _picklist.Add(_pick);

                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _binCode;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (_jobNO == _jobNum)
                                    {
                                        if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                        if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    }
                                    else
                                    {
                                        _pick.Tus_job_no = string.Empty;
                                        _pick.Tus_job_line = 0;
                                    }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion
                        }

                        //}

                        # region Save aod In



                        if (invHdr != null)
                        {
                            MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                            _inventoryAutoin.Aut_moduleid = "AOD";
                            _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                            _inventoryAutoin.Aut_cate_tp = "LOC";
                            _inventoryAutoin.Aut_direction = 1;
                            _inventoryAutoin.Aut_modify_dt = null;
                            _inventoryAutoin.Aut_year = DateTime.Now.Year;
                            _inventoryAutoin.Aut_start_char = "AOD";
                            //  _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, null);
                            string _aodInNo = string.Empty;
                            //int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                            _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, null, _inventoryAutoin, out _aodInNo);


                            // _inventoryDAL.UpdateSupplierClaimDoc(_aodInNo, DocNum, _jobNum);
                            invHdr = new InventoryHeader();
                            _picklist = new List<ReptPickSerials>();
                        }
                        #endregion

                        #endregion
                    }
                    #endregion



                    #region ADJ (-) \ ADJ (+)
                    //  List<String> _JobNumListAdj = _claimItemList.Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<String> _JobNumListAdj = _claimItemList.Where(p => (p.SWD_SER1 != p.SWD_OLD_SER) && (p.SWD_IS_PART == 0) && (p.SWD_IS_STOCK == 1) && (p.Swd_need_chk == 0)).Select(X => X.SWD_JOBNO).Distinct().ToList();

                    List<Service_WCN_Detail> oList2 = _claimItemList.FindAll(x => (x.SWD_SER1 != x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1) && (x.Swd_need_chk == 0));
                    List<Service_WCN_Detail> oList3 = _claimItemList.FindAll(x => (x.SWD_SER1 != x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1) && (x.Swd_need_chk == 0));

                    //List<String> _JobNumListAdj = _claimItemList.Where(p => (p.SWD_OLD_SER != p.SWD_SER1 && p.SWD_IS_STOCK == 1) && (p.SWD_IS_PART == 0)).Distinct().Select(x => x.SWD_JOBNO).ToList();
                    foreach (String _jobNum in _JobNumListAdj)
                    {

                        InventoryHeader invHdr = new InventoryHeader();
                        MasterAutoNumber masterAutoNum = new MasterAutoNumber();



                        #region Inventory Header
                        invHdr.Ith_loc = _errLoc;
                        invHdr.Ith_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_docno = string.Empty;
                        invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                        invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                        invHdr.Ith_doc_tp = "ADJ";
                        invHdr.Ith_cate_tp = "SERVICE";
                        invHdr.Ith_sub_tp = "NOR";
                        invHdr.Ith_is_manual = false;
                        invHdr.Ith_stus = "A";
                        invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                        invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                        invHdr.Ith_direct = false;
                        invHdr.Ith_session_id = _sessionID;
                        invHdr.Ith_manual_ref = DocNum;
                        invHdr.Ith_remarks = string.Empty;
                        invHdr.Ith_vehi_no = "N/A";
                        invHdr.Ith_bus_entity = "N/A";
                        invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_loc = _ReqSupHdr.Swc_loc;
                        invHdr.Ith_pc = "N/A";
                        invHdr.Ith_job_no = _jobNum;
                        invHdr.Ith_sub_docno = string.Empty;
                        #endregion

                        #region Auto Number
                        if (invHdr != null)
                        {

                            _inventoryAuto.Aut_moduleid = "ADJ";
                            _inventoryAuto.Aut_cate_cd = _errLoc;
                            _inventoryAuto.Aut_cate_tp = "LOC";
                            _inventoryAuto.Aut_direction = null;
                            _inventoryAuto.Aut_modify_dt = null;
                            _inventoryAuto.Aut_year = null;
                            _inventoryAuto.Aut_start_char = "ADJ";
                        }
                        #endregion


                        //foreach (Service_WCN_Detail jobitem in _claimItemList)
                        // {
                        //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_SER1 != x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1));

                        foreach (Service_WCN_Detail item in oList2.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {


                            #region Inventory Serial



                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _errLoc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {
                                    //  _picklist = _inventoryDAL.GetInventorySerialListById(Convert.ToString(item.SWD_SERID), _ReqSupHdr.Swc_loc);
                                    ReptPickSerials _serDet = _inventoryDAL.GetReservedByserialID(_ReqSupHdr.Swc_com, _errLoc, null, item.SWD_ITMCD, item.SWD_SERID);
                                    if (_serDet == null)
                                    {
                                        _err = "Serial not available" + item.SWD_OLD_SER;
                                        _effects = -1;
                                        break;
                                    }
                                    _serDet.Tus_new_remarks = "ADJ";
                                    _pick.Tus_itm_stus = "GOD";//
                                    _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                    _picklist.Add(_serDet);
                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _errLocBin;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _errLoc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                    if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion
                        }
                        //  //}


                        # region Save aod out



                        if (invHdr != null)
                        {
                            _aodoutno = string.Empty;
                            //int _effect = _InventoryBLL.SaveCommonOutWardEntryService(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc, _ReqSupHdr.Swc_com, null, invHdr, _inventoryAuto, null, null, _picklist, null, out _message, out _genSalesDoc, out _genInventoryDoc, false, false,   _inventoryDAL, _salesDAL, _inventoryRepDAL, _generalDAL, _fmsInventoryDal);
                            Int16 effect = _InventoryBLL.SaveOutwardWithoutAutoNo(invHdr, _picklist, null, _inventoryAuto, _inventoryDAL, out _aodoutno);
                            invHdr = new InventoryHeader();
                            _picklist = new List<ReptPickSerials>();
                            //Int16 effect = _InventoryBLL.SaveOutwardScanSerial(invHdr, _picklist, null);
                            //effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAuto, "-", out _aodoutno);


                        }
                        #endregion

                        #region ADJ +

                        string _jobNO = string.Empty;

                        //Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //if (_jobobj.SJB_JOBSTAGE >= 6)
                        //{
                        //    _jobNO = string.Empty;
                        //}
                        //else
                        //{
                        //    _jobNO = _jobNum;
                        //}





                        //foreach (Service_WCN_Detail jobitem in _claimItemList)
                        //{

                        foreach (Service_WCN_Detail item in oList3.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {

                            invHdr = new InventoryHeader();
                            masterAutoNum = new MasterAutoNumber();


                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage >= 6)
                            {
                                _jobNO = string.Empty;

                            }
                            else
                            {
                                _jobNO = _jobNum;
                            }
                            #region Inventory Header
                            invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                            invHdr.Ith_com = _ReqSupHdr.Swc_com;
                            invHdr.Ith_oth_docno = _aodoutno;
                            invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                            invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                            invHdr.Ith_doc_tp = "ADJ";
                            invHdr.Ith_cate_tp = "SERVICE";
                            invHdr.Ith_sub_tp = "NOR";
                            invHdr.Ith_is_manual = false;
                            invHdr.Ith_stus = "A";
                            invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                            invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                            invHdr.Ith_direct = true;
                            invHdr.Ith_session_id = _sessionID;
                            invHdr.Ith_manual_ref = DocNum;
                            invHdr.Ith_remarks = string.Empty;
                            invHdr.Ith_vehi_no = "N/A";
                            invHdr.Ith_bus_entity = "N/A";
                            invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                            invHdr.Ith_oth_loc = _errLoc;
                            invHdr.Ith_pc = "N/A";
                            invHdr.Ith_job_no = _jobNO;
                            invHdr.Ith_sub_docno = string.Empty;
                            #endregion



                            #region Inventory Serial



                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {

                                    _pick.Tus_ser_id = _inventoryDAL.GetSerialID();
                                    _pick.Tus_ser_1 = item.SWD_SER1;
                                    _pick.Tus_warr_no = item.SWD_WARRNO;
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _binCode;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                    _pick.Tus_new_remarks = "ADJ";
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;

                                    if (_jobNO == _jobNum)
                                    {
                                        if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                        if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    }
                                    else
                                    {
                                        _pick.Tus_job_no = string.Empty;
                                        _pick.Tus_job_line = 0;
                                    }
                                    _picklist.Add(_pick);

                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _binCode;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (_jobNO == _jobNum)
                                    {
                                        if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                        if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    }
                                    else
                                    {
                                        _pick.Tus_job_no = string.Empty;
                                        _pick.Tus_job_line = 0;
                                    }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion

                        }
                        //}

                        //AOD out
                        # region Save aod In



                        if (invHdr != null)
                        {
                            MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                            _inventoryAutoin.Aut_moduleid = "ADJ";
                            _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                            _inventoryAutoin.Aut_cate_tp = "LOC";
                            _inventoryAutoin.Aut_direction = null;
                            _inventoryAutoin.Aut_modify_dt = null;
                            _inventoryAutoin.Aut_year = null;
                            _inventoryAutoin.Aut_start_char = "ADJ";

                            //  _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, null);
                            string _aodInNo = string.Empty;
                            // int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                            _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, null, _inventoryAutoin, out _aodInNo);
                            _inventoryDAL.UpdateSupplierClaimDoc(_aodInNo, DocNum, _jobNum);
                            _inventoryDAL.UpdateSupplierClaimWarranty(_aodInNo);
                            invHdr = new InventoryHeader();
                            _picklist = new List<ReptPickSerials>();
                        }
                        #endregion

                        #endregion

                    }
                    #endregion


                }
                #endregion
                #region 2.Received Part for Open Jobs
                if (_ReqSupHdr.Swc_stus == "I")
                {

                    #region ADJ +
                    List<ReptPickSerialsSub> _picksublist = new List<ReptPickSerialsSub>();
                    //   List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 1)).Distinct().Select(x => x.SWD_JOBNO).ToList();
                    // List<String> _JobNumListInAdj = _claimItemList.Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 1)).Select(X => X.SWD_JOBNO).Distinct().ToList();

                    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 1));
                    foreach (String _jobNum in _JobNumListInAdj)
                    {
                        string _jobNO = string.Empty;

                        //  Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //if (_jobobj.SJB_JOBSTAGE < 6)
                        //{
                        //  _jobNO = string.Empty;

                        //foreach (Service_WCN_Detail jobitem in _claimItemList)
                        // {


                        foreach (Service_WCN_Detail item in oList.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage < 6)
                            {
                                #region Inventory Serial




                                Int32 _serLine = 0;
                                _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                                string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                                if (_itmlist != null)
                                {
                                    if (_itmlist.Mi_is_ser1 == 1)
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                                        if (_jobSer == null)
                                        {
                                            _err = "Serial not available" + item.SWD_SER1;
                                            _effects = -1;
                                            break;
                                        }

                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {
                                                if (!string.IsNullOrEmpty(itemSer.Jbd_ser_id) && Convert.ToInt32(itemSer.Jbd_ser_id.ToString()) > 0)
                                                {

                                                    InventoryWarrantySubDetail _picksub = new InventoryWarrantySubDetail();
                                                    _picksub.Irsms_act = true;
                                                    _picksub.Irsms_itm_cd = _itmlist.Mi_cd;
                                                    _picksub.Irsms_itm_stus = item.SWD_ITM_STUS;
                                                    _picksub.Irsms_mfc = string.Empty;
                                                    _picksub.Irsms_ser_id = int.Parse(itemSer.Jbd_ser_id);

                                                    _picksub.Irsms_sub_ser = item.SWD_SER1;
                                                    _picksub.Irsms_tp = "C";
                                                    _picksub.Irsms_warr_no = itemSer.Jbd_mainitmwarr;
                                                    _picksub.Irsms_warr_period = itemSer.Jbd_warrperiod;
                                                    _picksub.Irsms_warr_rem = itemSer.Jbd_warrrmk;
                                                    _picksub.Irsms_qty = 1;


                                                    List<InventoryWarrantySubDetail> _getCurList = new List<InventoryWarrantySubDetail>();
                                                    _getCurList = _custServiceDAL.getSerMstSubBySerID(_picksub.Irsms_ser_id);

                                                    if (_getCurList != null)
                                                    {
                                                        _serLine = _getCurList.Count + 1;
                                                    }
                                                    else
                                                    {
                                                        _serLine = _serLine + 1;
                                                    }
                                                    _picksub.Irsms_ser_line = _serLine;



                                                    if (_inventoryDAL.CheckSubSerialAvl(item.SWD_SER1, _itmlist.Mi_cd) == 1)
                                                    {
                                                        // _inventoryDAL.UpdateSupplierClaimSubItemsy(Convert.ToInt32(itemSer.Jbd_ser_id), _itmlist.Mi_cd, item.SWD_OLD_SER, item.SWD_SER1);
                                                    }
                                                    else
                                                    {
                                                        _custServiceDAL.SAVE_INR_SERMSTSUB(_picksub);
                                                        if (item.SWD_OLD_SER != item.SWD_SER1)
                                                        {
                                                            _inventoryDAL.UpdateSupplierClaimSubItemsy(_itmlist.Mi_cd, item.SWD_OLD_SER, item.SWD_SER1);

                                                        }
                                                        else
                                                        {
                                                            _custServiceDAL.UpdateSupplierClaimWarrantyRec_job_old_part(item.SWD_JOBNO, item.SWD_JOBLINE);
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }

                                }
                                #endregion
                            }
                        }
                        //   }


                        //}
                    }
                    #endregion

                }

                #endregion
                #region 3.Received Part for Open Jobs -Differ Serial
                if (_ReqSupHdr.Swc_stus == "I")
                {

                    #region ADJ +
                    List<ReptPickSerialsSub> _picksublist = new List<ReptPickSerialsSub>();
                    // List<String> _JobNumListInAdj = _claimItemList.Distinct().Where(p => (p.SWD_IS_PART == 1) && p.SWD_SER1 != p.SWD_OLD_SER).Select(x => x.SWD_JOBNO).ToList());
                    // List<String> _JobNumListInAdj = _claimItemList.Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 1) && p.SWD_SER1 != p.SWD_OLD_SER).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 1) && x.SWD_SER1 != x.SWD_OLD_SER);
                    foreach (String _jobNum in _JobNumListInAdj)
                    {
                        string _jobNO = string.Empty;

                        //  Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //if (_jobobj.SJB_JOBSTAGE < 6)
                        //{
                        //foreach (Service_WCN_Detail jobitem in _claimItemList)
                        //{
                        //  List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_IS_PART == 1) && x.SWD_SER1 != x.SWD_OLD_SER);
                        foreach (Service_WCN_Detail item in oList.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage < 6)
                            {
                                InventoryHeader invHdr = new InventoryHeader();
                                MasterAutoNumber masterAutoNum = new MasterAutoNumber();
                                #region Inventory Header
                                invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                                invHdr.Ith_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_docno = string.Empty;
                                invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                                invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                                invHdr.Ith_doc_tp = "ADJ";
                                invHdr.Ith_cate_tp = "SERVICE";
                                invHdr.Ith_sub_tp = "NOR";
                                invHdr.Ith_is_manual = false;
                                invHdr.Ith_stus = "A";
                                invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                                invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                                invHdr.Ith_direct = true;
                                invHdr.Ith_session_id = _sessionID;
                                invHdr.Ith_manual_ref = DocNum;
                                invHdr.Ith_remarks = string.Empty;
                                invHdr.Ith_vehi_no = "N/A";
                                invHdr.Ith_bus_entity = "N/A";
                                invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_loc = _errLoc;
                                invHdr.Ith_pc = "N/A";
                                invHdr.Ith_job_no = _jobNum;
                                invHdr.Ith_sub_docno = string.Empty;
                                #endregion

                                #region Auto Number
                                if (invHdr != null)
                                {

                                    _inventoryAuto.Aut_moduleid = "ADJ";
                                    _inventoryAuto.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAuto.Aut_cate_tp = "LOC";
                                    _inventoryAuto.Aut_direction = null;
                                    _inventoryAuto.Aut_modify_dt = null;
                                    _inventoryAuto.Aut_year = null;
                                    _inventoryAuto.Aut_start_char = "ADJ";
                                }
                                #endregion


                                #region Inventory Serial



                                ReptPickSerials _pick = new ReptPickSerials();

                                _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                                string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                                if (_itmlist != null)
                                {
                                    if (_itmlist.Mi_is_ser1 == 1)
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                                        if (_jobSer == null)
                                        {
                                            _err = "Serial not available" + item.SWD_SER1;
                                            _effects = -1;
                                            break;
                                        }
                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {

                                                _pick.Tus_ser_id = _inventoryDAL.GetSerialID();// Convert.ToInt32(itemSer.Jbd_ser_id);
                                                _pick.Tus_ser_1 = item.SWD_SER1;
                                                _pick.Tus_warr_no = string.Empty;
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;
                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(item.SWD_ITMCD);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_itm_cd = item.SWD_ITMCD; ;

                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = "ADJ";
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;


                                                _pick.Tus_job_no = _jobNum;
                                                _pick.Tus_job_line = item.SWD_JOBLINE;

                                                _picklist.Add(_pick);

                                                ReptPickSerialsSub _picksub = new ReptPickSerialsSub();
                                                _pick.Tus_usrseq_no = 0;
                                                _picksub.Tpss_itm_brand = _itmlist.Mi_brand;
                                                _picksub.Tpss_itm_cd = _itmlist.Mi_cd;
                                                _picksub.Tpss_itm_desc = _itmlist.Mi_shortdesc;
                                                _picksub.Tpss_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _picksub.Tpss_mfc = string.Empty;
                                                _picksub.Tpss_m_itm_cd = itemSer.Jbd_itm_cd;
                                                _picksub.Tpss_m_ser = itemSer.Jbd_ser1;
                                                _picksub.Tpss_sub_ser = item.SWD_SER1;
                                                _picksub.Tpss_tp = _itmlist.Mi_itm_tp;
                                                _picksub.Tpss_usrseq_no = 0;
                                                _picksub.Tpss_warr_no = item.SWD_WARRNO;
                                                _picksub.Tpss_warr_period = 0;
                                                _picksub.Tpss_warr_rem = string.Empty;
                                                _picksublist.Add(_picksub);


                                            }
                                        }

                                    }
                                    else
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);

                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {
                                                _pick.Tus_ser_id = _inventoryDAL.GetSerialID();// Convert.ToInt32(itemSer.Jbd_ser_id);
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;

                                                _pick.Tus_itm_cd = item.SWD_ITMCD;


                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(item.SWD_ITMCD);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = String.Empty;
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;

                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;

                                                _picklist.Add(_pick);
                                            }
                                        }
                                    }
                                }
                                #endregion
                                //   }

                                //AOD IN
                                # region Save aod In



                                if (invHdr != null)
                                {
                                    MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                                    _inventoryAutoin.Aut_moduleid = "ADJ";
                                    _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAutoin.Aut_cate_tp = "LOC";
                                    _inventoryAutoin.Aut_direction = null;
                                    _inventoryAutoin.Aut_modify_dt = null;
                                    _inventoryAutoin.Aut_year = null;
                                    _inventoryAutoin.Aut_start_char = "ADJ";

                                    //    _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, _picksublist);
                                    string _aodInNo = string.Empty;
                                    ///   int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                                    _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, _picksublist, _inventoryAutoin, out _aodInNo);
                                    invHdr = new InventoryHeader();
                                    _picklist = new List<ReptPickSerials>();

                                }
                                #endregion

                            }
                        }


                        //}
                    }
                    #endregion

                }
                #endregion
                #region 4.Received Part for Closed Jobs
                if (_ReqSupHdr.Swc_stus == "I")
                {

                    #region ADJ +
                    List<ReptPickSerialsSub> _picksublist = new List<ReptPickSerialsSub>();
                    //   List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 1)).Distinct().Select(x => x.SWD_JOBNO).ToList();
                    List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 1) && (p.Swd_need_chk == 0)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    //List<String> _JobNumListInAdj = _claimItemList.Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 1) && (x.Swd_need_chk == 0));
                    foreach (String _jobNum in _JobNumListInAdj)
                    {
                        string _jobNO = string.Empty;

                        //   Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //if (_jobobj.SJB_JOBSTAGE >= 6)
                        // {
                        //     _jobNO = string.Empty;






                        //  foreach (Service_WCN_Detail jobitem in _claimItemList)
                        // {
                        //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_IS_PART == 1));
                        foreach (Service_WCN_Detail item in oList.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage >= 6)
                            {
                                _jobNO = string.Empty;
                                if (item.SWD_OLD_SER == item.SWD_SER1)
                                {
                                    _custServiceDAL.UpdateSupplierClaimWarrantyRec_job_old_part(item.SWD_JOBNO, item.SWD_JOBLINE);
                                }

                                InventoryHeader invHdr = new InventoryHeader();
                                MasterAutoNumber masterAutoNum = new MasterAutoNumber();
                                #region Inventory Header
                                invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                                invHdr.Ith_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_docno = string.Empty;
                                invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                                invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                                invHdr.Ith_doc_tp = "ADJ";
                                invHdr.Ith_cate_tp = "SERVICE";
                                invHdr.Ith_sub_tp = "NOR";
                                invHdr.Ith_is_manual = false;
                                invHdr.Ith_stus = "A";
                                invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                                invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                                invHdr.Ith_direct = true;
                                invHdr.Ith_session_id = _sessionID;
                                invHdr.Ith_manual_ref = DocNum;
                                invHdr.Ith_remarks = string.Empty;
                                invHdr.Ith_vehi_no = "N/A";
                                invHdr.Ith_bus_entity = "N/A";
                                invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_loc = _errLoc;
                                invHdr.Ith_pc = "N/A";
                                invHdr.Ith_job_no = _jobNO;
                                invHdr.Ith_sub_docno = string.Empty;
                                #endregion

                                #region Auto Number
                                if (invHdr != null)
                                {

                                    _inventoryAuto.Aut_moduleid = "ADJ";
                                    _inventoryAuto.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAuto.Aut_cate_tp = "LOC";
                                    _inventoryAuto.Aut_direction = null;
                                    _inventoryAuto.Aut_modify_dt = null;
                                    _inventoryAuto.Aut_year = null;
                                    _inventoryAuto.Aut_start_char = "ADJ";
                                }
                                #endregion


                                //foreach (Service_WCN_Detail item in oList)
                                //{
                                #region Inventory Serial



                                ReptPickSerials _pick = new ReptPickSerials();

                                _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                                string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                                if (_itmlist != null)
                                {
                                    if (_itmlist.Mi_is_ser1 == 1)
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                                        if (_jobSer == null)
                                        {
                                            _err = "Serial not available" + item.SWD_SER1;
                                            _effects = -1;
                                            break;
                                        }
                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {

                                                _pick.Tus_ser_id = _inventoryDAL.GetSerialID();// Convert.ToInt32(itemSer.Jbd_ser_id);// Convert.ToInt32(itemSer.Jbd_ser_id);
                                                _pick.Tus_ser_1 = item.SWD_SER1;
                                                _pick.Tus_warr_no = string.Empty;
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;
                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(item.SWD_ITMCD);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_itm_cd = item.SWD_ITMCD;

                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = "ADJ";
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;


                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;

                                                _picklist.Add(_pick);

                                                ReptPickSerialsSub _picksub = new ReptPickSerialsSub();
                                                _picksub.Tpss_itm_brand = _itmlist.Mi_brand;
                                                _picksub.Tpss_itm_cd = _itmlist.Mi_cd;
                                                _picksub.Tpss_itm_desc = _itmlist.Mi_shortdesc;
                                                _picksub.Tpss_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _picksub.Tpss_mfc = string.Empty;
                                                _picksub.Tpss_m_itm_cd = itemSer.Jbd_itm_cd;
                                                _picksub.Tpss_m_ser = itemSer.Jbd_ser1;
                                                _picksub.Tpss_sub_ser = item.SWD_SER1;
                                                _picksub.Tpss_tp = _itmlist.Mi_itm_tp;
                                                _picksub.Tpss_usrseq_no = 0;
                                                _picksub.Tpss_warr_no = item.SWD_WARRNO;
                                                _picksub.Tpss_warr_period = 0;
                                                _picksub.Tpss_warr_rem = string.Empty;
                                                _picksublist.Add(_picksub);


                                            }
                                        }

                                    }
                                    else
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);

                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;

                                                _pick.Tus_itm_cd = item.SWD_ITMCD;


                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(item.SWD_ITMCD);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = String.Empty;
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;

                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;

                                                _picklist.Add(_pick);
                                            }
                                        }
                                    }
                                }
                                #endregion
                                // }

                                //AOD IN
                                # region Save aod In



                                if (invHdr != null)
                                {
                                    MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                                    _inventoryAutoin.Aut_moduleid = "ADJ";
                                    _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAutoin.Aut_cate_tp = "LOC";
                                    _inventoryAutoin.Aut_direction = null;
                                    _inventoryAutoin.Aut_modify_dt = null;
                                    _inventoryAutoin.Aut_year = null;
                                    _inventoryAutoin.Aut_start_char = "ADJ";

                                    //   _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, _picksublist);
                                    string _aodInNo = string.Empty;
                                    //  int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                                    _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, _picksublist, _inventoryAutoin, out _aodInNo);
                                    invHdr = new InventoryHeader();
                                    _picklist = new List<ReptPickSerials>();

                                }
                                #endregion

                            }
                        }


                        //  }
                    }
                    #endregion

                }
                #endregion
                #region 5.Received Main Item (Customer) for Open Jobs -Differ Serial
                if (_ReqSupHdr.Swc_stus == "I")
                {

                    #region ADJ +
                    List<ReptPickSerialsSub> _picksublist = new List<ReptPickSerialsSub>();

                    //List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 0 && p.SWD_SER1 != p.SWD_OLD_SER && p.SWD_IS_STOCK == 1)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 0) && x.SWD_SER1 != x.SWD_OLD_SER && (x.SWD_IS_STOCK == 0));
                    //07-09-2015
                    List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 0 && p.SWD_SER1 != p.SWD_OLD_SER)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 0) && x.SWD_SER1 != x.SWD_OLD_SER);
                    foreach (String _jobNum in _JobNumListInAdj)
                    {
                        string _jobNO = string.Empty;

                        // Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //  if (_jobobj.SJB_JOBSTAGE < 6)
                        //    {   

                        //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_IS_PART == 0) && x.SWD_SER1 != x.SWD_OLD_SER && (x.SWD_IS_STOCK == 0));

                        foreach (Service_WCN_Detail item in oList.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {

                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage < 6)
                            {
                                InventoryHeader invHdr = new InventoryHeader();
                                MasterAutoNumber masterAutoNum = new MasterAutoNumber();
                                #region Inventory Header
                                invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                                invHdr.Ith_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_docno = string.Empty;
                                invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                                invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                                invHdr.Ith_doc_tp = "ADJ";
                                invHdr.Ith_cate_tp = "SERVICE";
                                invHdr.Ith_sub_tp = "NOR";
                                invHdr.Ith_is_manual = false;
                                invHdr.Ith_stus = "A";
                                invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                                invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                                invHdr.Ith_direct = true;
                                invHdr.Ith_session_id = _sessionID;
                                invHdr.Ith_manual_ref = DocNum;
                                invHdr.Ith_remarks = string.Empty;
                                invHdr.Ith_vehi_no = "N/A";
                                invHdr.Ith_bus_entity = "N/A";
                                invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_loc = _errLoc;
                                invHdr.Ith_pc = "N/A";
                                invHdr.Ith_job_no = _jobNum;
                                invHdr.Ith_sub_docno = string.Empty;
                                #endregion

                                #region Auto Number
                                if (invHdr != null)
                                {

                                    _inventoryAuto.Aut_moduleid = "ADJ";
                                    _inventoryAuto.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAuto.Aut_cate_tp = "LOC";
                                    _inventoryAuto.Aut_direction = null;
                                    _inventoryAuto.Aut_modify_dt = null;
                                    _inventoryAuto.Aut_year = null;
                                    _inventoryAuto.Aut_start_char = "ADJ";
                                }
                                #endregion

                                //foreach (Service_WCN_Detail item in oList)
                                //{
                                #region Inventory Serial



                                ReptPickSerials _pick = new ReptPickSerials();

                                _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                                string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                                if (_itmlist != null)
                                {
                                    if (_itmlist.Mi_is_ser1 == 1)
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                                        if (_jobSer == null)
                                        {
                                            _err = "Serial not available" + item.SWD_SER1;
                                            _effects = -1;
                                            break;
                                        }
                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {

                                                _pick.Tus_ser_id = Convert.ToInt32(itemSer.Jbd_ser_id);
                                                _pick.Tus_ser_1 = item.SWD_SER1;//itemSer.Jbd_ser1;  07-08-2015 Nadeeka
                                                _pick.Tus_warr_no = itemSer.Jbd_warr;
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;
                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(itemSer.Jbd_itm_cd);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_itm_cd = itemSer.Jbd_itm_cd;

                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = "ADJ";
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;


                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;
                                                if (_pick.Tus_ser_id == 0)//18-12-2015 Nadeeka
                                                {
                                                    _pick.Tus_ser_id = _inventoryDAL.GetSerialID();

                                                }

                                                _picklist.Add(_pick);

                                                ReptPickSerialsSub _picksub = new ReptPickSerialsSub();
                                                _picksub.Tpss_itm_brand = _itmlist.Mi_brand;
                                                _picksub.Tpss_itm_cd = _itmlist.Mi_cd;
                                                _picksub.Tpss_itm_desc = _itmlist.Mi_shortdesc;
                                                _picksub.Tpss_itm_stus = "GOD"; //item.SWD_ITM_STUS;
                                                _picksub.Tpss_mfc = string.Empty;
                                                _picksub.Tpss_m_itm_cd = itemSer.Jbd_itm_cd;
                                                _picksub.Tpss_m_ser = itemSer.Jbd_ser1;
                                                _picksub.Tpss_sub_ser = item.SWD_SER1;
                                                _picksub.Tpss_tp = _itmlist.Mi_itm_tp;
                                                _picksub.Tpss_usrseq_no = 0;
                                                _picksub.Tpss_warr_no = item.SWD_WARRNO;
                                                _picksub.Tpss_warr_period = 0;
                                                _picksub.Tpss_warr_rem = string.Empty;
                                                _picksublist.Add(_picksub);


                                            }
                                        }

                                    }
                                    else
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);

                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;

                                                _pick.Tus_itm_cd = itemSer.Jbd_itm_cd;


                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(itemSer.Jbd_itm_cd);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = String.Empty;
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;

                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;

                                                if (_pick.Tus_ser_id == 0)//18-12-2015 Nadeeka
                                                {
                                                    _pick.Tus_ser_id = _inventoryDAL.GetSerialID();

                                                }
                                                _picklist.Add(_pick);
                                            }
                                        }
                                    }
                                }
                                #endregion
                                // }
                                //AOD out
                                # region Save aod In



                                if (invHdr != null)
                                {
                                    MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                                    _inventoryAutoin.Aut_moduleid = "ADJ";
                                    _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAutoin.Aut_cate_tp = "LOC";
                                    _inventoryAutoin.Aut_direction = null;
                                    _inventoryAutoin.Aut_modify_dt = null;
                                    _inventoryAutoin.Aut_year = null;
                                    _inventoryAutoin.Aut_start_char = "ADJ";

                                    //  _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, _picksublist);
                                    string _aodInNo = string.Empty;
                                    //  int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                                    _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, _picksublist, _inventoryAutoin, out _aodInNo);
                                    invHdr = new InventoryHeader();
                                    _picklist = new List<ReptPickSerials>();

                                }
                                #endregion

                            }

                        }


                        // }
                    }
                    #endregion

                }
                #endregion
                #region 6.Received Main Item (Customer) for Closed Jobs
                if (_ReqSupHdr.Swc_stus == "I")
                {

                    #region ADJ +
                    List<ReptPickSerialsSub> _picksublist = new List<ReptPickSerialsSub>();

                    //List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 0 && p.SWD_IS_STOCK == 1)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 0));
                    List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 0) && (p.Swd_need_chk == 0)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 0) && (x.Swd_need_chk == 0));
                    foreach (String _jobNum in _JobNumListInAdj)
                    {
                        string _jobNO = string.Empty;

                        //    Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //  if (_jobobj.SJB_JOBSTAGE >= 6)
                        //    {
                        //     _jobNO = string.Empty;


                        //    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 0));


                        foreach (Service_WCN_Detail item in oList.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {

                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage >= 6)
                            {
                                _jobNO = string.Empty;

                                InventoryHeader invHdr = new InventoryHeader();
                                MasterAutoNumber masterAutoNum = new MasterAutoNumber();
                                #region Inventory Header
                                invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                                invHdr.Ith_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_docno = string.Empty;
                                invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                                invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                                invHdr.Ith_doc_tp = "ADJ";
                                invHdr.Ith_cate_tp = "SERVICE";
                                invHdr.Ith_sub_tp = "NOR";
                                invHdr.Ith_is_manual = false;
                                invHdr.Ith_stus = "A";
                                invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                                invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                                invHdr.Ith_direct = true;
                                invHdr.Ith_session_id = _sessionID;
                                invHdr.Ith_manual_ref = DocNum;
                                invHdr.Ith_remarks = string.Empty;
                                invHdr.Ith_vehi_no = "N/A";
                                invHdr.Ith_bus_entity = "N/A";
                                invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_loc = _errLoc;
                                invHdr.Ith_pc = "N/A";
                                invHdr.Ith_job_no = _jobNO;
                                invHdr.Ith_sub_docno = string.Empty;
                                #endregion

                                #region Auto Number
                                if (invHdr != null)
                                {

                                    _inventoryAuto.Aut_moduleid = "ADJ";
                                    _inventoryAuto.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAuto.Aut_cate_tp = "LOC";
                                    _inventoryAuto.Aut_direction = null;
                                    _inventoryAuto.Aut_modify_dt = null;
                                    _inventoryAuto.Aut_year = null;
                                    _inventoryAuto.Aut_start_char = "ADJ";
                                }
                                #endregion
                                ////foreach (Service_WCN_Detail item in oList)
                                ////{
                                #region Inventory Serial



                                ReptPickSerials _pick = new ReptPickSerials();

                                _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                                string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                                if (_itmlist != null)
                                {
                                    if (_itmlist.Mi_is_ser1 == 1)
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                                        if (_jobSer == null)
                                        {
                                            _err = "Serial not available" + item.SWD_SER1;
                                            _effects = -1;
                                            break;
                                        }
                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {

                                                _pick.Tus_ser_id = Convert.ToInt32(itemSer.Jbd_ser_id);
                                                _pick.Tus_ser_1 = item.SWD_SER1; //itemSer.Jbd_ser1; 07-08-2015 Nadeeka
                                                _pick.Tus_warr_no = itemSer.Jbd_warr;
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;
                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(itemSer.Jbd_itm_cd);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_itm_cd = itemSer.Jbd_itm_cd;

                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = "ADJ";
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;


                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;
                                                if (_pick.Tus_ser_id == 0)//18-12-2015 Nadeeka
                                                {
                                                    _pick.Tus_ser_id = _inventoryDAL.GetSerialID();

                                                }

                                                _picklist.Add(_pick);

                                                ReptPickSerialsSub _picksub = new ReptPickSerialsSub();
                                                _picksub.Tpss_itm_brand = _itmlist.Mi_brand;
                                                _picksub.Tpss_itm_cd = _itmlist.Mi_cd;
                                                _picksub.Tpss_itm_desc = _itmlist.Mi_shortdesc;
                                                _picksub.Tpss_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _picksub.Tpss_mfc = string.Empty;
                                                _picksub.Tpss_m_itm_cd = itemSer.Jbd_itm_cd;
                                                _picksub.Tpss_m_ser = itemSer.Jbd_ser1;
                                                _picksub.Tpss_sub_ser = item.SWD_SER1;
                                                _picksub.Tpss_tp = _itmlist.Mi_itm_tp;
                                                _picksub.Tpss_usrseq_no = 0;
                                                _picksub.Tpss_warr_no = item.SWD_WARRNO;
                                                _picksub.Tpss_warr_period = 0;
                                                _picksub.Tpss_warr_rem = string.Empty;
                                                _picksublist.Add(_picksub);


                                            }
                                        }

                                    }
                                    else
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);

                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;

                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;

                                                _pick.Tus_itm_cd = itemSer.Jbd_itm_cd;


                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(itemSer.Jbd_itm_cd);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = String.Empty;
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;

                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;
                                                if (_pick.Tus_ser_id == 0)//18-12-2015 Nadeeka
                                                {
                                                    _pick.Tus_ser_id = _inventoryDAL.GetSerialID();

                                                }
                                                _picklist.Add(_pick);
                                            }
                                        }
                                    }
                                }
                                #endregion
                                //    }

                                //AOD out
                                # region Save aod In



                                if (invHdr != null)
                                {
                                    MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                                    _inventoryAutoin.Aut_moduleid = "ADJ";
                                    _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAutoin.Aut_cate_tp = "LOC";
                                    _inventoryAutoin.Aut_direction = null;
                                    _inventoryAutoin.Aut_modify_dt = null;
                                    _inventoryAutoin.Aut_year = null;
                                    _inventoryAutoin.Aut_start_char = "ADJ";

                                    //   _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, _picksublist);
                                    string _aodInNo = string.Empty;
                                    //    int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                                    _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, _picksublist, _inventoryAutoin, out _aodInNo);
                                    invHdr = new InventoryHeader();
                                    _picklist = new List<ReptPickSerials>();

                                }
                                #endregion
                            }
                        }


                        //}
                    }
                    #endregion

                }
                #endregion

                if (_ReqSupHdr.Swc_stus == "I")
                {
                    #region Payment



                    decimal _totalReceiptAmt = 0;
                    if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

                    if (_totalReceiptAmt > 0)
                    {


                        Service_Chanal_parameter oPara = _generalDAL.GetChannelParamers(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);

                        Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _inventoryDAL.GetSerialID() : -1;
                        string _shortcompany = _generalDAL.GetCompByCode(_ReqSupHdr.Swc_com).Mc_anal5;
                        if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                        {
                            _recieptAuto.Aut_year = null;
                            MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                            _recNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                            _recieptAuto.Aut_year = null;
                            _recieptAuto.Aut_modify_dt = null;

                            _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);

                            _recieptHeader.Sar_seq_no = RecieptSeqNo;
                            _recieptHeader.Sar_receipt_no = _recNo;
                            _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
                            _salesDAL.SaveReceiptHeader(_recieptHeader);

                            if (_recieptItem != null)
                                if (_recieptItem.Count > 0)
                                {
                                    foreach (RecieptItem _itm in _recieptItem)
                                    {
                                        _itm.Sard_seq_no = RecieptSeqNo;
                                        _itm.Sard_inv_no = string.Empty;
                                        _itm.Sard_receipt_no = _recNo;
                                        //29-06-2015 Nadeeka
                                        _custServiceDAL.UpdateSupplierClaimWarrantyClaimInv(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_ref_doc, _itm.Sard_settle_amt);

                                        _salesDAL.SaveReceiptItem(_itm);

                                        if (_itm.Sard_pay_tp.Trim() == "ADVAN")
                                        {
                                            //  _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
                                            RecieptHeader _rHdr = new RecieptHeader();
                                            _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
                                            _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
                                            _rHdr.Sar_act = true;
                                            _rHdr.Sar_direct = true;
                                            _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
                                            _salesDAL.SaveReceiptHeader(_rHdr);
                                        }
                                        if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                        {
                                            _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                            MasterBusinessEntity _entity = _salesDAL.GetBusinessCompanyDetail(_ReqSupHdr.Swc_com, oPara.SP_RECEIPT_CUSTOMER, null, null, "C");
                                            MasterProfitCenter _profit = _salesDAL.GetProfitCenter(_ReqSupHdr.Swc_com, _recieptAuto.Aut_cate_cd);
                                            if (_entity != null)
                                                if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                                {
                                                    string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                                    OutSMS _out = new OutSMS();
                                                    _out.Createtime = DateTime.Now;
                                                    _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
                                                    _out.Msgstatus = 0;
                                                    _out.Msgtype = "S";
                                                    _out.Receivedtime = DateTime.Now;
                                                    _out.Receiver = _entity.Mbe_cd;
                                                    //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                                    _out.Senderphno = _entity.Mbe_mob;
                                                    _out.Refdocno = _itm.Sard_ref_no;
                                                    _out.Sender = _ReqSupHdr.Swc_cre_by;
                                                    _out.Createtime = DateTime.Now;
                                                    _inventoryDAL.SaveSMSOut(_out);
                                                }
                                        }

                                        if (_itm.Sard_pay_tp.Trim() == "LORE")
                                        {
                                            _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, oPara.SP_RECEIPT_CUSTOMER, _itm.Sard_anal_4);
                                        }

                                        if (_itm.Sard_pay_tp.Trim() == "GVO")
                                        {
                                            _fmsInventoryDal.UpdateRedeemVoucher(_ReqSupHdr.Swc_com, _recieptAuto.Aut_cate_cd, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _ReqSupHdr.Swc_cre_by, _itm.Sard_settle_amt);
                                        }

                                    }
                                }
                        }
                    }
                    #endregion
                }

                //updated by akila 2018/02/20
                #region Check all parts received
                if (_ReqSupHdr.Swc_stus == "I")
                { 
                    //get pending claim details
                    DataTable _pendingDocs = new DataTable();
                    _pendingDocs = _custServiceDAL.GetPendingClaimDocs(_claimNum);
                    if (_pendingDocs.Rows.Count > 0)
                    {
                        //update claim header as pending
                        _custServiceDAL.UpdateSupplierClaimWarrantySts(_claimNum, "P");
                    }
                }
                #endregion

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();


                _inventoryDAL.TransactionCommit();

                _inventoryDAL.ConnectionClose();

                _salesDAL.TransactionCommit();

                _salesDAL.ConnectionClose();



                _err = "Sucessfully Saved!\nSystem generated Claim No is " + DocNum;
                _effects = 1;

            }
            catch (Exception ex)
            {

                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();


                _effects = -1;
                _err = ex.Message.ToString();
            }

            return _effects;
        }

        public Int32 Save_SupplierClaimChecking(Service_WCN_Hdr _ReqSupHdr, List<Service_WCN_Detail> _claimItemList, string _remarks, string _user, string _sessionID, out string _err)
        {
            Int32 _effects = 0;
            string _aodoutno = string.Empty;
            InventoryBLL _InventoryBLL = new InventoryBLL();
            SalesBLL _SalesBLL = new SalesBLL();
            string _recNo = string.Empty;
            _inventoryDAL = new InventoryDAL();
            string _db = string.Empty;
            try
            {
                List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
                MasterAutoNumber _inventoryAuto = new MasterAutoNumber();
                MasterItem _itmlist = new MasterItem();
                _custServiceDAL = new CustServiceDAL();
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();


                string _message = string.Empty;
                string _genSalesDoc = string.Empty;
                string _genInventoryDoc = string.Empty;
                string DocNum = string.Empty;
                string _claimNum = string.Empty;
                string _errLoc = _InventoryBLL.GetGITCorrectLocation(_ReqSupHdr.Swc_com);
                string _errLocBin = _InventoryBLL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _errLoc);


                foreach (Service_WCN_Detail item in _claimItemList)
                {
                    _custServiceDAL.UpdateSupplierClaimWarrantyCheck(_ReqSupHdr.Swc_doc_no, item.SWD_LINE, _remarks, _user);
                }

                #region 1.Received Main item
                if (_ReqSupHdr.Swc_stus == "I")
                {
                    #region AOD Out Receive \ Issue
                    List<String> _JobNumListRec = _claimItemList.Where(p => (p.SWD_SER1 == p.SWD_OLD_SER) && (p.SWD_IS_PART == 0) && (p.SWD_IS_STOCK == 1) && (p.Swd_need_chk == 1)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_SER1 == x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1) && (x.Swd_need_chk == 1));
                    List<Service_WCN_Detail> oList1 = _claimItemList.FindAll(x => (x.SWD_SER1 == x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1) && (x.Swd_need_chk == 1));

                    // List<String> _JobNumListRec = _claimItemList.Distinct().Where(p => (p.SWD_SER1 == p.SWD_OLD_SER) && (p.SWD_IS_PART == 0) && p.SWD_IS_STOCK == 1 && p.SWD_IS_STOCK == 1).Select(x => x.SWD_JOBNO).ToList();
                    foreach (String _jobNum in _JobNumListRec)
                    {
                        InventoryHeader invHdr = new InventoryHeader();
                        MasterAutoNumber masterAutoNum = new MasterAutoNumber();

                        #region Inventory Header
                        invHdr.Ith_loc = _errLoc;
                        invHdr.Ith_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_docno = string.Empty;
                        invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                        invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                        invHdr.Ith_doc_tp = "AOD";
                        invHdr.Ith_cate_tp = "SERVICE";
                        invHdr.Ith_sub_tp = "NOR";
                        invHdr.Ith_is_manual = false;
                        invHdr.Ith_stus = "A";
                        invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                        invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                        invHdr.Ith_direct = false;
                        invHdr.Ith_session_id = _sessionID;
                        invHdr.Ith_manual_ref = DocNum;
                        invHdr.Ith_remarks = string.Empty;
                        invHdr.Ith_vehi_no = "N/A";
                        invHdr.Ith_bus_entity = "N/A";
                        invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_loc = _ReqSupHdr.Swc_loc;
                        invHdr.Ith_pc = "N/A";
                        invHdr.Ith_job_no = _jobNum;
                        invHdr.Ith_sub_docno = string.Empty;
                        #endregion

                        #region Auto Number
                        if (invHdr != null)
                        {

                            _inventoryAuto.Aut_moduleid = "AOD";
                            _inventoryAuto.Aut_cate_cd = _errLoc;
                            _inventoryAuto.Aut_cate_tp = "LOC";
                            _inventoryAuto.Aut_direction = 0;
                            _inventoryAuto.Aut_modify_dt = null;
                            _inventoryAuto.Aut_year = DateTime.Now.Year;
                            _inventoryAuto.Aut_start_char = "AOD";

                        }
                        #endregion


                        //  foreach (Service_WCN_Detail jobitem in _claimItemList)
                        //  {
                        //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_SER1 == x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1));

                        foreach (Service_WCN_Detail item in oList.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            #region Inventory Serial


                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _errLoc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {
                                    //  _picklist = _inventoryDAL.GetInventorySerialListById(Convert.ToString(item.SWD_SERID), _ReqSupHdr.Swc_loc);
                                    ReptPickSerials _serDet = _inventoryDAL.GetReservedByserialID(_ReqSupHdr.Swc_com, _errLoc, null, item.SWD_ITMCD, item.SWD_SERID);
                                    if (_serDet == null)
                                    {
                                        _err = "Serial not available" + item.SWD_OLD_SER;
                                        _effects = -1;
                                        break;
                                    }
                                    _serDet.Tus_new_remarks = "AOD-OUT";
                                    _picklist.Add(_serDet);
                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _errLocBin;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _errLoc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                    if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion
                        }
                        // }


                        # region Save aod out



                        if (invHdr != null)
                        {

                            //int _effect = _InventoryBLL.SaveCommonOutWardEntryService(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc, _ReqSupHdr.Swc_com, null, invHdr, _inventoryAuto, null, null, _picklist, null, out _message, out _genSalesDoc, out _genInventoryDoc, false, false,  _inventoryDAL, _salesDAL, _inventoryRepDAL, _generalDAL, _fmsInventoryDal);
                            _aodoutno = string.Empty;
                            Int16 effect = _InventoryBLL.SaveOutwardWithoutAutoNo(invHdr, _picklist, null, _inventoryAuto, _inventoryDAL, out _aodoutno);
                            invHdr = new InventoryHeader();
                            _picklist = new List<ReptPickSerials>();
                            //Int16 effect = _InventoryBLL.SaveOutwardScanSerial(invHdr, _picklist, null);
                            //effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAuto, "-", out _aodoutno);


                        }
                        #endregion

                        #region AOD In Receive

                        invHdr = new InventoryHeader();
                        masterAutoNum = new MasterAutoNumber();


                        //Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //if (_jobobj.SJB_JOBSTAGE >= 6)
                        //{
                        //    _jobNO = string.Empty;
                        //}
                        //else
                        //{
                        //    _jobNO = _jobNum;
                        //}







                        //foreach (Service_WCN_Detail jobitem in _claimItemList)
                        //{

                        foreach (Service_WCN_Detail item in oList1.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            string _jobNO = string.Empty;
                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage >= 6)
                            {
                                _jobNO = string.Empty;

                            }
                            else
                            {
                                _jobNO = _jobNum;
                            }

                            #region Inventory Header
                            invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                            invHdr.Ith_com = _ReqSupHdr.Swc_com;
                            invHdr.Ith_oth_docno = _aodoutno;
                            invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                            invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                            invHdr.Ith_doc_tp = "AOD";
                            invHdr.Ith_cate_tp = "SERVICE";
                            invHdr.Ith_sub_tp = "NOR";
                            invHdr.Ith_is_manual = false;
                            invHdr.Ith_stus = "A";
                            invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                            invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                            invHdr.Ith_direct = true;
                            invHdr.Ith_session_id = _sessionID;
                            invHdr.Ith_manual_ref = DocNum;
                            invHdr.Ith_remarks = string.Empty;
                            invHdr.Ith_vehi_no = "N/A";
                            invHdr.Ith_bus_entity = "N/A";
                            invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                            invHdr.Ith_oth_loc = _errLoc;
                            invHdr.Ith_pc = "N/A";
                            invHdr.Ith_job_no = _jobNO;
                            invHdr.Ith_sub_docno = string.Empty;
                            #endregion


                            #region Inventory Serial



                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {

                                    _pick.Tus_ser_id = item.SWD_SERID;
                                    _pick.Tus_ser_1 = item.SWD_SER1;
                                    _pick.Tus_warr_no = item.SWD_WARRNO;
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _binCode;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (_jobNO == _jobNum)
                                    {
                                        if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                        if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    }
                                    else
                                    {
                                        _pick.Tus_job_no = string.Empty;
                                        _pick.Tus_job_line = 0;
                                    }
                                    _picklist.Add(_pick);

                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _binCode;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (_jobNO == _jobNum)
                                    {
                                        if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                        if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    }
                                    else
                                    {
                                        _pick.Tus_job_no = string.Empty;
                                        _pick.Tus_job_line = 0;
                                    }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion
                        }

                        //}

                        # region Save aod In



                        if (invHdr != null)
                        {
                            MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                            _inventoryAutoin.Aut_moduleid = "AOD";
                            _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                            _inventoryAutoin.Aut_cate_tp = "LOC";
                            _inventoryAutoin.Aut_direction = 1;
                            _inventoryAutoin.Aut_modify_dt = null;
                            _inventoryAutoin.Aut_year = DateTime.Now.Year;
                            _inventoryAutoin.Aut_start_char = "AOD";
                            //  _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, null);
                            string _aodInNo = string.Empty;
                            //int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                            _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, null, _inventoryAutoin, out _aodInNo);


                            // _inventoryDAL.UpdateSupplierClaimDoc(_aodInNo, DocNum, _jobNum);
                            invHdr = new InventoryHeader();
                            _picklist = new List<ReptPickSerials>();
                        }
                        #endregion

                        #endregion
                    }
                    #endregion



                    #region ADJ (-) \ ADJ (+)
                    //  List<String> _JobNumListAdj = _claimItemList.Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<String> _JobNumListAdj = _claimItemList.Where(p => (p.SWD_SER1 != p.SWD_OLD_SER) && (p.SWD_IS_PART == 0) && (p.SWD_IS_STOCK == 1) && p.Swd_need_chk == 1).Select(X => X.SWD_JOBNO).Distinct().ToList();

                    List<Service_WCN_Detail> oList2 = _claimItemList.FindAll(x => (x.SWD_SER1 != x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1) && x.Swd_need_chk == 1);
                    List<Service_WCN_Detail> oList3 = _claimItemList.FindAll(x => (x.SWD_SER1 != x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1) && x.Swd_need_chk == 1);

                    //List<String> _JobNumListAdj = _claimItemList.Where(p => (p.SWD_OLD_SER != p.SWD_SER1 && p.SWD_IS_STOCK == 1) && (p.SWD_IS_PART == 0)).Distinct().Select(x => x.SWD_JOBNO).ToList();
                    foreach (String _jobNum in _JobNumListAdj)
                    {

                        InventoryHeader invHdr = new InventoryHeader();
                        MasterAutoNumber masterAutoNum = new MasterAutoNumber();



                        #region Inventory Header
                        invHdr.Ith_loc = _errLoc;
                        invHdr.Ith_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_docno = string.Empty;
                        invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                        invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                        invHdr.Ith_doc_tp = "ADJ";
                        invHdr.Ith_cate_tp = "SERVICE";
                        invHdr.Ith_sub_tp = "NOR";
                        invHdr.Ith_is_manual = false;
                        invHdr.Ith_stus = "A";
                        invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                        invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                        invHdr.Ith_direct = false;
                        invHdr.Ith_session_id = string.Empty;
                        invHdr.Ith_manual_ref = DocNum;
                        invHdr.Ith_remarks = string.Empty;
                        invHdr.Ith_vehi_no = "N/A";
                        invHdr.Ith_bus_entity = "N/A";
                        invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                        invHdr.Ith_oth_loc = _ReqSupHdr.Swc_loc;
                        invHdr.Ith_pc = "N/A";
                        invHdr.Ith_job_no = _jobNum;
                        invHdr.Ith_sub_docno = string.Empty;
                        #endregion

                        #region Auto Number
                        if (invHdr != null)
                        {

                            _inventoryAuto.Aut_moduleid = "ADJ";
                            _inventoryAuto.Aut_cate_cd = _errLoc;
                            _inventoryAuto.Aut_cate_tp = "LOC";
                            _inventoryAuto.Aut_direction = null;
                            _inventoryAuto.Aut_modify_dt = null;
                            _inventoryAuto.Aut_year = null;
                            _inventoryAuto.Aut_start_char = "ADJ";
                        }
                        #endregion


                        //foreach (Service_WCN_Detail jobitem in _claimItemList)
                        // {
                        //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_SER1 != x.SWD_OLD_SER) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 1));

                        foreach (Service_WCN_Detail item in oList2.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {


                            #region Inventory Serial



                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _errLoc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {
                                    //  _picklist = _inventoryDAL.GetInventorySerialListById(Convert.ToString(item.SWD_SERID), _ReqSupHdr.Swc_loc);
                                    ReptPickSerials _serDet = _inventoryDAL.GetReservedByserialID(_ReqSupHdr.Swc_com, _errLoc, null, item.SWD_ITMCD, item.SWD_SERID);
                                    if (_serDet == null)
                                    {
                                        _err = "Serial not available" + item.SWD_OLD_SER;
                                        _effects = -1;
                                        break;
                                    }
                                    _serDet.Tus_new_remarks = "ADJ";
                                    _pick.Tus_itm_stus = "GOD";//
                                    _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                    _picklist.Add(_serDet);
                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _errLocBin;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _errLoc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                    if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion
                        }
                        //  //}


                        # region Save aod out



                        if (invHdr != null)
                        {
                            _aodoutno = string.Empty;
                            //int _effect = _InventoryBLL.SaveCommonOutWardEntryService(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc, _ReqSupHdr.Swc_com, null, invHdr, _inventoryAuto, null, null, _picklist, null, out _message, out _genSalesDoc, out _genInventoryDoc, false, false,   _inventoryDAL, _salesDAL, _inventoryRepDAL, _generalDAL, _fmsInventoryDal);
                            Int16 effect = _InventoryBLL.SaveOutwardWithoutAutoNo(invHdr, _picklist, null, _inventoryAuto, _inventoryDAL, out _aodoutno);
                            invHdr = new InventoryHeader();
                            _picklist = new List<ReptPickSerials>();
                            //Int16 effect = _InventoryBLL.SaveOutwardScanSerial(invHdr, _picklist, null);
                            //effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAuto, "-", out _aodoutno);


                        }
                        #endregion

                        #region ADJ +

                        string _jobNO = string.Empty;

                        //Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //if (_jobobj.SJB_JOBSTAGE >= 6)
                        //{
                        //    _jobNO = string.Empty;
                        //}
                        //else
                        //{
                        //    _jobNO = _jobNum;
                        //}





                        //foreach (Service_WCN_Detail jobitem in _claimItemList)
                        //{

                        foreach (Service_WCN_Detail item in oList3.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {

                            invHdr = new InventoryHeader();
                            masterAutoNum = new MasterAutoNumber();


                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage >= 6)
                            {
                                _jobNO = string.Empty;

                            }
                            else
                            {
                                _jobNO = _jobNum;
                            }
                            #region Inventory Header
                            invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                            invHdr.Ith_com = _ReqSupHdr.Swc_com;
                            invHdr.Ith_oth_docno = _aodoutno;
                            invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                            invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                            invHdr.Ith_doc_tp = "ADJ";
                            invHdr.Ith_cate_tp = "SERVICE";
                            invHdr.Ith_sub_tp = "NOR";
                            invHdr.Ith_is_manual = false;
                            invHdr.Ith_stus = "A";
                            invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                            invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                            invHdr.Ith_direct = true;
                            invHdr.Ith_session_id = string.Empty;
                            invHdr.Ith_manual_ref = DocNum;
                            invHdr.Ith_remarks = string.Empty;
                            invHdr.Ith_vehi_no = "N/A";
                            invHdr.Ith_bus_entity = "N/A";
                            invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                            invHdr.Ith_oth_loc = _errLoc;
                            invHdr.Ith_pc = "N/A";
                            invHdr.Ith_job_no = _jobNO;
                            invHdr.Ith_sub_docno = string.Empty;
                            #endregion



                            #region Inventory Serial



                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                            if (_itmlist != null)
                            {
                                if (_itmlist.Mi_is_ser1 == 1)
                                {

                                    _pick.Tus_ser_id = _inventoryDAL.GetSerialID();
                                    _pick.Tus_ser_1 = item.SWD_SER1;
                                    _pick.Tus_warr_no = item.SWD_WARRNO;
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _binCode;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                    _pick.Tus_new_remarks = "ADJ";
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;

                                    if (_jobNO == _jobNum)
                                    {
                                        if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                        if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    }
                                    else
                                    {
                                        _pick.Tus_job_no = string.Empty;
                                        _pick.Tus_job_line = 0;
                                    }
                                    _picklist.Add(_pick);

                                }
                                else
                                {
                                    _pick.Tus_base_doc_no = string.Empty;
                                    _pick.Tus_bin = _binCode;
                                    _pick.Tus_com = _ReqSupHdr.Swc_com;
                                    _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                    _pick.Tus_cre_dt = System.DateTime.Now;
                                    _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                    _pick.Tus_doc_no = string.Empty;
                                    _pick.Tus_exist_grncom = string.Empty;
                                    _pick.Tus_exist_grnno = string.Empty;
                                    _pick.Tus_exist_supp = string.Empty;
                                    _pick.Tus_itm_stus = item.SWD_ITM_STUS;
                                    _pick.Tus_unit_price = 0;
                                    _pick.Tus_ageloc = string.Empty;
                                    _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                    _pick.Tus_itm_cd = item.SWD_ITMCD;
                                    _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                    _pick.Tus_itm_model = _itmlist.Mi_model;
                                    _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                    _pick.Tus_new_remarks = String.Empty;
                                    _pick.Tus_new_status = String.Empty;
                                    _pick.Tus_qty = 1;
                                    _pick.Tus_seq_no = 0;
                                    if (_jobNO == _jobNum)
                                    {
                                        if (!string.IsNullOrEmpty(item.SWD_JOBNO)) { _pick.Tus_job_no = item.SWD_JOBNO; } else { _pick.Tus_job_no = string.Empty; }
                                        if (!string.IsNullOrEmpty(Convert.ToString(item.SWD_JOBLINE))) { _pick.Tus_job_line = item.SWD_JOBLINE; } else { _pick.Tus_job_line = 0; }
                                    }
                                    else
                                    {
                                        _pick.Tus_job_no = string.Empty;
                                        _pick.Tus_job_line = 0;
                                    }
                                    _picklist.Add(_pick);
                                }
                            }
                            #endregion

                        }
                        //}

                        //AOD out
                        # region Save aod In



                        if (invHdr != null)
                        {
                            MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                            _inventoryAutoin.Aut_moduleid = "ADJ";
                            _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                            _inventoryAutoin.Aut_cate_tp = "LOC";
                            _inventoryAutoin.Aut_direction = null;
                            _inventoryAutoin.Aut_modify_dt = null;
                            _inventoryAutoin.Aut_year = null;
                            _inventoryAutoin.Aut_start_char = "ADJ";

                            //  _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, null);
                            string _aodInNo = string.Empty;
                            // int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                            _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, null, _inventoryAutoin, out _aodInNo);
                            _inventoryDAL.UpdateSupplierClaimDoc(_aodInNo, DocNum, _jobNum);
                            _inventoryDAL.UpdateSupplierClaimWarranty(_aodInNo);
                            invHdr = new InventoryHeader();
                            _picklist = new List<ReptPickSerials>();
                        }
                        #endregion

                        #endregion

                    }
                    #endregion


                }
                #endregion

                #region 4.Received Part for Closed Jobs
                if (_ReqSupHdr.Swc_stus == "I")
                {

                    #region ADJ +
                    List<ReptPickSerialsSub> _picksublist = new List<ReptPickSerialsSub>();
                    //   List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 1)).Distinct().Select(x => x.SWD_JOBNO).ToList();
                    List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 1) && (p.Swd_need_chk == 1)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    //List<String> _JobNumListInAdj = _claimItemList.Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 1) && (x.Swd_need_chk == 1));
                    foreach (String _jobNum in _JobNumListInAdj)
                    {
                        string _jobNO = string.Empty;

                        //   Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //if (_jobobj.SJB_JOBSTAGE >= 6)
                        // {
                        //     _jobNO = string.Empty;






                        //  foreach (Service_WCN_Detail jobitem in _claimItemList)
                        // {
                        //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_IS_PART == 1));
                        foreach (Service_WCN_Detail item in oList.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {
                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage >= 6)
                            {
                                _jobNO = string.Empty;
                                if (item.SWD_OLD_SER == item.SWD_SER1)
                                {
                                    _custServiceDAL.UpdateSupplierClaimWarrantyRec_job_old_part(item.SWD_JOBNO, item.SWD_JOBLINE);
                                }

                                InventoryHeader invHdr = new InventoryHeader();
                                MasterAutoNumber masterAutoNum = new MasterAutoNumber();
                                #region Inventory Header
                                invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                                invHdr.Ith_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_docno = string.Empty;
                                invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                                invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                                invHdr.Ith_doc_tp = "ADJ";
                                invHdr.Ith_cate_tp = "SERVICE";
                                invHdr.Ith_sub_tp = "NOR";
                                invHdr.Ith_is_manual = false;
                                invHdr.Ith_stus = "A";
                                invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                                invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                                invHdr.Ith_direct = true;
                                invHdr.Ith_session_id = _sessionID;
                                invHdr.Ith_manual_ref = DocNum;
                                invHdr.Ith_remarks = string.Empty;
                                invHdr.Ith_vehi_no = "N/A";
                                invHdr.Ith_bus_entity = "N/A";
                                invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_loc = _errLoc;
                                invHdr.Ith_pc = "N/A";
                                invHdr.Ith_job_no = _jobNO;
                                invHdr.Ith_sub_docno = string.Empty;
                                #endregion

                                #region Auto Number
                                if (invHdr != null)
                                {

                                    _inventoryAuto.Aut_moduleid = "ADJ";
                                    _inventoryAuto.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAuto.Aut_cate_tp = "LOC";
                                    _inventoryAuto.Aut_direction = null;
                                    _inventoryAuto.Aut_modify_dt = null;
                                    _inventoryAuto.Aut_year = null;
                                    _inventoryAuto.Aut_start_char = "ADJ";
                                }
                                #endregion


                                //foreach (Service_WCN_Detail item in oList)
                                //{
                                #region Inventory Serial



                                ReptPickSerials _pick = new ReptPickSerials();

                                _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                                string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                                if (_itmlist != null)
                                {
                                    if (_itmlist.Mi_is_ser1 == 1)
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                                        if (_jobSer == null)
                                        {
                                            _err = "Serial not available" + item.SWD_SER1;
                                            _effects = -1;
                                            break;
                                        }
                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {

                                                _pick.Tus_ser_id = _inventoryDAL.GetSerialID();// Convert.ToInt32(itemSer.Jbd_ser_id);// Convert.ToInt32(itemSer.Jbd_ser_id);
                                                _pick.Tus_ser_1 = item.SWD_SER1;
                                                _pick.Tus_warr_no = string.Empty;
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;
                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(item.SWD_ITMCD);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_itm_cd = item.SWD_ITMCD;

                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = "ADJ";
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;


                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;

                                                _picklist.Add(_pick);

                                                ReptPickSerialsSub _picksub = new ReptPickSerialsSub();
                                                _picksub.Tpss_itm_brand = _itmlist.Mi_brand;
                                                _picksub.Tpss_itm_cd = _itmlist.Mi_cd;
                                                _picksub.Tpss_itm_desc = _itmlist.Mi_shortdesc;
                                                _picksub.Tpss_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _picksub.Tpss_mfc = string.Empty;
                                                _picksub.Tpss_m_itm_cd = itemSer.Jbd_itm_cd;
                                                _picksub.Tpss_m_ser = itemSer.Jbd_ser1;
                                                _picksub.Tpss_sub_ser = item.SWD_SER1;
                                                _picksub.Tpss_tp = _itmlist.Mi_itm_tp;
                                                _picksub.Tpss_usrseq_no = 0;
                                                _picksub.Tpss_warr_no = item.SWD_WARRNO;
                                                _picksub.Tpss_warr_period = 0;
                                                _picksub.Tpss_warr_rem = string.Empty;
                                                _picksublist.Add(_picksub);


                                            }
                                        }

                                    }
                                    else
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);

                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;

                                                _pick.Tus_itm_cd = item.SWD_ITMCD;


                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(item.SWD_ITMCD);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = String.Empty;
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;

                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;

                                                _picklist.Add(_pick);
                                            }
                                        }
                                    }
                                }
                                #endregion
                                // }

                                //AOD IN
                                # region Save aod In



                                if (invHdr != null)
                                {
                                    MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                                    _inventoryAutoin.Aut_moduleid = "ADJ";
                                    _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAutoin.Aut_cate_tp = "LOC";
                                    _inventoryAutoin.Aut_direction = null;
                                    _inventoryAutoin.Aut_modify_dt = null;
                                    _inventoryAutoin.Aut_year = null;
                                    _inventoryAutoin.Aut_start_char = "ADJ";

                                    //   _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, _picksublist);
                                    string _aodInNo = string.Empty;
                                    //  int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                                    _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, _picksublist, _inventoryAutoin, out _aodInNo);
                                    invHdr = new InventoryHeader();
                                    _picklist = new List<ReptPickSerials>();

                                }
                                #endregion

                            }
                        }


                        //  }
                    }
                    #endregion

                }
                #endregion

                #region 6.Received Main Item (Customer) for Closed Jobs
                if (_ReqSupHdr.Swc_stus == "I")
                {

                    #region ADJ +
                    List<ReptPickSerialsSub> _picksublist = new List<ReptPickSerialsSub>();

                    //List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 0 && p.SWD_IS_STOCK == 1)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    //List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 0));
                    List<String> _JobNumListInAdj = _claimItemList.Where(p => (p.SWD_IS_PART == 0) && (p.Swd_need_chk == 1)).Select(X => X.SWD_JOBNO).Distinct().ToList();
                    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_IS_PART == 0) && (x.Swd_need_chk == 1));
                    foreach (String _jobNum in _JobNumListInAdj)
                    {
                        string _jobNO = string.Empty;

                        //    Service_JOB_HDR _jobobj = _custServiceDAL.GetServiceJobHeader(_jobNum, _ReqSupHdr.Swc_com);

                        //  if (_jobobj.SJB_JOBSTAGE >= 6)
                        //    {
                        //     _jobNO = string.Empty;


                        //    List<Service_WCN_Detail> oList = _claimItemList.FindAll(x => (x.SWD_JOBNO == _jobNum) && (x.SWD_IS_PART == 0) && (x.SWD_IS_STOCK == 0));


                        foreach (Service_WCN_Detail item in oList.Where(S => (S.SWD_JOBNO == _jobNum)))
                        {

                            Service_job_Det _jobDetobj = _custServiceDAL.GetJobDetailsdtl(item.SWD_JOBNO, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                            if (_jobDetobj.Jbd_stage >= 6)
                            {
                                _jobNO = string.Empty;

                                InventoryHeader invHdr = new InventoryHeader();
                                MasterAutoNumber masterAutoNum = new MasterAutoNumber();
                                #region Inventory Header
                                invHdr.Ith_loc = _ReqSupHdr.Swc_loc;
                                invHdr.Ith_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_docno = string.Empty;
                                invHdr.Ith_doc_date = _ReqSupHdr.Swc_dt;
                                invHdr.Ith_doc_year = _ReqSupHdr.Swc_dt.Date.Year;
                                invHdr.Ith_doc_tp = "ADJ";
                                invHdr.Ith_cate_tp = "SERVICE";
                                invHdr.Ith_sub_tp = "NOR";
                                invHdr.Ith_is_manual = false;
                                invHdr.Ith_stus = "A";
                                invHdr.Ith_cre_by = _ReqSupHdr.Swc_cre_by;
                                invHdr.Ith_mod_by = _ReqSupHdr.Swc_mod_by;
                                invHdr.Ith_direct = true;
                                invHdr.Ith_session_id = _sessionID;
                                invHdr.Ith_manual_ref = DocNum;
                                invHdr.Ith_remarks = string.Empty;
                                invHdr.Ith_vehi_no = "N/A";
                                invHdr.Ith_bus_entity = "N/A";
                                invHdr.Ith_oth_com = _ReqSupHdr.Swc_com;
                                invHdr.Ith_oth_loc = _errLoc;
                                invHdr.Ith_pc = "N/A";
                                invHdr.Ith_job_no = _jobNO;
                                invHdr.Ith_sub_docno = string.Empty;
                                #endregion

                                #region Auto Number
                                if (invHdr != null)
                                {

                                    _inventoryAuto.Aut_moduleid = "ADJ";
                                    _inventoryAuto.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAuto.Aut_cate_tp = "LOC";
                                    _inventoryAuto.Aut_direction = null;
                                    _inventoryAuto.Aut_modify_dt = null;
                                    _inventoryAuto.Aut_year = null;
                                    _inventoryAuto.Aut_start_char = "ADJ";
                                }
                                #endregion
                                ////foreach (Service_WCN_Detail item in oList)
                                ////{
                                #region Inventory Serial



                                ReptPickSerials _pick = new ReptPickSerials();

                                _itmlist = _inventoryDAL.GetItem(_ReqSupHdr.Swc_com, item.SWD_ITMCD);
                                string _binCode = _inventoryDAL.GetDefaultBinCode(_ReqSupHdr.Swc_com, _ReqSupHdr.Swc_loc);
                                if (_itmlist != null)
                                {
                                    if (_itmlist.Mi_is_ser1 == 1)
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);
                                        if (_jobSer == null)
                                        {
                                            _err = "Serial not available" + item.SWD_SER1;
                                            _effects = -1;
                                            break;
                                        }
                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {

                                                _pick.Tus_ser_id = Convert.ToInt32(itemSer.Jbd_ser_id);
                                                _pick.Tus_ser_1 = item.SWD_SER1; //itemSer.Jbd_ser1; 07-08-2015 Nadeeka
                                                _pick.Tus_warr_no = itemSer.Jbd_warr;
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;
                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;
                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(itemSer.Jbd_itm_cd);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_itm_cd = itemSer.Jbd_itm_cd;

                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = "ADJ";
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_ser_4 = item.SWD_OLD_SER;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;


                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;
                                                if (_pick.Tus_ser_id == 0)//18-12-2015 Nadeeka
                                                {
                                                    _pick.Tus_ser_id = _inventoryDAL.GetSerialID();

                                                }

                                                _picklist.Add(_pick);

                                                ReptPickSerialsSub _picksub = new ReptPickSerialsSub();
                                                _picksub.Tpss_itm_brand = _itmlist.Mi_brand;
                                                _picksub.Tpss_itm_cd = _itmlist.Mi_cd;
                                                _picksub.Tpss_itm_desc = _itmlist.Mi_shortdesc;
                                                _picksub.Tpss_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _picksub.Tpss_mfc = string.Empty;
                                                _picksub.Tpss_m_itm_cd = itemSer.Jbd_itm_cd;
                                                _picksub.Tpss_m_ser = itemSer.Jbd_ser1;
                                                _picksub.Tpss_sub_ser = item.SWD_SER1;
                                                _picksub.Tpss_tp = _itmlist.Mi_itm_tp;
                                                _picksub.Tpss_usrseq_no = 0;
                                                _picksub.Tpss_warr_no = item.SWD_WARRNO;
                                                _picksub.Tpss_warr_period = 0;
                                                _picksub.Tpss_warr_rem = string.Empty;
                                                _picksublist.Add(_picksub);


                                            }
                                        }

                                    }
                                    else
                                    {
                                        List<Service_job_Det> _jobSer = new List<Service_job_Det>();
                                        _jobSer = _custServiceDAL.GetJobDetails(_jobNum, item.SWD_JOBLINE, _ReqSupHdr.Swc_com);

                                        if (_jobSer.Count > 0)
                                        {
                                            foreach (Service_job_Det itemSer in _jobSer)
                                            {
                                                _pick.Tus_base_doc_no = string.Empty;
                                                _pick.Tus_bin = _binCode;
                                                _pick.Tus_com = _ReqSupHdr.Swc_com;
                                                _pick.Tus_cre_by = _ReqSupHdr.Swc_cre_by;

                                                _pick.Tus_cre_dt = System.DateTime.Now;
                                                _pick.Tus_doc_dt = _ReqSupHdr.Swc_dt;
                                                _pick.Tus_doc_no = string.Empty;
                                                _pick.Tus_exist_grncom = string.Empty;
                                                _pick.Tus_exist_grnno = string.Empty;
                                                _pick.Tus_exist_supp = string.Empty;
                                                _pick.Tus_itm_stus = "GOD";// item.SWD_ITM_STUS;
                                                _pick.Tus_unit_price = 0;
                                                _pick.Tus_ageloc = string.Empty;

                                                _pick.Tus_itm_cd = itemSer.Jbd_itm_cd;


                                                DataTable _tblItem = _inventoryDAL.Get_Item_Infor(itemSer.Jbd_itm_cd);
                                                foreach (DataRow r in _tblItem.Rows)
                                                {
                                                    _pick.Tus_itm_brand = (string)r["mi_brand"];
                                                    _pick.Tus_itm_desc = (string)r["mi_shortdesc"];
                                                    _pick.Tus_itm_model = (string)r["mi_model"];
                                                }
                                                _pick.Tus_loc = _ReqSupHdr.Swc_loc;
                                                _pick.Tus_new_remarks = String.Empty;
                                                _pick.Tus_new_status = String.Empty;
                                                _pick.Tus_qty = 1;
                                                _pick.Tus_seq_no = 0;

                                                _pick.Tus_job_no = string.Empty;
                                                _pick.Tus_job_line = 0;
                                                if (_pick.Tus_ser_id == 0)//18-12-2015 Nadeeka
                                                {
                                                    _pick.Tus_ser_id = _inventoryDAL.GetSerialID();

                                                }
                                                _picklist.Add(_pick);
                                            }
                                        }
                                    }
                                }
                                #endregion
                                //    }

                                //AOD out
                                # region Save aod In



                                if (invHdr != null)
                                {
                                    MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                                    _inventoryAutoin.Aut_moduleid = "ADJ";
                                    _inventoryAutoin.Aut_cate_cd = _ReqSupHdr.Swc_loc;
                                    _inventoryAutoin.Aut_cate_tp = "LOC";
                                    _inventoryAutoin.Aut_direction = null;
                                    _inventoryAutoin.Aut_modify_dt = null;
                                    _inventoryAutoin.Aut_year = null;
                                    _inventoryAutoin.Aut_start_char = "ADJ";

                                    //   _InventoryBLL.SaveInwardScanSerial(invHdr, _picklist, _picksublist);
                                    string _aodInNo = string.Empty;
                                    //    int effect = _InventoryBLL.UpdateInventoryAutoNumber(invHdr, _inventoryAutoin, "+", out _aodInNo);
                                    _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklist, _picksublist, _inventoryAutoin, out _aodInNo);
                                    invHdr = new InventoryHeader();
                                    _picklist = new List<ReptPickSerials>();

                                }
                                #endregion
                            }
                        }


                        //}
                    }
                    #endregion

                }
                #endregion



                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();


                _inventoryDAL.TransactionCommit();

                _inventoryDAL.ConnectionClose();

                _salesDAL.TransactionCommit();

                _salesDAL.ConnectionClose();



                _err = "Sucessfully Saved!";
                _effects = 1;

            }
            catch (Exception ex)
            {

                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();


                _effects = -1;
                _err = ex.Message.ToString();
            }

            return _effects;
        }

        public Int32 Update_SupplierClaim(Service_WCN_Hdr _ReqSupHdr, out string _err)
        {
            Int32 _effects = 0;
            string _aodoutno = string.Empty;
            InventoryBLL _InventoryBLL = new InventoryBLL();
            SalesBLL _SalesBLL = new SalesBLL();
            string _recNo = string.Empty;
            _inventoryDAL = new InventoryDAL();
            string _db = string.Empty;
            try
            {

                _custServiceDAL = new CustServiceDAL();
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();



                _custServiceDAL.UpdateSupplierClaimWarrantyHdr(_ReqSupHdr.Swc_doc_no, _ReqSupHdr.Swc_supp, _ReqSupHdr.Swc_clm_supp, _ReqSupHdr.Swc_othdocno, _ReqSupHdr.Swc_rmks, _ReqSupHdr.Swc_air_bill_no, _ReqSupHdr.Swc_bill_dt, _ReqSupHdr.Swc_order_no, _ReqSupHdr.SWC_HOLD_REASON, _ReqSupHdr.Swc_eta);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();


                _err = "Sucessfully Updated!";
                _effects = 1;

            }
            catch (Exception ex)
            {

                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();


                _effects = -1;
                _err = ex.Message.ToString();
            }

            return _effects;
        }


        public Int32 UpdateSupplierClaimForMRN(string _job, Int32 _jobLine, string _user, string _rem, out string _err)
        {
            Int32 _effects = 0;


            try
            {

                _custServiceDAL = new CustServiceDAL();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();



                _custServiceDAL.UpdateSupplierClaimForMRN(_job, _jobLine, _user, _rem);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();


                _err = "Activated for MRN!\n  Job No is " + _job;
                _effects = 1;

            }
            catch (Exception ex)
            {

                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();


                _effects = -1;
                _err = ex.Message.ToString();
            }

            return _effects;
        }
        public Int32 CancelSupplierClaimWarrantyReq(string _job, Int32 _line, Int32 _seq, string _user, out String errMSg)
        {
            Int32 _effects = 0;
            string _aodoutno = string.Empty;
            InventoryBLL _InventoryBLL = new InventoryBLL();
            SalesBLL _SalesBLL = new SalesBLL();

            _inventoryDAL = new InventoryDAL();
            string _db = string.Empty;
            try
            {

                _custServiceDAL = new CustServiceDAL();
                _salesDAL = new SalesDAL();
                _generalDAL = new GeneralDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();



                _custServiceDAL.CancelSupplierClaimWarrantyReq(_job, _line, _seq, _user);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();


                errMSg = "Sucessfully Cancelled!\n ";
                _effects = 1;

            }
            catch (Exception ex)
            {

                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();


                _effects = -1;
                errMSg = ex.Message.ToString();
            }

            return _effects;
        }
        public DataTable getSalesTypeByInvNo(string _invno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getSalesTypeByInvNo(_invno);
        }


        public Int32 Save_Job(Service_JOB_HDR _jobHdr, List<Service_job_Det> _jobItems, List<Service_Job_Defects> _jobDefList, List<Service_Tech_Aloc_Hdr> _jobEmpList, List<Service_Job_Det_Sub> _jobDetSubList, RecieptHeader _recHeader, List<RecieptItem> _recItems, List<ImageUploadDTO> _imgList, MasterAutoNumber _recAuto, string _sbChnl, string _itemType, string _brand, Int32 _warStus, MasterAutoNumber _masterAuto, out string _err, out string _jNo, out string _receiptNo, List<ServiceTechAlocSupervice> _supervisor = null, Int32 _autoStartJob = 0, List<Transport> transportList = null)
        {


                                                
            Int32 eff= Save_Job_common(_jobHdr, _jobItems, _jobDefList, _jobEmpList, _jobDetSubList, _recHeader, _recItems, _imgList, _recAuto, _sbChnl, _itemType, _brand, _warStus, _masterAuto, out  _err, out  _jNo, out  _receiptNo, _supervisor, _autoStartJob, transportList,null,null,null,null,null,false);
            return eff;
                                    }

        public Int32 Save_Job_bulk(Service_JOB_HDR _jobHdr, List<Service_job_Det> _jobItems, List<Service_Job_Defects> _jobDefList, List<Service_Tech_Aloc_Hdr> _jobEmpList, List<Service_Job_Det_Sub> _jobDetSubList, RecieptHeader _recHeader, List<RecieptItem> _recItems, List<ImageUploadDTO> _imgList, MasterAutoNumber _recAuto, string _sbChnl, string _itemType, string _brand, Int32 _warStus, MasterAutoNumber _masterAuto, out string _err, out string _jNo, out string _receiptNo, List<ServiceTechAlocSupervice> _supervisor = null, Int32 _autoStartJob = 0, List<Transport> transportList = null)
                            {

            Int32 eff = Save_Job_common(_jobHdr, _jobItems, _jobDefList, _jobEmpList, _jobDetSubList, _recHeader, _recItems, _imgList, _recAuto, _sbChnl, _itemType, _brand, _warStus, _masterAuto, out  _err, out  _jNo, out  _receiptNo, _supervisor, _autoStartJob, transportList, null, null, null, null, null, false);
            return eff;
                            }



        //kapila
        //Edit by Chamal 01-Dec-2014
        //Updated by akila 2017/05/06

        public DataTable GetServiceJobDetailSubItemsData(string job, Int32 jobLine)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceJobDetailSubItemsData(job, jobLine);
        }

        public Int16 AODReceiptSCV(InventoryHeader _inventoryMovementHeader, List<ReptPickSerials> _reptPickSerials, List<ReptPickSerialsSub> _reptPickSerialsSub, MasterAutoNumber _masterAutoNumber, out string _docNo)
        {
            InventoryBLL _bll = new InventoryBLL();
            Int16 effect = -1;
            _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();

            #region Validation check duplicate serial(s)
            _inventoryDAL.ConnectionOpen();
            _generalDAL.ConnectionOpen();

            MasterLocation _ageLoc = _generalDAL.GetLocationByLocCode(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc);
            bool _isCheckLocAge = false;
            DataTable _dtloctp = _generalDAL.GetLocTypes(_ageLoc.Ml_loc_tp);
            if (_dtloctp.Rows.Count > 0)
            {
                if (_dtloctp.Rows[0]["RLT_IS_LOCAGE"].ToString() == "1") _isCheckLocAge = true;
            }

            System.Text.StringBuilder _build = new System.Text.StringBuilder();
            foreach (ReptPickSerials _srl in _reptPickSerials)
            {
                DataTable _byid = _inventoryDAL.CheckSerialByID(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_ser_id);
                DataTable _byserial = _inventoryDAL.CheckSerialBySerial(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1);
                if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null) _build.Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id)); else _build.AppendLine().Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id));

                if (_inventoryMovementHeader.Ith_doc_tp == "AOD")
                {
                    if (_isCheckLocAge == true)
                    {
                        if (string.IsNullOrEmpty(_srl.Tus_ageloc))
                        {
                            _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                            _srl.Tus_isownmrn = 0;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(_srl.Tus_ageloc))
                        {
                            if (_srl.Tus_ageloc != _inventoryMovementHeader.Ith_loc)
                            {
                                _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                                _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                                //Check MRN
                                if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                                { _srl.Tus_isownmrn = 1; }
                                else
                                { _srl.Tus_isownmrn = 0; }
                            }
                        }
                        else
                        {
                            _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                            _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                            //Check MRN
                            if (_generalDAL.CheckReqNo(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_loc, _inventoryMovementHeader.Ith_oth_docno) == true)
                            { _srl.Tus_isownmrn = 1; }
                            else
                            { _srl.Tus_isownmrn = 0; }
                        }
                    }
                }
                else
                {
                    _srl.Tus_ageloc_dt = _inventoryMovementHeader.Ith_doc_date.Date;
                    _srl.Tus_ageloc = _inventoryMovementHeader.Ith_loc;
                    _srl.Tus_isownmrn = 0;
                }
            }
            if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
            {
                _docNo = "Please check the below item(s). These serial(s) /n serial id(s) are already available in your location./n " + _build.ToString(); effect = -1;
                _inventoryDAL.ConnectionClose();
                return effect;
            }

            _inventoryDAL.ConnectionClose();
            _generalDAL.ConnectionClose();
            #endregion

            _inventoryRepDAL = new ReptCommonDAL(); _inventoryDAL = new InventoryDAL(); _ScmCommonDAL = new SCMCommonDAL(); _generalDAL = new GeneralDAL();



            effect = _bll.SaveInwardScanSerial(_inventoryMovementHeader, _reptPickSerials, _reptPickSerialsSub);
            effect = _bll.UpdateInventoryAutoNumber(_inventoryMovementHeader, _masterAutoNumber, "+", out _docNo);

            foreach (ReptPickSerials _one in _reptPickSerials) _inventoryDAL.UpdateAODOUTPickItem(_inventoryMovementHeader.Ith_oth_docno, _one.Tus_ser_id);
            _inventoryDAL.UpdateAODOUT(_inventoryMovementHeader.Ith_com, _inventoryMovementHeader.Ith_oth_docno);

            _inventoryRepDAL.TransactionCommit();
            _inventoryDAL.TransactionCommit();

            return effect;
        }

        //kapila
        public DataTable getDefectTypes(string _com, string _chnl, string _cat, string _code)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getDefectTypes(_com, _chnl, _cat, _code);
        }

        //Tharaka 2014-09-30
        public DataTable GetTechAllocJobs(string com, DateTime From, DateTime To, string jobno, string Stage, Int32 isCusexpectDate, string customer, string PC,string town)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetTechAllocJobs(com, From, To, jobno, Stage, isCusexpectDate, customer, PC, town);
        }

        //Tharaka 2014-09-30
        public List<Service_Job_Defects> GetJobDefects(string jobNo, Int32 lineNo, string Type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobDefects(jobNo, lineNo, Type);
        }

        //Tharaka 01-10-2014
        public DataTable GetEmployeByDefect(string com, string defect)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetEmployeByDefect(com, defect);
        }

        //Sanjeewa 2017-07-13
        public Boolean Is_EstimateAvailable(string _jobno)
        {
            Int32 _effect = 0;

            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            _effect = _custServiceDAL.Is_EstimateAvailable(_jobno);
            _custServiceDAL.ConnectionClose();

            if (_effect > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        //Tharaka 2014-10-02
        public DataTable GetEmployeBySkillDesignation(string com, string Skill, string Designation, string EPF, string PC)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetEmployeBySkillDesignation(com, Skill, Designation, EPF, PC);
        }

        public Int32 Save_TechnicianAllocatoinHEader(List<Service_Tech_Aloc_Hdr> oHeader, MasterAutoNumber _ReqInsAuto, bool isNeedJobStageUpdate, Int32 _autoStartJob = 0)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                int effect3 = _custServiceDAL.Update_TechAllocationStatus(oHeader[0].STH_JOBNO, oHeader[0].STH_JOBLINE, "R", oHeader[0].STH_COM);

                foreach (Service_Tech_Aloc_Hdr _lst in oHeader)
                {
                    if (_lst.STH_ALOCNO == "")
                    {
                        MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_ReqInsAuto.Aut_moduleid, _ReqInsAuto.Aut_direction, _ReqInsAuto.Aut_start_char, _ReqInsAuto.Aut_cate_tp, _ReqInsAuto.Aut_cate_cd, _ReqInsAuto.Aut_modify_dt, _ReqInsAuto.Aut_year);
                        _reversInv.Aut_modify_dt = null;
                        _reversInv.Aut_year = null;
                        string _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _inventoryDAL.UpdateAutoNumber(_reversInv);

                        _lst.STH_ALOCNO = _vouNo;
                    }
                    _lst.STH_STUS = "A";
                    _effects += _custServiceDAL.Save_TechnicianAllocatoinHEader(_lst);
                    Int32 result = _custServiceDAL.Save_TechnicianAllocatoinHEaderLog(_lst, _lst.STH_CRE_BY);
                }

                if (isNeedJobStageUpdate)
                {
                    var uniquePeople = from p in oHeader
                                       group p by new { p.STH_JOBNO } //or group by new {p.ID, p.Name, p.Whatever}
                                           into mygroup
                                           select mygroup.FirstOrDefault();
                    //List<Service_Tech_Aloc_Hdr> newhdr = oHeader.Distinct(i => i.).ToList();
                    //res = res.DistinctBy(i => i.Name).DistinctBy(i => i.ProductId).ToList();

                    foreach (Service_Tech_Aloc_Hdr _lst in uniquePeople)
                    {
                        //kapila 24/2/2016 get pending acceptance stage is allowed or not
                        decimal _jbStage = 3;
                        //DataTable _dtJobHdr = _custServiceDAL.sp_get_job_hdrby_jobno(oHeader[0].STH_JOBNO); //kapila 22/4/2016
                        //DataTable _dtPend = _custServiceDAL.GetPendingAcceptanceStatus(oHeader[0].STH_COM, oHeader[0].STH_LOC, _dtJobHdr.Rows[0]["SJB_JOBCAT"].ToString());

                        DataTable _dtJobHdr = _custServiceDAL.sp_get_job_hdrby_jobno(_lst.STH_JOBNO); //kapila 22/4/2016
                        DataTable _dtPend = _custServiceDAL.GetPendingAcceptanceStatus(_lst.STH_COM, _lst.STH_LOC, _dtJobHdr.Rows[0]["SJB_JOBCAT"].ToString());
                        if (_dtPend.Rows.Count > 0)
                            if (Convert.ToDecimal(_dtPend.Rows[0]["scs_pend_accept"]) == 1)
                                _jbStage = Convert.ToDecimal(2.2);

                        //Service_Job_StageLog oLog = new Service_Job_StageLog();
                        //oLog.SJL_REQNO = "";
                        //oLog.SJL_JOBNO = oHeader[0].STH_JOBNO;
                        //oLog.SJL_JOBLINE = oHeader[0].STH_JOBLINE;
                        //oLog.SJL_COM = oHeader[0].STH_COM;
                        //oLog.SJL_LOC = oHeader[0].STH_LOC;
                        //oLog.SJL_JOBSTAGE = _jbStage;
                        //oLog.SJL_CRE_BY = oHeader[0].STH_CRE_BY;
                        //oLog.SJL_CRE_DT = DateTime.Now;
                        //oLog.SJL_SESSION_ID = oHeader[0].STH_SESSION_ID;
                        //oLog.SJL_INFSUP = 0;

                        Service_Job_StageLog oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = _lst.STH_JOBNO;
                        oLog.SJL_JOBLINE = _lst.STH_JOBLINE;
                        oLog.SJL_COM = _lst.STH_COM;
                        oLog.SJL_LOC = _lst.STH_LOC;
                        oLog.SJL_JOBSTAGE = _jbStage;
                        oLog.SJL_CRE_BY = _lst.STH_CRE_BY;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = _lst.STH_SESSION_ID;
                        oLog.SJL_INFSUP = 0;

                        int Effect = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                        //int Effect2 = _custServiceDAL.Update_JobDetailStage(oHeader[0].STH_JOBNO, oHeader[0].STH_JOBLINE, _jbStage);
                        int Effect2 = _custServiceDAL.Update_JobDetailStage(_lst.STH_JOBNO, _lst.STH_JOBLINE, _jbStage);
                    }
                }

                //Add by akila 2017/06/03
                //if selected location has setuped as auto start job, update the jobe stage and tech allocated date time in job details
                if (_autoStartJob == 1)
                {
                    var uniquePeople = from p in oHeader
                                       group p by new { p.STH_JOBNO } //or group by new {p.ID, p.Name, p.Whatever}
                                           into mygroup
                                           select mygroup.FirstOrDefault();
                    foreach (Service_Tech_Aloc_Hdr _lst in uniquePeople)
                    {

                        Service_JOB_HDR _jobHdr = new Service_JOB_HDR();
                        //_jobHdr = _custServiceDAL.GetServiceJobHeader(oHeader[0].STH_JOBNO, oHeader[0].STH_COM);
                        _jobHdr = _custServiceDAL.GetServiceJobHeader(_lst.STH_JOBNO, _lst.STH_COM);
                        if (_jobHdr != null)
                        {
                            List<Service_job_Det> _jobItems = new List<Service_job_Det>();
                            //_jobItems = _custServiceDAL.GetJobDetails(oHeader[0].STH_JOBNO, -777, oHeader[0].STH_COM);
                            _jobItems = _custServiceDAL.GetJobDetails(_lst.STH_JOBNO, -777, _lst.STH_COM);
                            if (_jobItems != null)
                            {
                                foreach (Service_job_Det _lstJob in _jobItems)
                                {
                                    _custServiceDAL.Update_Job_dates(_jobHdr.SJB_JOBNO, _lstJob.Jbd_jobline, DateTime.Now, DateTime.MinValue, DateTime.Now, DateTime.MinValue);
                                    _custServiceDAL.Update_JobDetailStage(_jobHdr.SJB_JOBNO, _lstJob.Jbd_jobline, 4);

                                    Service_Job_StageLog oLog = new Service_Job_StageLog();
                                    oLog.SJL_REQNO = "";
                                    oLog.SJL_JOBNO = _jobHdr.SJB_JOBNO;
                                    oLog.SJL_JOBLINE = _lstJob.Jbd_jobline;
                                    oLog.SJL_COM = _lstJob.Jbd_com;
                                    oLog.SJL_LOC = _lstJob.Jbd_loc;
                                    oLog.SJL_JOBSTAGE = 4;
                                    oLog.SJL_CRE_BY = _jobHdr.SJB_CRE_BY;
                                    oLog.SJL_CRE_DT = DateTime.Now;
                                    oLog.SJL_SESSION_ID = _jobHdr.SJB_SESSION_ID;
                                    oLog.SJL_INFSUP = 0;
                                    _custServiceDAL.Save_ServiceJobStageLog(oLog);
                                }
                            }
                        }
                    }
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        public Int32 Save_ServiceJobStageLog(Service_Job_StageLog oLog)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();

                _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }
        //public Int32 Save_ServiceJobStageLogList(List<Service_Job_StageLog> oLog)
        //{
        //    Int32 _effects = 0;
        //    try
        //    { // Nadeeka
        //        _custServiceDAL = new CustServiceDAL();
        //        _custServiceDAL.ConnectionOpen();
        //        foreach (Service_Job_StageLog _item in oLog)
        //        {
        //            _effects = _custServiceDAL.Save_ServiceJobStageLog(_item);
        //       }

        //        _custServiceDAL.TransactionCommit();
        //        _custServiceDAL.ConnectionClose();

        //        return _effects;
        //    }
        //    catch (Exception ex)
        //    {
        //        _custServiceDAL.TransactionRollback();
        //        _effects = -1;
        //        return _effects;
        //    }
        //}

        public Int32 Update_JobDetailStage(string JObNo, Int32 JobLine, decimal Stage)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();

                _effects = _custServiceDAL.Update_JobDetailStage(JObNo, JobLine, Stage);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                return _effects = -1;
            }
        }

        public DataTable GetAllocatedHistory(DateTime From, DateTime To, string com, string lOC, string Town, string Emp, out List<Service_TechAllocation> oItems)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetAllocatedHistory(From, To, com, lOC, Town, Emp, out oItems);
        }

        public List<Service_Tech_Aloc_Hdr> GetJobAllocations(string jobNo, Int32 lineNo, string com)
        {
            List<Service_Tech_Aloc_Hdr> oHeaderList = new List<Service_Tech_Aloc_Hdr>();
            _custServiceDAL = new CustServiceDAL();
            oHeaderList = _custServiceDAL.GetJobAllocations(jobNo, lineNo, com);
            if (oHeaderList.Count == 0)
            {
                oHeaderList = _custServiceDAL.GetJobAllocations_ByNewItem(jobNo, lineNo, com);
            }
            return oHeaderList;
        }

        //Tharaka 2014-10-04
        public Int32 GetLocationCapacity(string com, string lOC, string Type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetLocationCapacity(com, lOC, Type);
        }

        //Tharaka 2014-10-07
        public Int32 GetLocationCurrectSlotCount(string com, string lOC, string Terminal, DateTime From, DateTime To)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetLocationCurrectSlotCount(com, lOC, Terminal, From, To);
        }

        //shalika 07/10/2014
        public DataTable LoadTypes()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.LoadTypes();
        }

        public Int32 UpdateTaskType(string code, string desc, string type, int act, string userid)
        {
            Int32 result = 0;
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();

            result = _custServiceDAL.UpdateTaskType(code, desc, type, act, userid);

            _custServiceDAL.ConnectionClose();
            return result;
        }

        //shalika 07/10/2014
        public DataTable LoadCat()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.LoadCat();
        }

        //Tharaka 2014-10-09
        public Service_JOB_HDR GetServiceJobHeader(string jobNo, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceJobHeader(jobNo, com);
        }

        //Tharaka 2014-10-09
        public List<Service_job_Det> GetJobDetails(string jobNo, Int32 lineNo, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobDetails(jobNo, lineNo, com);
        }

        //Tharaka 2014-10-09
        public DataTable getServiceJobDefects(string jobNo, Int32 lineNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getServiceJobDefects(jobNo, lineNo);
        }

        //shalika 10-10-2014
        public Int32 Save_Allocated_Category(List<ServiceTaskLocations> lst_all_items, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                string _documentNo = "";
                _err = _documentNo;
                effect = _custServiceDAL.Save_Allocated_Category(lst_all_items);
                _custServiceDAL.TransactionCommit();
                _err = "Sucessfully Saved";
                effect = 1;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = "ERROR : " + err.Message.ToString();
                _custServiceDAL.TransactionRollback();
            }
            return effect;
        }

        //shalika 10/10/2014
        public DataTable bind_task_loc(string loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.bind_task_loc(loc);
        }

        public Int32 SaveUpdateUtilization(int active, string com, string loc, decimal capacity, string type, string usr)
        {
            Int32 result = 0;
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();

            result = _custServiceDAL.SaveUpdateUtilization(active, com, loc, capacity, type, usr);

            _custServiceDAL.ConnectionClose();
            return result;
        }

        //Tharaka 2014-10-13
        public DataTable getServiceJobEmployees(string jobNo, Int32 lineNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getServiceJobEmployees(jobNo, lineNo);
        }

        //Tharaka 2014-10-16
        public List<ComboBoxObject> getEstimateTypes(string TYPE)
        {
            List<ComboBoxObject> oEstimateTypes = new List<ComboBoxObject>();
            _custServiceDAL = new CustServiceDAL();
            DataTable dt = _custServiceDAL.getEstimateTypes(TYPE);

            if (dt.Rows.Count > 0)
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    ComboBoxObject oitem = new ComboBoxObject();
                    oitem.Text = dt.Rows[i]["ety_desc"].ToString();
                    oitem.Value = dt.Rows[i]["ety_tp"].ToString();
                    oEstimateTypes.Add(oitem);
                }
            }
            return oEstimateTypes;
        }

        //17/10/2014 Shalika
        public DataTable GetUtilitiDetails(string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetUtilitiDetails(com);
        }

        //17/10/2014 Shalika
        public DataTable CheckDefault(string com, string party_type, string loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.CheckDefault(com, party_type, loc);
        }

        //Tharaka 2014-10-23
        public Int32 SAVE_ServiceHeader(Service_Estimate_Header oHeader, MasterAutoNumber _ReqInsAuto, List<Service_Estimate_Item> oEstimateItems, out string GenEstimate)
        {
            Int32 _effects = 0;
            bool isInsert = true;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                int GenSeq = -99;

                int effect3 = _custServiceDAL.Update_Estimate_itemStatus(0, oHeader.ESH_ESTNO);

                //if (GenSeq == -99) { oHeader.ESH_SEQ_NO = getseq()}

                if (oHeader.ESH_SEQ_NO == -99)
                {
                    oHeader.ESH_SEQ_NO = _custServiceDAL.GetEstimateSeq();
                }

                string _ESTNO = string.Empty;
                if (oHeader.ESH_ESTNO == "" || oHeader.ESH_ESTNO == null)
                {
                    MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_ReqInsAuto.Aut_moduleid, _ReqInsAuto.Aut_direction, _ReqInsAuto.Aut_start_char, _ReqInsAuto.Aut_cate_tp, _ReqInsAuto.Aut_cate_cd, _ReqInsAuto.Aut_modify_dt, _ReqInsAuto.Aut_year);
                    // _reversInv.Aut_modify_dt = null;
                    // _reversInv.Aut_year = null;
                    // _ESTNO = _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _reversInv.Aut_direction = null;
                    _reversInv.Aut_modify_dt = null;
                    _ESTNO = _reversInv.Aut_cate_cd + "-" + _reversInv.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _inventoryDAL.UpdateAutoNumber(_reversInv);

                    oHeader.ESH_ESTNO = _ESTNO;
                    isInsert = true;
                    int resultHDr = _custServiceDAL.Save_estimateHeader(oHeader);
                    GenEstimate = _ESTNO;
                }
                else
                {
                    isInsert = false;
                    _ESTNO = oHeader.ESH_ESTNO;
                    _custServiceDAL.Save_estimateHeader(oHeader);
                    GenSeq = oHeader.ESH_SEQ_NO;
                    GenEstimate = oHeader.ESH_ESTNO;
                }

                //if (isInsert == false)
                //{
                //    Int32 result = _custServiceDAL.MoveToLogTables(oHeader.ESH_SEQ_NO);
                //}

                int _taxLine = 1;
                foreach (Service_Estimate_Item item in oEstimateItems)
                {
                    if (isInsert == true)
                    {
                        item.ESI_SEQ_NO = oHeader.ESH_SEQ_NO;
                    }
                    if (item.ESI_SEQ_NO == 0)
                    {
                        item.ESI_SEQ_NO = GenSeq;
                    }

                    item.ESI_ESTNO = _ESTNO;
                    _effects += _custServiceDAL.Save_estimateItem(item);

                    Int32 effect = _custServiceDAL.Update_Estimate_HEaderStatus(0, item.ESI_SEQ_NO, item.ESI_ITM_CD);

                    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                    _itmTax = _salesDAL.GetItemTax(oHeader.ESH_COM, item.ESI_ITM_CD, item.ESI_ITM_STUS, string.Empty, string.Empty);

                    foreach (MasterItemTax _one in _itmTax)
                    {
                        Service_Estimate_Tax _tax = new Service_Estimate_Tax();
                        if (isInsert == true)
                        {
                            _tax.ESV_SEQ_NO = oHeader.ESH_SEQ_NO;
                        }
                        else
                        {
                            _tax.ESV_SEQ_NO = item.ESI_SEQ_NO;
                        }
                        _tax.ESV_ESTNO = oHeader.ESH_ESTNO;
                        _tax.ESV_ITM_LINE = item.ESI_LINE;
                        _tax.ESV_LINE = _taxLine;
                        _tax.ESV_ITM_CD = item.ESI_ITM_CD;
                        _tax.ESV_TAX_TP = _one.Mict_tax_cd;
                        _tax.ESV_TAX_RT = _one.Mict_tax_rate;
                        _tax.ESV_TAX_AMT = item.ESI_TAX_AMT;
                        _tax.ESV_ACTIVE = 1;
                        Int32 result = _custServiceDAL.Save_estimateTAX(_tax);
                        _taxLine++;
                    }
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _effects = -1;
                GenEstimate = ex.Message;
                return _effects;
            }
        }

        //Tharaka 2014-10-09
        public Service_Estimate_Header GetServiceEstimateHeader(string EstimateNo, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceEstimateHeader(EstimateNo, com);
        }

        //Tharaka 2014-10-24
        public List<Service_Estimate_Item> GetServiceEstimateItems(string EstimateNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceEstimateItems(EstimateNo);
        }

        //Tharaka 2014-10-23
        public Int32 Update_Estimate_HEaderStatus(string status, string EstimateNo, string user, string com)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();

                _effects = _custServiceDAL.Update_Estimate_HEaderStatus(status, EstimateNo, user);

                if (status == "A")
                {
                    List<Service_Estimate_Item> oEstItems = _custServiceDAL.GetServiceEstimateItems(EstimateNo);
                    if (oEstItems != null && oEstItems.Count > 0)
                    {
                        Service_job_Det oJobDetail = new Service_job_Det();
                        List<Service_job_Det> oJobDetailsTemp = _custServiceDAL.GetJobDetails(oEstItems[0].ESI_JOBNO, oEstItems[0].ESI_JOBLINE, com);
                        if (oJobDetailsTemp != null && oJobDetailsTemp.Count > 0)
                        {
                            oJobDetail = oJobDetailsTemp[0];
                        }

                        //Service_Message oMessage = new Service_Message();
                        //oMessage.Sm_seq = 0;
                        //oMessage.Sm_jobno = oEstItems[0].ESI_JOBNO;
                        //oMessage.Sm_joboline = oEstItems[0].ESI_JOBLINE;
                        //oMessage.Sm_jobstage = oJobDetail.Jbd_stage;
                        //oMessage.Sm_msg_tmlt_id = 5;
                        //oMessage.Sm_status = 0;
                        //oMessage.Sm_com = com;
                        //oMessage.Sm_ref_num = EstimateNo;
                        //_effects = _custServiceDAL.SaveServiceMsg(oMessage);

                        _custServiceDAL.TransactionCommit();
                        _custServiceDAL.ConnectionClose();
                    }
                }

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-10-27
        public Int32 Update_Job_dates(string jobNo, Int32 lineNo, DateTime techStart, DateTime techEnd, DateTime techStartMAn, DateTime techEndMan)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();

                _effects = _custServiceDAL.Update_Job_dates(jobNo, lineNo, techStart, techEnd, techStartMAn, techEndMan);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-10-30
        public List<ComboBoxObject> GetServiceWIPMRNLocation(string Com, string Loc)
        {
            List<ComboBoxObject> oresult = new List<ComboBoxObject>();
            DataTable dtTemp = new DataTable();
            _custServiceDAL = new CustServiceDAL();
            dtTemp = _custServiceDAL.GetServiceWIPMRNLocation(Com, Loc);
            if (dtTemp.Rows.Count > 0)
            {
                for (int i = 0; i < dtTemp.Rows.Count; i++)
                {
                    ComboBoxObject oItem = new ComboBoxObject();
                    oItem.Text = dtTemp.Rows[i]["ML_LOC_DESC"].ToString();
                    oItem.Value = dtTemp.Rows[i]["SLL_LOC"].ToString();
                    oresult.Add(oItem);
                }
            }

            return oresult;
        }

        //Tharaka 2014-10-31
        public DataTable GetMRNItemsByJobline(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetMRNItemsByJobline(Com, job, jobline);
        }
        public DataTable checkAppMRNforJob(string _job)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.checkAppMRNforJob(_job);
        }

        //Tharaka 2014-11-04
        public Int32 Update_ReqHeaderStatus(string STATUS, string USER, string COM, string MRN)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();

                _effects = _custServiceDAL.Update_ReqHeaderStatus(STATUS, USER, COM, MRN);
               

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-10-31
        public List<Service_stockReturn> Get_ServiceWIP_StockReturnItems(string Com, string job, Int32 jobline, string Item, string LOC)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Get_ServiceWIP_StockReturnItems(Com, job, jobline, Item, LOC);
        }

        //Tharka 2014-11-08
        public Int32 Save_OldParts(List<Service_OldPartRemove> Items, out string err)
        {
            Int32 _effects = 0;
            err = string.Empty;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();

                foreach (Service_OldPartRemove item in Items)
                {
                    _effects += _custServiceDAL.Save_OldParts(item);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharka 2014-11-08
        public List<Service_OldPartRemove> Get_SCV_Oldparts(string jobNumber, Int32 lineNumber, string itemCode, string serial)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Get_SCV_Oldparts(jobNumber, lineNumber, itemCode, serial);
        }

        //17/10/2014 Shalika
        public DataTable GetCatogeryDetails(string code)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCatogeryDetails(code);
        }

        //10/11/2014 Shalika
        public DataTable GetSupplierDetails(string code, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSupplierDetails(code, com);
        }

        //Tharka 2014-11-08
        public Int32 Update_SCV_Oldpart_Refix(List<Service_OldPartRemove> Items, out string err)
        {
            Int32 _effects = 0;
            err = string.Empty;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();

                foreach (Service_OldPartRemove item in Items)
                {
                    if (item.SOP_OLDITMSER1 != "N/A")
                    {
                        item.SOP_REFIX = 1;
                    }
                    else
                    {
                        if (item.SOP_OLDITMQTY == 0)
                        {
                            item.SOP_REFIX = 1;
                        }
                    }

                    _effects += _custServiceDAL.Update_SCV_Oldpart_Refix(item);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-11-11
        public Int32 Save_SCV_TempIssueWithAOD_IN(List<Service_TempIssue> oMainList, MasterAutoNumber _ReqInsAuto, List<Tuple<String, String>> oAOD_Serials, out string err, InventoryHeader invHdr, string UserBIN, String jobNUm, Int32 jobLine)
        {
            err = string.Empty;
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                int SeqNum = _custServiceDAL.GetTempIssueSeq();

                string DocNum = string.Empty;
                MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_ReqInsAuto.Aut_moduleid, _ReqInsAuto.Aut_direction, _ReqInsAuto.Aut_start_char, _ReqInsAuto.Aut_cate_tp, _ReqInsAuto.Aut_cate_cd, _ReqInsAuto.Aut_modify_dt, _ReqInsAuto.Aut_year);

                //_reversInv.Aut_modify_dt = null;
                //_reversInv.Aut_year = null;

                DocNum = oMainList[0].STI_LOC + "-" + _reversInv.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_ReqInsAuto);

                foreach (Service_TempIssue item in oMainList)
                {
                    item.STI_SEQNO = SeqNum;
                    item.STI_DOC = DocNum;
                    _effects += _custServiceDAL.Save_scv_tempIssue(item);
                }

                string outDocNumner = string.Empty;

                foreach (Tuple<String, String> oAOD_Serial in oAOD_Serials)
                {
                    Int32 user_seq_num = _inventoryRepDAL.GET_SEQNUM_FOR_INVOICE("AOD", invHdr.Ith_com, oAOD_Serial.Item1, 1);

                    List<ReptPickSerials> oSerialsTemp = _inventoryDAL.Get_Int_Ser(oAOD_Serial.Item1);

                    List<ReptPickSerials> oSerials = oSerialsTemp.FindAll(x => x.Tus_itm_stus == "STDBY" && x.Tus_ser_1 == oAOD_Serial.Item2);

                    foreach (ReptPickSerials oSerialitems in oSerials)
                    {
                        oSerialitems.Tus_com = invHdr.Ith_com;
                        oSerialitems.Tus_loc = invHdr.Ith_loc;
                        oSerialitems.Tus_bin = UserBIN;
                        oSerialitems.Tus_cre_by = invHdr.Ith_cre_by;
                        oSerialitems.Tus_cre_dt = invHdr.Ith_cre_when;
                        oSerialitems.Tus_job_no = jobNUm;
                        oSerialitems.Tus_job_line = jobLine;
                        invHdr.Ith_oth_loc = oSerialitems.Tus_loc;
                        invHdr.Ith_oth_com = oSerialitems.Tus_com;
                    }

                    invHdr.Ith_oth_docno = oAOD_Serial.Item1;
                    invHdr.Ith_seq_no = 0;

                    MasterAutoNumber masterAutoNum = new MasterAutoNumber();
                    masterAutoNum.Aut_cate_cd = invHdr.Ith_loc;
                    masterAutoNum.Aut_cate_tp = "LOC";
                    masterAutoNum.Aut_direction = 1;
                    masterAutoNum.Aut_modify_dt = null;
                    masterAutoNum.Aut_moduleid = "AOD";
                    masterAutoNum.Aut_start_char = "AOD";
                    masterAutoNum.Aut_year = Convert.ToDateTime(invHdr.Ith_doc_date).Year;

                    _inventoryRepDAL = new ReptCommonDAL();
                    _inventoryRepDAL.ConnectionOpen();
                    _inventoryRepDAL.BeginTransaction();

                    InventoryBLL oInventoryBLL = new InventoryBLL();
                    Int32 result = oInventoryBLL.AODReceiptWithOutTR(_inventoryRepDAL, _inventoryDAL, _ScmCommonDAL, _generalDAL, invHdr, oSerials, null, masterAutoNum, out DocNum);
                    if (result == -1)
                    {

                        _custServiceDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        _effects = -1;
                        err = err + ", " + DocNum;
                        return _effects;
                    }

                    err = err + ", " + DocNum;
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();

                _ScmCommonDAL.TransactionCommit();
                _ScmCommonDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _effects = -1;
                err = ex.Message;
                return _effects;
            }
        }

        //Tharaka 2014-10-31
        public List<Service_TempIssue> Get_ServiceWIP_TempIssued_Items(string Com, string job, Int32 jobline, string Item, string LOC, string Type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Get_ServiceWIP_TempIssued_Items(Com, job, jobline, Item, LOC, Type);
        }

        //Tharaka 2014-11-11
        public Int32 Save_tempIssued_Return(List<Service_TempIssue> oMainList, MasterAutoNumber _ReqInsAuto, List<Tuple<Int32, Int32>> _IssueItemList)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                int SeqNum = _custServiceDAL.GetTempIssueSeq();

                string DocNum = string.Empty;
                MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_ReqInsAuto.Aut_moduleid, _ReqInsAuto.Aut_direction, _ReqInsAuto.Aut_start_char, _ReqInsAuto.Aut_cate_tp, _ReqInsAuto.Aut_cate_cd, _ReqInsAuto.Aut_modify_dt, _ReqInsAuto.Aut_year);
                DocNum = oMainList[0].STI_LOC + "-" + _reversInv.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_ReqInsAuto);

                foreach (Service_TempIssue item in oMainList)
                {
                    List<Service_TempIssue> Saveditem = _custServiceDAL.Get_ServiceWIP_TempIssued_Items_BY_SEQ(_IssueItemList[oMainList.IndexOf(item)].Item1);

                    //Service_TempIssue selectedItem = Saveditem.Find(x => x.STI_ISSUEITMCD == item.STI_ISSUEITMCD && x.STI_ISSUEITMSTUS == item.STI_ISSUEITMSTUS);
                    Service_TempIssue selectedItem = Saveditem.Find(x => x.STI_LINE == _IssueItemList[oMainList.IndexOf(item)].Item2);

                    item.STI_SEQNO = SeqNum;
                    item.STI_DOC = DocNum;

                    _effects += _custServiceDAL.Save_scv_tempIssue(item);

                    selectedItem.STI_REFDOCNO = DocNum;
                    selectedItem.STI_REFDOCLINE = item.STI_LINE;
                    selectedItem.STI_ISSUEITMQTY = selectedItem.STI_ISSUEITMQTY - item.STI_ISSUEITMQTY;

                    selectedItem.STI_CROSS_SEQNO = item.STI_SEQNO;
                    selectedItem.STI_CROSS_LINE = item.STI_LINE;
                    _effects += _custServiceDAL.UPDATE_TMP_ISSUE_RETURN(selectedItem.STI_ISSUEITMQTY, item.STI_DOC, item.STI_LINE, selectedItem.STI_SEQNO, selectedItem.STI_LINE, selectedItem.STI_CROSS_SEQNO, selectedItem.STI_CROSS_LINE, 1);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-11-12
        public List<Service_TempIssue> GET_TEMPISSUE_RETURNED_ITMS(string Com, string job, Int32 jobline, string Item, string LOC)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_TEMPISSUE_RETURNED_ITMS(Com, job, jobline, Item, LOC);
        }

        //Tharaka 2014-11-13
        public DataTable GetSupplierWarrantyClaimItems(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SUP_WRNT_CLM_REQ(Com, job, jobline);
        }

        //Tharaka 2014-11-14
        public Int32 Service_SupplierClaimRequest(List<Service_SupplierWarrantyClaim> oMainList, String user, string ComCode, String Loca, String SesstionID, out String errMSg)
        {
            Int32 _effects = 0;
            errMSg = string.Empty;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                List<Service_supp_claim_itm> supp_claim_itms = _custServiceDAL.GET_TEMPISSUE_RETURNED_ITMS(ComCode);

                foreach (Service_SupplierWarrantyClaim item in oMainList)
                {
                    int underwarranty = 0;
                    int overwarranty = 0;

                    if (item.JBD_WARR_STUS == 0)
                    {
                        overwarranty = 1;
                    }
                    else if (item.JBD_WARR_STUS == 1)
                    {
                        underwarranty = 1;
                    }
                    List<Service_supp_claim_itm> supplierDs = supp_claim_itms.FindAll(x => x.SSC_SUPP == item.JBD_SUPP_CD);//&& x.SSC_UNWARR_ALW == underwarranty && x.SSC_OVWARR_ALW == overwarranty && x.SSC_EXITM_ALW == item.JBD_ISEXTERNALITM);
                    if (supplierDs != null && supplierDs.Count > 0)
                    {
                        // 1. check external
                        // 2. Warranty Over and under DOTO need to change according to supplier warranty parameter ask from chamal and sanjeewa how to do
                        // 3. Check Brand, cat 1, cate 2

                        if (supplierDs.FindAll(x => x.SSC_BRND == item.MI_BRAND && x.SSC_CAT1 == item.MI_CATE_1 && x.SSC_CAT2 == item.MI_CATE_2).Count > 0)
                        {
                            Service_supp_claim_itm itemasd = supplierDs.Find(x => x.SSC_BRND == item.MI_BRAND && x.SSC_CAT1 == item.MI_CATE_1 && x.SSC_CAT2 == item.MI_CATE_2);
                            if (itemasd.SSC_EXITM_ALW == 0 && item.JBD_ISEXTERNALITM == 1)
                            {
                                _effects = -8;
                                return _effects;
                            }
                            if (itemasd.SSC_OVWARR_ALW == 0 && item.JBD_WARR_STUS == 0)
                            {
                                _effects = -9;
                                return _effects;
                            }
                            if (item.FROMTABLE != "PERIPHARAL")
                            {
                                _effects += _custServiceDAL.UPDATE_SCV_SUPP_WAR_REQ(item);
                            }
                            else
                            {
                                _effects = 1;
                            }
                        }
                        else if (supplierDs.FindAll(x => x.SSC_BRND == item.MI_BRAND && x.SSC_CAT1 == item.MI_CATE_1 && x.SSC_CAT2 == string.Empty).Count > 0)
                        {
                            Service_supp_claim_itm itemasd = supplierDs.Find(x => x.SSC_BRND == item.MI_BRAND && x.SSC_CAT1 == item.MI_CATE_1 && x.SSC_CAT2 == string.Empty);
                            if (itemasd.SSC_EXITM_ALW == 0 && item.JBD_ISEXTERNALITM == 1)
                            {
                                return _effects;
                            }
                            if (itemasd.SSC_OVWARR_ALW == 0 && item.JBD_WARR_STUS == 0)
                            {
                                return _effects;
                            }
                            if (item.FROMTABLE != "PERIPHARAL")
                            {
                                _effects += _custServiceDAL.UPDATE_SCV_SUPP_WAR_REQ(item);
                            }
                            else
                            {
                                _effects = 1;
                            }
                        }
                        else if (supplierDs.FindAll(x => x.SSC_BRND == item.MI_BRAND && x.SSC_CAT1 == string.Empty && x.SSC_CAT2 == string.Empty).Count > 0)
                        {
                            Service_supp_claim_itm itemasd = supplierDs.Find(x => x.SSC_BRND == item.MI_BRAND && x.SSC_CAT1 == string.Empty && x.SSC_CAT2 == string.Empty);
                            if (itemasd.SSC_EXITM_ALW == 0 && item.JBD_ISEXTERNALITM == 1)
                            {
                                return _effects;
                            }
                            if (itemasd.SSC_OVWARR_ALW == 0 && item.JBD_WARR_STUS == 0)
                            {
                                return _effects;
                            }
                            if (item.FROMTABLE != "PERIPHARAL")
                            {
                                item.User = user;
                                _effects += _custServiceDAL.UPDATE_SCV_SUPP_WAR_REQ(item);
                            }
                            else
                            {
                                _effects = 1;
                            }
                        }
                        if (_effects > 0)
                        {
                            if (item.FROMTABLE == "PERIPHARAL")
                            {
                                Service_OldPartRemove oldPart = new Service_OldPartRemove();
                                oldPart.SOP_DT = DateTime.Today.Date;
                                oldPart.SOP_COM = ComCode;
                                oldPart.SOP_JOBNO = item.JOB;
                                oldPart.SOP_JOBLINE = item.JOBLINE;
                                oldPart.SOP_OLDITMCD = item.ITEM;
                                oldPart.SOP_OLDITMSTUS = item.ItemStatus;
                                oldPart.SOP_OLDITMSER1 = item.Serial;
                                oldPart.SOP_OLDSERID = 0;
                                oldPart.SOP_OLDITMQTY = item.QTY;
                                oldPart.SOP_IS_SETTLED = 0;
                                oldPart.SOP_DOCLINENO = 0;
                                oldPart.SOP_REQWCN = 1;
                                oldPart.SOP_SENTWCN = 0;
                                oldPart.SOP_RECWNC = 0;
                                oldPart.SOP_TAKEWCN = 0;
                                oldPart.SOP_CRE_BY = user;
                                oldPart.SOP_CRE_DT = DateTime.Today.Date;
                                oldPart.SOP_REQWCN_DT = DateTime.Today.Date;
                                oldPart.SOP_REQWCN_SYSDT = DateTime.Today.Date;
                                oldPart.SOP_TAKEWCN_DT = DateTime.Today.Date;
                                oldPart.SOP_TAKEWCN_SYSDT = DateTime.Today.Date;
                                oldPart.SOP_PART_CD = item.PartID;
                                oldPart.SOP_OEM_NO = item.OEM;
                                oldPart.SOP_CASE_ID = item.CaseID;
                                oldPart.SOP_REFIX = 0;
                                oldPart.SOP_RMK = "Peripheral Request";
                                oldPart.SOP_TP = "P";
                                oldPart.SOP_REQWCN_BY = user;

                                _effects += _custServiceDAL.Save_OldParts(oldPart);
                            }

                            List<Service_job_Det> oScvDetail = _custServiceDAL.GetJobDetails(item.JOB, item.JOBLINE, ComCode);
                            Service_job_Det oselectedDetail = oScvDetail[0];

                            _effects = _custServiceDAL.Update_JobDetailStage(item.JOB, item.JOBLINE, Convert.ToDecimal(5.1));

                            Service_Job_StageLog oLog = new Service_Job_StageLog();
                            oLog.SJL_REQNO = "";
                            oLog.SJL_JOBNO = item.JOB;
                            oLog.SJL_JOBLINE = item.JOBLINE;
                            oLog.SJL_COM = ComCode;
                            oLog.SJL_LOC = Loca;
                            oLog.SJL_JOBSTAGE = oselectedDetail.Jbd_stage;
                            oLog.SJL_CRE_BY = user;
                            oLog.SJL_CRE_DT = DateTime.Now;
                            oLog.SJL_SESSION_ID = SesstionID;
                            oLog.SJL_INFSUP = 0;

                            _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                        }
                        else
                        {
                            errMSg = "This item need to setup in item category component and suplier item setup.\nItem is " + item.ITEM;
                            _effects = -6;
                            break;
                        }
                    }
                    else
                    {//item.JBD_SUPP_CD
                        errMSg = "Supplier Details not found.\nSupplier code is " + item.JBD_SUPP_CD;
                        _effects = -5;
                        break;
                    }
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                errMSg = ex.Message;
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-11-17
        public DataTable GetSupplierWarrantyClaimRequestedItems(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SUP_WRNT_CLM_Requested(Com, job, jobline);
        }
        // Nadeeka 25-01-2016
        public DataTable GET_SUP_WRNT_CLM_Requested_Serial(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SUP_WRNT_CLM_Requested_Serial(Com, job, jobline);
        }



        //Nadeeka 2015-07-16
        public DataTable get_Customer_Feedback(string Com, string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_Customer_Feedback(Com, job, jobline);
        }


        //Nadeeka 2015-07-16
        public DataTable get_ServiceAgreement(string _com, string _pc, DateTime _fromdate, DateTime _todate)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_ServiceAgreement(_com, _pc, _fromdate, _todate);
        }

        public DataTable get_ServiceIncentive(string _com, string _pc, DateTime _fromdate, DateTime _todate, string _reqcat)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_ServiceIncentive(_com, _pc, _fromdate, _todate, _reqcat);
        }

        //Tharaka 2014-11-18
        public DataTable getEstimateTypesDataTable(string TYPE)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getEstimateTypes(TYPE);
        }

        //Tharaka 2014-11-18
        public List<Service_WCN_Detail> GetSupWarntyClaimReveiedItems(string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSupWarntyClaimReveiedItems(job, jobline);
        }
        // Nadeeka 20-03-2015
        public List<Service_WCN_Detail> GetSupWarntyClaimAvb(string job, Int32 jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSupWarntyClaimAvb(job, jobline);
        }
        //Darshana 2014-11-19
        public List<Service_job_Det> GetPcJobDetails(string com, string pc, string JobNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetPcJobDetails(com, pc, JobNo);
        }

        //Tharaka 2014-11-19
        public Int32 Save_ServiceWIP_SuppWarrntyClainReceive(List<Service_WCN_Detail> oMainList, String user, string ComCode, string defLocation, string binCode, string sesstionID, out string docNum)
        {
            Int32 _effects = 0;
            try
            {
                docNum = string.Empty;
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                List<ReptPickSerials> reptPickSerialsList = new List<ReptPickSerials>();
                List<ReptPickSerials> reptPickSerialsListPlus = new List<ReptPickSerials>();

                foreach (Service_WCN_Detail item in oMainList)
                {
                    if (item.SWD_SEQ_NO != -1 && item.SWD_LINE != -1)
                    {
                        _effects += _custServiceDAL.Update_SCV_WCN_DET_Settled(1, item.SWD_SEQ_NO, item.SWD_LINE, item.SWD_JOBNO, item.SWD_JOBLINE);
                    }
                    else
                    {
                        if (item.SWD_ITM_STUS == "OLDPT")
                        {
                            Service_OldPartRemove oldPart = new Service_OldPartRemove();
                            oldPart.SOP_DT = DateTime.Today.Date;
                            oldPart.SOP_COM = ComCode;
                            oldPart.SOP_JOBNO = item.SWD_JOBNO;
                            oldPart.SOP_JOBLINE = item.SWD_JOBLINE;
                            oldPart.SOP_OLDITMCD = item.SWD_ITMCD;
                            oldPart.SOP_OLDITMSTUS = item.SWD_ITM_STUS;
                            oldPart.SOP_OLDITMSER1 = item.SWD_SER1;
                            //oldPart.SOP_OLDITMWARR       =
                            oldPart.SOP_OLDSERID = 0;
                            oldPart.SOP_OLDITMQTY = item.SWD_QTY;
                            //oldPart.SOP_DOC_NO           = "";
                            oldPart.SOP_IS_SETTLED = 1;
                            //oldPart.SOP_BASE_DOC         = "";
                            oldPart.SOP_DOCLINENO = 0;
                            //oldPart.SOP_REQUESTNO        = "";
                            oldPart.SOP_REQWCN = 1;
                            oldPart.SOP_SENTWCN = 1;
                            oldPart.SOP_RECWNC = 1;
                            oldPart.SOP_TAKEWCN = 1;
                            oldPart.SOP_CRE_BY = user;
                            oldPart.SOP_CRE_DT = DateTime.Today.Date;
                            oldPart.SOP_REQWCN_DT = DateTime.Today.Date;
                            oldPart.SOP_REQWCN_SYSDT = DateTime.Today.Date;
                            oldPart.SOP_TAKEWCN_DT = DateTime.Today.Date;
                            oldPart.SOP_TAKEWCN_SYSDT = DateTime.Today.Date;
                            oldPart.SOP_PART_CD = item.PartID;
                            oldPart.SOP_OEM_NO = item.OEM;
                            oldPart.SOP_CASE_ID = item.CaseID;
                            oldPart.SOP_REFIX = 0;
                            //oldPart.SOP_REFIX_DT         = "";
                            oldPart.SOP_RMK = "Received a new part";

                            _effects += _custServiceDAL.Save_OldParts(oldPart);
                        }
                        else if (item.SWD_ITM_STUS == "GOD")
                        {
                            _effects += _custServiceDAL.SAVE_SUPP_WRNTY_RECEIVE_ITM(ComCode, item.SWD_JOBNO, item.SWD_JOBLINE, item.SWD_SER1);

                            List<Service_job_Det> GetJobDetails = _custServiceDAL.GetJobDetails(item.SWD_JOBNO, item.SWD_JOBLINE, ComCode);
                            string itemCode = GetJobDetails[0].Jbd_itm_cd;
                            string ItemStatus = GetJobDetails[0].Jbd_itm_stus;
                            Int32 serialID = Convert.ToInt32(GetJobDetails[0].Jbd_ser_id);
                            string serial1 = GetJobDetails[0].Jbd_ser1;
                            string _serialNo2 = GetJobDetails[0].Jbd_ser2;

                            #region Stock Adjectment -

                            ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(ComCode, defLocation, null, itemCode, serialID);
                            reptPickSerialsList.Add(PickSerials);

                            #endregion Stock Adjectment -

                            #region Stock Adjectment +

                            int _itemSerializedStatus = 0;
                            MasterItem msitem = new MasterItem();
                            msitem = _inventoryDAL.GetItem(ComCode, item.SWD_ITMCD);
                            if (msitem.Mi_is_ser1 == 1)
                            {
                                _itemSerializedStatus = 1;
                            }
                            else
                            {
                                _itemSerializedStatus = 0;
                            }
                            if (msitem.Mi_is_ser1 == -1)
                            {
                                _itemSerializedStatus = -1;
                            }

                            if (msitem.Mi_is_ser2 == 1)
                            {
                                _itemSerializedStatus = 2;
                            }

                            if (msitem.Mi_is_ser3 == true)
                            {
                                _itemSerializedStatus = 3;
                            }

                            if (_itemSerializedStatus == 1 || _itemSerializedStatus == 2 || _itemSerializedStatus == 3)
                            {
                                #region Serialized

                                string _serialNo1 = item.SWD_SER1;
                                string _warrantyno = string.Empty;
                                int _serID = _inventoryDAL.IsExistInSerialMaster("", itemCode, _serialNo1);
                                InventorySerialMaster _serIDMst = new InventorySerialMaster();
                                _serIDMst = _inventoryDAL.GetSerialMasterDetailBySerialID(_serID);

                                DataTable _dtser1 = _inventoryDAL.CheckSerialAvailability("SERIAL1", itemCode, _serialNo1);
                                if (_dtser1 != null)
                                {
                                    if (_dtser1.Rows.Count > 0)
                                    {
                                        docNum = "ER";
                                        return _effects;
                                    }
                                }
                                _dtser1.Dispose();

                                //if ((_InventoryBLL.IsExistInTempPickSerial(ComCode, _userSeqNo.ToString(), itemCode, _serialNo1)) > 0)
                                //{
                                //    MessageBox.Show("Serial no 1 is already in use.", "Duplicating . . .", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                //    return;
                                //}

                                if (_itemSerializedStatus == 2)
                                {
                                    DataTable _dtser2 = _inventoryDAL.CheckSerialAvailability("SERIAL2", itemCode, _serialNo2);
                                    if (_dtser2 != null)
                                    {
                                        if (_dtser2.Rows.Count > 0)
                                        {
                                            docNum = "ER";
                                            return _effects;
                                        }
                                    }
                                    _dtser2.Dispose();

                                    //if ((CHNLSVC.Inventory.IsExistInTempPickSerial(BaseCls.GlbUserComCode, _userSeqNo.ToString(), "SER_2", _serialNo2)) > 0)
                                    //{
                                    //    MessageBox.Show("Serial no 2 is already in use.", "Duplicating . . .", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    //    return;
                                    //}
                                }

                                _warrantyno = _serIDMst.Irsm_warr_no;

                                //Write to the Picked items serial table.
                                ReptPickSerials _inputReptPickSerials = new ReptPickSerials();

                                #region Fill Pick Serial Object

                                _inputReptPickSerials.Tus_usrseq_no = 1;
                                _inputReptPickSerials.Tus_doc_no = "1";
                                _inputReptPickSerials.Tus_seq_no = 0;
                                _inputReptPickSerials.Tus_itm_line = 0;
                                _inputReptPickSerials.Tus_batch_line = 0;
                                _inputReptPickSerials.Tus_ser_line = 0;
                                _inputReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                                _inputReptPickSerials.Tus_com = ComCode;
                                _inputReptPickSerials.Tus_loc = defLocation;
                                _inputReptPickSerials.Tus_bin = binCode;
                                _inputReptPickSerials.Tus_itm_cd = itemCode;
                                _inputReptPickSerials.Tus_itm_stus = ItemStatus;

                                decimal costPrice = _inventoryDAL.GetLatestCost(ComCode, defLocation, item.SWD_ITMCD, item.SWD_ITM_STUS);
                                _inputReptPickSerials.Tus_unit_cost = costPrice;

                                _inputReptPickSerials.Tus_unit_price = 0;
                                _inputReptPickSerials.Tus_qty = 1;
                                if (_serID > 0)
                                { _inputReptPickSerials.Tus_ser_id = _serID; }
                                else
                                { _inputReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID(); }
                                _inputReptPickSerials.Tus_ser_1 = item.SWD_SER1;
                                _inputReptPickSerials.Tus_ser_2 = "N/A";
                                //_inputReptPickSerials.Tus_ser_3 = _serialNo3;
                                if (string.IsNullOrEmpty(_warrantyno)) _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + defLocation + "-P01-" + _inputReptPickSerials.Tus_ser_id.ToString();
                                _inputReptPickSerials.Tus_warr_no = _warrantyno;
                                _inputReptPickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                                _inputReptPickSerials.Tus_itm_model = msitem.Mi_model;
                                _inputReptPickSerials.Tus_itm_brand = msitem.Mi_brand;
                                //_inputReptPickSerials.Tus_itm_line =
                                _inputReptPickSerials.Tus_cre_by = user;
                                _inputReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                                _inputReptPickSerials.Tus_session_id = sesstionID;
                                _inputReptPickSerials.Tus_exist_supp = GetJobDetails[0].Jbd_supp_cd;
                                _inputReptPickSerials.Tus_orig_grncom = ComCode;
                                _inputReptPickSerials.Tus_exist_grncom = ComCode;
                                _inputReptPickSerials.Tus_exist_grndt = DateTime.Today.Date;

                                #endregion Fill Pick Serial Object

                                reptPickSerialsListPlus.Add(_inputReptPickSerials);

                                #endregion Serialized
                            }
                            else if (_itemSerializedStatus == 0)
                            {
                                #region Non-serialized

                                int _actualQty = Convert.ToInt32(item.SWD_QTY);
                                string _warrantyno = string.Empty;

                                for (int i = 0; i < _actualQty; i++)
                                {
                                    //Write to the Picked items serials table.
                                    ReptPickSerials _newReptPickSerials = new ReptPickSerials();

                                    #region Fill Pick Serial Object

                                    _newReptPickSerials.Tus_usrseq_no = 1;
                                    _newReptPickSerials.Tus_doc_no = "1";
                                    _newReptPickSerials.Tus_seq_no = 0;
                                    _newReptPickSerials.Tus_itm_line = 0;
                                    _newReptPickSerials.Tus_batch_line = 0;
                                    _newReptPickSerials.Tus_ser_line = 0;
                                    _newReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                                    _newReptPickSerials.Tus_com = ComCode;
                                    _newReptPickSerials.Tus_loc = defLocation;
                                    //_newReptPickSerials.Tus_bin = _binCode;
                                    _newReptPickSerials.Tus_itm_cd = itemCode;
                                    _newReptPickSerials.Tus_itm_stus = ItemStatus;
                                    //_newReptPickSerials.Tus_unit_cost = _unitCost;
                                    //_newReptPickSerials.Tus_unit_price = _unitPrice;
                                    _newReptPickSerials.Tus_qty = 1;
                                    _newReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID();
                                    _newReptPickSerials.Tus_ser_1 = "N/A";
                                    _newReptPickSerials.Tus_ser_2 = "N/A";
                                    _newReptPickSerials.Tus_ser_3 = "N/A";
                                    _newReptPickSerials.Tus_warr_no = _warrantyno;
                                    _newReptPickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                                    _newReptPickSerials.Tus_itm_model = msitem.Mi_model;
                                    _newReptPickSerials.Tus_itm_brand = msitem.Mi_brand;
                                    //_newReptPickSerials.Tus_itm_line = ItemLineNo;
                                    _newReptPickSerials.Tus_cre_by = user;
                                    _newReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                                    _newReptPickSerials.Tus_session_id = sesstionID;
                                    reptPickSerialsListPlus.Add(_newReptPickSerials);

                                    #endregion Fill Pick Serial Object
                                }

                                #endregion Non-serialized
                            }
                            else if (_itemSerializedStatus == -1) //(Non serialize decimal Item = -1))
                            {
                                #region Non-serialized Decimal Allow

                                decimal _actualQty = Convert.ToDecimal(item.SWD_QTY);

                                //Write to the Picked items serials table.
                                ReptPickSerials _decimalReptPickSerials = new ReptPickSerials();

                                #region Fill Temp Pick Serial List

                                _decimalReptPickSerials.Tus_usrseq_no = 1;
                                _decimalReptPickSerials.Tus_doc_no = "1";
                                _decimalReptPickSerials.Tus_seq_no = 0;
                                _decimalReptPickSerials.Tus_itm_line = 0;
                                _decimalReptPickSerials.Tus_batch_line = 0;
                                _decimalReptPickSerials.Tus_ser_line = 0;
                                _decimalReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                                _decimalReptPickSerials.Tus_com = ComCode;
                                _decimalReptPickSerials.Tus_loc = defLocation;
                                _decimalReptPickSerials.Tus_bin = binCode;
                                _decimalReptPickSerials.Tus_itm_cd = itemCode;
                                _decimalReptPickSerials.Tus_itm_stus = ItemStatus;
                                //_decimalReptPickSerials.Tus_unit_cost = _unitCost;
                                //_decimalReptPickSerials.Tus_unit_price = _unitPrice;
                                _decimalReptPickSerials.Tus_qty = _actualQty;
                                //_decimalReptPickSerials.Tus_ser_id = CHNLSVC.Inventory.GetSerialID();
                                _decimalReptPickSerials.Tus_ser_1 = "N/A";
                                _decimalReptPickSerials.Tus_ser_2 = "N/A";
                                _decimalReptPickSerials.Tus_ser_3 = "N/A";
                                _decimalReptPickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                                _decimalReptPickSerials.Tus_itm_model = msitem.Mi_model;
                                _decimalReptPickSerials.Tus_itm_brand = msitem.Mi_brand;
                                //_decimalReptPickSerials.Tus_itm_line = ItemLineNo;
                                _decimalReptPickSerials.Tus_cre_by = user;
                                _decimalReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                                _decimalReptPickSerials.Tus_session_id = sesstionID;
                                reptPickSerialsListPlus.Add(_decimalReptPickSerials);

                                #endregion Fill Temp Pick Serial List

                                #endregion Non-serialized Decimal Allow
                            }

                            #endregion Stock Adjectment +
                        }

                        List<Service_job_Det> oScvDetail = _custServiceDAL.GetJobDetails(item.SWD_JOBNO, item.SWD_JOBLINE, ComCode);
                        Service_job_Det oselectedDetail = oScvDetail[0];

                        _effects = _custServiceDAL.Update_JobDetailStage(item.SWD_JOBNO, item.SWD_JOBLINE, Convert.ToDecimal("6.1"));

                        Service_Job_StageLog oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = item.SWD_JOBNO;
                        oLog.SJL_JOBLINE = item.SWD_JOBLINE;
                        oLog.SJL_COM = ComCode;
                        oLog.SJL_LOC = defLocation;
                        oLog.SJL_JOBSTAGE = oselectedDetail.Jbd_stage;
                        oLog.SJL_CRE_BY = user;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = sesstionID;
                        oLog.SJL_INFSUP = 0;

                        _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    }
                }

                #region Header

                InventoryHeader inHeader = new InventoryHeader();
                DataTable dt_location = _inventoryDAL.Get_location_by_code(ComCode, defLocation);
                foreach (DataRow r in dt_location.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    inHeader.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        inHeader.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        inHeader.Ith_channel = string.Empty;
                    }
                }
                inHeader.Ith_acc_no = "";
                inHeader.Ith_anal_1 = "";
                inHeader.Ith_anal_2 = "";
                inHeader.Ith_anal_3 = "";
                inHeader.Ith_anal_4 = "";
                inHeader.Ith_anal_5 = "";
                inHeader.Ith_anal_6 = 0;
                inHeader.Ith_anal_7 = 0;
                inHeader.Ith_anal_8 = DateTime.MinValue;
                inHeader.Ith_anal_9 = DateTime.MinValue;
                inHeader.Ith_anal_10 = false;
                inHeader.Ith_anal_11 = false;
                inHeader.Ith_anal_12 = false;
                inHeader.Ith_bus_entity = "";
                inHeader.Ith_cate_tp = "";
                inHeader.Ith_com = ComCode;
                inHeader.Ith_com_docno = "";
                inHeader.Ith_cre_by = user;
                inHeader.Ith_cre_when = DateTime.Now;
                inHeader.Ith_del_add1 = "";
                inHeader.Ith_del_add2 = "";
                inHeader.Ith_del_code = "";
                inHeader.Ith_del_party = "";
                inHeader.Ith_del_town = "";

                inHeader.Ith_direct = false;

                inHeader.Ith_doc_date = DateTime.Now.Date;
                inHeader.Ith_doc_no = string.Empty;
                inHeader.Ith_doc_tp = "AOD";
                inHeader.Ith_doc_year = DateTime.Now.Date.Year;
                inHeader.Ith_entry_no = "";
                inHeader.Ith_entry_tp = "";
                inHeader.Ith_git_close = true;
                inHeader.Ith_git_close_date = DateTime.MinValue;
                inHeader.Ith_git_close_doc = string.Empty;
                inHeader.Ith_isprinted = false;
                inHeader.Ith_is_manual = false;
                inHeader.Ith_job_no = string.Empty;
                inHeader.Ith_loading_point = string.Empty;
                inHeader.Ith_loading_user = string.Empty;
                inHeader.Ith_loc = defLocation;
                inHeader.Ith_manual_ref = "";
                inHeader.Ith_mod_by = user;
                inHeader.Ith_mod_when = DateTime.Now;
                inHeader.Ith_noofcopies = 0;
                inHeader.Ith_oth_loc = string.Empty;
                inHeader.Ith_oth_docno = "N/A";
                inHeader.Ith_remarks = "";

                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013

                inHeader.Ith_session_id = sesstionID;
                inHeader.Ith_stus = "A";
                inHeader.Ith_sub_tp = "NOR";
                inHeader.Ith_vehi_no = string.Empty;

                #endregion Header

                #region AutoNumebr

                MasterAutoNumber masterAuto = new MasterAutoNumber();
                masterAuto.Aut_cate_cd = defLocation;
                masterAuto.Aut_cate_tp = "LOC";
                masterAuto.Aut_direction = null;
                masterAuto.Aut_modify_dt = null;
                masterAuto.Aut_moduleid = "AOD";
                masterAuto.Aut_number = 5;//what is Aut_number
                masterAuto.Aut_start_char = "AOD";
                masterAuto.Aut_year = DateTime.Today.Year;

                #endregion AutoNumebr

                string documntNo = "";
                Int32 result = 0;
                InventoryBLL _InventoryBLL = new InventoryBLL();
                docNum += "\nAdjectment minues doc numer:" + documntNo;
                result = _InventoryBLL.ADJMinus_Service(_inventoryDAL, _inventoryRepDAL, inHeader, reptPickSerialsList, null, masterAuto, out documntNo);

                InventoryHeader inHeaderPlus = new InventoryHeader();

                #region Fill InventoryHeader

                DataTable dt_locationPlus = _inventoryDAL.Get_location_by_code(ComCode, defLocation);
                foreach (DataRow r in dt_locationPlus.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    inHeaderPlus.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        inHeaderPlus.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        inHeaderPlus.Ith_channel = string.Empty;
                    }
                }
                inHeaderPlus.Ith_acc_no = "STOCK_ADJ";
                inHeaderPlus.Ith_anal_1 = "";
                inHeaderPlus.Ith_anal_2 = "";
                inHeaderPlus.Ith_anal_3 = "";
                inHeaderPlus.Ith_anal_4 = "";
                inHeaderPlus.Ith_anal_5 = "";
                inHeaderPlus.Ith_anal_6 = 0;
                inHeaderPlus.Ith_anal_7 = 0;
                inHeaderPlus.Ith_anal_8 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_9 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_10 = false;
                inHeaderPlus.Ith_anal_11 = false;
                inHeaderPlus.Ith_anal_12 = false;
                inHeaderPlus.Ith_bus_entity = "";
                inHeaderPlus.Ith_cate_tp = "";
                inHeaderPlus.Ith_com = ComCode;
                inHeaderPlus.Ith_com_docno = "";
                inHeaderPlus.Ith_cre_by = user;
                inHeaderPlus.Ith_cre_when = DateTime.Now;
                inHeaderPlus.Ith_del_add1 = "";
                inHeaderPlus.Ith_del_add2 = "";
                inHeaderPlus.Ith_del_code = "";
                inHeaderPlus.Ith_del_party = "";
                inHeaderPlus.Ith_del_town = "";
                inHeaderPlus.Ith_direct = true;
                inHeaderPlus.Ith_doc_date = DateTime.Today.Date;
                inHeaderPlus.Ith_doc_no = string.Empty;
                inHeaderPlus.Ith_doc_tp = "ADJ";
                inHeaderPlus.Ith_doc_year = DateTime.Today.Date.Year;
                inHeaderPlus.Ith_entry_no = "";
                inHeaderPlus.Ith_entry_tp = "";
                inHeaderPlus.Ith_git_close = true;
                inHeaderPlus.Ith_git_close_date = DateTime.MinValue;
                inHeaderPlus.Ith_git_close_doc = string.Empty;
                inHeaderPlus.Ith_isprinted = false;
                inHeaderPlus.Ith_is_manual = false;
                inHeaderPlus.Ith_job_no = string.Empty;
                inHeaderPlus.Ith_loading_point = string.Empty;
                inHeaderPlus.Ith_loading_user = string.Empty;
                inHeaderPlus.Ith_loc = defLocation;
                inHeaderPlus.Ith_manual_ref = string.Empty;
                inHeaderPlus.Ith_mod_by = user;
                inHeaderPlus.Ith_mod_when = DateTime.Now;
                inHeaderPlus.Ith_noofcopies = 0;
                inHeaderPlus.Ith_oth_loc = string.Empty;
                inHeaderPlus.Ith_oth_docno = "N/A";
                inHeaderPlus.Ith_remarks = "";
                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
                inHeaderPlus.Ith_session_id = sesstionID;
                inHeaderPlus.Ith_stus = "A";
                inHeaderPlus.Ith_sub_tp = "NOR";
                inHeaderPlus.Ith_vehi_no = string.Empty;

                #endregion Fill InventoryHeader

                MasterAutoNumber masterAutoPlus = new MasterAutoNumber();

                #region Fill MasterAutoNumber

                masterAutoPlus.Aut_cate_cd = defLocation;
                masterAutoPlus.Aut_cate_tp = "LOC";
                masterAutoPlus.Aut_direction = null;
                masterAutoPlus.Aut_modify_dt = null;
                masterAutoPlus.Aut_moduleid = "ADJ";
                masterAutoPlus.Aut_number = 5;//what is Aut_number
                masterAutoPlus.Aut_start_char = "ADJ";
                masterAutoPlus.Aut_year = null;

                #endregion Fill MasterAutoNumber

                docNum += "\nAdjectment plus doc numer:" + documntNo;
                result = _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, inHeaderPlus, reptPickSerialsListPlus, null, masterAutoPlus, out documntNo);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

                _ScmCommonDAL.TransactionCommit();
                _ScmCommonDAL.ConnectionClose();

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();

                if (docNum == "ER")
                {
                    _custServiceDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _ScmCommonDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _effects = -1;
                    return _effects;
                }
                else
                {
                    return _effects;
                }
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _effects = -1;
                docNum = ex.Message;
                return _effects;
            }
        }

        //Chamal 2014-11-19
        public Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>> GetWarrantyMaster(string _ser1, string _ser2, string _regno, string _warr, string _invoice, string _item, int _serid, out int _returnStatus, out string _returnMsg)
        {
            try
            {
                Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>> _result = new Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>>();
                List<InventorySerialMaster> _warrDet = null;
                List<InventorySubSerialMaster> _warrDetSub = null;
                _custServiceDAL = new CustServiceDAL();
                _salesDAL = new SalesDAL();
                _inventoryDAL = new InventoryDAL();

                int _rtnStatus = 0;
                string _rtnMsg = string.Empty;

                _warrDet = _custServiceDAL.GetWarrantyMaster(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
                if (_warrDet == null)
                {
                    //kapila 22/6/2017
                    _warrDet = _custServiceDAL.GetWarrantyMasterSCM2(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);

                    if (_warrDet == null)
                    {
                        // Nadeeka 10-10-2015
                        _warrDet = _custServiceDAL.GetWarrantyMaster_OW(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
                        _rtnStatus = 2;
                        if (_warrDet == null)
                        {
                            _rtnStatus = 1;
                            _rtnMsg = "There is no warranty details available.";
                            _returnMsg = _rtnMsg;
                            _returnStatus = _rtnStatus;
                            return null;
                        }
                    }
                }
                else if (_warrDet != null) // Add by akila 2017/07/31
                {
                    int _nonSerialCount = _warrDet.Where(x => (string.IsNullOrEmpty(x.Irsm_invoice_no) ? "N/A" : x.Irsm_invoice_no) == "N/A").ToList().Count();
                    if (_nonSerialCount > 0)
                    {
                        _warrDet = _custServiceDAL.GetWarrantyMasterSCM2(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
                        if (_warrDet == null)
                        {
                            // Nadeeka 10-10-2015
                            _warrDet = _custServiceDAL.GetWarrantyMaster_OW(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
                            _rtnStatus = 2;
                            if (_warrDet == null)
                            {
                                _rtnStatus = 1;
                                _rtnMsg = "There is no warranty details available.";
                                _returnMsg = _rtnMsg;
                                _returnStatus = _rtnStatus;
                                return null;
                            }
                        }
                    }
                }


                if (_warrDet.Count <= 0)
                {
                    _rtnStatus = 1;
                    _rtnMsg = "There is no warranty details available.";
                    _returnMsg = _rtnMsg;
                    _returnStatus = _rtnStatus;
                    return null;
                }
                else
                {
                    foreach (InventorySerialMaster _mst in _warrDet)
                    {
                        bool _custFound = false;
                        if (!string.IsNullOrEmpty(_mst.Irsm_cust_cd) && _mst.Irsm_cust_cd != "CASH")
                        {
                            //Check is SCM2 invoice
                            GroupBussinessEntity _custGrup = null;
                            _custGrup = _salesDAL.GetCustomerProfileByGrup(_mst.Irsm_cust_cd, "", "", "", "", "");
                            if (!string.IsNullOrEmpty(_custGrup.Mbg_cd))
                            {
                                _mst.Irsm_cust_cd = _custGrup.Mbg_cd;
                                _mst.Irsm_cust_prefix = _custGrup.Mbg_tit;
                                _mst.Irsm_cust_name = _custGrup.Mbg_name;
                                _custFound = true;
                            }
                        }

                        if (!string.IsNullOrEmpty(_mst.Irsm_invoice_no))
                        {
                            InvoiceHeader _invHdr = new InvoiceHeader();
                            _invHdr = _salesDAL.GetInvoiceHeader(_mst.Irsm_invoice_no);

                            if (_invHdr == null)
                            {
                                _invHdr = new InvoiceHeader();
                                DataTable _dt = _salesDAL.GetInvoiceHeaderSCM(_mst.Irsm_invoice_no);
                                if (_dt != null)
                                {
                                    if (_dt.Rows.Count > 0)
                                    {
                                        for (int i = 0; i < _dt.Rows.Count; i++)
                                        {
                                            _invHdr.Sah_cus_cd = _dt.Rows[i]["CUSTOMER_CODE"].ToString();
                                            _invHdr.Sah_pc = _dt.Rows[i]["PROFIT_CENTER_CODE"].ToString();
                                            _invHdr.Sah_com = _dt.Rows[i]["COMPANY_CODE"].ToString();
                                            break;
                                        }
                                    }
                                }
                            }

                            if (_invHdr != null)
                            {
                                if (_custFound == false)
                                {
                                    //Check is SCM2 invoice
                                    MasterBusinessEntity _cust = null;
                                    _cust = _salesDAL.GetAllCustomerProfileByCom(_invHdr.Sah_cus_cd, "", "", "", "", _invHdr.Sah_com, "C");
                                    if (!string.IsNullOrEmpty(_cust.Mbe_cd))
                                    {
                                        _mst.Irsm_cust_cd = _cust.Mbe_cd;
                                        _mst.Irsm_cust_prefix = _cust.MBE_TIT;
                                        _mst.Irsm_cust_name = _cust.Mbe_name;
                                    }
                                }
                            }
                        }



                        DataTable LocDes = _salesDAL.getLocDesc("", "", _mst.Irsm_loc);
                        foreach (DataRow row2 in LocDes.Rows)
                        {
                            _mst.Irsm_loc_desc = row2["descp"].ToString();
                        }

                        #region Get Supplier
                        _generalDAL = new GeneralDAL();
                        if (string.IsNullOrEmpty(_mst.Irsm_orig_supp) || _mst.Irsm_orig_supp.ToUpper() == "N/A")
                        {
                            DataTable _dtSupp = new DataTable();
                            _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 1);
                            if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                            {
                                for (int i = 0; i < _dtSupp.Rows.Count; i++)
                                {
                                    _mst.Irsm_orig_supp = _dtSupp.Rows[i]["EXPORTER"].ToString();
                                    break;
                                }
                            }
                            else
                            {
                                _dtSupp = new DataTable();
                                _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 4);
                                if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                {
                                    for (int j = 0; j < _dtSupp.Rows.Count; j++)
                                    {
                                        _mst.Irsm_orig_supp = _dtSupp.Rows[j]["EXPORTER"].ToString();
                                        break;
                                    }
                                }
                                else
                                {
                                    _dtSupp = new DataTable();
                                    _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 2);
                                    if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                    {
                                        for (int j = 0; j < _dtSupp.Rows.Count; j++)
                                        {
                                            _mst.Irsm_orig_supp = _dtSupp.Rows[j]["EXPORTER"].ToString();
                                            break;
                                        }
                                    }
                                    else
                                    {// Nadeeka 26-11-2015 
                                        _dtSupp = new DataTable();
                                        _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 3);
                                        if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                        {
                                            for (int j = 0; j < _dtSupp.Rows.Count; j++)
                                            {
                                                _mst.Irsm_orig_supp = _dtSupp.Rows[j]["EXPORTER"].ToString();
                                                break;
                                            }
                                        }
                                        else
                                        { // Nadeeka 26-11-2015 
                                            _dtSupp = new DataTable();
                                            _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 5);
                                            if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                            {
                                                for (int j = 0; j < _dtSupp.Rows.Count; j++)
                                                {
                                                    _mst.Irsm_orig_supp = _dtSupp.Rows[j]["EXPORTER"].ToString();
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion


                        if (!string.IsNullOrEmpty(_mst.Irsm_orig_supp))
                        {
                            GroupBussinessEntity _supp = null;
                            _supp = _salesDAL.GetCustomerProfileByGrup(_mst.Irsm_orig_supp, "", "", "", "", "");
                            if (_supp != null) _mst.Irsm_exist_supp = _supp.Mbg_name;
                        }

                        MasterItem _itm = _inventoryDAL.GetItem("", _mst.Irsm_itm_cd);
                        _mst.Irsm_anal_3 = _itm.Mi_itm_tp;
                        _mst.Irsm_anal_4 = _itm.Mi_cate_1;
                        if (_itm.Mi_is_scansub == true)
                        {
                            _warrDetSub = _custServiceDAL.GetWarrantyMasterSub(_mst.Irsm_warr_no, 0);
                            if (_warrDetSub != null)
                            {
                                foreach (InventorySubSerialMaster _subSer in _warrDetSub)
                                {
                                    MasterItem _itm0 = _inventoryDAL.GetItem("", _subSer.Irsms_itm_cd);
                                    _subSer.Irsms_warr_no = _itm0.Mi_longdesc;
                                }
                            }

                        }

                        _mst.PartNumber = _itm.Mi_part_no;
                        _mst.InssuranceRemark = _custServiceDAL.GET_OTH_WRR_REMARK(_mst.Irsm_itm_cd, _mst.Irsm_ser_1);

                        GroupBussinessEntity _custGrup1 = null;
                        _custGrup1 = _salesDAL.GetCustomerProfileByGrup(_mst.Irsm_cust_cd, "", "", "", "", "");
                        if (string.IsNullOrEmpty(_custGrup1.Mbg_cd))
                        {
                            _mst.Irsm_cust_cd = "CASH";
                        }

                    }
                }

                _returnStatus = _rtnStatus;
                _returnMsg = _rtnMsg;
                _result.Add(_warrDet, _warrDetSub);
                return _result;
            }
            catch (Exception ex)
            {
                _returnStatus = -1;
                _returnMsg = ex.Message.ToString();
                return null;
            }
        }

        //Tharaka 2014-11-21
        public List<Service_stockReturn> Get_ServiceWIP_ConsumableItems(string Com, string LOC, string Item)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Get_ServiceWIP_ConsumableItems(Com, LOC, Item);
        }

        // Nadeeka 
        public List<Service_job_Det> getSupplierClaimRequest(string _com, string _loc, string _supp, string _job, string _jobPart, string _jobserial, string _jobBrand, string _jobItem, DateTime _FromDate, DateTime _ToDate, string _cat, Int32 _sts)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getSupplierClaimRequest(_com, _loc, _supp, _job, _jobPart, _jobserial, _jobBrand, _jobItem, _FromDate, _ToDate, _cat, _sts);
        }


        // Nadeeka 
        public List<Service_job_Det> getSupplierClaimRequestMRN(string _com, string _job, Int32 _jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getSupplierClaimRequestMRN(_com, _job, _jobline);
        }

        // Nadeeka 
        public DataTable getWCNHeaderBrand(string _com, string _loc, DateTime _fdate, DateTime _todate, string _sts)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getWCNHeaderBrand(_com, _loc, _fdate, _todate, _sts);
        }
        // Nadeeka 
        public List<Service_WCN_Hdr> getWCNHeader_basedRef(string _com, string _ref)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getWCNHeader_basedRef(_com, _ref);
        }

        // Nadeeka 
        public DataTable getWCNTypes(string _type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getWCNTypes(_type);
        }
        // Nadeeka 
        public List<Service_JOB_HDR> getTransferJob(string _com, string _loc, DateTime _FromDate, DateTime _ToDate, string _job)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getTransferJob(_com, _loc, _FromDate, _ToDate, _job);
        }

        // Nadeeka 
        public List<Service_supp_claim_itm> getSupClaimItems(string _com, string _sup, string _claimsup)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getSupClaimItems(_com, _sup, _claimsup);
        }
        // Nadeeka 
        public List<SCV_SUPP_CLAIM_REC> getSupClaimAmt(Int32 _seq)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getSupClaimAmt(_seq);
        }
        // Nadeeka 
        public List<Service_job_Det> sp_getSupClaimDetails(string _claimNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_getSupClaimDetails(_claimNo);
        }

        // Nadeeka 
        public List<Service_WCN_Hdr> getWCNHeader(string _com, string _loc, DateTime _fdate, DateTime _todate, string _sts, string _job, string _order, string _docno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getWCNHeader(_com, _loc, _fdate, _todate, _sts, _job, _order, _docno);
        }

        // Nadeeka 
        public List<Service_WCN_Hdr> getWCNHeaderCheck(string _com, string _loc, DateTime _fdate, DateTime _todate, string _sts, string _job, string _doc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getWCNHeaderCheck(_com, _loc, _fdate, _todate, _sts, _job, _doc);
        }


        //THARAKA 2014-11-22
        public Int32 UpdateConsumableItemQty(List<Service_TempIssue> oMainList)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                foreach (Service_TempIssue item in oMainList)
                {
                    _effects = _custServiceDAL.UPDATE_SCV_TEMPISSUE_QTY(item);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-11-24
        public DataTable Get_service_location(string Com, string loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Get_service_location(Com, loc);
        }
        //Sanjeewa 2017-04-27
        public DataTable Get_last_outwarddoc(string _item, string _serial)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Get_last_outwarddoc(_item, _serial);
        }

        public DataTable GetServiceSupplierWarranty(string _com, string _loc, string _supp, string _cat1, string _cat2, string _cat3, string _model, string _brand, string _item, DateTime _fdate, DateTime _tdate, string _doctp)
        {
            _custServiceDAL = new CustServiceDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SupplierWarranty") == true) _custServiceDAL.ConnectionOpen_DR();
            return _custServiceDAL.GetServiceSupplierWarranty(_com, _loc, _supp, _cat1, _cat2, _cat3, _model, _brand, _item, _fdate, _tdate, _doctp);
        }
        public DataTable GetServiceSupplierWarrantyJob(string _com, string _job, Int32 _line)
        {
            _custServiceDAL = new CustServiceDAL();

            return _custServiceDAL.GetServiceSupplierWarrantyJob(_com, _job, _line);
        }


        // Nadeeka 16-10-2015
        public Int32 Update_Olppart_ReturnWarehouse_JobTrans(List<Tuple<Int32, String, String>> returnItemList, String user, string Com, string loc, string binCode, string sesstionID, string selectedLocation, List<Service_Job_Det_Sub> selectedITem, out string docNum, String jobNo, Int32 JObline)
        {
            docNum = string.Empty;
            Int32 _effects = 0;


            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                List<ReptPickSerials> reptPickSerialsListPlus = new List<ReptPickSerials>();
                List<ReptPickSerials> _serialList = new List<ReptPickSerials>();
                string _sop_seqNo = "";

                foreach (Tuple<Int32, String, String> item in returnItemList)
                {
                    if (item.Item2 != "SUB")
                    {
                        _effects = _custServiceDAL.Update_Olppart_ReturnWarehouse(1, item.Item1);
                    }
                    else
                    {
                        _effects = _custServiceDAL.UpdateJobSubItemRetrun(1, item.Item1, item.Item3);
                    }

                    if (_effects > 0)
                    {
                        #region Stock Adjectment +

                        //string binCodeLoc = _inventoryDAL.GetDefaultBinCode(Com, selectedLocation);
                        string binCodeLoc = _inventoryDAL.GetDefaultBinCode(Com, loc);   //kapila 21/8/2015
                        binCode = binCodeLoc;
                        _sop_seqNo = item.Item1.ToString();

                        Service_OldPartRemove OldPart; ;

                        if (item.Item2 != "SUB")
                        {
                            OldPart = _custServiceDAL.GET_SCV_OLDPART_BY_SEQ(item.Item1);
                        }
                        else
                        {
                            OldPart = new Service_OldPartRemove();
                            List<Service_Job_Det_Sub> otemp = _custServiceDAL.GetServiceJobDetailSubItemsBySerial(item.Item1, item.Item3);
                            OldPart.SOP_OLDITMCD = otemp[0].JBDS_ITM_CD;
                            OldPart.SOP_OLDITMSER1 = otemp[0].JBDS_SER1;
                            OldPart.SOP_OLDITMSTUS = otemp[0].JBDS_ITM_STUS;
                            OldPart.SOP_JOBNO = otemp[0].JBDS_JOBNO;
                            OldPart.SOP_JOBLINE = otemp[0].JBDS_JOBLINE;
                            OldPart.SOP_OLDITMSTUS = otemp[0].JBDS_ITM_STUS;
                            OldPart.SOP_OLDITMQTY = otemp[0].JBDS_QTY;

                            OldPart.SOP_OLDITMSTUS = "DEF";

                        }
                        int _itemSerializedStatus = 0;
                        MasterItem msitem = new MasterItem();
                        msitem = _inventoryDAL.GetItem(Com, OldPart.SOP_OLDITMCD);
                        if (msitem.Mi_is_ser1 == 1)
                            _itemSerializedStatus = 1;
                        else
                            _itemSerializedStatus = 0;
                        if (msitem.Mi_is_ser1 == -1)
                            _itemSerializedStatus = -1;

                        if (msitem.Mi_is_ser2 == 1)
                            _itemSerializedStatus = 2;

                        if (msitem.Mi_is_ser3 == true)
                            _itemSerializedStatus = 3;


                        if (_itemSerializedStatus == 1 || _itemSerializedStatus == 2 || _itemSerializedStatus == 3)
                        {
                            #region Serialized

                            string _serialNo1 = OldPart.SOP_OLDITMSER1;
                            string _warrantyno = string.Empty;
                            int _serID = _inventoryDAL.IsExistInSerialMaster("", OldPart.SOP_OLDITMCD, _serialNo1);
                            InventorySerialMaster _serIDMst = new InventorySerialMaster();
                            _serIDMst = _inventoryDAL.GetSerialMasterDetailBySerialID(_serID);

                            DataTable _dtser1 = _inventoryDAL.CheckSerialAvailability("SERIAL1", OldPart.SOP_OLDITMCD, _serialNo1);
                            if (_dtser1 != null)
                            {
                                if (_dtser1.Rows.Count > 0 && _dtser1.Select("INS_LOC <> '" + loc + "'").Length > 0)
                                {
                                    docNum = "Serial is available in the warehouse. " + _serialNo1;
                                    _effects = -1;
                                    return _effects;
                                }
                            }
                            _dtser1.Dispose();

                            _warrantyno = _serIDMst.Irsm_warr_no;

                            //Write to the Picked items serial table.
                            ReptPickSerials _inputReptPickSerials = new ReptPickSerials();

                            #region Fill Pick Serial Object

                            _inputReptPickSerials.Tus_usrseq_no = 1;
                            _inputReptPickSerials.Tus_doc_no = "1";
                            _inputReptPickSerials.Tus_seq_no = 0;
                            _inputReptPickSerials.Tus_itm_line = 0;
                            _inputReptPickSerials.Tus_batch_line = 0;
                            _inputReptPickSerials.Tus_ser_line = 0;
                            _inputReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                            _inputReptPickSerials.Tus_com = Com;
                            //_inputReptPickSerials.Tus_loc = selectedLocation;
                            _inputReptPickSerials.Tus_loc = loc;  //kapila 21/8/2015

                            _inputReptPickSerials.Tus_bin = binCode;
                            _inputReptPickSerials.Tus_itm_cd = OldPart.SOP_OLDITMCD;
                            _inputReptPickSerials.Tus_itm_stus = OldPart.SOP_OLDITMSTUS;

                            decimal costPrice = _inventoryDAL.GetLatestCost(Com, loc, OldPart.SOP_OLDITMCD, OldPart.SOP_OLDITMSTUS);
                            _inputReptPickSerials.Tus_unit_cost = costPrice;

                            _inputReptPickSerials.Tus_unit_price = 0;
                            _inputReptPickSerials.Tus_qty = 1;
                            if (_serID > 0)
                            { _inputReptPickSerials.Tus_ser_id = _serID; }
                            else
                            { _inputReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID(); }
                            _inputReptPickSerials.Tus_ser_1 = OldPart.SOP_OLDITMSER1;
                            _inputReptPickSerials.Tus_ser_2 = "N/A";
                            //_inputReptPickSerials.Tus_ser_3 = _serialNo3;
                            if (string.IsNullOrEmpty(_warrantyno)) _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + loc + "-P01-" + _inputReptPickSerials.Tus_ser_id.ToString();
                            _inputReptPickSerials.Tus_warr_no = _warrantyno;
                            _inputReptPickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                            _inputReptPickSerials.Tus_itm_model = msitem.Mi_model;
                            _inputReptPickSerials.Tus_itm_brand = msitem.Mi_brand;
                            //_inputReptPickSerials.Tus_itm_line =
                            _inputReptPickSerials.Tus_cre_by = user;
                            _inputReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                            _inputReptPickSerials.Tus_session_id = sesstionID;
                            // _inputReptPickSerials.Tus_exist_supp = GetJobDetails[0].JBD_SUPP_CD;
                            _inputReptPickSerials.Tus_orig_grncom = Com;
                            _inputReptPickSerials.Tus_exist_grncom = Com;
                            _inputReptPickSerials.Tus_exist_grndt = DateTime.Today.Date;
                            _inputReptPickSerials.Tus_job_no = jobNo;  //kapila OldPart.SOP_JOBNO;
                            _inputReptPickSerials.Tus_job_line = OldPart.SOP_JOBLINE;
                            _inputReptPickSerials.Tus_new_remarks = "AOD-OUT";
                            _inputReptPickSerials.Tus_orig_grndt = DateTime.Today.Date;
                            #endregion Fill Pick Serial Object

                            reptPickSerialsListPlus.Add(_inputReptPickSerials);

                            #endregion Serialized
                        }
                        else if (_itemSerializedStatus == 0)
                        {
                            #region Non-serialized

                            int _actualQty = Convert.ToInt32(OldPart.SOP_OLDITMQTY);
                            string _warrantyno = string.Empty;

                            for (int i = 0; i < _actualQty; i++)
                            {
                                //Write to the Picked items serials table.
                                ReptPickSerials _newReptPickSerials = new ReptPickSerials();

                                #region Fill Pick Serial Object

                                _newReptPickSerials.Tus_usrseq_no = 1;
                                _newReptPickSerials.Tus_doc_no = "1";
                                _newReptPickSerials.Tus_seq_no = 0;
                                _newReptPickSerials.Tus_itm_line = 0;
                                _newReptPickSerials.Tus_batch_line = 0;
                                _newReptPickSerials.Tus_ser_line = 0;
                                _newReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                                _newReptPickSerials.Tus_com = Com;
                                //_newReptPickSerials.Tus_loc = selectedLocation;
                                _newReptPickSerials.Tus_loc = loc;   //kapila 21/8/2015
                                _newReptPickSerials.Tus_bin = binCode;
                                _newReptPickSerials.Tus_itm_cd = OldPart.SOP_OLDITMCD;
                                _newReptPickSerials.Tus_itm_stus = OldPart.SOP_OLDITMSTUS;
                                //_newReptPickSerials.Tus_unit_cost = _unitCost;
                                //_newReptPickSerials.Tus_unit_price = _unitPrice;
                                _newReptPickSerials.Tus_qty = 1;
                                _newReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID();
                                _newReptPickSerials.Tus_ser_1 = "N/A";
                                _newReptPickSerials.Tus_ser_2 = "N/A";
                                _newReptPickSerials.Tus_ser_3 = "N/A";
                                _newReptPickSerials.Tus_warr_no = _warrantyno;
                                _newReptPickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                                _newReptPickSerials.Tus_itm_model = msitem.Mi_model;
                                _newReptPickSerials.Tus_itm_brand = msitem.Mi_brand;
                                //_newReptPickSerials.Tus_itm_line = ItemLineNo;
                                _newReptPickSerials.Tus_cre_by = user;
                                _newReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                                _newReptPickSerials.Tus_session_id = sesstionID;
                                _newReptPickSerials.Tus_job_no = jobNo; //kapila
                                //kapila 27/9/2015
                                _newReptPickSerials.Tus_orig_grncom = Com;
                                _newReptPickSerials.Tus_exist_grncom = Com;
                                _newReptPickSerials.Tus_exist_grndt = DateTime.Today.Date;
                                _newReptPickSerials.Tus_orig_grndt = DateTime.Today.Date;
                                reptPickSerialsListPlus.Add(_newReptPickSerials);

                                #endregion Fill Pick Serial Object
                            }

                            #endregion Non-serialized
                        }
                        else if (_itemSerializedStatus == -1) //(Non serialize decimal Item = -1))
                        {
                            #region Non-serialized Decimal Allow

                            decimal _actualQty = Convert.ToDecimal(OldPart.SOP_OLDITMQTY);

                            //Write to the Picked items serials table.
                            ReptPickSerials _decimalReptPickSerials = new ReptPickSerials();

                            #region Fill Temp Pick Serial List

                            _decimalReptPickSerials.Tus_usrseq_no = 1;
                            _decimalReptPickSerials.Tus_doc_no = "1";
                            _decimalReptPickSerials.Tus_seq_no = 0;
                            _decimalReptPickSerials.Tus_itm_line = 0;
                            _decimalReptPickSerials.Tus_batch_line = 0;
                            _decimalReptPickSerials.Tus_ser_line = 0;
                            _decimalReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                            _decimalReptPickSerials.Tus_com = Com;
                            //_decimalReptPickSerials.Tus_loc = selectedLocation;
                            _decimalReptPickSerials.Tus_loc = loc;    //kapila 21/8/2015
                            _decimalReptPickSerials.Tus_bin = binCode;
                            _decimalReptPickSerials.Tus_itm_cd = OldPart.SOP_OLDITMCD;
                            _decimalReptPickSerials.Tus_itm_stus = OldPart.SOP_OLDITMSTUS;
                            //_decimalReptPickSerials.Tus_unit_cost = _unitCost;
                            //_decimalReptPickSerials.Tus_unit_price = _unitPrice;
                            _decimalReptPickSerials.Tus_qty = _actualQty;
                            //_decimalReptPickSerials.Tus_ser_id = CHNLSVC.Inventory.GetSerialID();
                            _decimalReptPickSerials.Tus_ser_1 = "N/A";
                            _decimalReptPickSerials.Tus_ser_2 = "N/A";
                            _decimalReptPickSerials.Tus_ser_3 = "N/A";
                            _decimalReptPickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                            _decimalReptPickSerials.Tus_itm_model = msitem.Mi_model;
                            _decimalReptPickSerials.Tus_itm_brand = msitem.Mi_brand;
                            //_decimalReptPickSerials.Tus_itm_line = ItemLineNo;
                            _decimalReptPickSerials.Tus_cre_by = user;
                            _decimalReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                            _decimalReptPickSerials.Tus_session_id = sesstionID;
                            _decimalReptPickSerials.Tus_job_no = jobNo; //kapila
                            reptPickSerialsListPlus.Add(_decimalReptPickSerials);

                            #endregion Fill Temp Pick Serial List

                            #endregion Non-serialized Decimal Allow
                        }

                        #endregion Stock Adjectment +

                    }
                }

                InventoryHeader inHeaderPlus = new InventoryHeader();

                #region Fill InventoryHeader

                DataTable dt_locationPlus = _inventoryDAL.Get_location_by_code(Com, loc);
                foreach (DataRow r in dt_locationPlus.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    inHeaderPlus.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        inHeaderPlus.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        inHeaderPlus.Ith_channel = string.Empty;
                    }
                }
                inHeaderPlus.Ith_acc_no = "STOCK_ADJ";
                inHeaderPlus.Ith_anal_1 = "";
                inHeaderPlus.Ith_anal_2 = "";
                inHeaderPlus.Ith_anal_3 = "";
                inHeaderPlus.Ith_anal_4 = "";
                inHeaderPlus.Ith_anal_5 = "";
                inHeaderPlus.Ith_anal_6 = 0;
                inHeaderPlus.Ith_anal_7 = 0;
                inHeaderPlus.Ith_anal_8 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_9 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_10 = false;
                inHeaderPlus.Ith_anal_11 = false;
                inHeaderPlus.Ith_anal_12 = false;
                inHeaderPlus.Ith_bus_entity = "";
                inHeaderPlus.Ith_cate_tp = "SERVICE";
                inHeaderPlus.Ith_com = Com;
                inHeaderPlus.Ith_com_docno = "";
                inHeaderPlus.Ith_cre_by = user;
                inHeaderPlus.Ith_cre_when = DateTime.Now;
                inHeaderPlus.Ith_del_add1 = "";
                inHeaderPlus.Ith_del_add2 = "";
                inHeaderPlus.Ith_del_code = "";
                inHeaderPlus.Ith_del_party = "";
                inHeaderPlus.Ith_del_town = "";
                inHeaderPlus.Ith_direct = true;
                inHeaderPlus.Ith_doc_date = DateTime.Today.Date;
                inHeaderPlus.Ith_doc_no = string.Empty;
                inHeaderPlus.Ith_doc_tp = "ADJ";
                inHeaderPlus.Ith_doc_year = DateTime.Today.Date.Year;
                inHeaderPlus.Ith_entry_no = "T";
                inHeaderPlus.Ith_entry_tp = "OLD_PART";
                inHeaderPlus.Ith_git_close = true;
                inHeaderPlus.Ith_git_close_date = DateTime.MinValue;
                inHeaderPlus.Ith_git_close_doc = string.Empty;
                inHeaderPlus.Ith_isprinted = false;
                inHeaderPlus.Ith_is_manual = false;
                inHeaderPlus.Ith_loading_point = string.Empty;
                inHeaderPlus.Ith_loading_user = string.Empty;
                //inHeaderPlus.Ith_loc = selectedLocation;
                inHeaderPlus.Ith_loc = loc;  //kapila 21/8/2015
                inHeaderPlus.Ith_manual_ref = string.Empty;
                inHeaderPlus.Ith_mod_by = user;
                inHeaderPlus.Ith_mod_when = DateTime.Now;
                inHeaderPlus.Ith_noofcopies = 0;
                inHeaderPlus.Ith_oth_loc = loc;
                inHeaderPlus.Ith_oth_docno = "N/A";
                inHeaderPlus.Ith_remarks = "Old Part Transfer";
                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
                inHeaderPlus.Ith_session_id = sesstionID;
                inHeaderPlus.Ith_stus = "F";
                inHeaderPlus.Ith_sub_tp = "NOR";
                inHeaderPlus.Ith_vehi_no = string.Empty;
                inHeaderPlus.Ith_oth_com = Com;
                inHeaderPlus.Ith_job_no = jobNo;
                inHeaderPlus.Ith_sub_docno = _sop_seqNo;

                #endregion Fill InventoryHeader

                InventoryHeader _invAodOut = new InventoryHeader();

                #region Fill AOD Out InventoryHeader

                DataTable dt_AOD = _inventoryDAL.Get_location_by_code(Com, loc);
                foreach (DataRow r in dt_AOD.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    _invAodOut.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        _invAodOut.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        _invAodOut.Ith_channel = string.Empty;
                    }
                }
                _invAodOut.Ith_acc_no = "AOD";
                _invAodOut.Ith_anal_1 = "";
                _invAodOut.Ith_anal_2 = "";
                _invAodOut.Ith_anal_3 = "";
                _invAodOut.Ith_anal_4 = "";
                _invAodOut.Ith_anal_5 = "";
                _invAodOut.Ith_anal_6 = 0;
                _invAodOut.Ith_anal_7 = 0;
                _invAodOut.Ith_anal_8 = DateTime.MinValue;
                _invAodOut.Ith_anal_9 = DateTime.MinValue;
                _invAodOut.Ith_anal_10 = false;
                _invAodOut.Ith_anal_11 = false;
                _invAodOut.Ith_anal_12 = false;
                _invAodOut.Ith_bus_entity = "";
                _invAodOut.Ith_cate_tp = "";
                _invAodOut.Ith_com = Com;
                _invAodOut.Ith_com_docno = "";
                _invAodOut.Ith_cre_by = user;
                _invAodOut.Ith_cre_when = DateTime.Now;
                _invAodOut.Ith_del_add1 = "";
                _invAodOut.Ith_del_add2 = "";
                _invAodOut.Ith_del_code = "";
                _invAodOut.Ith_del_party = "";
                _invAodOut.Ith_del_town = "";
                _invAodOut.Ith_direct = false;
                _invAodOut.Ith_doc_date = DateTime.Today.Date;
                _invAodOut.Ith_doc_no = string.Empty;
                _invAodOut.Ith_doc_tp = "AOD";
                _invAodOut.Ith_doc_year = DateTime.Today.Date.Year;
                _invAodOut.Ith_entry_no = "T";
                _invAodOut.Ith_entry_tp = "";
                _invAodOut.Ith_git_close = true;
                _invAodOut.Ith_git_close_date = DateTime.MinValue;
                _invAodOut.Ith_git_close_doc = string.Empty;
                _invAodOut.Ith_isprinted = false;
                _invAodOut.Ith_is_manual = false;
                _invAodOut.Ith_loading_point = string.Empty;
                _invAodOut.Ith_loading_user = string.Empty;
                //_invAodOut.Ith_loc = selectedLocation;
                _invAodOut.Ith_loc = loc;  //kapila 21/8/2015
                _invAodOut.Ith_manual_ref = string.Empty;
                _invAodOut.Ith_mod_by = user;
                _invAodOut.Ith_mod_when = DateTime.Now;
                _invAodOut.Ith_noofcopies = 0;
                _invAodOut.Ith_oth_loc = selectedLocation;
                _invAodOut.Ith_oth_docno = "N/A";
                _invAodOut.Ith_remarks = "";
                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
                _invAodOut.Ith_session_id = sesstionID;
                _invAodOut.Ith_stus = "F";
                _invAodOut.Ith_sub_tp = "NOR";
                _invAodOut.Ith_vehi_no = string.Empty;
                _invAodOut.Ith_oth_com = Com;
                _invAodOut.Ith_job_no = jobNo;

                #endregion Fill InventoryHeader

                MasterAutoNumber masterAutoPlus = new MasterAutoNumber();
                MasterAutoNumber _inventoryAuto = new MasterAutoNumber();

                #region Fill MasterAutoNumber

                //masterAutoPlus.Aut_cate_cd = selectedLocation;
                masterAutoPlus.Aut_cate_cd = loc;   //kapila 21/8/2015
                masterAutoPlus.Aut_cate_tp = "LOC";
                masterAutoPlus.Aut_direction = null;
                masterAutoPlus.Aut_modify_dt = null;
                masterAutoPlus.Aut_moduleid = "ADJ";
                masterAutoPlus.Aut_number = 5;//what is Aut_number
                masterAutoPlus.Aut_start_char = "ADJ";
                masterAutoPlus.Aut_year = null;


                _inventoryAuto.Aut_moduleid = "AOD";
                _inventoryAuto.Aut_cate_cd = loc;
                _inventoryAuto.Aut_cate_tp = "LOC";
                _inventoryAuto.Aut_direction = 0;
                _inventoryAuto.Aut_modify_dt = null;
                _inventoryAuto.Aut_year = DateTime.Now.Year;

                #endregion Fill MasterAutoNumber

                InventoryBLL _InventoryBLL = new InventoryBLL();
                Int32 result = 0;
                Int32 _res = 0;
                Boolean _isAdjPlus = false;

                if (reptPickSerialsListPlus.Count > 0)
                {
                    result = _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, inHeaderPlus, reptPickSerialsListPlus, null, masterAutoPlus, out docNum);
                    _isAdjPlus = true;

                }

                if (selectedITem.Count > 0)
                {
                    foreach (Service_Job_Det_Sub item in selectedITem)
                    {
                        _effects = _custServiceDAL.UPDATE_SCV_JOB_DET_SUB_RPLC(item);
                    }
                }
                //------

                //---------
                // _custServiceDAL.TransactionCommit();
                //_custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

                _ScmCommonDAL.TransactionCommit();
                _ScmCommonDAL.ConnectionClose();

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();

                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();

                if (_isAdjPlus == true)
                {

                    _inventoryDAL = new InventoryDAL();
                    _inventoryDAL.ConnectionOpen();


                    List<InventorySerialN> _saveGRNSers = new List<InventorySerialN>();
                    _saveGRNSers = _InventoryBLL.GetIntSerList_new(docNum);

                    foreach (InventorySerialN q in _saveGRNSers)
                    {
                        ReptPickSerials _reptPickSerial_ = _inventoryDAL.Get_all_details_on_serialID(Com, loc, q.Ins_bin, q.Ins_itm_cd, q.Ins_ser_id);
                        _reptPickSerial_.Tus_usrseq_no = 1;

                        _reptPickSerial_.Tus_base_doc_no = "N/A";
                        _reptPickSerial_.Tus_base_itm_line = 0;
                        _reptPickSerial_.Tus_new_remarks = "AOD-OUT";       //kapila

                        MasterItem _msitem = _inventoryDAL.GetItem(Com, q.Ins_itm_cd);
                        _reptPickSerial_.Tus_itm_desc = _msitem.Mi_shortdesc;
                        _reptPickSerial_.Tus_itm_model = _msitem.Mi_model;
                        _serialList.Add(_reptPickSerial_);
                    }
                    _invAodOut.Ith_oth_docno = docNum;      //7/10/2015 kapila
                    //kapila 21/8/2015
                    //_res = _InventoryBLL.SaveAODOut_Service(_inventoryDAL, _inventoryRepDAL, _generalDAL, Com, null, _invAodOut, _inventoryAuto, _serialList, null, false, false);
                    string _message = string.Empty;
                    string _genSalesDoc = string.Empty;
                    string _invDoc = "";

                    _res = _InventoryBLL.SaveCommonOutWardEntry(_invAodOut.Ith_com, _invAodOut.Ith_pc, _invAodOut.Ith_com, null, _invAodOut, _inventoryAuto, null, null, _serialList, null, out _message, out _genSalesDoc, out _invDoc, false, false);

                    if (_res != 1)
                        _inventoryDAL.CancelInventoryDocument(docNum, sesstionID);

                }
                else
                    _res = 1;

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _res;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //THARAKA 2014-11-24  
        public Int32 Update_Olppart_ReturnWarehouse(List<Tuple<Int32, String, String>> returnItemList, String user, string Com, string loc, string binCode, string sesstionID, string selectedLocation, List<Service_Job_Det_Sub> selectedITem, out string docNum, String jobNo, Int32 JObline)
        {
            docNum = string.Empty;
            Int32 _effects = 0;

              FMS_InventoryDAL _FMSinventoryDAL = new FMS_InventoryDAL();
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                _fmsInventoryDal = new FMS_InventoryDAL();
                _fmsInventoryDal.ConnectionOpen();
                _fmsInventoryDal.BeginTransaction();

                 _salesDAL = new SalesDAL();
                    _salesDAL.ConnectionOpen();
                    _salesDAL.BeginTransaction();

                List<ReptPickSerials> reptPickSerialsListPlus = new List<ReptPickSerials>();
                List<ReptPickSerials> _serialList = new List<ReptPickSerials>();
                string _sop_seqNo = "";

                foreach (Tuple<Int32, String, String> item in returnItemList)
                {
                    if (item.Item2 != "SUB")
                    {
                        _effects = _custServiceDAL.Update_Olppart_ReturnWarehouse(1, item.Item1);
                    }
                    else
                    {
                        _effects = _custServiceDAL.UpdateJobSubItemRetrun(1, item.Item1, item.Item3);
                    }

                    if (_effects > 0)
                    {
                        #region Stock Adjectment +

                        //string binCodeLoc = _inventoryDAL.GetDefaultBinCode(Com, selectedLocation);
                        string binCodeLoc = _inventoryDAL.GetDefaultBinCode(Com, loc);   //kapila 21/8/2015
                        binCode = binCodeLoc;
                        _sop_seqNo = item.Item1.ToString();

                        Service_OldPartRemove OldPart; ;

                        if (item.Item2 != "SUB")
                        {
                            OldPart = _custServiceDAL.GET_SCV_OLDPART_BY_SEQ(item.Item1);
                        }
                        else
                        {
                            OldPart = new Service_OldPartRemove();
                            List<Service_Job_Det_Sub> otemp = _custServiceDAL.GetServiceJobDetailSubItemsBySerial(item.Item1, item.Item3);
                            OldPart.SOP_OLDITMCD = otemp[0].JBDS_ITM_CD;
                            OldPart.SOP_OLDITMSER1 = otemp[0].JBDS_SER1;
                            OldPart.SOP_OLDITMSTUS = otemp[0].JBDS_ITM_STUS;
                            OldPart.SOP_JOBNO = otemp[0].JBDS_JOBNO;
                            OldPart.SOP_JOBLINE = otemp[0].JBDS_JOBLINE;
                            OldPart.SOP_OLDITMSTUS = otemp[0].JBDS_ITM_STUS;
                            OldPart.SOP_OLDITMQTY = otemp[0].JBDS_QTY;

                            OldPart.SOP_OLDITMSTUS = "DEF";

                        }
                        int _itemSerializedStatus = 0;
                        MasterItem msitem = new MasterItem();
                        msitem = _inventoryDAL.GetItem(Com, OldPart.SOP_OLDITMCD);
                        if (msitem.Mi_is_ser1 == 1)
                            _itemSerializedStatus = 1;
                        else
                            _itemSerializedStatus = 0;
                        if (msitem.Mi_is_ser1 == -1)
                            _itemSerializedStatus = -1;

                        if (msitem.Mi_is_ser2 == 1)
                            _itemSerializedStatus = 2;

                        if (msitem.Mi_is_ser3 == true)
                            _itemSerializedStatus = 3;


                        if (_itemSerializedStatus == 1 || _itemSerializedStatus == 2 || _itemSerializedStatus == 3)
                        {
                            #region Serialized

                            string _serialNo1 = OldPart.SOP_OLDITMSER1;
                            string _warrantyno = string.Empty;
                            int _serID = _inventoryDAL.IsExistInSerialMaster("", OldPart.SOP_OLDITMCD, _serialNo1);
                            InventorySerialMaster _serIDMst = new InventorySerialMaster();
                            _serIDMst = _inventoryDAL.GetSerialMasterDetailBySerialID(_serID);

                            DataTable _dtser1 = _inventoryDAL.CheckSerialAvailability("SERIAL1", OldPart.SOP_OLDITMCD, _serialNo1);
                            if (_dtser1 != null)
                            {
                                if (_dtser1.Rows.Count > 0 && _dtser1.Select("INS_LOC <> '" + loc + "'").Length > 0)
                                {
                                    docNum = "Serial is available in the warehouse. " + _serialNo1;
                                    _effects = -1;
                                    return _effects;
                                }
                            }
                            _dtser1.Dispose();

                            _warrantyno = _serIDMst.Irsm_warr_no;

                            //Write to the Picked items serial table.
                            ReptPickSerials _inputReptPickSerials = new ReptPickSerials();

                            #region Fill Pick Serial Object

                            _inputReptPickSerials.Tus_usrseq_no = 1;
                            _inputReptPickSerials.Tus_doc_no = "1";
                            _inputReptPickSerials.Tus_seq_no = 0;
                            _inputReptPickSerials.Tus_itm_line = 0;
                            _inputReptPickSerials.Tus_batch_line = 0;
                            _inputReptPickSerials.Tus_ser_line = 0;
                            _inputReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                            _inputReptPickSerials.Tus_com = Com;
                            //_inputReptPickSerials.Tus_loc = selectedLocation;
                            _inputReptPickSerials.Tus_loc = loc;  //kapila 21/8/2015

                            _inputReptPickSerials.Tus_bin = binCode;
                            _inputReptPickSerials.Tus_itm_cd = OldPart.SOP_OLDITMCD;
                            _inputReptPickSerials.Tus_itm_stus = OldPart.SOP_OLDITMSTUS;

                            decimal costPrice = _inventoryDAL.GetLatestCost(Com, loc, OldPart.SOP_OLDITMCD, OldPart.SOP_OLDITMSTUS);
                            //kapila on 7/2/2017 req by Dilanda,Sanjeewa,Anistas,Duminda
                            if (OldPart.SOP_OLDITMSTUS == "EXCDF" || OldPart.SOP_OLDITMSTUS == "OLDPT" || OldPart.SOP_OLDITMSTUS == "DEF" || OldPart.SOP_OLDITMSTUS == "EXCLP")
                                _inputReptPickSerials.Tus_unit_cost = 0;
                            else
                                _inputReptPickSerials.Tus_unit_cost = costPrice;

                            _inputReptPickSerials.Tus_unit_price = 0;
                            _inputReptPickSerials.Tus_qty = 1;
                            if (_serID > 0)
                            { _inputReptPickSerials.Tus_ser_id = _serID; }
                            else
                            { _inputReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID(); }
                            _inputReptPickSerials.Tus_ser_1 = OldPart.SOP_OLDITMSER1;
                            _inputReptPickSerials.Tus_ser_2 = "N/A";
                            //_inputReptPickSerials.Tus_ser_3 = _serialNo3;
                            if (string.IsNullOrEmpty(_warrantyno)) _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + loc + "-P01-" + _inputReptPickSerials.Tus_ser_id.ToString();
                            _inputReptPickSerials.Tus_warr_no = _warrantyno;
                            _inputReptPickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                            _inputReptPickSerials.Tus_itm_model = msitem.Mi_model;
                            _inputReptPickSerials.Tus_itm_brand = msitem.Mi_brand;
                            //_inputReptPickSerials.Tus_itm_line =
                            _inputReptPickSerials.Tus_cre_by = user;
                            _inputReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                            _inputReptPickSerials.Tus_session_id = sesstionID;
                            // _inputReptPickSerials.Tus_exist_supp = GetJobDetails[0].JBD_SUPP_CD;
                            _inputReptPickSerials.Tus_orig_grncom = Com;
                            _inputReptPickSerials.Tus_exist_grncom = Com;
                            _inputReptPickSerials.Tus_exist_grndt = DateTime.Today.Date;
                            _inputReptPickSerials.Tus_job_no = jobNo;  //kapila OldPart.SOP_JOBNO;
                            _inputReptPickSerials.Tus_job_line = OldPart.SOP_JOBLINE;
                            _inputReptPickSerials.Tus_new_remarks = "AOD-OUT";
                            _inputReptPickSerials.Tus_orig_grndt = DateTime.Today.Date;
                            _inputReptPickSerials.Tus_exist_grndt = DateTime.Today.Date;
                            _inputReptPickSerials.Tus_orig_grndt = DateTime.Today.Date;
                            #endregion Fill Pick Serial Object

                            reptPickSerialsListPlus.Add(_inputReptPickSerials);

                            #endregion Serialized
                        }
                        else if (_itemSerializedStatus == 0)
                        {
                            #region Non-serialized

                            int _actualQty = Convert.ToInt32(OldPart.SOP_OLDITMQTY);
                            string _warrantyno = string.Empty;

                            for (int i = 0; i < _actualQty; i++)
                            {
                                //Write to the Picked items serials table.
                                ReptPickSerials _newReptPickSerials = new ReptPickSerials();

                                #region Fill Pick Serial Object

                                _newReptPickSerials.Tus_usrseq_no = 1;
                                _newReptPickSerials.Tus_doc_no = "1";
                                _newReptPickSerials.Tus_seq_no = 0;
                                _newReptPickSerials.Tus_itm_line = 0;
                                _newReptPickSerials.Tus_batch_line = 0;
                                _newReptPickSerials.Tus_ser_line = 0;
                                _newReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                                _newReptPickSerials.Tus_com = Com;
                                //_newReptPickSerials.Tus_loc = selectedLocation;
                                _newReptPickSerials.Tus_loc = loc;   //kapila 21/8/2015
                                _newReptPickSerials.Tus_bin = binCode;
                                _newReptPickSerials.Tus_itm_cd = OldPart.SOP_OLDITMCD;
                                _newReptPickSerials.Tus_itm_stus = OldPart.SOP_OLDITMSTUS;
                                //_newReptPickSerials.Tus_unit_cost = _unitCost;
                                //_newReptPickSerials.Tus_unit_price = _unitPrice;
                                _newReptPickSerials.Tus_qty = 1;
                                _newReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID();
                                _newReptPickSerials.Tus_ser_1 = "N/A";
                                _newReptPickSerials.Tus_ser_2 = "N/A";
                                _newReptPickSerials.Tus_ser_3 = "N/A";
                                _newReptPickSerials.Tus_warr_no = _warrantyno;
                                _newReptPickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                                _newReptPickSerials.Tus_itm_model = msitem.Mi_model;
                                _newReptPickSerials.Tus_itm_brand = msitem.Mi_brand;
                                //_newReptPickSerials.Tus_itm_line = ItemLineNo;
                                _newReptPickSerials.Tus_cre_by = user;
                                _newReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                                _newReptPickSerials.Tus_session_id = sesstionID;
                                _newReptPickSerials.Tus_job_no = jobNo; //kapila
                                //kapila 27/9/2015
                                _newReptPickSerials.Tus_orig_grncom = Com;
                                _newReptPickSerials.Tus_exist_grncom = Com;
                                _newReptPickSerials.Tus_exist_grndt = DateTime.Today.Date;
                                _newReptPickSerials.Tus_orig_grndt = DateTime.Today.Date;
                                reptPickSerialsListPlus.Add(_newReptPickSerials);

                                #endregion Fill Pick Serial Object
                            }

                            #endregion Non-serialized
                        }
                        else if (_itemSerializedStatus == -1) //(Non serialize decimal Item = -1))
                        {
                            #region Non-serialized Decimal Allow

                            decimal _actualQty = Convert.ToDecimal(OldPart.SOP_OLDITMQTY);

                            //Write to the Picked items serials table.
                            ReptPickSerials _decimalReptPickSerials = new ReptPickSerials();

                            #region Fill Temp Pick Serial List

                            _decimalReptPickSerials.Tus_usrseq_no = 1;
                            _decimalReptPickSerials.Tus_doc_no = "1";
                            _decimalReptPickSerials.Tus_seq_no = 0;
                            _decimalReptPickSerials.Tus_itm_line = 0;
                            _decimalReptPickSerials.Tus_batch_line = 0;
                            _decimalReptPickSerials.Tus_ser_line = 0;
                            _decimalReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                            _decimalReptPickSerials.Tus_com = Com;
                            //_decimalReptPickSerials.Tus_loc = selectedLocation;
                            _decimalReptPickSerials.Tus_loc = loc;    //kapila 21/8/2015
                            _decimalReptPickSerials.Tus_bin = binCode;
                            _decimalReptPickSerials.Tus_itm_cd = OldPart.SOP_OLDITMCD;
                            _decimalReptPickSerials.Tus_itm_stus = OldPart.SOP_OLDITMSTUS;
                            //_decimalReptPickSerials.Tus_unit_cost = _unitCost;
                            //_decimalReptPickSerials.Tus_unit_price = _unitPrice;
                            _decimalReptPickSerials.Tus_qty = _actualQty;
                            //_decimalReptPickSerials.Tus_ser_id = CHNLSVC.Inventory.GetSerialID();
                            _decimalReptPickSerials.Tus_ser_1 = "N/A";
                            _decimalReptPickSerials.Tus_ser_2 = "N/A";
                            _decimalReptPickSerials.Tus_ser_3 = "N/A";
                            _decimalReptPickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                            _decimalReptPickSerials.Tus_itm_model = msitem.Mi_model;
                            _decimalReptPickSerials.Tus_itm_brand = msitem.Mi_brand;
                            //_decimalReptPickSerials.Tus_itm_line = ItemLineNo;
                            _decimalReptPickSerials.Tus_cre_by = user;
                            _decimalReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                            _decimalReptPickSerials.Tus_session_id = sesstionID;
                            _decimalReptPickSerials.Tus_job_no = jobNo; //kapila
                            _decimalReptPickSerials.Tus_job_line = JObline;
                            _decimalReptPickSerials.Tus_exist_grndt = DateTime.Today.Date;
                            _decimalReptPickSerials.Tus_orig_grndt = DateTime.Today.Date;
                            reptPickSerialsListPlus.Add(_decimalReptPickSerials);

                            #endregion Fill Temp Pick Serial List

                            #endregion Non-serialized Decimal Allow
                        }

                        #endregion Stock Adjectment +

                    }
                }

                InventoryHeader inHeaderPlus = new InventoryHeader();

                #region Fill InventoryHeader

                DataTable dt_locationPlus = _inventoryDAL.Get_location_by_code(Com, loc);
                foreach (DataRow r in dt_locationPlus.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    inHeaderPlus.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        inHeaderPlus.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        inHeaderPlus.Ith_channel = string.Empty;
                    }
                }
                inHeaderPlus.Ith_acc_no = "STOCK_ADJ";
                inHeaderPlus.Ith_anal_1 = "";
                inHeaderPlus.Ith_anal_2 = "";
                inHeaderPlus.Ith_anal_3 = "";
                inHeaderPlus.Ith_anal_4 = "";
                inHeaderPlus.Ith_anal_5 = "";
                inHeaderPlus.Ith_anal_6 = 0;
                inHeaderPlus.Ith_anal_7 = 0;
                inHeaderPlus.Ith_anal_8 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_9 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_10 = false;
                inHeaderPlus.Ith_anal_11 = false;
                inHeaderPlus.Ith_anal_12 = false;
                inHeaderPlus.Ith_bus_entity = "";
                inHeaderPlus.Ith_cate_tp = "SERVICE";
                inHeaderPlus.Ith_com = Com;
                inHeaderPlus.Ith_com_docno = "";
                inHeaderPlus.Ith_cre_by = user;
                inHeaderPlus.Ith_cre_when = DateTime.Now;
                inHeaderPlus.Ith_del_add1 = "";
                inHeaderPlus.Ith_del_add2 = "";
                inHeaderPlus.Ith_del_code = "";
                inHeaderPlus.Ith_del_party = "";
                inHeaderPlus.Ith_del_town = "";
                inHeaderPlus.Ith_direct = true;
                inHeaderPlus.Ith_doc_date = DateTime.Today.Date;
                inHeaderPlus.Ith_doc_no = string.Empty;
                inHeaderPlus.Ith_doc_tp = "ADJ";
                inHeaderPlus.Ith_doc_year = DateTime.Today.Date.Year;
                inHeaderPlus.Ith_entry_no = "";
                inHeaderPlus.Ith_entry_tp = "OLD_PART";
                inHeaderPlus.Ith_git_close = true;
                inHeaderPlus.Ith_git_close_date = DateTime.MinValue;
                inHeaderPlus.Ith_git_close_doc = string.Empty;
                inHeaderPlus.Ith_isprinted = false;
                inHeaderPlus.Ith_is_manual = false;
                inHeaderPlus.Ith_loading_point = string.Empty;
                inHeaderPlus.Ith_loading_user = string.Empty;
                //inHeaderPlus.Ith_loc = selectedLocation;
                inHeaderPlus.Ith_loc = loc;  //kapila 21/8/2015
                inHeaderPlus.Ith_manual_ref = string.Empty;
                inHeaderPlus.Ith_mod_by = user;
                inHeaderPlus.Ith_mod_when = DateTime.Now;
                inHeaderPlus.Ith_noofcopies = 0;
                inHeaderPlus.Ith_oth_loc = loc;
                inHeaderPlus.Ith_oth_docno = "N/A";
                inHeaderPlus.Ith_remarks = "Old Part Transfer";
                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
                inHeaderPlus.Ith_session_id = sesstionID;
                inHeaderPlus.Ith_stus = "A";
                inHeaderPlus.Ith_sub_tp = "NOR";
                inHeaderPlus.Ith_vehi_no = string.Empty;
                inHeaderPlus.Ith_oth_com = Com;
                inHeaderPlus.Ith_job_no = jobNo;
                inHeaderPlus.Ith_sub_docno = _sop_seqNo;

                #endregion Fill InventoryHeader

                InventoryHeader _invAodOut = new InventoryHeader();

                #region Fill AOD Out InventoryHeader

                DataTable dt_AOD = _inventoryDAL.Get_location_by_code(Com, loc);
                foreach (DataRow r in dt_AOD.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    _invAodOut.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        _invAodOut.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        _invAodOut.Ith_channel = string.Empty;
                    }
                }
                _invAodOut.Ith_acc_no = "AOD";
                _invAodOut.Ith_anal_1 = "";
                _invAodOut.Ith_anal_2 = "";
                _invAodOut.Ith_anal_3 = "";
                _invAodOut.Ith_anal_4 = "";
                _invAodOut.Ith_anal_5 = "";
                _invAodOut.Ith_anal_6 = 0;
                _invAodOut.Ith_anal_7 = 0;
                _invAodOut.Ith_anal_8 = DateTime.MinValue;
                _invAodOut.Ith_anal_9 = DateTime.MinValue;
                _invAodOut.Ith_anal_10 = false;
                _invAodOut.Ith_anal_11 = false;
                _invAodOut.Ith_anal_12 = false;
                _invAodOut.Ith_bus_entity = "";
                _invAodOut.Ith_cate_tp = "";
                _invAodOut.Ith_com = Com;
                _invAodOut.Ith_com_docno = "";
                _invAodOut.Ith_cre_by = user;
                _invAodOut.Ith_cre_when = DateTime.Now;
                _invAodOut.Ith_del_add1 = "";
                _invAodOut.Ith_del_add2 = "";
                _invAodOut.Ith_del_code = "";
                _invAodOut.Ith_del_party = "";
                _invAodOut.Ith_del_town = "";
                _invAodOut.Ith_direct = false;
                _invAodOut.Ith_doc_date = DateTime.Today.Date;
                _invAodOut.Ith_doc_no = string.Empty;
                _invAodOut.Ith_doc_tp = "AOD";
                _invAodOut.Ith_doc_year = DateTime.Today.Date.Year;
                _invAodOut.Ith_entry_no = "";
                _invAodOut.Ith_entry_tp = "";
                _invAodOut.Ith_git_close = true;
                _invAodOut.Ith_git_close_date = DateTime.MinValue;
                _invAodOut.Ith_git_close_doc = string.Empty;
                _invAodOut.Ith_isprinted = false;
                _invAodOut.Ith_is_manual = false;
                _invAodOut.Ith_loading_point = string.Empty;
                _invAodOut.Ith_loading_user = string.Empty;
                //_invAodOut.Ith_loc = selectedLocation;
                _invAodOut.Ith_loc = loc;  //kapila 21/8/2015
                _invAodOut.Ith_manual_ref = string.Empty;
                _invAodOut.Ith_mod_by = user;
                _invAodOut.Ith_mod_when = DateTime.Now;
                _invAodOut.Ith_noofcopies = 0;
                _invAodOut.Ith_oth_loc = selectedLocation;
                _invAodOut.Ith_oth_docno = "N/A";
                _invAodOut.Ith_remarks = "";
                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
                _invAodOut.Ith_session_id = sesstionID;
                _invAodOut.Ith_stus = "A";
                _invAodOut.Ith_sub_tp = "NOR";
                _invAodOut.Ith_vehi_no = string.Empty;
                _invAodOut.Ith_oth_com = Com;
                _invAodOut.Ith_job_no = jobNo;

                #endregion Fill InventoryHeader

                MasterAutoNumber masterAutoPlus = new MasterAutoNumber();
                MasterAutoNumber _inventoryAuto = new MasterAutoNumber();

                #region Fill MasterAutoNumber

                //masterAutoPlus.Aut_cate_cd = selectedLocation;
                masterAutoPlus.Aut_cate_cd = loc;   //kapila 21/8/2015
                masterAutoPlus.Aut_cate_tp = "LOC";
                masterAutoPlus.Aut_direction = null;
                masterAutoPlus.Aut_modify_dt = null;
                masterAutoPlus.Aut_moduleid = "ADJ";
                masterAutoPlus.Aut_number = 5;//what is Aut_number
                masterAutoPlus.Aut_start_char = "ADJ";
                masterAutoPlus.Aut_year = null;


                _inventoryAuto.Aut_moduleid = "AOD";
                _inventoryAuto.Aut_cate_cd = loc;
                _inventoryAuto.Aut_cate_tp = "LOC";
                _inventoryAuto.Aut_direction = 0;
                _inventoryAuto.Aut_modify_dt = null;
                _inventoryAuto.Aut_year = DateTime.Now.Year;

                #endregion Fill MasterAutoNumber

                InventoryBLL _InventoryBLL = new InventoryBLL();
                Int32 result = 0;
                Int32 _res = 0;
                Boolean _isAdjPlus = false;

                if (reptPickSerialsListPlus.Count > 0)
                {
                    result = _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, inHeaderPlus, reptPickSerialsListPlus, null, masterAutoPlus, out docNum);
                    _isAdjPlus = true;

                }

                if (selectedITem.Count > 0)
                {
                    foreach (Service_Job_Det_Sub item in selectedITem)
                    {
                        _effects = _custServiceDAL.UPDATE_SCV_JOB_DET_SUB_RPLC(item);
                    }
                }
                //------

                //---------
                // _custServiceDAL.TransactionCommit();
                //_custServiceDAL.ConnectionClose();

                //_inventoryDAL.TransactionCommit();
                //_inventoryDAL.ConnectionClose();

                //_ScmCommonDAL.TransactionCommit();
                //_ScmCommonDAL.ConnectionClose();

                //_inventoryRepDAL.TransactionCommit();
                //_inventoryRepDAL.ConnectionClose();

                //_generalDAL.TransactionCommit();
                //_generalDAL.ConnectionClose();

                if (_isAdjPlus == true)
                {

                    _inventoryDAL = _inventoryDAL;
                    //_inventoryDAL.ConnectionOpen();

                    List<InventorySerialN> _saveGRNSers = new List<InventorySerialN>();
                   // _saveGRNSers = _InventoryBLL.GetIntSerList_new(docNum);
                    _saveGRNSers = _inventoryDAL.GetIntSerList_new(docNum);

                    foreach (InventorySerialN q in _saveGRNSers)
                    {
                        ReptPickSerials _reptPickSerial_ = _inventoryDAL.Get_all_details_on_serialID(Com, loc, q.Ins_bin, q.Ins_itm_cd, q.Ins_ser_id);
                        _reptPickSerial_.Tus_usrseq_no = 1;

                        _reptPickSerial_.Tus_base_doc_no = "N/A";
                        _reptPickSerial_.Tus_base_itm_line = 0;
                        _reptPickSerial_.Tus_new_remarks = "AOD-OUT";       //kapila

                        MasterItem _msitem = _inventoryDAL.GetItem(Com, q.Ins_itm_cd);
                        _reptPickSerial_.Tus_itm_cd = q.Ins_itm_cd;//Sanjeewa 2016-04-26 - Decimal items AOD out error
                        if (_msitem.Mi_is_ser1 == -1)
                        {
                            var qty = reptPickSerialsListPlus.Where(r => r.Tus_itm_cd == q.Ins_itm_cd && r.Tus_itm_stus == q.Ins_itm_stus).ToList();
                            if (qty != null)
                            {
                                _reptPickSerial_.Tus_qty = qty.First().Tus_qty;
                            }
                            else
                            { 
                                _reptPickSerial_.Tus_qty = 1; 
                            }

                           
                        }
                        else
                        {
                            _reptPickSerial_.Tus_qty = 1;
                        }
                        //_reptPickSerial_.Tus_qty = 1;
                        _reptPickSerial_.Tus_itm_stus = q.Ins_itm_stus;
                        _reptPickSerial_.Tus_job_no = jobNo;
                        _reptPickSerial_.Tus_job_line = JObline;
                        _reptPickSerial_.Tus_bin = binCode;
                        _reptPickSerial_.Tus_itm_desc = _msitem.Mi_shortdesc;
                        _reptPickSerial_.Tus_itm_model = _msitem.Mi_model;
                        _serialList.Add(_reptPickSerial_);
                    }
                    _invAodOut.Ith_oth_docno = docNum;      //7/10/2015 kapila
                    //kapila 21/8/2015
                    //_res = _InventoryBLL.SaveAODOut_Service(_inventoryDAL, _inventoryRepDAL, _generalDAL, Com, null, _invAodOut, _inventoryAuto, _serialList, null, false, false);
                    string _message = string.Empty;
                    string _genSalesDoc = string.Empty;
                    string _invDoc = "";

                    //_res = _InventoryBLL.SaveCommonOutWardEntry(_invAodOut.Ith_com, _invAodOut.Ith_pc, _invAodOut.Ith_com, null, _invAodOut, _inventoryAuto, null, null, _serialList, null, out _message, out _genSalesDoc, out _invDoc, false, false);
                    _res = _InventoryBLL.SaveCommonOutWardEntry_comm(_invAodOut.Ith_com, _invAodOut.Ith_pc, _invAodOut.Ith_com, null, _invAodOut, _inventoryAuto, null, null, _serialList, null, out _message, out _genSalesDoc, out _invDoc, false, false, null, true, _inventoryDAL, _custServiceDAL, _inventoryRepDAL, _generalDAL, _ScmCommonDAL, _fmsInventoryDal, _salesDAL);

                    if (_res != 1)
                    {
                        docNum = _message;
                        _inventoryDAL.CancelInventoryDocument(docNum, sesstionID);
                        _custServiceDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _ScmCommonDAL.TransactionRollback();
                        _inventoryRepDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();
                        _fmsInventoryDal.TransactionRollback();
                        _salesDAL.TransactionRollback();

                    }
                    else
                    {
                        _custServiceDAL.TransactionCommit();
                        _custServiceDAL.ConnectionClose();
                      
                         _inventoryDAL.TransactionCommit();
                        _inventoryDAL.ConnectionClose();
                      
                        
                          _inventoryRepDAL.TransactionCommit();
                        _inventoryRepDAL.ConnectionClose();
               
                         _ScmCommonDAL.TransactionCommit();
                        _ScmCommonDAL.ConnectionClose();
             
                         _generalDAL.TransactionCommit();
                        _generalDAL.ConnectionClose();

                        _fmsInventoryDal.TransactionCommit();
                        _fmsInventoryDal.ConnectionClose();
             
                        _salesDAL.TransactionCommit();
                        _salesDAL.ConnectionClose();
             

                    }

                }
                else
                {
                    _res = 1;
                    _custServiceDAL.TransactionCommit();
                    _custServiceDAL.ConnectionClose();

                     _inventoryDAL.TransactionCommit();
                        _inventoryDAL.ConnectionClose();
                      
                        
                          _inventoryRepDAL.TransactionCommit();
                        _inventoryRepDAL.ConnectionClose();
               
                         _ScmCommonDAL.TransactionCommit();
                        _ScmCommonDAL.ConnectionClose();
             
                         _generalDAL.TransactionCommit();
                        _generalDAL.ConnectionClose();

                        _fmsInventoryDal.TransactionCommit();
                        _fmsInventoryDal.ConnectionClose();
             
                        _salesDAL.TransactionCommit();
                        _salesDAL.ConnectionClose();
                }



                return _res;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _salesDAL.TransactionRollback();

                docNum = ex.Message;
                _effects = -1;
                return _effects;
            }
        }
        // Nadeeka 16-10-2015
        public Int32 Update_NewItems_ReturnWarehouse_JobTrans(List<Service_stockReturn> oNewItems, String user, string ComCode, string defLocation, string binCode, string sesstionID, string OtherLocation, DateTime closeDate, out string docNum)
        {
            docNum = string.Empty;
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                InventoryHeader inHeader = new InventoryHeader();
                InventoryHeader inHeaderPlus = new InventoryHeader();
                List<ReptPickSerials> reptPickSerialsList = new List<ReptPickSerials>();
                List<ReptPickSerials> reptPickSerialsListPlus = new List<ReptPickSerials>();

                InventoryBLL _InventoryBLL = new InventoryBLL();

                foreach (Service_stockReturn item in oNewItems)
                {
                    string itemCode = item.ITEM_CODE;
                    decimal costPrice = 0;
                    #region Stock Adjectment -

                    if ((!string.IsNullOrEmpty(item.SERIAL_ID)) && (item.SERIAL_ID != "N/A"))
                    {
                        int serialID = Convert.ToInt32(item.SERIAL_ID);
                        ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(ComCode, defLocation, null, itemCode, serialID);
                        PickSerials.Tus_job_no = item.JOB_NO;
                        PickSerials.Tus_job_line = item.JOB_LINE;

                        reptPickSerialsList.Add(PickSerials);
                    }
                    else
                    {
                        MasterItem msitem = new MasterItem();
                        msitem = _inventoryDAL.GetItem(ComCode, itemCode);

                        ReptPickSerials PickSerials = new ReptPickSerials();
                        PickSerials.Tus_usrseq_no = 1;
                        PickSerials.Tus_doc_no = "1";
                        PickSerials.Tus_seq_no = 0;
                        PickSerials.Tus_itm_line = 0;
                        PickSerials.Tus_batch_line = 0;
                        PickSerials.Tus_ser_line = 0;
                        PickSerials.Tus_doc_dt = DateTime.Now.Date;
                        PickSerials.Tus_com = ComCode;
                        PickSerials.Tus_loc = defLocation;
                        PickSerials.Tus_bin = binCode;
                        PickSerials.Tus_itm_cd = itemCode;
                        PickSerials.Tus_itm_stus = item.STATUS_CODE;

                        costPrice = _inventoryDAL.GetLatestCost(ComCode, defLocation, item.ITEM_CODE, item.STATUS_CODE);
                        PickSerials.Tus_unit_cost = costPrice;
                        PickSerials.Tus_unit_price = 0;
                        PickSerials.Tus_qty = item.QTY;
                        PickSerials.Tus_ser_id = 0;
                        PickSerials.Tus_ser_1 = "N/A";
                        PickSerials.Tus_ser_2 = "N/A";
                        //_inputReptPickSerials.Tus_ser_3 = _serialNo3;
                        //if (string.IsNullOrEmpty(_warrantyno))
                        //    _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + defLocation + "-P01-" + _inputReptPickSerials.Tus_ser_id.ToString();
                        PickSerials.Tus_warr_no = "N/A";
                        PickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                        PickSerials.Tus_itm_model = msitem.Mi_model;
                        PickSerials.Tus_itm_brand = msitem.Mi_brand;
                        //PickSerials.Tus_itm_line =
                        PickSerials.Tus_cre_by = user;
                        PickSerials.Tus_cre_dt = DateTime.Now.Date;
                        PickSerials.Tus_session_id = sesstionID;
                        //PickSerials.Tus_exist_supp = GetJobDetails[0].JBD_SUPP_CD;
                        PickSerials.Tus_orig_grncom = ComCode;
                        PickSerials.Tus_exist_grncom = ComCode;
                        PickSerials.Tus_exist_grndt = DateTime.Today.Date;
                        PickSerials.Tus_job_no = item.JOB_NO;
                        PickSerials.Tus_job_line = item.JOB_LINE;
                        reptPickSerialsList.Add(PickSerials);
                    }

                    #endregion Stock Adjectment -

                    #region Stock Adjectment +

                    string binCodeLoc = _inventoryDAL.GetDefaultBinCode(ComCode, OtherLocation);
                    //binCode = binCodeLoc; commented by akila 2017/08/09

                    //Service_OldPartRemove OldPart = _custServiceDAL.GET_SCV_OLDPART_BY_SEQ(itemcode);

                    int _itemSerializedStatus = 0;
                    MasterItem msitemPlus = new MasterItem();
                    msitemPlus = _inventoryDAL.GetItem(ComCode, itemCode);
                    if (msitemPlus.Mi_is_ser1 == 1)
                    {
                        _itemSerializedStatus = 1;
                    }
                    else
                    {
                        _itemSerializedStatus = 0;
                    }
                    if (msitemPlus.Mi_is_ser1 == -1)
                    {
                        _itemSerializedStatus = -1;
                    }

                    if (msitemPlus.Mi_is_ser2 > 0)
                    {
                        _itemSerializedStatus = 2;
                    }

                    if (msitemPlus.Mi_is_ser3 == true)
                    {
                        _itemSerializedStatus = 3;
                    }

                    if (_itemSerializedStatus == 1 || _itemSerializedStatus == 2 || _itemSerializedStatus == 3)
                    {
                        #region Serialized

                        string _serialNo1 = item.SERIAL_NO;
                        string _warrantyno = string.Empty;
                        int _serID = _inventoryDAL.IsExistInSerialMaster("", itemCode, _serialNo1);
                        InventorySerialMaster _serIDMst = new InventorySerialMaster();
                        _serIDMst = _inventoryDAL.GetSerialMasterDetailBySerialID(_serID);

                        DataTable _dtser1 = _inventoryDAL.CheckSerialAvailabilityWithLocation("SERIAL1", itemCode, _serialNo1, defLocation);
                        if (_dtser1 != null)
                        {
                            if (_dtser1.Rows.Count > 0)
                            {
                                _effects = -1;
                                docNum = "ER";
                                return _effects;
                            }
                        }
                        _dtser1.Dispose();

                        _warrantyno = _serIDMst.Irsm_warr_no;

                        //Write to the Picked items serial table.
                        ReptPickSerials _inputReptPickSerials = new ReptPickSerials();

                        #region Fill Pick Serial Object

                        _inputReptPickSerials.Tus_usrseq_no = 1;
                        _inputReptPickSerials.Tus_doc_no = "1";
                        _inputReptPickSerials.Tus_seq_no = 0;
                        _inputReptPickSerials.Tus_itm_line = 0;
                        _inputReptPickSerials.Tus_batch_line = 0;
                        _inputReptPickSerials.Tus_ser_line = 0;
                        _inputReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                        _inputReptPickSerials.Tus_com = ComCode;
                        _inputReptPickSerials.Tus_loc = OtherLocation;

                        _inputReptPickSerials.Tus_bin = binCodeLoc;
                        //_inputReptPickSerials.Tus_bin = binCode;
                        _inputReptPickSerials.Tus_itm_cd = item.ITEM_CODE;
                        _inputReptPickSerials.Tus_itm_stus = item.STATUS_CODE;

                        costPrice = _inventoryDAL.GetLatestCost(ComCode, defLocation, item.ITEM_CODE, item.STATUS_CODE);
                        _inputReptPickSerials.Tus_unit_cost = costPrice;

                        _inputReptPickSerials.Tus_unit_price = 0;
                        _inputReptPickSerials.Tus_qty = 1;
                        if (_serID > 0)
                        { _inputReptPickSerials.Tus_ser_id = _serID; }
                        else
                        { _inputReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID(); }
                        _inputReptPickSerials.Tus_ser_1 = item.SERIAL_NO;
                        _inputReptPickSerials.Tus_ser_2 = "N/A";
                        //_inputReptPickSerials.Tus_ser_3 = _serialNo3;
                        if (string.IsNullOrEmpty(_warrantyno)) _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + defLocation + "-P01-" + _inputReptPickSerials.Tus_ser_id.ToString();
                        _inputReptPickSerials.Tus_warr_no = _warrantyno;
                        _inputReptPickSerials.Tus_itm_desc = msitemPlus.Mi_longdesc;
                        _inputReptPickSerials.Tus_itm_model = msitemPlus.Mi_model;
                        _inputReptPickSerials.Tus_itm_brand = msitemPlus.Mi_brand;

                        _inputReptPickSerials.Tus_job_no = item.JOB_NO;
                        _inputReptPickSerials.Tus_job_line = item.JOB_LINE;

                        _inputReptPickSerials.Tus_cre_by = user;
                        _inputReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                        _inputReptPickSerials.Tus_session_id = sesstionID;
                        // _inputReptPickSerials.Tus_exist_supp = GetJobDetails[0].JBD_SUPP_CD;
                        _inputReptPickSerials.Tus_orig_grncom = ComCode;
                        _inputReptPickSerials.Tus_exist_grncom = ComCode;
                        _inputReptPickSerials.Tus_exist_grndt = DateTime.Today.Date;

                        #endregion Fill Pick Serial Object

                        reptPickSerialsListPlus.Add(_inputReptPickSerials);

                        #endregion Serialized
                    }
                    else if (_itemSerializedStatus == 0)
                    {
                        #region Non-serialized

                        int _actualQty = Convert.ToInt32(item.QTY);
                        string _warrantyno = string.Empty;

                        for (int i = 0; i < _actualQty; i++)
                        {
                            //Write to the Picked items serials table.
                            ReptPickSerials _newReptPickSerials = new ReptPickSerials();

                            #region Fill Pick Serial Object

                            _newReptPickSerials.Tus_usrseq_no = 1;
                            _newReptPickSerials.Tus_doc_no = "1";
                            _newReptPickSerials.Tus_seq_no = 0;
                            _newReptPickSerials.Tus_itm_line = 0;
                            _newReptPickSerials.Tus_batch_line = 0;
                            _newReptPickSerials.Tus_ser_line = 0;
                            _newReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                            _newReptPickSerials.Tus_com = ComCode;
                            _newReptPickSerials.Tus_loc = OtherLocation;
                            _newReptPickSerials.Tus_bin = binCodeLoc;
                            //_newReptPickSerials.Tus_bin = binCode;
                            _newReptPickSerials.Tus_itm_cd = item.ITEM_CODE;
                            _newReptPickSerials.Tus_itm_stus = item.STATUS_CODE;
                            _newReptPickSerials.Tus_unit_cost = costPrice;
                            _newReptPickSerials.Tus_orig_grncom = ComCode;
                            //_newReptPickSerials.Tus_unit_price = _unitPrice;
                            _newReptPickSerials.Tus_qty = 1;
                            //_newReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID();
                            _newReptPickSerials.Tus_ser_id = Convert.ToInt32(item.SERIAL_ID);
                            _newReptPickSerials.Tus_ser_1 = "N/A";
                            _newReptPickSerials.Tus_ser_2 = "N/A";
                            _newReptPickSerials.Tus_ser_3 = "N/A";
                            _newReptPickSerials.Tus_warr_no = _warrantyno;
                            _newReptPickSerials.Tus_itm_desc = msitemPlus.Mi_longdesc;
                            _newReptPickSerials.Tus_itm_model = msitemPlus.Mi_model;
                            _newReptPickSerials.Tus_itm_brand = msitemPlus.Mi_brand;
                            //_newReptPickSerials.Tus_itm_line = ItemLineNo;
                            _newReptPickSerials.Tus_cre_by = user;
                            _newReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                            _newReptPickSerials.Tus_session_id = sesstionID;
                            _newReptPickSerials.Tus_job_no = item.JOB_NO;
                            _newReptPickSerials.Tus_job_line = item.JOB_LINE;
                            reptPickSerialsListPlus.Add(_newReptPickSerials);

                            #endregion Fill Pick Serial Object
                        }

                        #endregion Non-serialized
                    }
                    else if (_itemSerializedStatus == -1) //(Non serialize decimal Item = -1))
                    {
                        #region Non-serialized Decimal Allow

                        decimal _actualQty = Convert.ToDecimal(item.QTY);

                        //Write to the Picked items serials table.
                        ReptPickSerials _decimalReptPickSerials = new ReptPickSerials();

                        #region Fill Temp Pick Serial List

                        _decimalReptPickSerials.Tus_usrseq_no = 1;
                        _decimalReptPickSerials.Tus_doc_no = "1";
                        _decimalReptPickSerials.Tus_seq_no = 0;
                        _decimalReptPickSerials.Tus_itm_line = 0;
                        _decimalReptPickSerials.Tus_batch_line = 0;
                        _decimalReptPickSerials.Tus_ser_line = 0;
                        _decimalReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                        _decimalReptPickSerials.Tus_com = ComCode;
                        _decimalReptPickSerials.Tus_loc = OtherLocation;
                        _decimalReptPickSerials.Tus_bin = binCodeLoc;
                        //_decimalReptPickSerials.Tus_bin = binCode;
                        _decimalReptPickSerials.Tus_itm_cd = item.ITEM_CODE;
                        _decimalReptPickSerials.Tus_itm_stus = item.STATUS_CODE;
                        //_decimalReptPickSerials.Tus_unit_cost = _unitCost;
                        //_decimalReptPickSerials.Tus_unit_price = _unitPrice;
                        _decimalReptPickSerials.Tus_qty = _actualQty;
                        //_decimalReptPickSerials.Tus_ser_id = CHNLSVC.Inventory.GetSerialID();
                        _decimalReptPickSerials.Tus_ser_1 = "N/A";
                        _decimalReptPickSerials.Tus_ser_2 = "N/A";
                        _decimalReptPickSerials.Tus_ser_3 = "N/A";
                        _decimalReptPickSerials.Tus_itm_desc = msitemPlus.Mi_longdesc;
                        _decimalReptPickSerials.Tus_itm_model = msitemPlus.Mi_model;
                        _decimalReptPickSerials.Tus_itm_brand = msitemPlus.Mi_brand;
                        //_decimalReptPickSerials.Tus_itm_line = ItemLineNo;
                        _decimalReptPickSerials.Tus_cre_by = user;
                        _decimalReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                        _decimalReptPickSerials.Tus_session_id = sesstionID;
                        _decimalReptPickSerials.Tus_job_no = item.JOB_NO;
                        _decimalReptPickSerials.Tus_job_line = item.JOB_LINE;
                        reptPickSerialsListPlus.Add(_decimalReptPickSerials);

                        #endregion Fill Temp Pick Serial List

                        #endregion Non-serialized Decimal Allow
                    }

                    #endregion Stock Adjectment +
                }

                #region Header minus

                DataTable dt_location = _inventoryDAL.Get_location_by_code(ComCode, defLocation);
                foreach (DataRow r in dt_location.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    inHeader.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        inHeader.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        inHeader.Ith_channel = string.Empty;
                    }
                }
                inHeader.Ith_acc_no = "";
                inHeader.Ith_anal_1 = "";
                inHeader.Ith_anal_2 = "";
                inHeader.Ith_anal_3 = "";
                inHeader.Ith_anal_4 = "";
                inHeader.Ith_anal_5 = "";
                inHeader.Ith_anal_6 = 0;
                inHeader.Ith_anal_7 = 0;
                inHeader.Ith_anal_8 = DateTime.MinValue;
                inHeader.Ith_anal_9 = DateTime.MinValue;
                inHeader.Ith_anal_10 = false;
                inHeader.Ith_anal_11 = false;
                inHeader.Ith_anal_12 = false;
                inHeader.Ith_bus_entity = "";
                inHeader.Ith_cate_tp = "";
                inHeader.Ith_com = ComCode;
                inHeader.Ith_com_docno = "";
                inHeader.Ith_cre_by = user;
                inHeader.Ith_cre_when = closeDate;
                inHeader.Ith_del_add1 = "";
                inHeader.Ith_del_add2 = "";
                inHeader.Ith_del_code = "";
                inHeader.Ith_del_party = "";
                inHeader.Ith_del_town = "";

                inHeader.Ith_direct = false;

                inHeader.Ith_doc_date = closeDate.Date;
                inHeader.Ith_doc_no = string.Empty;
                inHeader.Ith_doc_tp = "AOD";
                inHeader.Ith_doc_year = DateTime.Now.Date.Year;
                inHeader.Ith_entry_no = "T";
                inHeader.Ith_entry_tp = "";
                inHeader.Ith_git_close = true;
                inHeader.Ith_git_close_date = DateTime.MinValue;
                inHeader.Ith_git_close_doc = string.Empty;
                inHeader.Ith_isprinted = false;
                inHeader.Ith_is_manual = false;
                inHeader.Ith_job_no = (oNewItems.Count > 0) ? oNewItems[0].JOB_NO : string.Empty;
                inHeader.Ith_oth_com = ComCode;
                inHeader.Ith_loading_point = string.Empty;
                inHeader.Ith_loading_user = string.Empty;
                inHeader.Ith_loc = defLocation;
                inHeader.Ith_manual_ref = "";
                inHeader.Ith_mod_by = user;
                inHeader.Ith_mod_when = DateTime.Now;
                inHeader.Ith_noofcopies = 0;
                inHeader.Ith_oth_loc = OtherLocation;
                inHeader.Ith_oth_docno = "N/A";
                inHeader.Ith_remarks = "";

                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013

                inHeader.Ith_session_id = sesstionID;
                inHeader.Ith_stus = "F";
                inHeader.Ith_sub_tp = "NOR";
                inHeader.Ith_vehi_no = string.Empty;

                MasterAutoNumber masterAuto = new MasterAutoNumber();
                masterAuto.Aut_cate_cd = defLocation;
                masterAuto.Aut_cate_tp = "LOC";
                masterAuto.Aut_direction = 0;
                masterAuto.Aut_modify_dt = null;
                masterAuto.Aut_moduleid = "AOD";
                masterAuto.Aut_number = 5;//what is Aut_number
                masterAuto.Aut_start_char = "AOD";
                masterAuto.Aut_year = closeDate.Year;

                #endregion Header minus

                bool isAutoIn = true;

                DataTable dt_locationPlus = _inventoryDAL.Get_location_by_code(ComCode, OtherLocation);
                foreach (DataRow r in dt_locationPlus.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    inHeaderPlus.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        inHeaderPlus.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        inHeaderPlus.Ith_channel = string.Empty;
                    }
                    //if (r["ML_AUTO_AIN"] != null && r["ML_AUTO_AIN"].ToString() == "1")
                    //{
                    //    isAutoIn = true;
                    //}
                }


                inHeader.Ith_stus = "F";


                _effects = _InventoryBLL.ADJMinus_Service(_inventoryDAL, _inventoryRepDAL, inHeader, reptPickSerialsList, null, masterAuto, out docNum);
                string outDocNum = "\nAOD(-) : " + docNum;


                #region Header Plus



                inHeaderPlus.Ith_acc_no = "STOCK_AOD";
                inHeaderPlus.Ith_anal_1 = "";
                inHeaderPlus.Ith_anal_2 = "";
                inHeaderPlus.Ith_anal_3 = "";
                inHeaderPlus.Ith_anal_4 = "";
                inHeaderPlus.Ith_anal_5 = "";
                inHeaderPlus.Ith_anal_6 = 0;
                inHeaderPlus.Ith_anal_7 = 0;
                inHeaderPlus.Ith_anal_8 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_9 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_10 = false;
                inHeaderPlus.Ith_anal_11 = false;
                inHeaderPlus.Ith_anal_12 = false;
                inHeaderPlus.Ith_bus_entity = "";
                inHeaderPlus.Ith_cate_tp = "NOR";
                inHeaderPlus.Ith_com = ComCode;
                inHeaderPlus.Ith_com_docno = "";
                inHeaderPlus.Ith_cre_by = user;
                inHeaderPlus.Ith_cre_when = closeDate.Date;
                inHeaderPlus.Ith_del_add1 = "";
                inHeaderPlus.Ith_del_add2 = "";
                inHeaderPlus.Ith_del_code = "";
                inHeaderPlus.Ith_del_party = "";
                inHeaderPlus.Ith_del_town = "";
                inHeaderPlus.Ith_direct = true;
                inHeaderPlus.Ith_doc_date = closeDate.Date;
                inHeaderPlus.Ith_doc_no = string.Empty;
                inHeaderPlus.Ith_doc_tp = "AOD";
                inHeaderPlus.Ith_doc_year = DateTime.Today.Date.Year;
                inHeaderPlus.Ith_entry_no = "T";
                inHeaderPlus.Ith_entry_tp = "";
                inHeaderPlus.Ith_git_close = true;
                inHeaderPlus.Ith_git_close_date = DateTime.MinValue;
                inHeaderPlus.Ith_git_close_doc = string.Empty;
                inHeaderPlus.Ith_isprinted = false;
                inHeaderPlus.Ith_is_manual = false;
                inHeaderPlus.Ith_job_no = (oNewItems.Count > 0) ? oNewItems[0].JOB_NO : string.Empty;
                inHeaderPlus.Ith_loading_point = string.Empty;
                inHeaderPlus.Ith_loading_user = string.Empty;
                inHeaderPlus.Ith_loc = OtherLocation;
                inHeaderPlus.Ith_manual_ref = string.Empty;
                inHeaderPlus.Ith_mod_by = user;
                inHeaderPlus.Ith_mod_when = DateTime.Now;
                inHeaderPlus.Ith_noofcopies = 0;
                inHeaderPlus.Ith_oth_loc = defLocation;
                inHeaderPlus.Ith_oth_docno = docNum;
                inHeaderPlus.Ith_oth_com = ComCode;
                inHeaderPlus.Ith_remarks = (oNewItems.Count > 0) ? oNewItems[0].Desc : string.Empty;
                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
                inHeaderPlus.Ith_session_id = sesstionID;
                inHeaderPlus.Ith_stus = "F";
                inHeaderPlus.Ith_sub_tp = "NOR";
                inHeaderPlus.Ith_vehi_no = string.Empty;

                MasterAutoNumber masterAutoPlus = new MasterAutoNumber();
                masterAutoPlus.Aut_cate_cd = OtherLocation;
                masterAutoPlus.Aut_cate_tp = "LOC";
                masterAutoPlus.Aut_direction = 1;
                masterAutoPlus.Aut_modify_dt = null;
                masterAutoPlus.Aut_moduleid = "AOD";
                masterAutoPlus.Aut_number = 5;//what is Aut_number
                masterAutoPlus.Aut_start_char = "AOD";
                masterAutoPlus.Aut_year = closeDate.Year;

                #endregion Header Plus

                if (isAutoIn)
                {
                    _effects = _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, inHeaderPlus, reptPickSerialsListPlus, null, masterAutoPlus, out docNum);
                    outDocNum += " \nAOD(+) : " + docNum;
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

                _ScmCommonDAL.TransactionCommit();
                _ScmCommonDAL.ConnectionClose();

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
                docNum = outDocNum;
                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }


        //THARAKA 2014-11-24
        public Int32 Update_NewItems_ReturnWarehouse(List<Service_stockReturn> oNewItems, String user, string ComCode, string defLocation, string binCode, string sesstionID, string OtherLocation, DateTime closeDate, out string docNum)
        {
            docNum = string.Empty;
            Int32 _effects = 0;
            string OriBinCode = binCode;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryRepDAL = new ReptCommonDAL();
                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                _ScmCommonDAL = new SCMCommonDAL();
                _ScmCommonDAL.ConnectionOpen();
                _ScmCommonDAL.BeginTransaction();

                InventoryHeader inHeader = new InventoryHeader();
                InventoryHeader inHeaderPlus = new InventoryHeader();
                List<ReptPickSerials> reptPickSerialsList = new List<ReptPickSerials>();
                List<ReptPickSerials> reptPickSerialsListPlus = new List<ReptPickSerials>();

                InventoryBLL _InventoryBLL = new InventoryBLL();

                foreach (Service_stockReturn item in oNewItems)
                {
                    string itemCode = item.ITEM_CODE;
                    decimal costPrice = 0;
                    #region Stock Adjectment -

                    if (!string.IsNullOrEmpty(item.SERIAL_ID))
                    {
                        int serialID = Convert.ToInt32(item.SERIAL_ID);
                        ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(ComCode, defLocation, null, itemCode, serialID);
                        if (PickSerials.Tus_ser_id != 0)
                        {
                            reptPickSerialsList.Add(PickSerials);
                        }
                    }
                    else
                    {
                        MasterItem msitem = new MasterItem();
                        msitem = _inventoryDAL.GetItem(ComCode, itemCode);

                        ReptPickSerials PickSerials = new ReptPickSerials();
                        PickSerials.Tus_usrseq_no = 1;
                        PickSerials.Tus_doc_no = "1";
                        PickSerials.Tus_seq_no = 0;
                        PickSerials.Tus_itm_line = 0;
                        PickSerials.Tus_batch_line = 0;
                        PickSerials.Tus_ser_line = 0;
                        PickSerials.Tus_doc_dt = DateTime.Now.Date;
                        PickSerials.Tus_com = ComCode;
                        PickSerials.Tus_loc = defLocation;
                        PickSerials.Tus_bin = OriBinCode;
                        PickSerials.Tus_itm_cd = itemCode;
                        PickSerials.Tus_itm_stus = item.STATUS_CODE;

                        costPrice = _inventoryDAL.GetLatestCost(ComCode, defLocation, item.ITEM_CODE, item.STATUS_CODE);
                        PickSerials.Tus_unit_cost = costPrice;
                        PickSerials.Tus_unit_price = 0;
                        PickSerials.Tus_qty = item.QTY;
                        PickSerials.Tus_ser_id = 0;
                        PickSerials.Tus_ser_1 = "N/A";
                        PickSerials.Tus_ser_2 = "N/A";
                        //_inputReptPickSerials.Tus_ser_3 = _serialNo3;
                        //if (string.IsNullOrEmpty(_warrantyno))
                        //    _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + defLocation + "-P01-" + _inputReptPickSerials.Tus_ser_id.ToString();
                        PickSerials.Tus_warr_no = "N/A";
                        PickSerials.Tus_itm_desc = msitem.Mi_longdesc;
                        PickSerials.Tus_itm_model = msitem.Mi_model;
                        PickSerials.Tus_itm_brand = msitem.Mi_brand;
                        //PickSerials.Tus_itm_line =
                        PickSerials.Tus_cre_by = user;
                        PickSerials.Tus_cre_dt = DateTime.Now.Date;
                        PickSerials.Tus_session_id = sesstionID;
                        //PickSerials.Tus_exist_supp = GetJobDetails[0].JBD_SUPP_CD;
                        PickSerials.Tus_orig_grncom = ComCode;
                        PickSerials.Tus_exist_grncom = ComCode;
                        PickSerials.Tus_exist_grndt = DateTime.Today.Date;
                        PickSerials.Tus_job_no = item.JOB_NO;
                        PickSerials.Tus_job_line = item.JOB_LINE;
                        reptPickSerialsList.Add(PickSerials);
                    }

                    #endregion Stock Adjectment -

                    #region Stock Adjectment +

                    string binCodeLoc = _inventoryDAL.GetDefaultBinCode(ComCode, OtherLocation);
                    binCode = binCodeLoc;

                    //Service_OldPartRemove OldPart = _custServiceDAL.GET_SCV_OLDPART_BY_SEQ(itemcode);

                    int _itemSerializedStatus = 0;
                    MasterItem msitemPlus = new MasterItem();
                    msitemPlus = _inventoryDAL.GetItem(ComCode, itemCode);
                    if (msitemPlus.Mi_is_ser1 == 1)
                    {
                        _itemSerializedStatus = 1;
                    }
                    else
                    {
                        _itemSerializedStatus = 0;
                    }
                    if (msitemPlus.Mi_is_ser1 == -1)
                    {
                        _itemSerializedStatus = -1;
                    }

                    if (msitemPlus.Mi_is_ser2 > 0)
                    {
                        _itemSerializedStatus = 2;
                    }

                    if (msitemPlus.Mi_is_ser3 == true)
                    {
                        _itemSerializedStatus = 3;
                    }

                    if (_itemSerializedStatus == 1 || _itemSerializedStatus == 2 || _itemSerializedStatus == 3)
                    {
                        #region Serialized

                        string _serialNo1 = item.SERIAL_NO;
                        string _warrantyno = string.Empty;
                        int _serID = _inventoryDAL.IsExistInSerialMaster("", itemCode, _serialNo1);
                        InventorySerialMaster _serIDMst = new InventorySerialMaster();
                        _serIDMst = _inventoryDAL.GetSerialMasterDetailBySerialID(_serID);

                        DataTable _dtser1 = _inventoryDAL.CheckSerialAvailabilityWithLocation("SERIAL1", itemCode, _serialNo1, defLocation);
                        if (_dtser1 != null)
                        {
                            if (_dtser1.Rows.Count > 0)
                            {
                                _effects = -1;
                                docNum = "ER";
                                return _effects;
                            }
                        }
                        _dtser1.Dispose();

                        _warrantyno = _serIDMst.Irsm_warr_no;

                        //Write to the Picked items serial table.
                        ReptPickSerials _inputReptPickSerials = new ReptPickSerials();

                        #region Fill Pick Serial Object

                        _inputReptPickSerials.Tus_usrseq_no = 1;
                        _inputReptPickSerials.Tus_doc_no = "1";
                        _inputReptPickSerials.Tus_seq_no = 0;
                        _inputReptPickSerials.Tus_itm_line = 0;
                        _inputReptPickSerials.Tus_batch_line = 0;
                        _inputReptPickSerials.Tus_ser_line = 0;
                        _inputReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                        _inputReptPickSerials.Tus_com = ComCode;
                        _inputReptPickSerials.Tus_loc = OtherLocation;

                        _inputReptPickSerials.Tus_bin = binCode;
                        _inputReptPickSerials.Tus_itm_cd = item.ITEM_CODE;
                        _inputReptPickSerials.Tus_itm_stus = item.STATUS_CODE;

                        costPrice = _inventoryDAL.GetLatestCost(ComCode, defLocation, item.ITEM_CODE, item.STATUS_CODE);
                        _inputReptPickSerials.Tus_unit_cost = costPrice;

                        _inputReptPickSerials.Tus_unit_price = 0;
                        _inputReptPickSerials.Tus_qty = 1;
                        if (_serID > 0)
                        { _inputReptPickSerials.Tus_ser_id = _serID; }
                        else
                        { _inputReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID(); }
                        _inputReptPickSerials.Tus_ser_1 = item.SERIAL_NO;
                        _inputReptPickSerials.Tus_ser_2 = "N/A";
                        //_inputReptPickSerials.Tus_ser_3 = _serialNo3;
                        if (string.IsNullOrEmpty(_warrantyno)) _warrantyno = String.Format("{0:dd}", DateTime.Now.Date) + String.Format("{0:MM}", DateTime.Now.Date) + String.Format("{0:yy}", DateTime.Now.Date) + "-" + defLocation + "-P01-" + _inputReptPickSerials.Tus_ser_id.ToString();
                        _inputReptPickSerials.Tus_warr_no = _warrantyno;
                        _inputReptPickSerials.Tus_itm_desc = msitemPlus.Mi_longdesc;
                        _inputReptPickSerials.Tus_itm_model = msitemPlus.Mi_model;
                        _inputReptPickSerials.Tus_itm_brand = msitemPlus.Mi_brand;
                        //_inputReptPickSerials.Tus_itm_line =
                        _inputReptPickSerials.Tus_cre_by = user;
                        _inputReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                        _inputReptPickSerials.Tus_session_id = sesstionID;
                        // _inputReptPickSerials.Tus_exist_supp = GetJobDetails[0].JBD_SUPP_CD;
                        _inputReptPickSerials.Tus_orig_grncom = ComCode;
                        _inputReptPickSerials.Tus_exist_grncom = ComCode;
                        _inputReptPickSerials.Tus_exist_grndt = DateTime.Today.Date;

                        #endregion Fill Pick Serial Object

                        reptPickSerialsListPlus.Add(_inputReptPickSerials);

                        #endregion Serialized
                    }
                    else if (_itemSerializedStatus == 0)
                    {
                        #region Non-serialized

                        int _actualQty = Convert.ToInt32(item.QTY);
                        string _warrantyno = string.Empty;

                        for (int i = 0; i < _actualQty; i++)
                        {
                            //Write to the Picked items serials table.
                            ReptPickSerials _newReptPickSerials = new ReptPickSerials();

                            #region Fill Pick Serial Object

                            _newReptPickSerials.Tus_usrseq_no = 1;
                            _newReptPickSerials.Tus_doc_no = "1";
                            _newReptPickSerials.Tus_seq_no = 0;
                            _newReptPickSerials.Tus_itm_line = 0;
                            _newReptPickSerials.Tus_batch_line = 0;
                            _newReptPickSerials.Tus_ser_line = 0;
                            _newReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                            _newReptPickSerials.Tus_com = ComCode;
                            _newReptPickSerials.Tus_loc = OtherLocation;
                            _newReptPickSerials.Tus_bin = binCode;
                            _newReptPickSerials.Tus_itm_cd = item.ITEM_CODE;
                            _newReptPickSerials.Tus_itm_stus = item.STATUS_CODE;
                            _newReptPickSerials.Tus_unit_cost = costPrice;
                            _newReptPickSerials.Tus_orig_grncom = ComCode;
                            //_newReptPickSerials.Tus_unit_price = _unitPrice;
                            _newReptPickSerials.Tus_qty = 1;
                            //_newReptPickSerials.Tus_ser_id = _inventoryDAL.GetSerialID();
                            _newReptPickSerials.Tus_ser_id = Convert.ToInt32(item.SERIAL_ID);
                            _newReptPickSerials.Tus_ser_1 = "N/A";
                            _newReptPickSerials.Tus_ser_2 = "N/A";
                            _newReptPickSerials.Tus_ser_3 = "N/A";
                            _newReptPickSerials.Tus_warr_no = _warrantyno;
                            _newReptPickSerials.Tus_itm_desc = msitemPlus.Mi_longdesc;
                            _newReptPickSerials.Tus_itm_model = msitemPlus.Mi_model;
                            _newReptPickSerials.Tus_itm_brand = msitemPlus.Mi_brand;
                            //_newReptPickSerials.Tus_itm_line = ItemLineNo;
                            _newReptPickSerials.Tus_cre_by = user;
                            _newReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                            _newReptPickSerials.Tus_session_id = sesstionID;
                            _newReptPickSerials.Tus_job_no = item.JOB_NO;
                            _newReptPickSerials.Tus_job_line = item.JOB_LINE;
                            reptPickSerialsListPlus.Add(_newReptPickSerials);

                            #endregion Fill Pick Serial Object
                        }

                        #endregion Non-serialized
                    }
                    else if (_itemSerializedStatus == -1) //(Non serialize decimal Item = -1))
                    {
                        #region Non-serialized Decimal Allow

                        decimal _actualQty = Convert.ToDecimal(item.QTY);

                        //Write to the Picked items serials table.
                        ReptPickSerials _decimalReptPickSerials = new ReptPickSerials();

                        #region Fill Temp Pick Serial List

                        _decimalReptPickSerials.Tus_usrseq_no = 1;
                        _decimalReptPickSerials.Tus_doc_no = "1";
                        _decimalReptPickSerials.Tus_seq_no = 0;
                        _decimalReptPickSerials.Tus_itm_line = 0;
                        _decimalReptPickSerials.Tus_batch_line = 0;
                        _decimalReptPickSerials.Tus_ser_line = 0;
                        _decimalReptPickSerials.Tus_doc_dt = DateTime.Now.Date;
                        _decimalReptPickSerials.Tus_com = ComCode;
                        _decimalReptPickSerials.Tus_loc = OtherLocation;
                        _decimalReptPickSerials.Tus_bin = binCode;
                        _decimalReptPickSerials.Tus_itm_cd = item.ITEM_CODE;
                        _decimalReptPickSerials.Tus_itm_stus = item.STATUS_CODE;
                        //_decimalReptPickSerials.Tus_unit_cost = _unitCost;
                        //_decimalReptPickSerials.Tus_unit_price = _unitPrice;
                        _decimalReptPickSerials.Tus_qty = _actualQty;
                        //_decimalReptPickSerials.Tus_ser_id = CHNLSVC.Inventory.GetSerialID();
                        _decimalReptPickSerials.Tus_ser_1 = "N/A";
                        _decimalReptPickSerials.Tus_ser_2 = "N/A";
                        _decimalReptPickSerials.Tus_ser_3 = "N/A";
                        _decimalReptPickSerials.Tus_itm_desc = msitemPlus.Mi_longdesc;
                        _decimalReptPickSerials.Tus_itm_model = msitemPlus.Mi_model;
                        _decimalReptPickSerials.Tus_itm_brand = msitemPlus.Mi_brand;
                        //_decimalReptPickSerials.Tus_itm_line = ItemLineNo;
                        _decimalReptPickSerials.Tus_cre_by = user;
                        _decimalReptPickSerials.Tus_cre_dt = DateTime.Now.Date;
                        _decimalReptPickSerials.Tus_session_id = sesstionID;
                        _decimalReptPickSerials.Tus_job_no = item.JOB_NO;
                        _decimalReptPickSerials.Tus_job_line = item.JOB_LINE;
                        reptPickSerialsListPlus.Add(_decimalReptPickSerials);

                        #endregion Fill Temp Pick Serial List

                        #endregion Non-serialized Decimal Allow
                    }

                    #endregion Stock Adjectment +
                }

                #region Header minus

                DataTable dt_location = _inventoryDAL.Get_location_by_code(ComCode, defLocation);
                foreach (DataRow r in dt_location.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    inHeader.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        inHeader.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        inHeader.Ith_channel = string.Empty;
                    }
                }
                inHeader.Ith_acc_no = "";
                inHeader.Ith_anal_1 = "";
                inHeader.Ith_anal_2 = "";
                inHeader.Ith_anal_3 = "";
                inHeader.Ith_anal_4 = "";
                inHeader.Ith_anal_5 = "";
                inHeader.Ith_anal_6 = 0;
                inHeader.Ith_anal_7 = 0;
                inHeader.Ith_anal_8 = DateTime.MinValue;
                inHeader.Ith_anal_9 = DateTime.MinValue;
                inHeader.Ith_anal_10 = false;
                inHeader.Ith_anal_11 = false;
                inHeader.Ith_anal_12 = false;
                inHeader.Ith_bus_entity = "";
                inHeader.Ith_cate_tp = "";
                inHeader.Ith_com = ComCode;
                inHeader.Ith_com_docno = "";
                inHeader.Ith_cre_by = user;
                inHeader.Ith_cre_when = closeDate;
                inHeader.Ith_del_add1 = "";
                inHeader.Ith_del_add2 = "";
                inHeader.Ith_del_code = "";
                inHeader.Ith_del_party = "";
                inHeader.Ith_del_town = "";

                inHeader.Ith_direct = false;

                inHeader.Ith_doc_date = closeDate.Date;
                inHeader.Ith_doc_no = string.Empty;
                inHeader.Ith_doc_tp = "AOD";
                inHeader.Ith_doc_year = DateTime.Now.Date.Year;
                inHeader.Ith_entry_no = "";
                inHeader.Ith_entry_tp = "";
                inHeader.Ith_git_close = true;
                inHeader.Ith_git_close_date = DateTime.MinValue;
                inHeader.Ith_git_close_doc = string.Empty;
                inHeader.Ith_isprinted = false;
                inHeader.Ith_is_manual = false;
                inHeader.Ith_job_no = (oNewItems.Count > 0) ? oNewItems[0].JOB_NO : string.Empty;
                inHeader.Ith_oth_com = ComCode;
                inHeader.Ith_loading_point = string.Empty;
                inHeader.Ith_loading_user = string.Empty;
                inHeader.Ith_loc = defLocation;
                inHeader.Ith_manual_ref = "";
                inHeader.Ith_mod_by = user;
                inHeader.Ith_mod_when = DateTime.Now;
                inHeader.Ith_noofcopies = 0;
                inHeader.Ith_oth_loc = OtherLocation;
                inHeader.Ith_oth_docno = "N/A";
                inHeader.Ith_remarks = "";

                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013

                inHeader.Ith_session_id = sesstionID;
                inHeader.Ith_stus = "F";
                inHeader.Ith_sub_tp = "NOR";
                inHeader.Ith_vehi_no = string.Empty;

                MasterAutoNumber masterAuto = new MasterAutoNumber();
                masterAuto.Aut_cate_cd = defLocation;
                masterAuto.Aut_cate_tp = "LOC";
                masterAuto.Aut_direction = 0;
                masterAuto.Aut_modify_dt = null;
                masterAuto.Aut_moduleid = "AOD";
                masterAuto.Aut_number = 5;//what is Aut_number
                masterAuto.Aut_start_char = "AOD";
                masterAuto.Aut_year = closeDate.Year;

                #endregion Header minus

                bool isAutoIn = false;

                DataTable dt_locationPlus = _inventoryDAL.Get_location_by_code(ComCode, OtherLocation);
                foreach (DataRow r in dt_locationPlus.Rows)
                {
                    // Get the value of the wanted column and cast it to string
                    inHeaderPlus.Ith_sbu = (string)r["ML_OPE_CD"];
                    if (System.DBNull.Value != r["ML_CATE_2"])
                    {
                        inHeaderPlus.Ith_channel = (string)r["ML_CATE_2"];
                    }
                    else
                    {
                        inHeaderPlus.Ith_channel = string.Empty;
                    }
                    if (r["ML_AUTO_AIN"] != null && r["ML_AUTO_AIN"].ToString() == "1")
                    {
                        isAutoIn = true;
                    }
                }

                if (!isAutoIn)
                {
                    inHeader.Ith_stus = "A";
                }

                _effects = _InventoryBLL.ADJMinus_Service(_inventoryDAL, _inventoryRepDAL, inHeader, reptPickSerialsList, null, masterAuto, out docNum);
                string outDocNum = "\nAOD(-) : " + docNum;


                #region Header Plus



                inHeaderPlus.Ith_acc_no = "STOCK_AOD";
                inHeaderPlus.Ith_anal_1 = "";
                inHeaderPlus.Ith_anal_2 = "";
                inHeaderPlus.Ith_anal_3 = "";
                inHeaderPlus.Ith_anal_4 = "";
                inHeaderPlus.Ith_anal_5 = "";
                inHeaderPlus.Ith_anal_6 = 0;
                inHeaderPlus.Ith_anal_7 = 0;
                inHeaderPlus.Ith_anal_8 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_9 = DateTime.MinValue;
                inHeaderPlus.Ith_anal_10 = false;
                inHeaderPlus.Ith_anal_11 = false;
                inHeaderPlus.Ith_anal_12 = false;
                inHeaderPlus.Ith_bus_entity = "";
                inHeaderPlus.Ith_cate_tp = "NOR";
                inHeaderPlus.Ith_com = ComCode;
                inHeaderPlus.Ith_com_docno = "";
                inHeaderPlus.Ith_cre_by = user;
                inHeaderPlus.Ith_cre_when = closeDate.Date;
                inHeaderPlus.Ith_del_add1 = "";
                inHeaderPlus.Ith_del_add2 = "";
                inHeaderPlus.Ith_del_code = "";
                inHeaderPlus.Ith_del_party = "";
                inHeaderPlus.Ith_del_town = "";
                inHeaderPlus.Ith_direct = true;
                inHeaderPlus.Ith_doc_date = closeDate.Date;
                inHeaderPlus.Ith_doc_no = string.Empty;
                inHeaderPlus.Ith_doc_tp = "AOD";
                inHeaderPlus.Ith_doc_year = DateTime.Today.Date.Year;
                inHeaderPlus.Ith_entry_no = "";
                inHeaderPlus.Ith_entry_tp = "";
                inHeaderPlus.Ith_git_close = true;
                inHeaderPlus.Ith_git_close_date = DateTime.MinValue;
                inHeaderPlus.Ith_git_close_doc = string.Empty;
                inHeaderPlus.Ith_isprinted = false;
                inHeaderPlus.Ith_is_manual = false;
                inHeaderPlus.Ith_job_no = (oNewItems.Count > 0) ? oNewItems[0].JOB_NO : string.Empty;
                inHeaderPlus.Ith_loading_point = string.Empty;
                inHeaderPlus.Ith_loading_user = string.Empty;
                inHeaderPlus.Ith_loc = OtherLocation;
                inHeaderPlus.Ith_manual_ref = string.Empty;
                inHeaderPlus.Ith_mod_by = user;
                inHeaderPlus.Ith_mod_when = DateTime.Now;
                inHeaderPlus.Ith_noofcopies = 0;
                inHeaderPlus.Ith_oth_loc = defLocation;
                inHeaderPlus.Ith_oth_docno = docNum;
                inHeaderPlus.Ith_oth_com = ComCode;
                inHeaderPlus.Ith_remarks = (oNewItems.Count > 0) ? oNewItems[0].Desc : string.Empty;
                //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
                inHeaderPlus.Ith_session_id = sesstionID;
                inHeaderPlus.Ith_stus = "A";
                inHeaderPlus.Ith_sub_tp = "NOR";
                inHeaderPlus.Ith_vehi_no = string.Empty;

                MasterAutoNumber masterAutoPlus = new MasterAutoNumber();
                masterAutoPlus.Aut_cate_cd = OtherLocation;
                masterAutoPlus.Aut_cate_tp = "LOC";
                masterAutoPlus.Aut_direction = 1;
                masterAutoPlus.Aut_modify_dt = null;
                masterAutoPlus.Aut_moduleid = "AOD";
                masterAutoPlus.Aut_number = 5;//what is Aut_number
                masterAutoPlus.Aut_start_char = "AOD";
                masterAutoPlus.Aut_year = closeDate.Year;

                #endregion Header Plus

                if (isAutoIn)
                {
                    _effects = _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, inHeaderPlus, reptPickSerialsListPlus, null, masterAutoPlus, out docNum);
                    outDocNum += " \nAOD(+) : " + docNum;
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

                _ScmCommonDAL.TransactionCommit();
                _ScmCommonDAL.ConnectionClose();

                _inventoryRepDAL.TransactionCommit();
                _inventoryRepDAL.ConnectionClose();
                docNum = outDocNum;
                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _ScmCommonDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-11-25
        public Int32 Update_ScvJobDetRemark(string TechRemark, string cusRemark, string job, Int32 jobLine, string Com, string location, string closeType, String clsRemark)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _effects = _custServiceDAL.Update_ScvJobDetRemark(TechRemark, cusRemark, job, jobLine, Com, location, closeType, clsRemark);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-11-26
        public List<Service_Defect_Types> GetDefectTypes(string Com, string CHN)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetDefectTypes(Com, CHN);
        }

        //Tharaka 2014-11-26
        public Int32 SAVE_SCV_JOB_DEFECTS(List<Service_Job_Defects> items)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _effects = _custServiceDAL.UPDATE_SCV_JOB_DEF_STATUS(items[0], 0);

                foreach (Service_Job_Defects item in items)
                {
                    _effects = _custServiceDAL.SAVE_SCV_JOB_DEFECTS(item);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-11-26
        public List<Service_Tech_Comment> GetTechCommtByChnnl(string Com, string CHN)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetTechCommtByChnnl(Com, CHN);
        }

        //Tharaka 2014-11-26
        public List<Service_Job_Tech_Comments> GetServiceJobTechComments(Int32 seq, string job, Int32 jobLine)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_TECH_CMNT(seq, job, jobLine);
        }

        //Tharaka 2014-11-26
        public Int32 SaveTechnicainComments(List<Service_Job_Tech_Comments> items)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _effects = _custServiceDAL.UPDATE_SCV_TECH_CMNT_STATUS(items[0], 0);

                foreach (Service_Job_Tech_Comments item in items)
                {
                    _effects = _custServiceDAL.SAVE_SCV_JOB_CMNT(item);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-11-27
        public List<Service_Close_Type> GetServiceCloseType(string Com, string CHN, string _jobType = null)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceCloseType(Com, CHN, _jobType);
        }

        //Tharaka 2014-11-27
        public List<Service_Job_Det_Sub> GetServiceJobDetailSubItems(string job, Int32 jobLine)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceJobDetailSubItems(job, jobLine);
        }

        //Tharaka 2014-11-28
        public List<Service_VisitComments> GET_SCV_JOB_VISIT_COMNT(string job, Int32 jobLine)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_JOB_VISIT_COMNT(job, jobLine);
        }

        //Tharaka 2014-11-28
        public Int32 SaveServiceVisitiComment(List<Service_VisitComments> items, List<Tuple<Int32, String>> empList)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _effects = _custServiceDAL.UpdateServiceJobVisitStatus(items[0], 0);

                foreach (Service_VisitComments item in items)
                {
                    _effects = _custServiceDAL.SaveServiceVisitiComment(item);

                    List<Tuple<Int32, String>> selectedEmpList = empList.FindAll(x => x.Item1 == item.JTV_VISIT_LINE);
                    foreach (Tuple<Int32, String> itemList in selectedEmpList)
                    {
                        Service_job_visit_Technician otechVisit = new Service_job_visit_Technician();
                        otechVisit.JVT_SEQ_NO = item.JTV_SEQ_NO;
                        otechVisit.JVT_JOB_NO = item.JTV_JOB_NO;
                        otechVisit.JVT_JOB_LINE = item.JTV_JOB_LINE;
                        otechVisit.JVT_VISIT_LINE = item.JTV_VISIT_LINE;
                        otechVisit.JVT_EMP_CD = itemList.Item2;
                        otechVisit.JVT_ACT = 1;
                        otechVisit.JVT_CRE_BY = item.JTV_CRE_BY;
                        otechVisit.JVT_CRE_DT = item.JTV_CRE_DT;
                        otechVisit.JVT_MOD_BY = item.JTV_CRE_BY;
                        otechVisit.JVT_MOD_DT = item.JTV_CRE_DT;
                        _effects = _custServiceDAL.SAVE_SCV_JOB_VISIT_TECH(otechVisit);
                    }
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-11-29
        public List<Service_job_visit_Technician> GET_SCV_JOB_VISIT_TECH(string job, Int32 jobLine, Int32 Seq)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_JOB_VISIT_TECH(job, jobLine, Seq);
        }

        //Tharaka 2014-12-01
        public List<Service_confirm_Header> GetServiceConfirmHeader(String Com, String Channal, String Location, String ProfitCenter, String JobNumber, String RequestNO, String CustomerCode, String ConfrimNum, DateTime From, DateTime To)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceConfirmHeader(Com, Channal, Location, ProfitCenter, JobNumber, RequestNO, CustomerCode, ConfrimNum, From, To);
        }

        //Tharaka 2014-12-01
        public List<Service_Confirm_detail> GetServiceConfirmDetials(String Com, Int32 Seq, String ConfirmNum)
        {
            _custServiceDAL = new CustServiceDAL();
            List<Service_Confirm_detail> oItems = new List<Service_Confirm_detail>();
            oItems = _custServiceDAL.GetServiceConfirmDetials(Seq, ConfirmNum);

            foreach (Service_Confirm_detail item in oItems)
            {
                item.costPrice = _custServiceDAL.GET_SCV_ITM_COST(Com, item.Jcd_jobno, item.Jcd_joblineno, item.Jcd_itmcd, item.Jcd_itmstus, item.Jcd_qty);
            }

            return oItems;
        }

        //Darshana 2014-11-26
        public List<Service_Cost_sheet> ProcessJobCost(List<Service_job_Det> _serJobDet)
        {
            _custServiceDAL = new CustServiceDAL();
            _inventoryDAL = new InventoryDAL();
            _salesDAL = new SalesDAL();

            List<Service_Cost_sheet> _rtnList = new List<Service_Cost_sheet>();
            Service_Cost_sheet _rtntmpList = new Service_Cost_sheet();
            List<InventoryBatchRefN> _allBalList = new List<InventoryBatchRefN>();
            List<Service_Purchase_Approval> _serPoApp = new List<Service_Purchase_Approval>();

            string _pc = "";
            string _loc = "";
            string _com = "";
            string _jobItm = "";
            string _jobSer = "";
            string _jobWara = "";

            //Check inventory Bal.
            foreach (Service_job_Det _det in _serJobDet)
            {
                List<InventoryBatchRefN> _inrBat = _custServiceDAL.GetInvBalByJob(_det.Jbd_com, _det.Jbd_loc, _det.Jbd_jobno, _det.Jbd_jobline);
                _pc = _det.Jbd_pc;
                if (_inrBat != null)
                {
                    _allBalList.AddRange(_inrBat);
                }
            }

            //seperate cost with serail and none serial_____________
            foreach (InventoryBatchRefN _lst in _allBalList)
            {
                List<MasterItem> _itm = _inventoryDAL.GetAllItems(_lst.Inb_com, _lst.Inb_itm_cd);
                if (_itm != null)
                {
                    foreach (MasterItem _lstItm in _itm)
                    {
                        if (_lstItm.Mi_is_ser1 == 1)
                        {
                            List<InventorySerialRefN> _serList = _custServiceDAL.GetBalSerForJob(_lst.Inb_com, _lst.Inb_loc, _lst.Inb_seq_no, _lst.Inb_itm_line, _lst.Inb_batch_line);
                            if (_serList != null)
                            {
                                foreach (InventorySerialRefN _serTmp in _serList)
                                {
                                    _rtntmpList = new Service_Cost_sheet();
                                    _rtntmpList.CS_JOBNO = _lst.Inb_job_no;
                                    _rtntmpList.CS_JOBLINENO = _lst.Inb_base_refline;
                                    _rtntmpList.CS_COM = _lst.Inb_com;
                                    _rtntmpList.CS_LOC = _lst.Inb_loc;
                                    _rtntmpList.CS_PC = _pc;

                                    _jobItm = (from _jobLst in _serJobDet
                                               where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                               select _jobLst.Jbd_itm_cd).ToList<string>()[0];

                                    _jobSer = (from _jobLst in _serJobDet
                                               where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                               select _jobLst.Jbd_ser1).ToList<string>()[0];

                                    _jobWara = (from _jobLst in _serJobDet
                                                where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                                select _jobLst.Jbd_warr).ToList<string>()[0];

                                    _rtntmpList.CS_JOBITMCD = _jobItm;
                                    _rtntmpList.CS_JOBITMSER = _jobSer;
                                    _rtntmpList.CS_JOBITMWARR = _jobWara;
                                    _rtntmpList.CS_ITMCD = _serTmp.Ins_itm_cd;
                                    _rtntmpList.CS_ITMSTUS = _serTmp.Ins_itm_stus;
                                    _rtntmpList.CS_ITMSER = _serTmp.Ins_ser_1;
                                    _rtntmpList.CS_UOM = _lstItm.Mi_itm_uom;
                                    _rtntmpList.CS_QTY = 1;
                                    _rtntmpList.CS_DIRECT = "IN";
                                    _rtntmpList.CS_UNITCOST = _serTmp.Ins_unit_cost;
                                    _rtntmpList.CS_TOTUNITCOST = _serTmp.Ins_unit_cost * 1;
                                    _rtntmpList.CS_DOCTP = "";
                                    _rtntmpList.CS_DOCNO = _serTmp.Ins_doc_no;
                                    _rtntmpList.CS_SERID = _serTmp.Ins_ser_id;
                                    _rtntmpList.CS_DOCDT = _serTmp.Ins_doc_dt;
                                    _rtntmpList.CS_ITMTP = _lstItm.Mi_itm_tp;
                                    _rtntmpList.CS_ITMDESC = _lstItm.Mi_shortdesc;
                                    _rtntmpList.CS_ISFOC = 0;
                                    _rtntmpList.CS_ISREVITM = 0;
                                    _rtntmpList.CS_ACT = 1;
                                    _rtntmpList.CS_LINE = _rtnList.Count + 1;
                                    _rtnList.Add(_rtntmpList);
                                }
                            }
                        }
                        else
                        {
                            _rtntmpList = new Service_Cost_sheet();
                            _rtntmpList.CS_JOBNO = _lst.Inb_job_no;
                            _rtntmpList.CS_JOBLINENO = _lst.Inb_base_refline;
                            _rtntmpList.CS_COM = _lst.Inb_com;
                            _rtntmpList.CS_LOC = _lst.Inb_loc;
                            _rtntmpList.CS_PC = _pc;

                            _jobItm = (from _jobLst in _serJobDet
                                       where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                       select _jobLst.Jbd_itm_cd).ToList<string>()[0];

                            _jobSer = (from _jobLst in _serJobDet
                                       where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                       select _jobLst.Jbd_ser1).ToList<string>()[0];

                            _jobWara = (from _jobLst in _serJobDet
                                        where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                        select _jobLst.Jbd_warr).ToList<string>()[0];

                            _rtntmpList.CS_JOBITMCD = _jobItm;
                            _rtntmpList.CS_JOBITMSER = _jobSer;
                            _rtntmpList.CS_JOBITMWARR = _jobWara;
                            _rtntmpList.CS_ITMCD = _lst.Inb_itm_cd;
                            _rtntmpList.CS_ITMSTUS = _lst.Inb_itm_stus;
                            _rtntmpList.CS_ITMSER = "N/A";
                            _rtntmpList.CS_UOM = _lstItm.Mi_itm_uom;
                            _rtntmpList.CS_QTY = _lst.Inb_qty;
                            _rtntmpList.CS_DIRECT = "IN";
                            _rtntmpList.CS_UNITCOST = _lst.Inb_unit_cost;
                            _rtntmpList.CS_TOTUNITCOST = _lst.Inb_unit_cost * _lst.Inb_qty;
                            _rtntmpList.CS_DOCTP = "";
                            _rtntmpList.CS_DOCNO = _lst.Inb_doc_no;
                            _rtntmpList.CS_SERID = 0;
                            _rtntmpList.CS_DOCDT = _lst.Inb_doc_dt;
                            _rtntmpList.CS_ITMTP = _lstItm.Mi_itm_tp;
                            _rtntmpList.CS_ITMDESC = _lstItm.Mi_shortdesc;
                            _rtntmpList.CS_ISFOC = 0;
                            _rtntmpList.CS_ISREVITM = 0;
                            _rtntmpList.CS_ACT = 1;
                            _rtntmpList.CS_LINE = _rtnList.Count + 1;
                            _rtnList.Add(_rtntmpList);
                        }
                    }
                }
            }
            //Get service po details____________
            foreach (Service_job_Det _det in _serJobDet)
            {
                List<Service_Purchase_Approval> _tmpPOList = _custServiceDAL.GetServicePOApp(_det.Jbd_jobno, _det.Jbd_jobline);
                _pc = _det.Jbd_pc;
                _loc = _det.Jbd_loc;
                _com = _det.Jbd_com;
                if (_tmpPOList != null)
                {
                    _serPoApp.AddRange(_tmpPOList);
                }
            }


            foreach (Service_Purchase_Approval _lst in _serPoApp)
            {
                List<MasterItem> _itm = _inventoryDAL.GetAllItems(_com, _lst.Posa_po_itm);
                if (_itm != null)
                {
                    foreach (MasterItem _lstItm in _itm)
                    {
                        //updated by akila 2017/06/27
                        _rtntmpList = new Service_Cost_sheet();
                        _rtntmpList.CS_JOBNO = _lst.Posa_job_no;
                        _rtntmpList.CS_JOBLINENO = _lst.Posa_job_line;
                        _rtntmpList.CS_ITMSTUS = "GOD";
                        _rtntmpList.CS_QTY = _lst.Posa_qty;
                        _rtntmpList.CS_BALQTY = _lst.Posa_qty;
                        _rtntmpList.CS_COM = _com;
                        _rtntmpList.CS_LOC = _loc;
                        _rtntmpList.CS_PC = _pc;
                        _rtntmpList.CS_ITMCD = _lst.Posa_po_itm;

                        _jobItm = (from _jobLst in _serJobDet
                                   where _jobLst.Jbd_jobline == _lst.Posa_job_line && _jobLst.Jbd_jobno == _lst.Posa_job_no
                                   select _jobLst.Jbd_itm_cd).ToList<string>()[0];

                        _jobSer = (from _jobLst in _serJobDet
                                   where _jobLst.Jbd_jobline == _lst.Posa_job_line && _jobLst.Jbd_jobno == _lst.Posa_job_no
                                   select _jobLst.Jbd_ser1).ToList<string>()[0];

                        _jobWara = (from _jobLst in _serJobDet
                                    where _jobLst.Jbd_jobline == _lst.Posa_job_line && _jobLst.Jbd_jobno == _lst.Posa_job_no
                                    select _jobLst.Jbd_warr).ToList<string>()[0];

                        _rtntmpList.CS_JOBITMCD = _jobItm;
                        _rtntmpList.CS_JOBITMSER = _jobSer;
                        _rtntmpList.CS_JOBITMWARR = _jobWara;                        
                        
                        _rtntmpList.CS_ITMSER = "N/A";
                        _rtntmpList.CS_UOM = _lstItm.Mi_itm_uom;                        
                        _rtntmpList.CS_DIRECT = "IN";
                        _rtntmpList.CS_DOCTP = "";
                        _rtntmpList.CS_DOCNO = _lst.Posa_po_no;
                        _rtntmpList.CS_SERID = 0;
                        _rtntmpList.CS_DOCDT = _lst.Posa_app_dt;
                        _rtntmpList.CS_ITMTP = _lstItm.Mi_itm_tp;
                        _rtntmpList.CS_ISFOC = 0;
                        _rtntmpList.CS_ISREVITM = 0;
                        _rtntmpList.CS_ACT = 1;

                        DataTable _poItems = new DataTable();
                        _poItems = _custServiceDAL.GetPoItemDetails(_lst.Posa_job_no, _lst.Posa_po_itm_line, _lst.Posa_po_itm, _lst.Posa_po_no);
                        if (_poItems.Rows.Count > 0)
                        {
                            foreach (DataRow _items in _poItems.Rows)
                            {
                                //initialize unit price and discountrate
                                decimal _unitPrice = _items["pod_unit_price"] == DBNull.Value ? 0 : Convert.ToDecimal(_items["pod_unit_price"]);
                                decimal _qty = _lst.Posa_qty;
                                decimal _discountAmt = _items["pod_dis_amt"] == DBNull.Value ? 0 : Convert.ToDecimal(_items["pod_dis_amt"]);

                                ////get margn details
                                //DataTable _dtCostMrgin = _salesDAL.GetServiceCostMargin(_com, "", _lst.Posa_po_itm);
                                ////calculate margin
                                //if (_dtCostMrgin.Rows.Count > 0)
                                //    _unitPrice = _unitPrice / 100 * (100 + Convert.ToDecimal(_dtCostMrgin.Rows[0]["CSM_VAL"] == DBNull.Value ? 0 : _dtCostMrgin.Rows[0]["CSM_VAL"]));
                                //else { _unitPrice = _unitPrice; }

                                _unitPrice = _unitPrice - (_discountAmt / _qty);
                                _rtntmpList.CS_UNITCOST = _unitPrice;
                                _rtntmpList.CS_TOTUNITCOST = _unitPrice * _qty;

                                _rtntmpList.CS_ITMDESC = _items["pod_item_desc"] == DBNull.Value ? _lstItm.Mi_shortdesc : _items["pod_item_desc"].ToString();
                 
                            }
                        }

                        //_rtntmpList.CS_UNITCOST = _lst.Posa_unit_cost;
                        //_rtntmpList.CS_TOTUNITCOST = _lst.Posa_unit_cost * _lst.Posa_qty;                      
                                                
                       // _rtntmpList.CS_ITMDESC = _lstItm.Mi_shortdesc;
                        
                        _rtntmpList.CS_LINE = _rtnList.Count + 1;
                        _rtnList.Add(_rtntmpList);
                    }
                }
            }


            return _rtnList;
        }

        //Darshana 04-12-2014
        public List<Service_Confirm_detail> ProcessJobRev(List<Service_job_Det> _serJobDet)
        {
            _custServiceDAL = new CustServiceDAL();
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();
            _salesDAL = new SalesDAL();
            List<Service_Confirm_detail> _rtnList = new List<Service_Confirm_detail>();
            List<InventoryBatchRefN> _allBalList = new List<InventoryBatchRefN>();
            Service_Confirm_detail _rtntmpList = new Service_Confirm_detail();
            List<Service_Purchase_Approval> _serPoApp = new List<Service_Purchase_Approval>();
            List<Service_Job_Charges> _serJobChg = new List<Service_Job_Charges>();

            string _pc = "";
            string _jobItm = "";
            string _jobSer = "";
            string _jobWara = "";
            string _loc = "";
            string _com = "";
            decimal _totAmt = 0;
            decimal _netAmt = 0;

            //kapila 14/6/2017
            MasterCompany _masterComp = null;
            Boolean _isStrucBaseTax = false;

            //Check inventory Bal.
            foreach (Service_job_Det _det in _serJobDet)
            {
                List<InventoryBatchRefN> _inrBat = _custServiceDAL.GetInvBalByJob(_det.Jbd_com, _det.Jbd_loc, _det.Jbd_jobno, _det.Jbd_jobline);
                _pc = _det.Jbd_pc;
                if (_inrBat != null)
                {
                    _allBalList.AddRange(_inrBat);
                }
            }

            //seperate cost with serail and none serial_____________
            foreach (InventoryBatchRefN _lst in _allBalList)
            {
                List<MasterItem> _itm = _inventoryDAL.GetAllItems(_lst.Inb_com, _lst.Inb_itm_cd);
                if (_itm != null)
                {
                    foreach (MasterItem _lstItm in _itm)
                    {
                        if (_lstItm.Mi_is_ser1 == 1)
                        {
                            List<InventorySerialRefN> _serList = _custServiceDAL.GetBalSerForJob(_lst.Inb_com, _lst.Inb_loc, _lst.Inb_seq_no, _lst.Inb_itm_line, _lst.Inb_batch_line);
                            if (_serList != null)
                            {
                                foreach (InventorySerialRefN _serTmp in _serList)
                                {
                                    _rtntmpList = new Service_Confirm_detail();
                                    _rtntmpList.Jcd_jobno = _lst.Inb_job_no;
                                    _rtntmpList.Jcd_joblineno = _lst.Inb_base_refline;
                                    _rtntmpList.Jcd_itmcd = _lst.Inb_itm_cd;
                                    _rtntmpList.Jcd_itmstus = _lst.Inb_itm_stus;
                                    _rtntmpList.Jcd_qty = 1;// _lst.Inb_qty;
                                    _rtntmpList.Jcd_balqty = 1;// _lst.Inb_qty;
                                    _rtntmpList.Jcd_pb = "";
                                    _rtntmpList.Jcd_pblvl = "";
                                    _rtntmpList.Jcd_unitprice = 0;
                                    _rtntmpList.Jcd_amt = 0;
                                    _rtntmpList.Jcd_tax_rt = 0;
                                    _rtntmpList.Jcd_tax = 0;
                                    _rtntmpList.Jcd_dis_rt = 0;
                                    _rtntmpList.Jcd_net_amt = 0;
                                    _rtntmpList.Jcd_itmtp = _lstItm.Mi_itm_tp;
                                    _jobItm = (from _jobLst in _serJobDet
                                               where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                               select _jobLst.Jbd_itm_cd).ToList<string>()[0];

                                    _jobSer = (from _jobLst in _serJobDet
                                               where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                               select _jobLst.Jbd_ser1).ToList<string>()[0];

                                    _jobWara = (from _jobLst in _serJobDet
                                                where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                                select _jobLst.Jbd_warr).ToList<string>()[0];

                                    _rtntmpList.Jcd_jobitmcd = _jobItm;
                                    _rtntmpList.Jcd_jobitmser = _jobSer;
                                    _rtntmpList.Jcd_jobwarrno = _jobWara;
                                    _rtntmpList.Jcd_itmdesc = _lstItm.Mi_shortdesc;
                                    _rtntmpList.Jcd_itmmodel = _lstItm.Mi_model;
                                    _rtntmpList.Jcd_itmbrand = _lstItm.Mi_brand;
                                    _rtntmpList.Jcd_itmuom = _lstItm.Mi_itm_uom;
                                    _rtntmpList.Jcd_mov_doc = _serTmp.Ins_doc_no;
                                    _rtntmpList.Jcd_itmline = _serTmp.Ins_itm_line;
                                    _rtntmpList.Jcd_batchline = _serTmp.Ins_batch_line;
                                    _rtntmpList.Jcd_serline = _serTmp.Ins_ser_line;
                                    _rtntmpList.Jcd_ser_id = _serTmp.Ins_ser_id;
                                    _rtntmpList.Jcd_line = _rtnList.Count + 1;
                                    _rtntmpList.Jcd_mainitmcd = _lst.Inb_mitm_cd;
                                    if (!String.IsNullOrEmpty(_lst.Inb_mitm_cd))
                                    {
                                        List<MasterItem> _mainItm = _inventoryDAL.GetAllItems(_lst.Inb_com, _lst.Inb_mitm_cd);
                                        foreach (MasterItem _main in _mainItm)
                                        {
                                            _rtntmpList.Jcd_mainitmdesc = _main.Mi_shortdesc;
                                        }
                                    }
                                    _rtntmpList.IsPoItem = false; //Add by akila 2017/06/17
                                    _rtnList.Add(_rtntmpList);
                                }
                            }
                        }
                        else
                        {
                            _rtntmpList = new Service_Confirm_detail();
                            _rtntmpList.Jcd_jobno = _lst.Inb_job_no;
                            _rtntmpList.Jcd_joblineno = _lst.Inb_base_refline;
                            _rtntmpList.Jcd_itmcd = _lst.Inb_itm_cd;
                            _rtntmpList.Jcd_itmstus = _lst.Inb_itm_stus;
                            _rtntmpList.Jcd_qty = _lst.Inb_qty;
                            _rtntmpList.Jcd_balqty = _lst.Inb_qty;
                            _rtntmpList.Jcd_pb = "";
                            _rtntmpList.Jcd_pblvl = "";
                            _rtntmpList.Jcd_unitprice = 0;
                            _rtntmpList.Jcd_amt = 0;
                            _rtntmpList.Jcd_tax_rt = 0;
                            _rtntmpList.Jcd_tax = 0;
                            _rtntmpList.Jcd_dis_rt = 0;
                            _rtntmpList.Jcd_net_amt = 0;
                            _rtntmpList.Jcd_itmtp = _lstItm.Mi_itm_tp;
                            _jobItm = (from _jobLst in _serJobDet
                                       where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                       select _jobLst.Jbd_itm_cd).ToList<string>()[0];

                            _jobSer = (from _jobLst in _serJobDet
                                       where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                       select _jobLst.Jbd_ser1).ToList<string>()[0];

                            _jobWara = (from _jobLst in _serJobDet
                                        where _jobLst.Jbd_jobline == _lst.Inb_base_refline && _jobLst.Jbd_jobno == _lst.Inb_job_no
                                        select _jobLst.Jbd_warr).ToList<string>()[0];

                            _rtntmpList.Jcd_jobitmcd = _jobItm;
                            _rtntmpList.Jcd_jobitmser = _jobSer;
                            _rtntmpList.Jcd_jobwarrno = _jobWara;
                            _rtntmpList.Jcd_itmdesc = _lstItm.Mi_shortdesc;
                            _rtntmpList.Jcd_itmmodel = _lstItm.Mi_model;
                            _rtntmpList.Jcd_itmbrand = _lstItm.Mi_brand;
                            _rtntmpList.Jcd_itmuom = _lstItm.Mi_itm_uom;
                            _rtntmpList.Jcd_mov_doc = _lst.Inb_doc_no;
                            _rtntmpList.Jcd_itmline = _lst.Inb_itm_line;
                            _rtntmpList.Jcd_batchline = _lst.Inb_batch_line;
                            _rtntmpList.Jcd_serline = 0;
                            _rtntmpList.Jcd_ser_id = 0;
                            _rtntmpList.Jcd_line = _rtnList.Count + 1;
                            _rtntmpList.Jcd_mainitmcd = _lst.Inb_mitm_cd;
                            if (!String.IsNullOrEmpty(_lst.Inb_mitm_cd))
                            {
                                List<MasterItem> _mainItm = _inventoryDAL.GetAllItems(_lst.Inb_com, _lst.Inb_mitm_cd);
                                foreach (MasterItem _main in _mainItm)
                                {
                                    _rtntmpList.Jcd_mainitmdesc = _main.Mi_shortdesc;
                                }
                            }
                            _rtntmpList.IsPoItem = false; //Add by akila 2017/06/17
                            _rtnList.Add(_rtntmpList);
                        }
                    }
                }
            }

            //Get service po details____________
            foreach (Service_job_Det _det in _serJobDet)
            {
                List<Service_Purchase_Approval> _tmpPOList = _custServiceDAL.GetServicePOApp(_det.Jbd_jobno, _det.Jbd_jobline);
                _pc = _det.Jbd_pc;
                _loc = _det.Jbd_loc;
                _com = _det.Jbd_com;
                if (_tmpPOList != null)
                {
                    _serPoApp.AddRange(_tmpPOList);
                }
            }

            //kapila 14/6/2017
            _masterComp = _generalDAL.GetCompByCode(_com);
            if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;


            foreach (Service_Purchase_Approval _lst in _serPoApp)
            {
                List<MasterItem> _itm = _inventoryDAL.GetAllItems(_com, _lst.Posa_po_itm);
                if (_itm != null)
                {
                    foreach (MasterItem _lstItm in _itm)
                    {
                        _rtntmpList = new Service_Confirm_detail();
                        _rtntmpList.Jcd_jobno = _lst.Posa_job_no;
                        _rtntmpList.Jcd_joblineno = _lst.Posa_job_line;
                        _rtntmpList.Jcd_itmcd = _lst.Posa_po_itm;
                        _rtntmpList.Jcd_itmstus = "GOD";
                        _rtntmpList.Jcd_qty = _lst.Posa_qty;
                        _rtntmpList.Jcd_balqty = _lst.Posa_qty;
                        _rtntmpList.Jcd_pb = "PO"; //updated by akila 2017/06/28
                        _rtntmpList.Jcd_pblvl = "PO";
                        //_rtntmpList.Jcd_pb = "";
                        //_rtntmpList.Jcd_pblvl = "";

                        //kapila 14/6/2017
                        //_rtntmpList.Jcd_unitprice = _lst.Posa_unit_cost;

                        //uppdated by akila 2017/06/26

                        DataTable _poItems = new DataTable();
                        _poItems = _custServiceDAL.GetPoItemDetails(_lst.Posa_job_no, _lst.Posa_po_itm_line, _lst.Posa_po_itm, _lst.Posa_po_no);
                        if (_poItems.Rows.Count > 0)
                        { 
                            foreach (DataRow _items in _poItems.Rows)
                            {
                                //initialize unit price and discountrate
                                decimal _unitPrice = _items["pod_unit_price"] == DBNull.Value ? 0 : Convert.ToDecimal(_items["pod_unit_price"]);
                                decimal _qty = _lst.Posa_qty;
                                decimal _discountAmt = _items["pod_dis_amt"] == DBNull.Value ? 0 : Convert.ToDecimal(_items["pod_dis_amt"]);

                                _unitPrice = _unitPrice - (_discountAmt / _qty);
                                
                                //get margn details
                                DataTable _dtCostMrgin = _salesDAL.GetServiceCostMargin(_com, "", _lst.Posa_po_itm);      
                                //calculate margin
                                if (_dtCostMrgin.Rows.Count > 0)
                                    _unitPrice = _unitPrice / 100 * (100 + Convert.ToDecimal(_dtCostMrgin.Rows[0]["CSM_VAL"] == DBNull.Value ? 0 : _dtCostMrgin.Rows[0]["CSM_VAL"]));
                                else { _unitPrice = _unitPrice; }

                                _rtntmpList.Jcd_unitprice = _unitPrice;
                                _rtntmpList.Jcd_amt = _unitPrice * _qty;
                                _rtntmpList.Jcd_dis_rt = 0;                               

                                List<MasterItemTax> _tax = new List<MasterItemTax>();
                                if (_isStrucBaseTax == true)       //kapila
                                {
                                    MasterItem _mstItem =  new MasterItem();
                                    _mstItem = _inventoryDAL.GetItem(_com, _lst.Posa_po_itm);
                                    _tax = _salesDAL.GetItemTax_strucbase(_com, _lst.Posa_po_itm, "GOD", string.Empty, string.Empty, _mstItem.Mi_anal1);
                                }
                                else
                                    _tax = _salesDAL.GetItemTax(_com, _lst.Posa_po_itm, "GOD", string.Empty, string.Empty);

                                decimal _taxRate = 0;
                                if ((_tax != null) && (_tax.Count > 0)) { _taxRate = _tax[0].Mict_tax_rate; } else { _taxRate = 0; }
                                _rtntmpList.Jcd_tax_rt = _taxRate;
                                _rtntmpList.Jcd_tax = (_rtntmpList.Jcd_amt * _taxRate) /100;
                                _rtntmpList.Jcd_net_amt = _rtntmpList.Jcd_amt  + _rtntmpList.Jcd_tax;
                            }
                        }
                        
                        ////-----------------------------------------
                        
                        //_rtntmpList.Jcd_amt = _lst.Posa_unit_cost * _lst.Posa_qty;
                        //_rtntmpList.Jcd_tax_rt = _tax[0].Mict_tax_rate;
                        //_rtntmpList.Jcd_tax = (_lst.Posa_unit_cost / 100 * _tax[0].Mict_tax_rate) * _lst.Posa_qty;
                        //_rtntmpList.Jcd_dis_rt = 0;
                        //_totAmt = (_lst.Posa_unit_cost * _lst.Posa_qty) + (_lst.Posa_unit_cost / 100 * _tax[0].Mict_tax_rate) * _lst.Posa_qty;
                        ////check margin assigned
                        //DataTable _dtCostMrgin = _salesDAL.GetServiceCostMargin(_com, "", _lst.Posa_po_itm);
                        //if (_dtCostMrgin.Rows.Count > 0)
                        //    _netAmt = _totAmt / 100 * (100 + Convert.ToDecimal(_dtCostMrgin.Rows[0]["CSM_VAL"]));
                        //else
                        //    _netAmt = _totAmt;

                        //_rtntmpList.Jcd_net_amt = _netAmt;
                        _rtntmpList.Jcd_itmtp = _lstItm.Mi_itm_tp;

                        _jobItm = (from _jobLst in _serJobDet
                                   where _jobLst.Jbd_jobline == _lst.Posa_job_line && _jobLst.Jbd_jobno == _lst.Posa_job_no
                                   select _jobLst.Jbd_itm_cd).ToList<string>()[0];

                        _jobSer = (from _jobLst in _serJobDet
                                   where _jobLst.Jbd_jobline == _lst.Posa_job_line && _jobLst.Jbd_jobno == _lst.Posa_job_no
                                   select _jobLst.Jbd_ser1).ToList<string>()[0];

                        _jobWara = (from _jobLst in _serJobDet
                                    where _jobLst.Jbd_jobline == _lst.Posa_job_line && _jobLst.Jbd_jobno == _lst.Posa_job_no
                                    select _jobLst.Jbd_warr).ToList<string>()[0];

                        _rtntmpList.Jcd_jobitmcd = _jobItm;
                        _rtntmpList.Jcd_jobitmser = _jobSer;
                        _rtntmpList.Jcd_jobwarrno = _jobWara;

                        //Add by akila 2017/06/17 - If PO details available load item description from po details table
                        DataTable _poItemDetails = new DataTable();
                        _poItemDetails = _custServiceDAL.GetPoItemDetails(_lst.Posa_job_no, _lst.Posa_po_itm_line, _lst.Posa_po_itm, _lst.Posa_po_no);
                        if (_poItemDetails.Rows.Count > 0)
                        {
                            foreach (DataRow _poItem in _poItemDetails.Rows)
                            {
                                _rtntmpList.Jcd_itmdesc = _poItem["pod_item_desc"] == DBNull.Value ? _lstItm.Mi_shortdesc : _poItem["pod_item_desc"].ToString();
                            }
                        }
                        else
                        {
                            _rtntmpList.Jcd_itmdesc = _lstItm.Mi_shortdesc;
                        }

                        // _rtntmpList.Jcd_itmdesc = _lstItm.Mi_shortdesc;
                        _rtntmpList.Jcd_itmmodel = _lstItm.Mi_model;
                        _rtntmpList.Jcd_itmbrand = _lstItm.Mi_brand;
                        _rtntmpList.Jcd_itmuom = _lstItm.Mi_itm_uom;
                        _rtntmpList.Jcd_mov_doc = "";
                        _rtntmpList.Jcd_itmline = 1;
                        _rtntmpList.Jcd_batchline = 1;
                        _rtntmpList.Jcd_serline = 0;
                        _rtntmpList.Jcd_ser_id = 0;
                        _rtntmpList.Jcd_line = _rtnList.Count + 1;
                        _rtntmpList.IsPoItem = true; //Add by akila 2017/06/17
                        _rtnList.Add(_rtntmpList);
                    }
                }
            }

            //Get job charges
            foreach (Service_job_Det _det in _serJobDet)
            {
                List<Service_Job_Charges> _tmpChaList = _custServiceDAL.GetServiceJobCharges(_det.Jbd_jobno, _det.Jbd_jobline);
                _pc = _det.Jbd_pc;
                _loc = _det.Jbd_loc;
                _com = _det.Jbd_com;
                if (_tmpChaList != null)
                {
                    _serJobChg.AddRange(_tmpChaList);
                }
            }

            foreach (Service_Job_Charges _lst in _serJobChg)
            {
                List<MasterItem> _itm = _inventoryDAL.GetAllItems(_com, _lst.Sjc_itm_cd);
                if (_itm != null)
                {
                    foreach (MasterItem _lstItm in _itm)
                    {
                        _rtntmpList = new Service_Confirm_detail();
                        _rtntmpList.Jcd_jobno = _lst.Sjc_jobno;
                        _rtntmpList.Jcd_joblineno = _lst.Sjc_jobline;
                        _rtntmpList.Jcd_itmcd = _lst.Sjc_itm_cd;
                        _rtntmpList.Jcd_itmstus = _lst.Sjc_itm_stus;
                        _rtntmpList.Jcd_qty = _lst.Sjc_qty;
                        _rtntmpList.Jcd_balqty = _lst.Sjc_qty;
                        _rtntmpList.Jcd_pb = "N/A";
                        _rtntmpList.Jcd_pblvl = "N/A";
                        _rtntmpList.Jcd_unitprice = _lst.Sjc_unit_rt;
                        _rtntmpList.Jcd_amt = _lst.Sjc_qty * _lst.Sjc_unit_rt;
                        _rtntmpList.Jcd_tax_rt = 0;
                        _rtntmpList.Jcd_tax = 0;
                        _rtntmpList.Jcd_dis_rt = 0;
                        _rtntmpList.Jcd_dis = 0;
                        _rtntmpList.Jcd_net_amt = _rtntmpList.Jcd_amt - _rtntmpList.Jcd_dis + _rtntmpList.Jcd_tax;
                        _rtntmpList.Jcd_itmtp = _lstItm.Mi_itm_tp;

                        _jobItm = (from _jobLst in _serJobDet
                                   where _jobLst.Jbd_jobline == _lst.Sjc_jobline && _jobLst.Jbd_jobno == _lst.Sjc_jobno
                                   select _jobLst.Jbd_itm_cd).ToList<string>()[0];

                        _jobSer = (from _jobLst in _serJobDet
                                   where _jobLst.Jbd_jobline == _lst.Sjc_jobline && _jobLst.Jbd_jobno == _lst.Sjc_jobno
                                   select _jobLst.Jbd_ser1).ToList<string>()[0];

                        _jobWara = (from _jobLst in _serJobDet
                                    where _jobLst.Jbd_jobline == _lst.Sjc_jobline && _jobLst.Jbd_jobno == _lst.Sjc_jobno
                                    select _jobLst.Jbd_warr).ToList<string>()[0];

                        _rtntmpList.Jcd_jobitmcd = _jobItm;
                        _rtntmpList.Jcd_jobitmser = _jobSer;
                        _rtntmpList.Jcd_jobwarrno = _jobWara;

                        //updated by akila 2017/06/17
                        if (string.IsNullOrEmpty(_rtntmpList.Jcd_itmdesc)) { _rtntmpList.Jcd_itmdesc = _lstItm.Mi_shortdesc; }
                        //_rtntmpList.Jcd_itmdesc = _lstItm.Mi_shortdesc;
                        _rtntmpList.Jcd_itmmodel = _lstItm.Mi_model;
                        _rtntmpList.Jcd_itmbrand = _lstItm.Mi_brand;
                        _rtntmpList.Jcd_itmuom = _lstItm.Mi_itm_uom;
                        _rtntmpList.Jcd_mov_doc = "";
                        _rtntmpList.Jcd_itmline = 1;
                        _rtntmpList.Jcd_batchline = 1;
                        _rtntmpList.Jcd_serline = 0;
                        _rtntmpList.Jcd_ser_id = 0;
                        _rtntmpList.Jcd_line = _rtnList.Count + 1;
                        _rtntmpList.IsPoItem = false; //Add by akila 2017/06/17
                        _rtnList.Add(_rtntmpList);
                    }
                }
            }


            return _rtnList;
        }

        //Tharaka 2014-12-03
        public List<Service_JOB_HDR> GetServiceJobHeaderAll(string jobNo, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceJobHeaderAll(jobNo, com);
        }

        //Tharaka 2014-12-10
        public Int32 ServiceApprove(string jobNumber, Int32 jobLine, String com, String location, String PC, String userID, String sesstionID, String status, String Remark, Int32 option, out String errorMsg, String Additional1, String Additional2)
        {
            ///
            // -5 stock items available for the job
            // -6 Supplier warranty claim requests available
            // -7 MRN available for the job
            // -8 item is underwarranty
            // -9 item is over warranty
            // -10 Confirmation is Invoiced
            // -11 MRN is Picked by other location
            // -12 No hold Job
            ///
            errorMsg = string.Empty;

            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                Service_JOB_HDR _jobHdr = new Service_JOB_HDR();
                List<Service_job_Det> oScvDetail = _custServiceDAL.GetJobDetails(jobNumber, jobLine, com);

                Service_job_Det oselectedDetail = new Service_job_Det();
                _jobHdr = _custServiceDAL.GET_SCV_JOB_HDR(jobNumber, com);

                if (jobLine == 0)
                { oselectedDetail = null; }
                else
                { oselectedDetail = oScvDetail[0]; }

                if (option == (Int32)CommonEnum.Job_Cancel)
                {
                    #region Job Close

                    #region Check for stock items

                    if (oScvDetail != null && oScvDetail.Count > 0)
                    {
                        List<Service_stockReturn> oStockItems = _custServiceDAL.Get_ServiceWIP_StockReturnItems(com, jobNumber, jobLine, oScvDetail[0].Jbd_itm_cd, location);

                        if (oStockItems != null && oStockItems.Count > 0)
                        {
                            _effects = -5;
                            return _effects;
                        }
                    }
                    #endregion Check for stock items

                    #region Supplier warranty claim requset
                    if (oScvDetail != null && oScvDetail.Count > 0)
                    {
                        if (oScvDetail.FindAll(x => x.Jbd_reqwcn == 1 && x.Jbd_recwcn == 0).Count > 0)
                        {
                            _effects = -6;
                            return _effects;
                        }
                    }
                    #endregion Supplier warranty claim requset

                    #region Check For MRN
                    if (oScvDetail != null && oScvDetail.Count > 0)
                    {
                        DataTable dtTemp = _custServiceDAL.GetMRNItemsByJobline(com, jobNumber, jobLine);
                        if (dtTemp != null && dtTemp.Rows.Count > 0)
                        {
                            _effects = -7;
                            return _effects;
                        }
                    }
                    #endregion Check For MRN

                    if (_effects == 0)
                    {
                        Log_Common_File olog = new Log_Common_File();
                        olog.Lcf_log_by = userID;
                        olog.Lcf_log_dt = DateTime.Now;
                        olog.Lcf_com = com;
                        olog.Lcf_pc = PC;
                        olog.Lcf_loc = location;
                        olog.Lcf_func_id = _custServiceDAL.GET_LOG_FUNC_ID("SCV_APP", CommonEnum.Job_hold_and_re_open.ToString());
                        olog.Lcf_func_doc = jobNumber;
                        olog.Lcf_func_line = jobLine;
                        olog.Lcf_col1 = "JBD_STAGE";
                        if (jobLine == 0)
                        {
                            olog.Lcf_col1_val = _jobHdr.SJB_JOBSTAGE.ToString();
                        }
                        else
                        {
                            olog.Lcf_col1_val = oselectedDetail.Jbd_stage.ToString();
                        }
                        olog.Lcf_col2 = "Remark";
                        olog.Lcf_col2_val = Remark;
                        olog.Lcf_col3 = string.Empty;
                        olog.Lcf_col3_val = string.Empty;
                        olog.Lcf_col4 = string.Empty;
                        olog.Lcf_col4_val = string.Empty;
                        olog.Lcf_col5 = string.Empty;
                        olog.Lcf_col5_val = string.Empty;

                        Service_Job_StageLog oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = jobNumber;
                        oLog.SJL_JOBLINE = jobLine;
                        oLog.SJL_COM = com;
                        oLog.SJL_LOC = location;
                        oLog.SJL_JOBSTAGE = 12;
                        oLog.SJL_CRE_BY = userID;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = sesstionID;
                        oLog.SJL_INFSUP = 0;

                        _effects = _custServiceDAL.SAVE_LOG_COMMON_FILE(olog);
                        _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                        _effects = _custServiceDAL.Update_JobDetailStage(jobNumber, jobLine, 12);
                        if (jobLine > 0)
                        {
                            _effects = _custServiceDAL.Update_ScvJobDetRemark(oScvDetail[0].Jbd_tech_rmk, Remark, jobNumber, jobLine, com, location, "", oselectedDetail.Jbd_tech_cls_rmk);
                        }
                    }

                    #endregion Job Close
                }
                else if (option == (Int32)CommonEnum.Update_job_items_as_under_warranty)
                {
                    #region Under Warranty

                    //Warranty Status (1-Under warranty, 0-orver warranty)

                    //_custServiceDAL.ConnectionOpen();
                    //_custServiceDAL.BeginTransaction();

                    if (status.ToUpper() == "Under Warranty".ToUpper())
                    {
                        if (oselectedDetail.Jbd_warr_stus == 1)
                        {
                            _effects = -9;
                            return _effects;
                        }
                        _effects = _custServiceDAL.UPDATE_SCV_JOB_DET_WAR_STUS(1, oselectedDetail.Jbd_seq_no, oselectedDetail.Jbd_jobno, oselectedDetail.Jbd_jobline);
                    }
                    else if (status.ToUpper() == "Over Warranty".ToUpper())
                    {
                        if (oselectedDetail.Jbd_warr_stus == 0)
                        {
                            _effects = -8;
                            return _effects;
                        }
                        _effects = _custServiceDAL.UPDATE_SCV_JOB_DET_WAR_STUS(0, oselectedDetail.Jbd_seq_no, oselectedDetail.Jbd_jobno, oselectedDetail.Jbd_jobline);
                    }

                    Log_Common_File olog = new Log_Common_File();
                    olog.Lcf_log_by = userID;
                    olog.Lcf_log_dt = DateTime.Now;
                    olog.Lcf_com = com;
                    olog.Lcf_pc = PC;
                    olog.Lcf_loc = location;
                    olog.Lcf_func_id = _custServiceDAL.GET_LOG_FUNC_ID("SCV_APP", CommonEnum.Update_job_items_as_under_warranty.ToString());
                    olog.Lcf_func_doc = jobNumber;
                    olog.Lcf_func_line = jobLine;
                    olog.Lcf_col1 = "JBD_WARR_STUS";
                    olog.Lcf_col1_val = oselectedDetail.Jbd_warr_stus.ToString();
                    olog.Lcf_col2 = "Remark";
                    olog.Lcf_col2_val = Remark;
                    olog.Lcf_col3 = string.Empty;
                    olog.Lcf_col3_val = string.Empty;
                    olog.Lcf_col4 = string.Empty;
                    olog.Lcf_col4_val = string.Empty;
                    olog.Lcf_col5 = string.Empty;
                    olog.Lcf_col5_val = string.Empty;
                    _effects = _custServiceDAL.SAVE_LOG_COMMON_FILE(olog);

                    #endregion Under Warranty
                }
                else if (option == (Int32)CommonEnum.Job_confirmation_cancel)
                {
                    #region Job onfirmation cancel

                    Service_confirm_Header oConfirmHeader = _custServiceDAL.GetServiceConfirmHeader(com, "", location, PC, "", "", "", Additional1, DateTime.MinValue, DateTime.MaxValue)[0];
                    if (oConfirmHeader.Jch_isdoneinvoiced == 1)
                    {
                        _effects = -10;
                        return _effects;
                    }

                    _effects = _custServiceDAL.UPDATE_SCV_CONF_HDR_STUS("C", oselectedDetail.Jbd_seq_no, com, Additional1);

                    Log_Common_File olog = new Log_Common_File();
                    olog.Lcf_log_by = userID;
                    olog.Lcf_log_dt = DateTime.Now;
                    olog.Lcf_com = com;
                    olog.Lcf_pc = PC;
                    olog.Lcf_loc = location;
                    olog.Lcf_func_id = _custServiceDAL.GET_LOG_FUNC_ID("SCV_APP", CommonEnum.Job_confirmation_cancel.ToString());
                    olog.Lcf_func_doc = jobNumber;
                    olog.Lcf_func_line = jobLine;
                    olog.Lcf_col1 = "JCH_STUS";
                    olog.Lcf_col1_val = "A";
                    olog.Lcf_col2 = "Remark";
                    olog.Lcf_col2_val = Remark;
                    olog.Lcf_col3 = string.Empty;
                    olog.Lcf_col3_val = string.Empty;
                    olog.Lcf_col4 = string.Empty;
                    olog.Lcf_col4_val = string.Empty;
                    olog.Lcf_col5 = string.Empty;
                    olog.Lcf_col5_val = string.Empty;
                    _effects = _custServiceDAL.SAVE_LOG_COMMON_FILE(olog);

                    #endregion Job onfirmation cancel
                }
                else if (option == (Int32)CommonEnum.Job_FOC_approval)
                {
                    #region Job FOC approval

                    if (status == "Approve")
                    {
                        _effects = _custServiceDAL.UPDATE_SCV_JOB_DET_FOC(1, oselectedDetail.Jbd_seq_no, oselectedDetail.Jbd_jobno, oselectedDetail.Jbd_jobline);
                    }
                    else
                    {
                        _effects = _custServiceDAL.UPDATE_SCV_JOB_DET_FOC(2, oselectedDetail.Jbd_seq_no, oselectedDetail.Jbd_jobno, oselectedDetail.Jbd_jobline);
                    }
                    Log_Common_File olog = new Log_Common_File();
                    olog.Lcf_log_by = userID;
                    olog.Lcf_log_dt = DateTime.Now;
                    olog.Lcf_com = com;
                    olog.Lcf_pc = PC;
                    olog.Lcf_loc = location;
                    olog.Lcf_func_id = _custServiceDAL.GET_LOG_FUNC_ID("SCV_APP", CommonEnum.Job_FOC_approval.ToString());
                    olog.Lcf_func_doc = jobNumber;
                    olog.Lcf_func_line = jobLine;
                    olog.Lcf_col1 = "JBD_ISFOCAPP";
                    olog.Lcf_col1_val = oselectedDetail.Jbd_isfocapp.ToString();
                    olog.Lcf_col2 = "Remark";
                    olog.Lcf_col2_val = Remark;
                    olog.Lcf_col3 = string.Empty;
                    olog.Lcf_col3_val = string.Empty;
                    olog.Lcf_col4 = string.Empty;
                    olog.Lcf_col4_val = string.Empty;
                    olog.Lcf_col5 = string.Empty;
                    olog.Lcf_col5_val = string.Empty;
                    _effects = _custServiceDAL.SAVE_LOG_COMMON_FILE(olog);

                    #endregion Job FOC approval
                }
                else if (option == (Int32)CommonEnum.Job_hold_and_re_open)
                {
                    #region Job hold and re_open

                    int Jobstatus = 0;

                    if (status.ToUpper() == "Hold".ToUpper())
                    {
                        Jobstatus = 13;
                    }
                    else
                    {
                        Log_Common_File oLogrec = _custServiceDAL.GET_LOG_COMMN(com, PC, location, (Int32)CommonEnum.Job_hold_and_re_open, jobNumber, jobLine);
                        Jobstatus = Convert.ToInt32(oLogrec.Lcf_col1_val);
                    }

                    if (Jobstatus == 0)
                    {
                        _effects = -12;
                        return _effects;
                    }

                    Service_Job_StageLog oLog = new Service_Job_StageLog();
                    oLog.SJL_REQNO = "";
                    oLog.SJL_JOBNO = jobNumber;
                    oLog.SJL_JOBLINE = jobLine;
                    oLog.SJL_COM = com;
                    oLog.SJL_LOC = location;
                    oLog.SJL_JOBSTAGE = Convert.ToInt32(oselectedDetail.Jbd_stage);
                    oLog.SJL_CRE_BY = userID;
                    oLog.SJL_CRE_DT = DateTime.Now;
                    oLog.SJL_SESSION_ID = sesstionID;
                    oLog.SJL_INFSUP = 0;

                    Log_Common_File olog = new Log_Common_File();
                    olog.Lcf_log_by = userID;
                    olog.Lcf_log_dt = DateTime.Now;
                    olog.Lcf_com = com;
                    olog.Lcf_pc = PC;
                    olog.Lcf_loc = location;
                    olog.Lcf_func_id = _custServiceDAL.GET_LOG_FUNC_ID("SCV_APP", CommonEnum.Job_hold_and_re_open.ToString());
                    olog.Lcf_func_doc = jobNumber;
                    olog.Lcf_func_line = jobLine;
                    olog.Lcf_col1 = "JBD_STAGE";
                    olog.Lcf_col1_val = oselectedDetail.Jbd_stage.ToString();
                    olog.Lcf_col2 = "Remark";
                    olog.Lcf_col2_val = Remark;
                    olog.Lcf_col3 = string.Empty;
                    olog.Lcf_col3_val = string.Empty;
                    olog.Lcf_col4 = string.Empty;
                    olog.Lcf_col4_val = string.Empty;
                    olog.Lcf_col5 = string.Empty;
                    olog.Lcf_col5_val = string.Empty;

                    _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    _effects = _custServiceDAL.Update_JobDetailStage(jobNumber, jobLine, Jobstatus);
                    _effects = _custServiceDAL.SAVE_LOG_COMMON_FILE(olog);

                    #endregion Job hold and re_open
                }
                else if (option == (Int32)CommonEnum.Job_estimate_approval)
                {
                    #region Job estimate approval

                    Service_Estimate_Header oHeader = _custServiceDAL.GetServiceEstimateHeader(Additional1, com);

                    string StatusPara = string.Empty;
                    if (status == "Approve")
                    {
                        StatusPara = "A";
                    }
                    else if (status == "Reject")
                    {
                        StatusPara = "C";
                    }
                    else if (status == "Customer Approve")
                    {
                        StatusPara = "F";
                    }

                    _effects = _custServiceDAL.Update_Estimate_HEaderStatus(StatusPara, Additional1, userID);

                    Log_Common_File olog = new Log_Common_File();
                    olog.Lcf_log_by = userID;
                    olog.Lcf_log_dt = DateTime.Now;
                    olog.Lcf_com = com;
                    olog.Lcf_pc = PC;
                    olog.Lcf_loc = location;
                    olog.Lcf_func_id = _custServiceDAL.GET_LOG_FUNC_ID("SCV_APP", CommonEnum.Job_estimate_approval.ToString());
                    olog.Lcf_func_doc = jobNumber;
                    // olog.Lcf_func_line = jobLine;
                    olog.Lcf_col1 = "EST_STUS";
                    olog.Lcf_col1_val = oHeader.EST_STUS;
                    olog.Lcf_col2 = "Remark";
                    olog.Lcf_col2_val = Remark;
                    olog.Lcf_col3 = string.Empty;
                    olog.Lcf_col3_val = string.Empty;
                    olog.Lcf_col4 = string.Empty;
                    olog.Lcf_col4_val = string.Empty;
                    olog.Lcf_col5 = string.Empty;
                    olog.Lcf_col5_val = string.Empty;
                    _effects = _custServiceDAL.SAVE_LOG_COMMON_FILE(olog);

                    #endregion Job estimate approval
                }
                else if (option == (Int32)CommonEnum.Cancel_approved_mrn)
                {
                    #region Cancel approved mrn
                    // if the method beeing called for the second time.
                    if (status == "PartialCancel")
                    {
                        _effects = _custServiceDAL.Update_ReqHeaderStatus("N", userID, com, Additional1);

                        Log_Common_File olog = new Log_Common_File();
                        olog.Lcf_log_by = userID;
                        olog.Lcf_log_dt = DateTime.Now;
                        olog.Lcf_com = com;
                        olog.Lcf_pc = PC;
                        olog.Lcf_loc = location;
                        olog.Lcf_func_id = _custServiceDAL.GET_LOG_FUNC_ID("SCV_APP", CommonEnum.Cancel_approved_mrn.ToString());
                        olog.Lcf_func_doc = jobNumber;
                        olog.Lcf_func_line = jobLine;
                        olog.Lcf_col1 = "ITR_STUS";
                        olog.Lcf_col1_val = "A";
                        olog.Lcf_col2 = "Remark";
                        olog.Lcf_col2_val = Remark;
                        olog.Lcf_col3 = string.Empty;
                        olog.Lcf_col3_val = string.Empty;
                        olog.Lcf_col4 = string.Empty;
                        olog.Lcf_col4_val = string.Empty;
                        olog.Lcf_col5 = string.Empty;
                        olog.Lcf_col5_val = string.Empty;
                        _effects = _custServiceDAL.SAVE_LOG_COMMON_FILE(olog);
                    }
                    else
                    {
                        DataTable dtTemp = _custServiceDAL.GetIntHdrByOtherDocNumber(Additional1, com);

                        if (dtTemp != null && dtTemp.Rows.Count > 0)
                        {
                            for (int i = 0; i < dtTemp.Rows.Count; i++)
                            {
                                errorMsg += dtTemp.Rows[i]["ITH_DOC_NO"].ToString() + ", ";
                            }
                            _effects = -11;
                            return _effects;
                        }
                        else
                        {
                            _effects = _custServiceDAL.Update_ReqHeaderStatus("C", userID, com, Additional1);

                            Log_Common_File olog = new Log_Common_File();
                            olog.Lcf_log_by = userID;
                            olog.Lcf_log_dt = DateTime.Now;
                            olog.Lcf_com = com;
                            olog.Lcf_pc = PC;
                            olog.Lcf_loc = location;
                            olog.Lcf_func_id = _custServiceDAL.GET_LOG_FUNC_ID("SCV_APP", CommonEnum.Cancel_approved_mrn.ToString());
                            olog.Lcf_func_doc = jobNumber;
                            olog.Lcf_func_line = jobLine;
                            olog.Lcf_col1 = "ITR_STUS";
                            olog.Lcf_col1_val = "A";
                            olog.Lcf_col2 = "Remark";
                            olog.Lcf_col2_val = Remark;
                            olog.Lcf_col3 = string.Empty;
                            olog.Lcf_col3_val = string.Empty;
                            olog.Lcf_col4 = string.Empty;
                            olog.Lcf_col4_val = string.Empty;
                            olog.Lcf_col5 = string.Empty;
                            olog.Lcf_col5_val = string.Empty;
                            _effects = _custServiceDAL.SAVE_LOG_COMMON_FILE(olog);
                        }
                    }
                    #endregion
                }
                else if (option == (Int32)CommonEnum.Customer_warranty_claim_request_approve)
                {
                    String statusasd = string.Empty;

                    if (status == "Reject")
                    {
                        statusasd = "R";
                    }
                    else
                    {
                        statusasd = "A";
                    }

                    _effects = _custServiceDAL.UPDATE_INT_SER_APP_STUS(statusasd, com, location, jobNumber, jobLine, userID);
                }
                else if (option == (Int32)CommonEnum.Cancel_appvoed_customer_warranty_clain_request)
                {
                    _effects = _custServiceDAL.UPDATE_INT_SER_APP_STUS("C", com, location, jobNumber, jobLine, userID);
                }
                else if (option == (Int32)CommonEnum.Pending_Jobs)
                {
                    #region Approve Pending Jobs

                    Log_Common_File olog = new Log_Common_File();
                    olog.Lcf_log_by = userID;
                    olog.Lcf_log_dt = DateTime.Now;
                    olog.Lcf_com = com;
                    olog.Lcf_pc = PC;
                    olog.Lcf_loc = location;
                    olog.Lcf_func_id = _custServiceDAL.GET_LOG_FUNC_ID("SCV_APP", CommonEnum.Pending_Jobs.ToString());
                    olog.Lcf_func_doc = jobNumber;
                    olog.Lcf_func_line = jobLine;
                    olog.Lcf_col1 = "JBD_STAGE";
                    olog.Lcf_col1_val = _jobHdr.SJB_JOBSTAGE.ToString();
                    olog.Lcf_col2 = "Remark";
                    olog.Lcf_col2_val = Remark;
                    olog.Lcf_col3 = string.Empty;
                    olog.Lcf_col3_val = string.Empty;
                    olog.Lcf_col4 = string.Empty;
                    olog.Lcf_col4_val = string.Empty;
                    olog.Lcf_col5 = string.Empty;
                    olog.Lcf_col5_val = string.Empty;

                    Service_Job_StageLog oLog = new Service_Job_StageLog();
                    oLog.SJL_REQNO = _jobHdr.SJB_REQNO;
                    oLog.SJL_JOBNO = jobNumber;
                    oLog.SJL_JOBLINE = jobLine;
                    oLog.SJL_COM = com;
                    oLog.SJL_LOC = location;
                    oLog.SJL_JOBSTAGE = 2;
                    oLog.SJL_CRE_BY = userID;
                    oLog.SJL_CRE_DT = DateTime.Now;
                    oLog.SJL_SESSION_ID = sesstionID;
                    oLog.SJL_INFSUP = 0;

                    _effects = _custServiceDAL.SAVE_LOG_COMMON_FILE(olog);
                    _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    _effects = _custServiceDAL.UpdateJobHeaderStage(jobNumber, 2, userID, sesstionID);                    

                    #endregion
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception)
            {
                _custServiceDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-12-11
        public List<Service_Appove> GetJobsServiceApprove(string com, DateTime From, DateTime To, string jobno, string Stage, string customer, string PC, Int32 option, String Loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobsServiceApprove(com, From, To, jobno, Stage, customer, PC, option, Loc);
        }

        //Tharaka 2014-12-15
        public List<Service_Estimate_Header> GetEstimateApprove(string com, DateTime From, DateTime To, string jobno, string Stage, string customer, string PC, Int32 option, String Loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetEstimateApprove(com, From, To, jobno, Stage, customer, PC, option, Loc);
        }

        public Service_Req_Hdr GetServiceReqHeader(string _com, string _reqNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceReqHeader(_com, _reqNo);
        }

        //Chamal 2014-Dec-15
        public Dictionary<Service_Req_Hdr, List<Service_Req_Det>> GetScvRequest(string _com, string _loc, string _reqNo, string _reqStatus, int _reqlineno, out int _returnStatus, out string _returnMsg)
        {
            try
            {
                Dictionary<Service_Req_Hdr, List<Service_Req_Det>> _result = new Dictionary<Service_Req_Hdr, List<Service_Req_Det>>();
                Service_Req_Hdr _reqHdr = null;
                List<Service_Req_Det> _reqDet = null;
                _custServiceDAL = new CustServiceDAL();
                    
                
                int _rtnStatus = 0;
                string _rtnMsg = string.Empty;

                _reqHdr = _custServiceDAL.GetServiceReqHeader(_com, _reqNo);
                if (_reqHdr == null)
                {
                    _returnMsg = "Invalid Service Request";
                    _returnStatus = -1;
                    return null;
                }
                _reqDet = _custServiceDAL.GetServiceReqDetails(_com, _loc, _reqNo, _reqlineno);
                if (_reqDet == null)
                {
                    //_returnMsg = "Invalid Service Request Details";
                    _returnMsg = "No service request found for given search";   //kapila 25/6/2015
                    _returnStatus = -1;
                    return null;
                }
                if (_reqDet.Count <= 0)
                {
                    //_returnMsg = "Invalid Service Request Details";
                    _returnMsg = "No service request found for given search";  //kapila 25/6/2015
                    _returnStatus = -1;
                    return null;
                }

                _returnStatus = 1;
                _returnMsg = _rtnMsg;
                _result.Add(_reqHdr, _reqDet);
                return _result;
            }
            catch (Exception ex)
            {
                _returnMsg = ex.Message.ToString();
                _returnStatus = -999;
                return null;
            }
        }

        public Int32 updateMPCBWarranty(string _serial, out string _err)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                Int32 i = _custServiceDAL.updateMPCBWarranty(_serial);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _err = null;
                return 1;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _err = ex.Message.ToString();
                return -999;
            }
        }

        /// <summary>
        /// damith 17-Dec-2014
        /// Gets the service job reminder.
        /// </summary>
        /// <param name="_srvJReminderDet">The _SRV j reminder det.</param>
        /// <returns></returns>
        public List<Service_Reminder> GetServJobReminder(ServiceRreminder _srvJReminderDet)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServJobReminder(_srvJReminderDet);
        }

        /// <summary>
        /// damith 18-Dec-2014
        /// Gets the reminder template.
        /// </summary>
        /// <returns></returns>
        public List<Service_Reminder_Template> GetReminderTemplate()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetReminderTemplate();
        }

        //Tharaka 2014-12-16
        public List<Service_Appove_MRN> GET_MRN_FOR_JOB(string Job, string com, string Loc, string Req)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_MRN_FOR_JOB(Job, com, Loc, Req);
        }

        //Tharaka 2014-12-17
        public List<Scv_wrrt_App> GET_SCV_CUST_WRT_CLM(string Com, string Loc, string Status, string Job, DateTime From, DateTime To)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_CUST_WRT_CLM(Com, Loc, Status, Job, From, To);
        }

        //Tharaka 2014-12-17
        public List<ComboBoxObject> GET_INV_TYPES(string Com, string Loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_INV_TYPES(Com, Loc);
        }


        //Damith 22-12-2014
        //public Int32 SendReminderSms(List<SmsOutMember> _reminderLst, out string error)//Commented by Udesh 26-Nov-2018
        public Int32 SendReminderSms(List<SmsOutMember> _reminderLst, string userId, string company, string sessionId, out string error)//Added by Udesh 26-Nov-2018
        {
            //return _generalDAL.SaveSMSOut(_reminderLst);
            int insertState = 0;

            GeneralBLL _generalBLL = new GeneralBLL();
            _generalDAL = new GeneralDAL();
            _generalDAL.ConnectionOpen();
            _generalDAL.BeginTransaction();
            try
            {
                foreach (var lst in _reminderLst)
                {
                    OutSMS _out = new OutSMS();
                    Sms_Ref_Log smsRefLog = new Sms_Ref_Log();
                    _out.Createtime = DateTime.Now;

                    //Set msg 
                    string estimateTot = _generalDAL.GetJobEstiamteTot(lst.refJobNo.Trim());
                    if (lst.refReminderID == 2)
                    {
                        lst.SmsOutMsg = "Dear Customer,  Your estimate charge is " +
                        "Rs." + estimateTot + "  Job no [" + lst.refJobNo + "].To accept, type [smsid]<space>Y and reply.";
                    }

                    _out.Msgstatus = 0;
                    _out.Msgtype = "S";
                    _out.Receivedtime = DateTime.Now;
                    _out.Receiver = lst.SmsOutReciver;
                    _out.Msg = lst.SmsOutMsg;
                    _out.Receiverphno = lst.SmsOutReciverPhNo;
                    _out.Refdocno = "0";
                    _out.Sender = lst.SmsOutSender;
                    _out.Createtime = DateTime.Now;
                    //insertState = _generalDAL.SaveSMSOut(_out); // Commented by Udesh 26-Nov-2018
                    insertState = _generalBLL.SendPromotionSMS(userId, company, _out, sessionId).Result;// Added by Udesh 26-Nov-2018

                    smsRefLog.Rml_id = lst.refReminderID;
                    smsRefLog.Rml_com = lst.refComName;
                    smsRefLog.Rml_pc = lst.refProfitCnter;
                    smsRefLog.Rml_loc = lst.refLocation;
                    smsRefLog.Rml_bdoc = lst.refJobNo;
                    int jonLine = 0;
                    int.TryParse(lst.refLineNo.ToString(), out jonLine);
                    smsRefLog.Rml_bdoc_line = jonLine;
                    smsRefLog.Rml_rdoc = "0";
                    smsRefLog.Rml_sms = lst.refSmsTxt;



                    smsRefLog.Rml_email = lst.refEmail;
                    smsRefLog.Rml_smsseq = 0;
                    smsRefLog.Rml_sm_stus = 0;
                    smsRefLog.Rml_em_stus = 0;
                    smsRefLog.Rml_cre_by = lst.refCreBy;
                    smsRefLog.Rml_cre_dt = DateTime.Now;
                    _generalDAL.SaveSmsLog(smsRefLog);

                    //  _generalDAL.SaveSmsLog()
                }

                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();
                // send mail 
                //  IsSendMail(_reminderLst,out error);
                error = (insertState <= 0) ? "Message not send..." : "Message  send...";
                return insertState;
            }
            catch (Exception f)
            {
                _generalDAL.TransactionRollback();
                error = f.Message;
                return -1;
            }
        }


        /// <summary>
        /// Determines whether [is send mail] [the specified _reminder LST].
        /// </summary>
        /// <param name="_reminderLst">SmsOutMember.</param>
        /// <param name="error">The error.</param>
        /// <returns></returns>
        public bool IsSendMail(List<SmsOutMember> _reminderLst, out string error)
        {
            string msgType = "";
            foreach (var lst in _reminderLst)
            {
                int i = 0;
                lst.refEmail = "dpremakumara@gmail.com";
                if (IsCheckValidEmail(lst.refEmail))
                {
                    if (i == 0)
                    {
                        switch (lst.refReminderID)
                        {
                            case 1:
                                msgType = "GENERAL TEXT";
                                break;
                            case 2:
                                msgType = "ESTIMATE";
                                break;
                            case 3:
                                msgType = "JOB COMPLETED";
                                break;
                            default:
                                msgType = null;
                                break;
                        };
                    }//end sub if(i=0)
                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();
                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;
                    string _email = "";

                    _email = "Dear Sir/Madam, \n\n";
                    message.To.Add(lst.refEmail);
                    message.Subject = msgType;
                    message.IsBodyHtml = false;
                    message.Body = _email;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    // Send SMTP mail
                    smtpClient.Send(message);
                    //var isValidEmail=new Email
                    i++;
                }//end if(IsMail)
            }//loop
            error = null;
            return false;
        }

        private bool IsCheckValidEmail(string email)
        {
            const string validEmailPattern = @"^(?!\.)(""([^""\r\\]|\\[""\r\\])*""|"
                                      + @"([-a-z0-9!#$%&'*+/=?^_`{|}~]|(?<!\.)\.)*)(?<!\.)"
                                      + @"@[a-z0-9][\w\.-]*[a-z0-9]\.[a-z][a-z\.]*[a-z]$";
            return new Regex(validEmailPattern, RegexOptions.IgnoreCase).IsMatch(email);
        }
        //mobile number validation

        //Tharaka 2014-12-22
        public Service_JOB_HDR GET_SCV_JOB_HDR(string Job, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_JOB_HDR(Job, com);
        }

        //Tharaka 2014-12-23
        public List<Service_Enquiry_Job_Det> GET_JOB_DET_ENQRY(String Ser1, String Ser2, String RegNum, String Com, String Loc, DateTime Fromdt, DateTime Todt)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_JOB_DET_ENQRY(Ser1, Ser2, RegNum, Com, Loc, Fromdt, Todt);
        }

        //Tharaka 2014-12-23GetJobDetailsEnquiry
        public Int32 GetJobDetailsEnquiry(String job, String User, String Com, String Loc, String PC, out List<Service_job_Det> oJobDetails, out Service_Enquiry_Job_Hdr oheader, out string msg)
        {
            Int32 result = 0;
            try
            {
                oheader = new Service_Enquiry_Job_Hdr();
                oJobDetails = new List<Service_job_Det>();
                msg = string.Empty;
                _custServiceDAL = new CustServiceDAL();
                oheader = _custServiceDAL.GET_SCV_JOBHDR_ENQRY(job, Com);
                if (oheader != null)
                {
                    result = 1;
                    oJobDetails = _custServiceDAL.GetJobDetails(job, -777, Com);
                }
                return result;
            }
            catch (Exception ex)
            {
                oheader = null;
                oJobDetails = null;
                result = 11;
                msg = ex.Message;
                return result;
            }
        }

        //Chamal 2014-Dec-15
        public int GetScvJob(string _com, string _jobNo, out Service_JOB_HDR _jobHdr, out List<Service_job_Det> _jobDet, out List<Service_Job_Det_Sub> _jobDetSub, out List<Service_Job_Defects> _jobDef, out List<Service_Tech_Aloc_Hdr> _jobEmp, out List<Service_TempIssue> _jobTempIssue, out string _returnMsg)
        {
            //try
            //{
            _custServiceDAL = new CustServiceDAL();
            int _rtnStatus = 0;
            string _rtnMsg = string.Empty;

            _jobDef = new List<Service_Job_Defects>();
            _jobEmp = new List<Service_Tech_Aloc_Hdr>();
            _jobTempIssue = new List<Service_TempIssue>();

            _jobHdr = _custServiceDAL.GetServiceJobHeader(_jobNo, _com);
            if (_jobHdr == null)
            { _returnMsg = "Invalid Job No"; _jobHdr = null; _jobDet = null; _jobDetSub = null; _jobDef = null; _jobEmp = null; _jobTempIssue = null; return _rtnStatus; }

            _jobDet = _custServiceDAL.GetJobDetails(_jobNo, -777, _com);
            if (_jobDet == null) { _returnMsg = "Job item not found"; ; _jobHdr = null; _jobDet = null; _jobDetSub = null; _jobDef = null; _jobEmp = null; _jobTempIssue = null; return _rtnStatus; }
            if (_jobDet.Count <= 0) { _returnMsg = "Job item not found"; ; _jobHdr = null; _jobDet = null; _jobDetSub = null; _jobDef = null; _jobEmp = null; _jobTempIssue = null; return _rtnStatus; }

            _jobDetSub = null;

            foreach (Service_job_Det _det in _jobDet)
            {
                List<Service_Job_Defects> _def = new List<Service_Job_Defects>();
                _def = _custServiceDAL.GetJobDefects(_jobNo, _det.Jbd_jobline, null);
                _jobDef.AddRange(_def);

                List<Service_Tech_Aloc_Hdr> _emp = new List<Service_Tech_Aloc_Hdr>();
                _emp = _custServiceDAL.GetJobAllocations(_jobNo, _det.Jbd_jobline, _com);
                _jobEmp.AddRange(_emp);

                List<Service_TempIssue> _issueItm = new List<Service_TempIssue>();
                _issueItm = _custServiceDAL.Get_ServiceWIP_TempIssued_Items(_com, _jobNo, _det.Jbd_jobline, null, _det.Jbd_loc, "STBYI");
                _jobTempIssue.AddRange(_issueItm);

            }

            _returnMsg = _rtnMsg;
            return 1;
            //}
            //catch (Exception ex)
            //{
            //    _jobHdr = null;
            //    _jobDet = null;
            //    _jobDetSub = null;
            //    _jobDef = null;
            //    _jobEmp = null;
            //    _jobTempIssue = null;
            //    _returnMsg = ex.Message.ToString();
            //    return 0;
            //}
        }

        //Darshana 2014-12-23
        public Int32 Save_PO_Confirmation(PurchaseOrder _poHdr, List<PurchaseOrderDelivery> _poDel, List<Service_Purchase_Approval> _poApp, out string errorMsg)
        {
            errorMsg = string.Empty;

            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                foreach (PurchaseOrderDelivery _Itm in _poDel)
                {
                    _inventoryDAL.UpdateConsignReceiptBalanceQty(_Itm.Podi_seq_no, _Itm.Podi_line_no, _Itm.Podi_del_line_no, _Itm.Podi_loca, _Itm.Podi_itm_cd, _Itm.Podi_qty);
                }

                foreach (Service_Purchase_Approval _serApp in _poApp)
                {
                    _custServiceDAL.SAVE_PO_APPROVE(_serApp);
                }

                _inventoryDAL.UpdatePOStatus(_poHdr.Poh_doc_no, _poHdr.Poh_cre_by);

                _custServiceDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _effects = 1;
                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                errorMsg = ex.Message;
                _effects = -1;
                return _effects;
            }
        }

        //Tharaka 2014-12-24
        public int GetAllJobDetailsEnquiry(String JobNumber, Int32 JobLine, String Com, String Location, String PC, out Service_job_Det oJobDetail, out List<Service_Job_Defects> oJobDefects, out List<Service_Enquiry_TechAllo_Hdr> oJobAllocations, out List<Service_Enquiry_Tech_Cmnt> oTechComments, out List<Tuple<string, string, string>> ConfirRmk_Type_User, out List<Service_Enquiry_StandByItems> oStandByItems, out string msg, out Decimal totalAmount)
        {

            oJobDetail = new Service_job_Det();
            oJobDefects = new List<Service_Job_Defects>();
            oJobAllocations = new List<Service_Enquiry_TechAllo_Hdr>();
            oTechComments = new List<Service_Enquiry_Tech_Cmnt>();
            oStandByItems = new List<Service_Enquiry_StandByItems>();

            //List<Service_Enquiry_StandByItems> GET_STNDBY_ITMS_ENQRY

            msg = string.Empty;
            int result = 0;
            totalAmount = 0;

            ConfirRmk_Type_User = new List<Tuple<string, string, string>>();

            try
            {
                _custServiceDAL = new CustServiceDAL();
                List<Service_job_Det> tempList = new List<Service_job_Det>();
                tempList = _custServiceDAL.GetJobDetails(JobNumber, JobLine, Com);
                if (tempList.Count > 0)
                {
                    result = 1;
                    oJobDetail = tempList[0];
                    oJobDefects = _custServiceDAL.GetJobDefects(JobNumber, JobLine, null);
                    oJobAllocations = _custServiceDAL.GET_SCV_TECHALLO_ENQRY(JobNumber, JobLine, Com);
                    oTechComments = _custServiceDAL.GET_TECH_CMNT_ENQRY(JobNumber, JobLine);

                    //List<Service_confirm_Header> oConfHdr = _custServiceDAL.GetServiceConfirmHeader(Com, "", Location, PC, JobNumber, "", "", "", DateTime.MinValue, DateTime.MaxValue);
                    //if (oConfHdr != null && oConfHdr.Count > 0)
                    //{
                    //    ConfirmationRemark = oConfHdr[0].Jch_rmk;
                    //}

                    ConfirRmk_Type_User = _custServiceDAL.GET_SCV_CONFIM_INVO_RMRK(JobNumber, JobLine, Com);
                    if (ConfirRmk_Type_User.Count == 0)
                    {
                        ConfirRmk_Type_User.Add(new Tuple<string, string, string>(string.Empty, string.Empty, string.Empty));
                    }
                    oStandByItems = _custServiceDAL.GET_STNDBY_ITMS_ENQRY(JobNumber, JobLine, Com, Location);
                    totalAmount = _custServiceDAL.GET_SCV_CONFIM_INVO_AMOUNT(JobNumber, JobLine, Com);
                }
            }
            catch (Exception ex)
            {
                msg = ex.Message;

            }

            return result;
        }

        public decimal GetScvJobStageRate(string _com, string _schnl, string _loc, string _scvCate, decimal _qty, DateTime _date, string _jobStage, string _item, string _fromTown, string _toTown, out string _msg)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.GetScvJobStageRate(_com, _schnl, _loc, _scvCate, _qty, _date, _jobStage, _item, _fromTown, _toTown, out _msg);
            }
            catch (Exception ex)
            {
                _msg = ex.Message;
                return -1;
            }
        }

        //Tharaka 2014-12-30
        public List<Service_job_Det> GET_SCV_JOB_DET_BY_SERIAL(String Serial, String item, String com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_JOB_DET_BY_SERIAL(Serial, item, com);
        }

        //Tharaka 2014-12-30
        public List<Service_Enquiry_InventryItems> GET_INVITMS_BYJOBLINE_ENQRY(String jobNo, Int32 lineNo, String Com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_INVITMS_BYJOBLINE_ENQRY(jobNo, lineNo, Com);
        }

        //Tharaka 2014-12-30
        public List<Service_Enquiry_Estimate_Hdr> GetEstimateHeaderEnquiry(String Com, String Loc, String Pc, String Job)
        {
            _custServiceDAL = new CustServiceDAL();
            List<Service_Enquiry_Estimate_Hdr> oHeader = new List<Service_Enquiry_Estimate_Hdr>();
            oHeader = _custServiceDAL.GET_SCV_EST_BY_JOB(Com, Loc, Pc, Job);
            if (oHeader != null && oHeader.Count > 0)
            {
                foreach (Service_Enquiry_Estimate_Hdr item in oHeader)
                {
                    List<Service_Enquiry_Estimate_Items> oItems = _custServiceDAL.GET_SCV_EST_ITM_ENQRY(item.ESH_SEQ_NO);
                    item.AMOUNT = oItems.Sum(x => x.ESI_UNIT_RT);
                    item.DISCOUNT = oItems.Sum(x => x.ESI_DISC_AMT);
                    item.TAX_AMOUNT = oItems.Sum(x => x.ESI_TAX_AMT);
                    item.TOT_AMOUNT = oItems.Sum(x => x.ESI_NET);
                }
            }
            return oHeader;
        }

        //Tharaka 2015-01-02
        public int GetEstimateDetailsEnquiry(Int32 Seq, out List<Service_Enquiry_Estimate_Items> oItems)
        {
            _custServiceDAL = new CustServiceDAL();
            oItems = new List<Service_Enquiry_Estimate_Items>();
            int result = 0;
            oItems = _custServiceDAL.GET_SCV_EST_ITM_ENQRY(Seq);
            return result;
        }

        //Tharaka 2015-01-02
        public List<Service_Enquiry_Estimate_TAX> GET_SCV_EST_TAX_ENQRY(Int32 Seq, Int32 ItemLine)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_EST_TAX_ENQRY(Seq, ItemLine);
        }

        //Tharaka 2015-01-02
        public int GetInvoiceDetailsEnquiry(String JOb, String COm, out List<Service_Enquiry_Invoice_Items> oItems, out List<Service_Enquiry_Invoice_Header> oHeaders)
        {
            _custServiceDAL = new CustServiceDAL();

            oItems = new List<Service_Enquiry_Invoice_Items>();
            oHeaders = new List<Service_Enquiry_Invoice_Header>();

            int result = 0;
            oItems = _custServiceDAL.GET_SCV_INVO_DET_ENQRY(JOb, COm);

            if (oItems != null && oItems.Count > 0)
            {
                string[] InvoiceList = oItems.Select(X => X.SAH_INV_NO).Distinct().ToArray();
                if (InvoiceList != null && InvoiceList.Length > 0)
                {
                    foreach (String item in InvoiceList)
                    {
                        List<Service_Enquiry_Invoice_Items> SelectedItems = new List<Service_Enquiry_Invoice_Items>();
                        SelectedItems = oItems.FindAll(x => x.SAH_INV_NO == item);

                        Service_Enquiry_Invoice_Header oHeaderItem = new Service_Enquiry_Invoice_Header();
                        oHeaderItem.InvoiceNum = item;
                        oHeaderItem.Date = SelectedItems[0].SAH_DT;
                        oHeaderItem.Discount = SelectedItems.Sum(x => x.SAD_DISC_AMT);
                        oHeaderItem.TAXAmount = SelectedItems.Sum(x => x.SAD_ITM_TAX_AMT);
                        oHeaderItem.Status = SelectedItems[0].RSS_DESC;
                        oHeaderItem.Amount = SelectedItems.Sum(x => x.SAD_TOT_AMT);
                        oHeaders.Add(oHeaderItem);
                    }
                }
            }
            return result;
        }

        //Tharaka 2015-01-02
        public List<Service_Enquiry_Invoice_TAX> GET_SCV_INVO_ITM_TAX_ENQRY(String InvoiceNum, Int32 lineNum)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_INVO_ITM_TAX_ENQRY(InvoiceNum, lineNum);
        }

        //Tharaka 2015-01-03
        public List<Service_Enquiry_PartTrasferd> GET_SCV_PART_TRSFER_ENQRY(String jobNo, Int32 lineNo, String Com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_PART_TRSFER_ENQRY(jobNo, lineNo, Com);
        }

        //Tharaka 2015-01-03
        public List<Service_Enquiry_SupplierWrntyClaim> SCV_PART_TRSFER_ENQRY(String jobNo, Int32 lineNo, String Com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.SCV_PART_TRSFER_ENQRY(jobNo, lineNo, Com);
        }

        //Tharaka 2015-01-03
        public List<Service_Enquiry_SupplierWrntyDetails> GET_SCV_SUPP_WRNTREQHDR_ENQ(String jobNo, Int32 lineNo, Int32 Seq, String Type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_SUPP_WRNTREQHDR_ENQ(jobNo, lineNo, Seq, Type);
        }

        //Darshana 2014-12-23
        //public Int32 Save_Job_Confirmation(List<Service_confirm_Header> _confHdr, List<Service_Confirm_detail> _confDet, List<Service_Cost_sheet> _jobCost, MasterAutoNumber _masterAuto, InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, Boolean _isInv, List<Service_job_Det> _processJobList, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto,string _loc, out string errorMsg)
        //{
        //    errorMsg = string.Empty;
        //    Int32 _invoiceLine = 0;
        //    Int32 _effects = 0;
        //    string _invNo = string.Empty;
        //    string _recNo = string.Empty;
        //    string _DONo = string.Empty;

        //    Int32 _isInvMaintain = 0;
        //    Int32 InventorySeqNo = 0;
        //     InventoryBLL _InventoryBLL = new InventoryBLL();
        //    List<ReptPickSerials> _pickSerial = new List<ReptPickSerials>();
        //    List<ReptPickSerialsSub> _pickSubSerial = new List<ReptPickSerialsSub>();
        //    try
        //    {
        //        _custServiceDAL = new CustServiceDAL();
        //        _inventoryDAL = new InventoryDAL();
        //        _salesDAL = new SalesDAL();
        //        _inventoryRepDAL = new ReptCommonDAL();
        //        _fmsInventoryDal = new FMS_InventoryDAL();
        //        _generalDAL = new GeneralDAL();

        //        _custServiceDAL.ConnectionOpen();
        //        _inventoryDAL.ConnectionOpen();
        //        _salesDAL.ConnectionOpen();
        //        _inventoryRepDAL.ConnectionOpen();
        //        _fmsInventoryDal.ConnectionOpen();
        //        _generalDAL.ConnectionOpen();
        //        _custServiceDAL.BeginTransaction();
        //        _inventoryDAL.BeginTransaction();
        //        _salesDAL.BeginTransaction();
        //        _fmsInventoryDal.BeginTransaction();
        //        _inventoryRepDAL.BeginTransaction();
        //        _generalDAL.BeginTransaction();

        //        foreach (Service_confirm_Header _saveHdr in _confHdr)
        //        {
        //            int SeqNum = _custServiceDAL.GetConfSeq();

        //            string DocNum = string.Empty;
        //            MasterAutoNumber _ClaimDoc = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);

        //            DocNum = _saveHdr.Jch_pc + "-" + _ClaimDoc.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _ClaimDoc.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

        //            _inventoryDAL.UpdateAutoNumber(_ClaimDoc);

        //            _saveHdr.Jch_seq = SeqNum;
        //            _saveHdr.Jch_no = DocNum;

        //            _custServiceDAL.save_Conf_Hdr(_saveHdr);

        //            Int32 _line = 1;
        //            foreach (Service_Confirm_detail _tmpDet in _confDet)
        //            {
        //                if (_tmpDet.Jcd_cuscd == _saveHdr.Jch_cust_cd && _tmpDet.Jcd_cusname == _saveHdr.Jch_cust_name && _tmpDet.Jcd_cusadd1 == _saveHdr.Jch_add1 && _tmpDet.Jcd_cusadd2 == _saveHdr.Jch_add2)
        //                {
        //                    _tmpDet.Jcd_seq = SeqNum;
        //                    _tmpDet.Jcd_no = DocNum;
        //                    // _tmpDet.Jcd_line = _line;
        //                    _custServiceDAL.save_Conf_Det(_tmpDet);
        //                    _line = _line + 1;


        //                }
        //            }
        //        }
        //        //iF JOB IS WRPL
        //        if (_confHdr[0].Jch_jobclosetp == "WRPL")
        //        {
        //            foreach (Service_job_Det _WRLP in _processJobList)
        //            {
        //                MasterAutoNumber _ReqAppAuto = new MasterAutoNumber();
        //                RequestApprovalDetail _tempReqAppDet = new RequestApprovalDetail();
        //                RequestApprovalSerials _tempReqAppSer = new RequestApprovalSerials();
        //                RequestApprovalHeader _ReqAppHdr = new RequestApprovalHeader();
        //                RequestApprovalDetailLog _tempReqAppDetLog = new RequestApprovalDetailLog();
        //                RequestApprovalSerialsLog _tempReqAppSerLog = new RequestApprovalSerialsLog();
        //                RequestApprovalHeaderLog _ReqAppHdrLog = new RequestApprovalHeaderLog();


        //                _ReqAppAuto = new MasterAutoNumber();
        //                _ReqAppAuto.Aut_cate_cd = _confHdr[0].Jch_pc;
        //                _ReqAppAuto.Aut_cate_tp = "PC";
        //                _ReqAppAuto.Aut_direction = 1;
        //                _ReqAppAuto.Aut_modify_dt = null;
        //                _ReqAppAuto.Aut_moduleid = "REQ";
        //                _ReqAppAuto.Aut_number = 0;
        //                _ReqAppAuto.Aut_start_char = "EXREQ";
        //                _ReqAppAuto.Aut_year = null;

        //                string DocNum = string.Empty;
        //                MasterAutoNumber _wrplNo = _inventoryDAL.GetAutoNumber(_ReqAppAuto.Aut_moduleid, _ReqAppAuto.Aut_direction, _ReqAppAuto.Aut_start_char, _ReqAppAuto.Aut_cate_tp, _ReqAppAuto.Aut_cate_cd, _ReqAppAuto.Aut_modify_dt, _ReqAppAuto.Aut_year);

        //                DocNum = _confHdr[0].Jch_pc + "-" + _wrplNo.Aut_start_char + "-" + _wrplNo.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

        //                _inventoryDAL.UpdateAutoNumber(_ReqAppAuto);


        //                //////
        //                 string _brand=string.Empty ;
        //                string _cate1=string.Empty ;
        //                string _cate2=string.Empty ;
        //                string _des=string.Empty ;
        //                string _model=string.Empty ;
        //                Boolean _isskipApp =false;
        //                   DataTable _tblItem = _inventoryDAL.Get_Item_Infor(_WRLP.Jbd_itm_cd);
        //                    foreach (DataRow r in _tblItem.Rows)
        //                    {
        //                        _brand = (string)r["mi_brand"];
        //                        _cate1 = (string)r["mi_cate_1"];
        //                        _cate2 = (string)r["mi_cate_2"];
        //                        _model = (string)r["mi_model"];
        //                        _des = (string)r["mi_shortdesc"];

        //                    }


        //                List<Service_supp_claim_itm> supp_claim_itms = _custServiceDAL.GET_TEMPISSUE_RETURNED_ITMS(_confHdr[0].Jch_com);
        //                foreach (Service_supp_claim_itm _itm in supp_claim_itms.Where (x=> x.SSC_BRND==_brand && x.SSC_CAT1==_cate1 && x.SSC_CAT2==_cate2 && x.SSC_SKP_APP==1 ))
        //                { _isskipApp=true;                        }


        //                /////////




        //                InvoiceHeader _invHdr = new InvoiceHeader();
        //                _invHdr = _salesDAL.GetInvoiceHdrByCom(_WRLP.Jbd_com, _WRLP.Jbd_invc_no);

        //                _ReqAppHdr.Grah_com = _confHdr[0].Jch_com;
        //                _ReqAppHdr.Grah_loc = _confHdr[0].Jch_pc;
        //                _ReqAppHdr.Grah_app_tp = "ARQT035";
        //                _ReqAppHdr.Grah_fuc_cd = _WRLP.Jbd_invc_no;
        //                _ReqAppHdr.Grah_ref = DocNum;

        //                _ReqAppHdr.Grah_cre_by = _confHdr[0].Jch_cre_by;
        //                _ReqAppHdr.Grah_cre_dt = Convert.ToDateTime(DateTime.Now).Date;
        //                _ReqAppHdr.Grah_mod_by = _confHdr[0].Jch_cre_by;
        //                _ReqAppHdr.Grah_mod_dt = Convert.ToDateTime(DateTime.Now).Date;

        //                _ReqAppHdr.Grah_app_lvl = 0;
        //                _ReqAppHdr.Grah_app_by = string.Empty;
        //                _ReqAppHdr.Grah_app_dt = Convert.ToDateTime(DateTime.Now).Date;
        //                _ReqAppHdr.Grah_remaks = _confHdr[0].Jch_jobclosermk;
        //               if(_isskipApp==true)
        //               { _ReqAppHdr.Grah_oth_loc = _loc ;
        //                 _ReqAppHdr.Grah_sub_type = "SERVICE_APP";
        //                 _ReqAppHdr.Grah_app_stus = "F";
        //               }
        //               else
        //               {     _ReqAppHdr.Grah_oth_loc =  _WRLP.Jbd_loc;
        //                   _ReqAppHdr.Grah_sub_type = "SERVICE";
        //                    _ReqAppHdr.Grah_app_stus = "P";
        //               }

        //                if (_invHdr.Sah_inv_no != null)
        //                {
        //                    _ReqAppHdr.Grah_oth_pc = _invHdr.Sah_pc;
        //                }
        //                else
        //                {
        //                    _ReqAppHdr.Grah_oth_pc = "";
        //                }
        //                _ReqAppHdr.Grah_oth_pc = _confHdr[0].Jch_pc;




        //                _ReqAppHdrLog.Grah_com = _confHdr[0].Jch_com;
        //                _ReqAppHdrLog.Grah_loc = _confHdr[0].Jch_pc;
        //                _ReqAppHdrLog.Grah_app_tp = "ARQT035";
        //                _ReqAppHdrLog.Grah_fuc_cd = _WRLP.Jbd_invc_no;
        //                _ReqAppHdrLog.Grah_ref = DocNum;
        //                _ReqAppHdrLog.Grah_oth_loc = _WRLP.Jbd_loc;
        //                _ReqAppHdrLog.Grah_cre_by = _confHdr[0].Jch_cre_by;
        //                _ReqAppHdrLog.Grah_cre_dt = Convert.ToDateTime(DateTime.Now).Date;
        //                _ReqAppHdrLog.Grah_mod_by = _confHdr[0].Jch_cre_by;
        //                _ReqAppHdrLog.Grah_mod_dt = Convert.ToDateTime(DateTime.Now).Date;
        //                _ReqAppHdrLog.Grah_app_stus = "P";
        //                _ReqAppHdrLog.Grah_app_lvl = 0;
        //                _ReqAppHdrLog.Grah_app_by = string.Empty;
        //                _ReqAppHdrLog.Grah_app_dt = Convert.ToDateTime(DateTime.Now).Date;
        //                _ReqAppHdrLog.Grah_remaks = _confHdr[0].Jch_jobclosermk;
        //                _ReqAppHdrLog.Grah_sub_type = "SERVICE";
        //                if (_invHdr.Sah_inv_no != null)
        //                {
        //                    _ReqAppHdrLog.Grah_oth_pc = _invHdr.Sah_pc;
        //                }
        //                else
        //                {
        //                    _ReqAppHdrLog.Grah_oth_pc = "";
        //                }
        //                _ReqAppHdrLog.Grah_oth_pc = _confHdr[0].Jch_pc;

        //                _generalDAL.SaveRequestApproveHear(_ReqAppHdr);
        //                _generalDAL.SaveRequestApproveHear_Log(_ReqAppHdrLog);

        //                DataTable _invDet = _custServiceDAL.GetInvDetBySerId(_WRLP.Jbd_invc_no, Convert.ToInt32(_WRLP.Jbd_ser_id), _WRLP.Jbd_itm_cd);
        //                Service_JOB_HDR _jobHdr = _custServiceDAL.GET_SCV_JOB_HDR(_WRLP.Jbd_jobno, _WRLP.Jbd_com);

        //                //Request approval details
        //                _tempReqAppDet.Grad_ref = DocNum;
        //                _tempReqAppDet.Grad_line = _WRLP.Jbd_jobline;
        //                _tempReqAppDet.Grad_req_param = _WRLP.Jbd_itm_cd;
        //                _tempReqAppDet.Grad_val1 = 1;
        //                if (_invDet != null && _invDet.Rows.Count > 0)
        //                {
        //                    //_isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
        //                    _tempReqAppDet.Grad_val2 = _invDet.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
        //                    _tempReqAppDet.Grad_val5 = _invDet.Rows[0].Field<decimal>("sad_tot_amt"); //item.Sad_tot_amt;
        //                    _tempReqAppDet.Grad_anal1 = _invDet.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
        //                    _tempReqAppDet.Grad_anal2 = _invDet.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
        //                    _tempReqAppDet.Grad_anal3 = _invDet.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;
        //                    decimal _seqNo = Convert.ToDecimal(_invDet.Rows[0].Field<decimal>("sad_seq"));
        //                    _tempReqAppDet.Grad_anal4 = _seqNo.ToString(); //Convert.ToString(item.Sad_seq); 
        //                    _tempReqAppDet.Grad_anal7 = _invDet.Rows[0].Field<string>("ith_doc_no");
        //                    _tempReqAppDet.Grad_anal15 = _invDet.Rows[0].Field<string>("sad_itm_stus");
        //                }
        //                else
        //                {
        //                    _tempReqAppDet.Grad_val2 = 0; //item.Sad_unit_rt;
        //                    _tempReqAppDet.Grad_val5 = 0;
        //                    _tempReqAppDet.Grad_anal1 = "";
        //                    _tempReqAppDet.Grad_anal2 = "";
        //                    _tempReqAppDet.Grad_anal3 = "";
        //                    _tempReqAppDet.Grad_anal4 = "";
        //                    _tempReqAppDet.Grad_anal7 = "";
        //                    _tempReqAppDet.Grad_anal15 = "";
        //                }
        //                _tempReqAppDet.Grad_val3 = 1;
        //                _tempReqAppDet.Grad_val4 = 0;//item.Sad_itm_tax_amt
        //                _tempReqAppDet.Grad_anal5 = "EX-RECEIVE";
        //                _tempReqAppDet.Grad_date_param = _confHdr[0].Jch_dt;
        //                _tempReqAppDet.Grad_is_rt1 = true;
        //                _tempReqAppDet.Grad_is_rt2 = false;
        //                _tempReqAppDet.Grad_anal6 = _WRLP.Jbd_invc_no;
        //                _tempReqAppDet.Grad_anal8 = _jobHdr.SJB_CUST_CD;
        //                _tempReqAppDet.Grad_anal9 = "SCM2";

        //                int diffResult = (_jobHdr.SJB_DT.Month - _WRLP.Jbd_warrstartdt.Month) + 12 * (_jobHdr.SJB_DT.Year - _WRLP.Jbd_warrstartdt.Year);
        //                _tempReqAppDet.Grad_anal10 = diffResult.ToString(); //Convert.ToString(UsedWarrantyPeriod);
        //                _tempReqAppDet.Grad_anal11 = (_WRLP.Jbd_warrperiod - diffResult).ToString(); //Convert.ToString(RemainingWarrantyPeriod);
        //                _tempReqAppDet.Grad_anal12 = _WRLP.Jbd_jobno;
        //                _tempReqAppDet.Grad_anal13 = _confHdr[0].Jch_dt.ToShortDateString();
        //                _tempReqAppDet.Grad_anal14 = _WRLP.Jbd_warrstartdt.ToShortDateString();

        //                //Request log
        //                _tempReqAppDetLog.Grad_ref = DocNum;
        //                _tempReqAppDetLog.Grad_line = _WRLP.Jbd_jobline;
        //                _tempReqAppDetLog.Grad_req_param = _WRLP.Jbd_itm_cd;
        //                _tempReqAppDetLog.Grad_val1 = 1;
        //                if (_invDet != null && _invDet.Rows.Count > 0)
        //                {
        //                    //_isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
        //                    _tempReqAppDetLog.Grad_val2 = _invDet.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
        //                    _tempReqAppDetLog.Grad_val5 = _invDet.Rows[0].Field<decimal>("sad_tot_amt"); //item.Sad_tot_amt;
        //                    _tempReqAppDetLog.Grad_anal1 = _invDet.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
        //                    _tempReqAppDetLog.Grad_anal2 = _invDet.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
        //                    _tempReqAppDetLog.Grad_anal3 = _invDet.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;

        //                    decimal _seqNo1 = Convert.ToDecimal(_invDet.Rows[0].Field<decimal>("sad_seq"));
        //                    _tempReqAppDetLog.Grad_anal4 = _seqNo1.ToString(); //Convert.ToString(item.Sad_seq);
        //                    //_tempReqAppDetLog.Grad_anal7 = _invDet.Rows[0].Field<string>("ith_doc_no");
        //                    //_tempReqAppDetLog.Grad_anal15 = _invDet.Rows[0].Field<string>("sad_itm_stus");
        //                }
        //                else
        //                {
        //                    _tempReqAppDetLog.Grad_val2 = 0; //item.Sad_unit_rt;
        //                    _tempReqAppDetLog.Grad_val5 = 0;
        //                    _tempReqAppDetLog.Grad_anal1 = "";
        //                    _tempReqAppDetLog.Grad_anal2 = "";
        //                    _tempReqAppDetLog.Grad_anal3 = "";
        //                    _tempReqAppDetLog.Grad_anal4 = "";
        //                    // _tempReqAppDetLog.Grad_anal7 = "";
        //                    // _tempReqAppDetLog.Grad_anal15 = "";
        //                }
        //                _tempReqAppDetLog.Grad_val3 = 1;
        //                _tempReqAppDetLog.Grad_val4 = 0;//item.Sad_itm_tax_amt
        //                _tempReqAppDetLog.Grad_anal5 = "EX-RECEIVE";
        //                _tempReqAppDetLog.Grad_date_param = _confHdr[0].Jch_dt;
        //                _tempReqAppDetLog.Grad_is_rt1 = true;
        //                _tempReqAppDetLog.Grad_is_rt2 = false;
        //                //_tempReqAppDetLog.Grad_anal6 = _WRLP.Jbd_invc_no;
        //                //_tempReqAppDetLog.Grad_anal8 = _jobHdr.SJB_CUST_CD;
        //                //_tempReqAppDetLog.Grad_anal9 = "SCM2";

        //                //int diffResult = (_jobHdr.SJB_DT.Month - _WRLP.Jbd_warrstartdt.Month) + 12 * (_jobHdr.SJB_DT.Year - _WRLP.Jbd_warrstartdt.Year);
        //                //_tempReqAppDetLog.Grad_anal10 = diffResult.ToString(); //Convert.ToString(UsedWarrantyPeriod);
        //                //_tempReqAppDetLog.Grad_anal11 = (_WRLP.Jbd_warrperiod - diffResult).ToString(); //Convert.ToString(RemainingWarrantyPeriod);
        //                //_tempReqAppDetLog.Grad_anal12 = _WRLP.Jbd_jobno;
        //                //_tempReqAppDetLog.Grad_anal13 = _confHdr[0].Jch_dt.ToShortDateString();
        //                //_tempReqAppDetLog.Grad_anal14 = _WRLP.Jbd_warrstartdt.ToShortDateString();

        //                _generalDAL.Save_RequestApprove_Det(_tempReqAppDet);
        //                _generalDAL.Save_RequestApprove_Det_Log(_tempReqAppDetLog);

        //                _tempReqAppSer.Gras_ref = DocNum;
        //                _tempReqAppSer.Gras_line = _WRLP.Jbd_jobline;
        //                if (_invDet != null && _invDet.Rows.Count > 0)
        //                {
        //                    _tempReqAppSer.Gras_anal1 = _invDet.Rows[0].Field<string>("ith_doc_no");
        //                    _tempReqAppSer.Gras_anal7 = _invDet.Rows[0].Field<Int32>("ITB_BASE_REFLINE");
        //                }
        //                else
        //                {
        //                    _tempReqAppSer.Gras_anal1 = "";
        //                    _tempReqAppSer.Gras_anal7 = 0;
        //                }
        //                _tempReqAppSer.Gras_anal2 = _WRLP.Jbd_itm_cd;
        //                _tempReqAppSer.Gras_anal3 = _WRLP.Jbd_ser1;
        //                _tempReqAppSer.Gras_anal4 = "";
        //                _tempReqAppSer.Gras_anal5 = _WRLP.Jbd_warr;
        //                _tempReqAppSer.Gras_anal6 = Convert.ToInt32(_WRLP.Jbd_ser_id);
        //                _tempReqAppSer.Gras_anal8 = _WRLP.Jbd_warrperiod;
        //                _tempReqAppSer.Gras_anal9 = 0;
        //                _tempReqAppSer.Gras_anal10 = 0;

        //                _generalDAL.Save_RequestApprove_Ser(_tempReqAppSer);
        //                _generalDAL.Save_RequestApprove_Ser_Log(_tempReqAppSer, 0);


        //                #region Adjustment 

        //                if(_isskipApp==true)
        //                {
        //                // Nadeeka 10-06-2015
        //                InventoryHeader inHeader = new InventoryHeader();
        //                List<ReptPickSerials> _doitemserials = new List<ReptPickSerials>();
        //                DataTable dt_location = _inventoryDAL.Get_location_by_code(_confHdr[0].Jch_com, _WRLP.Jbd_loc);
        //                string _binCode = _inventoryDAL.GetDefaultBinCode(_confHdr[0].Jch_com, _WRLP.Jbd_loc);
        //                ReptPickSerials _ser = new ReptPickSerials();



        //                    foreach (DataRow r in dt_location.Rows)
        //                    {
        //                        // Get the value of the wanted column and cast it to string
        //                        inHeader.Ith_sbu = (string)r["ML_OPE_CD"];
        //                        if (System.DBNull.Value != r["ML_CATE_2"])
        //                        {
        //                            inHeader.Ith_channel = (string)r["ML_CATE_2"];
        //                        }
        //                        else
        //                        {
        //                            inHeader.Ith_channel = string.Empty;
        //                        }
        //                    }
        //                    inHeader.Ith_acc_no = "STOCK_EX";
        //                    inHeader.Ith_anal_1 = string.Empty;
        //                    inHeader.Ith_anal_2 = string.Empty;
        //                    inHeader.Ith_anal_3 = string.Empty;
        //                    inHeader.Ith_anal_4 = string.Empty;
        //                    inHeader.Ith_anal_5 = string.Empty;
        //                    inHeader.Ith_anal_6 = 0;
        //                    inHeader.Ith_anal_7 = 0;
        //                    inHeader.Ith_anal_8 = DateTime.MinValue;
        //                    inHeader.Ith_anal_9 = DateTime.MinValue;
        //                    inHeader.Ith_anal_10 = false;
        //                    inHeader.Ith_anal_11 = false;
        //                    inHeader.Ith_anal_12 = false;
        //                    inHeader.Ith_bus_entity = _jobHdr.SJB_CUST_CD;
        //                    inHeader.Ith_cate_tp = "EX";
        //                    inHeader.Ith_com = _confHdr[0].Jch_com;
        //                    inHeader.Ith_com_docno = string.Empty;
        //                    inHeader.Ith_cre_by = _confHdr[0].Jch_cre_by;
        //                    inHeader.Ith_cre_when = DateTime.Now;
        //                    inHeader.Ith_del_add1 = string.Empty;
        //                    inHeader.Ith_del_add2 = string.Empty;
        //                    inHeader.Ith_del_code = string.Empty;
        //                    inHeader.Ith_del_party = _jobHdr.SJB_CUST_CD;
        //                    inHeader.Ith_del_town = string.Empty;
        //                    inHeader.Ith_direct = true;
        //                    inHeader.Ith_doc_date = Convert.ToDateTime(DateTime.Now).Date;
        //                    inHeader.Ith_doc_no = string.Empty;
        //                    inHeader.Ith_doc_tp = "ADJ";
        //                    inHeader.Ith_doc_year = Convert.ToDateTime(DateTime.Now).Date.Year;
        //                    inHeader.Ith_entry_no = _WRLP.Jbd_invc_no;
        //                    inHeader.Ith_entry_tp = "ARQT035";
        //                    inHeader.Ith_git_close = true;
        //                    inHeader.Ith_git_close_date = DateTime.MinValue;
        //                    inHeader.Ith_git_close_doc = string.Empty;
        //                    inHeader.Ith_isprinted = false;
        //                    inHeader.Ith_is_manual = false;
        //                    inHeader.Ith_job_no = _WRLP.Jbd_jobno;
        //                    inHeader.Ith_loading_point = string.Empty;
        //                    inHeader.Ith_loading_user = string.Empty;
        //                    inHeader.Ith_loc = _WRLP.Jbd_loc;
        //                    inHeader.Ith_manual_ref = DocNum;
        //                    inHeader.Ith_mod_by = _confHdr[0].Jch_cre_by;
        //                    inHeader.Ith_mod_when = DateTime.Now;
        //                    inHeader.Ith_noofcopies = 0;
        //                    inHeader.Ith_oth_loc = string.Empty;
        //                    inHeader.Ith_oth_docno = string.Empty; // do #
        //                    inHeader.Ith_sub_docno = DocNum;
        //                    inHeader.Ith_remarks = _confHdr[0].Jch_jobclosermk;
        //                    inHeader.Ith_bus_entity = _jobHdr.SJB_CUST_CD;
        //                    inHeader.Ith_del_add1 = string.Empty;
        //                    MasterAutoNumber masterAuto = new MasterAutoNumber();
        //                    //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
        //                    inHeader.Ith_session_id = string.Empty;
        //                    inHeader.Ith_stus = "A";
        //                    inHeader.Ith_sub_tp = "NOR";
        //                    inHeader.Ith_vehi_no = string.Empty;
        //                    inHeader.Ith_pc = _confHdr[0].Jch_pc;
        //                    masterAuto.Aut_cate_cd = _WRLP.Jbd_loc;
        //                    masterAuto.Aut_cate_tp = "LOC";
        //                    masterAuto.Aut_direction = null;
        //                    masterAuto.Aut_modify_dt = null;
        //                    masterAuto.Aut_moduleid = "ERN";
        //                    masterAuto.Aut_number = 5;//what is Aut_number
        //                    masterAuto.Aut_start_char = "ERN";
        //                    masterAuto.Aut_year = null;



        //                    _ser.Tus_base_doc_no = string.Empty;
        //                    _ser.Tus_bin = _binCode;
        //                    _ser.Tus_com = _confHdr[0].Jch_com;
        //                    _ser.Tus_cre_by = _confHdr[0].Jch_cre_by;
        //                    _ser.Tus_cre_dt = System.DateTime.Now;
        //                    _ser.Tus_doc_dt = System.DateTime.Now;
        //                    _ser.Tus_doc_no = string.Empty;
        //                    _ser.Tus_exist_grncom = string.Empty;
        //                    _ser.Tus_exist_grnno = string.Empty;
        //                    _ser.Tus_exist_supp = string.Empty;
        //                     DataTable dt_serItem = _inventoryDAL.Get_Int_ItmStausBySerId( _WRLP.Jbd_invc_no,Convert.ToInt32(_tempReqAppSer.Gras_anal6),_tempReqAppSer.Gras_anal3,_tempReqAppSer.Gras_anal2);
        //                      if(dt_serItem.Rows.Count >0)
        //                      {
        //                    foreach (DataRow r in dt_serItem.Rows)
        //                        { _ser.Tus_itm_stus=(string)r["STS"];
        //                        }
        //                      }
        //                      else
        //                      {   _ser.Tus_itm_stus = "GOD";
        //                      }

        //                    _ser.Tus_unit_price = 0;
        //                    _ser.Tus_ageloc = string.Empty;
        //                    _ser.Tus_ser_1 = _tempReqAppSer.Gras_anal3;
        //                    _ser.Tus_ser_2 = _tempReqAppSer.Gras_anal4;
        //                    _ser.Tus_warr_no = _tempReqAppSer.Gras_anal5;
        //                    _ser.Tus_ser_id = Convert.ToInt32(_tempReqAppSer.Gras_anal6);
        //                    _ser.Tus_base_itm_line = Convert.ToInt32(_tempReqAppSer.Gras_anal7);
        //                    _ser.Tus_warr_period = Convert.ToInt32(_tempReqAppSer.Gras_anal8);
        //                    _ser.Tus_itm_cd = _tempReqAppSer.Gras_anal2;
        //                    _ser.Tus_itm_brand = _brand;
        //                    _ser.Tus_itm_desc = _des;
        //                    _ser.Tus_itm_model = _model;
        //                    _ser.Tus_loc = _WRLP.Jbd_loc;
        //                    _ser.Tus_new_remarks = String.Empty;
        //                    _ser.Tus_new_status = String.Empty;
        //                    _ser.Tus_qty = 1;
        //                    _ser.Tus_seq_no = 0;
        //                    _ser.Tus_job_no = _WRLP.Jbd_jobno;
        //                    _ser.Tus_job_line = _WRLP.Jbd_jobline;
        //                    _doitemserials.Add(_ser);

        //                    string _aodInNo = string.Empty;
        //                    _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, inHeader, _doitemserials, null, masterAuto, out _aodInNo);
        //                }
        //                #endregion



        //            }




        //        }

        //        //If job is BR....
        //        if (_confHdr[0].Jch_jobclosetp == "BER")
        //        {
        //            foreach (Service_job_Det _br in _processJobList)
        //            {
        //                BRServiceApproval _saveBrApp = new BRServiceApproval();
        //                Service_JOB_HDR _jobHdr = _custServiceDAL.GET_SCV_JOB_HDR(_br.Jbd_jobno, _br.Jbd_com);

        //                if (_jobHdr.SJB_JOBSTP == "RCC")
        //                {
        //                    _saveBrApp.Inra_no = _jobHdr.SJB_REQNO;
        //                    RCC _rccDet = _inventoryDAL.GetRCCbyNo(_jobHdr.SJB_REQNO);
        //                    if (_rccDet != null)
        //                    {
        //                        _saveBrApp.Insa_tp = _rccDet.Inr_tp;
        //                        _saveBrApp.Insa_sub_tp = _rccDet.Inr_sub_tp;
        //                        _saveBrApp.Insa_agent = _rccDet.Inr_agent;
        //                        _saveBrApp.Insa_col_method = _rccDet.Inr_col_method;
        //                        _saveBrApp.Insa_def_cd = _rccDet.Inr_def_cd;
        //                        _saveBrApp.Insa_def = _rccDet.Inr_def;
        //                        _saveBrApp.Insa_condition = _rccDet.Inr_condition;
        //                        _saveBrApp.Insa_accessories = _rccDet.Inr_accessories;
        //                        _saveBrApp.Insa_easy_loc = _rccDet.Inr_easy_loc;
        //                        _saveBrApp.Insa_insp_by = _rccDet.Inr_insp_by;
        //                        _saveBrApp.Insa_rem1 = _rccDet.Inr_rem1;
        //                        _saveBrApp.Insa_def_rem = _rccDet.Inr_def_rem;

        //                    }
        //                }
        //                else
        //                {
        //                    _saveBrApp.Inra_no = _jobHdr.SJB_JOBNO;
        //                }
        //                _saveBrApp.Insa_com_cd = _br.Jbd_com;
        //                _saveBrApp.Insa_loc_cd = _br.Jbd_loc;
        //                _saveBrApp.Insa_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_is_manual = 0;
        //                _saveBrApp.Insa_manual_ref = _jobHdr.SJB_MANUALREF;
        //                _saveBrApp.Insa_inv_no = _br.Jbd_invc_no;

        //                InvoiceHeader _invDet = _salesDAL.GetInvoiceHeader(_saveBrApp.Insa_inv_no);
        //                if (_invDet != null)
        //                {
        //                    _saveBrApp.Insa_acc_no = _invDet.Sah_acc_no;
        //                    _saveBrApp.Insa_inv_dt = _invDet.Sah_dt;
        //                }

        //                _saveBrApp.Insa_cust_cd = _jobHdr.SJB_CUST_CD;
        //                _saveBrApp.Insa_cust_name = _jobHdr.SJB_CUST_NAME;
        //                _saveBrApp.Insa_addr = _jobHdr.SJB_ADD1 + " " + _jobHdr.SJB_ADD2;
        //                _saveBrApp.Insa_tel = _jobHdr.SJB_MOBINO;
        //                _saveBrApp.Insa_itm = _br.Jbd_itm_cd;
        //                _saveBrApp.Insa_ser = _br.Jbd_ser1;
        //                _saveBrApp.Insa_warr = _br.Jbd_warr;
        //                _saveBrApp.Insa_is_jb_open = 1;
        //                _saveBrApp.Insa_jb_no = _br.Jbd_jobno;
        //                _saveBrApp.Insa_jb_rem = _confHdr[0].Jch_jobclosermk;
        //                _saveBrApp.Insa_stage = 4;
        //                _saveBrApp.Insa_stus = "A";
        //                _saveBrApp.Insa_cre_by = _confHdr[0].Jch_cre_by;
        //                _saveBrApp.Insa_mod_by = _confHdr[0].Jch_cre_by;
        //                _saveBrApp.Insa_war_period = _br.Jbd_warrperiod;
        //                _saveBrApp.Insa_job_dt = _jobHdr.SJB_DT;
        //                _saveBrApp.Insa_oth_doc_dt = _jobHdr.SJB_DT;
        //                _saveBrApp.Insa_return_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_acknoledge_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_complete_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_anal4 = _br.Jbd_jobline;
        //                _saveBrApp.Insa_anal5 = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_anal6 = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_app_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_rej_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_repair_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_disprem1_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_disprem2_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_disprem3_dt = _confHdr[0].Jch_dt;
        //                _saveBrApp.Insa_rem1_dt = _confHdr[0].Jch_dt;

        //                _custServiceDAL.SaveBRServiceApproval(_saveBrApp);


        //                //Service_Message oMessage = new Service_Message();
        //                //oMessage.Sm_com = _br.Jbd_com;
        //                //oMessage.Sm_jobno = _br.Jbd_jobno;
        //                //oMessage.Sm_joboline = _br.Jbd_jobline;
        //                //oMessage.Sm_jobstage = 7;
        //                //oMessage.Sm_ref_num = _saveBrApp.Inra_no;
        //                //oMessage.Sm_status = 0;
        //                //oMessage.Sm_msg_tmlt_id = 11;

        //                //_custServiceDAL.SaveServiceMsg(oMessage);

        //            }
        //        }

        //        foreach (Service_Cost_sheet _tmpCost in _jobCost)
        //        {
        //            _custServiceDAL.save_JobCostSheet(_tmpCost);
        //        }

        //        foreach (Service_job_Det _tmpJobDet in _processJobList)
        //        {
        //            Service_Job_StageLog oLog = new Service_Job_StageLog();
        //            Int32 _updateStage = 0;
        //            if (_isInv == true)
        //            {
        //                _updateStage = 8;
        //                oLog = new Service_Job_StageLog();
        //                oLog.SJL_REQNO = "";
        //                oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
        //                oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
        //                oLog.SJL_COM = _tmpJobDet.Jbd_com;
        //                oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
        //                oLog.SJL_JOBSTAGE = 7;
        //                oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
        //                oLog.SJL_CRE_DT = DateTime.Now;
        //                oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
        //                oLog.SJL_INFSUP = 0;
        //                _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
        //            }
        //            else if (_confDet.Count <= 0)
        //            {
        //                _updateStage = 8;
        //                oLog = new Service_Job_StageLog();
        //                oLog.SJL_REQNO = "";
        //                oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
        //                oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
        //                oLog.SJL_COM = _tmpJobDet.Jbd_com;
        //                oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
        //                oLog.SJL_JOBSTAGE = 7;
        //                oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
        //                oLog.SJL_CRE_DT = DateTime.Now;
        //                oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
        //                oLog.SJL_INFSUP = 0;
        //                _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
        //            }
        //            else
        //            {
        //                _updateStage = 7;
        //            }

        //            oLog = new Service_Job_StageLog();
        //            oLog.SJL_REQNO = "";
        //            oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
        //            oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
        //            oLog.SJL_COM = _tmpJobDet.Jbd_com;
        //            oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
        //            oLog.SJL_JOBSTAGE = _updateStage;
        //            oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
        //            oLog.SJL_CRE_DT = DateTime.Now;
        //            oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
        //            oLog.SJL_INFSUP = 0;
        //            _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
        //            _custServiceDAL.Update_JobDetailStage(_tmpJobDet.Jbd_jobno, _tmpJobDet.Jbd_jobline, _updateStage);
        //        }

        //        if (_isInv == true)
        //        {
        //            foreach (Service_Confirm_detail _itm in _confDet)
        //            {
        //                List<Service_job_Det> oJobitms = new List<Service_job_Det>();
        //                oJobitms = _custServiceDAL.GetJobDetails(_itm.Jcd_jobno, _itm.Jcd_joblineno, _invoiceHeader.Sah_com);

        //                Service_job_Det JobDetailLine;
        //                if (oJobitms.Count > 0)
        //                {
        //                    JobDetailLine = oJobitms[0];
        //                }
        //                else
        //                {
        //                    JobDetailLine = new Service_job_Det();
        //                }

        //                Service_Chanal_parameter oChnnalPara = _generalDAL.GetChannelParamers(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
        //                if (oChnnalPara.SP_ISNEEDGATEPASS == 0)
        //                {
        //                    //continue;
        //                }
        //                else
        //                {
        //                    //check is job F or W
        //                    Service_Category ocate = _custServiceDAL.GET_SCV_CATE_BY_JOB(_itm.Jcd_jobno, _invoiceHeader.Sah_com);
        //                    if (ocate != null && ocate.Sc_direct.ToUpper() == "F")
        //                    {
        //                        //continue;
        //                    }
        //                    else
        //                    {
        //                        if (JobDetailLine.Jbd_isgatepass == 1)
        //                        {
        //                            //continue;
        //                        }
        //                        else
        //                        {
        //                            continue;
        //                        }
        //                    }
        //                }

        //                //Service_Job_StageLog oLog = new Service_Job_StageLog();
        //                //oLog.SJL_REQNO = "";
        //                //oLog.SJL_JOBNO = _itm.Jcd_jobno;
        //                //oLog.SJL_JOBLINE = _itm.Jcd_joblineno;
        //                //oLog.SJL_COM = _invoiceHeader.Sah_com;
        //                //oLog.SJL_LOC = _inventoryHeader.Ith_loc;
        //                //oLog.SJL_JOBSTAGE = Convert.ToInt32(JobDetailLine.Jbd_stage);
        //                //oLog.SJL_CRE_BY = _invoiceHeader.Sah_cre_by;
        //                //oLog.SJL_CRE_DT = DateTime.Now;
        //                //oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
        //                //oLog.SJL_INFSUP = 0;
        //                //_effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);

        //                MasterItem itemDetails = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Jcd_itmcd);
        //                DataTable _chk = _salesDAL.GetItemTp(itemDetails.Mi_itm_tp);
        //                if (_chk != null && _chk.Rows.Count > 0)
        //                {
        //                    _isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
        //                }
        //                else
        //                {
        //                    continue;
        //                }

        //                if (_isInvMaintain == 1)
        //                {
        //                    if (itemDetails.Mi_is_ser1 == 1)
        //                    {
        //                        ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc, null, itemDetails.Mi_cd, _itm.Jcd_ser_id);
        //                        PickSerials.Tus_job_no = _itm.Jcd_jobno;
        //                        PickSerials.Tus_job_line = _itm.Jcd_joblineno;
        //                        _pickSerial.Add(PickSerials);
        //                    }
        //                    else
        //                    {
        //                        ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
        //                        _reptPickSerial_.Tus_com = _invoiceHeader.Sah_com;
        //                        _reptPickSerial_.Tus_base_doc_no = _itm.Jcd_mov_doc;
        //                        _reptPickSerial_.Tus_base_itm_line = _itm.Jcd_itmline;
        //                        _reptPickSerial_.Tus_bin = _inventoryDAL.GetDefaultBinCode(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
        //                        _reptPickSerial_.Tus_cre_by = _invoiceHeader.Sah_cre_by;
        //                        _reptPickSerial_.Tus_cre_dt = DateTime.Now;
        //                        _reptPickSerial_.Tus_cross_batchline = 0;
        //                        _reptPickSerial_.Tus_cross_itemline = 0;
        //                        _reptPickSerial_.Tus_cross_seqno = 0;
        //                        _reptPickSerial_.Tus_cross_serline = 0;
        //                        _reptPickSerial_.Tus_doc_dt = Convert.ToDateTime(_invoiceHeader.Sah_dt);
        //                        _reptPickSerial_.Tus_doc_no = string.Empty;
        //                        _reptPickSerial_.Tus_exist_grncom = string.Empty;
        //                        _reptPickSerial_.Tus_isapp = 1;
        //                        _reptPickSerial_.Tus_iscovernote = 1;
        //                        _reptPickSerial_.Tus_itm_brand = itemDetails.Mi_brand;
        //                        _reptPickSerial_.Tus_itm_cd = itemDetails.Mi_cd;
        //                        _reptPickSerial_.Tus_itm_desc = itemDetails.Mi_longdesc;
        //                        _reptPickSerial_.Tus_itm_line = 0;
        //                        _reptPickSerial_.Tus_itm_model = itemDetails.Mi_model;
        //                        _reptPickSerial_.Tus_itm_stus = _itm.Jcd_itmstus;
        //                        _reptPickSerial_.Tus_loc = _inventoryHeader.Ith_loc;
        //                        _reptPickSerial_.Tus_new_status = string.Empty;
        //                        _reptPickSerial_.Tus_qty = _itm.Jcd_qty;
        //                        _reptPickSerial_.Tus_ser_1 = "N/A";
        //                        _reptPickSerial_.Tus_ser_2 = "N/A";
        //                        _reptPickSerial_.Tus_ser_id = 0;
        //                        _reptPickSerial_.Tus_ser_line = 0;
        //                        _reptPickSerial_.Tus_session_id = _invoiceHeader.Sah_session_id;
        //                        _reptPickSerial_.Tus_unit_cost = 0;
        //                        _reptPickSerial_.Tus_unit_price = 0;
        //                        _reptPickSerial_.Tus_usrseq_no = -100;
        //                        _reptPickSerial_.Tus_warr_no = "N/A";
        //                        _reptPickSerial_.Tus_warr_period = 0;
        //                        _reptPickSerial_.Tus_new_remarks = string.Empty;
        //                        _reptPickSerial_.Tus_job_no = _itm.Jcd_jobno;
        //                        _reptPickSerial_.Tus_job_line = _itm.Jcd_joblineno;
        //                        _pickSerial.Add(_reptPickSerial_);
        //                    }
        //                }
        //            }


        //            Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
        //            Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _inventoryDAL.GetSerialID() : -1;

        //            _invoiceAuto.Aut_year = null;
        //            MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
        //            _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
        //            _invoiceAuto.Aut_year = null;
        //            _invoiceAuto.Aut_modify_dt = null;
        //            _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);

        //            _invoiceHeader.Sah_inv_no = _invNo;
        //            _invoiceHeader.Sah_seq_no = InvoiceSeqNo;

        //            decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
        //            decimal _totalReceiptAmt = 0;
        //            if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

        //            _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
        //            _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount


        //            if (_invoiceHeader.Sah_is_svat && _invoiceHeader.Sah_inv_tp == "CRED")
        //            {
        //                decimal vatTotal = _invoiceItem.Sum(X => X.Sad_itm_tax_amt);
        //                _invoiceHeader.Sah_anal_8 = _invoiceHeader.Sah_anal_8 + vatTotal;
        //            }

        //            _salesDAL.SaveSalesHeader(_invoiceHeader);


        //            #region Invoice Item Detail
        //            foreach (InvoiceItem _itm in _invoiceItem)
        //            {
        //                MasterItem _item = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
        //                _invoiceLine = _invoiceLine + 1;

        //                _itm.Sad_seq_no = InvoiceSeqNo;
        //                //_itm.Sad_itm_line = _invoiceLine;
        //                //_itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
        //                _itm.Sad_inv_no = _invoiceHeader.Sah_inv_no;
        //                _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
        //                _itm.Sad_itm_tp = _item.Mi_itm_tp;
        //                _itm.Sad_uom = _item.Mi_itm_uom;
        //                _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
        //                if (_invoiceHeader.Sah_tax_exempted)
        //                {
        //                    _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
        //                    _itm.Sad_itm_tax_amt = 0;
        //                }

        //                //update DO qty
        //                //if (_isDeliveryNow)
        //                //{
        //                //    decimal _doQty = 0;
        //                //    List<ReptPickSerials> _temp = _pickSerial.Where(x => x.Tus_base_itm_line == _itm.Sad_itm_line).ToList<ReptPickSerials>();
        //                //    if (_temp != null && _temp.Count > 0)
        //                //    {
        //                //        _doQty = _temp.Sum(p => p.Tus_qty);
        //                //    }
        //                //    _itm.Sad_do_qty = _doQty;
        //                //}
        //                _salesDAL.SaveSalesItem(_itm);
        //                _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

        //                if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
        //                {
        //                    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
        //                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty);

        //                    decimal newTaxValue = 0;

        //                    foreach (MasterItemTax _one in _itmTax)
        //                    {
        //                        InvoiceItemTax _tax = new InvoiceItemTax();
        //                        _tax.Satx_inv_no = _itm.Sad_inv_no;
        //                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
        //                        _tax.Satx_itm_line = _itm.Sad_itm_line;
        //                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100; // ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
        //                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
        //                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
        //                        _tax.Satx_job_line = 0;
        //                        _tax.Satx_job_no = "";
        //                        _tax.Satx_seq_no = InvoiceSeqNo;
        //                        _salesDAL.SaveSalesItemTax(_tax);
        //                        newTaxValue += _tax.Satx_itm_tax_amt;
        //                    }

        //                    _itmTax = new List<MasterItemTax>();
        //                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty);

        //                    foreach (MasterItemTax _one in _itmTax)
        //                    {
        //                        InvoiceItemTax _tax = new InvoiceItemTax();
        //                        _tax.Satx_inv_no = _itm.Sad_inv_no;
        //                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
        //                        _tax.Satx_itm_line = _itm.Sad_itm_line;
        //                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
        //                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
        //                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
        //                        _tax.Satx_job_line = 0;
        //                        _tax.Satx_job_no = "";
        //                        _tax.Satx_seq_no = InvoiceSeqNo;
        //                        _salesDAL.SaveSalesItemTax(_tax);
        //                    }
        //                }
        //                else
        //                {
        //                    List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
        //                    _itmTaxEff = _salesDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

        //                    if (_itmTaxEff.Count > 0)
        //                    {
        //                        foreach (MasterItemTax _one in _itmTaxEff)
        //                        {
        //                            InvoiceItemTax _tax = new InvoiceItemTax();
        //                            _tax.Satx_inv_no = _itm.Sad_inv_no;
        //                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
        //                            _tax.Satx_itm_line = _itm.Sad_itm_line;
        //                            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
        //                            _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
        //                            _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
        //                            _tax.Satx_job_line = 0;
        //                            _tax.Satx_job_no = "";
        //                            _tax.Satx_seq_no = InvoiceSeqNo;
        //                            _salesDAL.SaveSalesItemTax(_tax);
        //                        }
        //                    }
        //                    else
        //                    {

        //                        List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
        //                        _itmTax = _salesDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

        //                        foreach (LogMasterItemTax _one in _itmTax)
        //                        {
        //                            InvoiceItemTax _tax = new InvoiceItemTax();
        //                            _tax.Satx_inv_no = _itm.Sad_inv_no;
        //                            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
        //                            _tax.Satx_itm_line = _itm.Sad_itm_line;
        //                            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
        //                            _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
        //                            _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
        //                            _tax.Satx_job_line = 0;
        //                            _tax.Satx_job_no = "";
        //                            _tax.Satx_seq_no = InvoiceSeqNo;
        //                            _salesDAL.SaveSalesItemTax(_tax);
        //                        }
        //                    }
        //                }

        //                //if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
        //                //{
        //                //    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
        //                //    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

        //                //    foreach (MasterItemTax _one in _itmTax)
        //                //    {
        //                //        InvoiceItemTax _tax = new InvoiceItemTax();
        //                //        _tax.Satx_inv_no = _itm.Sad_inv_no;
        //                //        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
        //                //        _tax.Satx_itm_line = _itm.Sad_itm_line;
        //                //        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
        //                //        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
        //                //        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
        //                //        _tax.Satx_job_line = 0;
        //                //        _tax.Satx_job_no = "";
        //                //        _tax.Satx_seq_no = InvoiceSeqNo;
        //                //        _salesDAL.SaveSalesItemTax(_tax);
        //                //    }
        //                //}
        //                //else
        //                //{
        //                //    List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
        //                //    _itmTaxEff = _salesDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

        //                //    if (_itmTaxEff.Count > 0)
        //                //    {
        //                //        foreach (MasterItemTax _one in _itmTaxEff)
        //                //        {
        //                //            InvoiceItemTax _tax = new InvoiceItemTax();
        //                //            _tax.Satx_inv_no = _itm.Sad_inv_no;
        //                //            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
        //                //            _tax.Satx_itm_line = _itm.Sad_itm_line;
        //                //            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
        //                //            _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
        //                //            _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
        //                //            _tax.Satx_job_line = 0;
        //                //            _tax.Satx_job_no = "";
        //                //            _tax.Satx_seq_no = InvoiceSeqNo;
        //                //            _salesDAL.SaveSalesItemTax(_tax);
        //                //        }
        //                //    }
        //                //    else
        //                //    {

        //                //        List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
        //                //        _itmTax = _salesDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

        //                //        foreach (LogMasterItemTax _one in _itmTax)
        //                //        {
        //                //            InvoiceItemTax _tax = new InvoiceItemTax();
        //                //            _tax.Satx_inv_no = _itm.Sad_inv_no;
        //                //            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
        //                //            _tax.Satx_itm_line = _itm.Sad_itm_line;
        //                //            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
        //                //            _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
        //                //            _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
        //                //            _tax.Satx_job_line = 0;
        //                //            _tax.Satx_job_no = "";
        //                //            _tax.Satx_seq_no = InvoiceSeqNo;
        //                //            _salesDAL.SaveSalesItemTax(_tax);
        //                //        }
        //                //    }
        //                //}

        //            }
        //            #endregion

        //            #region Payment
        //            string _shortcompany = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com).Mc_anal5;
        //            if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
        //            {
        //                _recieptAuto.Aut_year = null;
        //                MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
        //                _recNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
        //                _recieptAuto.Aut_year = null;
        //                _recieptAuto.Aut_modify_dt = null;

        //                _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);

        //                _recieptHeader.Sar_seq_no = RecieptSeqNo;
        //                _recieptHeader.Sar_receipt_no = _recNo;
        //                _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
        //                _salesDAL.SaveReceiptHeader(_recieptHeader);

        //                Int32 _line = 0;

        //                if (_recieptItem != null)
        //                    if (_recieptItem.Count > 0)
        //                    {
        //                        foreach (RecieptItem _itm in _recieptItem)
        //                        {
        //                            _itm.Sard_seq_no = RecieptSeqNo;
        //                            _itm.Sard_inv_no = _invoiceHeader.Sah_inv_no;
        //                            _itm.Sard_receipt_no = _recNo;
        //                            _line = _line + 1;
        //                            _itm.Sard_line_no = _line;
        //                            _salesDAL.SaveReceiptItem(_itm);

        //                            if (_itm.Sard_pay_tp.Trim() == "ADVAN")
        //                            {
        //                                _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
        //                                RecieptHeader _rHdr = new RecieptHeader();
        //                                _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
        //                                _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
        //                                _rHdr.Sar_act = true;
        //                                _rHdr.Sar_direct = true;
        //                                _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
        //                                _salesDAL.SaveReceiptHeader(_rHdr);
        //                            }
        //                            if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
        //                            {
        //                                _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
        //                                MasterBusinessEntity _entity = _salesDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");
        //                                MasterProfitCenter _profit = _salesDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);
        //                                if (_entity != null)
        //                                    if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
        //                                    {
        //                                        string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
        //                                        OutSMS _out = new OutSMS();
        //                                        _out.Createtime = DateTime.Now;
        //                                        _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
        //                                        _out.Msgstatus = 0;
        //                                        _out.Msgtype = "S";
        //                                        _out.Receivedtime = DateTime.Now;
        //                                        _out.Receiver = _entity.Mbe_cd;
        //                                        //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
        //                                        _out.Senderphno = _entity.Mbe_mob;
        //                                        _out.Refdocno = _itm.Sard_ref_no;
        //                                        _out.Sender = _invoiceHeader.Sah_cre_by;
        //                                        _out.Createtime = DateTime.Now;
        //                                        _inventoryDAL.SaveSMSOut(_out);
        //                                    }
        //                            }

        //                            if (_itm.Sard_pay_tp.Trim() == "LORE")
        //                            {
        //                                _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _invoiceHeader.Sah_cus_cd, _itm.Sard_anal_4);
        //                            }

        //                            if (_itm.Sard_pay_tp.Trim() == "GVO")
        //                            {
        //                                _fmsInventoryDal.UpdateRedeemVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
        //                            }

        //                        }
        //                    }
        //            }
        //            #endregion

        //            InventoryHeader _invHdr = null;
        //            DataTable _dataTable = null; ;
        //            if (_pickSerial.Count > 0)
        //            {
        //                InventorySeqNo = _inventoryDAL.GetSerialID();
        //                _pickSerial.ForEach(x => x.Tus_base_doc_no = _invoiceHeader.Sah_inv_no);
        //                _pickSerial.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
        //                _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
        //                _inventoryHeader.Ith_oth_docno = _invoiceHeader.Sah_inv_no;
        //                _inventoryHeader.Ith_entry_no = _invoiceHeader.Sah_inv_no;
        //                _inventoryHeader.Ith_seq_no = InventorySeqNo;
        //                InventoryBLL _bll = new InventoryBLL();


        //                _bll.DeliveryOrderWithoutAutoNo(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, _inventoryRepDAL, _inventoryDAL, true, out _invHdr, out _dataTable);

        //                // string _doc;
        //                _inventoryDAL.UpdateInventoryAutoNumber(_invHdr, _inventoryAuto, "-", out _DONo);
        //                MasterAutoNumber _AutoNo = new MasterAutoNumber();
        //                int _e = 0;
        //                if (_dataTable.Rows.Count > 0)
        //                {
        //                    for (int i = 0; i < _dataTable.Rows.Count; i++)
        //                    {
        //                        if (_dataTable.Rows[i]["DocType"].ToString() == "ADJ")
        //                        {
        //                            _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
        //                            _AutoNo.Aut_moduleid = "ADJ";
        //                            _AutoNo.Aut_direction = null;
        //                            _AutoNo.Aut_start_char = "ADJ";
        //                            _AutoNo.Aut_cate_tp = "LOC";
        //                            //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
        //                            _AutoNo.Aut_year = null;

        //                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
        //                            string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
        //                            _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
        //                            _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
        //                        }
        //                        else if (_dataTable.Rows[i]["DocType"].ToString() == "GRN")
        //                        {
        //                            _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
        //                            _AutoNo.Aut_moduleid = "GRN";
        //                            _AutoNo.Aut_direction = null;
        //                            _AutoNo.Aut_start_char = "GRN";
        //                            _AutoNo.Aut_cate_tp = "LOC";
        //                            //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
        //                            _AutoNo.Aut_year = null;

        //                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
        //                            string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
        //                            _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
        //                            _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
        //                        }
        //                        else if (_dataTable.Rows[i]["DocType"].ToString() == "PO")
        //                        {
        //                            //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
        //                            //_AutoNo.Aut_moduleid = "PO_LOCAL";
        //                            //_AutoNo.Aut_direction = null;
        //                            //_AutoNo.Aut_start_char = "PO";
        //                            //_AutoNo.Aut_cate_tp = "COM";
        //                            //_AutoNo.Aut_year = null;

        //                            _AutoNo.Aut_cate_cd = _invHdr.Ith_com;
        //                            _AutoNo.Aut_cate_tp = "COM";
        //                            _AutoNo.Aut_direction = null;
        //                            _AutoNo.Aut_modify_dt = null;
        //                            _AutoNo.Aut_moduleid = "PUR";
        //                            _AutoNo.Aut_start_char = "PUR";
        //                            _AutoNo.Aut_year = null;

        //                            Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
        //                            string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
        //                            _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
        //                            _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
        //                            _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
        //                        }
        //                    }
        //                }

        //                //update inv no
        //                _inventoryDAL.UpdateOtherDocuments(_DONo, _invNo);
        //                _inventoryDAL.UpdateBatchRefDoc(_DONo, _invNo);
        //            }

        //        }

        //        //inr_sermstsub
        //        List<MST_ITM_CAT_COMP> _itmCompList = new List<MST_ITM_CAT_COMP>();
        //        Int32 _serLine = 0;
        //        foreach (Service_job_Det _tmpJobDet in _processJobList)
        //        {
        //            MasterItem _mstItm = _inventoryDAL.GetItem(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_itm_cd);
        //            _itmCompList = _custServiceDAL.getMasterItmCatComponant(_mstItm.Mi_cate_1, _mstItm.Mi_cate_2, _mstItm.Mi_cate_3);

        //            if (_itmCompList.Count <= 0)
        //            {
        //                _itmCompList = _custServiceDAL.getMasterItmCatComponant(_mstItm.Mi_cate_1, _mstItm.Mi_cate_2, null);
        //            }

        //            if (_itmCompList.Count > 0)
        //            {
        //                foreach (MST_ITM_CAT_COMP _tmpItmcomp in _itmCompList)
        //                {
        //                    foreach (Service_Confirm_detail _tmpConDet in _confDet)
        //                    {
        //                        if (_tmpItmcomp.Mcc_itm_cd == _tmpConDet.Jcd_itmcd)
        //                        {

        //                            _custServiceDAL.Update_INR_SERMSTSUB(Convert.ToInt32(_tmpJobDet.Jbd_ser_id), _tmpConDet.Jcd_itmcd, 0);
        //                            InventoryWarrantySubDetail _invSerSubMst = new InventoryWarrantySubDetail();
        //                            _invSerSubMst.Irsms_act = true;
        //                            _invSerSubMst.Irsms_itm_cd = _tmpConDet.Jcd_itmcd;
        //                            _invSerSubMst.Irsms_itm_stus = _tmpConDet.Jcd_itmstus;
        //                            _invSerSubMst.Irsms_mfc = "N/A";
        //                            _invSerSubMst.Irsms_qty = _tmpConDet.Jcd_qty;
        //                            _invSerSubMst.Irsms_ser_id = Convert.ToInt32(_tmpJobDet.Jbd_ser_id);
        //                            if (_serLine == 0)
        //                            {
        //                                List<InventoryWarrantySubDetail> _getCurList = new List<InventoryWarrantySubDetail>();
        //                                _getCurList = _custServiceDAL.getSerMstSubBySerID(_invSerSubMst.Irsms_ser_id);

        //                                if (_getCurList != null)
        //                                {
        //                                    _serLine = _getCurList.Count + 1;
        //                                }
        //                                else
        //                                {
        //                                    _serLine = _serLine + 1;
        //                                }

        //                            }
        //                            else
        //                            {
        //                                _serLine = _serLine + 1;
        //                            }
        //                            _invSerSubMst.Irsms_ser_line = _serLine;
        //                            ReptPickSerials _serDet = _inventoryDAL.GetReservedByserialID(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_loc, null, _tmpConDet.Jcd_itmcd, _tmpConDet.Jcd_ser_id);
        //                            _invSerSubMst.Irsms_sub_ser = _serDet.Tus_ser_1;
        //                            _invSerSubMst.Irsms_tp = "C";
        //                            _invSerSubMst.Irsms_warr_no = _tmpJobDet.Jbd_mainitmwarr;
        //                            _invSerSubMst.Irsms_warr_period = _tmpJobDet.Jbd_warrperiod;
        //                            _invSerSubMst.Irsms_warr_rem = _tmpJobDet.Jbd_warrrmk;
        //                            _custServiceDAL.SAVE_INR_SERMSTSUB(_invSerSubMst);
        //                        }
        //                    }
        //                }
        //            }
        //        }


        //        _custServiceDAL.TransactionCommit();
        //        _inventoryDAL.TransactionCommit();
        //        _salesDAL.TransactionCommit();
        //        _inventoryRepDAL.TransactionCommit();
        //        _fmsInventoryDal.TransactionCommit();
        //        _generalDAL.TransactionCommit();
        //        _custServiceDAL.ConnectionClose();
        //        _inventoryDAL.ConnectionClose();
        //        _salesDAL.ConnectionClose();
        //        _inventoryRepDAL.ConnectionClose();
        //        _fmsInventoryDal.ConnectionClose();
        //        _generalDAL.ConnectionClose();

        //        errorMsg = _invNo;
        //        _effects = 1;
        //        return _effects;
        //    }
        //    catch (Exception ex)
        //    {
        //        _custServiceDAL.TransactionRollback();
        //        _inventoryDAL.TransactionRollback();
        //        _salesDAL.TransactionRollback();
        //        _inventoryRepDAL.TransactionRollback();
        //        _fmsInventoryDal.TransactionRollback();
        //        _generalDAL.TransactionRollback();
        //        errorMsg = ex.Message;
        //        _effects = -1;
        //        return _effects;
        //    }

        //}

        //Darshana 2014-12-23
        public Int32 Save_Job_Confirmation(List<Service_confirm_Header> _confHdr, List<Service_Confirm_detail> _confDet, List<Service_Cost_sheet> _jobCost, MasterAutoNumber _masterAuto, InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, Boolean _isInv, List<Service_job_Det> _processJobList, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, string _loc, InventoryHeader _aodHdr, List<ReptPickSerials> _reptPickSerialsAod, MasterAutoNumber _aodAuto, RCC _rcc, Boolean _isRcc, Boolean _isstockUpdate, string _cusPreferLoc, string _subChannel, out string errorMsg, out string scv_req_no, Int32 _autoStartJob = 0,
          
            Service_Req_Hdr _jobHdrnew=null, List<Service_Req_Det> _jobItems=null, List<Service_free_det> _Service_free_detlist=null,
            List<Service_Req_Def> _jobDefList = null, List<Service_Req_Det_Sub> _jobDetSubList = null, MasterAutoNumber _recAuto=null,
            string _sbChnlnew=null, string _itemType=null, string _brandnew=null, Int32 _warStus=0, MasterAutoNumber _masterAutonew=null,
           Int32 _isProcess = 0)
             // updated by akila 2017/06/05
        {
          
            
            errorMsg = string.Empty;
            Int32 _invoiceLine = 0;
            Int32 _effects = 0;
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;
            string _confNo = string.Empty;
            bool def_iym_stus = false;
            string _itm_stus = string.Empty;

            Int32 _isInvMaintain = 0;
            Int32 InventorySeqNo = 0;
            List<ReptPickSerials> _pickSerial = new List<ReptPickSerials>();
            List<ReptPickSerialsSub> _pickSubSerial = new List<ReptPickSerialsSub>();
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _fmsInventoryDal = new FMS_InventoryDAL();
                _generalDAL = new GeneralDAL();
                InventoryBLL _InventoryBLL = new InventoryBLL();

                _custServiceDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _salesDAL.ConnectionOpen();
                _inventoryRepDAL.ConnectionOpen();
                _fmsInventoryDal.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                _salesDAL.BeginTransaction();
                _fmsInventoryDal.BeginTransaction();
                _inventoryRepDAL.BeginTransaction();
                _generalDAL.BeginTransaction();

                foreach (Service_confirm_Header _saveHdr in _confHdr)
                {
                    int SeqNum = _custServiceDAL.GetConfSeq();

                    string DocNum = string.Empty;
                    MasterAutoNumber _ClaimDoc = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);

                    DocNum = _saveHdr.Jch_pc + "-" + _ClaimDoc.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _ClaimDoc.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _inventoryDAL.UpdateAutoNumber(_ClaimDoc);

                    _saveHdr.Jch_seq = SeqNum;
                    _saveHdr.Jch_no = DocNum;
                    _confNo = DocNum;

                    _custServiceDAL.save_Conf_Hdr(_saveHdr);

                    Int32 _line = 1;
                    foreach (Service_Confirm_detail _tmpDet in _confDet)
                    {
                        if (_tmpDet.Jcd_cuscd == _saveHdr.Jch_cust_cd && _tmpDet.Jcd_cusname == _saveHdr.Jch_cust_name && _tmpDet.Jcd_cusadd1 == _saveHdr.Jch_add1 && _tmpDet.Jcd_cusadd2 == _saveHdr.Jch_add2 && _tmpDet.Jcd_invtype == _saveHdr.Jch_invtp) //&& _tmpDet.Jcd_invtype == _saveHdr.Jch_invtp - added by Wimal @ 18/07/2018
                        {
                            _tmpDet.Jcd_seq = SeqNum;
                            _tmpDet.Jcd_no = DocNum;
                            // _tmpDet.Jcd_line = _line;
                            _custServiceDAL.save_Conf_Det(_tmpDet);
                            _line = _line + 1;


                        }
                    }
                }
                //iF JOB IS WRPL
                Boolean _isAllowrpl = false;
                List<Service_Close_Type> oCloseType = _custServiceDAL.GetServiceCloseType(_confHdr[0].Jch_com, _subChannel).Where(X => X.SCT_TP == _confHdr[0].Jch_jobclosetp).ToList();
                if (oCloseType != null)
                {
                    if (oCloseType[0].SCT_REPL_ALLOW == 1)//Nadeeka 24-08-2015
                    {
                        _isAllowrpl = true;
                    }
                }
                //   if (_confHdr[0].Jch_jobclosetp == "WRPL")
                if (_isAllowrpl == true)
                {
                    foreach (Service_job_Det _WRLP in _processJobList)
                    {
                        Boolean isinvdutyfree = false;
                        MasterAutoNumber _ReqAppAuto = new MasterAutoNumber();
                        RequestApprovalDetail _tempReqAppDet = new RequestApprovalDetail();
                        RequestApprovalSerials _tempReqAppSer = new RequestApprovalSerials();
                        RequestApprovalHeader _ReqAppHdr = new RequestApprovalHeader();
                        RequestApprovalDetailLog _tempReqAppDetLog = new RequestApprovalDetailLog();
                        RequestApprovalSerialsLog _tempReqAppSerLog = new RequestApprovalSerialsLog();
                        RequestApprovalHeaderLog _ReqAppHdrLog = new RequestApprovalHeaderLog();

                       
                        _ReqAppAuto = new MasterAutoNumber();
                        _ReqAppAuto.Aut_cate_cd = _confHdr[0].Jch_pc;
                        _ReqAppAuto.Aut_cate_tp = "PC";
                        _ReqAppAuto.Aut_direction = 1;
                        _ReqAppAuto.Aut_modify_dt = null;
                        _ReqAppAuto.Aut_moduleid = "REQ";
                        _ReqAppAuto.Aut_number = 0;
                        _ReqAppAuto.Aut_start_char = "EXREQ";
                        _ReqAppAuto.Aut_year = null;

                        string DocNum = string.Empty;
                        MasterAutoNumber _wrplNo = _inventoryDAL.GetAutoNumber(_ReqAppAuto.Aut_moduleid, _ReqAppAuto.Aut_direction, _ReqAppAuto.Aut_start_char, _ReqAppAuto.Aut_cate_tp, _ReqAppAuto.Aut_cate_cd, _ReqAppAuto.Aut_modify_dt, _ReqAppAuto.Aut_year);

                        DocNum = _confHdr[0].Jch_pc + "-" + _wrplNo.Aut_start_char + "-" + _wrplNo.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                        _inventoryDAL.UpdateAutoNumber(_ReqAppAuto);

                        string _brand = string.Empty;
                        string _cate1 = string.Empty;
                        string _cate2 = string.Empty;
                        string _des = string.Empty;
                        string _model = string.Empty;
                        string _cate3 = string.Empty;
                        Boolean _isskipApp = false;
                        DataTable _tblItem = _inventoryDAL.Get_Item_Infor(_WRLP.Jbd_itm_cd);
                        foreach (DataRow r in _tblItem.Rows)
                        {
                            _brand = (string)r["mi_brand"];
                            _cate1 = (string)r["mi_cate_1"];
                            _cate2 = (string)r["mi_cate_2"];
                            _model = (string)r["mi_model"];
                            _des = (string)r["mi_shortdesc"];
                            _cate3 = (string)r["mi_cate_3"];

                        }


                        List<Service_supp_claim_itm> supp_claim_itms = _custServiceDAL.GET_TEMPISSUE_RETURNED_ITMS(_confHdr[0].Jch_com);
                        foreach (Service_supp_claim_itm _itm in supp_claim_itms.Where(x => x.SSC_BRND == _brand && x.SSC_CAT1 == _cate1 && x.SSC_CAT2 == _cate2 && x.SSC_SKP_APP == 1))
                        { _isskipApp = true; }


                        InvoiceHeader _invHdr = new InvoiceHeader();
                        _invHdr = _salesDAL.GetInvoiceHdrByCom(_WRLP.Jbd_com, _WRLP.Jbd_invc_no);
                       
                        DataTable dt = _custServiceDAL.getChannelPara(_confHdr[0].Jch_com, _confHdr[0].Jch_chnl);//add by tharanga 2017/10/24
                        if (dt.Rows.Count > 0)
                        {
                        
                            _itm_stus = dt.Rows[0]["sp_def_exchange_itm_stus"].ToString();
                            if (!string.IsNullOrEmpty(_itm_stus))
                            {
                                def_iym_stus = true;
                            }

                        }

                        //updated by akila 2018/01/19     
                        if (_confHdr[0].Jch_com == "ABE")
                        {
                            InvoiceHeader dtinv = _inventoryDAL.GetInvoiceHeader(_WRLP.Jbd_invc_no); // add by tharanga 2017/10/23
                            if ( dtinv != null && (!string.IsNullOrEmpty(dtinv.Sah_inv_no)))
                            {
                                _ReqAppHdr.Grah_com = dtinv.Sah_com;                               
                                _ReqAppHdrLog.Grah_com = dtinv.Sah_com;

                                _ReqAppHdr.Grah_loc = _loc;
                                _ReqAppHdrLog.Grah_loc = _loc;

                                _ReqAppHdr.Grah_oth_loc = _cusPreferLoc;
                                _ReqAppHdrLog.Grah_oth_loc = _cusPreferLoc;

                                _ReqAppHdr.Grah_oth_pc = dtinv.Sah_pc;
                                _ReqAppHdrLog.Grah_oth_pc = dtinv.Sah_pc; ;
                            }
                            else
                            {
                                _ReqAppHdr.Grah_com = _confHdr[0].Jch_com;
                                _ReqAppHdrLog.Grah_com = _confHdr[0].Jch_com;

                                _ReqAppHdr.Grah_loc = _loc;
                                _ReqAppHdrLog.Grah_loc = _loc;

                                _ReqAppHdr.Grah_oth_loc = _cusPreferLoc;
                                _ReqAppHdrLog.Grah_oth_loc = _cusPreferLoc;

                                _ReqAppHdr.Grah_oth_pc = _confHdr[0].Jch_pc;
                                _ReqAppHdrLog.Grah_oth_pc = _confHdr[0].Jch_pc;
                            }
                        }
                        else
                        {
                            _ReqAppHdr.Grah_com = _confHdr[0].Jch_com;
                            _ReqAppHdrLog.Grah_com = _confHdr[0].Jch_com;

                            _ReqAppHdr.Grah_loc = _cusPreferLoc;
                                //_confHdr[0].Jch_loc;
                            //_ReqAppHdrLog.Grah_loc = _confHdr[0].Jch_loc;
                            _ReqAppHdrLog.Grah_loc = _cusPreferLoc;

                            _ReqAppHdr.Grah_oth_loc = _loc;
                            _ReqAppHdrLog.Grah_oth_loc = _loc;

                            _ReqAppHdr.Grah_oth_pc = _invHdr.Sah_pc;
                            _ReqAppHdrLog.Grah_oth_pc = _invHdr.Sah_pc;
                        }

                        _ReqAppHdr.Grah_app_tp = "ARQT035";
                        _ReqAppHdr.Grah_fuc_cd = _WRLP.Jbd_invc_no;
                        _ReqAppHdr.Grah_ref = DocNum;
                        //_ReqAppHdr.Grah_oth_loc = _loc;
                        _ReqAppHdr.Grah_cre_by = _confHdr[0].Jch_cre_by;
                        _ReqAppHdr.Grah_cre_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdr.Grah_mod_by = _confHdr[0].Jch_cre_by;
                        _ReqAppHdr.Grah_mod_dt = Convert.ToDateTime(DateTime.Now).Date;
                        // _ReqAppHdr.Grah_app_stus = "P";
                        _ReqAppHdr.Grah_app_lvl = 0;
                        _ReqAppHdr.Grah_app_by = string.Empty;
                        _ReqAppHdr.Grah_app_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdr.Grah_remaks = _confHdr[0].Jch_rmk;
                        _ReqAppHdr.Grah_req_rem = "REP";    //kapila 11/6/2016
                        //_ReqAppHdr.Grah_sub_type = "SERVICE";

                        Boolean _isWarRep = _custServiceDAL.IsWarReplaceFound_Exchnge(_confHdr[0].Jch_jobno);
                        if (_isWarRep == false)
                        {
                            if (_isskipApp == true)
                            {
                                //_ReqAppHdr.Grah_oth_loc = _loc;
                                _ReqAppHdr.Grah_sub_type = "SERVICE_APP";
                                _ReqAppHdr.Grah_app_stus = "F";
                            }
                            else
                            {
                                //_ReqAppHdr.Grah_oth_loc = _loc;
                                _ReqAppHdr.Grah_sub_type = "SERVICE";
                                _ReqAppHdr.Grah_app_stus = "P";
                            }
                        }
                        else
                        {
                            //_ReqAppHdr.Grah_oth_loc = _loc;
                            _ReqAppHdr.Grah_sub_type = "SERVICE";
                            _ReqAppHdr.Grah_app_stus = "F";
                        }
                        //kapila 10/11/2016
                        if (_confHdr[0].Jch_jobclosetp == "BYBK")
                            _ReqAppHdr.Grah_sub_type = "BUYVOU";

                        //_ReqAppHdr.Grah_oth_pc = _cusPreferLoc;

                   


                        //if (_invHdr.Sah_inv_no != null)
                        //{
                        //    _ReqAppHdr.Grah_oth_pc = _invHdr.Sah_pc;
                        //}
                        //else
                        //{
                        //    _ReqAppHdr.Grah_oth_pc = "";
                        //}
                        //_ReqAppHdr.Grah_oth_pc = _confHdr[0].Jch_pc;
                        //if (_confHdr[0].Jch_com !="ABE")
                        //{
                        //    _ReqAppHdrLog.Grah_com = _confHdr[0].Jch_com;
                        //    _ReqAppHdrLog.Grah_loc = _confHdr[0].Jch_pc;
                        //}
                        //_ReqAppHdrLog.Grah_com = _confHdr[0].Jch_com;
                        //_ReqAppHdrLog.Grah_loc = _confHdr[0].Jch_pc;
                        _ReqAppHdrLog.Grah_app_tp = "ARQT035";
                        _ReqAppHdrLog.Grah_fuc_cd = _WRLP.Jbd_invc_no;
                        _ReqAppHdrLog.Grah_ref = DocNum;
                        //_ReqAppHdrLog.Grah_oth_loc = _loc;
                        _ReqAppHdrLog.Grah_cre_by = _confHdr[0].Jch_cre_by;
                        _ReqAppHdrLog.Grah_cre_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdrLog.Grah_mod_by = _confHdr[0].Jch_cre_by;
                        _ReqAppHdrLog.Grah_mod_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdrLog.Grah_app_stus = "P";
                        _ReqAppHdrLog.Grah_app_lvl = 0;
                        _ReqAppHdrLog.Grah_app_by = string.Empty;
                        _ReqAppHdrLog.Grah_app_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdrLog.Grah_remaks = _confHdr[0].Jch_rmk;
                       _ReqAppHdrLog.Grah_sub_type = "SERVICE"; 
                        
                        //kapila 10/11/2016
                        if (_confHdr[0].Jch_jobclosetp == "BYBK")
                            _ReqAppHdrLog.Grah_sub_type = "BUYVOU";

                        //_ReqAppHdrLog.Grah_oth_pc = _cusPreferLoc;

                        //if (_invHdr.Sah_inv_no != null)
                        //{
                        //    _ReqAppHdrLog.Grah_oth_pc = _invHdr.Sah_pc;
                        //}
                        //else
                        //{
                        //    _ReqAppHdrLog.Grah_oth_pc = "";
                        //}
                        //_ReqAppHdrLog.Grah_oth_pc = _cusPreferLoc;

                        _generalDAL.SaveRequestApproveHear(_ReqAppHdr);
                        _generalDAL.SaveRequestApproveHear_Log(_ReqAppHdrLog);

                        //Check Previous warranty replacements
                        Warr_Replacement_Det _chkPreWara = new Warr_Replacement_Det();
                        _chkPreWara = _custServiceDAL.GetWarrantyReplacementHistory(_WRLP.Jbd_itm_cd, _WRLP.Jbd_ser1, "C", _WRLP.Jbd_warr);


                        //DataTable _invDet = _custServiceDAL.GetInvDetBySerId(_WRLP.Jbd_invc_no, Convert.ToInt32(_WRLP.Jbd_ser_id), _WRLP.Jbd_itm_cd);
                        DataTable _invDetScm = new DataTable();
                        DataTable _invDet = new DataTable();
                        DataTable _warantyReplaceSerDet = new DataTable();
                        decimal _repVal = 0;

                        if (!string.IsNullOrEmpty(_chkPreWara.Swr_ref))
                        {
                            if (!string.IsNullOrEmpty(_chkPreWara.Swr_rep_val.ToString()))
                            {
                                _repVal = _chkPreWara.Swr_rep_val;
                            }
                            else
                            {
                                _repVal = 0;
                            }
                        }
                        else
                        {
                            _chkPreWara = _custServiceDAL.GetWarrantyReplacementHistory(_WRLP.Jbd_itm_cd, _WRLP.Jbd_ser1, "M", _WRLP.Jbd_warr);
                        }

                        if (string.IsNullOrEmpty(_chkPreWara.Swr_ref))
                        {
                            _invDet = _custServiceDAL.GetInvDetBySerial(_WRLP.Jbd_invc_no, _WRLP.Jbd_ser1, _WRLP.Jbd_itm_cd);

                        }
                        else
                        {
                            _invDet = _custServiceDAL.GetInvDetBySerial(_WRLP.Jbd_invc_no, _chkPreWara.Swr_sal_ser, _chkPreWara.Swr_sal_itm);
                           // _warantyReplaceSerDet = _custServiceDAL.GetWarrantyReplaceSerialDetails(_chkPreWara.Swr_n_itm_ser, _chkPreWara.Swr_n_itm_cd);
                            _warantyReplaceSerDet = _custServiceDAL.GetWarrantyReplaceSerialDetails(_chkPreWara.Swr_n_itm_ser, _chkPreWara.Swr_n_itm_cd);
                            _repVal = _chkPreWara.Swr_rep_val;
                        }

                        Service_JOB_HDR _jobHdr = _custServiceDAL.GET_SCV_JOB_HDR(_WRLP.Jbd_jobno, _WRLP.Jbd_com);

                        //Request approval details
                        _tempReqAppDet.Grad_ref = DocNum;
                        _tempReqAppDet.Grad_line = _WRLP.Jbd_jobline;
                        _tempReqAppDet.Grad_req_param = _WRLP.Jbd_itm_cd;
                        _tempReqAppDet.Grad_val1 = 1;
                        _tempReqAppDet.Grad_inv_line = _WRLP.Jbd_jobline;
                        if (_invDet != null && _invDet.Rows.Count > 0)
                        {
                            decimal _invVal = 0;
                            if (_invDet.Rows[0].Field<string>("sah_inv_tp") == "HS")
                            {
                                List<RecieptHeader> _CrRec = new List<RecieptHeader>();
                                List<HpAdjustment> _adj = new List<HpAdjustment>();
                                decimal _totPaid = 0;
                                decimal _totRev = 0;
                                decimal _totAdjVal = 0;

                                _CrRec = _salesDAL.GetReceiptByAccountNo(_confHdr[0].Jch_com, _invDet.Rows[0].Field<string>("sah_pc"), _invDet.Rows[0].Field<string>("sah_acc_no"));

                                if (_CrRec != null)
                                {
                                    foreach (RecieptHeader _tmp in _CrRec)
                                    {
                                        if (_tmp.Sar_receipt_type == "HPDPM" || _tmp.Sar_receipt_type == "HPDPS" || _tmp.Sar_receipt_type == "HPARS" || _tmp.Sar_receipt_type == "HPARM" || _tmp.Sar_receipt_type == "HPRM" || _tmp.Sar_receipt_type == "HPRS")
                                        {
                                            _totPaid = _totPaid + _tmp.Sar_tot_settle_amt;
                                        }

                                        if (_tmp.Sar_receipt_type == "HPDRV" || _tmp.Sar_receipt_type == "HPREV")
                                        {
                                            _totRev = _totRev + _tmp.Sar_tot_settle_amt;

                                        }
                                    }
                                }

                                _totAdjVal = _salesDAL.Get_hp_Adjustment(_invDet.Rows[0].Field<string>("sah_acc_no"));

                                _invVal = (_totPaid - _totRev) + _totAdjVal;
                            }
                            else
                            {
                                _invVal = (_invDet.Rows[0].Field<decimal>("sad_tot_amt") / _invDet.Rows[0].Field<decimal>("sad_qty")) * 1;
                            }
                            if (true)
                            {
                                
                            }  
                         
                            decimal _diffVal = _repVal - _invVal;
                            decimal _crVal = 0;

                            if (_diffVal >= 0)
                            {
                                _crVal = _invVal + _diffVal;
                            }
                            else
                            {
                                _crVal = _invVal;
                            }

                            //Assing parameters to getting refund credit definition
                            DateTime _doDt = _invDet.Rows[0].Field<DateTime>("ith_doc_date");
                            DateTime _invDt = _invDet.Rows[0].Field<DateTime>("SAH_DT");
                            DateTime _periodCalDt;
                            if (_jobHdr.SJB_JOBSTP == "RCC")
                            {
                                RCC _rccDet = _inventoryDAL.GetRCCbyNo(_jobHdr.SJB_REQNO);
                                _periodCalDt = _rccDet.Inr_dt;
                            }
                            else
                            {
                                _periodCalDt = _jobHdr.SJB_DT;
                            }

                            DateTime _processDt = _confHdr[0].Jch_dt;
                            //int _period = (_periodCalDt.Month - _doDt.Month) + 12 * (_periodCalDt.Year - _doDt.Year);
                            //int _period =  (_periodCalDt.Month - _doDt.Month) + ((_periodCalDt.Year - _doDt.Year) * 12);

                            //int _period = (_periodCalDt.Year * _periodCalDt.Month) - (_doDt.Year * _doDt.Month);
                            //int _period = 0;
                            TimeSpan ts = _periodCalDt - _doDt;
                            int _periodN = ts.Days;



                            //int _period = _periodCalDt - _doDt;
                            //_salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
                            List<MasterSalesPriorityHierarchy> _Saleshir = _salesDAL.GetSalesPriorityHierarchy(_invDet.Rows[0].Field<string>("sah_com"), _invDet.Rows[0].Field<string>("sah_pc"), "PC_PRIT_HIERARCHY", "PC");

                            Refund_credit_definition _getCrParam = new Refund_credit_definition();
                            string _Subchannel = "";
                            string _Company = "";
                            decimal _rate = 0;
                            //check PC
                            _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "PC", _invDet.Rows[0].Field<string>("sah_pc"), _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);

                            if (_getCrParam.Rrd_pt_cd == null)
                            {
                                if (_Saleshir.Count > 0)
                                {
                                    _Subchannel = (from _lst in _Saleshir
                                                   where _lst.Mpi_cd == "SCHNL"
                                                   select _lst.Mpi_val).ToList<string>()[0];

                                    _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "SCHNL", _Subchannel, _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);

                                    if (_getCrParam.Rrd_pt_cd == null)
                                    {
                                        if (_Saleshir.Count > 0)
                                        {
                                            _Company = (from _lst in _Saleshir
                                                        where _lst.Mpi_cd == "COM"
                                                        select _lst.Mpi_val).ToList<string>()[0];

                                            _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "COM", _Company, _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);
                                        }
                                    }
                                }
                            }

                            if (_getCrParam.Rrd_pt_cd != null)
                            {
                                _rate = _getCrParam.Rrd_val;                                
                            }
                            else
                            {
                                _rate = 100;
                            }

                            if (_confHdr[0].Jch_jobclosetp == "WRPLS" || _confHdr[0].Jch_jobclosetp == "SWPR")
                            {
                                if (_rate < 1) { throw new Exception("Job cannot be confirmed. Smart warranty period has expired"); }
                                //_rate = _rate;
                            }
                            else
                            {
                                _rate = 100;
                            }

                            _crVal = (_crVal * _rate) / 100;

                            //_isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
                            _tempReqAppDet.Grad_val2 = _invDet.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
                            //_tempReqAppDet.Grad_val5 = _crVal;//(_invDet.Rows[0].Field<decimal>("sad_tot_amt") / _invDet.Rows[0].Field<decimal>("sad_qty")) * 1; //item.Sad_tot_amt; //Added as per request by Dilanda on 31-03-2017 by Sanjeewa - all Grad_val5 should be invoiced value
                            _tempReqAppDet.Grad_val4 = (_invDet.Rows[0].Field<decimal>("SAD_ITM_TAX_AMT") / _invDet.Rows[0].Field<decimal>("sad_qty")) * 1;
                            _tempReqAppDet.Grad_val5 = (_invDet.Rows[0].Field<decimal>("sad_tot_amt") / _invDet.Rows[0].Field<decimal>("sad_qty")) * 1;
                            _tempReqAppDet.Grad_cred_val = _crVal;
                            if (_invDet.Rows[0].Field<string>("sah_inv_tp") == "HS")
                            {
                                _tempReqAppDet.Grad_val5 = _invDet.Rows[0].Field<decimal>("sad_unit_rt");
                                if (_tempReqAppDet.Grad_val5 > 0)
                                {
                                    _tempReqAppDet.Grad_cred_val = _crVal;
                                }
                                else
                                {
                                    _tempReqAppDet.Grad_cred_val = _invDet.Rows[0].Field<decimal>("sad_unit_rt");
                                }
                            }
                            if (def_iym_stus == true)
                            {
                                _tempReqAppDet.Grad_anal1 = _itm_stus;
                                _tempReqAppDet.Grad_anal15 = _itm_stus;

                            }
                            else
                            {
                                _tempReqAppDet.Grad_anal1 = _invDet.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                                _tempReqAppDet.Grad_anal15 = _invDet.Rows[0].Field<string>("sad_itm_stus");
                            }
                            //_tempReqAppDet.Grad_anal1 = _invDet.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                            _tempReqAppDet.Grad_anal2 = _invDet.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                            _tempReqAppDet.Grad_anal3 = _invDet.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;
                            decimal _seqNo = Convert.ToDecimal(_invDet.Rows[0].Field<decimal>("sad_seq"));
                            _tempReqAppDet.Grad_anal4 = _seqNo.ToString(); //Convert.ToString(item.Sad_seq); 
                            _tempReqAppDet.Grad_anal7 = _invDet.Rows[0].Field<string>("ith_doc_no");
                            //_tempReqAppDet.Grad_anal15 = _invDet.Rows[0].Field<string>("sad_itm_stus");
                            _tempReqAppDet.Grad_anal8 = _jobHdr.SJB_CUST_CD;
                            _tempReqAppDet.Grad_anal9 = "SCM2";
                            _tempReqAppDet.Grad_anal16 = _rate;
                        }
                        else
                        {
                            //_invDetScm = _custServiceDAL.GetInvDetfrmScm(_WRLP.Jbd_invc_no, _WRLP.Jbd_itm_cd);
                            if (string.IsNullOrEmpty(_chkPreWara.Swr_ref))
                            {
                                _invDetScm = _custServiceDAL.GetInvDetWithDofrmScm(_WRLP.Jbd_invc_no, _WRLP.Jbd_itm_cd, _WRLP.Jbd_ser1);
                            }
                            else
                            {
                                _invDetScm = _custServiceDAL.GetInvDetWithDofrmScm(_WRLP.Jbd_invc_no, _chkPreWara.Swr_sal_itm, _chkPreWara.Swr_sal_ser);
                                _repVal = _chkPreWara.Swr_rep_val;
                            }
                            if (_invDetScm != null && _invDetScm.Rows.Count > 0)
                            {

                                decimal _invVal = (_invDetScm.Rows[0].Field<decimal>("sad_tot_amt") / _invDetScm.Rows[0].Field<decimal>("sad_qty")) * 1;
                                decimal _diffVal = _repVal - _invVal;
                                decimal _crVal = 0;

                                if (_diffVal >= 0)
                                {
                                    _crVal = _invVal + _diffVal;
                                }
                                else
                                {
                                    _crVal = _invVal;
                                }

                                DateTime _doDt = _invDetScm.Rows[0].Field<DateTime>("ith_doc_date");
                                DateTime _invDt = _invDetScm.Rows[0].Field<DateTime>("SAH_DT");
                                DateTime _periodCalDt;
                                if (_jobHdr.SJB_JOBSTP == "RCC")
                                {
                                    RCC _rccDet = _inventoryDAL.GetRCCbyNo(_jobHdr.SJB_REQNO);
                                    _periodCalDt = _rccDet.Inr_dt;
                                }
                                else
                                {
                                    _periodCalDt = _jobHdr.SJB_DT;
                                }

                                DateTime _processDt = _confHdr[0].Jch_dt;
                                //int _period = (_periodCalDt.Month - _doDt.Month) + 12 * (_periodCalDt.Year - _doDt.Year);
                                //double _periodN = _periodCalDt.Subtract(_doDt).Days / (365.25 / 12);
                                TimeSpan ts = _periodCalDt - _doDt;
                                int _periodN = ts.Days;

                                //_salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
                                // List<MasterSalesPriorityHierarchy> _Saleshir = _salesDAL.GetSalesPriorityHierarchy(_confHdr[0].Jch_com, _invDet.Rows[0].Field<string>("sah_pc"), "PC_PRIT_HIERARCHY", "PC");

                                Refund_credit_definition _getCrParam = new Refund_credit_definition();
                                string _Subchannel = "";
                                string _Company = "";
                                decimal _rate = 0;
                                //check PC
                                _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDetScm.Rows[0].Field<string>("sah_com"), "PC", _invDetScm.Rows[0].Field<string>("sah_pc"), _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);

                                if (_getCrParam.Rrd_pt_cd == null)
                                {

                                    _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDetScm.Rows[0].Field<string>("sah_com"), "COM", _invDetScm.Rows[0].Field<string>("sah_com"), _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);
                                    //if (_Saleshir.Count > 0)
                                    //{
                                    //    _Subchannel = (from _lst in _Saleshir
                                    //                   where _lst.Mpi_cd == "SCHNL"
                                    //                   select _lst.Mpi_val).ToList<string>()[0];

                                    //    _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_confHdr[0].Jch_com, "SCHNL", _Subchannel, _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _period, _processDt.Date, _invDt.Date);

                                    //    if (_getCrParam.Rrd_pt_cd == null)
                                    //    {
                                    //        if (_Saleshir.Count > 0)
                                    //        {
                                    //            _Company = (from _lst in _Saleshir
                                    //                        where _lst.Mpi_cd == "COM"
                                    //                        select _lst.Mpi_val).ToList<string>()[0];

                                    //            _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_confHdr[0].Jch_com, "COM", _Company, _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _period, _processDt.Date, _invDt.Date);
                                    //        }
                                    //    }
                                    //}
                                }

                                if (_getCrParam.Rrd_pt_cd != null)
                                {
                                    _rate = _getCrParam.Rrd_val;                                    
                                }
                                else
                                {
                                    _rate = 100;
                                }

                                if (_confHdr[0].Jch_jobclosetp == "WRPLS" || _confHdr[0].Jch_jobclosetp == "SWPR")
                                {
                                    if (_rate < 1) { throw new Exception("Job cannot be confirmed. Smart warranty period has expired"); }
                                    //_rate = _rate;
                                }
                                else
                                {
                                    _rate = 100;
                                }

                                _crVal = (_crVal * _rate) / 100;

                                _tempReqAppDet.Grad_val2 = _invDetScm.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
                                _tempReqAppDet.Grad_val5 = _crVal;//_invDetScm.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_tot_amt;
                                _tempReqAppDet.Grad_cred_val = _crVal;

                                string _scm2Status = string.Empty;
                                String _scmStatus = _invDetScm.Rows[0].Field<string>("sad_itm_stus");
                                DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(string.Empty, _scmStatus);
                                if (_tblStus != null)
                                    if (_tblStus.Rows.Count > 0)
                                    {
                                        foreach (DataRow _rs in _tblStus.Rows)
                                        {
                                            _scm2Status = Convert.ToString(_rs["mis_cd"]);
                                            break;
                                        }
                                    }

                                _tempReqAppDet.Grad_anal1 = _scm2Status;//_invDetScm.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                                _tempReqAppDet.Grad_anal2 = _invDetScm.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                                _tempReqAppDet.Grad_anal3 = _invDetScm.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;
                                Int64 _seqNoscm = _invDetScm.Rows[0].Field<Int64>("sad_seq");
                                _tempReqAppDet.Grad_anal4 = _seqNoscm.ToString(); //Convert.ToString(item.Sad_seq); 
                                _tempReqAppDet.Grad_anal7 = _invDetScm.Rows[0].Field<string>("ith_doc_no");
                                _tempReqAppDet.Grad_anal15 = _scm2Status;// _invDetScm.Rows[0].Field<string>("sad_itm_stus");
                                _tempReqAppDet.Grad_anal8 = _invDetScm.Rows[0].Field<string>("sah_cus_cd");
                                _tempReqAppDet.Grad_anal9 = "SCM";
                                _tempReqAppDet.Grad_anal16 = _rate;
                            }
                            else
                            {
                                _tempReqAppDet.Grad_val2 = 0; //item.Sad_unit_rt;
                                _tempReqAppDet.Grad_val5 = 0;
                                _tempReqAppDet.Grad_anal1 = "";
                                _tempReqAppDet.Grad_anal2 = "";
                                _tempReqAppDet.Grad_anal3 = "";
                                _tempReqAppDet.Grad_anal4 = "";
                                _tempReqAppDet.Grad_anal7 = "";
                                _tempReqAppDet.Grad_anal15 = "";
                                _tempReqAppDet.Grad_anal8 = "";
                                _tempReqAppDet.Grad_anal9 = "";
                                _tempReqAppDet.Grad_anal16 = 0;
                            }
                        }
                        _tempReqAppDet.Grad_val3 = 1;
                        //_tempReqAppDet.Grad_val4 = 0;//item.Sad_itm_tax_amt
                        _tempReqAppDet.Grad_anal5 = "EX-RECEIVE";
                        _tempReqAppDet.Grad_date_param = _confHdr[0].Jch_dt;
                        _tempReqAppDet.Grad_is_rt1 = true;
                        _tempReqAppDet.Grad_is_rt2 = false;
                        _tempReqAppDet.Grad_anal6 = _WRLP.Jbd_invc_no;



                        int diffResult = (_jobHdr.SJB_DT.Month - _WRLP.Jbd_warrstartdt.Month) + 12 * (_jobHdr.SJB_DT.Year - _WRLP.Jbd_warrstartdt.Year);
                        _tempReqAppDet.Grad_anal10 = "CREDIT";//As per dilanda added darshana on 18/03/2016 //diffResult.ToString(); //Convert.ToString(UsedWarrantyPeriod);
                        _tempReqAppDet.Grad_anal11 = "CREDIT"; //As per dilanda added darshana on 18/03/2016//(_WRLP.Jbd_warrperiod - diffResult).ToString(); //Convert.ToString(RemainingWarrantyPeriod);
                        _tempReqAppDet.Grad_anal12 = _WRLP.Jbd_jobno;
                        _tempReqAppDet.Grad_anal13 = _confHdr[0].Jch_dt.ToShortDateString();
                        _tempReqAppDet.Grad_anal14 = _WRLP.Jbd_warrstartdt.ToShortDateString();





                        //Request log
                        _tempReqAppDetLog.Grad_ref = DocNum;
                        _tempReqAppDetLog.Grad_line = _WRLP.Jbd_jobline;
                        _tempReqAppDetLog.Grad_req_param = _WRLP.Jbd_itm_cd;
                        _tempReqAppDetLog.Grad_val1 = 1;
                        if (_invDet != null && _invDet.Rows.Count > 0)
                        {
                            decimal _invVal = (_invDet.Rows[0].Field<decimal>("sad_tot_amt") / _invDet.Rows[0].Field<decimal>("sad_qty")) * 1;
                            decimal _diffVal = _repVal - _invVal;
                            decimal _crVal = 0;

                            if (_diffVal >= 0)
                            {
                                _crVal = _invVal + _diffVal;
                            }
                            else
                            {
                                _crVal = _invVal;
                            }

                            //_isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
                            _tempReqAppDetLog.Grad_val2 = _tempReqAppDet.Grad_val2;//_invDet.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
                            _tempReqAppDetLog.Grad_val4 = _tempReqAppDet.Grad_val4;
                            _tempReqAppDetLog.Grad_val5 = _tempReqAppDet.Grad_val5;//_crVal;//_invDet.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_tot_amt;
                            _tempReqAppDetLog.Grad_anal1 = _invDet.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                            _tempReqAppDetLog.Grad_anal2 = _invDet.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                            _tempReqAppDetLog.Grad_anal3 = _invDet.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;

                            decimal _seqNo1 = Convert.ToDecimal(_invDet.Rows[0].Field<decimal>("sad_seq"));
                            _tempReqAppDetLog.Grad_anal4 = _seqNo1.ToString(); //Convert.ToString(item.Sad_seq);
                            //_tempReqAppDetLog.Grad_anal7 = _invDet.Rows[0].Field<string>("ith_doc_no");
                            //_tempReqAppDetLog.Grad_anal15 = _invDet.Rows[0].Field<string>("sad_itm_stus");
                        }
                        else
                        {
                            if (_invDetScm != null && _invDetScm.Rows.Count > 0)
                            {

                                decimal _invVal = (_invDetScm.Rows[0].Field<decimal>("sad_tot_amt") / _invDetScm.Rows[0].Field<decimal>("sad_qty")) * 1;
                                decimal _diffVal = _repVal - _invVal;
                                decimal _crVal = 0;

                                if (_diffVal >= 0)
                                {
                                    _crVal = _invVal + _diffVal;
                                }
                                else
                                {
                                    _crVal = _invVal;
                                }

                                _tempReqAppDetLog.Grad_val2 = _tempReqAppDet.Grad_val2;//_invDetScm.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
                                _tempReqAppDetLog.Grad_val5 = _tempReqAppDet.Grad_val5;//_crVal;//_invDetScm.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_tot_amt;
                                string _scm2Status = string.Empty;
                                String _scmStatus = _invDetScm.Rows[0].Field<string>("sad_itm_stus");
                                DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(string.Empty, _scmStatus);
                                if (_tblStus != null)
                                    if (_tblStus.Rows.Count > 0)
                                    {
                                        foreach (DataRow _rs in _tblStus.Rows)
                                        {
                                            _scm2Status = Convert.ToString(_rs["mis_cd"]);
                                            break;
                                        }
                                    }
                                _tempReqAppDetLog.Grad_anal1 = _scm2Status;//_invDetScm.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                                _tempReqAppDetLog.Grad_anal2 = _invDetScm.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                                _tempReqAppDetLog.Grad_anal3 = _invDetScm.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;
                                Int64 _seqNoscm1 = Convert.ToInt64(_invDetScm.Rows[0].Field<Int64>("sad_seq"));
                                _tempReqAppDetLog.Grad_anal4 = _seqNoscm1.ToString(); //Convert.ToString(item.Sad_seq); 
                                //_tempReqAppDet.Grad_anal7 = _invDetScm.Rows[0].Field<string>("ith_doc_no");
                                //_tempReqAppDet.Grad_anal15 = _invDetScm.Rows[0].Field<string>("sad_itm_stus");
                                //_tempReqAppDet.Grad_anal8 = _invDetScm.Rows[0].Field<string>("sah_cus_cd");
                                // _tempReqAppDet.Grad_anal9 = "SCM";
                            }
                            else
                            {
                                _tempReqAppDetLog.Grad_val2 = 0; //item.Sad_unit_rt;
                                _tempReqAppDetLog.Grad_val5 = 0;
                                _tempReqAppDetLog.Grad_anal1 = "";
                                _tempReqAppDetLog.Grad_anal2 = "";
                                _tempReqAppDetLog.Grad_anal3 = "";
                                _tempReqAppDetLog.Grad_anal4 = "";
                                // _tempReqAppDetLog.Grad_anal7 = "";
                                // _tempReqAppDetLog.Grad_anal15 = "";
                            }
                        }
                        _tempReqAppDetLog.Grad_val3 = 1;
                        //_tempReqAppDetLog.Grad_val4 = 0;//item.Sad_itm_tax_amt
                        _tempReqAppDetLog.Grad_anal5 = "EX-RECEIVE";
                        _tempReqAppDetLog.Grad_date_param = _confHdr[0].Jch_dt;
                        _tempReqAppDetLog.Grad_is_rt1 = true;
                        _tempReqAppDetLog.Grad_is_rt2 = false;
                        //_tempReqAppDetLog.Grad_anal6 = _WRLP.Jbd_invc_no;
                        //_tempReqAppDetLog.Grad_anal8 = _jobHdr.SJB_CUST_CD;
                        //_tempReqAppDetLog.Grad_anal9 = "SCM2";

                        //int diffResult = (_jobHdr.SJB_DT.Month - _WRLP.Jbd_warrstartdt.Month) + 12 * (_jobHdr.SJB_DT.Year - _WRLP.Jbd_warrstartdt.Year);
                        //_tempReqAppDetLog.Grad_anal10 = diffResult.ToString(); //Convert.ToString(UsedWarrantyPeriod);
                        //_tempReqAppDetLog.Grad_anal11 = (_WRLP.Jbd_warrperiod - diffResult).ToString(); //Convert.ToString(RemainingWarrantyPeriod);
                        //_tempReqAppDetLog.Grad_anal12 = _WRLP.Jbd_jobno;
                        //_tempReqAppDetLog.Grad_anal13 = _confHdr[0].Jch_dt.ToShortDateString();
                        //_tempReqAppDetLog.Grad_anal14 = _WRLP.Jbd_warrstartdt.ToShortDateString();

                        //if item given as FOC then current valid price will consider as recive item price
                        if (_tempReqAppDet.Grad_val2 <= 0)
                        {
                            DataTable _getSbChnl = _salesDAL.GetChanelOnPC(_confHdr[0].Jch_com, _confHdr[0].Jch_pc, "SCHNL");
                            string _sbChnl = "";
                            if (_getSbChnl != null && _getSbChnl.Rows.Count > 0)
                            {
                                _sbChnl = _getSbChnl.Rows[0].Field<string>("mpi_val");
                            }

                            DataTable _norPB = _custServiceDAL.GetNorPbDet(_confHdr[0].Jch_com, _sbChnl);
                            string _pbook = "";
                            string _pblvl = "";
                            if (_norPB != null && _norPB.Rows.Count > 0)
                            {
                                _pbook = _norPB.Rows[0].Field<string>("scd_pb");
                                _pblvl = _norPB.Rows[0].Field<string>("scd_lvl");
                            }

                            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                            _priceDetailRef = _salesDAL.GetPriceDetailForQuo(_pbook, _pblvl, _WRLP.Jbd_itm_cd, 1, _confHdr[0].Jch_dt, null, _confHdr[0].Jch_dt);

                            if (_priceDetailRef.Count > 0)
                            {
                                List<PriceDetailRef> _new = _priceDetailRef;
                                _priceDetailRef = new List<PriceDetailRef>();
                                var _p = _new.Where(x => x.Sapd_price_type == 0).ToList();
                                if (_p != null)
                                    if (_p.Count > 0)
                                        _priceDetailRef.Add(_p[0]);

                                foreach (PriceDetailRef _price in _priceDetailRef)
                                {

                                    decimal _invVal = _price.Sapd_itm_price;
                                    decimal _diffVal = _repVal - _invVal;
                                    decimal _crVal = 0;

                                    if (_diffVal >= 0)
                                    {
                                        _crVal = _invVal + _diffVal;
                                    }
                                    else
                                    {
                                        _crVal = _invVal;
                                    }


                                    _tempReqAppDet.Grad_val2 = 0;//_price.Sapd_itm_price;
                                    _tempReqAppDet.Grad_val5 = 0;//_crVal;//_price.Sapd_itm_price;
                                    _tempReqAppDetLog.Grad_val2 = _price.Sapd_itm_price;
                                    _tempReqAppDetLog.Grad_val5 = _crVal;//_price.Sapd_itm_price;
                                }
                            }
                        }


                        _generalDAL.Save_RequestApprove_Det(_tempReqAppDet);
                        _generalDAL.Save_RequestApprove_Det_Log(_tempReqAppDetLog);

                        _tempReqAppSer.Gras_ref = DocNum;
                        _tempReqAppSer.Gras_line = _WRLP.Jbd_jobline;
                        if (_invDet != null && _invDet.Rows.Count > 0)
                        {
                            _tempReqAppSer.Gras_anal1 = _invDet.Rows[0].Field<string>("ith_doc_no");
                            _tempReqAppSer.Gras_anal7 = Convert.ToDecimal(_invDet.Rows[0]["ITB_BASE_REFLINE"].ToString());
                        }
                        else if (_invDetScm != null && _invDetScm.Rows.Count > 0)
                        {
                            _tempReqAppSer.Gras_anal1 = _invDetScm.Rows[0].Field<string>("ith_doc_no");
                        }
                        else
                        {
                            _tempReqAppSer.Gras_anal1 = "";
                            _tempReqAppSer.Gras_anal7 = 0;
                        }
                        _tempReqAppSer.Gras_anal2 = _WRLP.Jbd_itm_cd;
                        _tempReqAppSer.Gras_anal3 = _WRLP.Jbd_ser1;
                        _tempReqAppSer.Gras_anal4 = _WRLP.Jbd_jobno;
                        _tempReqAppSer.Gras_anal5 = _WRLP.Jbd_warr;
                        _tempReqAppSer.Gras_anal6 = Convert.ToInt32(_WRLP.Jbd_ser_id);
                        _tempReqAppSer.Gras_anal8 = _WRLP.Jbd_warrperiod;
                        _tempReqAppSer.Gras_anal9 = _WRLP.Jbd_jobline;
                        _tempReqAppSer.Gras_anal10 = 0;
                        _tempReqAppSer.Gras_inv_line = _WRLP.Jbd_jobline;
                        _tempReqAppSer.Gras_itm_line = 1;
                        _tempReqAppSer.Gras_batch_line = 1;
                        _tempReqAppSer.Gras_ser_line = 1;

                        if (_chkPreWara != null && (!string.IsNullOrEmpty(_chkPreWara.Swr_ref)))                        
                        {
                            if (_warantyReplaceSerDet.Rows.Count > 0)
                            {
                                foreach (DataRow _serials in _warantyReplaceSerDet.Rows)
                                {
                                    _tempReqAppSer.Gras_anal1 = _serials["its_doc_no"] == DBNull.Value ? _tempReqAppSer.Gras_anal1 : _serials["its_doc_no"].ToString();
                                    _tempReqAppSer.Gras_anal3 = _serials["its_ser_1"] == DBNull.Value ? _tempReqAppSer.Gras_anal1 : _serials["its_ser_1"].ToString();
                                    Int32 _tmpSerialId = 0;
                                    Int32.TryParse(_serials["its_ser_id"].ToString(), out _tmpSerialId);
                                    _tempReqAppSer.Gras_anal6 = _tmpSerialId == 0 ? _tempReqAppSer.Gras_anal6 : _tmpSerialId;
                                }
                            }
                        }

                        _generalDAL.Save_RequestApprove_Ser(_tempReqAppSer);
                        _generalDAL.Save_RequestApprove_Ser_Log(_tempReqAppSer, 0);

                        #region Adjustment

                        if (_isskipApp == true)
                        {
                            // Nadeeka 10-06-2015
                            InventoryHeader inHeader = new InventoryHeader();
                            List<ReptPickSerials> _doitemserials = new List<ReptPickSerials>();
                            DataTable dt_location = _inventoryDAL.Get_location_by_code(_confHdr[0].Jch_com, _WRLP.Jbd_loc);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_confHdr[0].Jch_com, _WRLP.Jbd_loc);
                            ReptPickSerials _ser = new ReptPickSerials();



                            foreach (DataRow r in dt_location.Rows)
                            {
                                // Get the value of the wanted column and cast it to string
                                inHeader.Ith_sbu = (string)r["ML_OPE_CD"];
                                if (System.DBNull.Value != r["ML_CATE_2"])
                                {
                                    inHeader.Ith_channel = (string)r["ML_CATE_2"];
                                }
                                else
                                {
                                    inHeader.Ith_channel = string.Empty;
                                }
                            }
                            inHeader.Ith_acc_no = "STOCK_EX";
                            inHeader.Ith_anal_1 = string.Empty;
                            inHeader.Ith_anal_2 = string.Empty;
                            inHeader.Ith_anal_3 = string.Empty;
                            inHeader.Ith_anal_4 = string.Empty;
                            inHeader.Ith_anal_5 = string.Empty;
                            inHeader.Ith_anal_6 = 0;
                            inHeader.Ith_anal_7 = 0;
                            inHeader.Ith_anal_8 = DateTime.MinValue;
                            inHeader.Ith_anal_9 = DateTime.MinValue;
                            inHeader.Ith_anal_10 = false;
                            inHeader.Ith_anal_11 = false;
                            inHeader.Ith_anal_12 = false;
                            inHeader.Ith_bus_entity = _jobHdr.SJB_CUST_CD;
                            inHeader.Ith_cate_tp = "EX";
                            inHeader.Ith_com = _confHdr[0].Jch_com;
                            inHeader.Ith_com_docno = string.Empty;
                            inHeader.Ith_cre_by = _confHdr[0].Jch_cre_by;
                            inHeader.Ith_cre_when = DateTime.Now;
                            inHeader.Ith_del_add1 = string.Empty;
                            inHeader.Ith_del_add2 = string.Empty;
                            inHeader.Ith_del_code = string.Empty;
                            inHeader.Ith_del_party = _jobHdr.SJB_CUST_CD;
                            inHeader.Ith_del_town = string.Empty;
                            inHeader.Ith_direct = true;
                            inHeader.Ith_doc_date = Convert.ToDateTime(DateTime.Now).Date;
                            inHeader.Ith_doc_no = string.Empty;
                            inHeader.Ith_doc_tp = "ADJ";
                            inHeader.Ith_doc_year = Convert.ToDateTime(DateTime.Now).Date.Year;
                            inHeader.Ith_entry_no = _WRLP.Jbd_invc_no;
                            inHeader.Ith_entry_tp = "ARQT035";
                            inHeader.Ith_git_close = true;
                            inHeader.Ith_git_close_date = DateTime.MinValue;
                            inHeader.Ith_git_close_doc = string.Empty;
                            inHeader.Ith_isprinted = false;
                            inHeader.Ith_is_manual = false;
                            inHeader.Ith_job_no = _WRLP.Jbd_jobno;
                            inHeader.Ith_loading_point = string.Empty;
                            inHeader.Ith_loading_user = string.Empty;
                            inHeader.Ith_loc = _WRLP.Jbd_loc;
                            inHeader.Ith_manual_ref = DocNum;
                            inHeader.Ith_mod_by = _confHdr[0].Jch_cre_by;
                            inHeader.Ith_mod_when = DateTime.Now;
                            inHeader.Ith_noofcopies = 0;
                            inHeader.Ith_oth_loc = string.Empty;
                            inHeader.Ith_oth_docno = string.Empty; // do #
                            inHeader.Ith_sub_docno = DocNum;
                            inHeader.Ith_remarks = _confHdr[0].Jch_jobclosermk;
                            inHeader.Ith_bus_entity = _jobHdr.SJB_CUST_CD;
                            inHeader.Ith_del_add1 = string.Empty;
                            MasterAutoNumber masterAuto = new MasterAutoNumber();
                            //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
                            inHeader.Ith_session_id = string.Empty;
                            inHeader.Ith_stus = "A";
                            inHeader.Ith_sub_tp = "NOR";
                            inHeader.Ith_vehi_no = string.Empty;
                            inHeader.Ith_pc = _confHdr[0].Jch_pc;
                            masterAuto.Aut_cate_cd = _WRLP.Jbd_loc;
                            masterAuto.Aut_cate_tp = "LOC";
                            masterAuto.Aut_direction = null;
                            masterAuto.Aut_modify_dt = null;
                            masterAuto.Aut_moduleid = "ERN";
                            masterAuto.Aut_number = 5;//what is Aut_number
                            masterAuto.Aut_start_char = "ERN";
                            masterAuto.Aut_year = null;



                            _ser.Tus_base_doc_no = string.Empty;
                            _ser.Tus_bin = _binCode;
                            _ser.Tus_com = _confHdr[0].Jch_com;
                            _ser.Tus_cre_by = _confHdr[0].Jch_cre_by;
                            _ser.Tus_cre_dt = System.DateTime.Now;
                            _ser.Tus_doc_dt = System.DateTime.Now;
                            _ser.Tus_doc_no = string.Empty;
                            _ser.Tus_exist_grncom = string.Empty;
                            _ser.Tus_exist_grnno = string.Empty;
                            _ser.Tus_exist_supp = string.Empty;
                            DataTable dt_serItem = _inventoryDAL.Get_Int_ItmStausBySerId(_WRLP.Jbd_invc_no, Convert.ToInt32(_tempReqAppSer.Gras_anal6), _tempReqAppSer.Gras_anal3, _tempReqAppSer.Gras_anal2);
                            if (dt_serItem.Rows.Count > 0)
                            {
                                foreach (DataRow r in dt_serItem.Rows)
                                {
                                    _ser.Tus_itm_stus = (string)r["STS"];
                                }
                            }
                            else
                            {
                                _ser.Tus_itm_stus = "GOD";
                            }

                            _ser.Tus_unit_price = 0;
                            _ser.Tus_ageloc = string.Empty;
                            _ser.Tus_ser_1 = _tempReqAppSer.Gras_anal3;
                            _ser.Tus_ser_2 = _tempReqAppSer.Gras_anal4;
                            _ser.Tus_warr_no = _tempReqAppSer.Gras_anal5;
                            _ser.Tus_ser_id = Convert.ToInt32(_tempReqAppSer.Gras_anal6);
                            _ser.Tus_base_itm_line = Convert.ToInt32(_tempReqAppSer.Gras_anal7);
                            _ser.Tus_warr_period = Convert.ToInt32(_tempReqAppSer.Gras_anal8);
                            _ser.Tus_itm_cd = _tempReqAppSer.Gras_anal2;
                            _ser.Tus_itm_brand = _brand;
                            _ser.Tus_itm_desc = _des;
                            _ser.Tus_itm_model = _model;
                            _ser.Tus_loc = _WRLP.Jbd_loc;
                            _ser.Tus_new_remarks = String.Empty;
                            _ser.Tus_new_status = String.Empty;
                            _ser.Tus_qty = 1;
                            _ser.Tus_seq_no = 0;
                            _ser.Tus_job_no = _WRLP.Jbd_jobno;
                            _ser.Tus_job_line = _WRLP.Jbd_jobline;
                            _doitemserials.Add(_ser);

                            string _aodInNo = string.Empty;
                            _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, inHeader, _doitemserials, null, masterAuto, out _aodInNo);
                        }
                        #endregion

                    }
                }

                //If job is BR....
                if (_confHdr[0].Jch_jobclosetp == "BER")
                {
                    foreach (Service_job_Det _br in _processJobList)
                    {
                        BRServiceApproval _saveBrApp = new BRServiceApproval();
                        Service_JOB_HDR _jobHdr = _custServiceDAL.GET_SCV_JOB_HDR(_br.Jbd_jobno, _br.Jbd_com);

                        if (_jobHdr.SJB_JOBSTP == "RCC")
                        {
                            _saveBrApp.Inra_no = _jobHdr.SJB_REQNO;
                            RCC _rccDet = _inventoryDAL.GetRCCbyNo(_jobHdr.SJB_REQNO);
                            if (_rccDet != null)
                            {
                                _saveBrApp.Insa_tp = _rccDet.Inr_tp;
                                _saveBrApp.Insa_sub_tp = _rccDet.Inr_sub_tp;
                                _saveBrApp.Insa_agent = _rccDet.Inr_agent;
                                _saveBrApp.Insa_col_method = _rccDet.Inr_col_method;
                                _saveBrApp.Insa_def_cd = _rccDet.Inr_def_cd;
                                _saveBrApp.Insa_def = _rccDet.Inr_def;
                                _saveBrApp.Insa_condition = _rccDet.Inr_condition;
                                _saveBrApp.Insa_accessories = _rccDet.Inr_accessories;
                                _saveBrApp.Insa_easy_loc = _rccDet.Inr_easy_loc;
                                _saveBrApp.Insa_insp_by = _rccDet.Inr_insp_by;
                                _saveBrApp.Insa_rem1 = _rccDet.Inr_rem1;
                                _saveBrApp.Insa_def_rem = _rccDet.Inr_def_rem;

                            }
                        }
                        else
                        {
                            _saveBrApp.Inra_no = _jobHdr.SJB_JOBNO;
                        }
                        _saveBrApp.Insa_com_cd = _br.Jbd_com;
                        _saveBrApp.Insa_loc_cd = _br.Jbd_loc;
                        _saveBrApp.Insa_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_is_manual = 0;
                        _saveBrApp.Insa_manual_ref = _jobHdr.SJB_MANUALREF;
                        _saveBrApp.Insa_inv_no = _br.Jbd_invc_no;

                        InvoiceHeader _invDet = _salesDAL.GetInvoiceHeader(_saveBrApp.Insa_inv_no);
                        if (_invDet != null)
                        {
                            _saveBrApp.Insa_acc_no = _invDet.Sah_acc_no;
                            _saveBrApp.Insa_inv_dt = _invDet.Sah_dt;
                        }

                        _saveBrApp.Insa_cust_cd = _jobHdr.SJB_CUST_CD;
                        _saveBrApp.Insa_cust_name = _jobHdr.SJB_CUST_NAME;
                        _saveBrApp.Insa_addr = _jobHdr.SJB_ADD1 + " " + _jobHdr.SJB_ADD2;
                        _saveBrApp.Insa_tel = _jobHdr.SJB_MOBINO;
                        _saveBrApp.Insa_itm = _br.Jbd_itm_cd;
                        _saveBrApp.Insa_ser = _br.Jbd_ser1;
                        _saveBrApp.Insa_warr = _br.Jbd_warr;
                        _saveBrApp.Insa_is_jb_open = 1;
                        _saveBrApp.Insa_jb_no = _br.Jbd_jobno;
                        _saveBrApp.Insa_jb_rem = _confHdr[0].Jch_jobclosermk;
                        _saveBrApp.Insa_stage = 4;
                        _saveBrApp.Insa_stus = "A";
                        _saveBrApp.Insa_cre_by = _confHdr[0].Jch_cre_by;
                        _saveBrApp.Insa_mod_by = _confHdr[0].Jch_cre_by;
                        _saveBrApp.Insa_war_period = _br.Jbd_warrperiod;
                        _saveBrApp.Insa_job_dt = _jobHdr.SJB_DT;
                        _saveBrApp.Insa_oth_doc_dt = _jobHdr.SJB_DT;
                        _saveBrApp.Insa_return_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_acknoledge_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_complete_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_anal4 = _br.Jbd_jobline;
                        _saveBrApp.Insa_anal5 = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_anal6 = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_app_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_rej_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_repair_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_disprem1_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_disprem2_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_disprem3_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_rem1_dt = _confHdr[0].Jch_dt;

                        _custServiceDAL.SaveBRServiceApproval(_saveBrApp);


                        //Service_Message oMessage = new Service_Message();
                        //oMessage.Sm_com = _br.Jbd_com;
                        //oMessage.Sm_jobno = _br.Jbd_jobno;
                        //oMessage.Sm_joboline = _br.Jbd_jobline;
                        //oMessage.Sm_jobstage = 7;
                        //oMessage.Sm_ref_num = _saveBrApp.Inra_no;
                        //oMessage.Sm_status = 0;
                        //oMessage.Sm_msg_tmlt_id = 11;

                        //_custServiceDAL.SaveServiceMsg(oMessage);

                    }
                }

                foreach (Service_Cost_sheet _tmpCost in _jobCost)
                {
                    _custServiceDAL.save_JobCostSheet(_tmpCost);
                }

                foreach (Service_job_Det _tmpJobDet in _processJobList)
                {
                    Service_Job_StageLog oLog = new Service_Job_StageLog();
                    if (_autoStartJob == 1)
                    {
                        oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                        oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                        oLog.SJL_COM = _tmpJobDet.Jbd_com;
                        oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                        oLog.SJL_JOBSTAGE = 6;
                        oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                        oLog.SJL_INFSUP = 0;
                        _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    }


                    oLog = new Service_Job_StageLog();
                    decimal _updateStage = 0;
                    if (_isInv == true)
                    {
                        DataTable _dtJobHdr = _custServiceDAL.sp_get_job_hdrby_jobno(_tmpJobDet.Jbd_jobno);
                        DataTable _dtPend = _custServiceDAL.GetPendingAcceptanceStatus(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_loc, _dtJobHdr.Rows[0]["SJB_JOBCAT"].ToString());
                        if (_dtPend.Rows.Count > 0)
                        {
                            if (Convert.ToDecimal(_dtPend.Rows[0]["scs_pend_accept"]) == 1)
                            {
                                _updateStage = Convert.ToDecimal(7.9);
                            }
                            else
                            {
                                _updateStage = 8;
                            }
                        }
                        else
                        {
                            _updateStage = 8;
                        }
                        oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                        oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                        oLog.SJL_COM = _tmpJobDet.Jbd_com;
                        oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                        oLog.SJL_JOBSTAGE = 7;
                        oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                        oLog.SJL_INFSUP = 0;
                        _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    }
                    else if (_confDet.Count <= 0)
                    {
                        DataTable _dtJobHdr = _custServiceDAL.sp_get_job_hdrby_jobno(_tmpJobDet.Jbd_jobno);
                        DataTable _dtPend = _custServiceDAL.GetPendingAcceptanceStatus(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_loc, _dtJobHdr.Rows[0]["SJB_JOBCAT"].ToString());
                        if (_dtPend.Rows.Count > 0)
                        {
                            if (Convert.ToDecimal(_dtPend.Rows[0]["scs_pend_accept"]) == 1)
                            {
                                _updateStage = Convert.ToDecimal(7.9);
                            }
                            else
                            {
                                _updateStage = 8;
                            }
                        }
                        else
                        {
                            _updateStage = 8;
                        }
                        oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                        oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                        oLog.SJL_COM = _tmpJobDet.Jbd_com;
                        oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                        oLog.SJL_JOBSTAGE = 7;
                        oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                        oLog.SJL_INFSUP = 0;
                        _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    }
                    else
                    {
                        _updateStage = 7;
                    }

                    oLog = new Service_Job_StageLog();
                    oLog.SJL_REQNO = "";
                    oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                    oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                    oLog.SJL_COM = _tmpJobDet.Jbd_com;
                    oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                    oLog.SJL_JOBSTAGE = _updateStage;
                    oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                    oLog.SJL_CRE_DT = DateTime.Now;
                    oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                    oLog.SJL_INFSUP = 0;
                    _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);

                    //Cmnted on 2015-11-18 on Asanka's Request
                    //if (_updateStage == 8)
                    //{
                    //    List<Service_JOB_HDR> jobHeaders = _custServiceDAL.GetServiceJobHeaderAll(_tmpJobDet.Jbd_jobno, _tmpJobDet.Jbd_com);
                    //    if (jobHeaders != null && jobHeaders.Count > 0)
                    //    {
                    //        if (jobHeaders[0].SJB_MOD_BY == "F")
                    //        {
                    //            oLog = new Service_Job_StageLog();
                    //            oLog.SJL_REQNO = "";
                    //            oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                    //            oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                    //            oLog.SJL_COM = _tmpJobDet.Jbd_com;
                    //            oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                    //            oLog.SJL_JOBSTAGE = 11;
                    //            oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                    //            oLog.SJL_CRE_DT = DateTime.Now;
                    //            oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                    //            oLog.SJL_INFSUP = 0;

                    //            _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    //            _updateStage = 11;
                    //            //_effect = _CustServiceDAL.Update_JobDetailStage(item.Jcd_jobno, item.Jcd_joblineno, 11);
                    //        }
                    //    }
                    //}

                    _custServiceDAL.Update_JobDetailStage(_tmpJobDet.Jbd_jobno, _tmpJobDet.Jbd_jobline, _updateStage, _confHdr[0].Jch_cre_by);
                    _custServiceDAL.Update_Job_dates(_tmpJobDet.Jbd_jobno, _tmpJobDet.Jbd_jobline, _tmpJobDet.Jbd_techst_dt, DateTime.Now, _tmpJobDet.Jbd_techst_dt_man, DateTime.Now);
                }

                Warr_Replacement_Det _newWarrRepDet = new Warr_Replacement_Det();
                Int32 _warrLine = 0;
                //check for MU AND MPCB
                foreach (Service_Confirm_detail _lst in _confDet)
                {
                    _newWarrRepDet = new Warr_Replacement_Det();
                    MasterItem _chkItm = _inventoryDAL.GetItem(_confHdr[0].Jch_com, _lst.Jcd_itmcd);
                    DataTable _odata = _custServiceDAL.get_REF_OLD_PART_CAT(_chkItm.Mi_cate_1, _chkItm.Mi_cate_2, _chkItm.Mi_cate_3);
                    if (_odata.Rows.Count > 0)
                    {
                        if (_odata.Rows[0]["PROCESS_PARTH"].ToString() == "A")
                        //if (_chkItm.Mi_cate_1 == "PH" && _chkItm.Mi_cate_2 == "MOB" && _chkItm.Mi_cate_3 == "MU")
                        {
                            List<Service_job_Det> _jobItms = new List<Service_job_Det>();
                            _jobItms = _custServiceDAL.GetJobDetails(_lst.Jcd_jobno, _lst.Jcd_joblineno, _confHdr[0].Jch_com);

                            ReptPickSerials PickSerialsDet = _inventoryDAL.Get_all_details_on_serialID(_confHdr[0].Jch_com, _confHdr[0].Jch_loc, null, _lst.Jcd_itmcd, _lst.Jcd_ser_id);
                            //add by akila 2017/07/05
                            if (string.IsNullOrEmpty(PickSerialsDet.Tus_ser_1) || (string.IsNullOrWhiteSpace(PickSerialsDet.Tus_ser_1)))
                            {
                                throw new Exception(string.Format("Job# {0} cannot confirm. {1} Item code {2} has setuped as non serial item", _lst.Jcd_jobno, Environment.NewLine, _lst.Jcd_itmcd));
                            }

                            if (_jobItms.Count > 0)
                            {
                                foreach (Service_job_Det _jItm in _jobItms)
                                {
                                    _custServiceDAL.Update_Warranty_mpcb(_confHdr[0].Jch_com, _jItm.Jbd_itm_cd, _jItm.Jbd_ser1, _jItm.Jbd_warr, Convert.ToInt32(_jItm.Jbd_ser_id), _lst.Jcd_itmcd, PickSerialsDet.Tus_ser_1, _lst.Jcd_ser_id);
                                    //Insert scv_warr_replace
                                    _newWarrRepDet.Swr_act = 1;
                                    _newWarrRepDet.Swr_cre_by = _confHdr[0].Jch_cre_by;
                                    _newWarrRepDet.Swr_dt = _confHdr[0].Jch_dt;
                                    _newWarrRepDet.Swr_job_line = _jItm.Jbd_jobline;
                                    _newWarrRepDet.Swr_jobno = _jItm.Jbd_jobno;
                                    _newWarrRepDet.Swr_line = _warrLine + 1;
                                    _newWarrRepDet.Swr_n_itm_cd = _lst.Jcd_itmcd;
                                    _newWarrRepDet.Swr_n_itm_ser = PickSerialsDet.Tus_ser_1;
                                    _newWarrRepDet.Swr_n_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_o_itm_cd = _jItm.Jbd_itm_cd;
                                    _newWarrRepDet.Swr_o_itm_ser = _jItm.Jbd_ser1;
                                    _newWarrRepDet.Swr_o_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_ref = _lst.Jcd_no;
                                    _newWarrRepDet.Swr_tp = "M";
                                    _newWarrRepDet.Swr_rep_val = 0;
                                    _warrLine = _warrLine + 1;
                                    _custServiceDAL.Save_Warr_Replacement(_newWarrRepDet);
                                }

                            }

                        }
                        else if (_odata.Rows[0]["PROCESS_PARTH"].ToString() == "B") //if (_chkItm.Mi_cate_1 == "PHACC" && _chkItm.Mi_cate_2 == "MOACC" && _chkItm.Mi_cate_3 == "MPCB")
                        {
                            List<Service_job_Det> _jobItms = new List<Service_job_Det>();
                            _jobItms = _custServiceDAL.GetJobDetails(_lst.Jcd_jobno, _lst.Jcd_joblineno, _confHdr[0].Jch_com);

                            ReptPickSerials PickSerialsDet = _inventoryDAL.Get_all_details_on_serialID(_confHdr[0].Jch_com, _confHdr[0].Jch_loc, null, _lst.Jcd_itmcd, _lst.Jcd_ser_id);
                            //add by akila 2017/07/05
                            if (string.IsNullOrEmpty(PickSerialsDet.Tus_ser_1) || (string.IsNullOrWhiteSpace(PickSerialsDet.Tus_ser_1)))
                            {
                                throw new Exception(string.Format("Job# {0} cannot confirm. {1} Item code {2} has setuped as non serial item", _lst.Jcd_jobno, Environment.NewLine, _lst.Jcd_itmcd));
                            }

                            if (_jobItms.Count > 0)
                            {
                                foreach (Service_job_Det _jItm in _jobItms)
                                {
                                    _custServiceDAL.Update_Warranty_mpcb(_confHdr[0].Jch_com, _jItm.Jbd_itm_cd, _jItm.Jbd_ser1, _jItm.Jbd_warr, Convert.ToInt32(_jItm.Jbd_ser_id), _lst.Jcd_itmcd, PickSerialsDet.Tus_ser_1, _lst.Jcd_ser_id);
                                    _newWarrRepDet.Swr_act = 1;
                                    _newWarrRepDet.Swr_cre_by = _confHdr[0].Jch_cre_by;
                                    _newWarrRepDet.Swr_dt = _confHdr[0].Jch_dt;
                                    _newWarrRepDet.Swr_job_line = _jItm.Jbd_jobline;
                                    _newWarrRepDet.Swr_jobno = _jItm.Jbd_jobno;
                                    _newWarrRepDet.Swr_line = _warrLine + 1;
                                    _newWarrRepDet.Swr_n_itm_cd = _lst.Jcd_itmcd;
                                    _newWarrRepDet.Swr_n_itm_ser = PickSerialsDet.Tus_ser_1;
                                    _newWarrRepDet.Swr_n_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_o_itm_cd = _jItm.Jbd_itm_cd;
                                    _newWarrRepDet.Swr_o_itm_ser = _jItm.Jbd_ser1;
                                    _newWarrRepDet.Swr_o_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_ref = _lst.Jcd_no;
                                    _newWarrRepDet.Swr_tp = "M";
                                    _newWarrRepDet.Swr_rep_val = 0;
                                    _warrLine = _warrLine + 1;
                                    _custServiceDAL.Save_Warr_Replacement(_newWarrRepDet);
                                }

                            }
                        }
                        else if (_odata.Rows[0]["PROCESS_PARTH"].ToString() == "C") //if (_chkItm.Mi_cate_1 == "APIPMU" && _chkItm.Mi_cate_2 == "APIMU" && _chkItm.Mi_cate_3 == "MUN") //Updated by akila 2017/06/23
                        {
                            List<Service_job_Det> _jobItms = new List<Service_job_Det>();
                            _jobItms = _custServiceDAL.GetJobDetails(_lst.Jcd_jobno, _lst.Jcd_joblineno, _confHdr[0].Jch_com);

                            ReptPickSerials PickSerialsDet = _inventoryDAL.Get_all_details_on_serialID(_confHdr[0].Jch_com, _confHdr[0].Jch_loc, null, _lst.Jcd_itmcd, _lst.Jcd_ser_id);
                            //add by akila 2017/07/05
                            if (string.IsNullOrEmpty(PickSerialsDet.Tus_ser_1) || (string.IsNullOrWhiteSpace(PickSerialsDet.Tus_ser_1)))
                            {
                                throw new Exception(string.Format("Job# {0} cannot confirm. {1} Item code {2} has setuped as non serial item", _lst.Jcd_jobno, Environment.NewLine, _lst.Jcd_itmcd));
                            }

                            if (_jobItms.Count > 0)
                            {
                                foreach (Service_job_Det _jItm in _jobItms)
                                {
                                    _custServiceDAL.Update_Warranty_mpcb(_confHdr[0].Jch_com, _jItm.Jbd_itm_cd, _jItm.Jbd_ser1, _jItm.Jbd_warr, Convert.ToInt32(_jItm.Jbd_ser_id), _lst.Jcd_itmcd, PickSerialsDet.Tus_ser_1, _lst.Jcd_ser_id);
                                    _newWarrRepDet.Swr_act = 1;
                                    _newWarrRepDet.Swr_cre_by = _confHdr[0].Jch_cre_by;
                                    _newWarrRepDet.Swr_dt = _confHdr[0].Jch_dt;
                                    _newWarrRepDet.Swr_job_line = _jItm.Jbd_jobline;
                                    _newWarrRepDet.Swr_jobno = _jItm.Jbd_jobno;
                                    _newWarrRepDet.Swr_line = _warrLine + 1;
                                    _newWarrRepDet.Swr_n_itm_cd = _lst.Jcd_itmcd;
                                    _newWarrRepDet.Swr_n_itm_ser = PickSerialsDet.Tus_ser_1;
                                    _newWarrRepDet.Swr_n_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_o_itm_cd = _jItm.Jbd_itm_cd;
                                    _newWarrRepDet.Swr_o_itm_ser = _jItm.Jbd_ser1;
                                    _newWarrRepDet.Swr_o_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_ref = _lst.Jcd_no;
                                    _newWarrRepDet.Swr_tp = "M";
                                    _newWarrRepDet.Swr_rep_val = 0;
                                    _warrLine = _warrLine + 1;
                                    _custServiceDAL.Save_Warr_Replacement(_newWarrRepDet);
                                }

                            }
                        }
                    }
                }

                bool isDonow = false;
                Boolean _aodneedrcc = false;

                if (_isInv == true)
                {
                    foreach (Service_Confirm_detail _itm in _confDet)
                    {
                        List<Service_job_Det> oJobitms = new List<Service_job_Det>();
                        oJobitms = _custServiceDAL.GetJobDetails(_itm.Jcd_jobno, _itm.Jcd_joblineno, _invoiceHeader.Sah_com);

                        Service_job_Det JobDetailLine;
                        if (oJobitms.Count > 0)
                        {
                            JobDetailLine = oJobitms[0];
                        }
                        else
                        {
                            JobDetailLine = new Service_job_Det();
                        }

                        Service_Chanal_parameter oChnnalPara = _generalDAL.GetChannelParamers(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                        if (oChnnalPara.SP_ISNEEDGATEPASS == 0)
                        {
                            //continue;
                            isDonow = true;
                        }
                        else
                        {
                            isDonow = false;
                            //check is job F or W
                            Service_Category ocate = _custServiceDAL.GET_SCV_CATE_BY_JOB(_itm.Jcd_jobno, _invoiceHeader.Sah_com);
                            if (ocate != null && ocate.Sc_direct.ToUpper() == "F")
                            {
                                //continue;

                            }
                            else
                            {
                                if (JobDetailLine.Jbd_isgatepass == 1)
                                {
                                    //continue;
                                }
                                else
                                {

                                    continue;
                                }
                            }
                        }

                        //Service_Job_StageLog oLog = new Service_Job_StageLog();
                        //oLog.SJL_REQNO = "";
                        //oLog.SJL_JOBNO = _itm.Jcd_jobno;
                        //oLog.SJL_JOBLINE = _itm.Jcd_joblineno;
                        //oLog.SJL_COM = _invoiceHeader.Sah_com;
                        //oLog.SJL_LOC = _inventoryHeader.Ith_loc;
                        //oLog.SJL_JOBSTAGE = Convert.ToInt32(JobDetailLine.Jbd_stage);
                        //oLog.SJL_CRE_BY = _invoiceHeader.Sah_cre_by;
                        //oLog.SJL_CRE_DT = DateTime.Now;
                        //oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                        //oLog.SJL_INFSUP = 0;
                        //_effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);

                        MasterItem itemDetails = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Jcd_itmcd);
                        DataTable _chk = _salesDAL.GetItemTp(itemDetails.Mi_itm_tp);
                        if (_chk != null && _chk.Rows.Count > 0)
                        {
                            _isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
                        }
                        else
                        {
                            continue;
                        }

                        if (_isInvMaintain == 1)
                        {
                            if (itemDetails.Mi_is_ser1 == 1)
                            {
                                ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc, null, itemDetails.Mi_cd, _itm.Jcd_ser_id);
                                PickSerials.Tus_job_no = _itm.Jcd_jobno;
                                PickSerials.Tus_job_line = _itm.Jcd_joblineno;
                                PickSerials.Tus_base_itm_line = _itm.Jcd_itmline;
                                PickSerials.Tus_qty = _itm.Jcd_qty;//ADD BY THARANGA 2017/01/12
                                PickSerials.Tus_itm_line= _itm.Jcd_itmline;//ADD BY THARANGA 2017/01/12
                                PickSerials.Tus_jcd_line = _itm.Jcd_line;
                                _pickSerial.Add(PickSerials);
                            }
                            else
                            {
                                ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                                _reptPickSerial_.Tus_com = _invoiceHeader.Sah_com;
                                _reptPickSerial_.Tus_base_doc_no = _itm.Jcd_mov_doc;
                                _reptPickSerial_.Tus_base_itm_line = _itm.Jcd_itmline;
                                _reptPickSerial_.Tus_bin = _inventoryDAL.GetDefaultBinCode(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                                _reptPickSerial_.Tus_cre_by = _invoiceHeader.Sah_cre_by;
                                _reptPickSerial_.Tus_cre_dt = DateTime.Now;
                                _reptPickSerial_.Tus_cross_batchline = 0;
                                _reptPickSerial_.Tus_cross_itemline = 0;
                                _reptPickSerial_.Tus_cross_seqno = 0;
                                _reptPickSerial_.Tus_cross_serline = 0;
                                _reptPickSerial_.Tus_doc_dt = Convert.ToDateTime(_invoiceHeader.Sah_dt);
                                _reptPickSerial_.Tus_doc_no = string.Empty;
                                _reptPickSerial_.Tus_exist_grncom = string.Empty;
                                _reptPickSerial_.Tus_isapp = 1;
                                _reptPickSerial_.Tus_iscovernote = 1;
                                _reptPickSerial_.Tus_itm_brand = itemDetails.Mi_brand;
                                _reptPickSerial_.Tus_itm_cd = itemDetails.Mi_cd;
                                _reptPickSerial_.Tus_itm_desc = itemDetails.Mi_longdesc;
                                _reptPickSerial_.Tus_itm_line = 0;
                                _reptPickSerial_.Tus_itm_model = itemDetails.Mi_model;
                                _reptPickSerial_.Tus_itm_stus = _itm.Jcd_itmstus;
                                _reptPickSerial_.Tus_loc = _inventoryHeader.Ith_loc;
                                _reptPickSerial_.Tus_new_status = string.Empty;
                                _reptPickSerial_.Tus_qty = _itm.Jcd_qty;
                                _reptPickSerial_.Tus_ser_1 = "N/A";
                                _reptPickSerial_.Tus_ser_2 = "N/A";
                                _reptPickSerial_.Tus_ser_id = 0;
                                _reptPickSerial_.Tus_ser_line = 0;
                                _reptPickSerial_.Tus_session_id = _invoiceHeader.Sah_session_id;
                                _reptPickSerial_.Tus_unit_cost = 0;
                                _reptPickSerial_.Tus_unit_price = 0;
                                _reptPickSerial_.Tus_usrseq_no = -100;
                                _reptPickSerial_.Tus_warr_no = "N/A";
                                _reptPickSerial_.Tus_warr_period = 0;
                                _reptPickSerial_.Tus_new_remarks = string.Empty;
                                _reptPickSerial_.Tus_job_no = _itm.Jcd_jobno;
                                _reptPickSerial_.Tus_job_line = _itm.Jcd_joblineno;
                                _reptPickSerial_.Tus_jcd_line = _itm.Jcd_line;
                                _reptPickSerial_.Tus_itm_line = _itm.Jcd_itmline;//ADD BY THARANGA 2017/01/12
                                _reptPickSerial_.Tus_jcd_line = _itm.Jcd_line;//ADD BY THARANGA 2017/01/12
                                _pickSerial.Add(_reptPickSerial_);
                            }
                        }

                        //gatepass not raising center and aod need to generate....
                        if (_aodneedrcc == false)
                        {
                            _aodneedrcc = true;
                        }
                    }

                    if (_confDet.Count <= 0)
                    {
                        foreach (Service_job_Det _detjob in _processJobList)
                        {
                            List<Service_job_Det> oJobitms = new List<Service_job_Det>();
                            oJobitms = _custServiceDAL.GetJobDetails(_detjob.Jbd_jobno, _detjob.Jbd_jobline, _invoiceHeader.Sah_com);

                            Service_job_Det JobDetailLine;
                            if (oJobitms.Count > 0)
                            {
                                JobDetailLine = oJobitms[0];
                            }
                            else
                            {
                                JobDetailLine = new Service_job_Det();
                            }

                            Service_Chanal_parameter oChnnalPara = _generalDAL.GetChannelParamers(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                            if (oChnnalPara.SP_ISNEEDGATEPASS == 0)
                            {
                                //continue;
                            }
                            else
                            {
                                //check is job F or W
                                Service_Category ocate = _custServiceDAL.GET_SCV_CATE_BY_JOB(_detjob.Jbd_jobno, _invoiceHeader.Sah_com);
                                if (ocate != null && ocate.Sc_direct.ToUpper() == "F")
                                {
                                    //continue;
                                }
                                else
                                {
                                    if (JobDetailLine.Jbd_isgatepass == 1)
                                    {
                                        //continue;
                                    }
                                    else
                                    {
                                        continue;
                                    }
                                }
                            }
                            //gatepass not raising center and aod need to generate....
                            if (_aodneedrcc == false)
                            {
                                _aodneedrcc = true;
                            }
                        }

                    }


                    Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
                    Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _inventoryDAL.GetSerialID() : -1;

                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);

                    _invoiceHeader.Sah_inv_no = _invNo;
                    _invoiceHeader.Sah_seq_no = InvoiceSeqNo;

                    decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
                    decimal _totalReceiptAmt = 0;
                    if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

                    _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                    _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount


                    if (_invoiceHeader.Sah_is_svat && _invoiceHeader.Sah_inv_tp == "CRED")
                    {
                        decimal vatTotal = _invoiceItem.Sum(X => X.Sad_itm_tax_amt);
                        _invoiceHeader.Sah_anal_8 = _invoiceHeader.Sah_anal_8 + vatTotal;
                    }

                    _salesDAL.SaveSalesHeader(_invoiceHeader);


                    #region Invoice Item Detail

                    //Darshana add check whether pc is special tax applicable pc
                    MasterProfitCenter _mstPc = new MasterProfitCenter();
                    _mstPc = _salesDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                    //add by akila 2017/06/28
                    Boolean _isStrucBaseTax = false;
                    MasterCompany _masterComp = null;
                    _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);
                    if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;


                    foreach (InvoiceItem _itm in _invoiceItem)
                    {
                        MasterItem _item = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                        _invoiceLine = _invoiceLine + 1;

                        _itm.Sad_seq_no = InvoiceSeqNo;
                        //_itm.Sad_itm_line = _invoiceLine;
                        //_itm.Sad_inv_no = Convert.ToString(InvoiceSeqNo);
                        _itm.Sad_inv_no = _invoiceHeader.Sah_inv_no;
                        _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                        _itm.Sad_itm_tp = _item.Mi_itm_tp;
                        _itm.Sad_uom = _item.Mi_itm_uom;
                        _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                        if (_invoiceHeader.Sah_tax_exempted)
                        {
                            _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                            _itm.Sad_itm_tax_amt = 0;
                        }
                        _itm.Sad_conf_no = _confNo;

                        //update DO qty
                        if (isDonow)
                        {
                            decimal _doQty = 0;
                            List<ReptPickSerials> _temp = _pickSerial.Where(x => x.Tus_base_itm_line == _itm.Sad_itm_line && x.Tus_jcd_line == _itm.Sad_conf_line).ToList<ReptPickSerials>();
                            if (_temp != null && _temp.Count > 0)
                            {
                                _itm.Sad_do_qty = _temp.Sum(p => p.Tus_qty);
                            }
                            if (_itm.Sad_itm_tp=="V")
                            {
                                _itm.Sad_do_qty = _itm.Sad_qty;
                            }
                            //_itm.Sad_do_qty = _doQty;
                        }
                        _salesDAL.SaveSalesItem(_itm);
                        _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                        ////Darshana add check whether pc is special tax applicable pc
                        //MasterProfitCenter _mstPc = new MasterProfitCenter();
                        //_mstPc = _salesDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                        ////add by akila 2017/06/28
                        //Boolean _isStrucBaseTax = false;
                        //MasterCompany _masterComp = null;
                        //_masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);
                        //if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                        ////add by akila 2017/06/29
                        //GeneralBLL _generalBal = new GeneralBLL();
                        //bool _isValueNeedToRound  = _generalBal.IsSaleFigureRoundUp(_invoiceHeader.Sah_com);

                        if (_mstPc.Mpc_issp_tax == true)
                        {
                            List<MasterPCTax> _masterPCTax = new List<MasterPCTax>();
                            _masterPCTax = _salesDAL.GetPcTax(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, 1, _invoiceHeader.Sah_dt.Date);

                            decimal newTaxValue = 0;

                            var _pcTaxNBT = from _pcTaxs in _masterPCTax
                                            where _pcTaxs.Mpt_taxtp == "NBT"
                                            select _pcTaxs;

                            foreach (MasterPCTax _one in _pcTaxNBT)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;

                                //updated by akila 2017/06/29
                                decimal _tmpTaxAmount = 0;
                                if (_itm.Sad_disc_rt > 0)
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - (_itm.Sad_unit_amt / 100 * _itm.Sad_disc_rt)) * _one.Mpt_taxrt / 100;
                                else
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100;

                                _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);
                                //_tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100; // ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;

                                if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                _tax.Satx_itm_tax_rt = _one.Mpt_taxrt;
                                _tax.Satx_itm_tax_tp = _one.Mpt_taxtp;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = _itm.Sad_job_no;
                                //_tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _salesDAL.SaveSalesItemTax(_tax);
                                newTaxValue += _tax.Satx_itm_tax_amt;
                            }

                            var _pcTaxVAT = from _pcTaxs in _masterPCTax
                                            where _pcTaxs.Mpt_taxtp == "VAT"
                                            select _pcTaxs;

                            foreach (MasterPCTax _one in _pcTaxVAT)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;

                                //updated by akila 2017/06/29
                                decimal _tmpTaxAmount = 0;
                                if (_itm.Sad_disc_rt > 0)
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - (_itm.Sad_unit_amt / 100 * _itm.Sad_disc_rt)) * _one.Mpt_taxrt / 100;
                                else
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100;

                                _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);
                                //_tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;

                                if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                _tax.Satx_itm_tax_rt = _one.Mpt_taxrt;
                                _tax.Satx_itm_tax_tp = _one.Mpt_taxtp;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = _itm.Sad_job_no;
                                //_tax.Satx_job_no = "";
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                        }
                        else
                        {
                            if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
                            {
                                List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                                //add by akila 2017/06/29
                                if (_isStrucBaseTax == true)
                                {
                                    MasterItem _mstItem = _salesDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                    _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty, _mstItem.Mi_anal1);
                                }
                                else
                                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty);
                                //_itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty);

                                decimal newTaxValue = 0;

                                foreach (MasterItemTax _one in _itmTax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;

                                    //updated by akila 2017/06/28
                                    decimal _tmpTaxAmount = 0;
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - ((_itm.Sad_unit_amt * _itm.Sad_disc_rt) / 100)) * _one.Mict_tax_rate / 100;
                                    _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);
                                    //_tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mict_tax_rate / 100; // ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;

                                    if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                    {
                                        _tax.Satx_itm_tax_amt = 0;
                                    }
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = _itm.Sad_job_no;
                                    //_tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _salesDAL.SaveSalesItemTax(_tax);
                                    newTaxValue += _tax.Satx_itm_tax_amt;
                                }

                                _itmTax = new List<MasterItemTax>();

                                //add by akila 2017/06/28
                                if (_isStrucBaseTax == true)
                                {
                                    MasterItem _mstItem = _salesDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                    _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty, _mstItem.Mi_anal1);
                                }
                                else
                                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty);

                                //_itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty);

                                foreach (MasterItemTax _one in _itmTax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;

                                    //updated by akila. 2017/06/28
                                    decimal _tmpTaxAmount = 0;
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : ((_itm.Sad_unit_amt - ((_itm.Sad_unit_amt * _itm.Sad_disc_rt) / 100)) + newTaxValue) * _one.Mict_tax_rate / 100;
                                    _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);
                                    //_tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue ) * _one.Mict_tax_rate / 100;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;

                                    if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                    {
                                        _tax.Satx_itm_tax_amt = 0;
                                    }
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = _itm.Sad_job_no;
                                    //_tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _salesDAL.SaveSalesItemTax(_tax);
                                }
                            }
                            else
                            {
                                List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                                _itmTaxEff = _salesDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                if (_itmTaxEff.Count > 0)
                                {
                                    foreach (MasterItemTax _one in _itmTaxEff)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                        {
                                            _tax.Satx_itm_tax_amt = 0;
                                        }
                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = _itm.Sad_job_no;
                                        //_tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _salesDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                                else
                                {

                                    List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                                    _itmTax = _salesDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                    foreach (LogMasterItemTax _one in _itmTax)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                        {
                                            _tax.Satx_itm_tax_amt = 0;
                                        }
                                        _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = _itm.Sad_job_no;
                                        //_tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _salesDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                            }
                        }

                        //if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
                        //{
                        //    List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                        //    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty);

                        //    foreach (MasterItemTax _one in _itmTax)
                        //    {
                        //        InvoiceItemTax _tax = new InvoiceItemTax();
                        //        _tax.Satx_inv_no = _itm.Sad_inv_no;
                        //        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        //        _tax.Satx_itm_line = _itm.Sad_itm_line;
                        //        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        //        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                        //        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                        //        _tax.Satx_job_line = 0;
                        //        _tax.Satx_job_no = "";
                        //        _tax.Satx_seq_no = InvoiceSeqNo;
                        //        _salesDAL.SaveSalesItemTax(_tax);
                        //    }
                        //}
                        //else
                        //{
                        //    List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                        //    _itmTaxEff = _salesDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                        //    if (_itmTaxEff.Count > 0)
                        //    {
                        //        foreach (MasterItemTax _one in _itmTaxEff)
                        //        {
                        //            InvoiceItemTax _tax = new InvoiceItemTax();
                        //            _tax.Satx_inv_no = _itm.Sad_inv_no;
                        //            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        //            _tax.Satx_itm_line = _itm.Sad_itm_line;
                        //            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        //            _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                        //            _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                        //            _tax.Satx_job_line = 0;
                        //            _tax.Satx_job_no = "";
                        //            _tax.Satx_seq_no = InvoiceSeqNo;
                        //            _salesDAL.SaveSalesItemTax(_tax);
                        //        }
                        //    }
                        //    else
                        //    {

                        //        List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                        //        _itmTax = _salesDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                        //        foreach (LogMasterItemTax _one in _itmTax)
                        //        {
                        //            InvoiceItemTax _tax = new InvoiceItemTax();
                        //            _tax.Satx_inv_no = _itm.Sad_inv_no;
                        //            _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                        //            _tax.Satx_itm_line = _itm.Sad_itm_line;
                        //            _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                        //            _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                        //            _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                        //            _tax.Satx_job_line = 0;
                        //            _tax.Satx_job_no = "";
                        //            _tax.Satx_seq_no = InvoiceSeqNo;
                        //            _salesDAL.SaveSalesItemTax(_tax);
                        //        }
                        //    }
                        //}

                    }
                    #endregion

                    #region Payment
                    string _shortcompany = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com).Mc_anal5;
                    if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                    {
                        _recieptAuto.Aut_year = null;
                        MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        _recNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _recieptAuto.Aut_year = null;
                        _recieptAuto.Aut_modify_dt = null;

                        _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);

                        _recieptHeader.Sar_seq_no = RecieptSeqNo;
                        _recieptHeader.Sar_receipt_no = _recNo;
                        _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
                        _salesDAL.SaveReceiptHeader(_recieptHeader);

                        Int32 _line = 0;

                        if (_recieptItem != null)
                            if (_recieptItem.Count > 0)
                            {
                                foreach (RecieptItem _itm in _recieptItem)
                                {
                                    _itm.Sard_seq_no = RecieptSeqNo;
                                    _itm.Sard_inv_no = _invoiceHeader.Sah_inv_no;
                                    _itm.Sard_receipt_no = _recNo;
                                    _line = _line + 1;
                                    _itm.Sard_line_no = _line;
                                    _salesDAL.SaveReceiptItem(_itm);

                                    if (_itm.Sard_pay_tp.Trim() == "ADVAN")
                                    {
                                        _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
                                        RecieptHeader _rHdr = new RecieptHeader();
                                        _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
                                        _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
                                        _rHdr.Sar_act = true;
                                        _rHdr.Sar_direct = true;
                                        _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
                                        _salesDAL.SaveReceiptHeader(_rHdr);
                                    }
                                    if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                    {
                                        _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                        MasterBusinessEntity _entity = _salesDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");
                                        MasterProfitCenter _profit = _salesDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);
                                        if (_entity != null)
                                            if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                            {
                                                string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                                OutSMS _out = new OutSMS();
                                                _out.Createtime = DateTime.Now;
                                                _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
                                                _out.Msgstatus = 0;
                                                _out.Msgtype = "S";
                                                _out.Receivedtime = DateTime.Now;
                                                _out.Receiver = _entity.Mbe_cd;
                                                //_out.Receiverphno = _entity.Mbe_mob; //Edit by Chamal 31-03-2015
                                                _out.Senderphno = _entity.Mbe_mob;
                                                _out.Refdocno = _itm.Sard_ref_no;
                                                _out.Sender = _invoiceHeader.Sah_cre_by;
                                                _out.Createtime = DateTime.Now;
                                                _inventoryDAL.SaveSMSOut(_out);
                                            }
                                    }

                                    if (_itm.Sard_pay_tp.Trim() == "LORE")
                                    {
                                        _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _invoiceHeader.Sah_cus_cd, _itm.Sard_anal_4);
                                    }

                                    if (_itm.Sard_pay_tp.Trim() == "GVO")
                                    {
                                        _fmsInventoryDal.UpdateRedeemVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                    }

                                }
                            }
                    }
                    #endregion

                    InventoryHeader _invHdr = null;
                    DataTable _dataTable = null;
                    //InventoryBLL _bll = new InventoryBLL();
                    if (_pickSerial.Count > 0)
                    {
                        InventorySeqNo = _inventoryDAL.GetSerialID();
                        _pickSerial.ForEach(x => x.Tus_base_doc_no = _invoiceHeader.Sah_inv_no);
                        _pickSerial.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                        _inventoryHeader.Ith_oth_docno = _invoiceHeader.Sah_inv_no;
                        _inventoryHeader.Ith_entry_no = _invoiceHeader.Sah_inv_no;
                        _inventoryHeader.Ith_seq_no = InventorySeqNo;
                        //foreach (ReptPickSerials ser in _pickSerial) //ADD BY THARANGA UPDATE _pickSerial LINE NO USING INVITEM
                        //{
                        //    ser.Tus_itm_line = _invoiceItem.Where(r => r.Sad_itm_cd == ser.Tus_itm_cd && r.Sad_itm_stus == ser.Tus_itm_stus).FirstOrDefault().Sad_itm_line;
                        //}

                        
                        //added by Wimal @ 16/07/2018 to carry forward invoice line number into service DO
                        foreach (var invitm in _invoiceItem)
                        {
                                invitm.Mi_net_weight = 0;                                                          
                        }
                        //added by Wimal @ 16/07/2018
                        foreach (ReptPickSerials ser in _pickSerial) 
                        { 
                           // ser.Tus_base_itm_line = _invoiceItem.Where(r => r.Sad_itm_cd == ser.Tus_itm_cd && r.Sad_itm_stus == ser.Tus_itm_stus).FirstOrDefault().Sad_itm_line;
                            var selInvItm = _invoiceItem.Where(r => r.Sad_itm_cd == ser.Tus_itm_cd && r.Sad_itm_stus == ser.Tus_itm_stus && r.Mi_net_weight == 0).Select(r => new { r.Sad_itm_line, r.Mi_net_weight}).FirstOrDefault();
                            ser.Tus_base_itm_line = selInvItm.Sad_itm_line;
                           
                            foreach (var invitm in _invoiceItem)
                            {
                               if (invitm.Sad_itm_line == selInvItm.Sad_itm_line) invitm.Mi_net_weight=1 ;
                            }                        
                        }

                        _InventoryBLL.DeliveryOrderWithoutAutoNo(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, _inventoryRepDAL, _inventoryDAL, true, out _invHdr, out _dataTable);

                        // string _doc;
                        _inventoryDAL.UpdateInventoryAutoNumber(_invHdr, _inventoryAuto, "-", out _DONo);
                        MasterAutoNumber _AutoNo = new MasterAutoNumber();
                        int _e = 0;
                        if (_dataTable.Rows.Count > 0)
                        {
                            for (int i = 0; i < _dataTable.Rows.Count; i++)
                            {
                                if (_dataTable.Rows[i]["DocType"].ToString() == "ADJ")
                                {
                                    _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                    _AutoNo.Aut_moduleid = "ADJ";
                                    _AutoNo.Aut_direction = null;
                                    _AutoNo.Aut_start_char = "ADJ";
                                    _AutoNo.Aut_cate_tp = "LOC";
                                    //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                    _AutoNo.Aut_year = null;

                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                    string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                }
                                else if (_dataTable.Rows[i]["DocType"].ToString() == "GRN")
                                {
                                    _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                    _AutoNo.Aut_moduleid = "GRN";
                                    _AutoNo.Aut_direction = null;
                                    _AutoNo.Aut_start_char = "GRN";
                                    _AutoNo.Aut_cate_tp = "LOC";
                                    //_AutoNo.Aut_year = _inventoryMovementHeader.Ith_doc_date.Year;
                                    _AutoNo.Aut_year = _invHdr.Ith_doc_date.Year;

                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                    string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                }
                                else if (_dataTable.Rows[i]["DocType"].ToString() == "PO")
                                {
                                    //_AutoNo.Aut_cate_cd = _inventoryMovementHeader.Ith_com;
                                    //_AutoNo.Aut_moduleid = "PO_LOCAL";
                                    //_AutoNo.Aut_direction = null;
                                    //_AutoNo.Aut_start_char = "PO";
                                    //_AutoNo.Aut_cate_tp = "COM";
                                    //_AutoNo.Aut_year = null;

                                    _AutoNo.Aut_cate_cd = _invHdr.Ith_com;
                                    _AutoNo.Aut_cate_tp = "COM";
                                    _AutoNo.Aut_direction = null;
                                    _AutoNo.Aut_modify_dt = null;
                                    _AutoNo.Aut_moduleid = "PUR";
                                    _AutoNo.Aut_start_char = "PUR";
                                    _AutoNo.Aut_year = null;

                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                    string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                                    _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                }
                            }
                        }

                        //update inv no
                        _inventoryDAL.UpdateOtherDocuments(_DONo, _invNo);
                        _inventoryDAL.UpdateBatchRefDoc(_DONo, _invNo);
                    }

                    Int32 effect = 0;
                    if (_aodneedrcc == true && _isstockUpdate == true && _aodHdr.Ith_loc != null)
                    {
                        _aodAuto.Aut_moduleid = "AOD";
                        _aodAuto.Aut_start_char = "AOD";
                        _aodAuto.Aut_direction = 0;


                        _InventoryBLL.SaveOutwardScanSerial(_aodHdr, _reptPickSerialsAod, null, _inventoryDAL, true);
                        string documentNo = "";
                        effect = _InventoryBLL.UpdateInventoryAutoNumber(_aodHdr, _aodAuto, "-", out documentNo);

                        // string _message = "";
                        // string _genSalesDoc = ""; string _genInventoryDoc = "";
                        // _InventoryBLL.SaveCommonOutWardEntry(_inventoryHeader.Ith_com, _inventoryHeader.Ith_loc, _inventoryHeader.Ith_com, null, _inventoryHeader, _inventoryAuto, null, null, _reptPickSerials, null, out _message, out _genSalesDoc, out _genInventoryDoc, false, false);

                    }
                    if (_isRcc == true)
                    {
                        _inventoryDAL.Update_RCC_Repair(_rcc);
                    }
                }

                //inr_sermstsub
                List<MST_ITM_CAT_COMP> _itmCompList = new List<MST_ITM_CAT_COMP>();
                Int32 _serLine = 0;
                foreach (Service_job_Det _tmpJobDet in _processJobList)
                {
                    MasterItem _mstItm = _inventoryDAL.GetItem(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_itm_cd);
                    //add by akila 2017/08/03
                    if (_mstItm == null) { throw new Exception("Job item " + _tmpJobDet.Jbd_itm_cd + " is inactive. Please check and update the job item."); }

                    _itmCompList = _custServiceDAL.getMasterItmCatComponant(_mstItm.Mi_cate_1, _mstItm.Mi_cate_2, _mstItm.Mi_cate_3);

                    if (_itmCompList.Count <= 0)
                    {
                        _itmCompList = _custServiceDAL.getMasterItmCatComponant(_mstItm.Mi_cate_1, _mstItm.Mi_cate_2, null);
                    }

                    if (_itmCompList.Count > 0)
                    {
                        foreach (MST_ITM_CAT_COMP _tmpItmcomp in _itmCompList)
                        {
                            foreach (Service_Confirm_detail _tmpConDet in _confDet)
                            {
                                if (_tmpItmcomp.Mcc_itm_cd == _tmpConDet.Jcd_itmcd)
                                {

                                    _custServiceDAL.Update_INR_SERMSTSUB(Convert.ToInt32(_tmpJobDet.Jbd_ser_id), _tmpConDet.Jcd_itmcd, 0);
                                    InventoryWarrantySubDetail _invSerSubMst = new InventoryWarrantySubDetail();
                                    _invSerSubMst.Irsms_act = true;
                                    _invSerSubMst.Irsms_itm_cd = _tmpConDet.Jcd_itmcd;
                                    _invSerSubMst.Irsms_itm_stus = _tmpConDet.Jcd_itmstus;
                                    _invSerSubMst.Irsms_mfc = "N/A";
                                    _invSerSubMst.Irsms_qty = _tmpConDet.Jcd_qty;
                                    _invSerSubMst.Irsms_ser_id = Convert.ToInt32(_tmpJobDet.Jbd_ser_id);
                                    if (_serLine == 0)
                                    {
                                        List<InventoryWarrantySubDetail> _getCurList = new List<InventoryWarrantySubDetail>();
                                        _getCurList = _custServiceDAL.getSerMstSubBySerID(_invSerSubMst.Irsms_ser_id);

                                        if (_getCurList != null)
                                        {
                                            _serLine = _getCurList.Count + 1;
                                        }
                                        else
                                        {
                                            _serLine = _serLine + 1;
                                        }

                                    }
                                    else
                                    {
                                        _serLine = _serLine + 1;
                                    }
                                    _invSerSubMst.Irsms_ser_line = _serLine;
                                    ReptPickSerials _serDet = _inventoryDAL.GetReservedByserialID(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_loc, null, _tmpConDet.Jcd_itmcd, _tmpConDet.Jcd_ser_id);
                                    _invSerSubMst.Irsms_sub_ser = _serDet.Tus_ser_1;
                                    _invSerSubMst.Irsms_tp = "C";
                                    _invSerSubMst.Irsms_warr_no = _tmpJobDet.Jbd_mainitmwarr;
                                    _invSerSubMst.Irsms_warr_period = _tmpJobDet.Jbd_warrperiod;
                                    _invSerSubMst.Irsms_warr_rem = _tmpJobDet.Jbd_warrrmk;
                                    _custServiceDAL.SAVE_INR_SERMSTSUB(_invSerSubMst);
                                }
                            }
                        }
                    }
                }
                if(isDonow)
                {
                    bool inv_balance = false;
                    decimal sad_qty = 0;
                    decimal inb_qty = 0;

                    DataTable dt_sat = _salesDAL.sat_qty_inv_balance(_invNo, null, null, null);


                    if (dt_sat != null && dt_sat.Rows.Count > 0)
                    {
                        if (dt_sat.Rows[0][0] != DBNull.Value)
                        {
                            sad_qty = Convert.ToDecimal(dt_sat.Rows[0][0].ToString());
                        }
                    }

                    DataTable dt_inv_batch = _inventoryDAL.qty_inv_balance(_invNo, null, null, null);
                    if (dt_inv_batch != null && dt_inv_batch.Rows.Count > 0)
                    {
                        if (dt_inv_batch.Rows[0][1] != DBNull.Value)
                        {
                            inb_qty = Convert.ToDecimal(dt_inv_batch.Rows[0][1].ToString());
                        }
                    }
                    if (sad_qty == inb_qty)
                    {
                        inv_balance = true;
                    }

                    if (inv_balance == false)
                    {
                        errorMsg = "Invoice quantity does not match with used item  quantity";
                        _invNo = string.Empty;
                        _recNo = string.Empty;
                        _DONo = string.Empty;
                        _effects = -1;
                    }


                }
                string _reqno = "";
                string _reqno_copy, errorMsgreq = "";
                if (_jobItems != null)
                {
                    if (_Service_free_detlist.Count > 0 && _jobItems.Count > 0)
                    {

                        for (int i = 0; i < _Service_free_detlist.Count; i++)
                        {
                            _reqno_copy = "";
                            _jobHdrnew.Srb_dt = _Service_free_detlist[i].Servicedates;
                            _jobHdrnew.Srb_st_dt = _Service_free_detlist[i].Servicedates;
                            _jobHdrnew.Srb_ed_dt = _Service_free_detlist[i].Servicedates;
                            _jobHdrnew.Srb_custexptdt = _Service_free_detlist[i].Servicedates;
                            _jobHdrnew.Srb_cre_dt = _confHdr.First().Jch_dt;
                            _jobHdrnew.Srb_mod_dt = _confHdr.First().Jch_dt;

                            #region Job Auto Number
                            MasterAutoNumber _jobAuto = new MasterAutoNumber();

                            _jobAuto.Aut_cate_cd = _jobItems.First().Jrd_loc;
                            _jobAuto.Aut_cate_tp = "LOC";
                            _jobAuto.Aut_moduleid = "SVREQ";
                            _jobAuto.Aut_direction = 0;
                            _jobAuto.Aut_year = _confHdr.First().Jch_dt.Year;
                            _jobAuto.Aut_start_char = "SVREQ";
                            #endregion
                            // _masterAuto,
                            _effects = Save_Req_comm(_jobHdrnew, _jobItems, _jobDefList, _jobDetSubList, _recAuto, _sbChnlnew, _itemType, _brandnew, _warStus, _jobAuto,
                       out errorMsg, out _reqno_copy, _isProcess, DateTime.Now.Date, DateTime.Now.Date,
        true, _custServiceDAL, _generalDAL, _inventoryDAL, true);

                            if (string.IsNullOrEmpty(_reqno))
                            {
                                _reqno = _reqno_copy;
                            }
                            else
                                _reqno = ", " + _reqno + ", " + _reqno_copy;


                        }




                    }
                }
                if (_effects == 1)
                {
                    _custServiceDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _salesDAL.TransactionCommit();
                    _inventoryRepDAL.TransactionCommit();
                    _fmsInventoryDal.TransactionCommit();
                    _generalDAL.TransactionCommit();
                    _custServiceDAL.ConnectionClose();
                    _inventoryDAL.ConnectionClose();
                    _salesDAL.ConnectionClose();
                    _inventoryRepDAL.ConnectionClose();
                    _fmsInventoryDal.ConnectionClose();
                    _generalDAL.ConnectionClose();

                    errorMsg = _invNo;
                    scv_req_no = _reqno;
                    _effects = 1;
                    return _effects;
                }
                else
                {
                    _custServiceDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _salesDAL.TransactionRollback();
                    _inventoryRepDAL.TransactionRollback();
                    _fmsInventoryDal.TransactionRollback();
                    _generalDAL.TransactionRollback();
                    errorMsg = errorMsg;
                    scv_req_no = _reqno;
                    _effects = -1;
                    return _effects;

                }

                //_custServiceDAL.TransactionCommit();
                //_inventoryDAL.TransactionCommit();
                //_salesDAL.TransactionCommit();
                //_inventoryRepDAL.TransactionCommit();
                //_fmsInventoryDal.TransactionCommit();
                //_generalDAL.TransactionCommit();
                //_custServiceDAL.ConnectionClose();
                //_inventoryDAL.ConnectionClose();
                //_salesDAL.ConnectionClose();
                //_inventoryRepDAL.ConnectionClose();
                //_fmsInventoryDal.ConnectionClose();
                //_generalDAL.ConnectionClose();

                //errorMsg = _invNo;
                //_effects = 1;
                //return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
                errorMsg = ex.Message;
                _effects = -1;
                scv_req_no = "";
                return _effects;
            }

        }


        string GetRealPhoneNumber(string _phone)
        {
            Regex digitsOnly = new Regex(@"[^\d]");
            return digitsOnly.Replace(_phone, "");
        }

        //Tharaka 2015-01-03
        public List<Service_Enquiry_ConfDetails> GET_SCV_CONFDET_ENQRY(String jobNo, Int32 lineNo, String Com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_CONFDET_ENQRY(jobNo, lineNo, Com);
        }

        //Tharaka 2015-01-10
        public List<Service_Enquiry_CostSheet> GET_SCV_COST_SHEET_ENQRY(String jobNo, Int32 lineNo, String Com, String Loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_COST_SHEET_ENQRY(jobNo, lineNo, Com, Loc);
        }

        //Tharaka 2015-01-10
        public List<Service_Enquiry_WarrtyReplacement> GET_SCV_WARTYREPLMENT_ENQRY(String jobNo, Int32 lineNo, String Com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_WARTYREPLMENT_ENQRY(jobNo, lineNo, Com);
        }

        //Tharaka 2015-01-12
        public List<Service_Enquiry_CustCollectionData> GET_CUST_COLLDATE_ENQRY(String jobNo, Int32 lineNo, String Com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_CUST_COLLDATE_ENQRY(jobNo, lineNo, Com);
        }

        //Tharaka 2015-01-12
        public List<_Service_Enquiry_StageLog> GET_STAGELOG_ENQRY(String jobNo, Int32 lineNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_STAGELOG_ENQRY(jobNo, lineNo);
        }

        //Tharaka 2015-01-13
        public List<Service_Enquiry_Inssuarance> GET_INSSURANCE_ENQRY(String Com, String Ser, String Item, String Invoice)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_INSSURANCE_ENQRY(Com, Ser, Item, Invoice);
        }

        //Tharaka 2015-01-14
        public List<Service_job_Det> SCV_JOB_GET_SER_OSR_REG(String Com, String Loc, String Serial, String Serial2, String RegNum)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.SCV_JOB_GET_SER_OSR_REG(Com, Loc, Serial, Serial2, RegNum);
        }

        //Tharaka 2015-01-16
        public Decimal GET_SCV_ITM_COST(String Com, String Job, Int32 Line, String Item, String Status, Decimal Qty)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_ITM_COST(Com, Job, Line, Item, Status, Qty);
        }

        //Tharaka 2015-01-21
        public List<Service_stockReturn> Get_ServiceWIP_ViewStockItems(string Com, string job, Int32 jobline, string Item, string LOC)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.Get_ServiceWIP_ViewStockItems(Com, job, jobline, Item, LOC);
        }

        //Tharaka 2015-01-22
        public List<Service_TempIssue> GET_TEMPISSUE_By_LOC(string Com, string job, Int32 jobline, string Item, string LOC, string Type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_TEMPISSUE_By_LOC(Com, job, jobline, Item, LOC, Type);
        }

        //Tharaka 2015-01-22
        public String GET_SCV_JOB_CATE(string Com, string job)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_JOB_CATE(Com, job);
        }

        //Tharaka 2015-01-23
        public List<Service_Gate_Pass_HDR> SCV_CHEK_GP_FOR_JOBLINE(String jobNo, Int32 lineNo, String Com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.SCV_CHEK_GP_FOR_JOBLINE(jobNo, lineNo, Com);
        }

        //Tharaka 2015-01-23
        public Service_Category GET_SCV_CATE_BY_JOB(String jobNo, String Com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_SCV_CATE_BY_JOB(jobNo, Com);
        }

        //Tharaka 2014-09-30
        public DataTable GetJObsFOrWIP(string com, DateTime From, DateTime To, string jobno, string Stage, Int32 isCusexpectDate, string customer, string PC, String userID)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJObsFOrWIP(com, From, To, jobno, Stage, isCusexpectDate, customer, PC, userID);
        }

        //Tharaka 2015-01-27
        public List<MST_BUSPRIT_LVL> GetCustomerPriorityLevel(String custCode, String Com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustomerPriorityLevel(custCode, Com);
        }

        //Tharaka 2015-01-27
        public List<MST_BUSPRIT_TASK> GetCustomerPriorityTask(MST_BUSPRIT_TASK OInput)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustomerPriorityTask(OInput);
        }

        //Tharaka 2015-01-27
        public List<SCV_ALRT_LVL> GetAlertLevel(Int32 Seq)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetAlertLevel(Seq);
        }

        //Tharaka 2015-01-27
        public List<SCV_ALRT_EMP> GetAlertEmployees(Int32 Seq)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetAlertEmployees(Seq);
        }

        //Tharaka 2015-01-27
        public List<scv_prit_task> GetPriorityTask(scv_prit_task OInput)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetPriorityTask(OInput);
        }
        //Darshana 2015-01-28
        public List<Service_Job_Charges> GetServiceJobCharges(String jobNo, Int32 _jobLine)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceJobCharges(jobNo, _jobLine);
        }

        //Tharaka 2015-01-29
        public List<Service_StandBy> GetStandByItems(string Com, string job, Int32 jobline, string Item, string LOC)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetStandByItems(Com, job, jobline, Item, LOC);
        }

        //public Int32 CancelServiceJob(String jobNumber, String com, String location, String PC, String userID, String sesstionID, out String errorMsg)
        //{
        //    errorMsg = string.Empty;
        //    Int32 _effects = 0;
        //    try
        //    {
        //        _custServiceDAL = new CustServiceDAL();


        //        return 1;
        //    }
        //    catch (Exception ex)
        //    {
        //        _custServiceDAL.ConnectionClose();
        //        errorMsg = ex.Message;
        //        _effects = -1;
        //        return _effects;
        //    }
        //}


        //Tharaka 2015-01-30

        public List<Service_stockReturn> GetServiceJobStockItems(string Com, string job, Int32 jobline, string Item, string LOC)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceJobStockItems(Com, job, jobline, Item, LOC);
        }

        //Tharaka 2015-01-05
        public int ServiceSaveImages(String com, String pc, String loc, List<ImageUploadDTO> oMainList, out String err)
        {
            int result = 0;
            err = string.Empty;

            try
            {
                _generalDAL = new GeneralDAL();
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                Service_Chanal_parameter oPara = _generalDAL.GetChannelParamers(com, loc);

                string SaveLoc = oPara.SP_DOC_SAVE_PATH;

                if (oPara != null && oPara.SP_DOC_SAVE_PATH != null && !string.IsNullOrEmpty(oPara.SP_DOC_SAVE_PATH))
                {
                    foreach (ImageUploadDTO oSubItem in oMainList)
                    {
                        Service_JOB_HDR oHeader = _custServiceDAL.GetServiceJobHeader(oSubItem.JobNumber, com);

                        string JobNumber = string.Empty;
                        if (!string.IsNullOrEmpty(oHeader.SJB_REQNO))
                        {
                            JobNumber = oHeader.SJB_REQNO;
                        }
                        else
                        {
                            JobNumber = oHeader.SJB_JOBNO;
                        }

                        string folderName = JobNumber;
                        folderName = folderName.Replace('/', '_');
                        folderName = oHeader.SJB_DT.Year.ToString() + @"\" + folderName;
                        if (!Directory.Exists(SaveLoc + oHeader.SJB_DT.Year.ToString()))
                        {
                            Directory.CreateDirectory(SaveLoc + oHeader.SJB_DT.Year.ToString());
                        }
                        if (Directory.Exists(SaveLoc + folderName))
                        {
                            File.WriteAllBytes(SaveLoc + folderName + @"\" + oSubItem.FileName, oSubItem.image);
                        }
                        else
                        {
                            Directory.CreateDirectory(SaveLoc + folderName);
                            File.WriteAllBytes(SaveLoc + folderName + @"\" + oSubItem.FileName, oSubItem.image);
                        }
                        //kapila 16/2/2016
                        int _ef = _custServiceDAL.SaveJobImagePath(oSubItem.JobNumber, oSubItem.JobLine, oSubItem.SerialNo, oSubItem.ImageLine, SaveLoc, oSubItem.FileName);
                    }
                }
                else
                {
                    err = "Please set document save path.";
                    result = -2;
                }
                _custServiceDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                err = ex.Message;
                // throw;
                //Dulanga 2017/12/14 as not return exeception message properly 
                result = -10;
            }
            return result;
        }

        //Tharaka 2015-01-05
        public List<ImageUploadDTO> GetImages(String com, String pc, String loc, ImageUploadDTO job_n_Line, out String err)
        {
            err = string.Empty;
            List<ImageUploadDTO> oMainItems = new List<ImageUploadDTO>();
            try
            {
                _generalDAL = new GeneralDAL();
                _custServiceDAL = new CustServiceDAL();
                Service_Chanal_parameter oPara = _generalDAL.GetChannelParamers(com, loc);

                if (oPara != null && oPara.SP_DOC_SAVE_PATH != null && !String.IsNullOrEmpty(oPara.SP_DOC_SAVE_PATH))
                {
                    string SaveLoc = oPara.SP_DOC_SAVE_PATH;

                    string folderName = job_n_Line.JobNumber;

                    Service_JOB_HDR oHeader = _custServiceDAL.GetServiceJobHeader(job_n_Line.JobNumber, com);


                    string JobNumber = string.Empty;
                    if (!string.IsNullOrEmpty(oHeader.SJB_REQNO))
                    {
                        folderName = oHeader.SJB_REQNO;
                    }
                    else
                    {
                        Service_Req_Hdr oReq = _custServiceDAL.GetServiceReqHeader(com, job_n_Line.JobNumber);
                        if (oReq.Srb_reqno != null)
                        {
                            oHeader.SJB_DT = oReq.Srb_dt;
                        }
                        folderName = job_n_Line.JobNumber;
                    }

                    folderName = oHeader.SJB_DT.Year.ToString() + @"\" + folderName;

                    if (Directory.Exists(SaveLoc + folderName.Replace('/', '_')))
                    {
                        DirectoryInfo d = new DirectoryInfo(SaveLoc + folderName.Replace('/', '_'));
                        FileInfo[] Files = d.GetFiles(); //Getting Text files
                        foreach (FileInfo file in Files)
                        {
                            if (file.Extension.ToUpper() == ".jpg".ToUpper() || file.Extension.ToUpper() == ".jpeg".ToUpper() || file.Extension.ToUpper() == ".png".ToUpper())
                            {
                                ImageUploadDTO oSubItem = new ImageUploadDTO();
                                oSubItem.FileName = file.Name;
                                oSubItem.image = ReadFile(file.FullName);
                                oSubItem.ImagePath = file.FullName;
                                oSubItem.JobLine = job_n_Line.JobLine;
                                oSubItem.JobNumber = job_n_Line.JobNumber;
                                oMainItems.Add(oSubItem);
                            }
                        }
                    }

                }
                else
                {
                    err = "please set documnet save path";
                }

            }
            catch (Exception ex)
            {

                err = ex.Message;
            }

            return oMainItems;
        }

        private byte[] ReadFile(string sPath)
        {
            byte[] data = null;
            FileInfo fInfo = new FileInfo(sPath);
            long numBytes = fInfo.Length;
            FileStream fStream = new FileStream(sPath, FileMode.Open, FileAccess.Read);
            BinaryReader br = new BinaryReader(fStream);
            data = br.ReadBytes((int)numBytes);
            return data;
        }

        //Tharaka 2015-02-06
        public List<Service_Request_Defects> getRequestDefects(string Req, Int32 line)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getRequestDefects(Req, line);
        }

        //Tharaka 2015-02-06
        public List<Service_Job_Defects> GetRequestJobDefectsJobEnty(string Req, Int32 lineNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetRequestJobDefectsJobEnty(Req, lineNo);
        }

        //Tharaka 2015-02-07
        public DataTable GET_INT_HDR_ITMS_JOBENTY(String DocNum, String InvoiceNum)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_INT_HDR_ITMS_JOBENTY(DocNum, InvoiceNum);
        }
        //Darshana 2015-02-12
        public List<MasterServiceEmployee> GetMasterSerEmp(string _com, string _Tp, string _cd, string _cate, string _emp, Int16 _act)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetMasterSerEmp(_com, _Tp, _cd, _cate, _emp, _act);
        }
        //Darshana 2015-02-12
        public Service_Tech_Aloc_Hdr GetAllocTechJob(String _com, String _pc, string _tp, string _jobNo, Int32 _jobLine, string _empCd, string _stus, Int32 _curStatus)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetAllocTechJob(_com, _pc, _tp, _jobNo, _jobLine, _empCd, _stus, _curStatus);
        }

        //Nadeeka 2015-05-18
        public Service_Tech_Aloc_Hdr GetAllocationDet(String _com, String _jobNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetAllocationDet(_com, _jobNo);
        }

        //Nadeeka 2015-06-29
        public DataTable get_supp_claim_amt(string _com, string _claimno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_supp_claim_amt(_com, _claimno);
        }

        //Nadeeka 2015-06-24
        public List<SCV_SUPP_CLAIM_REC> GetSuppWaraPayment(Int64 _seq)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSuppWaraPayment(_seq);
        }


        //Tharaka 2015-02-11
        public List<MST_ITM_CAT_COMP> getMasterItemCategoryComponant(string Cate1)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getMasterItemCategoryComponant(Cate1);
        }

        //Tharaka 2015-02-12
        public bool CheckItemCategoriWarrantyStatus(string com, string itemCode, out string msg, out MST_ITM_CAT_COMP oCateComp)
        {
            bool status = false;
            msg = string.Empty;
            oCateComp = new MST_ITM_CAT_COMP();
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _inventoryDAL = new InventoryDAL();
                MasterItem _itemdetail = _inventoryDAL.GetItem(com, itemCode);

                List<MST_ITM_CAT_COMP> oItemCateCom = new List<MST_ITM_CAT_COMP>();
                oItemCateCom = _custServiceDAL.getMasterItemCategoryComponant(_itemdetail.Mi_cate_1);
                if (oItemCateCom.Count > 0)
                {
                    //check cate 1, cate 2, cate 3
                    if (oItemCateCom.FindAll(x => x.Mcc_cat1 == _itemdetail.Mi_cate_1 && x.Mcc_cat2 == _itemdetail.Mi_cate_2 && x.Mcc_cat3 == _itemdetail.Mi_cate_3).Count > 0)
                    {
                        oCateComp = oItemCateCom.FindAll(x => x.Mcc_cat1 == _itemdetail.Mi_cate_1 && x.Mcc_cat2 == _itemdetail.Mi_cate_2 && x.Mcc_cat3 == _itemdetail.Mi_cate_3)[0];
                        status = true;
                    }
                    //check cate 1, cate 2
                    else if (oItemCateCom.FindAll(x => x.Mcc_cat1 == _itemdetail.Mi_cate_1 && x.Mcc_cat2 == _itemdetail.Mi_cate_2).Count > 0)
                    {
                        oCateComp = oItemCateCom.FindAll(x => x.Mcc_cat1 == _itemdetail.Mi_cate_1 && x.Mcc_cat2 == _itemdetail.Mi_cate_2)[0];
                        status = true;
                    }
                    else
                    {
                        oCateComp = oItemCateCom[0];
                        status = true;
                    }
                }
                else
                {
                    msg = "Please setup peripherals for this job item.";
                }
            }
            catch (Exception ex)
            {
                status = false;
                msg = ex.Message;
                oCateComp = new MST_ITM_CAT_COMP();
            }
            return status;
        }

        //Tharaka 2015-02-12
        public int INSERT_INR_SERMSTSUB(List<InventoryWarrantySubDetail> oItems, out string msg)
        {
            int result = 0;
            msg = string.Empty;

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();

                foreach (InventoryWarrantySubDetail item in oItems)
                {
                    result = _custServiceDAL.INSERT_INR_SERMSTSUB(item);
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                msg = ex.Message;

            }
            return result;
        }

        //Tharaka 2015-02-17
        public int SaveServiceMsg(Service_Message oItem, out string msg)
        {
            int result = 0;
            msg = string.Empty;

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();

                result = _custServiceDAL.SaveServiceMsg(oItem);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                msg = ex.Message;

            }
            return result;
        }

        //Tharaka 2015-02-18
        public List<MST_ITM_CAT_COMP> getMasterItemCategoryComByItem(string Item)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getMasterItemCategoryComByItem(Item);
        }

        //Darshana 2018-02-19
        public List<Service_job_Det> getPrejobDetails(string _com, string _ser, string _itm)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.getPrejobDetails(_com, _ser, _itm);
        }

        //Darshana 2015-02-25
        public decimal GetScvJobStageCost(string _com, string _schnl, string _loc, string _scvCate, decimal _qty, DateTime _date, string _jobStage, string _item)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetScvJobStageCost(_com, _schnl, _loc, _scvCate, _qty, _date, _jobStage, _item);
        }

        //Tharaka 2015-03-16
        public Service_Message_Template GetMessageTemplates_byID(String com, String Chnal, Int32 Id)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetMessageTemplates_byID(com, Chnal, Id);
        }

        //Darshana 2015-03-18
        public Service_confirm_Header GetConfDetByJob(string _com, string _jobNo, string _confNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetConfDetByJob(_com, _jobNo, _confNo);
        }

        //Darshana 2015-03-18
        public int JobConfCancel(string _com, string _jobNo, string _confNo, Int32 _confSeq, string _status, string _user, out string err)
        {
            int result = 0;
            err = string.Empty;

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _custServiceDAL.Update_Conf_Cancel(_status, _confSeq, _com, _confNo, _user);
                Warr_Replacement_Det _warrRepDet = new Warr_Replacement_Det();
                _warrRepDet.Swr_ref = _confNo;
                _warrRepDet.Swr_act = 0;
                _warrRepDet.Swr_cnl_by = _user;
                _custServiceDAL.Update_warr_rep_stus(_warrRepDet);

                List<Service_Confirm_detail> _confDet = new List<Service_Confirm_detail>();
                _confDet = _custServiceDAL.GetServiceConfirmDetials(_confSeq, _confNo);

                if (_confDet != null)
                {
                    foreach (Service_Confirm_detail _list in _confDet)
                    {
                        _custServiceDAL.Update_Warr_rep_ReqCan(_list.Jcd_jobno, _list.Jcd_joblineno, _user);
                    }
                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                result = 1;
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _custServiceDAL.TransactionRollback();
                throw;
            }
            return result;
        }

        public string ExportExcel2007(string _com, string _user, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }

        // Tharaka 2015-05-12
        public Int32 UPDATE_SCV_CONF_HDR_ISINVD(Int32 Status, Int32 seq, string com, out string err, String jobNum)
        {
            int result = 0;
            err = string.Empty;

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _custServiceDAL.UPDATE_SCV_CONF_HDR_ISINVD(Status, seq, com, jobNum);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                result = 1;
            }
            catch (Exception ex)
            {
                err = ex.Message;
                _custServiceDAL.TransactionRollback();
                throw;
            }
            return result;
        }

        //Tharaka 2015-05-15
        public SCV_TRANS_LOG GetTrasferDetailsEnquiry(String job, Int32 Line, String loc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetTrasferDetailsEnquiry(job, Line, loc);
        }

        //Tharaka 2015-05-29
        public List<Service_stockReturn> GetStandyPendingADOItems(string Com, string job, Int32 jobline, string Item, string LOC)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetStandyPendingADOItems(Com, job, jobline, Item, LOC);
        }

        //Tharaka 2015-05-30
        public Int32 Save_SCV_TempIssue(List<Service_TempIssue> oMainList, MasterAutoNumber _ReqInsAuto, out string err)
        {
            err = string.Empty;
            Int32 _effects = 0;
            Int32 _eff = 0;
            Int32 _line = 0;
            string _com = "";
            string _subLoc = "";
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();

                int SeqNum = _custServiceDAL.GetTempIssueSeq();

                string DocNum = string.Empty;
                MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_ReqInsAuto.Aut_moduleid, _ReqInsAuto.Aut_direction, _ReqInsAuto.Aut_start_char, _ReqInsAuto.Aut_cate_tp, _ReqInsAuto.Aut_cate_cd, _ReqInsAuto.Aut_modify_dt, _ReqInsAuto.Aut_year);

                DocNum = oMainList[0].STI_LOC + "-" + _reversInv.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                _inventoryDAL.UpdateAutoNumber(_ReqInsAuto);

                foreach (Service_TempIssue item in oMainList)
                {
                    item.STI_SEQNO = SeqNum;
                    item.STI_DOC = DocNum;
                    _line = _line + 1;
                    item.STI_LINE = _line;
                    _com = item.STI_COM;
                    _subLoc = item.STI_SUB_LOC;
                    _eff += _custServiceDAL.UPD_TMP_ISSUE_RET(item.STI_COM, item.STI_LOC, item.STI_ISSUEITMCD, item.STI_ISSUESERIALNO, item.STI_DOC_TP);
                    _effects += _custServiceDAL.Save_scv_tempIssue(item);
                }

                //send mail
                List<MsgInformation> _mail = _generalDAL.GetMsgInformation(_com, null, "TEMP_ISSUE");
                if (_mail != null)
                    if (_mail.Count > 0)
                    {
                        foreach (MsgInformation _info in _mail)
                        {
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();

                            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                            smtpClient.Host = _generalDAL.GetMailHost();
                            smtpClient.Port = 25;
                            message.From = fromAddress;

                            string _email = "";

                            _email = "Dear Sir/Madam, \n\n" + _email;
                            _email += "Temporary Issue note has been generated to :" + _subLoc + " \n";
                            _email += "\n  Receipt # : " + DocNum + "\n";

                            _email += _generalDAL.GetMailFooterMsg();

                            message.To.Add(_info.Mmi_email);
                            message.Subject = "Temporary Issue (Sub Location)";
                            //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                            //message.Bcc.Add(new MailAddress(""));
                            message.IsBodyHtml = false;
                            message.Body = _email;
                            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                            // Send SMTP mail
                            smtpClient.Send(message);
                        }
                    }
                err = DocNum;
                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();

                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
                _effects = -1;
                err = ex.Message;
                return _effects;
            }
        }

        //Tharaka 2015-06-01
        public DataTable GET_CON_HDRS_JOB_COM(string Com, string job)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_CON_HDRS_JOB_COM(Com, job);
        }
        //Sanejewa 2016-03-24
        public DataTable check_Invoiced_JobClosed(string _invoice)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.check_Invoiced_JobClosed(_invoice);
        }
        //Tharaka 2015-06-01
        public int getSerialDetails(String serial, out string err, out DataTable dtTempWarra, out DataTable dtInvoiceDetails, out DataTable dtWarrReplace, out DataTable dtIntHdr)
        {
            int result = 0;
            err = string.Empty;
            dtTempWarra = new DataTable();
            dtInvoiceDetails = new DataTable();
            dtWarrReplace = new DataTable();
            dtIntHdr = new DataTable();

            try
            {
                _custServiceDAL = new CustServiceDAL();

                //DataTable dtTempWarra;
            //DataTable dtInvoiceDetails;

                lineAgain:

                dtTempWarra = _custServiceDAL.GET_TEMPWARR_BY_SERAL(serial);
                if (dtTempWarra != null && dtTempWarra.Rows.Count > 0)
                {
                    String itemcode = dtTempWarra.Rows[0]["itemcode"].ToString();
                    String invoiceno = dtTempWarra.Rows[0]["invoiceno"].ToString();

                    dtInvoiceDetails = _custServiceDAL.GET_SERIALDETFROMSCM2(invoiceno, itemcode);
                    if (dtInvoiceDetails == null || dtInvoiceDetails.Rows.Count == 0)
                    {
                        dtInvoiceDetails = _custServiceDAL.GET_SERIALDETFROMSCM(invoiceno, itemcode);
                    }
                    if (dtInvoiceDetails == null || dtInvoiceDetails.Rows.Count == 0)
                    {
                        string DocNum = dtTempWarra.Rows[0][0].ToString();
                        dtIntHdr = _custServiceDAL.GET_INT_HDR_FOR_ENQRY_BYDOC(DocNum);
                    }
                    else
                    {
                        dtIntHdr = _custServiceDAL.GET_INT_HDR_FOR_ENQRY_BYDOC("test");
                    }
                }
                else
                {
                    dtWarrReplace = _custServiceDAL.GET_WARR_DET_BY_OLD_SER(serial);
                    if (dtWarrReplace != null && dtWarrReplace.Rows.Count > 0)
                    {
                        serial = dtWarrReplace.Rows[0]["swr_n_itm_ser"].ToString();
                        goto lineAgain;
                    }
                    else
                    {
                        dtInvoiceDetails = _custServiceDAL.GET_SERIALDETFROMSCM2("test", "test");
                        dtIntHdr = _custServiceDAL.GET_INT_HDR_FOR_ENQRY_BYDOC("test");
                    }
                }

                dtWarrReplace = _custServiceDAL.GET_WARR_DET_BY_OLD_SER(serial);
            }
            catch (Exception ex)
            {
                err = ex.Message;
            }
            return result;
        }

        //Tharka 2015-07-13
        public DataTable GET_WRR_RPLC_DETAILS(string Com, string job, out DataTable dtDocDetails, out DataTable dtRecSerial, out DataTable dtIssuedSer)
        {
            _custServiceDAL = new CustServiceDAL();

            DataTable dtresult = new DataTable();
            dtDocDetails = new DataTable();
            dtRecSerial = new DataTable();
            dtIssuedSer = new DataTable();

            try
            {
                dtresult = _custServiceDAL.GET_WRR_RPLC_DETAILS(Com, job);


                if (dtresult != null && dtresult.Rows.Count > 0)
                {
                    dtDocDetails = _custServiceDAL.GET_WRR_INVTRYDET_BY_SUBDOC(dtresult.Rows[0]["grah_ref"].ToString());

                    if (dtDocDetails.Select("ith_direct = 0").Length > 0)
                    {
                        DataTable dtTemp = dtDocDetails.Select("ith_direct = 0").CopyToDataTable();
                        string doc = dtTemp.Rows[0]["ith_doc_no"].ToString();
                        dtIssuedSer = _custServiceDAL.GET_WRR_SER_BY_DOC(doc);
                        if (dtIssuedSer.Rows.Count == 0)
                        {
                            dtIssuedSer = dtresult;
                        }
                    }
                    else
                    {
                        dtIssuedSer = dtresult;
                        dtRecSerial = dtresult;
                    }
                }
                else
                {
                    dtDocDetails = dtresult;
                    dtIssuedSer = dtresult;
                    dtRecSerial = dtresult;
                }

                dtRecSerial = _custServiceDAL.GET_WARR_RPLCE_SERIALS(job);
                if (dtRecSerial == null || dtRecSerial.Rows.Count == 0)
                {
                    dtRecSerial = dtresult;
                }
            }
            catch (Exception ex)
            {

            }

            return dtresult;
        }
        //Darshana 2015-07-13
        public List<RequestApprovalHeader> GetWarrRepReqByJobNumber(string _jobNo, Int32 _jobLineNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetWarrRepReqByJobNumber(_jobNo, _jobLineNo);
        }

        //Tharaka 2015-07-16
        public bool CheckPendignAODForInvoiceReversal(String invoiceNUm, String COm, String Loc, out string err)
        {
            err = string.Empty;
            bool Status = true;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                List<InventoryHeader> oAODs = _custServiceDAL.GET_ADO_BY_INVOICE(invoiceNUm, COm, Loc);
                if (oAODs.Count > 0)
                {
                    foreach (InventoryHeader oAOD in oAODs)
                    {
                        List<InventoryHeader> oAOD_Ins = _custServiceDAL.GET_OTH_LOC_AODIN_BY_OTHDOC(oAOD.Ith_doc_no, COm, Loc);
                        if (oAOD_Ins != null && oAOD_Ins.Count > 0)
                        {
                            err = oAOD_Ins[0].Ith_doc_no;
                            Status = false;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Status = false;
                err = ex.Message;
            }

            return Status;
        }

        //Tharaka 2015-07-21
        public List<Service_Enquiry_Job_Det> GET_JOB_DET_ENQRY_New(String Ser1, String Ser2, String RegNum, String Com, String Loc, DateTime Fromdt, DateTime Todt, out string err)
        {
            List<Service_Enquiry_Job_Det> result = new List<Service_Enquiry_Job_Det>();
            err = string.Empty;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                result = _custServiceDAL.GET_JOB_DET_ENQRY(Ser1, Ser2, RegNum, Com, Loc, Fromdt, Todt);
                if (result != null && result.Count > 0)
                {
                    foreach (Service_Enquiry_Job_Det item in result)
                    {
                        item.IswarrRep = "No";
                    }
                }

            nx:
                DataTable dtWarr = _custServiceDAL.GET_WARR_DET_BY_NEW_SER(Ser1);
                if (dtWarr != null && dtWarr.Rows.Count > 0)
                {
                    Ser1 = dtWarr.Rows[0]["swr_o_itm_ser"].ToString();
                    List<Service_Enquiry_Job_Det> oItem = new List<Service_Enquiry_Job_Det>();
                    oItem = _custServiceDAL.GET_ENQUIRY_DET_BY_JOB_LINE(dtWarr.Rows[0]["swr_jobno"].ToString(), Convert.ToInt32(dtWarr.Rows[0]["swr_job_line"].ToString()));
                    if (oItem != null && oItem.Count > 0)
                    {
                        foreach (Service_Enquiry_Job_Det item in oItem)
                        {
                            item.IswarrRep = "yes";
                        }
                    }
                    result.AddRange(oItem);
                    goto nx;
                }
            }
            catch (Exception ex)
            {
                err = ex.Message;
            }
            return result;
        }
        //Darshana 2015-07-16
        public Warr_Replacement_Det GetWarrantyReplacementHistory(string _nItm, string _nSer, string _tp, string _nWara)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetWarrantyReplacementHistory(_nItm, _nSer, _tp, _nWara);
        }

        public Int32 SendbMail(string _mail, string _msg, string _subject, out string _err)
        {
            Int32 _effects = 0;
            try
            {
                #region mail
                if (!string.IsNullOrEmpty(_mail))
                {
                    _generalDAL = new GeneralDAL();
                    _generalDAL.ConnectionOpen();
                    _generalDAL.BeginTransaction();

                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();

                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;

                    _msg += _generalDAL.GetMailFooterMsg();

                    message.To.Add(_mail);
                    message.Subject = _subject;
                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    //message.Bcc.Add(new MailAddress(""));
                    message.IsBodyHtml = false;
                    message.Body = _msg;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                    // Send SMTP mail
                    smtpClient.Send(message);

                    _generalDAL.TransactionCommit();
                    _generalDAL.ConnectionClose();
                }
                #endregion
                _err = "";
            }
            catch (Exception ex)
            {
                _generalDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();

                _err = ex.Message;
                _effects = -1;
            }
            _effects = 1;
            return _effects;
        }

        //public Int32 SendRepeatJobMail(string _com,string _loc,string _item, string _serial, out string _err)
        //{
        //    Int32 _effects = 0;
        //    try
        //    {
        //        _custServiceDAL = new CustServiceDAL();
        //        _custServiceDAL.ConnectionOpen();
        //        _custServiceDAL.BeginTransaction();

        //        string _email = "";
        //        string _msg = "";
        //        string _subject = "";
        //        string _error = "";
        //        int _repeatDays = 0;
        //        DateTime _startFrom;

        //        DataTable _RptMailUser = _custServiceDAL.get_MsgInformation(_com, _loc, "RPTJOB");
        //        if (_RptMailUser.Rows.Count > 0)
        //        {
        //            DataTable _syspara = _custServiceDAL.get_HPSystemParaDetail("LOC", _loc, "RPTJOB", DateTime.Now);
        //            foreach (DataRow row in _syspara.Rows)
        //            {
        //                _repeatDays = Convert.ToInt16(row["sjb_jobno"].ToString());
        //            }
        //            DateTime dt1 = DateTime.Now;
        //            TimeSpan Days = new TimeSpan(_repeatDays, 0, 0, 0);
        //            DateTime tomorrow = dt1 + Days;

        //            _startFrom = tomorrow;

        //            DataTable _repearjob = _custServiceDAL.get_RepeatedJobDetail(_item, _serial, _startFrom);

        //            _msg = "Dear Sir/ Madam, \n\n";
        //            _msg += "\n Below item has been repaired within " + _repeatDays + " days. Job history as below. \n\n\n";
        //            _msg += "\n Item Details \n";
        //            _msg += "-------------- \n\n";
        //            _msg += "Item Code : " + _item + " /n";
        //            _msg += "Serial No : " + _serial + " /n/n";

        //            foreach (DataRow row in _repearjob.Rows)
        //            {
        //                DataTable _tech = _custServiceDAL.get_RepeatedJobTechnicianDetail(row["sjb_jobno"].ToString());

        //                _msg += "\n Job Details \n";
        //                _msg += "-------------- \n\n";

        //                _msg += "\n Job No               : " + row["sjb_jobno"].ToString() + " \n";
        //                _msg += "\n Job Date             : " + row["sjb_dt"].ToString() + " \n";
        //                _msg += "\n Location Code        : " + row["jbd_loc"].ToString() + " \n";
        //                _msg += "\n Job Item             : " + row["jbd_itm_cd"].ToString() + " \n";
        //                _msg += "\n Job Item Description : " + row["jbd_itm_desc"].ToString() + " \n";
        //                _msg += "\n Job Item Brand       : " + row["mb_desc"].ToString() + " \n";
        //                _msg += "\n Job Item Model       : " + row["jbd_model"].ToString() + " \n";
        //                _msg += "\n Job Item Serial      : " + row["jbd_ser1"].ToString() + " \n";
        //                _msg += "\n Current Status       : " + row["jbs_desc"].ToString() + " \n";

        //                _msg += "------------------------------------------------------------------------------------------ \n\n";
        //            }

        //            _msg += "\n\n\n\n\n\n\n\n\n\n";
        //            _msg += "\n ** This is an auto generated mail from system. Please don't Reply ** \n";

        //            foreach (DataRow row in _syspara.Rows)
        //            {
        //                _effects = SendbMail(_email, _msg, _subject, out _error);
        //            }
        //        }

        //        _custServiceDAL.TransactionCommit();
        //        _custServiceDAL.ConnectionClose();

        //        if (_error == "") { _err = ""; } else { _err = _error; }
        //    }
        //    catch (Exception ex)
        //    {
        //        _generalDAL.TransactionRollback();
        //        _salesDAL.TransactionRollback();
        //        _custServiceDAL.TransactionRollback();
        //        _inventoryDAL.TransactionRollback();

        //        _err = ex.Message;
        //        _effects = -1;
        //    }

        //    return _effects;
        //}
        public Int32 SendWarantyReplacementMail(string _com, string _pc, string _loc, string _jobNo, DateTime _date, String _remarks, string _subChanel, string _user, Int32 isComplete)
        {
            Int32 _effects = 0;
            //  _err = string.Empty 
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();


                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();


                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                DataTable mst_profit_center = new DataTable();
                DataTable dtlloc = new DataTable();
                string _pcDes = string.Empty;
                string _pcMail = string.Empty;
                string _locDes = string.Empty;
                string _mgrMobno = string.Empty;
                string _PCMgr = string.Empty;

                #region Manager
                mst_profit_center = _salesDAL.GetProfitCenterTable(_com, _pc);
                foreach (DataRow row in mst_profit_center.Rows)
                {
                    _pcDes = row["MPC_DESC"].ToString();
                    _pcMail = row["mpc_email"].ToString();
                    _PCMgr = row["mpc_man"].ToString();
                }

                dtlloc = _salesDAL.GetLocationCode(_com, _loc);

                foreach (DataRow row in dtlloc.Rows)
                {
                    _locDes = row["ML_LOC_DESC"].ToString();
                }
                #region mail
                if (!string.IsNullOrEmpty(_pcMail))
                {
                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();

                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;

                    string _email = "";
                    if (isComplete == 0)
                    {
                        _email = "Dear Sir/ Madam, \n\n" + _email;
                        _email += "\n Job # " + _jobNo + " has been confirm to warranty replacement on " + _date.Date + " by the location  " + _loc + "-" + _locDes + " . \n\n";
                    }
                    else
                    {
                        _email = "Dear Sir/ Madam, \n\n" + _email;
                        _email += "\n  Warranty replacement has been completed for Job # " + _jobNo + "  on " + _date.Date + " by the location  " + _loc + "-" + _locDes + " . \n\n";
                    }


                    _email += _generalDAL.GetMailFooterMsg();

                    message.To.Add(_pcMail);
                    if (isComplete == 0)
                    {
                        message.Subject = "Warranty Replacement confirmation";
                    }
                    else
                    {
                        message.Subject = "Warranty Replacement Completion";
                    }
                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    //message.Bcc.Add(new MailAddress(""));
                    message.IsBodyHtml = false;
                    message.Body = _email;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                    // Send SMTP mail
                    smtpClient.Send(message);
                }
                #endregion
                #region sms

                Service_Message oMessage = new Service_Message();

                Service_JOB_HDR oJobHeader = _custServiceDAL.GetServiceJobHeader(_jobNo, _com);


                string emailBody = string.Empty;

                string _realPhNo = string.Empty;
                string SmsBody = "";
                if (isComplete == 0)
                {
                    SmsBody = "Dear Sir/ Madam, ";
                    SmsBody += "\n Job # " + _jobNo + " has been confirm to warranty replacement on " + _date.Date + " by the location  " + _loc + "-" + _locDes + " .";
                }
                else
                {
                    SmsBody = "Dear Sir/ Madam, ";
                    SmsBody += "\n  Warranty replacement has been completed for Job # " + _jobNo + "  on " + _date.Date + " by the location  " + _loc + "-" + _locDes + " . \n\n";

                }

                Master_Employee _mgrMob = _generalDAL.GetMasterEmployee(_com, _PCMgr);

                if (_mgrMob.Esep_epf != null)
                {
                    _mgrMobno = _mgrMob.Esep_mobi_no;
                }
                if (!string.IsNullOrEmpty(_mgrMobno))
                {
                    if (_mgrMobno.Length >= 9)
                    {

                        OutSMS _outmgr = new OutSMS();
                        if (_mgrMobno.Length == 10)
                        {
                            _outmgr.Receiverphno = "+94" + _mgrMobno.Substring(1, 9);
                            _outmgr.Senderphno = "+94" + _mgrMobno.Substring(1, 9);
                        }
                        if (_mgrMobno.Length == 9)
                        {
                            _outmgr.Receiverphno = "+94" + _mgrMobno;
                            _outmgr.Senderphno = "+94" + _mgrMobno;
                        }



                        _realPhNo = GetRealPhoneNumber(_mgrMobno);

                        _outmgr.Createtime = DateTime.Now;
                        _outmgr.Msg = SmsBody;
                        _outmgr.Msgstatus = 0;
                        _outmgr.Msgtype = "S";
                        _outmgr.Receivedtime = DateTime.Now;
                        _outmgr.Receiver = _pcDes;
                        _outmgr.Senderphno = _mgrMobno;
                        _outmgr.Refdocno = _jobNo;
                        _outmgr.Sender = _user;
                        _outmgr.Createtime = DateTime.Now;
                        _inventoryDAL.SaveSMSOut(_outmgr);
                    }
                }
                #endregion
                #endregion





                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

            }



            catch (Exception ex)
            {

                _generalDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();


                _effects = -1;

            }

            _effects = 1;
            return _effects;

        }

        public Int32 SendConfirmationMail(string _com, string _pc, string _loc, string _jobNo, string _rccno, DateTime _date, String _remarks, string _subChanel, string _user)
        {
            Int32 _effects = 0;
            //  _err = string.Empty 
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();


                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();


                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                DataTable mst_profit_center = new DataTable();
                DataTable dtlloc = new DataTable();
                string _pcDes = string.Empty;
                string _pcMail = string.Empty;
                string _locDes = string.Empty;
                string _mgrMobno = string.Empty;
                string _PCMgr = string.Empty;
                if (_rccno != "-1")
                {
                    #region Manager
                    mst_profit_center = _salesDAL.GetProfitCenterTable(_com, _pc);
                    foreach (DataRow row in mst_profit_center.Rows)
                    {
                        _pcDes = row["MPC_DESC"].ToString();
                        _pcMail = row["mpc_email"].ToString();
                        _PCMgr = row["mpc_man"].ToString();
                    }

                    dtlloc = _salesDAL.GetLocationCode(_com, _loc);

                    foreach (DataRow row in dtlloc.Rows)
                    {
                        _locDes = row["ML_LOC_DESC"].ToString();
                    }
                    #region mail
                    if (!string.IsNullOrEmpty(_pcMail))
                    {
                        SmtpClient smtpClient = new SmtpClient();
                        MailMessage message = new MailMessage();

                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                        smtpClient.Host = _generalDAL.GetMailHost();
                        smtpClient.Port = 25;
                        message.From = fromAddress;

                        string _email = "";

                        _email = "Dear Sir/ Madam, \n\n" + _email;
                        _email += "\n Job # " + _jobNo + " related to the below mentioned RCC has been completed on " + _date.Date + " by the location  " + _loc + "-" + _locDes + " . \n\n";
                        _email += "RCC #  :" + _rccno + " \n\n\n";
                        _email += "Remarks  :" + _remarks + " \n\n\n";


                        _email += _generalDAL.GetMailFooterMsg();

                        message.To.Add(_pcMail);
                        message.Subject = "RCC JOB Completion";
                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                        //message.Bcc.Add(new MailAddress(""));
                        message.IsBodyHtml = false;
                        message.Body = _email;
                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                        // Send SMTP mail
                        smtpClient.Send(message);
                    }
                    #endregion
                    #region sms

                    Service_Message oMessage = new Service_Message();

                    Service_JOB_HDR oJobHeader = _custServiceDAL.GetServiceJobHeader(_jobNo, _com);


                    string emailBody = string.Empty;

                    string _realPhNo = string.Empty;

                    String SmsBody = "Dear Sir/ Madam, ";
                    SmsBody += "\n Job # " + _jobNo + " related to the below mentioned RCC has been completed on " + _date.Date + " by the location  " + _loc + "-" + _locDes + " .";
                    SmsBody += "RCC #  :" + _rccno + "";

                    Master_Employee _mgrMob = _generalDAL.GetMasterEmployee(_com, _PCMgr);

                    if (_mgrMob.Esep_epf != null)
                    {
                        _mgrMobno = _mgrMob.Esep_mobi_no;
                    }
                    if (!string.IsNullOrEmpty(_mgrMobno))
                    {
                        if (_mgrMobno.Length >= 9)
                        {

                            OutSMS _outmgr = new OutSMS();
                            if (_mgrMobno.Length == 10)
                            {
                                _outmgr.Receiverphno = "+94" + _mgrMobno.Substring(1, 9);
                                _outmgr.Senderphno = "+94" + _mgrMobno.Substring(1, 9);
                            }
                            if (_mgrMobno.Length == 9)
                            {
                                _outmgr.Receiverphno = "+94" + _mgrMobno;
                                _outmgr.Senderphno = "+94" + _mgrMobno;
                            }



                            _realPhNo = GetRealPhoneNumber(_mgrMobno);

                            _outmgr.Createtime = DateTime.Now;
                            _outmgr.Msg = SmsBody;
                            _outmgr.Msgstatus = 0;
                            _outmgr.Msgtype = "S";
                            _outmgr.Receivedtime = DateTime.Now;
                            _outmgr.Receiver = _pcDes;
                            _outmgr.Senderphno = _mgrMobno;
                            _outmgr.Refdocno = _jobNo;
                            _outmgr.Sender = _user;
                            _outmgr.Createtime = DateTime.Now;
                            _inventoryDAL.SaveSMSOut(_outmgr);
                        }
                    }
                    #endregion
                    #endregion
                }

                #region Customer
                //Service_Message_Template oTemplate = _custServiceDAL.GetMessageTemplates_byID(_com, _subChanel, 4);
                //string outMsg =string.Empty ;
                //if (oTemplate != null && oTemplate.Sml_templ_sms != null)
                //{
                //    MasterBusinessEntity _entity = _salesDAL.GetBusinessCompanyDetail(_com, oJobHeader.SJB_CUST_CD, null, null, "C");

                //    if (_entity != null)
                //    {
                //        if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                //        {
                //        _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                //        OutSMS _out = new OutSMS();
                //        _out.Createtime = DateTime.Now;
                //        _out.Msg = oTemplate.Sml_templ_sms;
                //        _out.Msgstatus = 0;
                //        _out.Msgtype = "S";
                //        _out.Receivedtime = DateTime.Now;
                //        _out.Receiver = _entity.Mbe_cd;
                //        _out.Senderphno = _entity.Mbe_mob;
                //        _out.Refdocno = _jobNo;
                //        _out.Sender = _user;
                //        _out.Createtime = DateTime.Now;
                //        _inventoryDAL.SaveSMSOut(_out);
                //        }

                //        if (oTemplate != null && oTemplate.Sml_templ_mail != null)
                //        {
                //                if (!string.IsNullOrEmpty(_entity.Mbe_email))
                //                {
                //                    SmtpClient smtpClient = new SmtpClient();
                //                    MailMessage message = new MailMessage();

                //                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                //                    smtpClient.Host = _generalDAL.GetMailHost();
                //                    smtpClient.Port = 25;
                //                    message.From = fromAddress;

                //                    string _email = "";

                //                    _email = oTemplate.Sml_templ_mail;

                //                    _email += _generalDAL.GetMailFooterMsg();

                //                    message.To.Add(_entity.Mbe_email);
                //                    message.Subject = "RCC JOB Completion";
                //                    message.IsBodyHtml = false;
                //                    message.Body = _email;
                //                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                //                    smtpClient.Send(message);
                //                }
                //        }
                //    }
                //}
                #endregion


                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

            }



            catch (Exception ex)
            {

                _generalDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();


                _effects = -1;

            }

            _effects = 1;
            return _effects;

        }
        //darshana 29-07-2015
        public DataTable GetInvDetBySerial(string _invoice, string _serial, string _itm)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetInvDetBySerial(_invoice, _serial, _itm);
        }
        //Darshana 29-07-2015
        public DataTable GetInvDetWithDofrmScm(string _invoice, string _itm, string _ser)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetInvDetWithDofrmScm(_invoice, _itm, _ser);
        }

        //Tharaka 2015-08-14
        public Int32 jobCancel(String com, String Loc, String User, String sesstion, List<Service_job_Det> oJobDetails, out string err)
        {
            Int32 result = 0;
            err = string.Empty;

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                foreach (Service_job_Det item in oJobDetails)
                {
                    if (item.Jbd_isstockupdate == 1)
                    {
                        string AODNum = item.Jbd_aodrecno;
                        result = _inventoryDAL.CancelInwardInventoryDocument(com, Loc, AODNum, User);

                    }
                    Service_Job_StageLog oLog1 = new Service_Job_StageLog();
                    oLog1.SJL_REQNO = "";
                    oLog1.SJL_JOBNO = item.Jbd_jobno;
                    oLog1.SJL_JOBLINE = item.Jbd_jobline;
                    oLog1.SJL_COM = com;
                    oLog1.SJL_LOC = Loc;
                    oLog1.SJL_JOBSTAGE = 12;
                    oLog1.SJL_CRE_BY = User;
                    oLog1.SJL_CRE_DT = DateTime.Now;
                    oLog1.SJL_SESSION_ID = sesstion;
                    oLog1.SJL_INFSUP = 0;
                    result = _custServiceDAL.Save_ServiceJobStageLog(oLog1);
                    result = _custServiceDAL.Update_JobDetailStage(item.Jbd_jobno, item.Jbd_jobline, 12);
                }

                result = _custServiceDAL.Update_JobDetailStage(oJobDetails[0].Jbd_jobno, 0, 12);
                result = _custServiceDAL.Update_RccStage(oJobDetails[0].Jbd_reqno, User);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();

            }

            return result;
        }

        //Tharaka 2015-08-19
        public Int32 UpdateInspectionSerial(Service_job_Det _jobDet, Service_Job_StageLog oLog1, out string err)
        {
            Int32 result = 0;
            err = string.Empty;

            Int32 Newline = 0;

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                result = _custServiceDAL.UpdateInspectionSerial(_jobDet, out Newline);
                oLog1.SJL_JOBLINE = Newline;
                //result = _custServiceDAL.Save_ServiceJobStageLog(oLog1);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                result = -1;
                err = ex.Message;
                _custServiceDAL.TransactionRollback();

            }

            return result;
        }

        //Tharaka 2015-08-20
        public DataTable GET_ALLALOCATEDJOBS_BY_USER(String Com, String Loc, String User)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_ALLALOCATEDJOBS_BY_USER(Com, Loc, User);
        }

        //Tharaka 2015-09-08
        public DataTable GET_EQULPC_TO_PC(string Com, string PC)
        {
            _commonSearchDAL = new CommonSearchDAL();
            return _commonSearchDAL.GET_EQULPC_TO_PC(Com, PC);
        }

        // Tharaka 2015-09-18
        public List<Service_Confirm_detail> GET_CONF_DET_BY_JOB(string _jobNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_CONF_DET_BY_JOB(_jobNo);
        }
        public DataTable get_BulkJobPrint(string _com)
        {
            _reportDAL = new ReptDAL();
            return _reportDAL.get_BulkJobPrint(_com);
        }

        public DataTable get_isSmartWarr(String Jobno, Int16 lineno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_isSmartWarr(Jobno, lineno);
        }

        public DataTable get_isSmartWarr_Job(Decimal sw_perc, String invno, String serial, String item)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_isSmartWarr_Job(sw_perc, invno, serial, item);
        }

        public Boolean check_IsJobClosed(string _Job, Int16 _line)
        {
            _custServiceDAL = new CustServiceDAL();
            DataTable isClosed = _custServiceDAL.check_IsJobClosed(_Job, _line);
            if (isClosed.Rows.Count > 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public int get_UpdateBulkJobPrint(string _Job)
        {
            _reportDAL = new ReptDAL();
            return _reportDAL.get_UpdateBulkJobPrint(_Job);
        }
        //Tharaka 2015-09-18

        public Int32 ServiceApporvalDiscountProcess(string jobnum, CashGeneralDicountDef oItem, out string err)
        {
            err = string.Empty;
            Int32 result = 0;

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                //result = _salesDAL.SaveGeneralDiscDef(oItem);

                List<Service_Confirm_detail> oConfItems = _custServiceDAL.GET_CONF_DET_BY_JOB(jobnum);
                if (oConfItems != null && oConfItems.Count > 0)
                {
                    foreach (Service_Confirm_detail item in oConfItems)
                    {
                        CashGeneralDicountDef oConfItem = new CashGeneralDicountDef();
                        oConfItem.Sgdd_seq = 0;
                        oConfItem.Sgdd_circular = jobnum;
                        oConfItem.Sgdd_sale_tp = oItem.Sgdd_sale_tp;
                        oConfItem.Sgdd_com = oItem.Sgdd_com;
                        oConfItem.Sgdd_pc = oItem.Sgdd_pc;
                        oConfItem.Sgdd_from_dt = oItem.Sgdd_from_dt.Date;
                        oConfItem.Sgdd_to_dt = oItem.Sgdd_to_dt.Date;
                        oConfItem.Sgdd_cust_cd = oItem.Sgdd_cust_cd;
                        oConfItem.Sgdd_pb = oItem.Sgdd_pb;
                        oConfItem.Sgdd_pb_lvl = oItem.Sgdd_pb_lvl;
                        oConfItem.Sgdd_itm = item.Jcd_itmcd;
                        oConfItem.Sgdd_alw_ser = false;
                        oConfItem.Sgdd_alw_pro = false;
                        oConfItem.Sgdd_req_ref = "";
                        oConfItem.Sgdd_disc_val = oItem.Sgdd_disc_val;
                        oConfItem.Sgdd_disc_rt = oItem.Sgdd_disc_rt;
                        oConfItem.Sgdd_no_of_times = 9999;
                        oConfItem.Sgdd_no_of_used_times = 0;
                        oConfItem.Sgdd_stus = true;
                        oConfItem.Sgdd_cre_by = oItem.Sgdd_cre_by;
                        oConfItem.Sgdd_cre_dt = oItem.Sgdd_cre_dt;
                        oConfItem.Sgdd_mod_by = oItem.Sgdd_mod_by;
                        oConfItem.Sgdd_mod_dt = oItem.Sgdd_mod_dt;
                        result = _salesDAL.SaveGeneralDiscDef(oConfItem);
                    }
                }

                _salesDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                _salesDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();

                result = -1;
                err = ex.Message;
            }

            return result;
        }

        //Lakshan 2016-Mar-07 only modify
        public Int32 Save_ItemCanibalize_web(MasterAutoNumber _masterAuto_out, InventoryHeader _outHeader, List<ReptPickSerials> _outSerial, List<ItemKitComponent> _inserList, string Type, out string _err)
        {
            Int32 _effects = 0;
            Int32 _effect = 0;
            string _genInventoryDocument = string.Empty;
            string _genInvDoc = "";
            string _aodoutno = string.Empty;
            string _message = string.Empty;
            InventoryBLL _InventoryBLL = new InventoryBLL();
            SalesBLL _SalesBLL = new SalesBLL();
            string _recNo = string.Empty;
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            string _db = string.Empty;
            MasterItem _itmlist = new MasterItem();
            List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
            string documntNo = "";
            string _documentNo = "";
            Int32 result = 0;
            try
            {
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                _inventoryRepDAL.ConnectionOpen();
                _inventoryRepDAL.BeginTransaction();

                //Add by lakshan
                if (_outHeader.Ith_cate_tp == "SPLT")
                {
                    #region Make Splt Auto No
                    MasterAutoNumber masterAuto = new MasterAutoNumber();
                    #region Fill MasterAutoNumber
                    masterAuto.Aut_cate_cd = _outHeader.Ith_loc;
                    masterAuto.Aut_cate_tp = "LOC";
                    masterAuto.Aut_direction = null;
                    masterAuto.Aut_modify_dt = null;
                    masterAuto.Aut_moduleid = "SPLT";
                    masterAuto.Aut_number = 5;
                    masterAuto.Aut_start_char = "SPLT";
                    masterAuto.Aut_year = DateTime.Today.Year;
                    #endregion
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp,
                    masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
                    _documentNo = _outHeader.Ith_loc + "-" + masterAuto.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(masterAuto);

                    _outHeader.Ith_sub_docno = _documentNo;
                    #endregion
                }
                if (_outHeader.Ith_cate_tp == "CANB")
                {
                    #region Make Splt Auto No
                    MasterAutoNumber masterAuto = new MasterAutoNumber();
                    #region Fill MasterAutoNumber
                    masterAuto.Aut_cate_cd = _outHeader.Ith_loc;
                    masterAuto.Aut_cate_tp = "LOC";
                    masterAuto.Aut_direction = null;
                    masterAuto.Aut_modify_dt = null;
                    masterAuto.Aut_moduleid = "CANB";
                    masterAuto.Aut_number = 5;
                    masterAuto.Aut_start_char = "CANB";
                    masterAuto.Aut_year = DateTime.Today.Year;
                    #endregion
                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(masterAuto.Aut_moduleid, masterAuto.Aut_direction, masterAuto.Aut_start_char, masterAuto.Aut_cate_tp,
                    masterAuto.Aut_cate_cd, masterAuto.Aut_modify_dt, masterAuto.Aut_year).Aut_number;
                    _documentNo = _outHeader.Ith_loc + "-" + masterAuto.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                    _inventoryDAL.UpdateAutoNumber(masterAuto);

                    _outHeader.Ith_sub_docno = _documentNo;
                    #endregion
                }

                string docNum = "";
                result = _InventoryBLL.ADJMinus_Service(_inventoryDAL, _inventoryRepDAL, _outHeader, _outSerial, null, _masterAuto_out, out documntNo);
                docNum += "\nAdjustment minus doc number:" + documntNo;

                string minarsdoc = documntNo;

                //_outHeader.Ith_sub_docno = "";

                //End;
                List<String> _LocList = _inserList.Select(x => x.MIKC_LOC).Distinct().ToList();
                List<InventoryBatchN> _batchList = _inventoryDAL.Get_Int_Batch(documntNo);
                foreach (String _loc in _LocList)
                {
                    string _aodInNo = string.Empty;
                    #region SaveAODIn
                    MasterAutoNumber _inventoryAutoin = new MasterAutoNumber();
                    #region Fill MasterAutoNumber
                    _inventoryAutoin.Aut_cate_cd = _loc;
                    _inventoryAutoin.Aut_cate_tp = "LOC";
                    _inventoryAutoin.Aut_direction = null;
                    _inventoryAutoin.Aut_modify_dt = null;
                    _inventoryAutoin.Aut_moduleid = "ADJ";
                    _inventoryAutoin.Aut_number = 5;//what is Aut_number
                    _inventoryAutoin.Aut_start_char = "ADJ";
                    _inventoryAutoin.Aut_year = null;
                    #endregion


                    List<ItemKitComponent> oList = _inserList.FindAll(x => (x.MIKC_LOC == _loc));
                    string _binCode = _inventoryDAL.GetDefaultBinCode(_outHeader.Ith_com, _loc);

                    foreach (ItemKitComponent item in oList)
                    {
                        ReptPickSerials _pick = new ReptPickSerials();
                        #region Fill Serial
                        _itmlist = _inventoryDAL.GetItem(_outHeader.Ith_com, item.MIKC_ITM_CODE_COMPONENT);
                        if (_itmlist != null)
                        {
                            _pick.Tus_ser_1 = item.MIKC_SERIAL_NO;
                            _pick.Tus_ser_id = _pick.Tus_ser_1 == "N/A" ? 0 : _inventoryDAL.GetSerialID();

                            //   _pick.Tus_warr_no = item.miks;
                            _pick.Tus_base_doc_no = string.Empty;
                            _pick.Tus_bin = _binCode;
                            _pick.Tus_com = _outHeader.Ith_com;
                            _pick.Tus_cre_by = _outHeader.Ith_cre_by;
                            _pick.Tus_cre_dt = System.DateTime.Now;
                            _pick.Tus_doc_dt = _outHeader.Ith_doc_date;
                            _pick.Tus_doc_no = string.Empty;
                            _pick.Tus_orig_grncom = _outSerial[0].Tus_orig_grncom;
                            _pick.Tus_orig_grndt = _outSerial[0].Tus_orig_grndt;
                            _pick.Tus_orig_grnno = _outSerial[0].Tus_orig_grnno;
                            _pick.Tus_orig_supp = _outSerial[0].Tus_orig_supp;
                            _pick.Tus_exist_grndt = _outSerial[0].Tus_exist_grndt;
                            _pick.Tus_exist_grncom = _outSerial[0].Tus_exist_grncom;
                            _pick.Tus_exist_grnno = _outSerial[0].Tus_exist_grnno;
                            _pick.Tus_exist_supp = _outSerial[0].Tus_exist_supp;
                            _pick.Tus_itm_stus = item.MIKC_STATUS_CD;
                            _pick.Tus_unit_price = 0;
                            _pick.Tus_ageloc = string.Empty;
                            _pick.Tus_itm_brand = _itmlist.Mi_brand;
                            _pick.Tus_itm_cd = item.MIKC_ITM_CODE_COMPONENT;
                            _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                            _pick.Tus_itm_model = _itmlist.Mi_model;
                            _pick.Tus_loc = _loc;
                            _pick.Tus_new_remarks = "ADJ";
                            _pick.Tus_new_status = String.Empty;
                            _pick.Tus_ser_4 = string.Empty;
                            //_pick.Tus_qty = 1;
                            _pick.Tus_qty = _pick.Tus_ser_1 == "N/A" ? item.MIKC_NO_OF_UNIT : 1;
                            _pick.Tus_seq_no = 0;
                            _pick.Tus_job_no = string.Empty;
                            _pick.Tus_job_line = 0;
                            if (Type == "M")
                            {
                                if (item.MIKC_COST_METHOD == "AMT")
                                {
                                    _pick.Tus_unit_cost = item.MIKC_COST;
                                }
                                else
                                {
                                    _pick.Tus_unit_cost = _outSerial[0].Tus_unit_cost * (item.MIKC_COST / 100);
                                }
                            }
                            else
                            {
                                if (item.MIKC_COST_METHOD == "AMT")
                                {
                                    _pick.Tus_unit_cost = item.MIKC_COST;
                                }
                                else
                                {
                                    _pick.Tus_unit_cost = _outSerial[0].Tus_unit_cost * (item.MIKC_COST / 100);
                                }
                            }
                            #region Add by Lakshan 10 Oct 2016
                            if (_batchList != null)
                            {
                                if (_batchList.Count > 0)
                                {
                                    var v = _batchList.Where(c => c.Inb_itm_cd == item.MIKC_ITM_CODE_MAIN).FirstOrDefault();
                                    if (v != null)
                                    {
                                        _pick.Tus_batch_line = v.Inb_batch_line;//itb_base_batchline
                                        _pick.Tus_base_itm_line = v.Inb_itm_line;//itb_base_refline
                                    }
                                }
                            }
                            #endregion
                            _picklist.Add(_pick);
                        }
                        #endregion
                    }
                    _outHeader.Ith_loc = _loc;
                    _outHeader.Ith_direct = true;
                    _outHeader.Ith_seq_no = 0;
                    _outHeader.Ith_oth_docno = documntNo; // 15-07-2015 Nadeeka

                    _picklist.ForEach(x => x.Tus_bin = _binCode);
                    _effect = _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, _outHeader, _picklist, null, _inventoryAutoin, out _aodInNo);
                    _picklist = new List<ReptPickSerials>();
                    docNum += "\nAdjustment plus doc number:" + _aodInNo;
                    #endregion
                }
                //dilshan on 20/03/2018******** added aod validation
                #region Validate Aod Save by Lakshan 06/Sep/2016
                //dilshan
                decimal _updatedQty = 0;
                decimal _batchQty = 0;
                decimal _serQty = 0;
                bool _resUpdateErr = false;

                //#region set var data 19 oct 2016
                //List<InventoryBatchN> _invBatchData = _inventoryDAL.GET_INT_BATCH_DATA(new InventoryBatchN() { Inb_doc_no = _outHeader.Ith_doc_no });
                //if (_invBatchData != null)
                //{
                //    var _serialList = (from _doc in _outSerial where _doc.Tus_new_remarks == _documentType select _doc).ToList();
                //    Int32 UserSeqNo = _inventoryDAL.GetSerialID();
                //    if (_invBatchData.Count > 0)
                //    {
                //        _batchQty = _invBatchData.Sum(c => c.Inb_qty);
                //        _serQty = _serialList.Sum(c => c.Tus_qty);
                //    }
                //}
                //#endregion
                //**********

                #region Cheak Batch
                if (_effect != -1)
                {
                    List<InventoryBatchN> _BATCH = new List<InventoryBatchN>();
                    _BATCH = _inventoryDAL.GETInventorybatch(_outHeader.Ith_com, _outHeader.Ith_seq_no.ToString());
                    bool _count = _inventoryDAL.checkBatch_ser(_outHeader.Ith_seq_no);
                    if (_BATCH.Count == 0)
                    {
                        _effect = -1;
                        _message = "Process Terminated ! Inventory Balance not updated ";
                    }
                    if (_effect != -1)
                    {
                        if (_count == false)
                        {
                            bool _chkBatch = true;
                            MasterLocation _mstLocation = _generalDAL.GetLocationInfor(_outHeader.Ith_com, _outHeader.Ith_loc);
                            if (_mstLocation != null)
                            {
                                if (!_mstLocation.Ml_is_serial)
                                {
                                    if (string.IsNullOrEmpty(_outHeader.Ith_loading_point) || _outHeader.Ith_loading_point == "N/A")
                                    {
                                        _chkBatch = false;
                                    }
                                }
                            }
                            if (_chkBatch)
                            {
                                _effect = -1;
                                _message = "Precess Terminated ! Inventory Balance mismatch [Batch Vs Serials]";
                            }
                        }
                    }
                }
                #endregion
                #region Cheak int Itm
                if (_effect != -1)
                {
                    bool _intItmErr = _inventoryDAL.check_int_itm(_outHeader.Ith_seq_no);
                    if (_intItmErr == false)
                    {
                        _effect = -1;
                        _message = "Precess Terminated ! Inventory Balance mismatch [Item Vs Batch]";
                    }
                }
                #endregion

                #region Check Serials
                if (_effect == 1)
                {
                    //Added by Chamal to check serial ID duplicate 05-Sep-2016
                    List<ReptPickSerials> _serList = new List<ReptPickSerials>();
                    _serList = _inventoryDAL.GetSerialsByDocument(_outHeader.Ith_seq_no, null);

                    var _varSer = from c in _serList
                                  group c by c.Tus_ser_id into grp
                                  where grp.Count() > 1
                                  select new { SerialID = grp.Key, Count = grp.Count() };
                    if (_varSer != null && _varSer.Count() > 0)
                    {
                        string _errorSerialID = string.Empty;
                        foreach (var item in _varSer)
                        {
                            if (string.IsNullOrEmpty(_errorSerialID))
                            {
                                _errorSerialID = "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                            }
                            else
                            {
                                _errorSerialID = _errorSerialID + "\n" + "Serial ID : " + item.SerialID + " [" + item.Count + "]";
                            }
                        }
                        _effect = -1;
                        _message = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        _genInventoryDocument = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                        _genInvDoc = "Precess Terminated ! Duplicate Serial IDs Founds \n" + _errorSerialID;
                    }
                }
                #endregion

                #region validate serial count and batch count
                if (_batchQty != _serQty)
                {
                    _effect = -1;
                    _message = "Process Terminated ! Inventory Balance not updated  [Pick Qty Vs Batch Qty]";
                }
                #endregion

                #region validate reservation update 07 Nov 2016
                if (_effect == 1 && _outHeader.TMP_IS_RES_UPDATE)
                {
                    if (_resUpdateErr)
                    {
                        _effect = -1;
                        _message = " Reservation data not update correctly !";
                    }
                }
                #endregion

                //#region validate inr_loc balance update correcly load available balance before save 26 Nov 2016
                //List<TmpValidation> _locBalanceDataList = new List<TmpValidation>();
                //TmpValidation _tmpLocBalVal = new TmpValidation();
                //InventoryLocation _tmpLocBal = new InventoryLocation();
                //if (_inventoryHeader.TMP_CHK_LOC_BAL)
                //{
                //    var _serialItemData = _reptPickSerials.GroupBy(x => new { x.Tus_itm_cd, x.Tus_itm_stus }).Select(group => new { Peo = group.Key, theCount = group.Sum(o => o.Tus_qty) });
                //    foreach (var _outSer in _serialItemData)
                //    {
                //        _tmpLocBalVal = new TmpValidation();
                //        _tmpLocBalVal.Inl_com = _inventoryHeader.Ith_com;
                //        _tmpLocBalVal.Inl_loc = _inventoryHeader.Ith_loc;
                //        _tmpLocBalVal.Inl_itm_cd = _outSer.Peo.Tus_itm_cd;
                //        _tmpLocBalVal.Inl_itm_stus = _outSer.Peo.Tus_itm_stus;
                //        _tmpLocBalVal.Inl_qty_need_to_update = _outSer.theCount;
                //        _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                //        {
                //            Inl_com = _inventoryHeader.Ith_com,
                //            Inl_loc = _inventoryHeader.Ith_loc,
                //            Inl_itm_cd = _tmpLocBalVal.Inl_itm_cd,
                //            Inl_itm_stus = _tmpLocBalVal.Inl_itm_stus
                //        });
                //        _tmpLocBalVal.Inl_qty_bef_save = _tmpLocBal.Inl_qty;
                //        _locBalanceDataList.Add(_tmpLocBalVal);
                //    }
                //}
                //#endregion

                //#region validate location balance update correctly 27 Nov 2016
                //if (_outHeader.TMP_CHK_LOC_BAL && _effect == 1)
                //{
                //    foreach (var _itemVal in _locBalanceDataList)
                //    {
                //        _tmpLocBal = _inventoryDAL.GET_INR_LOC_BALANCE(new InventoryLocation()
                //        {
                //            Inl_com = _itemVal.Inl_com,
                //            Inl_loc = _itemVal.Inl_loc,
                //            Inl_itm_cd = _itemVal.Inl_itm_cd,
                //            Inl_itm_stus = _itemVal.Inl_itm_stus
                //        });
                //        _itemVal.Inl_qty_aft_save = _tmpLocBal.Inl_qty;
                //        _itemVal.Inl_qty_save_diff = _itemVal.Inl_qty_bef_save - _itemVal.Inl_qty_aft_save;
                //        if (_itemVal.Inl_qty_save_diff != _itemVal.Inl_qty_need_to_update)
                //        {
                //            _itemVal.Inl_err_ava = 1;
                //        }
                //    }
                //    var _balUpdteErr = _locBalanceDataList.Where(c => c.Inl_err_ava > 0).ToList();
                //    if (_balUpdteErr != null)
                //    {
                //        if (_balUpdteErr.Count > 0)
                //        {
                //            _effect = -1;
                //            _message = "Process Terminated ! Inventory Balance not updated [LOC]";
                //        }
                //    }
                //}
                //#endregion

                #region validate UOM MAC
                if (_outHeader.TMP_SAVE_PKG_DATA)
                {
                    string _mcCom = _outHeader.Ith_com;
                    List<InventoryItem> _mcIntItmList = _inventoryDAL.GET_INT_ITM_DATA_BY_SEQNO(_outHeader.Ith_seq_no);
                    MasterItem _mcItm = new MasterItem();
                    foreach (var _iti in _mcIntItmList)
                    {
                        bool _mcIsModConvBase = false;
                        _mcItm = _inventoryDAL.GetItem(_mcCom, _iti.Iti_item_code);
                        List<UnitConvert> _unitConvert = _inventoryDAL.GET_UNIT_CONVERTER_DATA(new UnitConvert()
                        {
                            mmu_model = _mcItm.Mi_model,
                            mmu_com = _mcCom
                        });
                        if (_unitConvert.Count > 0)
                        {
                            var _mcModel = _unitConvert.Where(c => c.mmu_model_uom == _iti.Iti_pkg_uom_tp).FirstOrDefault();
                            if (_mcModel != null)
                            {
                                _mcIsModConvBase = true;
                            }
                        }
                        if (_mcIsModConvBase)
                        {
                            var _mcModel = _unitConvert.Where(c => c.mmu_model_uom == _iti.Iti_pkg_uom_tp).FirstOrDefault();
                            decimal _mcPkgQty = Math.Round(_iti.Iti_qty / _mcModel.mmu_qty, 2);
                            if (_iti.Iti_pkg_uom_qty != _mcPkgQty)
                            {
                                _effect = -1;
                                _message = "Package unit quantity not update correctly item code : " + _iti.Iti_item_code;
                            }
                        }
                        else
                        {
                            if (_iti.Iti_pkg_uom_qty != _iti.Iti_pkg_uom_qty)
                            {
                                _effect = -1;
                                _message = "Package unit quantity not update correctly item code : " + _iti.Iti_item_code;
                            }
                        }
                    }
                }
                #endregion
                #endregion
                //**************************************************
                // _custServiceDAL.TransactionCommit();
                //_custServiceDAL.ConnectionClose();

                List<InventoryBatchN> _Chkbatch = _inventoryDAL.Get_Int_Batch(minarsdoc);

                if (_Chkbatch != null && _Chkbatch.Count>0)
                {

                }
                else
                {
                    _inventoryRepDAL.TransactionRollback();
                    _inventoryDAL.TransactionRollback();
                    _effects = -1;
                    _err = "Batch Details Not Saved!!!.";
                }

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();
                _err = _documentNo;
                _effects = 1;

            }
            catch (Exception ex)
            {
                _inventoryRepDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _effects = -1;
                _err = ex.Message.ToString();
            }
            return _effects;
        }
        //subodana 2016-04-12
        public int ServiceSaveScanImages(String com, String pc, String loc, List<TBS_IMG_UPLOAD> oMainList, out String err)
        {
            int result = 0;
            err = string.Empty;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                string SaveLoc = loc;
                foreach (TBS_IMG_UPLOAD oSubItem in oMainList)
                {
                    string JobNumber = oSubItem.Jbimg_jobno;
                    int _ef = _custServiceDAL.SaveJobImagePath(oSubItem.Jbimg_jobno, oSubItem.Jbimg_img_line, oSubItem.Jbimg_ser, oSubItem.Jbimg_img_line, SaveLoc, oSubItem.Jbimg_img);
                }
                _custServiceDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                err = ex.Message;
                throw;
            }
            return result;
        }
        //subodana
        public List<TBS_IMG_UPLOAD> GetImageDetails(string jobid)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetImageDetails(jobid);
        }
        //subodana
        public DataTable GetCusValuDecar(string com, string docNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustomValDeclar(com, docNo);
        }
        //subodana
        public DataTable GetCustomElements(string com, string docNo, string type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustomElements(com, docNo, type);
        }

        //subodana
        public DataTable GetCustomWorkingSheet(string docNo, string type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustomWorkingSheet(docNo, type);
        }

        //subodana
        public DataTable GetRouteDetails(string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetRouteDetails(com);
        }

        //subodana
        public DataTable StockVerification(string com, string docno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.StockVerification(com, docno);
        }

        //subodana
        public DataTable GetSysSerials(string com, string loc, string itemcode)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSysSerials(com, loc, itemcode);
        }

        //subodana
        public DataTable GetSystemQTY(string com, string loc, string itemcode)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSystemQTY(com, loc, itemcode);
        }
        //subodana
        public DataTable GetScanQTY(string com, string doc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetScanQTY(com, doc);
        }
        //subodana
        public DataTable GetGoodsDeclarationDetails(string entryno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetGoodsDeclarationDetails(entryno);
        }
        //subodana
        public DataTable GetCusdecHDRData(string entryno, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCusdecHDRData(entryno, com);
        }

        //subodana
        public DataTable GetCusdecElementnew(string entryno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCusdecElementnew(entryno);
        }
        //subodana
        public DataTable GetCusdecCommonNew(string country)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCusdecCommonNew(country);
        }
        //subodana
        public List<Cusdec_Goods_decl> GetGoodsDeclarationDetailsList(string entryno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetGoodsDeclarationDetailsList(entryno);
        }
        //subodana 2016-07-21
        public List<SunAccountBusEntity> GetSunAccountDetails(string accno, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSunAccountDetails(accno, com);
        }
        //subodana
        public DataTable GetCusdecAssessmentData(string entryno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCusdecAssessmentData(entryno);
        }
        //subodana
        public DataTable GetCusdecAssessmentAccountData(string entryno, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCusdecAssessmentAccountData(entryno, com);
        }

        //Rukshan 2016-oct-03
        public List<SunAccountBusEntity> GetSunAccountDetailsforSO(string com, string cus)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetSunAccountDetailsforSO(com, cus);
        }
        //subodana
        public DataTable GetMaxSRnum(string code)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetMaxSRnum(code);
        }

        public DataTable GetServiceJobHistoryBySerial(string _serail, string _item)
        {
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            int _isWarrantyReplaced = 0; //if warranty has replaced 1 else 0

            //Check whether warranty has replaced
            DataTable _warrantyDetails = new DataTable();
            _warrantyDetails = _custServiceDAL.GET_WARR_DET_BY_NEW_SER(_serail);
            if (_warrantyDetails.Rows.Count > 0)
            {
                _isWarrantyReplaced = 1;
                _serail = _warrantyDetails.Rows[0]["swr_o_itm_ser"] == DBNull.Value ? string.Empty : _warrantyDetails.Rows[0]["swr_o_itm_ser"].ToString();
            }
            return _custServiceDAL.GetServiceJobHistoryBySerial(_serail, _item, _isWarrantyReplaced);
        }

        //Akila 2017/05/05
        public List<InventorySerialMaster> GetServiceItemDetails(string _item, string _ser1, string _ser2, string _regno, string _warr, string _invoice, int _serid)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetWarrantyMaster(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
        }



        //Tharanga 2017/05/06
        public Int32 SaveserviceAreas(List<ServiceAreaS> oServiceAreaS)
        {
            Int32 _effects = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                if (oServiceAreaS.Count > 0)
                {
                    foreach (ServiceAreaS _service in oServiceAreaS)
                    {
                        _effects = _custServiceDAL.SaveserviceAreas(_service);
                        if (_effects < 0)
                        { throw new Exception("Error"); }
                    }

                }

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                _effects = 1;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _effects = 0;
            }
            return _effects;
        }

        //Tharaka 2014-09-30
        public List<TmpServiceWorkingProcess> GetJObsFOrWIPWeb(string com, DateTime From, DateTime To, string jobno, string Stage, Int32 isCusexpectDate, string customer, string PC, String userID)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJObsFOrWIPWeb(com, From, To, jobno, Stage, isCusexpectDate, customer, PC, userID);
        }
        //Tharanga 2017/06/06
        public List<_Service_Enquiry_StageLog_stage> GET_STAGELOG_ENQRY_Stage(String jobNo, Int32 lineNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_STAGELOG_ENQRY_Stage(jobNo, lineNo);
        }
        //Tharanga 2017/06/06
        public DataTable GetJobStage_des(string _P_com, string _P_chnl, decimal _P_stage)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobStage_des(_P_com, _P_chnl, _P_stage);
        }

        //By akila 2017/06/12 send sms to get job confirmetion
        public Int32 GetJobConfirmationBySMS(string _company, string _location, string _user, string _customer, string _jobNo, out string _outMessage)
        {
            Int16 _status = 1;
            _inventoryDAL = new InventoryDAL();
            _generalDAL = new GeneralDAL();

            _generalDAL.ConnectionOpen();
            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _outMessage = string.Empty;

            try
            {
                List<MsgInformation> _msgInfo = new List<MsgInformation>();
                _msgInfo = _generalDAL.GetMsgInformation(_company, _location, "JOB_CONFIRM");

                if ((_msgInfo != null) && (_msgInfo.Count > 0))
                {
                    string _sms = string.Empty;
                    int _smsSerialID = _inventoryDAL.GetSMSSerialID();

                    _sms = string.Format("JOB:{0} Job Confirmation Requested By {1}, Customer - {2} For Job# {3}.", _smsSerialID, _user, _customer, _jobNo);
                    string _realPhNo = GetRealPhoneNumber(_msgInfo[0].Mmi_mobi_no);
                    OutSMS _out = new OutSMS();
                    _out.Createtime = DateTime.Now;
                    _out.Msg = _sms;
                    _out.Msgstatus = 0;
                    _out.Msgtype = "S";
                    _out.Msgid = _smsSerialID.ToString();
                    _out.Receivedtime = DateTime.Now;
                    _out.Receiver = _msgInfo[0].Mmi_receiver;
                    _out.Senderphno = _msgInfo[0].Mmi_mobi_no; ;
                    _out.Receiverphno = _msgInfo[0].Mmi_mobi_no; ;
                    _out.Refdocno = _jobNo;
                    _out.Sender = _user;
                    _out.Createtime = DateTime.Now;
                    _out.comcode = _company;
                    _inventoryDAL.SaveSMSOut(_out);
                    _inventoryDAL.TransactionCommit();
                }
                else
                {
                    _status = 0;
                    _outMessage = "SMS receiver information not found";
                }
            }
            catch (Exception ex)
            {
                _status = 0;
                _outMessage = ex.Message;
                _inventoryDAL.TransactionRollback();
            }
            _generalDAL.ConnectionClose();
            _inventoryDAL.ConnectionClose();
            return _status;
        }

        //By akila 2017/06/17 get po details
        public DataTable GetPoItemDetails(string _jobNo, Int32 _lineNo, string _itemCode, string _poNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetPoItemDetails(_jobNo, _lineNo, _itemCode, _poNo);
        }

        //By akila 2017/06/20
        public DataTable GetJobDetailsWithStage(string _company, string _location, string _jobNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobDetailsWithStage(_company, _location, _jobNo);

        }

        //Tharanga 2017/06/26
        public DataTable GetInvoice_Summary(string _company, string _location, DateTime _fromdate, DateTime _todate,string _pc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetInvoice_Summary(_company, _location, _fromdate, _todate, _pc);

        }

        //add by akila 2017/06/29
        private decimal RoundSalesValue(decimal _value, string _company)
        {
            //GeneralBLL _generalBal = new GeneralBLL();
            //bool _isValueNeedToRound = _generalBal.IsSaleFigureRoundUp(_company);
            //if (_isValueNeedToRound) { _value = Math.Round(_value); }

            //double multiplier = Math.Pow(10, Convert.ToDouble(2));
            //return Math.Ceiling(_value * Convert.ToDecimal(multiplier)) / Convert.ToDecimal(multiplier);
            return _value;
        }

        //By akila 2017/07/03
        public DataTable GetConfirmedServicePoDetails(string _jobNo, string _poNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetConfirmedServicePoDetails(_jobNo, _poNo);
        }

        //By akila  2017/07/11
        public Int32 SaveJobConfirmationWithRequest(List<Service_confirm_Header> _confHdr, List<Service_Confirm_detail> _confDet, List<Service_Cost_sheet> _jobCost, MasterAutoNumber _masterAuto, InvoiceHeader _invoiceHeader, List<InvoiceItem> _invoiceItem, RecieptHeader _recieptHeader, List<RecieptItem> _recieptItem, MasterAutoNumber _invoiceAuto, MasterAutoNumber _recieptAuto, Boolean _isInv, List<Service_job_Det> _processJobList, InventoryHeader _inventoryHeader, MasterAutoNumber _inventoryAuto, string _loc, InventoryHeader _aodHdr, List<ReptPickSerials> _reptPickSerialsAod, MasterAutoNumber _aodAuto, RCC _rcc, Boolean _isRcc, Boolean _isstockUpdate, string _cusPreferLoc, string _subChannel, out string errorMsg, out string _rccNo, Int32 _autoStartJob = 0, bool _genarateNewRequest = false, Service_Req_Hdr _rccHdr = null, List<Service_Req_Det> _rccDetails = null, MasterAutoNumber _rccAuto = null)
        {
            errorMsg = string.Empty;
            _rccNo = string.Empty;
            Int32 _invoiceLine = 0;
            Int32 _effects = 0;
            string _invNo = string.Empty;
            string _recNo = string.Empty;
            string _DONo = string.Empty;
            string _confNo = string.Empty;

            Int32 _isInvMaintain = 0;
            Int32 InventorySeqNo = 0;
            List<ReptPickSerials> _pickSerial = new List<ReptPickSerials>();
            List<ReptPickSerialsSub> _pickSubSerial = new List<ReptPickSerialsSub>();

            try
            {
                _custServiceDAL = new CustServiceDAL();
                _inventoryDAL = new InventoryDAL();
                _salesDAL = new SalesDAL();
                _inventoryRepDAL = new ReptCommonDAL();
                _fmsInventoryDal = new FMS_InventoryDAL();
                _generalDAL = new GeneralDAL();
                InventoryBLL _InventoryBLL = new InventoryBLL();

                _custServiceDAL.ConnectionOpen();
                _inventoryDAL.ConnectionOpen();
                _salesDAL.ConnectionOpen();
                _inventoryRepDAL.ConnectionOpen();
                _fmsInventoryDal.ConnectionOpen();
                _generalDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                _inventoryDAL.BeginTransaction();
                _salesDAL.BeginTransaction();
                _fmsInventoryDal.BeginTransaction();
                _inventoryRepDAL.BeginTransaction();
                _generalDAL.BeginTransaction();

                foreach (Service_confirm_Header _saveHdr in _confHdr)
                {
                    int SeqNum = _custServiceDAL.GetConfSeq();

                    string DocNum = string.Empty;
                    MasterAutoNumber _ClaimDoc = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);

                    DocNum = _saveHdr.Jch_pc + "-" + _ClaimDoc.Aut_start_char + "-" + Convert.ToString(DateTime.Now.Date.Year).Remove(0, 2) + "-" + _ClaimDoc.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                    _inventoryDAL.UpdateAutoNumber(_ClaimDoc);

                    _saveHdr.Jch_seq = SeqNum;
                    _saveHdr.Jch_no = DocNum;
                    _confNo = DocNum;

                    _custServiceDAL.save_Conf_Hdr(_saveHdr);

                    Int32 _line = 1;
                    foreach (Service_Confirm_detail _tmpDet in _confDet)
                    {
                        if (_tmpDet.Jcd_cuscd == _saveHdr.Jch_cust_cd && _tmpDet.Jcd_cusname == _saveHdr.Jch_cust_name && _tmpDet.Jcd_cusadd1 == _saveHdr.Jch_add1 && _tmpDet.Jcd_cusadd2 == _saveHdr.Jch_add2)
                        {
                            _tmpDet.Jcd_seq = SeqNum;
                            _tmpDet.Jcd_no = DocNum;
                            _custServiceDAL.save_Conf_Det(_tmpDet);
                            _line = _line + 1;
                        }
                    }
                }

                //iF JOB IS WRPL
                Boolean _isAllowrpl = false;
                List<Service_Close_Type> oCloseType = _custServiceDAL.GetServiceCloseType(_confHdr[0].Jch_com, _subChannel).Where(X => X.SCT_TP == _confHdr[0].Jch_jobclosetp).ToList();
                if (oCloseType != null)
                {
                    if (oCloseType[0].SCT_REPL_ALLOW == 1)
                    {
                        _isAllowrpl = true;
                    }
                }

                if (_isAllowrpl == true)
                {
                    foreach (Service_job_Det _WRLP in _processJobList)
                    {
                        MasterAutoNumber _ReqAppAuto = new MasterAutoNumber();
                        RequestApprovalDetail _tempReqAppDet = new RequestApprovalDetail();
                        RequestApprovalSerials _tempReqAppSer = new RequestApprovalSerials();
                        RequestApprovalHeader _ReqAppHdr = new RequestApprovalHeader();
                        RequestApprovalDetailLog _tempReqAppDetLog = new RequestApprovalDetailLog();
                        RequestApprovalSerialsLog _tempReqAppSerLog = new RequestApprovalSerialsLog();
                        RequestApprovalHeaderLog _ReqAppHdrLog = new RequestApprovalHeaderLog();

                        _ReqAppAuto = new MasterAutoNumber();
                        _ReqAppAuto.Aut_cate_cd = _confHdr[0].Jch_pc;
                        _ReqAppAuto.Aut_cate_tp = "PC";
                        _ReqAppAuto.Aut_direction = 1;
                        _ReqAppAuto.Aut_modify_dt = null;
                        _ReqAppAuto.Aut_moduleid = "REQ";
                        _ReqAppAuto.Aut_number = 0;
                        _ReqAppAuto.Aut_start_char = "EXREQ";
                        _ReqAppAuto.Aut_year = null;

                        string DocNum = string.Empty;
                        MasterAutoNumber _wrplNo = _inventoryDAL.GetAutoNumber(_ReqAppAuto.Aut_moduleid, _ReqAppAuto.Aut_direction, _ReqAppAuto.Aut_start_char, _ReqAppAuto.Aut_cate_tp, _ReqAppAuto.Aut_cate_cd, _ReqAppAuto.Aut_modify_dt, _ReqAppAuto.Aut_year);
                        DocNum = _confHdr[0].Jch_pc + "-" + _wrplNo.Aut_start_char + "-" + _wrplNo.Aut_number.ToString("00000", CultureInfo.InvariantCulture);

                        _inventoryDAL.UpdateAutoNumber(_ReqAppAuto);

                        string _brand = string.Empty;
                        string _cate1 = string.Empty;
                        string _cate2 = string.Empty;
                        string _des = string.Empty;
                        string _model = string.Empty;
                        string _cate3 = string.Empty;
                        Boolean _isskipApp = false;
                        DataTable _tblItem = _inventoryDAL.Get_Item_Infor(_WRLP.Jbd_itm_cd);
                        foreach (DataRow r in _tblItem.Rows)
                        {
                            _brand = (string)r["mi_brand"];
                            _cate1 = (string)r["mi_cate_1"];
                            _cate2 = (string)r["mi_cate_2"];
                            _model = (string)r["mi_model"];
                            _des = (string)r["mi_shortdesc"];
                            _cate3 = (string)r["mi_cate_3"];
                        }

                        List<Service_supp_claim_itm> supp_claim_itms = _custServiceDAL.GET_TEMPISSUE_RETURNED_ITMS(_confHdr[0].Jch_com);
                        foreach (Service_supp_claim_itm _itm in supp_claim_itms.Where(x => x.SSC_BRND == _brand && x.SSC_CAT1 == _cate1 && x.SSC_CAT2 == _cate2 && x.SSC_SKP_APP == 1))
                        { _isskipApp = true; }

                        InvoiceHeader _invHdr = new InvoiceHeader();
                        _invHdr = _salesDAL.GetInvoiceHdrByCom(_WRLP.Jbd_com, _WRLP.Jbd_invc_no);

                        _ReqAppHdr.Grah_com = _confHdr[0].Jch_com;
                        _ReqAppHdr.Grah_loc = _confHdr[0].Jch_pc;
                        _ReqAppHdr.Grah_app_tp = "ARQT035";
                        _ReqAppHdr.Grah_fuc_cd = _WRLP.Jbd_invc_no;
                        _ReqAppHdr.Grah_ref = DocNum;
                        _ReqAppHdr.Grah_oth_loc = _loc;
                        _ReqAppHdr.Grah_cre_by = _confHdr[0].Jch_cre_by;
                        _ReqAppHdr.Grah_cre_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdr.Grah_mod_by = _confHdr[0].Jch_cre_by;
                        _ReqAppHdr.Grah_mod_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdr.Grah_app_lvl = 0;
                        _ReqAppHdr.Grah_app_by = string.Empty;
                        _ReqAppHdr.Grah_app_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdr.Grah_remaks = _confHdr[0].Jch_rmk;
                        _ReqAppHdr.Grah_req_rem = "REP";    //kapila 11/6/2016

                        Boolean _isWarRep = _custServiceDAL.IsWarReplaceFound_Exchnge(_confHdr[0].Jch_jobno);
                        if (_isWarRep == false)
                        {
                            if (_isskipApp == true)
                            {
                                _ReqAppHdr.Grah_oth_loc = _loc;
                                _ReqAppHdr.Grah_sub_type = "SERVICE_APP";
                                _ReqAppHdr.Grah_app_stus = "F";
                            }
                            else
                            {
                                _ReqAppHdr.Grah_oth_loc = _loc;
                                _ReqAppHdr.Grah_sub_type = "SERVICE";
                                _ReqAppHdr.Grah_app_stus = "P";
                            }
                        }
                        else
                        {
                            _ReqAppHdr.Grah_oth_loc = _loc;
                            _ReqAppHdr.Grah_sub_type = "SERVICE";
                            _ReqAppHdr.Grah_app_stus = "F";
                        }

                        //kapila 10/11/2016
                        if (_confHdr[0].Jch_jobclosetp == "BYBK")
                            _ReqAppHdr.Grah_sub_type = "BUYVOU";

                        _ReqAppHdr.Grah_oth_pc = _cusPreferLoc;


                        _ReqAppHdrLog.Grah_com = _confHdr[0].Jch_com;
                        _ReqAppHdrLog.Grah_loc = _confHdr[0].Jch_pc;
                        _ReqAppHdrLog.Grah_app_tp = "ARQT035";
                        _ReqAppHdrLog.Grah_fuc_cd = _WRLP.Jbd_invc_no;
                        _ReqAppHdrLog.Grah_ref = DocNum;
                        _ReqAppHdrLog.Grah_oth_loc = _loc;
                        _ReqAppHdrLog.Grah_cre_by = _confHdr[0].Jch_cre_by;
                        _ReqAppHdrLog.Grah_cre_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdrLog.Grah_mod_by = _confHdr[0].Jch_cre_by;
                        _ReqAppHdrLog.Grah_mod_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdrLog.Grah_app_stus = "P";
                        _ReqAppHdrLog.Grah_app_lvl = 0;
                        _ReqAppHdrLog.Grah_app_by = string.Empty;
                        _ReqAppHdrLog.Grah_app_dt = Convert.ToDateTime(DateTime.Now).Date;
                        _ReqAppHdrLog.Grah_remaks = _confHdr[0].Jch_rmk;
                        _ReqAppHdrLog.Grah_sub_type = "SERVICE";

                        //kapila 10/11/2016
                        if (_confHdr[0].Jch_jobclosetp == "BYBK")
                            _ReqAppHdrLog.Grah_sub_type = "BUYVOU";
                        _ReqAppHdrLog.Grah_oth_pc = _cusPreferLoc;

                        _generalDAL.SaveRequestApproveHear(_ReqAppHdr);
                        _generalDAL.SaveRequestApproveHear_Log(_ReqAppHdrLog);

                        //Check Previous warranty replacements
                        Warr_Replacement_Det _chkPreWara = new Warr_Replacement_Det();
                        _chkPreWara = _custServiceDAL.GetWarrantyReplacementHistory(_WRLP.Jbd_itm_cd, _WRLP.Jbd_ser1, "C", _WRLP.Jbd_warr);

                        DataTable _invDetScm = new DataTable();
                        DataTable _invDet = new DataTable();
                        decimal _repVal = 0;

                        if (!string.IsNullOrEmpty(_chkPreWara.Swr_ref))
                        {
                            if (!string.IsNullOrEmpty(_chkPreWara.Swr_rep_val.ToString()))
                            {
                                _repVal = _chkPreWara.Swr_rep_val;
                            }
                            else
                            {
                                _repVal = 0;
                            }
                        }
                        else
                        {
                            _chkPreWara = _custServiceDAL.GetWarrantyReplacementHistory(_WRLP.Jbd_itm_cd, _WRLP.Jbd_ser1, "M", _WRLP.Jbd_warr);
                        }

                        if (string.IsNullOrEmpty(_chkPreWara.Swr_ref))
                        {
                            _invDet = _custServiceDAL.GetInvDetBySerial(_WRLP.Jbd_invc_no, _WRLP.Jbd_ser1, _WRLP.Jbd_itm_cd);
                        }
                        else
                        {
                            _invDet = _custServiceDAL.GetInvDetBySerial(_WRLP.Jbd_invc_no, _chkPreWara.Swr_sal_ser, _chkPreWara.Swr_sal_itm);
                            _repVal = _chkPreWara.Swr_rep_val;
                        }

                        Service_JOB_HDR _jobHdr = _custServiceDAL.GET_SCV_JOB_HDR(_WRLP.Jbd_jobno, _WRLP.Jbd_com);

                        //Request approval details
                        _tempReqAppDet.Grad_ref = DocNum;
                        _tempReqAppDet.Grad_line = _WRLP.Jbd_jobline;
                        _tempReqAppDet.Grad_req_param = _WRLP.Jbd_itm_cd;
                        _tempReqAppDet.Grad_val1 = 1;
                        if (_invDet != null && _invDet.Rows.Count > 0)
                        {
                            decimal _invVal = 0;
                            if (_invDet.Rows[0].Field<string>("sah_inv_tp") == "HS")
                            {
                                List<RecieptHeader> _CrRec = new List<RecieptHeader>();
                                List<HpAdjustment> _adj = new List<HpAdjustment>();
                                decimal _totPaid = 0;
                                decimal _totRev = 0;
                                decimal _totAdjVal = 0;

                                _CrRec = _salesDAL.GetReceiptByAccountNo(_confHdr[0].Jch_com, _invDet.Rows[0].Field<string>("sah_pc"), _invDet.Rows[0].Field<string>("sah_acc_no"));

                                if (_CrRec != null)
                                {
                                    foreach (RecieptHeader _tmp in _CrRec)
                                    {
                                        if (_tmp.Sar_receipt_type == "HPDPM" || _tmp.Sar_receipt_type == "HPDPS" || _tmp.Sar_receipt_type == "HPARS" || _tmp.Sar_receipt_type == "HPARM" || _tmp.Sar_receipt_type == "HPRM" || _tmp.Sar_receipt_type == "HPRS")
                                        {
                                            _totPaid = _totPaid + _tmp.Sar_tot_settle_amt;
                                        }

                                        if (_tmp.Sar_receipt_type == "HPDRV" || _tmp.Sar_receipt_type == "HPREV")
                                        {
                                            _totRev = _totRev + _tmp.Sar_tot_settle_amt;
                                        }
                                    }
                                }

                                _totAdjVal = _salesDAL.Get_hp_Adjustment(_invDet.Rows[0].Field<string>("sah_acc_no"));
                                _invVal = (_totPaid - _totRev) + _totAdjVal;
                            }
                            else
                            {
                                _invVal = (_invDet.Rows[0].Field<decimal>("sad_tot_amt") / _invDet.Rows[0].Field<decimal>("sad_qty")) * 1;
                            }
                            decimal _diffVal = _repVal - _invVal;
                            decimal _crVal = 0;

                            if (_diffVal >= 0)
                            {
                                _crVal = _invVal + _diffVal;
                            }
                            else
                            {
                                _crVal = _invVal;
                            }

                            //Assing parameters to getting refund credit definition
                            DateTime _doDt = _invDet.Rows[0].Field<DateTime>("ith_doc_date");
                            DateTime _invDt = _invDet.Rows[0].Field<DateTime>("SAH_DT");
                            DateTime _periodCalDt;
                            if (_jobHdr.SJB_JOBSTP == "RCC")
                            {
                                RCC _rccDet = _inventoryDAL.GetRCCbyNo(_jobHdr.SJB_REQNO);
                                _periodCalDt = _rccDet.Inr_dt;
                            }
                            else
                            {
                                _periodCalDt = _jobHdr.SJB_DT;
                            }

                            DateTime _processDt = _confHdr[0].Jch_dt;
                            TimeSpan ts = _periodCalDt - _doDt;
                            int _periodN = ts.Days;

                            List<MasterSalesPriorityHierarchy> _Saleshir = _salesDAL.GetSalesPriorityHierarchy(_invDet.Rows[0].Field<string>("sah_com"), _invDet.Rows[0].Field<string>("sah_pc"), "PC_PRIT_HIERARCHY", "PC");

                            Refund_credit_definition _getCrParam = new Refund_credit_definition();
                            string _Subchannel = "";
                            string _Company = "";
                            decimal _rate = 0;

                            //check PC
                            _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "PC", _invDet.Rows[0].Field<string>("sah_pc"), _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);

                            if (_getCrParam.Rrd_pt_cd == null)
                            {
                                if (_Saleshir.Count > 0)
                                {
                                    _Subchannel = (from _lst in _Saleshir
                                                   where _lst.Mpi_cd == "SCHNL"
                                                   select _lst.Mpi_val).ToList<string>()[0];

                                    _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "SCHNL", _Subchannel, _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);

                                    if (_getCrParam.Rrd_pt_cd == null)
                                    {
                                        if (_Saleshir.Count > 0)
                                        {
                                            _Company = (from _lst in _Saleshir
                                                        where _lst.Mpi_cd == "COM"
                                                        select _lst.Mpi_val).ToList<string>()[0];

                                            _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "COM", _Company, _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);
                                        }
                                    }
                                }
                            }

                            if (_getCrParam.Rrd_pt_cd != null)
                            {
                                _rate = _getCrParam.Rrd_val;
                            }
                            else
                            {
                                _rate = 100;
                            }

                            if (_confHdr[0].Jch_jobclosetp == "WRPLS" || _confHdr[0].Jch_jobclosetp == "SWPR")
                            {
                                //_rate = _rate;
                            }
                            else
                            {
                                _rate = 100;
                            }

                            _crVal = (_crVal * _rate) / 100;


                            _tempReqAppDet.Grad_val2 = _invDet.Rows[0].Field<decimal>("sad_unit_rt");
                            _tempReqAppDet.Grad_val5 = (_invDet.Rows[0].Field<decimal>("sad_tot_amt") / _invDet.Rows[0].Field<decimal>("sad_qty")) * 1;
                            _tempReqAppDet.Grad_cred_val = _crVal;
                            if (_invDet.Rows[0].Field<string>("sah_inv_tp") == "HS")
                            {
                                _tempReqAppDet.Grad_val5 = _invDet.Rows[0].Field<decimal>("sad_unit_rt");
                                if (_tempReqAppDet.Grad_val5 > 0)
                                {
                                    _tempReqAppDet.Grad_cred_val = _crVal;
                                }
                                else
                                {
                                    _tempReqAppDet.Grad_cred_val = _invDet.Rows[0].Field<decimal>("sad_unit_rt");
                                }
                            }

                            _tempReqAppDet.Grad_anal1 = _invDet.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                            _tempReqAppDet.Grad_anal2 = _invDet.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                            _tempReqAppDet.Grad_anal3 = _invDet.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;
                            decimal _seqNo = Convert.ToDecimal(_invDet.Rows[0].Field<decimal>("sad_seq"));
                            _tempReqAppDet.Grad_anal4 = _seqNo.ToString(); //Convert.ToString(item.Sad_seq); 
                            _tempReqAppDet.Grad_anal7 = _invDet.Rows[0].Field<string>("ith_doc_no");
                            _tempReqAppDet.Grad_anal15 = _invDet.Rows[0].Field<string>("sad_itm_stus");
                            _tempReqAppDet.Grad_anal8 = _jobHdr.SJB_CUST_CD;
                            _tempReqAppDet.Grad_anal9 = "SCM2";
                            _tempReqAppDet.Grad_anal16 = _rate;
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(_chkPreWara.Swr_ref))
                            {
                                _invDetScm = _custServiceDAL.GetInvDetWithDofrmScm(_WRLP.Jbd_invc_no, _WRLP.Jbd_itm_cd, _WRLP.Jbd_ser1);
                            }
                            else
                            {
                                _invDetScm = _custServiceDAL.GetInvDetWithDofrmScm(_WRLP.Jbd_invc_no, _chkPreWara.Swr_sal_itm, _chkPreWara.Swr_sal_ser);
                                _repVal = _chkPreWara.Swr_rep_val;
                            }
                            if (_invDetScm != null && _invDetScm.Rows.Count > 0)
                            {

                                decimal _invVal = (_invDetScm.Rows[0].Field<decimal>("sad_tot_amt") / _invDetScm.Rows[0].Field<decimal>("sad_qty")) * 1;
                                decimal _diffVal = _repVal - _invVal;
                                decimal _crVal = 0;

                                if (_diffVal >= 0)
                                {
                                    _crVal = _invVal + _diffVal;
                                }
                                else
                                {
                                    _crVal = _invVal;
                                }

                                DateTime _doDt = _invDetScm.Rows[0].Field<DateTime>("ith_doc_date");
                                DateTime _invDt = _invDetScm.Rows[0].Field<DateTime>("SAH_DT");
                                DateTime _periodCalDt;
                                if (_jobHdr.SJB_JOBSTP == "RCC")
                                {
                                    RCC _rccDet = _inventoryDAL.GetRCCbyNo(_jobHdr.SJB_REQNO);
                                    _periodCalDt = _rccDet.Inr_dt;
                                }
                                else
                                {
                                    _periodCalDt = _jobHdr.SJB_DT;
                                }

                                DateTime _processDt = _confHdr[0].Jch_dt;
                                TimeSpan ts = _periodCalDt - _doDt;
                                int _periodN = ts.Days;

                                Refund_credit_definition _getCrParam = new Refund_credit_definition();
                                string _Subchannel = "";
                                string _Company = "";
                                decimal _rate = 0;

                                //check PC
                                _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDetScm.Rows[0].Field<string>("sah_com"), "PC", _invDetScm.Rows[0].Field<string>("sah_pc"), _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);

                                if (_getCrParam.Rrd_pt_cd == null)
                                {

                                    _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDetScm.Rows[0].Field<string>("sah_com"), "COM", _invDetScm.Rows[0].Field<string>("sah_com"), _WRLP.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);
                                }

                                if (_getCrParam.Rrd_pt_cd != null)
                                {
                                    _rate = _getCrParam.Rrd_val;
                                }
                                else
                                {
                                    _rate = 100;
                                }

                                if (_confHdr[0].Jch_jobclosetp == "WRPLS" || _confHdr[0].Jch_jobclosetp == "SWPR")
                                {
                                    //_rate = _rate;
                                }
                                else
                                {
                                    _rate = 100;
                                }

                                _crVal = (_crVal * _rate) / 100;

                                _tempReqAppDet.Grad_val2 = _invDetScm.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
                                _tempReqAppDet.Grad_val5 = _crVal;//_invDetScm.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_tot_amt;
                                _tempReqAppDet.Grad_cred_val = _crVal;

                                string _scm2Status = string.Empty;
                                String _scmStatus = _invDetScm.Rows[0].Field<string>("sad_itm_stus");
                                DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(string.Empty, _scmStatus);
                                if (_tblStus != null)
                                    if (_tblStus.Rows.Count > 0)
                                    {
                                        foreach (DataRow _rs in _tblStus.Rows)
                                        {
                                            _scm2Status = Convert.ToString(_rs["mis_cd"]);
                                            break;
                                        }
                                    }

                                _tempReqAppDet.Grad_anal1 = _scm2Status;//_invDetScm.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                                _tempReqAppDet.Grad_anal2 = _invDetScm.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                                _tempReqAppDet.Grad_anal3 = _invDetScm.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;
                                Int64 _seqNoscm = _invDetScm.Rows[0].Field<Int64>("sad_seq");
                                _tempReqAppDet.Grad_anal4 = _seqNoscm.ToString(); //Convert.ToString(item.Sad_seq); 
                                _tempReqAppDet.Grad_anal7 = _invDetScm.Rows[0].Field<string>("ith_doc_no");
                                _tempReqAppDet.Grad_anal15 = _scm2Status;// _invDetScm.Rows[0].Field<string>("sad_itm_stus");
                                _tempReqAppDet.Grad_anal8 = _invDetScm.Rows[0].Field<string>("sah_cus_cd");
                                _tempReqAppDet.Grad_anal9 = "SCM";
                                _tempReqAppDet.Grad_anal16 = _rate;
                            }
                            else
                            {
                                _tempReqAppDet.Grad_val2 = 0; //item.Sad_unit_rt;
                                _tempReqAppDet.Grad_val5 = 0;
                                _tempReqAppDet.Grad_anal1 = "";
                                _tempReqAppDet.Grad_anal2 = "";
                                _tempReqAppDet.Grad_anal3 = "";
                                _tempReqAppDet.Grad_anal4 = "";
                                _tempReqAppDet.Grad_anal7 = "";
                                _tempReqAppDet.Grad_anal15 = "";
                                _tempReqAppDet.Grad_anal8 = "";
                                _tempReqAppDet.Grad_anal9 = "";
                                _tempReqAppDet.Grad_anal16 = 0;
                            }
                        }
                        _tempReqAppDet.Grad_val3 = 1;
                        _tempReqAppDet.Grad_val4 = 0;//item.Sad_itm_tax_amt
                        _tempReqAppDet.Grad_anal5 = "EX-RECEIVE";
                        _tempReqAppDet.Grad_date_param = _confHdr[0].Jch_dt;
                        _tempReqAppDet.Grad_is_rt1 = true;
                        _tempReqAppDet.Grad_is_rt2 = false;
                        _tempReqAppDet.Grad_anal6 = _WRLP.Jbd_invc_no;



                        int diffResult = (_jobHdr.SJB_DT.Month - _WRLP.Jbd_warrstartdt.Month) + 12 * (_jobHdr.SJB_DT.Year - _WRLP.Jbd_warrstartdt.Year);
                        _tempReqAppDet.Grad_anal10 = "CREDIT";//As per dilanda added darshana on 18/03/2016 //diffResult.ToString(); //Convert.ToString(UsedWarrantyPeriod);
                        _tempReqAppDet.Grad_anal11 = "CREDIT"; //As per dilanda added darshana on 18/03/2016//(_WRLP.Jbd_warrperiod - diffResult).ToString(); //Convert.ToString(RemainingWarrantyPeriod);
                        _tempReqAppDet.Grad_anal12 = _WRLP.Jbd_jobno;
                        _tempReqAppDet.Grad_anal13 = _confHdr[0].Jch_dt.ToShortDateString();
                        _tempReqAppDet.Grad_anal14 = _WRLP.Jbd_warrstartdt.ToShortDateString();

                        //Request log
                        _tempReqAppDetLog.Grad_ref = DocNum;
                        _tempReqAppDetLog.Grad_line = _WRLP.Jbd_jobline;
                        _tempReqAppDetLog.Grad_req_param = _WRLP.Jbd_itm_cd;
                        _tempReqAppDetLog.Grad_val1 = 1;
                        if (_invDet != null && _invDet.Rows.Count > 0)
                        {
                            decimal _invVal = (_invDet.Rows[0].Field<decimal>("sad_tot_amt") / _invDet.Rows[0].Field<decimal>("sad_qty")) * 1;
                            decimal _diffVal = _repVal - _invVal;
                            decimal _crVal = 0;

                            if (_diffVal >= 0)
                            {
                                _crVal = _invVal + _diffVal;
                            }
                            else
                            {
                                _crVal = _invVal;
                            }

                            _tempReqAppDetLog.Grad_val2 = _tempReqAppDet.Grad_val2;//_invDet.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
                            _tempReqAppDetLog.Grad_val5 = _tempReqAppDet.Grad_val5;//_crVal;//_invDet.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_tot_amt;
                            _tempReqAppDetLog.Grad_anal1 = _invDet.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                            _tempReqAppDetLog.Grad_anal2 = _invDet.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                            _tempReqAppDetLog.Grad_anal3 = _invDet.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;

                            decimal _seqNo1 = Convert.ToDecimal(_invDet.Rows[0].Field<decimal>("sad_seq"));
                            _tempReqAppDetLog.Grad_anal4 = _seqNo1.ToString(); //Convert.ToString(item.Sad_seq);
                        }
                        else
                        {
                            if (_invDetScm != null && _invDetScm.Rows.Count > 0)
                            {

                                decimal _invVal = (_invDetScm.Rows[0].Field<decimal>("sad_tot_amt") / _invDetScm.Rows[0].Field<decimal>("sad_qty")) * 1;
                                decimal _diffVal = _repVal - _invVal;
                                decimal _crVal = 0;

                                if (_diffVal >= 0)
                                {
                                    _crVal = _invVal + _diffVal;
                                }
                                else
                                {
                                    _crVal = _invVal;
                                }

                                _tempReqAppDetLog.Grad_val2 = _tempReqAppDet.Grad_val2;//_invDetScm.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_unit_rt;
                                _tempReqAppDetLog.Grad_val5 = _tempReqAppDet.Grad_val5;//_crVal;//_invDetScm.Rows[0].Field<decimal>("sad_unit_rt"); //item.Sad_tot_amt;
                                string _scm2Status = string.Empty;
                                String _scmStatus = _invDetScm.Rows[0].Field<string>("sad_itm_stus");
                                DataTable _tblStus = _inventoryDAL.GetItemStatusMaster(string.Empty, _scmStatus);
                                if (_tblStus != null)
                                    if (_tblStus.Rows.Count > 0)
                                    {
                                        foreach (DataRow _rs in _tblStus.Rows)
                                        {
                                            _scm2Status = Convert.ToString(_rs["mis_cd"]);
                                            break;
                                        }
                                    }
                                _tempReqAppDetLog.Grad_anal1 = _scm2Status;//_invDetScm.Rows[0].Field<string>("sad_itm_stus"); //item.Sad_itm_stus;
                                _tempReqAppDetLog.Grad_anal2 = _invDetScm.Rows[0].Field<string>("sad_pbook");// item.Sad_pbook;
                                _tempReqAppDetLog.Grad_anal3 = _invDetScm.Rows[0].Field<string>("sad_pb_lvl"); //item.Sad_pb_lvl;
                                Int64 _seqNoscm1 = Convert.ToInt64(_invDetScm.Rows[0].Field<Int64>("sad_seq"));
                                _tempReqAppDetLog.Grad_anal4 = _seqNoscm1.ToString(); //Convert.ToString(item.Sad_seq); 
                            }
                            else
                            {
                                _tempReqAppDetLog.Grad_val2 = 0; //item.Sad_unit_rt;
                                _tempReqAppDetLog.Grad_val5 = 0;
                                _tempReqAppDetLog.Grad_anal1 = "";
                                _tempReqAppDetLog.Grad_anal2 = "";
                                _tempReqAppDetLog.Grad_anal3 = "";
                                _tempReqAppDetLog.Grad_anal4 = "";
                            }
                        }
                        _tempReqAppDetLog.Grad_val3 = 1;
                        _tempReqAppDetLog.Grad_val4 = 0;//item.Sad_itm_tax_amt
                        _tempReqAppDetLog.Grad_anal5 = "EX-RECEIVE";
                        _tempReqAppDetLog.Grad_date_param = _confHdr[0].Jch_dt;
                        _tempReqAppDetLog.Grad_is_rt1 = true;
                        _tempReqAppDetLog.Grad_is_rt2 = false;

                        //if item given as FOC then current valid price will consider as recive item price
                        if (_tempReqAppDet.Grad_val2 <= 0)
                        {
                            DataTable _getSbChnl = _salesDAL.GetChanelOnPC(_confHdr[0].Jch_com, _confHdr[0].Jch_pc, "SCHNL");
                            string _sbChnl = "";
                            if (_getSbChnl != null && _getSbChnl.Rows.Count > 0)
                            {
                                _sbChnl = _getSbChnl.Rows[0].Field<string>("mpi_val");
                            }

                            DataTable _norPB = _custServiceDAL.GetNorPbDet(_confHdr[0].Jch_com, _sbChnl);
                            string _pbook = "";
                            string _pblvl = "";
                            if (_norPB != null && _norPB.Rows.Count > 0)
                            {
                                _pbook = _norPB.Rows[0].Field<string>("scd_pb");
                                _pblvl = _norPB.Rows[0].Field<string>("scd_lvl");
                            }

                            List<PriceDetailRef> _priceDetailRef = new List<PriceDetailRef>();
                            _priceDetailRef = _salesDAL.GetPriceDetailForQuo(_pbook, _pblvl, _WRLP.Jbd_itm_cd, 1, _confHdr[0].Jch_dt, null, _confHdr[0].Jch_dt);

                            if (_priceDetailRef.Count > 0)
                            {
                                List<PriceDetailRef> _new = _priceDetailRef;
                                _priceDetailRef = new List<PriceDetailRef>();
                                var _p = _new.Where(x => x.Sapd_price_type == 0).ToList();
                                if (_p != null)
                                    if (_p.Count > 0)
                                        _priceDetailRef.Add(_p[0]);

                                foreach (PriceDetailRef _price in _priceDetailRef)
                                {

                                    decimal _invVal = _price.Sapd_itm_price;
                                    decimal _diffVal = _repVal - _invVal;
                                    decimal _crVal = 0;

                                    if (_diffVal >= 0)
                                    {
                                        _crVal = _invVal + _diffVal;
                                    }
                                    else
                                    {
                                        _crVal = _invVal;
                                    }

                                    _tempReqAppDet.Grad_val2 = 0;//_price.Sapd_itm_price;
                                    _tempReqAppDet.Grad_val5 = 0;//_crVal;//_price.Sapd_itm_price;
                                    _tempReqAppDetLog.Grad_val2 = _price.Sapd_itm_price;
                                    _tempReqAppDetLog.Grad_val5 = _crVal;//_price.Sapd_itm_price;
                                }
                            }
                        }

                        _generalDAL.Save_RequestApprove_Det(_tempReqAppDet);
                        _generalDAL.Save_RequestApprove_Det_Log(_tempReqAppDetLog);

                        _tempReqAppSer.Gras_ref = DocNum;
                        _tempReqAppSer.Gras_line = _WRLP.Jbd_jobline;
                        if (_invDet != null && _invDet.Rows.Count > 0)
                        {
                            _tempReqAppSer.Gras_anal1 = _invDet.Rows[0].Field<string>("ith_doc_no");
                            _tempReqAppSer.Gras_anal7 = _invDet.Rows[0].Field<Int32>("ITB_BASE_REFLINE");
                        }
                        else if (_invDetScm != null && _invDetScm.Rows.Count > 0)
                        {
                            _tempReqAppSer.Gras_anal1 = _invDetScm.Rows[0].Field<string>("ith_doc_no");
                        }
                        else
                        {
                            _tempReqAppSer.Gras_anal1 = "";
                            _tempReqAppSer.Gras_anal7 = 0;
                        }
                        _tempReqAppSer.Gras_anal2 = _WRLP.Jbd_itm_cd;
                        _tempReqAppSer.Gras_anal3 = _WRLP.Jbd_ser1;
                        _tempReqAppSer.Gras_anal4 = _WRLP.Jbd_jobno;
                        _tempReqAppSer.Gras_anal5 = _WRLP.Jbd_warr;
                        _tempReqAppSer.Gras_anal6 = Convert.ToInt32(_WRLP.Jbd_ser_id);
                        _tempReqAppSer.Gras_anal8 = _WRLP.Jbd_warrperiod;
                        _tempReqAppSer.Gras_anal9 = _WRLP.Jbd_jobline;
                        _tempReqAppSer.Gras_anal10 = 0;

                        _generalDAL.Save_RequestApprove_Ser(_tempReqAppSer);
                        _generalDAL.Save_RequestApprove_Ser_Log(_tempReqAppSer, 0);

                        #region Adjustment

                        if (_isskipApp == true)
                        {
                            // Nadeeka 10-06-2015
                            InventoryHeader inHeader = new InventoryHeader();
                            List<ReptPickSerials> _doitemserials = new List<ReptPickSerials>();
                            DataTable dt_location = _inventoryDAL.Get_location_by_code(_confHdr[0].Jch_com, _WRLP.Jbd_loc);
                            string _binCode = _inventoryDAL.GetDefaultBinCode(_confHdr[0].Jch_com, _WRLP.Jbd_loc);
                            ReptPickSerials _ser = new ReptPickSerials();

                            foreach (DataRow r in dt_location.Rows)
                            {
                                // Get the value of the wanted column and cast it to string
                                inHeader.Ith_sbu = (string)r["ML_OPE_CD"];
                                if (System.DBNull.Value != r["ML_CATE_2"])
                                {
                                    inHeader.Ith_channel = (string)r["ML_CATE_2"];
                                }
                                else
                                {
                                    inHeader.Ith_channel = string.Empty;
                                }
                            }
                            inHeader.Ith_acc_no = "STOCK_EX";
                            inHeader.Ith_anal_1 = string.Empty;
                            inHeader.Ith_anal_2 = string.Empty;
                            inHeader.Ith_anal_3 = string.Empty;
                            inHeader.Ith_anal_4 = string.Empty;
                            inHeader.Ith_anal_5 = string.Empty;
                            inHeader.Ith_anal_6 = 0;
                            inHeader.Ith_anal_7 = 0;
                            inHeader.Ith_anal_8 = DateTime.MinValue;
                            inHeader.Ith_anal_9 = DateTime.MinValue;
                            inHeader.Ith_anal_10 = false;
                            inHeader.Ith_anal_11 = false;
                            inHeader.Ith_anal_12 = false;
                            inHeader.Ith_bus_entity = _jobHdr.SJB_CUST_CD;
                            inHeader.Ith_cate_tp = "EX";
                            inHeader.Ith_com = _confHdr[0].Jch_com;
                            inHeader.Ith_com_docno = string.Empty;
                            inHeader.Ith_cre_by = _confHdr[0].Jch_cre_by;
                            inHeader.Ith_cre_when = DateTime.Now;
                            inHeader.Ith_del_add1 = string.Empty;
                            inHeader.Ith_del_add2 = string.Empty;
                            inHeader.Ith_del_code = string.Empty;
                            inHeader.Ith_del_party = _jobHdr.SJB_CUST_CD;
                            inHeader.Ith_del_town = string.Empty;
                            inHeader.Ith_direct = true;
                            inHeader.Ith_doc_date = Convert.ToDateTime(DateTime.Now).Date;
                            inHeader.Ith_doc_no = string.Empty;
                            inHeader.Ith_doc_tp = "ADJ";
                            inHeader.Ith_doc_year = Convert.ToDateTime(DateTime.Now).Date.Year;
                            inHeader.Ith_entry_no = _WRLP.Jbd_invc_no;
                            inHeader.Ith_entry_tp = "ARQT035";
                            inHeader.Ith_git_close = true;
                            inHeader.Ith_git_close_date = DateTime.MinValue;
                            inHeader.Ith_git_close_doc = string.Empty;
                            inHeader.Ith_isprinted = false;
                            inHeader.Ith_is_manual = false;
                            inHeader.Ith_job_no = _WRLP.Jbd_jobno;
                            inHeader.Ith_loading_point = string.Empty;
                            inHeader.Ith_loading_user = string.Empty;
                            inHeader.Ith_loc = _WRLP.Jbd_loc;
                            inHeader.Ith_manual_ref = DocNum;
                            inHeader.Ith_mod_by = _confHdr[0].Jch_cre_by;
                            inHeader.Ith_mod_when = DateTime.Now;
                            inHeader.Ith_noofcopies = 0;
                            inHeader.Ith_oth_loc = string.Empty;
                            inHeader.Ith_oth_docno = string.Empty; // do #
                            inHeader.Ith_sub_docno = DocNum;
                            inHeader.Ith_remarks = _confHdr[0].Jch_jobclosermk;
                            inHeader.Ith_bus_entity = _jobHdr.SJB_CUST_CD;
                            inHeader.Ith_del_add1 = string.Empty;
                            MasterAutoNumber masterAuto = new MasterAutoNumber();
                            //inHeader.Ith_seq_no = 6; removed by Chamal 12-05-2013
                            inHeader.Ith_session_id = string.Empty;
                            inHeader.Ith_stus = "A";
                            inHeader.Ith_sub_tp = "NOR";
                            inHeader.Ith_vehi_no = string.Empty;
                            inHeader.Ith_pc = _confHdr[0].Jch_pc;
                            masterAuto.Aut_cate_cd = _WRLP.Jbd_loc;
                            masterAuto.Aut_cate_tp = "LOC";
                            masterAuto.Aut_direction = null;
                            masterAuto.Aut_modify_dt = null;
                            masterAuto.Aut_moduleid = "ERN";
                            masterAuto.Aut_number = 5;//what is Aut_number
                            masterAuto.Aut_start_char = "ERN";
                            masterAuto.Aut_year = null;

                            _ser.Tus_base_doc_no = string.Empty;
                            _ser.Tus_bin = _binCode;
                            _ser.Tus_com = _confHdr[0].Jch_com;
                            _ser.Tus_cre_by = _confHdr[0].Jch_cre_by;
                            _ser.Tus_cre_dt = System.DateTime.Now;
                            _ser.Tus_doc_dt = System.DateTime.Now;
                            _ser.Tus_doc_no = string.Empty;
                            _ser.Tus_exist_grncom = string.Empty;
                            _ser.Tus_exist_grnno = string.Empty;
                            _ser.Tus_exist_supp = string.Empty;
                            DataTable dt_serItem = _inventoryDAL.Get_Int_ItmStausBySerId(_WRLP.Jbd_invc_no, Convert.ToInt32(_tempReqAppSer.Gras_anal6), _tempReqAppSer.Gras_anal3, _tempReqAppSer.Gras_anal2);
                            if (dt_serItem.Rows.Count > 0)
                            {
                                foreach (DataRow r in dt_serItem.Rows)
                                {
                                    _ser.Tus_itm_stus = (string)r["STS"];
                                }
                            }
                            else
                            {
                                _ser.Tus_itm_stus = "GOD";
                            }

                            _ser.Tus_unit_price = 0;
                            _ser.Tus_ageloc = string.Empty;
                            _ser.Tus_ser_1 = _tempReqAppSer.Gras_anal3;
                            _ser.Tus_ser_2 = _tempReqAppSer.Gras_anal4;
                            _ser.Tus_warr_no = _tempReqAppSer.Gras_anal5;
                            _ser.Tus_ser_id = Convert.ToInt32(_tempReqAppSer.Gras_anal6);
                            _ser.Tus_base_itm_line = Convert.ToInt32(_tempReqAppSer.Gras_anal7);
                            _ser.Tus_warr_period = Convert.ToInt32(_tempReqAppSer.Gras_anal8);
                            _ser.Tus_itm_cd = _tempReqAppSer.Gras_anal2;
                            _ser.Tus_itm_brand = _brand;
                            _ser.Tus_itm_desc = _des;
                            _ser.Tus_itm_model = _model;
                            _ser.Tus_loc = _WRLP.Jbd_loc;
                            _ser.Tus_new_remarks = String.Empty;
                            _ser.Tus_new_status = String.Empty;
                            _ser.Tus_qty = 1;
                            _ser.Tus_seq_no = 0;
                            _ser.Tus_job_no = _WRLP.Jbd_jobno;
                            _ser.Tus_job_line = _WRLP.Jbd_jobline;
                            _doitemserials.Add(_ser);

                            string _aodInNo = string.Empty;
                            _InventoryBLL.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, inHeader, _doitemserials, null, masterAuto, out _aodInNo);
                        }
                        #endregion

                    }
                }

                //If job is BR....
                if (_confHdr[0].Jch_jobclosetp == "BER")
                {
                    foreach (Service_job_Det _br in _processJobList)
                    {
                        BRServiceApproval _saveBrApp = new BRServiceApproval();
                        Service_JOB_HDR _jobHdr = _custServiceDAL.GET_SCV_JOB_HDR(_br.Jbd_jobno, _br.Jbd_com);

                        if (_jobHdr.SJB_JOBSTP == "RCC")
                        {
                            _saveBrApp.Inra_no = _jobHdr.SJB_REQNO;
                            RCC _rccDet = _inventoryDAL.GetRCCbyNo(_jobHdr.SJB_REQNO);
                            if (_rccDet != null)
                            {
                                _saveBrApp.Insa_tp = _rccDet.Inr_tp;
                                _saveBrApp.Insa_sub_tp = _rccDet.Inr_sub_tp;
                                _saveBrApp.Insa_agent = _rccDet.Inr_agent;
                                _saveBrApp.Insa_col_method = _rccDet.Inr_col_method;
                                _saveBrApp.Insa_def_cd = _rccDet.Inr_def_cd;
                                _saveBrApp.Insa_def = _rccDet.Inr_def;
                                _saveBrApp.Insa_condition = _rccDet.Inr_condition;
                                _saveBrApp.Insa_accessories = _rccDet.Inr_accessories;
                                _saveBrApp.Insa_easy_loc = _rccDet.Inr_easy_loc;
                                _saveBrApp.Insa_insp_by = _rccDet.Inr_insp_by;
                                _saveBrApp.Insa_rem1 = _rccDet.Inr_rem1;
                                _saveBrApp.Insa_def_rem = _rccDet.Inr_def_rem;
                            }
                        }
                        else
                        {
                            _saveBrApp.Inra_no = _jobHdr.SJB_JOBNO;
                        }
                        _saveBrApp.Insa_com_cd = _br.Jbd_com;
                        _saveBrApp.Insa_loc_cd = _br.Jbd_loc;
                        _saveBrApp.Insa_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_is_manual = 0;
                        _saveBrApp.Insa_manual_ref = _jobHdr.SJB_MANUALREF;
                        _saveBrApp.Insa_inv_no = _br.Jbd_invc_no;

                        InvoiceHeader _invDet = _salesDAL.GetInvoiceHeader(_saveBrApp.Insa_inv_no);
                        if (_invDet != null)
                        {
                            _saveBrApp.Insa_acc_no = _invDet.Sah_acc_no;
                            _saveBrApp.Insa_inv_dt = _invDet.Sah_dt;
                        }

                        _saveBrApp.Insa_cust_cd = _jobHdr.SJB_CUST_CD;
                        _saveBrApp.Insa_cust_name = _jobHdr.SJB_CUST_NAME;
                        _saveBrApp.Insa_addr = _jobHdr.SJB_ADD1 + " " + _jobHdr.SJB_ADD2;
                        _saveBrApp.Insa_tel = _jobHdr.SJB_MOBINO;
                        _saveBrApp.Insa_itm = _br.Jbd_itm_cd;
                        _saveBrApp.Insa_ser = _br.Jbd_ser1;
                        _saveBrApp.Insa_warr = _br.Jbd_warr;
                        _saveBrApp.Insa_is_jb_open = 1;
                        _saveBrApp.Insa_jb_no = _br.Jbd_jobno;
                        _saveBrApp.Insa_jb_rem = _confHdr[0].Jch_jobclosermk;
                        _saveBrApp.Insa_stage = 4;
                        _saveBrApp.Insa_stus = "A";
                        _saveBrApp.Insa_cre_by = _confHdr[0].Jch_cre_by;
                        _saveBrApp.Insa_mod_by = _confHdr[0].Jch_cre_by;
                        _saveBrApp.Insa_war_period = _br.Jbd_warrperiod;
                        _saveBrApp.Insa_job_dt = _jobHdr.SJB_DT;
                        _saveBrApp.Insa_oth_doc_dt = _jobHdr.SJB_DT;
                        _saveBrApp.Insa_return_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_acknoledge_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_complete_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_anal4 = _br.Jbd_jobline;
                        _saveBrApp.Insa_anal5 = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_anal6 = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_app_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_rej_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_repair_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_disprem1_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_disprem2_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_disprem3_dt = _confHdr[0].Jch_dt;
                        _saveBrApp.Insa_rem1_dt = _confHdr[0].Jch_dt;

                        _custServiceDAL.SaveBRServiceApproval(_saveBrApp);
                    }
                }

                foreach (Service_Cost_sheet _tmpCost in _jobCost)
                {
                    _custServiceDAL.save_JobCostSheet(_tmpCost);
                }

                foreach (Service_job_Det _tmpJobDet in _processJobList)
                {
                    Service_Job_StageLog oLog = new Service_Job_StageLog();
                    if (_autoStartJob == 1)
                    {
                        oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                        oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                        oLog.SJL_COM = _tmpJobDet.Jbd_com;
                        oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                        oLog.SJL_JOBSTAGE = 6;
                        oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                        oLog.SJL_INFSUP = 0;
                        _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    }

                    oLog = new Service_Job_StageLog();
                    decimal _updateStage = 0;
                    if (_isInv == true)
                    {
                        DataTable _dtJobHdr = _custServiceDAL.sp_get_job_hdrby_jobno(_tmpJobDet.Jbd_jobno);
                        DataTable _dtPend = _custServiceDAL.GetPendingAcceptanceStatus(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_loc, _dtJobHdr.Rows[0]["SJB_JOBCAT"].ToString());
                        if (_dtPend.Rows.Count > 0)
                        {
                            if (Convert.ToDecimal(_dtPend.Rows[0]["scs_pend_accept"]) == 1)
                            {
                                _updateStage = Convert.ToDecimal(7.9);
                            }
                            else
                            {
                                _updateStage = 8;
                            }
                        }
                        else
                        {
                            _updateStage = 8;
                        }
                        oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                        oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                        oLog.SJL_COM = _tmpJobDet.Jbd_com;
                        oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                        oLog.SJL_JOBSTAGE = 7;
                        oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                        oLog.SJL_INFSUP = 0;
                        _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    }
                    else if (_confDet.Count <= 0)
                    {
                        DataTable _dtJobHdr = _custServiceDAL.sp_get_job_hdrby_jobno(_tmpJobDet.Jbd_jobno);
                        DataTable _dtPend = _custServiceDAL.GetPendingAcceptanceStatus(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_loc, _dtJobHdr.Rows[0]["SJB_JOBCAT"].ToString());
                        if (_dtPend.Rows.Count > 0)
                        {
                            if (Convert.ToDecimal(_dtPend.Rows[0]["scs_pend_accept"]) == 1)
                            {
                                _updateStage = Convert.ToDecimal(7.9);
                            }
                            else
                            {
                                _updateStage = 8;
                            }
                        }
                        else
                        {
                            _updateStage = 8;
                        }
                        oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                        oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                        oLog.SJL_COM = _tmpJobDet.Jbd_com;
                        oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                        oLog.SJL_JOBSTAGE = 7;
                        oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                        oLog.SJL_INFSUP = 0;
                        _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                    }
                    else
                    {
                        _updateStage = 7;
                    }

                    oLog = new Service_Job_StageLog();
                    oLog.SJL_REQNO = "";
                    oLog.SJL_JOBNO = _tmpJobDet.Jbd_jobno;
                    oLog.SJL_JOBLINE = _tmpJobDet.Jbd_jobline;
                    oLog.SJL_COM = _tmpJobDet.Jbd_com;
                    oLog.SJL_LOC = _tmpJobDet.Jbd_loc;
                    oLog.SJL_JOBSTAGE = _updateStage;
                    oLog.SJL_CRE_BY = _confHdr[0].Jch_cre_by;
                    oLog.SJL_CRE_DT = DateTime.Now;
                    oLog.SJL_SESSION_ID = _invoiceHeader.Sah_session_id;
                    oLog.SJL_INFSUP = 0;
                    _effects = _custServiceDAL.Save_ServiceJobStageLog(oLog);

                    _custServiceDAL.Update_JobDetailStage(_tmpJobDet.Jbd_jobno, _tmpJobDet.Jbd_jobline, _updateStage, _confHdr[0].Jch_cre_by);
                    _custServiceDAL.Update_Job_dates(_tmpJobDet.Jbd_jobno, _tmpJobDet.Jbd_jobline, _tmpJobDet.Jbd_techst_dt, DateTime.Now, _tmpJobDet.Jbd_techst_dt_man, DateTime.Now);
                }

                Warr_Replacement_Det _newWarrRepDet = new Warr_Replacement_Det();
                Int32 _warrLine = 0;
                //check for MU AND MPCB
                foreach (Service_Confirm_detail _lst in _confDet)
                {
                    _newWarrRepDet = new Warr_Replacement_Det();
                    MasterItem _chkItm = _inventoryDAL.GetItem(_confHdr[0].Jch_com, _lst.Jcd_itmcd);
                    DataTable _odata = _custServiceDAL.get_REF_OLD_PART_CAT(_chkItm.Mi_cate_1, _chkItm.Mi_cate_2, _chkItm.Mi_cate_3);
                    if (_odata.Rows.Count > 0)
                    {



                        if (_odata.Rows[0]["PROCESS_PARTH"].ToString() == "A")//if (_chkItm.Mi_cate_1 == "PH" && _chkItm.Mi_cate_2 == "MOB" && _chkItm.Mi_cate_3 == "MU")
                        {
                            List<Service_job_Det> _jobItms = new List<Service_job_Det>();
                            _jobItms = _custServiceDAL.GetJobDetails(_lst.Jcd_jobno, _lst.Jcd_joblineno, _confHdr[0].Jch_com);

                            ReptPickSerials PickSerialsDet = _inventoryDAL.Get_all_details_on_serialID(_confHdr[0].Jch_com, _confHdr[0].Jch_loc, null, _lst.Jcd_itmcd, _lst.Jcd_ser_id);
                            //add by akila 2017/07/05
                            if (string.IsNullOrEmpty(PickSerialsDet.Tus_ser_1) || (string.IsNullOrWhiteSpace(PickSerialsDet.Tus_ser_1)))
                            {
                                throw new Exception(string.Format("Job# {0} cannot confirm. {1} Item code {2} has setuped as non serial item", _lst.Jcd_jobno, Environment.NewLine, _lst.Jcd_itmcd));
                            }

                            if (_jobItms.Count > 0)
                            {
                                foreach (Service_job_Det _jItm in _jobItms)
                                {
                                    _custServiceDAL.Update_Warranty_mpcb(_confHdr[0].Jch_com, _jItm.Jbd_itm_cd, _jItm.Jbd_ser1, _jItm.Jbd_warr, Convert.ToInt32(_jItm.Jbd_ser_id), _lst.Jcd_itmcd, PickSerialsDet.Tus_ser_1, _lst.Jcd_ser_id);
                                    //Insert scv_warr_replace
                                    _newWarrRepDet.Swr_act = 1;
                                    _newWarrRepDet.Swr_cre_by = _confHdr[0].Jch_cre_by;
                                    _newWarrRepDet.Swr_dt = _confHdr[0].Jch_dt;
                                    _newWarrRepDet.Swr_job_line = _jItm.Jbd_jobline;
                                    _newWarrRepDet.Swr_jobno = _jItm.Jbd_jobno;
                                    _newWarrRepDet.Swr_line = _warrLine + 1;
                                    _newWarrRepDet.Swr_n_itm_cd = _lst.Jcd_itmcd;
                                    _newWarrRepDet.Swr_n_itm_ser = PickSerialsDet.Tus_ser_1;
                                    _newWarrRepDet.Swr_n_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_o_itm_cd = _jItm.Jbd_itm_cd;
                                    _newWarrRepDet.Swr_o_itm_ser = _jItm.Jbd_ser1;
                                    _newWarrRepDet.Swr_o_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_ref = _lst.Jcd_no;
                                    _newWarrRepDet.Swr_tp = "M";
                                    _newWarrRepDet.Swr_rep_val = 0;
                                    _warrLine = _warrLine + 1;
                                    _custServiceDAL.Save_Warr_Replacement(_newWarrRepDet);
                                }
                            }

                        }
                        else if (_odata.Rows[0]["PROCESS_PARTH"].ToString() == "C")//if (_chkItm.Mi_cate_1 == "PHACC" && _chkItm.Mi_cate_2 == "MOACC" && _chkItm.Mi_cate_3 == "MPCB")
                        {
                            List<Service_job_Det> _jobItms = new List<Service_job_Det>();
                            _jobItms = _custServiceDAL.GetJobDetails(_lst.Jcd_jobno, _lst.Jcd_joblineno, _confHdr[0].Jch_com);

                            ReptPickSerials PickSerialsDet = _inventoryDAL.Get_all_details_on_serialID(_confHdr[0].Jch_com, _confHdr[0].Jch_loc, null, _lst.Jcd_itmcd, _lst.Jcd_ser_id);
                            //add by akila 2017/07/05
                            if (string.IsNullOrEmpty(PickSerialsDet.Tus_ser_1) || (string.IsNullOrWhiteSpace(PickSerialsDet.Tus_ser_1)))
                            {
                                throw new Exception(string.Format("Job# {0} cannot confirm. {1} Item code {2} has setuped as non serial item", _lst.Jcd_jobno, Environment.NewLine, _lst.Jcd_itmcd));
                            }

                            if (_jobItms.Count > 0)
                            {
                                foreach (Service_job_Det _jItm in _jobItms)
                                {
                                    _custServiceDAL.Update_Warranty_mpcb(_confHdr[0].Jch_com, _jItm.Jbd_itm_cd, _jItm.Jbd_ser1, _jItm.Jbd_warr, Convert.ToInt32(_jItm.Jbd_ser_id), _lst.Jcd_itmcd, PickSerialsDet.Tus_ser_1, _lst.Jcd_ser_id);
                                    _newWarrRepDet.Swr_act = 1;
                                    _newWarrRepDet.Swr_cre_by = _confHdr[0].Jch_cre_by;
                                    _newWarrRepDet.Swr_dt = _confHdr[0].Jch_dt;
                                    _newWarrRepDet.Swr_job_line = _jItm.Jbd_jobline;
                                    _newWarrRepDet.Swr_jobno = _jItm.Jbd_jobno;
                                    _newWarrRepDet.Swr_line = _warrLine + 1;
                                    _newWarrRepDet.Swr_n_itm_cd = _lst.Jcd_itmcd;
                                    _newWarrRepDet.Swr_n_itm_ser = PickSerialsDet.Tus_ser_1;
                                    _newWarrRepDet.Swr_n_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_o_itm_cd = _jItm.Jbd_itm_cd;
                                    _newWarrRepDet.Swr_o_itm_ser = _jItm.Jbd_ser1;
                                    _newWarrRepDet.Swr_o_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_ref = _lst.Jcd_no;
                                    _newWarrRepDet.Swr_tp = "M";
                                    _newWarrRepDet.Swr_rep_val = 0;
                                    _warrLine = _warrLine + 1;
                                    _custServiceDAL.Save_Warr_Replacement(_newWarrRepDet);
                                }

                            }
                        }
                        else if (_odata.Rows[0]["PROCESS_PARTH"].ToString() == "C")//if (_chkItm.Mi_cate_1 == "APIPMU" && _chkItm.Mi_cate_2 == "APIMU" && _chkItm.Mi_cate_3 == "MUN") //Updated by akila 2017/06/23
                        {
                            List<Service_job_Det> _jobItms = new List<Service_job_Det>();
                            _jobItms = _custServiceDAL.GetJobDetails(_lst.Jcd_jobno, _lst.Jcd_joblineno, _confHdr[0].Jch_com);

                            ReptPickSerials PickSerialsDet = _inventoryDAL.Get_all_details_on_serialID(_confHdr[0].Jch_com, _confHdr[0].Jch_loc, null, _lst.Jcd_itmcd, _lst.Jcd_ser_id);
                            //add by akila 2017/07/05
                            if (string.IsNullOrEmpty(PickSerialsDet.Tus_ser_1) || (string.IsNullOrWhiteSpace(PickSerialsDet.Tus_ser_1)))
                            {
                                throw new Exception(string.Format("Job# {0} cannot confirm. {1} Item code {2} has setuped as non serial item", _lst.Jcd_jobno, Environment.NewLine, _lst.Jcd_itmcd));
                            }

                            if (_jobItms.Count > 0)
                            {
                                foreach (Service_job_Det _jItm in _jobItms)
                                {
                                    _custServiceDAL.Update_Warranty_mpcb(_confHdr[0].Jch_com, _jItm.Jbd_itm_cd, _jItm.Jbd_ser1, _jItm.Jbd_warr, Convert.ToInt32(_jItm.Jbd_ser_id), _lst.Jcd_itmcd, PickSerialsDet.Tus_ser_1, _lst.Jcd_ser_id);
                                    _newWarrRepDet.Swr_act = 1;
                                    _newWarrRepDet.Swr_cre_by = _confHdr[0].Jch_cre_by;
                                    _newWarrRepDet.Swr_dt = _confHdr[0].Jch_dt;
                                    _newWarrRepDet.Swr_job_line = _jItm.Jbd_jobline;
                                    _newWarrRepDet.Swr_jobno = _jItm.Jbd_jobno;
                                    _newWarrRepDet.Swr_line = _warrLine + 1;
                                    _newWarrRepDet.Swr_n_itm_cd = _lst.Jcd_itmcd;
                                    _newWarrRepDet.Swr_n_itm_ser = PickSerialsDet.Tus_ser_1;
                                    _newWarrRepDet.Swr_n_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_o_itm_cd = _jItm.Jbd_itm_cd;
                                    _newWarrRepDet.Swr_o_itm_ser = _jItm.Jbd_ser1;
                                    _newWarrRepDet.Swr_o_warr = _jItm.Jbd_warr;
                                    _newWarrRepDet.Swr_ref = _lst.Jcd_no;
                                    _newWarrRepDet.Swr_tp = "M";
                                    _newWarrRepDet.Swr_rep_val = 0;
                                    _warrLine = _warrLine + 1;
                                    _custServiceDAL.Save_Warr_Replacement(_newWarrRepDet);
                                }

                            }
                        }
                    }
                }


                Boolean _aodneedrcc = false;

                if (_isInv == true)
                {
                    foreach (Service_Confirm_detail _itm in _confDet)
                    {
                        List<Service_job_Det> oJobitms = new List<Service_job_Det>();
                        oJobitms = _custServiceDAL.GetJobDetails(_itm.Jcd_jobno, _itm.Jcd_joblineno, _invoiceHeader.Sah_com);

                        Service_job_Det JobDetailLine;
                        if (oJobitms.Count > 0)
                        {
                            JobDetailLine = oJobitms[0];
                        }
                        else
                        {
                            JobDetailLine = new Service_job_Det();
                        }

                        Service_Chanal_parameter oChnnalPara = _generalDAL.GetChannelParamers(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                        if (oChnnalPara.SP_ISNEEDGATEPASS == 0)
                        {
                            //continue;
                        }
                        else
                        {
                            //check is job F or W
                            Service_Category ocate = _custServiceDAL.GET_SCV_CATE_BY_JOB(_itm.Jcd_jobno, _invoiceHeader.Sah_com);
                            if (ocate != null && ocate.Sc_direct.ToUpper() == "F")
                            {
                                //continue;
                            }
                            else
                            {
                                if (JobDetailLine.Jbd_isgatepass == 1)
                                {
                                    //continue;
                                }
                                else
                                {
                                    continue;
                                }
                            }
                        }

                        MasterItem itemDetails = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Jcd_itmcd);
                        DataTable _chk = _salesDAL.GetItemTp(itemDetails.Mi_itm_tp);
                        if (_chk != null && _chk.Rows.Count > 0)
                        {
                            _isInvMaintain = _chk.Rows[0].Field<Int16>("mstp_is_inv");
                        }
                        else
                        {
                            continue;
                        }

                        if (_isInvMaintain == 1)
                        {
                            if (itemDetails.Mi_is_ser1 == 1)
                            {
                                ReptPickSerials PickSerials = _inventoryDAL.Get_all_details_on_serialID(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc, null, itemDetails.Mi_cd, _itm.Jcd_ser_id);
                                PickSerials.Tus_job_no = _itm.Jcd_jobno;
                                PickSerials.Tus_job_line = _itm.Jcd_joblineno;
                                PickSerials.Tus_base_itm_line = _itm.Jcd_itmline;
                                _pickSerial.Add(PickSerials);
                            }
                            else
                            {
                                ReptPickSerials _reptPickSerial_ = new ReptPickSerials();
                                _reptPickSerial_.Tus_com = _invoiceHeader.Sah_com;
                                _reptPickSerial_.Tus_base_doc_no = _itm.Jcd_mov_doc;
                                _reptPickSerial_.Tus_base_itm_line = _itm.Jcd_itmline;
                                _reptPickSerial_.Tus_bin = _inventoryDAL.GetDefaultBinCode(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                                _reptPickSerial_.Tus_cre_by = _invoiceHeader.Sah_cre_by;
                                _reptPickSerial_.Tus_cre_dt = DateTime.Now;
                                _reptPickSerial_.Tus_cross_batchline = 0;
                                _reptPickSerial_.Tus_cross_itemline = 0;
                                _reptPickSerial_.Tus_cross_seqno = 0;
                                _reptPickSerial_.Tus_cross_serline = 0;
                                _reptPickSerial_.Tus_doc_dt = Convert.ToDateTime(_invoiceHeader.Sah_dt);
                                _reptPickSerial_.Tus_doc_no = string.Empty;
                                _reptPickSerial_.Tus_exist_grncom = string.Empty;
                                _reptPickSerial_.Tus_isapp = 1;
                                _reptPickSerial_.Tus_iscovernote = 1;
                                _reptPickSerial_.Tus_itm_brand = itemDetails.Mi_brand;
                                _reptPickSerial_.Tus_itm_cd = itemDetails.Mi_cd;
                                _reptPickSerial_.Tus_itm_desc = itemDetails.Mi_longdesc;
                                _reptPickSerial_.Tus_itm_line = 0;
                                _reptPickSerial_.Tus_itm_model = itemDetails.Mi_model;
                                _reptPickSerial_.Tus_itm_stus = _itm.Jcd_itmstus;
                                _reptPickSerial_.Tus_loc = _inventoryHeader.Ith_loc;
                                _reptPickSerial_.Tus_new_status = string.Empty;
                                _reptPickSerial_.Tus_qty = _itm.Jcd_qty;
                                _reptPickSerial_.Tus_ser_1 = "N/A";
                                _reptPickSerial_.Tus_ser_2 = "N/A";
                                _reptPickSerial_.Tus_ser_id = 0;
                                _reptPickSerial_.Tus_ser_line = 0;
                                _reptPickSerial_.Tus_session_id = _invoiceHeader.Sah_session_id;
                                _reptPickSerial_.Tus_unit_cost = 0;
                                _reptPickSerial_.Tus_unit_price = 0;
                                _reptPickSerial_.Tus_usrseq_no = -100;
                                _reptPickSerial_.Tus_warr_no = "N/A";
                                _reptPickSerial_.Tus_warr_period = 0;
                                _reptPickSerial_.Tus_new_remarks = string.Empty;
                                _reptPickSerial_.Tus_job_no = _itm.Jcd_jobno;
                                _reptPickSerial_.Tus_job_line = _itm.Jcd_joblineno;
                                _pickSerial.Add(_reptPickSerial_);
                            }
                        }

                        //gatepass not raising center and aod need to generate....
                        if (_aodneedrcc == false)
                        {
                            _aodneedrcc = true;
                        }
                    }

                    if (_confDet.Count <= 0)
                    {
                        foreach (Service_job_Det _detjob in _processJobList)
                        {
                            List<Service_job_Det> oJobitms = new List<Service_job_Det>();
                            oJobitms = _custServiceDAL.GetJobDetails(_detjob.Jbd_jobno, _detjob.Jbd_jobline, _invoiceHeader.Sah_com);

                            Service_job_Det JobDetailLine;
                            if (oJobitms.Count > 0)
                            {
                                JobDetailLine = oJobitms[0];
                            }
                            else
                            {
                                JobDetailLine = new Service_job_Det();
                            }

                            Service_Chanal_parameter oChnnalPara = _generalDAL.GetChannelParamers(_invoiceHeader.Sah_com, _inventoryHeader.Ith_loc);
                            if (oChnnalPara.SP_ISNEEDGATEPASS == 0)
                            {
                                //continue;
                            }
                            else
                            {
                                //check is job F or W
                                Service_Category ocate = _custServiceDAL.GET_SCV_CATE_BY_JOB(_detjob.Jbd_jobno, _invoiceHeader.Sah_com);
                                if (ocate != null && ocate.Sc_direct.ToUpper() == "F")
                                {
                                    //continue;
                                }
                                else
                                {
                                    if (JobDetailLine.Jbd_isgatepass == 1)
                                    {
                                        //continue;
                                    }
                                    else
                                    {
                                        continue;
                                    }
                                }
                            }
                            //gatepass not raising center and aod need to generate....
                            if (_aodneedrcc == false)
                            {
                                _aodneedrcc = true;
                            }
                        }

                    }


                    Int32 InvoiceSeqNo = _inventoryDAL.GetSerialID();
                    Int32 RecieptSeqNo = !string.IsNullOrEmpty(_recieptHeader.Sar_receipt_type) ? _inventoryDAL.GetSerialID() : -1;

                    _invoiceAuto.Aut_year = null;
                    MasterAutoNumber InvoiceAuto = _inventoryDAL.GetAutoNumber(_invoiceAuto.Aut_moduleid, _invoiceAuto.Aut_direction, _invoiceAuto.Aut_start_char, _invoiceAuto.Aut_cate_tp, _invoiceAuto.Aut_cate_cd, _invoiceAuto.Aut_modify_dt, _invoiceAuto.Aut_year);
                    _invNo = _invoiceAuto.Aut_start_char + InvoiceAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _invoiceAuto.Aut_year = null;
                    _invoiceAuto.Aut_modify_dt = null;
                    _salesDAL.UpdateInvoiceAutoNumber(_invoiceAuto);

                    _invoiceHeader.Sah_inv_no = _invNo;
                    _invoiceHeader.Sah_seq_no = InvoiceSeqNo;

                    decimal _totalValue = _invoiceItem.Sum(x => x.Sad_tot_amt);
                    decimal _totalReceiptAmt = 0;
                    if (_recieptItem != null) if (_recieptItem.Count > 0) _totalReceiptAmt = _recieptItem.Sum(x => x.Sard_settle_amt);

                    _invoiceHeader.Sah_anal_7 = _totalValue;// -_totalReceiptAmt; //Total Invoice Amount - Total Receipt AmountBY DARSHANA 3/12/2012
                    _invoiceHeader.Sah_anal_8 = _totalReceiptAmt;//Receipt Amount


                    if (_invoiceHeader.Sah_is_svat && _invoiceHeader.Sah_inv_tp == "CRED")
                    {
                        decimal vatTotal = _invoiceItem.Sum(X => X.Sad_itm_tax_amt);
                        _invoiceHeader.Sah_anal_8 = _invoiceHeader.Sah_anal_8 + vatTotal;
                    }

                    _salesDAL.SaveSalesHeader(_invoiceHeader);


                    #region Invoice Item Detail

                    //Darshana add check whether pc is special tax applicable pc
                    MasterProfitCenter _mstPc = new MasterProfitCenter();
                    _mstPc = _salesDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);

                    //add by akila 2017/06/28
                    Boolean _isStrucBaseTax = false;
                    MasterCompany _masterComp = null;
                    _masterComp = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com);
                    if (_masterComp.MC_TAX_CALC_MTD == "1") _isStrucBaseTax = true;

                    foreach (InvoiceItem _itm in _invoiceItem)
                    {
                        MasterItem _item = _inventoryDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                        _invoiceLine = _invoiceLine + 1;

                        _itm.Sad_seq_no = InvoiceSeqNo;
                        _itm.Sad_inv_no = _invoiceHeader.Sah_inv_no;
                        _itm.Sad_unit_amt = _itm.Sad_unit_rt * _itm.Sad_qty;
                        _itm.Sad_itm_tp = _item.Mi_itm_tp;
                        _itm.Sad_uom = _item.Mi_itm_uom;
                        _itm.Sad_trd_svc_chrg = Math.Round((_itm.Sad_tot_amt - _itm.Sad_itm_tax_amt) / _itm.Sad_qty, 2);
                        if (_invoiceHeader.Sah_tax_exempted)
                        {
                            _itm.Sad_tot_amt = _itm.Sad_tot_amt - _itm.Sad_itm_tax_amt;
                            _itm.Sad_itm_tax_amt = 0;
                        }
                        _itm.Sad_conf_no = _confNo;

                        _salesDAL.SaveSalesItem(_itm);
                        _salesDAL.UpdatePrice(_itm.Sad_itm_cd, _itm.Sad_pbook, _itm.Sad_pb_lvl, _invoiceHeader.Sah_cus_cd, _itm.Sad_promo_cd, _itm.Sad_seq, _itm.Sad_itm_seq);

                        if (_mstPc.Mpc_issp_tax == true)
                        {
                            List<MasterPCTax> _masterPCTax = new List<MasterPCTax>();
                            _masterPCTax = _salesDAL.GetPcTax(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, 1, _invoiceHeader.Sah_dt.Date);

                            decimal newTaxValue = 0;

                            var _pcTaxNBT = from _pcTaxs in _masterPCTax
                                            where _pcTaxs.Mpt_taxtp == "NBT"
                                            select _pcTaxs;

                            foreach (MasterPCTax _one in _pcTaxNBT)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;

                                //updated by akila 2017/06/29
                                decimal _tmpTaxAmount = 0;
                                if (_itm.Sad_disc_rt > 0)
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - (_itm.Sad_unit_amt / 100 * _itm.Sad_disc_rt)) * _one.Mpt_taxrt / 100;
                                else
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100;

                                _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);
                                //_tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100; // ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;

                                if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                _tax.Satx_itm_tax_rt = _one.Mpt_taxrt;
                                _tax.Satx_itm_tax_tp = _one.Mpt_taxtp;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = _itm.Sad_job_no;
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _salesDAL.SaveSalesItemTax(_tax);
                                newTaxValue += _tax.Satx_itm_tax_amt;
                            }

                            var _pcTaxVAT = from _pcTaxs in _masterPCTax
                                            where _pcTaxs.Mpt_taxtp == "VAT"
                                            select _pcTaxs;

                            foreach (MasterPCTax _one in _pcTaxVAT)
                            {
                                InvoiceItemTax _tax = new InvoiceItemTax();
                                _tax.Satx_inv_no = _itm.Sad_inv_no;
                                _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                _tax.Satx_itm_line = _itm.Sad_itm_line;

                                //updated by akila 2017/06/29
                                decimal _tmpTaxAmount = 0;
                                if (_itm.Sad_disc_rt > 0)
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - (_itm.Sad_unit_amt / 100 * _itm.Sad_disc_rt)) * _one.Mpt_taxrt / 100;
                                else
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt + newTaxValue - _itm.Sad_disc_amt) * _one.Mpt_taxrt / 100;

                                _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);

                                if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                {
                                    _tax.Satx_itm_tax_amt = 0;
                                }
                                _tax.Satx_itm_tax_rt = _one.Mpt_taxrt;
                                _tax.Satx_itm_tax_tp = _one.Mpt_taxtp;
                                _tax.Satx_job_line = 0;
                                _tax.Satx_job_no = _itm.Sad_job_no;
                                _tax.Satx_seq_no = InvoiceSeqNo;
                                _salesDAL.SaveSalesItemTax(_tax);
                            }
                        }
                        else
                        {
                            if (_invoiceHeader.Sah_dt == DateTime.Now.Date)
                            {
                                List<MasterItemTax> _itmTax = new List<MasterItemTax>();
                                //add by akila 2017/06/29
                                if (_isStrucBaseTax == true)
                                {
                                    MasterItem _mstItem = _salesDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                    _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty, _mstItem.Mi_anal1);
                                }
                                else
                                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "NBT", string.Empty);

                                decimal newTaxValue = 0;

                                foreach (MasterItemTax _one in _itmTax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;

                                    //updated by akila 2017/06/28
                                    decimal _tmpTaxAmount = 0;
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : (_itm.Sad_unit_amt - ((_itm.Sad_unit_amt * _itm.Sad_disc_rt) / 100)) * _one.Mict_tax_rate / 100;
                                    _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);

                                    if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                    {
                                        _tax.Satx_itm_tax_amt = 0;
                                    }
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = _itm.Sad_job_no;
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _salesDAL.SaveSalesItemTax(_tax);
                                    newTaxValue += _tax.Satx_itm_tax_amt;
                                }

                                _itmTax = new List<MasterItemTax>();

                                //add by akila 2017/06/28
                                if (_isStrucBaseTax == true)
                                {
                                    MasterItem _mstItem = _salesDAL.GetItem(_invoiceHeader.Sah_com, _itm.Sad_itm_cd);
                                    _itmTax = _salesDAL.GetItemTax_strucbase(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty, _mstItem.Mi_anal1);
                                }
                                else
                                    _itmTax = _salesDAL.GetItemTax(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, "VAT", string.Empty);


                                foreach (MasterItemTax _one in _itmTax)
                                {
                                    InvoiceItemTax _tax = new InvoiceItemTax();
                                    _tax.Satx_inv_no = _itm.Sad_inv_no;
                                    _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                    _tax.Satx_itm_line = _itm.Sad_itm_line;

                                    //updated by akila. 2017/06/28
                                    decimal _tmpTaxAmount = 0;
                                    _tmpTaxAmount = _invoiceHeader.Sah_tax_exempted ? 0 : ((_itm.Sad_unit_amt - ((_itm.Sad_unit_amt * _itm.Sad_disc_rt) / 100)) + newTaxValue) * _one.Mict_tax_rate / 100;
                                    _tax.Satx_itm_tax_amt = RoundSalesValue(_tmpTaxAmount, _invoiceHeader.Sah_com);

                                    if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                    {
                                        _tax.Satx_itm_tax_amt = 0;
                                    }
                                    _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                    _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                    _tax.Satx_job_line = 0;
                                    _tax.Satx_job_no = _itm.Sad_job_no;
                                    //_tax.Satx_job_no = "";
                                    _tax.Satx_seq_no = InvoiceSeqNo;
                                    _salesDAL.SaveSalesItemTax(_tax);
                                }
                            }
                            else
                            {
                                List<MasterItemTax> _itmTaxEff = new List<MasterItemTax>();
                                _itmTaxEff = _salesDAL.GetItemTaxEffDt(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                if (_itmTaxEff.Count > 0)
                                {
                                    foreach (MasterItemTax _one in _itmTaxEff)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                        {
                                            _tax.Satx_itm_tax_amt = 0;
                                        }
                                        _tax.Satx_itm_tax_rt = _one.Mict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Mict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = _itm.Sad_job_no;
                                        //_tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _salesDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                                else
                                {

                                    List<LogMasterItemTax> _itmTax = new List<LogMasterItemTax>();
                                    _itmTax = _salesDAL.GetItemTaxLog(_invoiceHeader.Sah_com, _itm.Sad_itm_cd, _itm.Sad_itm_stus, string.Empty, string.Empty, _invoiceHeader.Sah_dt);

                                    foreach (LogMasterItemTax _one in _itmTax)
                                    {
                                        InvoiceItemTax _tax = new InvoiceItemTax();
                                        _tax.Satx_inv_no = _itm.Sad_inv_no;
                                        _tax.Satx_itm_cd = _itm.Sad_itm_cd;
                                        _tax.Satx_itm_line = _itm.Sad_itm_line;
                                        _tax.Satx_itm_tax_amt = _invoiceHeader.Sah_tax_exempted ? 0 : _itm.Sad_itm_tax_amt;// ((_itm.Sad_unit_rt - _itm.Sad_disc_amt / _itm.Sad_qty) * _one.Mict_tax_rate / 100) * _itm.Sad_qty;
                                        if (_invoiceHeader.Sah_inv_tp == "DEBT")
                                        {
                                            _tax.Satx_itm_tax_amt = 0;
                                        }
                                        _tax.Satx_itm_tax_rt = _one.Lict_tax_rate;
                                        _tax.Satx_itm_tax_tp = _one.Lict_tax_cd;
                                        _tax.Satx_job_line = 0;
                                        _tax.Satx_job_no = _itm.Sad_job_no;
                                        //_tax.Satx_job_no = "";
                                        _tax.Satx_seq_no = InvoiceSeqNo;
                                        _salesDAL.SaveSalesItemTax(_tax);
                                    }
                                }
                            }
                        }
                    }

                    #endregion

                    #region Payment
                    string _shortcompany = _generalDAL.GetCompByCode(_invoiceHeader.Sah_com).Mc_anal5;
                    if (_recieptHeader != null && _recieptItem != null && _recieptItem.Count > 0)
                    {
                        _recieptAuto.Aut_year = null;
                        MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recieptAuto.Aut_moduleid, _recieptAuto.Aut_direction, _recieptAuto.Aut_start_char, _recieptAuto.Aut_cate_tp, _recieptAuto.Aut_cate_cd, _recieptAuto.Aut_modify_dt, _recieptAuto.Aut_year);
                        _recNo = _recieptAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                        _recieptAuto.Aut_year = null;
                        _recieptAuto.Aut_modify_dt = null;

                        _salesDAL.UpdateInvoiceAutoNumber(_recieptAuto);

                        _recieptHeader.Sar_seq_no = RecieptSeqNo;
                        _recieptHeader.Sar_receipt_no = _recNo;
                        _recieptHeader.Sar_tot_settle_amt = _totalReceiptAmt;
                        _salesDAL.SaveReceiptHeader(_recieptHeader);

                        Int32 _line = 0;

                        if (_recieptItem != null)
                            if (_recieptItem.Count > 0)
                            {
                                foreach (RecieptItem _itm in _recieptItem)
                                {
                                    _itm.Sard_seq_no = RecieptSeqNo;
                                    _itm.Sard_inv_no = _invoiceHeader.Sah_inv_no;
                                    _itm.Sard_receipt_no = _recNo;
                                    _line = _line + 1;
                                    _itm.Sard_line_no = _line;
                                    _salesDAL.SaveReceiptItem(_itm);

                                    if (_itm.Sard_pay_tp.Trim() == "ADVAN")
                                    {
                                        _inventoryRepDAL.UpdateAdvanceReceiptNofromInvoice(_itm.Sard_ref_no, Convert.ToString(InvoiceSeqNo), string.Empty);
                                        RecieptHeader _rHdr = new RecieptHeader();
                                        _rHdr.Sar_receipt_no = _itm.Sard_ref_no;
                                        _rHdr.Sar_used_amt = _itm.Sard_settle_amt;
                                        _rHdr.Sar_act = true;
                                        _rHdr.Sar_direct = true;
                                        _rHdr.Sar_mod_by = _recieptHeader.Sar_mod_by;
                                        _salesDAL.SaveReceiptHeader(_rHdr);
                                    }
                                    if (_itm.Sard_pay_tp.Trim() == "CRNOTE")
                                    {
                                        _salesDAL.UpdateCreditNoteBalance(_recieptHeader.Sar_com_cd, _recieptHeader.Sar_profit_center_cd, _itm.Sard_ref_no, _itm.Sard_settle_amt);
                                        MasterBusinessEntity _entity = _salesDAL.GetBusinessCompanyDetail(_invoiceHeader.Sah_com, _invoiceHeader.Sah_cus_cd, null, null, "C");
                                        MasterProfitCenter _profit = _salesDAL.GetProfitCenter(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc);
                                        if (_entity != null)
                                            if (!string.IsNullOrEmpty(_entity.Mbe_com) && !string.IsNullOrEmpty(_entity.Mbe_mob))
                                            {
                                                string _realPhNo = GetRealPhoneNumber(_entity.Mbe_mob);
                                                OutSMS _out = new OutSMS();
                                                _out.Createtime = DateTime.Now;
                                                _out.Msg = "Your customer code : " + _entity.Mbe_cd + " auth. payment " + _itm.Sard_settle_amt + " deduct from your cred. bal. at " + _profit.Mpc_desc + ". Enq SMS/Call " + _profit.Mpc_tel + ". " + _shortcompany + ",(" + DateTime.Now.Day + "," + DateTime.Now.Month + ")";
                                                _out.Msgstatus = 0;
                                                _out.Msgtype = "S";
                                                _out.Receivedtime = DateTime.Now;
                                                _out.Receiver = _entity.Mbe_cd;
                                                _out.Senderphno = _entity.Mbe_mob;
                                                _out.Refdocno = _itm.Sard_ref_no;
                                                _out.Sender = _invoiceHeader.Sah_cre_by;
                                                _out.Createtime = DateTime.Now;
                                                _inventoryDAL.SaveSMSOut(_out);
                                            }
                                    }

                                    if (_itm.Sard_pay_tp.Trim() == "LORE")
                                    {
                                        _salesDAL.RedeemLoyaltyPoint(_itm.Sard_ref_no, _invoiceHeader.Sah_cus_cd, _itm.Sard_anal_4);
                                    }

                                    if (_itm.Sard_pay_tp.Trim() == "GVO")
                                    {
                                        _fmsInventoryDal.UpdateRedeemVoucher(_invoiceHeader.Sah_com, _invoiceHeader.Sah_pc, _itm.Sard_sim_ser, _itm.Sard_ref_no, _itm.Sard_cc_tp, _itm.Sard_anal_2, _invoiceHeader.Sah_cre_by, _itm.Sard_settle_amt);
                                    }

                                }
                            }
                    }
                    #endregion

                    InventoryHeader _invHdr = null;
                    DataTable _dataTable = null;
                    //InventoryBLL _bll = new InventoryBLL();
                    if (_pickSerial.Count > 0)
                    {
                        InventorySeqNo = _inventoryDAL.GetSerialID();
                        _pickSerial.ForEach(x => x.Tus_base_doc_no = _invoiceHeader.Sah_inv_no);
                        _pickSerial.ForEach(x => x.Tus_usrseq_no = InventorySeqNo);
                        _inventoryHeader.Ith_pc = _invoiceHeader.Sah_pc;
                        _inventoryHeader.Ith_oth_docno = _invoiceHeader.Sah_inv_no;
                        _inventoryHeader.Ith_entry_no = _invoiceHeader.Sah_inv_no;
                        _inventoryHeader.Ith_seq_no = InventorySeqNo;

                        _InventoryBLL.DeliveryOrderWithoutAutoNo(_inventoryHeader, _pickSerial, _pickSubSerial, _inventoryAuto, _inventoryRepDAL, _inventoryDAL, true, out _invHdr, out _dataTable);

                        // string _doc;
                        _inventoryDAL.UpdateInventoryAutoNumber(_invHdr, _inventoryAuto, "-", out _DONo);
                        MasterAutoNumber _AutoNo = new MasterAutoNumber();
                        int _e = 0;
                        if (_dataTable.Rows.Count > 0)
                        {
                            for (int i = 0; i < _dataTable.Rows.Count; i++)
                            {
                                if (_dataTable.Rows[i]["DocType"].ToString() == "ADJ")
                                {
                                    _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                    _AutoNo.Aut_moduleid = "ADJ";
                                    _AutoNo.Aut_direction = null;
                                    _AutoNo.Aut_start_char = "ADJ";
                                    _AutoNo.Aut_cate_tp = "LOC";
                                    _AutoNo.Aut_year = null;

                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                    string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                }
                                else if (_dataTable.Rows[i]["DocType"].ToString() == "GRN")
                                {
                                    _AutoNo.Aut_cate_cd = _invHdr.Ith_loc;
                                    _AutoNo.Aut_moduleid = "GRN";
                                    _AutoNo.Aut_direction = null;
                                    _AutoNo.Aut_start_char = "GRN";
                                    _AutoNo.Aut_cate_tp = "LOC";
                                    _AutoNo.Aut_year = _invHdr.Ith_doc_date.Year;

                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                    string _documentNo = _invHdr.Ith_loc + "-" + _AutoNo.Aut_start_char + "-" + Convert.ToString(_invHdr.Ith_doc_date.Year).Remove(0, 2) + "-" + _autoNo.ToString("00000", CultureInfo.InvariantCulture);
                                    _e = _inventoryDAL.UpdateMovementDocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                }
                                else if (_dataTable.Rows[i]["DocType"].ToString() == "PO")
                                {
                                    _AutoNo.Aut_cate_cd = _invHdr.Ith_com;
                                    _AutoNo.Aut_cate_tp = "COM";
                                    _AutoNo.Aut_direction = null;
                                    _AutoNo.Aut_modify_dt = null;
                                    _AutoNo.Aut_moduleid = "PUR";
                                    _AutoNo.Aut_start_char = "PUR";
                                    _AutoNo.Aut_year = null;

                                    Int32 _autoNo = _inventoryDAL.GetAutoNumber(_AutoNo.Aut_moduleid, _AutoNo.Aut_direction, _AutoNo.Aut_start_char, _AutoNo.Aut_cate_tp, _AutoNo.Aut_cate_cd, _AutoNo.Aut_modify_dt, _AutoNo.Aut_year).Aut_number;
                                    string _documentNo = _AutoNo.Aut_cate_cd + "-" + _AutoNo.Aut_start_char + string.Format("{0:000000}", _autoNo);
                                    _inventoryDAL.UpdatePODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                    _e = _inventoryDAL.UpdateAutoNumber(_AutoNo);
                                    _inventoryDAL.UpdateGRNPODocNo(Convert.ToInt32(_dataTable.Rows[i]["SeqNo"].ToString()), _documentNo);
                                }
                            }
                        }

                        //update inv no
                        _inventoryDAL.UpdateOtherDocuments(_DONo, _invNo);
                        _inventoryDAL.UpdateBatchRefDoc(_DONo, _invNo);
                    }

                    Int32 effect = 0;
                    if (_aodneedrcc == true && _isstockUpdate == true && _aodHdr.Ith_loc != null)
                    {
                        _aodAuto.Aut_moduleid = "AOD";
                        _aodAuto.Aut_start_char = "AOD";
                        _aodAuto.Aut_direction = 0;


                        _InventoryBLL.SaveOutwardScanSerial(_aodHdr, _reptPickSerialsAod, null, _inventoryDAL, true);
                        string documentNo = "";
                        effect = _InventoryBLL.UpdateInventoryAutoNumber(_aodHdr, _aodAuto, "-", out documentNo);
                    }
                    if (_isRcc == true)
                    {
                        _inventoryDAL.Update_RCC_Repair(_rcc);
                    }
                }

                //inr_sermstsub
                List<MST_ITM_CAT_COMP> _itmCompList = new List<MST_ITM_CAT_COMP>();
                Int32 _serLine = 0;
                foreach (Service_job_Det _tmpJobDet in _processJobList)
                {
                    MasterItem _mstItm = _inventoryDAL.GetItem(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_itm_cd);
                    _itmCompList = _custServiceDAL.getMasterItmCatComponant(_mstItm.Mi_cate_1, _mstItm.Mi_cate_2, _mstItm.Mi_cate_3);

                    if (_itmCompList.Count <= 0)
                    {
                        _itmCompList = _custServiceDAL.getMasterItmCatComponant(_mstItm.Mi_cate_1, _mstItm.Mi_cate_2, null);
                    }

                    if (_itmCompList.Count > 0)
                    {
                        foreach (MST_ITM_CAT_COMP _tmpItmcomp in _itmCompList)
                        {
                            foreach (Service_Confirm_detail _tmpConDet in _confDet)
                            {
                                if (_tmpItmcomp.Mcc_itm_cd == _tmpConDet.Jcd_itmcd)
                                {
                                    _custServiceDAL.Update_INR_SERMSTSUB(Convert.ToInt32(_tmpJobDet.Jbd_ser_id), _tmpConDet.Jcd_itmcd, 0);
                                    InventoryWarrantySubDetail _invSerSubMst = new InventoryWarrantySubDetail();
                                    _invSerSubMst.Irsms_act = true;
                                    _invSerSubMst.Irsms_itm_cd = _tmpConDet.Jcd_itmcd;
                                    _invSerSubMst.Irsms_itm_stus = _tmpConDet.Jcd_itmstus;
                                    _invSerSubMst.Irsms_mfc = "N/A";
                                    _invSerSubMst.Irsms_qty = _tmpConDet.Jcd_qty;
                                    _invSerSubMst.Irsms_ser_id = Convert.ToInt32(_tmpJobDet.Jbd_ser_id);
                                    if (_serLine == 0)
                                    {
                                        List<InventoryWarrantySubDetail> _getCurList = new List<InventoryWarrantySubDetail>();
                                        _getCurList = _custServiceDAL.getSerMstSubBySerID(_invSerSubMst.Irsms_ser_id);

                                        if (_getCurList != null)
                                        {
                                            _serLine = _getCurList.Count + 1;
                                        }
                                        else
                                        {
                                            _serLine = _serLine + 1;
                                        }
                                    }
                                    else
                                    {
                                        _serLine = _serLine + 1;
                                    }
                                    _invSerSubMst.Irsms_ser_line = _serLine;
                                    ReptPickSerials _serDet = _inventoryDAL.GetReservedByserialID(_tmpJobDet.Jbd_com, _tmpJobDet.Jbd_loc, null, _tmpConDet.Jcd_itmcd, _tmpConDet.Jcd_ser_id);
                                    _invSerSubMst.Irsms_sub_ser = _serDet.Tus_ser_1;
                                    _invSerSubMst.Irsms_tp = "C";
                                    _invSerSubMst.Irsms_warr_no = _tmpJobDet.Jbd_mainitmwarr;
                                    _invSerSubMst.Irsms_warr_period = _tmpJobDet.Jbd_warrperiod;
                                    _invSerSubMst.Irsms_warr_rem = _tmpJobDet.Jbd_warrrmk;
                                    _custServiceDAL.SAVE_INR_SERMSTSUB(_invSerSubMst);
                                }
                            }
                        }
                    }
                }

                //add by akila 2017/07/13
                #region Generate New Request
                if (_genarateNewRequest)
                {
                    if (_rccHdr != null)
                    {
                        Save_Req(_rccHdr, _rccDetails, new List<Service_Req_Def>(), new List<Service_Req_Det_Sub>(), _rccAuto, _subChannel,null,null,0, _rccAuto, out errorMsg, out _rccNo, 0, DateTime.Now.Date, DateTime.Now.Date);
                    }
                }

                #endregion


                _custServiceDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _salesDAL.TransactionCommit();
                _inventoryRepDAL.TransactionCommit();
                _fmsInventoryDal.TransactionCommit();
                _generalDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();
                _salesDAL.ConnectionClose();
                _inventoryRepDAL.ConnectionClose();
                _fmsInventoryDal.ConnectionClose();
                _generalDAL.ConnectionClose();

                errorMsg = _invNo;
                _effects = 1;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _inventoryRepDAL.TransactionRollback();
                _fmsInventoryDal.TransactionRollback();
                _generalDAL.TransactionRollback();
                errorMsg = ex.Message;
                _effects = -1;
            }
            return _effects;
        }

        //tharanga 2017/07/13
        public Int32 SendConfirmationMailPromoter(string _com, string _loc, string _doc, string subchannel, string _user, string _toemail, string _mobile)
        {//BaseCls.GlbUserComCode, BaseCls.GlbUserDefLoca, _doc, BaseCls.GlbDefSubChannel, BaseCls.GlbUserID
            Int32 _effects = 0;
            //  _err = string.Empty 
            try
            {
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                _salesDAL.BeginTransaction();

                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _generalDAL.BeginTransaction();


                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();


                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();

                DataTable mst_profit_center = new DataTable();
                DataTable dtlloc = new DataTable();
                DataTable MSTCOM = new DataTable();
                string _pcDes = string.Empty;
                string _pcMail = string.Empty;
                string _locDes = string.Empty;
                string _mgrMobno = string.Empty;
                string _PCMgr = string.Empty;
                string _comDes = string.Empty;

                mst_profit_center = _salesDAL.GetProfitCenterTable(_com, _loc);
                foreach (DataRow row in mst_profit_center.Rows)
                {
                    _pcDes = row["MPC_DESC"].ToString();
                    _pcMail = row["mpc_email"].ToString();
                    _PCMgr = row["mpc_man"].ToString();
                }


                MSTCOM = _custServiceDAL.sp_get_com_details(_com);
                foreach (DataRow row in MSTCOM.Rows)
                {
                    _comDes = row["MC_DESC"].ToString();

                }

                dtlloc = _salesDAL.GetLocationCode(_com, _loc);

                foreach (DataRow row in dtlloc.Rows)
                {
                    _locDes = row["ML_LOC_DESC"].ToString();
                }
                #region mail
                //if (!string.IsNullOrEmpty(_pcMail))
                //{
                //    SmtpClient smtpClient = new SmtpClient();
                //    MailMessage message = new MailMessage();

                //    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                //    MailAddress to = new MailAddress(_toemail);
                //    smtpClient.Host = _generalDAL.GetMailHost();
                //    smtpClient.Port = 25;

                //    message.From = fromAddress;

                //    message.ReplyTo = to;

                //    string _email = "";

                //    _email = "Dear Sir/ Madam, \n\n" + _email;
                //    _email += "\n Job # " + _doc + " related to the below mentioned RCC has been completed on " + DateTime.Now + " by the location  " + _loc + "-" + _locDes + " . \n\n";
                //    _email += "RCC #  :" + _doc + " \n\n\n";
                //    _email += "Remarks  :" + _doc + " \n\n\n";


                //    _email += _generalDAL.GetMailFooterMsg();

                //    message.To.Add(to);
                //    message.Subject = "RCC JOB Completion";
                //    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                //    //message.Bcc.Add(new MailAddress(""));
                //    message.IsBodyHtml = false;
                //    message.Body = _email;
                //    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                //    // Send SMTP mail
                //    smtpClient.Send(message);
                //}
                #endregion
                #region sms

                Service_Message oMessage = new Service_Message();

                //Service_JOB_HDR oJobHeader = _custServiceDAL.GetServiceJobHeader(_jobNo, _com);


                string emailBody = string.Empty;

                string _realPhNo = string.Empty;

                //  String SmsBody = "Dear Sir/ Madam, ";
                String SmsBody = "\n You have register as a sales promoter in " + _comDes + " Your promoter identification is : " + _doc + " . ";
                //  SmsBody += "RCC #  :" + _doc + "";

                //You have register as a sales promoter in  <Company Name>. Your promoter identification is : <promoter code 
                if (!string.IsNullOrEmpty(_mobile))
                {
                    if (_mobile.Length >= 9)
                    {

                        OutSMS _outmgr = new OutSMS();
                        if (_mobile.Length == 10)
                        {
                            _outmgr.Receiverphno = "+94" + _mobile.Substring(1, 9);
                            _outmgr.Senderphno = "+94" + _mobile.Substring(1, 9);
                            //_outmgr.Receiverphno = "+94" + _mgrMobno.Substring(1, 9);
                            //_outmgr.Senderphno = "+94" + _mgrMobno.Substring(1, 9);
                        }
                        if (_mobile.Length == 9)
                        {
                            _outmgr.Receiverphno = "+94" + _mobile;
                            _outmgr.Senderphno = "+94" + _mobile;
                            //_outmgr.Receiverphno = "+94" + _mgrMobno;
                            //_outmgr.Senderphno = "+94" + _mgrMobno;
                        }



                        _realPhNo = GetRealPhoneNumber(_mobile);

                        _outmgr.Createtime = DateTime.Now;
                        _outmgr.Msg = SmsBody;
                        _outmgr.Msgstatus = 0;
                        _outmgr.Msgtype = "S";
                        _outmgr.Receivedtime = DateTime.Now;
                        _outmgr.Receiver = _pcDes;
                        _outmgr.Senderphno = _mobile;
                        _outmgr.Refdocno = _doc;
                        _outmgr.Sender = _user;
                        _outmgr.Createtime = DateTime.Now;
                        _inventoryDAL.SaveSMSOut(_outmgr);
                    }
                }
                #endregion


                _generalDAL.TransactionCommit();
                _generalDAL.ConnectionClose();

                _salesDAL.TransactionCommit();
                _salesDAL.ConnectionClose();

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                _inventoryDAL.TransactionCommit();
                _inventoryDAL.ConnectionClose();

            }

            catch (Exception ex)
            {

                _generalDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();


                _effects = -1;

            }

            _effects = 1;
            return _effects;

        }

        //Akila 2017/07/14
        public DataTable GetAppovelPendingJobs(string _comCode, string _location, DateTime _fromDate, DateTime _toDate)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetAppovelPendingJobs(_comCode, _location, _fromDate, _toDate);
        }

        /// <summary>
        ///  get job stage from JOB,SERIAL,NIC OR MOB by Dulanga
        /// </summary>
        /// <param name="p_code"></param>
        /// <param name="p_type"></param>
        /// <returns></returns>
        public DataTable GetMobJobStage(string p_code, string p_type)
        {

            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.GetMobJobStage(p_code, p_type);
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// get service location town by Dist Dulanga
        /// </summary>
        /// <param name="p_code"></param>
        /// <returns></returns>
        public DataTable GetServiceTownByDist(string p_code)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.GetServiceTownByDist(p_code);
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// GetTecAllocateJob by dulanga
        /// </summary>
        /// <param name="p_com"></param>
        /// <param name="p_loc"></param>
        /// <param name="p_pc"></param>
        /// <param name="p_sdate"></param>
        /// <param name="p_edate"></param>
        /// <param name="p_sstage"></param>
        /// <param name="p_estage"></param>
        /// <param name="p_user"></param>
        /// <returns></returns>
        public DataTable GetTecAllocateJob(string p_com,string  p_loc,string  p_pc,DateTime p_sdate,DateTime p_edate,
            string p_sstage, string p_estage, string p_user)
        {

            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.GetTecAllocateJob(p_com,p_loc,p_pc,p_sdate,p_edate,
            p_sstage,p_estage,p_user);
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// get Job by Key Dulanga
        /// </summary>
        /// <param name="p_key"></param>
        /// <returns></returns>
        public DataTable GetJobByKey(string p_key)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.GetJobByKey(p_key);

            }
            catch (Exception ex)
            {
                throw ex;
            }


        }

        /// <summary>
        /// 2018-07-11
        /// </summary>
        /// <param name="p_key"></param>
        /// <param name="p_com"></param>
        /// <param name="p_pc"></param>
        /// <param name="p_loc"></param>
        /// <returns></returns>
        public DataTable GetJobByKeyNew(string p_key, string p_com, string p_pc, string p_loc)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.GetJobByKeyNew(p_key, p_com, p_pc, p_loc);

            }
            catch (Exception ex)
            {
                throw ex;
            }


        }







        /// <summary>
        /// get job serial by dulanga
        /// </summary>
        /// <param name="p_serial"></param>
        /// <param name="p_com"></param>
        /// <param name="p_pc"></param>
        /// <param name="p_loc"></param>
        /// <returns></returns>
        public DataTable GetJobBySerial(string p_serial, string p_com, string p_pc, string p_loc)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.GetJobBySerial(p_serial,p_com,p_pc,p_loc);

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }



        /// <summary>
        /// get comment type by dulanga
        /// </summary>
        /// <param name="com"></param>
        /// <param name="chnl"></param>
        /// <returns></returns>
        public DataTable getCommentType(string com, string chnl)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.getCommentType(com, chnl);

            }
            catch (Exception ex)
            {
                throw ex;
            }


        }

        /// <summary>
        /// get Defect type 2017-08-21
        /// </summary>
        /// <param name="com"></param>
        /// <param name="chnl"></param>
        /// <param name="cate"></param>
        /// <returns></returns>
        public DataTable getMobDefectType(string com, string chnl, string cate)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.getMobDefectType(com,chnl,cate);

            }
            catch (Exception ex)
            {
                throw ex;
            }


        }
        /// <summary>
        /// get MRN locations by DULANGA 2017/08/26
        /// </summary>
        /// <param name="com"></param>
        /// <param name="loc"></param>
        /// <returns></returns>
        public DataTable getMobMRNLocations(string com, string loc,string type)
        {

            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.getMobMRNLocations(com, loc,type);

            }
            catch (Exception ex)
            {
                throw ex;
            }


        }
        /// <summary>
        /// Dulanga warranty Detail Mobile
        /// </summary>
        /// <param name="_item"></param>
        /// <param name="_ser1"></param>
        /// <param name="_ser2"></param>
        /// <param name="_regno"></param>
        /// <param name="_warr"></param>
        /// <param name="_invoice"></param>
        /// <param name="_serid"></param>
        /// <returns></returns>
        public List<InventorySerialMaster> GetWarrantyMasterSCM2(string _item, string _ser1, string _ser2, string _regno, string _warr, string _invoice, int _serid)
        {

            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.GetWarrantyMasterSCM2(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);

            }
            catch (Exception ex)
            {
                throw ex;
            }


        }
        /// <summary>
        /// get serial details dulanga 
        /// </summary>
        /// <param name="serial"></param>
        /// <returns></returns>
        public DataTable getMobSerialDetail(string serial)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.getMobSerialDetail(serial);

            }
            catch (Exception ex)
            {
                throw ex;
            }


        }

        /// <summary>
        /// get Email setup
        /// </summary>
        /// <param name="com"></param>
        /// <param name="pc"></param>
        /// <param name="module"></param>
        /// <returns></returns>
        public DataTable getMobEmailSetup(string com, string pc, string module)
        {

            try
            {
                _custServiceDAL = new CustServiceDAL();
                return _custServiceDAL.getMobEmailSetup(com,pc,module);

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        public DataTable sp_get_scv_job_amount(string p_jobno, int p_jobline)//Tharanga 2017/07/26
        {

            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.sp_get_scv_job_amount(p_jobno,p_jobline);


        }



        //Tharanga 2017/07/27
        public DataTable JobDetails_ABE(DateTime _from, DateTime _to, string _com, string _loc, string in_Itemcode, string in_Brand, string in_Model, string in_Itemcat1,
                   string in_Itemcat2, string in_Itemcat3, string _technician, string _jobcat, string _itemtp, decimal _jobstatus, string _warrstatus, string _jobno, string _user, out string _err)
        {
            int in_ISlast;
            _err = string.Empty;
            string _filePath = string.Empty;
            in_ISlast = 1;

            DataTable _dtResults = new DataTable();
            _custServiceDAL = new CustServiceDAL();
            _salesDAL = new SalesDAL();
            DataTable GLOB_DataTable = new DataTable();

            //   DataTable tmp_user_pc = _salesDAL.GetTempUserPc(_com, _user);
            //DataTable tmp_user_pc = _salesDAL.GetTempUserLocations(_com, _user);
            _securityDAL = new SecurityDAL();
            //if (_securityDAL.Is_Report_DR("ProcessTracking") == true) _custServiceDAL.ConnectionOpen_DR();
            //if (tmp_user_pc.Rows.Count > 0)
            //{
            //    foreach (DataRow drow in tmp_user_pc.Rows)
            //    {
            //        _dtResults = _custServiceDAL.JobDetails_model_brand(_from, _to, _com, drow["tpl_pc"].ToString(), in_Itemcode, in_Brand, in_Model, in_Itemcat1,
            //                    in_Itemcat2, in_Itemcat3, _technician, _jobcat, _itemtp, _jobstatus, _warrstatus, _jobno, _user);
            //        GLOB_DataTable.Merge(_dtResults);
            //        in_ISlast = in_ISlast + 1;
            //    }
            //}


            _dtResults = _custServiceDAL.JobDetails_model_brand(_from, _to, _com, _loc, in_Itemcode, in_Brand, in_Model, in_Itemcat1,
                                in_Itemcat2, in_Itemcat3, _technician, _jobcat, _itemtp, _jobstatus, _warrstatus, _jobno, _user);
            GLOB_DataTable.Merge(_dtResults);
            in_ISlast = in_ISlast + 1;


            _err = "";


            return _dtResults;

        }

        /// <summary>
        /// UpdateJobStageAndJobLog by Dulanga 2016-8-18
        /// </summary>
        /// <param name="jobNo"></param>
        /// <param name="jobLine"></param>
        /// <param name="stage"></param>
        /// <param name="_user"></param>
        /// <param name="techStart"></param>
        /// <param name="techEnd"></param>
        /// <param name="techStartMAn"></param>
        /// <param name="techEndMan"></param>
        /// <param name="com"></param>
        /// <param name="loc"></param>
        /// <param name="sessionId"></param>
        /// <returns></returns>
        public Int32 UpdateJobStageAndJobLog(string jobNo,string jobLine,string stage, string _user,DateTime techStart,DateTime techEnd
            ,DateTime techStartMAn, DateTime techEndMan,string com,string loc,string sessionId)
        {
            Int32 finalRsult=0;
            try
            {

                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                Int32 result1=_custServiceDAL.Update_Job_dates(jobNo, Convert.ToInt32(jobLine),techStart,techEnd,techStartMAn,techEndMan);
                if(result1>0){

                    Int32 result = _custServiceDAL.Update_JobDetailStage(jobNo, Convert.ToInt32(jobLine), Convert.ToDecimal(stage), _user);
                    if (result > 0)
                    {


                        Service_Job_StageLog oLog = new Service_Job_StageLog();
                        oLog.SJL_REQNO = "";
                        oLog.SJL_JOBNO = jobNo;
                        oLog.SJL_JOBLINE = Convert.ToInt32(jobLine);
                        oLog.SJL_COM = com;
                        oLog.SJL_LOC = loc;
                        oLog.SJL_JOBSTAGE = Convert.ToDecimal(stage);
                        oLog.SJL_CRE_BY = _user;
                        oLog.SJL_CRE_DT = DateTime.Now;
                        oLog.SJL_SESSION_ID = sessionId;
                        oLog.SJL_INFSUP = 0;
                        Int32 result3 = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                        if (result3 > 0)
                        {
                            _custServiceDAL.TransactionCommit();


                            finalRsult=result3;
                        }
                        else
                        {

                            _custServiceDAL.TransactionRollback();

                            finalRsult = 0;
                        }


                    }

                    else
                    {
                        _custServiceDAL.TransactionRollback();
                        finalRsult = 0;
                    }
                } //end if result1

                else{

                    _custServiceDAL.TransactionRollback();
                    finalRsult=0;

                }

                _custServiceDAL.ConnectionClose();



            }
            catch (Exception ex)
            {
                string error = ex.Message;
                _custServiceDAL.TransactionRollback();
                finalRsult = 0;


            }

            return finalRsult;

        }
        //add by tharanga 
        public Int32 Update_Approve_MRN(string STATUS, string USER, string COM, string MRN, InventoryRequest _inventoryRequest)
        {
            Int32 _effects = 0;
            try
            {
                Int32 seq_no = 0;
                _custServiceDAL = new CustServiceDAL();
                _inventoryDAL = new InventoryDAL();
                _inventoryDAL.ConnectionOpen();
                _custServiceDAL.ConnectionOpen();
                _generalDAL = new GeneralDAL();
                _generalDAL.ConnectionOpen();
                _salesDAL = new SalesDAL();
                _salesDAL.ConnectionOpen();
                DataTable odt = _inventoryDAL.Get_MRN_Ref(MRN);
                foreach (DataRow row in odt.Rows)
                {
                    seq_no = Convert.ToInt32(row["itr_seq_no"].ToString());
                }
                _effects = _custServiceDAL.Update_ReqHeaderStatus(STATUS, USER, COM, MRN);


                if ((_inventoryRequest.InventoryRequestItemList != null) && (_inventoryRequest.InventoryRequestItemList.Count > 0))
                {
                    foreach (InventoryRequestItem _inventoryRequestItem in _inventoryRequest.InventoryRequestItemList)
                    {
                        _effects = 0;
                        _effects = _inventoryDAL.Update_Approve_MRN(_inventoryRequestItem, seq_no);
                    }
                }

                _custServiceDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                _inventoryDAL.ConnectionClose();

                //Added By Udaya For MRN approve mail send 07/Nov/2017
                if (_effects == 1)
                {
                    try
                    {
                        #region Email
                        if (_inventoryRequest.TMP_SEND_MAIL && _inventoryRequest.Itr_com == "AEC")
                        {
                            StringBuilder html = new StringBuilder();
                            string htmlBody = string.Empty;
                            if (_inventoryRequest.InventoryRequestItemList != null)
                            {
                                if (_inventoryRequest.InventoryRequestItemList.Count > 0)
                                {
                                    DataTable dt = new DataTable();
                                    //Building an HTML string.
                                    DataRow dr = null;
                                    dt.Columns.Add(new DataColumn("Item", typeof(string)));
                                    dt.Columns.Add(new DataColumn("Req. Qty", typeof(decimal)));
                                    dt.Columns.Add(new DataColumn("App. Qty", typeof(decimal)));
                                    //Table start.
                                    html.Append("<!DOCTYPE html>");
                                    html.Append("<html>");
                                    html.Append("<body>");
                                    html.Append("<table style=' background-repeat:no-repeat; width:450px;margin:0;' cellpadding='0' cellspacing='0' border='1' background-color: aqua>");


                                    //Building the Header row.
                                    html.Append("<tr>");
                                    foreach (DataColumn column in dt.Columns)
                                    {
                                        html.Append("<th style=' background-color:#B5E3F0; width:100px; margin:0;' >");
                                        html.Append(column.ColumnName);
                                        html.Append("</th>");
                                    }
                                    html.Append("</tr>");
                                    foreach (InventoryRequestItem _updateitem in _inventoryRequest.InventoryRequestItemList)
                                    {
                                        string _itmDes = _generalDAL.GetItemMaster(_updateitem.Itri_itm_cd).Mi_shortdesc;
                                        html.Append("<tr>");
                                        html.Append("<th align='left'>");
                                        html.Append(_updateitem.Itri_itm_cd + " - " + _itmDes);
                                        html.Append("</th>");
                                        html.Append("<th>");
                                        html.Append(_updateitem.Itri_qty);
                                        html.Append("</th>");
                                        html.Append("<th>");
                                        html.Append(_updateitem.Itri_app_qty);
                                        html.Append("</th>");
                                        html.Append("</tr>");

                                    }
                                    html.Append("</table>");
                                }
                            }

                            string locDes = string.Empty;
                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();
                            MasterLocation _mstLoc = new MasterLocation();
                            List<MsgInformation> _mail = new List<MsgInformation>();
                            List<MsgInformation> _mailFrmLoc = new List<MsgInformation>();
                            DataTable loctbl = _salesDAL.getLocDesc(_inventoryRequest.Itr_com, "", _inventoryRequest.Itr_rec_to);
                            if (loctbl.Rows.Count > 0)
                            {
                                locDes = loctbl.AsEnumerable().FirstOrDefault().Field<string>("descp");
                            }
                            _mstLoc = _generalDAL.GetLocationInfor(_inventoryRequest.Itr_com, _inventoryRequest.Itr_rec_to);
                            _mail = _generalDAL.GetMsgInformation(_inventoryRequest.Itr_com, "", "MRN_APP");
                            _mailFrmLoc = new List<MsgInformation>() { new MsgInformation() { Mmi_email = _mstLoc.Ml_email } };
                            if (_mail != null)
                            {
                                _mailFrmLoc.AddRange(_mail);
                            }

                            if (_mstLoc != null)
                            {
                                if (_mailFrmLoc != null)
                                {
                                    if (_mailFrmLoc.Count > 0)
                                    {
                                        foreach (MsgInformation _info in _mailFrmLoc)
                                        {
                                            message = new MailMessage();
                                            if (!string.IsNullOrEmpty(_info.Mmi_email) && (_info.Mmi_email != "N/A"))
                                            {
                                                string _preparedU = string.Empty;
                                                string _approvedU = string.Empty;
                                                DataTable _creUsr = _salesDAL.GetinvUser(_inventoryRequest.Itr_cre_by);
                                                if (_creUsr.Rows.Count > 0)
                                                {
                                                    _preparedU = _creUsr.AsEnumerable().FirstOrDefault().Field<string>("SE_USR_NAME");
                                                }
                                                DataTable _appUsr = _salesDAL.GetinvUser(_inventoryRequest.Itr_gran_app_by);
                                                if (_appUsr.Rows.Count > 0)
                                                {
                                                    _approvedU = _appUsr.AsEnumerable().FirstOrDefault().Field<string>("SE_USR_NAME");
                                                }
                                                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());
                                                smtpClient.Host = _generalDAL.GetMailHost();
                                                smtpClient.Port = 25;
                                                message.From = fromAddress;
                                                string FOOTER = _generalDAL.GetMailFooterMsg();
                                                string _email = "";
                                                _email = "Dear Sir/Madam, <br><br>" + "Your MRN Request (" + MRN + ") Approved by Distribution Department <br>";
                                                _email = _email + "Prepared User : " + _preparedU + " <br>";
                                                _email = _email + "Approved User : " + _approvedU + " <br>";
                                                _email = _email + "Approved Date : " + _inventoryRequest.Itr_mod_dt + " <P>";
                                                _email = _email + "<br>" + html + "<br>";// +FOOTER;
                                                _email = _email + "Thank You, <br>";
                                                _email = _email + "** This is an auto generated mail from SCM2 infor portal. Please don't Reply ** <br>";
                                                _email = _email + "** IT Department ** <br>";
                                                message.To.Add(_info.Mmi_email);
                                                message.Subject = "MRN Approval - " + locDes;
                                                message.IsBodyHtml = false;
                                                message.Body = _email;
                                                message.IsBodyHtml = true;
                                                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                                                smtpClient.Send(message);
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                _effects = 1;
                                _generalDAL.ConnectionClose();
                                _salesDAL.ConnectionClose();
                            }
                        }
                        #endregion
                    }
                    catch (Exception ex)
                    {
                        _effects = 1;
                        _generalDAL.ConnectionClose();
                        _salesDAL.ConnectionClose();
                    }
                }
                return _effects;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _effects = -1;
                return _effects;
            }
        }
        //add by tharanga 2017/09/14
        public DataTable get_msg_info_MAIL(string p_com, string p_pc, string p_doc_tp)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_msg_info_MAIL(p_com, p_pc, p_doc_tp);
        }

        //Akila 2017/11/15
        public DataTable GetWarrantyReplaceSerialDetails(string _serialNo, string _itemCode)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetWarrantyReplaceSerialDetails(_serialNo, _itemCode);

        }

        public DataTable GetRccLetterDetails(string _rccno)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetRccLetterDetails(_rccno);
        }

        public DataTable GetErrJobList()
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetErrJobList();
        }

        public Int32 UpdatesatitmDOqty_GP(string _Jobno)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                int x= _custServiceDAL.UpdatesatitmDOqty_GP(_Jobno);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return x;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                return -1;
            }
        }

        //Akila 2018/02/21
        public DataTable GetPendingClaimDocs(string _docNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetPendingClaimDocs(_docNo);
        }

        //SUBE 
        public DataTable GetMailBrands(string _docNo)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetMailBrands(_docNo);
        }
        //SUBE 
        public DataTable GetBrandsMail(string _docNo,string cat, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetBrandsMail(_docNo, cat, com);
        }

        //Tharindu 2018-03-30
        public DataTable GetJobHeader(string jobNo, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobHeader(jobNo, com);
        }

        //Tharindu 2018-03-30
        public DataTable GetJobDetail(string jobNo, string com)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetJobDetail(jobNo, com);
        }
        public DataTable get_REF_OLD_PART_CAT(string _cate_1, string _cate_2, string _cate_3)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_REF_OLD_PART_CAT(_cate_1, _cate_2, _cate_3);
        }
       
        //Wimal @ 13/07/2018
        public DataTable get_BalstockItem(string _comcode, string _InvNo)
        {

            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.get_balStockItem(_comcode, _InvNo);
        }

        public Int32 save_busentity_newcom(string _com, string _cust_cd)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                int x = _custServiceDAL.save_busentity_newcom(_com, _cust_cd);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();

                return x;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                return -1;
            }
        
        }
        public DataTable GET_JOB_REQ_DET(string _ComCode, string _loc, string _ProfitCenter, string _req, DateTime _frmdate, DateTime _todate, string _town)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_JOB_REQ_DET(_ComCode, _loc, _ProfitCenter, _req, _frmdate, _todate, _town);
        }
        public Int32 Save_Job_by_job_req(List<Service_JOB_HDR> _jobHdrlist, List<Service_job_Det> _jobItems, List<Service_Job_Defects> _jobDefList, List<Service_Tech_Aloc_Hdr> _jobEmpList, List<Service_Job_Det_Sub> _jobDetSubList, RecieptHeader _recHeader, List<RecieptItem> _recItems, List<ImageUploadDTO> _imgList, MasterAutoNumber _recAuto, string _sbChnl, string _itemType, string _brand, Int32 _warStus, MasterAutoNumber _masterAuto, out string _err, out string _jNo, out string _receiptNo, List<ServiceTechAlocSupervice> _supervisor = null, Int32 _autoStartJob = 0, List<Transport> transportList = null)
        {
            Int32 effect = 0;
            Int32 eff = 0;
            Int32 _warStusnew = 0;
            string _errcopy = "";
            string _jNocopy = "";
            string _receiptNocopy = "";
            _custServiceDAL = new CustServiceDAL();
            _generalDAL = new GeneralDAL();
            _inventoryDAL = new InventoryDAL();
            _inventoryRepDAL = new ReptCommonDAL();
            _salesDAL = new SalesDAL();

            _custServiceDAL.ConnectionOpen();
            _custServiceDAL.BeginTransaction();

            _inventoryDAL.ConnectionOpen();
            _inventoryDAL.BeginTransaction();

            _inventoryRepDAL.ConnectionOpen();
            _inventoryRepDAL.BeginTransaction();

            _salesDAL.ConnectionOpen();
            _salesDAL.BeginTransaction();
            
            Service_JOB_HDR _jobHdr = new Service_JOB_HDR();
            List<Service_job_Det> _jobItemsfilter = new List<Service_job_Det>();
            List<Service_Job_Defects> _jobDefListFiletr = new List<Service_Job_Defects>();
            if (_jobHdrlist != null)
            {
                if (_jobHdrlist.Count > 0)
                {
                    foreach (Service_JOB_HDR job_hdr_copy in _jobHdrlist)
                    {
                        Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>> _warrMstDic = null;
                        Dictionary<Service_Req_Hdr, List<Service_Req_Det>> _result = new Dictionary<Service_Req_Hdr,List<Service_Req_Det>> ();
                        List<InventorySerialMaster> _warrMst = new List<InventorySerialMaster>();
                        List<InventorySubSerialMaster> _warrMstSub = new List<InventorySubSerialMaster>();
                        #region hdr
                        _jobHdr = new Service_JOB_HDR(); 
                        _jobHdr.SJB_ADD1 = job_hdr_copy.SJB_ADD1;
                        _jobHdr.SJB_ADD2 = job_hdr_copy.SJB_ADD2;
                        _jobHdr.SJB_ADD3 = job_hdr_copy.SJB_ADD3;
                        _jobHdr.SJB_B_ADD1 = job_hdr_copy.SJB_B_ADD1;
                        _jobHdr.SJB_B_ADD2 = job_hdr_copy.SJB_B_ADD2;
                        _jobHdr.SJB_B_ADD3 = job_hdr_copy.SJB_B_ADD3;
                        _jobHdr.SJB_B_CUST_CD = job_hdr_copy.SJB_B_CUST_CD;
                        _jobHdr.SJB_B_CUST_NAME = job_hdr_copy.SJB_B_CUST_NAME;
                        _jobHdr.SJB_B_CUST_TIT = job_hdr_copy.SJB_B_CUST_TIT;
                        _jobHdr.SJB_B_DL = job_hdr_copy.SJB_B_DL;
                        _jobHdr.SJB_B_EMAIL = job_hdr_copy.SJB_B_EMAIL;
                        _jobHdr.SJB_B_FAX = job_hdr_copy.SJB_B_FAX;
                        _jobHdr.SJB_B_MOBINO = job_hdr_copy.SJB_B_MOBINO;
                        _jobHdr.SJB_B_NIC = job_hdr_copy.SJB_B_NIC;
                        _jobHdr.SJB_B_PHNO = job_hdr_copy.SJB_B_PHNO;
                        _jobHdr.SJB_B_PP = job_hdr_copy.SJB_B_PP;
                        _jobHdr.SJB_B_TOWN = job_hdr_copy.SJB_B_TOWN;
                        _jobHdr.SJB_CHG = job_hdr_copy.SJB_CHG;
                        _jobHdr.SJB_CHG_CD = job_hdr_copy.SJB_CHG_CD;
                        _jobHdr.SJB_CNT_ADD1 = job_hdr_copy.SJB_CNT_ADD1;
                        _jobHdr.SJB_CNT_ADD2 = job_hdr_copy.SJB_CNT_ADD2;
                        _jobHdr.SJB_CNT_PERSON = job_hdr_copy.SJB_CNT_PERSON;
                        _jobHdr.SJB_CNT_PHNO = job_hdr_copy.SJB_CNT_PHNO;
                        _jobHdr.SJB_COM = job_hdr_copy.SJB_COM;
                        _jobHdr.SJB_CRE_BY = job_hdr_copy.SJB_CRE_BY;

                        _jobHdr.SJB_CRE_DT = job_hdr_copy.SJB_CRE_DT;
                        _jobHdr.SJB_CUST_CD = job_hdr_copy.SJB_CUST_CD;
                        _jobHdr.SJB_CUST_NAME = job_hdr_copy.SJB_CUST_NAME;
                        _jobHdr.SJB_CUST_TIT = job_hdr_copy.SJB_CUST_TIT;
                        _jobHdr.SJB_CUSTEXPTDT = job_hdr_copy.SJB_CUSTEXPTDT;
                        _jobHdr.SJB_DL = job_hdr_copy.SJB_DL;
                        _jobHdr.SJB_DT = job_hdr_copy.SJB_DT;
                        _jobHdr.SJB_ED_DT = job_hdr_copy.SJB_ED_DT;
                        _jobHdr.SJB_EMAIL = job_hdr_copy.SJB_EMAIL;
                        _jobHdr.SJB_FAXNO = job_hdr_copy.SJB_FAXNO;
                        _jobHdr.SJB_INFM_ADD1 = job_hdr_copy.SJB_INFM_ADD1;
                        _jobHdr.SJB_INFM_ADD2 = job_hdr_copy.SJB_INFM_ADD2;
                        _jobHdr.SJB_INFM_PERSON = job_hdr_copy.SJB_INFM_PERSON;
                        _jobHdr.SJB_INFM_PHNO = job_hdr_copy.SJB_INFM_PHNO;
                        _jobHdr.SJB_JOB_RMK = job_hdr_copy.SJB_JOB_RMK;
                        _jobHdr.SJB_JOBCAT = job_hdr_copy.SJB_JOBCAT;
                        _jobHdr.SJB_JOBNO = job_hdr_copy.SJB_JOBNO;
                        _jobHdr.SJB_JOBSTAGE = job_hdr_copy.SJB_JOBSTAGE;
                        _jobHdr.SJB_JOBSTAGE_TEXT = job_hdr_copy.SJB_JOBSTAGE_TEXT;
                        _jobHdr.SJB_JOBSTP = job_hdr_copy.SJB_JOBSTP;
                        _jobHdr.SJB_JOBTP = job_hdr_copy.SJB_JOBTP;
                        _jobHdr.SJB_LASTPRINTBY = job_hdr_copy.SJB_LASTPRINTBY;
                        _jobHdr.SJB_MANUALREF = job_hdr_copy.SJB_MANUALREF;
                        _jobHdr.SJB_MOBINO = job_hdr_copy.SJB_MOBINO;
                        _jobHdr.SJB_MOD_BY = job_hdr_copy.SJB_MOD_BY;

                        _jobHdr.SJB_MOD_DT = job_hdr_copy.SJB_MOD_DT;
                        _jobHdr.SJB_NIC = job_hdr_copy.SJB_NIC;
                        _jobHdr.SJB_NOOFPRINT = job_hdr_copy.SJB_NOOFPRINT;
                        _jobHdr.SJB_ORDERNO = job_hdr_copy.SJB_ORDERNO;
                        _jobHdr.SJB_OTHERREF = job_hdr_copy.SJB_OTHERREF;
                        _jobHdr.SJB_PHNO = job_hdr_copy.SJB_PHNO;
                        _jobHdr.SJB_POD_NO = job_hdr_copy.SJB_POD_NO;
                        _jobHdr.SJB_PP = job_hdr_copy.SJB_PP;
                        _jobHdr.SJB_PRORITY = job_hdr_copy.SJB_PRORITY;
                        _jobHdr.SJB_REC_LOC = job_hdr_copy.SJB_REC_LOC;
                        _jobHdr.SJB_RECALL = job_hdr_copy.SJB_RECALL;
                        _jobHdr.SJB_REQNO = job_hdr_copy.SJB_REQNO;
                        _jobHdr.SJB_RMK = job_hdr_copy.SJB_RMK;
                        _jobHdr.sjb_scv_add1 = job_hdr_copy.sjb_scv_add1;
                        _jobHdr.sjb_scv_add2 = job_hdr_copy.sjb_scv_add2;
                        _jobHdr.sjb_scv_add3 = job_hdr_copy.sjb_scv_add3;
                        _jobHdr.sjb_scv_add4 = job_hdr_copy.sjb_scv_add4;
                        _jobHdr.SJB_SEQ_NO = job_hdr_copy.SJB_SEQ_NO;
                        _jobHdr.SJB_SESSION_ID = job_hdr_copy.SJB_SESSION_ID;
                        _jobHdr.SJB_ST_DT = job_hdr_copy.SJB_ST_DT;
                        _jobHdr.SJB_STAGE_DES = job_hdr_copy.SJB_STAGE_DES;
                        _jobHdr.SJB_STUS = job_hdr_copy.SJB_STUS;
                        _jobHdr.SJB_SUBSTAGE = job_hdr_copy.SJB_SUBSTAGE;
                        _jobHdr.SJB_TECH_RMK = job_hdr_copy.SJB_TECH_RMK;
                        _jobHdr.SJB_TOWN = job_hdr_copy.SJB_TOWN;
                        _jobHdr.SJB_LOC = job_hdr_copy.SJB_LOC;

                        #endregion

                        int _returnStatus = 0;
                        string _returnMsg = string.Empty;

                        List<Service_Req_Det> _reqDet = new List<Service_Req_Det>();
                        Service_Req_Hdr _reqHdr = new Service_Req_Hdr();
                      
                       // _reqHdr = new Service_Req_Hdr();

                        string _ser = null;
                        string _warr = null;
                        string _regno = null;
                        string _invcno = null;

                        _result = GetScvRequest_withconnection(job_hdr_copy.SJB_COM, job_hdr_copy.SJB_LOC, job_hdr_copy.SJB_REQNO, "", 0, out  _returnStatus, out  _returnMsg, _custServiceDAL);
                        if (_returnStatus == -1)
                        {
                            _err = _returnMsg;
                          
                        }
                        else
                        {
                            foreach (KeyValuePair<Service_Req_Hdr, List<Service_Req_Det>> pair in _result)
                            {
                                _reqHdr = pair.Key;
                                _reqDet = pair.Value;
                            }
                        }
                        List<Service_Request_Defects> _reqDefList = new List<Service_Request_Defects>();
                        foreach (Service_Req_Det Req_Det in _reqDet)
                        {
                            List<Service_Request_Defects> temp=new List<Service_Request_Defects> ();
                            temp = getRequestDefects_withcon(job_hdr_copy.SJB_REQNO, Req_Det.Jrd_reqline, _custServiceDAL);
                            _reqDefList.AddRange(temp);
                        }
            //            
                        if (_jobItems.Count > 0)
                        {
                            _jobItemsfilter = _jobItems.Where(r => r.Jbd_reqno == job_hdr_copy.SJB_REQNO).ToList();
                        }
                        if (_jobDefList.Count > 0)
                        {
                            _jobDefListFiletr = _jobDefList.Where(r => r.jbd_req_no == job_hdr_copy.SJB_REQNO).ToList();
                            if (_jobDefListFiletr.Count > 0)
                            {
                                _warrMstDic = GetWarrantyMasterwithcon(_jobDefListFiletr.First().jbd_ser1, null, _regno, _warr, _invcno, _jobDefListFiletr.First().jbd_itm_cd, 0, out _returnStatus, out _returnMsg,
                                _custServiceDAL, _salesDAL, _inventoryDAL);
                                if (_warrMstDic != null)
                                {
                                    foreach (KeyValuePair<List<InventorySerialMaster>, List<InventorySubSerialMaster>> pair in _warrMstDic)
                                    {
                                        _warrMst = pair.Key;
                                        _warrMstSub = pair.Value;
                                    }

                                    if (_warrMst[0].Irsm_warr_start_dt.AddMonths(_warrMst[0].Irsm_warr_period).Date >= job_hdr_copy.SJB_DT)
                                    {
                                        _warStusnew = 1;
                                    }
                                    else
                                    {
                                        _warStusnew = 0;
                                    }
                                    //  Nadeeka 12-10-2015
                                    if (_returnStatus == 2)
                                    {
                                        _warStusnew = 0;
                                    }
                                }
                            }

                           
                            _brand = _jobItemsfilter.First().Jbd_brand;
                        }
                       
                        string job_no = "";




                        eff = Save_Job_common(_jobHdr, _jobItemsfilter, _jobDefListFiletr, _jobEmpList, _jobDetSubList, _recHeader, _recItems, _imgList, _recAuto, _sbChnl, _itemType, _brand, _warStusnew, _masterAuto, out  _errcopy, out  job_no, out  _receiptNocopy, _supervisor, _autoStartJob, transportList,
                           _custServiceDAL, _generalDAL, _inventoryDAL, _inventoryRepDAL, _salesDAL,true);
                        _jNocopy = _jNocopy + " & " + job_no;
                      
                    }

                    if (eff == 1)
                    {
                        effect = eff;

                        _inventoryRepDAL.TransactionCommit();
                        _custServiceDAL.TransactionCommit();
                        _inventoryDAL.TransactionCommit();
                        _salesDAL.TransactionCommit();
                        _generalDAL.TransactionCommit();
                    }
                    else
                    {
                        effect = -1;
                        _err = _errcopy;
                        _inventoryRepDAL.TransactionRollback();
                        _custServiceDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        _salesDAL.TransactionRollback();
                        _generalDAL.TransactionRollback();

                    }

                }

            }

            _err = _errcopy;
            _jNo = _jNocopy;
            _receiptNo = _receiptNocopy;
            return effect;
        
        }
       
        //public Int32 Save_Job_bulk(Service_JOB_HDR _jobHdr, List<Service_job_Det> _jobItems, List<Service_Job_Defects> _jobDefList, List<Service_Tech_Aloc_Hdr> _jobEmpList, List<Service_Job_Det_Sub> _jobDetSubList, RecieptHeader _recHeader, List<RecieptItem> _recItems, List<ImageUploadDTO> _imgList, MasterAutoNumber _recAuto, string _sbChnl, string _itemType, string _brand, Int32 _warStus, MasterAutoNumber _masterAuto, out string _err, out string _jNo, out string _receiptNo, List<ServiceTechAlocSupervice> _supervisor = null, Int32 _autoStartJob = 0, List<Transport> transportList = null)
        //{

        //    Int32 eff = Save_Job_common(_jobHdr, _jobItems, _jobDefList, _jobEmpList, _jobDetSubList, _recHeader, _recItems, _imgList, _recAuto, _sbChnl, _itemType, _brand, _warStus, _masterAuto, out  _err, out  _jNo, out  _receiptNo, _supervisor, _autoStartJob, transportList, null, null, null, null, null, false);
        //    return eff;
        //}
        public Dictionary<Service_Req_Hdr, List<Service_Req_Det>> GetScvRequest_withconnection(string _com, string _loc, string _reqNo, string _reqStatus, int _reqlineno, out int _returnStatus, out string _returnMsg, CustServiceDAL _custServiceDALcopy)
        {
            try
            {
                Dictionary<Service_Req_Hdr, List<Service_Req_Det>> _result = new Dictionary<Service_Req_Hdr, List<Service_Req_Det>>();
                Service_Req_Hdr _reqHdr = null;
                List<Service_Req_Det> _reqDet = null;

                _custServiceDAL = _custServiceDALcopy;

              
                int _rtnStatus = 0;
                string _rtnMsg = string.Empty;

                _reqHdr = _custServiceDAL.GetServiceReqHeader(_com, _reqNo);
                if (_reqHdr == null)
                {
                    _returnMsg = "Invalid Service Request";
                    _returnStatus = -1;
                    return null;
                }
                _reqDet = _custServiceDAL.GetServiceReqDetails(_com, _loc, _reqNo, _reqlineno);
                if (_reqDet == null)
                {
                    //_returnMsg = "Invalid Service Request Details";
                    _returnMsg = "No service request found for given search";   //kapila 25/6/2015
                    _returnStatus = -1;
                    return null;
                }
                if (_reqDet.Count <= 0)
                {
                    //_returnMsg = "Invalid Service Request Details";
                    _returnMsg = "No service request found for given search";  //kapila 25/6/2015
                    _returnStatus = -1;
                    return null;
                }

                _returnStatus = 1;
                _returnMsg = _rtnMsg;
                _result.Add(_reqHdr, _reqDet);
                return _result;
            }
            catch (Exception ex)
            {
                _returnMsg = ex.Message.ToString();
                _returnStatus = -999;
                return null;
            }
        }

        public List<Service_Request_Defects> getRequestDefects_withcon(string Req, Int32 line, CustServiceDAL _custServiceDALcopy)
        {
            _custServiceDAL = _custServiceDALcopy;
            return _custServiceDAL.getRequestDefects(Req, line);
        }
        public Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>> GetWarrantyMasterwithcon(string _ser1, string _ser2, string _regno, string _warr, string _invoice, string _item, int _serid, out int _returnStatus, out string _returnMsg, CustServiceDAL _CustServiceDALnew, SalesDAL _SalesDALnew, InventoryDAL _inventoryDALnew)
        {
            try
            {
                Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>> _result = new Dictionary<List<InventorySerialMaster>, List<InventorySubSerialMaster>>();
                List<InventorySerialMaster> _warrDet = null;
                List<InventorySubSerialMaster> _warrDetSub = null;
                _custServiceDAL = _CustServiceDALnew;
                _salesDAL = _SalesDALnew;
                _inventoryDAL = _inventoryDALnew;

                int _rtnStatus = 0;
                string _rtnMsg = string.Empty;

                _warrDet = _custServiceDAL.GetWarrantyMaster(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
                if (_warrDet == null)
                {
                    //kapila 22/6/2017
                    _warrDet = _custServiceDAL.GetWarrantyMasterSCM2(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);

                    if (_warrDet == null)
                    {
                        // Nadeeka 10-10-2015
                        _warrDet = _custServiceDAL.GetWarrantyMaster_OW(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
                        _rtnStatus = 2;
                        if (_warrDet == null)
                        {
                            _rtnStatus = 1;
                            _rtnMsg = "There is no warranty details available.";
                            _returnMsg = _rtnMsg;
                            _returnStatus = _rtnStatus;
                            return null;
                        }
                    }
                }
                else if (_warrDet != null) // Add by akila 2017/07/31
                {
                    int _nonSerialCount = _warrDet.Where(x => (string.IsNullOrEmpty(x.Irsm_invoice_no) ? "N/A" : x.Irsm_invoice_no) == "N/A").ToList().Count();
                    if (_nonSerialCount > 0)
                    {
                        _warrDet = _custServiceDAL.GetWarrantyMasterSCM2(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
                        if (_warrDet == null)
                        {
                            // Nadeeka 10-10-2015
                            _warrDet = _custServiceDAL.GetWarrantyMaster_OW(_item, _ser1, _ser2, _regno, _warr, _invoice, _serid);
                            _rtnStatus = 2;
                            if (_warrDet == null)
                            {
                                _rtnStatus = 1;
                                _rtnMsg = "There is no warranty details available.";
                                _returnMsg = _rtnMsg;
                                _returnStatus = _rtnStatus;
                                return null;
                            }
                        }
                    }
                }


                if (_warrDet.Count <= 0)
                {
                    _rtnStatus = 1;
                    _rtnMsg = "There is no warranty details available.";
                    _returnMsg = _rtnMsg;
                    _returnStatus = _rtnStatus;
                    return null;
                }
                else
                {
                    foreach (InventorySerialMaster _mst in _warrDet)
                    {
                        bool _custFound = false;
                        if (!string.IsNullOrEmpty(_mst.Irsm_cust_cd) && _mst.Irsm_cust_cd != "CASH")
                        {
                            //Check is SCM2 invoice
                            GroupBussinessEntity _custGrup = null;
                            _custGrup = _salesDAL.GetCustomerProfileByGrup(_mst.Irsm_cust_cd, "", "", "", "", "");
                            if (!string.IsNullOrEmpty(_custGrup.Mbg_cd))
                            {
                                _mst.Irsm_cust_cd = _custGrup.Mbg_cd;
                                _mst.Irsm_cust_prefix = _custGrup.Mbg_tit;
                                _mst.Irsm_cust_name = _custGrup.Mbg_name;
                                _custFound = true;
                            }
                        }

                        if (!string.IsNullOrEmpty(_mst.Irsm_invoice_no))
                        {
                            InvoiceHeader _invHdr = new InvoiceHeader();
                            _invHdr = _salesDAL.GetInvoiceHeader(_mst.Irsm_invoice_no);

                            if (_invHdr == null)
                            {
                                _invHdr = new InvoiceHeader();
                                DataTable _dt = _salesDAL.GetInvoiceHeaderSCM(_mst.Irsm_invoice_no);
                                if (_dt != null)
                                {
                                    if (_dt.Rows.Count > 0)
                                    {
                                        for (int i = 0; i < _dt.Rows.Count; i++)
                                        {
                                            _invHdr.Sah_cus_cd = _dt.Rows[i]["CUSTOMER_CODE"].ToString();
                                            _invHdr.Sah_pc = _dt.Rows[i]["PROFIT_CENTER_CODE"].ToString();
                                            _invHdr.Sah_com = _dt.Rows[i]["COMPANY_CODE"].ToString();
                                            break;
                                        }
                                    }
                                }
                            }

                            if (_invHdr != null)
                            {
                                if (_custFound == false)
                                {
                                    //Check is SCM2 invoice
                                    MasterBusinessEntity _cust = null;
                                    _cust = _salesDAL.GetAllCustomerProfileByCom(_invHdr.Sah_cus_cd, "", "", "", "", _invHdr.Sah_com, "C");
                                    if (!string.IsNullOrEmpty(_cust.Mbe_cd))
                                    {
                                        _mst.Irsm_cust_cd = _cust.Mbe_cd;
                                        _mst.Irsm_cust_prefix = _cust.MBE_TIT;
                                        _mst.Irsm_cust_name = _cust.Mbe_name;
                                    }
                                }
                            }
                        }



                        DataTable LocDes = _salesDAL.getLocDesc("", "", _mst.Irsm_loc);
                        foreach (DataRow row2 in LocDes.Rows)
                        {
                            _mst.Irsm_loc_desc = row2["descp"].ToString();
                        }

                        #region Get Supplier
                        _generalDAL = new GeneralDAL();
                        if (string.IsNullOrEmpty(_mst.Irsm_orig_supp) || _mst.Irsm_orig_supp.ToUpper() == "N/A")
                        {
                            DataTable _dtSupp = new DataTable();
                            _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 1);
                            if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                            {
                                for (int i = 0; i < _dtSupp.Rows.Count; i++)
                                {
                                    _mst.Irsm_orig_supp = _dtSupp.Rows[i]["EXPORTER"].ToString();
                                    break;
                                }
                            }
                            else
                            {
                                _dtSupp = new DataTable();
                                _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 4);
                                if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                {
                                    for (int j = 0; j < _dtSupp.Rows.Count; j++)
                                    {
                                        _mst.Irsm_orig_supp = _dtSupp.Rows[j]["EXPORTER"].ToString();
                                        break;
                                    }
                                }
                                else
                                {
                                    _dtSupp = new DataTable();
                                    _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 2);
                                    if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                    {
                                        for (int j = 0; j < _dtSupp.Rows.Count; j++)
                                        {
                                            _mst.Irsm_orig_supp = _dtSupp.Rows[j]["EXPORTER"].ToString();
                                            break;
                                        }
                                    }
                                    else
                                    {// Nadeeka 26-11-2015 
                                        _dtSupp = new DataTable();
                                        _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 3);
                                        if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                        {
                                            for (int j = 0; j < _dtSupp.Rows.Count; j++)
                                            {
                                                _mst.Irsm_orig_supp = _dtSupp.Rows[j]["EXPORTER"].ToString();
                                                break;
                                            }
                                        }
                                        else
                                        { // Nadeeka 26-11-2015 
                                            _dtSupp = new DataTable();
                                            _dtSupp = _generalDAL.GetSerialSupplierCode("", _mst.Irsm_itm_cd, _mst.Irsm_ser_1, 5);
                                            if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                            {
                                                for (int j = 0; j < _dtSupp.Rows.Count; j++)
                                                {
                                                    _mst.Irsm_orig_supp = _dtSupp.Rows[j]["EXPORTER"].ToString();
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        #endregion


                        if (!string.IsNullOrEmpty(_mst.Irsm_orig_supp))
                        {
                            GroupBussinessEntity _supp = null;
                            _supp = _salesDAL.GetCustomerProfileByGrup(_mst.Irsm_orig_supp, "", "", "", "", "");
                            if (_supp != null) _mst.Irsm_exist_supp = _supp.Mbg_name;
                        }

                        MasterItem _itm = _inventoryDAL.GetItem("", _mst.Irsm_itm_cd);
                        _mst.Irsm_anal_3 = _itm.Mi_itm_tp;
                        _mst.Irsm_anal_4 = _itm.Mi_cate_1;
                        if (_itm.Mi_is_scansub == true)
                        {
                            _warrDetSub = _custServiceDAL.GetWarrantyMasterSub(_mst.Irsm_warr_no, 0);
                            if (_warrDetSub != null)
                            {
                                foreach (InventorySubSerialMaster _subSer in _warrDetSub)
                                {
                                    MasterItem _itm0 = _inventoryDAL.GetItem("", _subSer.Irsms_itm_cd);
                                    _subSer.Irsms_warr_no = _itm0.Mi_longdesc;
                                }
                            }

                        }

                        _mst.PartNumber = _itm.Mi_part_no;
                        _mst.InssuranceRemark = _custServiceDAL.GET_OTH_WRR_REMARK(_mst.Irsm_itm_cd, _mst.Irsm_ser_1);

                        GroupBussinessEntity _custGrup1 = null;
                        _custGrup1 = _salesDAL.GetCustomerProfileByGrup(_mst.Irsm_cust_cd, "", "", "", "", "");
                        if (string.IsNullOrEmpty(_custGrup1.Mbg_cd))
                        {
                            _mst.Irsm_cust_cd = "CASH";
                        }

                    }
                }

                _returnStatus = _rtnStatus;
                _returnMsg = _rtnMsg;
                _result.Add(_warrDet, _warrDetSub);
                return _result;
            }
            catch (Exception ex)
            {
                _returnStatus = -1;
                _returnMsg = ex.Message.ToString();
                return null;
            }
        }

     
        public Int32 SAVE_SCV_commnet(List<scv_jobcus_feed> scv_jobcus_feedlist)
        {
            _custServiceDAL = new CustServiceDAL();
            _custServiceDAL.ConnectionOpen();
            int _eff = 0;
            foreach (scv_jobcus_feed item in scv_jobcus_feedlist)
            {
                _eff = _custServiceDAL.SAVE_SCV_JOBCUS_FEED_NEW(item.sjf_jobno, item.sjf_jobline, item.sjf_date, item.sjf_cuscd, item.sjf_feedback, item.sjf_cre_by, item.sjf_type, item.sjf_cur_status
                , 0, 0, 0, item.SJF_FEEDBACK_type, item.sjf_seqline);
            }
            //int _eff = _custServiceDAL.SAVE_SCV_JOBCUS_FEED(_sjf_jobno, _sjf_jobline, _sjf_date, _sjf_cuscd, _sjf_feedback, _sjf_cre_by);
            _custServiceDAL.ConnectionClose();
            return _eff;
        }
        //tharanga 2018/07/11
        public List<scv_jobcus_feed> GetCustJobFeedback_list(string _jobno, Int32 _seq, Int32 _jobline)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustJobFeedback_list(_jobno, _seq, _jobline);
        
        }
        public List<ServiceAreaS> GetServiceCenterDetailslist(string _com_CD, string _svc_CD, string _Town_CD, string _searchText)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetServiceCenterDetailslist(_com_CD, _svc_CD, _Town_CD, _searchText);
        }
        //ADD BY THARANGA 2018/06/22
        public DataTable GET_ALLEMP_BY_TEAM_CD(string _COM, string _PC, string _TEAM_CD)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_ALLEMP_BY_TEAM_CD(_COM, _PC, _TEAM_CD);
        }
        public Int32 update_scv_agr_hdr(SCV_AGR_HDR oHeader, out string _err)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                int x = _custServiceDAL.update_scv_agr_hdr(oHeader);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                _err = string.Empty;
                return x;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _err = ex.Message;
                return -1;
            }
        }
        //ADD BY THARANGA 2018/09/13
        public Int32 Save_Req_comm(Service_Req_Hdr _jobHdr, List<Service_Req_Det> _jobItems, List<Service_Req_Def> _jobDefList, List<Service_Req_Det_Sub> _jobDetSubList, MasterAutoNumber _recAuto, string _sbChnl, string _itemType, string _brand, Int32 _warStus, MasterAutoNumber _masterAuto, out string _err, out string _jNo, Int32 _isProcess, DateTime _fromDate, DateTime _toDate,
        Boolean withcon = false, CustServiceDAL _CustServiceDALnew = null, GeneralDAL _generalDALnew = null, InventoryDAL _InventoryDALnew = null,Boolean scv_req_crete=false)
        {
            int effect = 0;
            string _jobNo = "";
            string _com = _jobHdr.Srb_com;
            string _docMonth = _jobHdr.Srb_dt.ToString("MM"); string _docYear = _jobHdr.Srb_dt.ToString("yy"); string _docDate = _jobHdr.Srb_dt.ToString("dd");
            string _reqCate = "";
            int SeqNo = 0;
            int _jobItmLine = 1;
            int _subLine = 0;

            _jNo = string.Empty;
            if (withcon == true)
            {
                _custServiceDAL = _CustServiceDALnew;
                _generalDAL = _generalDALnew;
                _inventoryDAL = _InventoryDALnew;
            }
            else
            {
                _custServiceDAL = new CustServiceDAL();
                _generalDAL = new GeneralDAL();
                _inventoryDAL = new InventoryDAL();

                _custServiceDAL.ConnectionOpen();
            }
            foreach (Service_Req_Det _lstJob in _jobItems)
            {
                if (_lstJob.Jrd_isexternalitm == 0)
                {
                    MasterItem _mitm = _inventoryDAL.GetItem("", _lstJob.Jrd_itm_cd);
                    if (_mitm.Mi_is_ser1 == 1)
                    {
                        //#region Get Supplier
                        //if (string.IsNullOrEmpty(_lstJob.Jrd_supp_cd) || _lstJob.Jrd_supp_cd.ToUpper() == "N/A")
                        //{
                        //    DataTable _dtSupp = new DataTable();
                        //    _dtSupp = _generalDAL.GetSerialSupplierCode(_jobHdr.Srb_com, _lstJob.Jrd_itm_cd, _lstJob.Jrd_ser1, 1);
                        //    if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                        //    {
                        //        for (int i = 0; i < _dtSupp.Rows.Count; i++)
                        //        {
                        //            _lstJob.Jrd_supp_cd = _dtSupp.Rows[i]["EXPORTER"].ToString();
                        //            break;
                        //        }
                        //    }
                        //    else
                        //    {
                        //        _dtSupp = new DataTable();
                        //        _dtSupp = _generalDAL.GetSerialSupplierCode(_jobHdr.Srb_com, _lstJob.Jrd_itm_cd, _lstJob.Jrd_ser1, 2);
                        //        if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                        //        {
                        //            for (int j = 0; j < _dtSupp.Rows.Count; j++)
                        //            {
                        //                _lstJob.Jrd_supp_cd = _dtSupp.Rows[j]["EXPORTER"].ToString();
                        //                break;
                        //            }
                        //        }
                        //    }
                        //}
                        //#endregion
                        #region Get Serial ID
                        List<InventorySerialMaster> _serMst = _custServiceDAL.GetWarrantyMasterSCM2(_lstJob.Jrd_itm_cd, _lstJob.Jrd_ser1, null, null, null, null, 0);
                        if (_serMst != null && _serMst.Count > 0)
                        {
                            _lstJob.Jrd_ser_id = _serMst[0].Irsm_ser_id.ToString();
                        }
                        else
                        {
                            //_custServiceDAL.Save_Inr_SerMst_Bulk(_lstJob.Jrd_warr); 
                        }
                        #endregion
        }

                }
            }
            if (withcon == true)
            {
                _custServiceDAL = _CustServiceDALnew;
                _generalDAL = _generalDALnew;
                _inventoryDAL = _InventoryDALnew;
            }
            else
            {
                _custServiceDAL.ConnectionClose();
                _custServiceDAL = new CustServiceDAL();
                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();
                _inventoryDAL.ConnectionOpen();
                _inventoryDAL.BeginTransaction();
            }
            int jobSeqNo = _custServiceDAL.GetJobSerialID();
            _jobHdr.Srb_seq_no = jobSeqNo;
            if (scv_req_crete = false)
            {
                if (string.IsNullOrEmpty(_jobHdr.Srb_reqno))
                {
                    MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);

                    _jobNo = _masterAuto.Aut_cate_cd + "-" + _masterAuto.Aut_start_char + "-" + string.Format("{0:0000}", _number.Aut_number);
                    _inventoryDAL.UpdateAutoNumber(_masterAuto);//update MST_AUTO table
                }
                else
                    _jobNo = _jobHdr.Srb_reqno;
            }
            else
            {
                MasterAutoNumber _number = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year);

                _jobNo = _masterAuto.Aut_cate_cd + "-" + _masterAuto.Aut_start_char + "-" + string.Format("{0:0000}", _number.Aut_number);
                _inventoryDAL.UpdateAutoNumber(_masterAuto);//update MST_AUTO table
            }
           

            _jobHdr.Srb_reqno = _jobNo;


            effect = _custServiceDAL.SaveRequestHeader(_jobHdr);

            //updated by akila 2017/07/13
            #region New Code
            if ((_jobItems != null) && (_jobItems.Count > 0))
            {
                foreach (Service_Req_Det _lstJob in _jobItems)
                {
                    //_jobDefList.Where(x => x.SRD_JOB_LINE == _lstJob.Jrd_jobline).ToList().ForEach(x => x.SRD_JOB_LINE = _jobItmLine);

                    _lstJob.Jrd_seq_no = _jobHdr.Srb_seq_no;
                    _lstJob.Jrd_reqno = _jobNo;
                    _lstJob.Jrd_stage = Convert.ToInt32(_jobHdr.Srb_jobstage);
                    _lstJob.Jrd_sjobno = _jobNo + "-" + _lstJob.Jrd_jobline;
                    effect = _custServiceDAL.SaveRequestDetail(_lstJob);
                }
            }

            if ((_jobDefList != null) && (_jobDefList.Count > 0))
            {
                foreach (Service_Req_Def _lstJobDef in _jobDefList)
                {
                    _lstJobDef.Srdf_seq_no = _jobHdr.Srb_seq_no;
                    _lstJobDef.Srdf_req_no = _jobNo;
                    _lstJobDef.Srdf_stage = "J";
                    _lstJobDef.Srdf_cre_by = _jobHdr.Srb_cre_by;
                    _lstJobDef.Srdf_mod_by = _jobHdr.Srb_cre_by;
                    _lstJobDef.Srdf_act = true;
                    Int32 eff1 = _custServiceDAL.SaveRequestDefDetail(_lstJobDef);
                    _subLine++;
                }
            }

            #endregion

            #region Old Code
            //foreach (Service_Req_Det _lstJob in _jobItems)
            //{
            //    //_jobDefList.Where(x => x.SRD_JOB_LINE == _lstJob.Jrd_jobline).ToList().ForEach(x => x.SRD_JOB_LINE = _jobItmLine);

            //    _lstJob.Jrd_seq_no = _jobHdr.Srb_seq_no;
            //    _lstJob.Jrd_reqno = _jobNo;
            //    _lstJob.Jrd_stage = Convert.ToInt32(_jobHdr.Srb_jobstage);
            //    //_lstJob.Jrd_sjobno = _jobNo + "-" + _jobItmLine;
            //    //_lstJob.Jrd_jobline = _jobItmLine;

            //    _lstJob.Jrd_sjobno = _jobNo + "-" + _lstJob.Jrd_jobline;

            //    //if (_jobHdr.SJB_RECALL == 2) if (_lstJob.Jrd_jobline == 1) _lstJob.Jrd_act = 0;
            //    //if (_lstJob.Jrd_isstockupdate == 1)
            //    //{
            //    //    _isStockUpdate = true;
            //    //    _aodOutNo = _lstJob.Jrd_aodissueno;
            //    //    _aodOutLoc = _lstJob.Jrd_aodissueloc;
            //    //    _aodInLoc = _lstJob.Jrd_loc;
            //    //}

            //    effect = _custServiceDAL.SaveRequestDetail(_lstJob);
            //    //if (!string.IsNullOrEmpty(_lstJob.Jrd_reqno)) effect = _custServiceDAL.UpdateRequestItemViaJob(_lstJob);
            //    ////_jobItmLine = _jobItmLine + 1;

            //    //// THaraka 2015-01-28 Update warranty details
            //    //if (_jobHdr.JobCategori == 2 || _jobHdr.JobCategori == 3)
            //    //{
            //    //    int result = _custServiceDAL.UPDATE_INRSEMST_BY_WARR(_jobHdr.SJB_B_CUST_CD, _jobHdr.SJB_B_CUST_TIT, _jobHdr.SJB_B_CUST_NAME, _jobHdr.SJB_B_ADD1 + ", " + _jobHdr.SJB_B_ADD2 + ", " + _jobHdr.SJB_B_ADD3, _jobHdr.SJB_B_TOWN, _jobHdr.SJB_B_PHNO, _jobHdr.SJB_B_MOBINO, _lstJob.Jrd_warr);
            //    //    result = _custServiceDAL.UPDATE_INRSEMST_BY_WARR(_jobHdr.SJB_B_CUST_CD, _jobHdr.SJB_B_CUST_TIT, _jobHdr.SJB_B_CUST_NAME, _jobHdr.SJB_B_ADD1 + ", " + _jobHdr.SJB_B_ADD2 + ", " + _jobHdr.SJB_B_ADD3, _jobHdr.SJB_B_TOWN, _jobHdr.SJB_B_PHNO, _jobHdr.SJB_B_MOBINO, _lstJob.Jrd_warr);
            //    //}
            //}            

            //foreach (Service_Req_Def _lstJobDef in _jobDefList)
            //{
            //    _lstJobDef.Srdf_seq_no = _jobHdr.Srb_seq_no;
            //    _lstJobDef.Srdf_req_no = _jobNo;
            //    //_lstJobDef.SRD_JOB_LINE =_jobItmLine;
            //    _lstJobDef.Srdf_stage = "J";
            //    //_lstJobDef.SRD_DEF_LINE = _subLine;
            //    _lstJobDef.Srdf_cre_by = _jobHdr.Srb_cre_by;
            //    _lstJobDef.Srdf_mod_by = _jobHdr.Srb_cre_by;
            //    _lstJobDef.Srdf_act = true;
            //    Int32 eff1 = _custServiceDAL.SaveRequestDefDetail(_lstJobDef);
            //    _subLine++;
            //}
            #endregion

            if (_jobDetSubList != null)
            {
                if (_jobDetSubList.Count > 0)
                {
                    foreach (Service_Req_Det_Sub _lst in _jobDetSubList)
                    {
                        _lst.Jrds_seq_no = _jobHdr.Srb_seq_no;
                        _lst.Jrds_jobno = _jobNo;
                        MasterItem _mitm = _inventoryDAL.GetItem("", _lst.Jrds_itm_cd);
                        _lst.Jrds_brand = _mitm.Mi_brand;
                        _lst.Jrds_model = _mitm.Mi_model;
                        _lst.Jrds_cre_by = _jobHdr.Srb_cre_by;
                        _lst.Jrds_sjobno = _jobNo + "-" + _lst.Jrds_jobline;
                        _lst.Jrds_itm_cost = 0;
                        //     effect = _custServiceDAL.SAVE_SCV_JOB_DET_SUB(_lst);
                        _subLine++;
                    }
                }
            }

            if (_isProcess == 1)
            {
                _custServiceDAL.UpdateAgrSession(_jobHdr.Srb_otherref, _fromDate, _toDate, _jobNo);
            }
            if (withcon == false)
            {
                _custServiceDAL.TransactionCommit();
                _inventoryDAL.TransactionCommit();

            }
            //_custServiceDAL.TransactionCommit();
            //_inventoryDAL.TransactionCommit();

            _err = "Successfully Saved!\nSystem generated req no is " + _jobNo;

            effect = 1;
            _jNo = _jobNo;

            return effect;
        }

        //add by tharanga 2018/10/15
      
        public Int32 update_svc_hdr_cst_exdate(string _jobno, Int32 _jobline, DateTime _date, string _user, out string _err)
        {
            try
            {
                _custServiceDAL = new CustServiceDAL();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                int x = _custServiceDAL.update_svc_hdr_cst_exdate(_jobno, _jobline, _date, _user);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                _err = string.Empty;
                return x;
            }
            catch (Exception ex)
            {
                _custServiceDAL.TransactionRollback();
                _err = ex.Message;
                return -1;
            }
        }
        public DataTable GET_WRR_INVTRYDET_BY_SUBDOC(string doc)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GET_WRR_INVTRYDET_BY_SUBDOC(doc);
        }
        public Int32 Save_Job_common(Service_JOB_HDR _jobHdr, List<Service_job_Det> _jobItems, List<Service_Job_Defects> _jobDefList, List<Service_Tech_Aloc_Hdr> _jobEmpList, List<Service_Job_Det_Sub> _jobDetSubList, RecieptHeader _recHeader, List<RecieptItem> _recItems, List<ImageUploadDTO> _imgList, MasterAutoNumber _recAuto, string _sbChnl, string _itemType, string _brand, Int32 _warStus, MasterAutoNumber _masterAuto, out string _err, out string _jNo, out string _receiptNo, List<ServiceTechAlocSupervice> _supervisor = null, Int32 _autoStartJob = 0, List<Transport> transportList = null,
        CustServiceDAL _CustServiceDALcopy = null, GeneralDAL _GeneralDALcopy = null, InventoryDAL _InventoryDALcopy = null, ReptCommonDAL _ReptCommonDALcopy = null, SalesDAL _SalesDALcopy = null, Boolean is_con_copen = false)
        {

            // _custServiceDAL = new CustServiceDAL();
            //_generalDAL = new GeneralDAL();
            //_inventoryDAL = new InventoryDAL();
            //_inventoryRepDAL = new ReptCommonDAL();
            //_salesDAL = new SalesDAL();


            int effect = 0;
            string _jobNo = "";
            bool _is_Auto_no_reset = false;
            string _locLetter = "";
            string _com = _jobHdr.SJB_COM;
            int _auto_no_group = 0;
            string _warStatus = "";
            string _docMonth = _jobHdr.SJB_DT.ToString("MM"); string _docYear = _jobHdr.SJB_DT.ToString("yy"); string _docDate = _jobHdr.SJB_DT.ToString("dd");
            string _reqCate = "";
            bool _isMonthAdv = false;
            int SeqNo = 0;
            int _jobItmLine = 1;
            int _subLine = 0;
            bool _isStockUpdate = false;
            string _aodOutNo = string.Empty;
            string _aodOutLoc = string.Empty;
            string _aodInLoc = string.Empty;
            string _aodInNo = string.Empty;
            string _pc = string.Empty;
            string _itmCate1 = string.Empty;      //kapila 6/10/2015
            string _locCode = ""; //kapila 2/3/2016

            _jNo = string.Empty;
            _receiptNo = string.Empty;
            string _errorInfor = string.Empty;
            try
            {
                if (is_con_copen == false)//add by tharanga 2018/06/22
                {
                    _custServiceDAL = new CustServiceDAL();
                    _generalDAL = new GeneralDAL();
                    _inventoryDAL = new InventoryDAL();
                    _inventoryRepDAL = new ReptCommonDAL();
                    _salesDAL = new SalesDAL();
                    _custServiceDAL.ConnectionOpen();
                }
                else
                {

                    _custServiceDAL = _CustServiceDALcopy;
                    _generalDAL = _GeneralDALcopy;
                    _inventoryDAL = _InventoryDALcopy;
                    _inventoryRepDAL = _ReptCommonDALcopy;
                    _salesDAL = _SalesDALcopy;
                }
                //_custServiceDAL = new CustServiceDAL();
                //_generalDAL = new GeneralDAL();
                //_inventoryDAL = new InventoryDAL();
                //_inventoryRepDAL = new ReptCommonDAL();
                //_salesDAL = new SalesDAL();
                //_custServiceDAL.ConnectionOpen();

                foreach (Service_job_Det _lstJob in _jobItems)
                {
                    _pc = _lstJob.Jbd_pc;
                    _locCode = _lstJob.Jbd_loc;
                    _itmCate1 = _lstJob.Jbd_cate1;
                    if (_lstJob.Jbd_isexternalitm == 0)
                    {
                        MasterItem _mitm = _inventoryDAL.GetItem("", _lstJob.Jbd_itm_cd);

                        if (_mitm.Mi_is_ser1 == 1)
                        {
                            #region Get Supplier
                            if (string.IsNullOrEmpty(_lstJob.Jbd_supp_cd) || _lstJob.Jbd_supp_cd.ToUpper() == "N/A")
                            {
                                DataTable _dtSupp = new DataTable();
                                _dtSupp = _generalDAL.GetSerialSupplierCode(_jobHdr.SJB_COM, _lstJob.Jbd_itm_cd, _lstJob.Jbd_ser1, 1);
                                if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                {
                                    for (int i = 0; i < _dtSupp.Rows.Count; i++)
                                    {
                                        _lstJob.Jbd_supp_cd = _dtSupp.Rows[i]["EXPORTER"].ToString();
                                        break;
                                    }
                                }
                                else
                                {
                                    _dtSupp = new DataTable();
                                    _dtSupp = _generalDAL.GetSerialSupplierCode(_jobHdr.SJB_COM, _lstJob.Jbd_itm_cd, _lstJob.Jbd_ser1, 2);
                                    if (_dtSupp != null && _dtSupp.Rows.Count > 0)
                                    {
                                        for (int j = 0; j < _dtSupp.Rows.Count; j++)
                                        {
                                            _lstJob.Jbd_supp_cd = _dtSupp.Rows[j]["EXPORTER"].ToString();
                                            break;
                                        }
                                    }
                                }
                            }
                            #endregion
                            #region Get Serial ID
                            //Update Cancelled Warranty
                            if (_lstJob.Jbd_isstockupdate == 1)
                            {
                                effect = _custServiceDAL.Save_CancelledwarrantyActive(_lstJob.Jbd_itm_cd, _lstJob.Jbd_ser1, null);
                            }

                            List<InventorySerialMaster> _serMst = _custServiceDAL.GetWarrantyMasterSCM2(_lstJob.Jbd_itm_cd, _lstJob.Jbd_ser1, null, null, null, null, 0);
                            if (_serMst != null && _serMst.Count > 0)
                            {
                                _lstJob.Jbd_ser_id = _serMst[0].Irsm_ser_id.ToString();
                            }
                            else
                            {
                                //_custServiceDAL.Save_Inr_SerMst_Bulk(_lstJob.Jbd_warr); 
                            }
                            #endregion
                        }
                        else
                        {
                            #region Get Serial ID - Non Serial
                            //Update Cancelled Warranty
                            if (_lstJob.Jbd_isstockupdate == 1)
                            {
                                effect = _custServiceDAL.Save_CancelledwarrantyActive(null, null, _lstJob.Jbd_warr);
                            }

                            List<InventorySerialMaster> _serMst = _custServiceDAL.GetWarrantyMasterSCM2(null, null, null, null, _lstJob.Jbd_warr, null, 0);
                            if (_serMst != null && _serMst.Count > 0)
                            {
                                _lstJob.Jbd_ser_id = _serMst[0].Irsm_ser_id.ToString();
                            }
                            #endregion
                        }
                    }
                }

                if (is_con_copen == false)
                {
                    _custServiceDAL.ConnectionClose();
                    _custServiceDAL = new CustServiceDAL();
                }

                MasterAutoNumber _ReqInsAuto = new MasterAutoNumber();
                _ReqInsAuto.Aut_cate_cd = _jobHdr.SJB_COM;
                _ReqInsAuto.Aut_cate_tp = "PC";
                _ReqInsAuto.Aut_direction = 1;
                _ReqInsAuto.Aut_modify_dt = null;
                _ReqInsAuto.Aut_moduleid = "TECH";
                _ReqInsAuto.Aut_number = 0;
                _ReqInsAuto.Aut_start_char = "TECH";
                _ReqInsAuto.Aut_year = null;

                DataTable _dtSbChnl = _generalDAL.getSubChannelDet(_jobHdr.SJB_COM, _sbChnl);
                if (_dtSbChnl == null)
                {
                    effect = -1;
                    _err = "Service channel " + _sbChnl + " has not define system generated no format!";
                    return 0;
                }
                _is_Auto_no_reset = Convert.ToBoolean(_dtSbChnl.Rows[0]["mssc_is_reset_autono"]);
                _auto_no_group = Convert.ToInt32(_dtSbChnl.Rows[0]["mssc_auto_no_grp"]);
                _is_Auto_no_reset = Convert.ToBoolean(_dtSbChnl.Rows[0]["mssc_is_reset_autono"]);

                MasterLocation _loc = _generalDAL.GetLocationByLocCode(_jobHdr.SJB_COM, _locCode);
                if (_loc == null)
                {
                    effect = -1;
                    _err = "Location - " + _masterAuto.Aut_cate_cd + " invalid or inactive.";
                    return 0;
                }
                _locLetter = _loc.Ml_anal5;

                //kapila 20/4/2016
                if (_locLetter == null)
                {
                    effect = -1;
                    _err = "Analysis 5 is not defined. Contact IT Dept. Location - " + _masterAuto.Aut_cate_cd;
                    return 0;
                }
                if (is_con_copen == true)
                {

                    _custServiceDAL = _CustServiceDALcopy;
                    _generalDAL = _GeneralDALcopy;
                    _inventoryDAL = _InventoryDALcopy;
                    _inventoryRepDAL = _ReptCommonDALcopy;
                    _salesDAL = _SalesDALcopy;

                }
                else
                {
                    _custServiceDAL.ConnectionOpen(); _custServiceDAL.BeginTransaction();
                    _inventoryDAL.ConnectionOpen(); _inventoryDAL.BeginTransaction();
                    _inventoryRepDAL.ConnectionOpen(); _inventoryRepDAL.BeginTransaction();
                    _salesDAL.ConnectionOpen(); _salesDAL.BeginTransaction();
                }
                if (_jobHdr.SJB_RECALL == 0)
                {
                    #region job no creation
                    int jobSeqNo = _custServiceDAL.GetJobSerialID();
                    _jobHdr.SJB_SEQ_NO = jobSeqNo;

                    _warStatus = (_warStus == 1) ? "U" : "O";
                    _masterAuto.Aut_start_char = _locLetter;

                    //kapila 13/8/2015
                    if (_auto_no_group == 3)    //ELABD channel
                        _masterAuto.Aut_start_char = _jobHdr.SJB_JOBCAT;

                    //_masterAuto.Aut_modify_dt = _jobHdr.SJB_DT.Date;
                    var _firstDay = new DateTime(_jobHdr.SJB_DT.Date.Year, _jobHdr.SJB_DT.Date.Month, 1);
                    _masterAuto.Aut_modify_dt = _firstDay.Date;
                    // _reqCate = Mid(txtCategory.Text.Trim, 1, 1)

                    //check for month advancement
                    if (_is_Auto_no_reset == true)
                    {
                        //check month is changed
                        _isMonthAdv = _custServiceDAL.IsMonthAdvance(_jobHdr.SJB_COM, _jobHdr.SJB_DT, _masterAuto.Aut_moduleid, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd);
                        if (_isMonthAdv == false)     //new month
                        { SeqNo = 1; }
                        else
                        { SeqNo = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, _masterAuto.Aut_modify_dt, _masterAuto.Aut_year).Aut_number; }

                        //_inventoryDAL.UpdateAutoNumber(_masterAuto);
                    }
                    else
                    {
                        // add by akila 2017/07/15 when _is_Auto_no_reset == false same number series will be continue. 
                        //Aut_start_char - N is a harcode character use to deferanticate with other number series.
                        _masterAuto.Aut_start_char = "N";
                        SeqNo = _inventoryDAL.GetAutoNumber(_masterAuto.Aut_moduleid, _masterAuto.Aut_direction, _masterAuto.Aut_start_char, _masterAuto.Aut_cate_tp, _masterAuto.Aut_cate_cd, null, null).Aut_number;
                    }
                    _inventoryDAL.UpdateAutoNumber(_masterAuto);

                    if (_auto_no_group == 1)
                        //_jobNo = _warStatus + _brand + _locLetter + _itemType + "/" + _masterAuto.Aut_cate_cd + "/" + _docMonth + _docYear + "-" + SeqNo.ToString("0000");
                        _jobNo = _warStatus + _brand.Substring(0, 2) + "/" + _masterAuto.Aut_cate_cd + "/" + _docMonth + _docYear + _jobHdr.SJB_JOBCAT.Substring(0, 1) + SeqNo.ToString("0000");

                    if (_auto_no_group == 2)
                        _jobNo = _warStatus + _brand.Substring(0, 2) + "/" + _masterAuto.Aut_cate_cd + "/" + _docMonth + _docYear + "-" + SeqNo.ToString("0000");
                    if (_auto_no_group == 3)    //ELABD channel
                        _jobNo = _warStatus + _brand.Substring(0, 2) + "/" + _masterAuto.Aut_cate_cd + "/" + _docMonth + _docYear + _jobHdr.SJB_JOBCAT.Substring(0, 1) + SeqNo.ToString("0000");
                    if (_auto_no_group == 4)        //kapila 6/10/2015
                        _jobNo = _masterAuto.Aut_cate_cd + "/" + _warStatus + _itmCate1.Substring(0, 2) + "/" + _docMonth + _docYear + "-" + _jobHdr.SJB_JOBCAT.Substring(0, 1) + SeqNo.ToString("0000");
                    if (_auto_no_group == 5)        //THARANGA 2018/06/25 WALLAWATHTHA NEW JOB FORMAT
                        _jobNo = _jobHdr.SJB_LOC.Substring(0, 1) + _warStatus + _brand.Substring(0, 2) + _itmCate1.Substring(0, 2) + _jobHdr.SJB_DT.ToString("ddMMyy") + _jobHdr.SJB_JOBCAT.Substring(0, 1) + SeqNo.ToString("0000");
                    // _jobNo = _masterAuto.Aut_cate_cd + "/" + _warStatus + _itmCate1.Substring(0, 2) + "/" + _docMonth + _docYear + "-" + _jobHdr.SJB_JOBCAT.Substring(0, 1) + SeqNo.ToString("0000");
                    if (_auto_no_group == 6)        //THARANGA 2019/02/13 asanka requermrnt
                        _jobNo = _warStatus + _brand.Substring(0, 2) + "/" + _masterAuto.Aut_cate_cd + "/" + _itmCate1.Substring(0, 2) + "/" + _docMonth + _docYear + _jobHdr.SJB_JOBCAT.Substring(0, 1) + SeqNo.ToString("0000");                 


                    #endregion job no creation
                    _jobHdr.SJB_JOBNO = _jobNo;
                }
                else
                {
                    _jobNo = _jobHdr.SJB_JOBNO;
                }

                effect = _custServiceDAL.UpdateJobHeader(_jobHdr);

                //Service_Message_Template oTemplate = _custServiceDAL.GetMessageTemplates_byID(_jobHdr.SJB_COM, _sbChnl, 1);
                //Service_Message oMessage = new Service_Message();
                //oMessage.Sm_com = _jobHdr.SJB_COM;
                //oMessage.Sm_jobno = _jobHdr.SJB_JOBNO;
                //oMessage.Sm_joboline = 0;
                //oMessage.Sm_jobstage = _jobHdr.SJB_JOBSTAGE;
                //oMessage.Sm_ref_num = string.Empty;
                //oMessage.Sm_status = 0;
                //oMessage.Sm_msg_tmlt_id = 1;

                //_custServiceDAL.SaveServiceMsg(oMessage);

                #region save attached docs
                //kapila 17/2/2016 save attached documents
                Service_Chanal_parameter oPara = _generalDAL.GetChannelParamers(_jobHdr.SJB_COM, _locCode);

                string SaveLoc = oPara.SP_DOC_SAVE_PATH;

                if (oPara != null && oPara.SP_DOC_SAVE_PATH != null && !string.IsNullOrEmpty(oPara.SP_DOC_SAVE_PATH))
                {
                    foreach (ImageUploadDTO oSubItem in _imgList)
                    {
                        Service_JOB_HDR oHeader = _custServiceDAL.GetServiceJobHeader(oSubItem.JobNumber, _jobHdr.SJB_COM);

                        string JobNumber = string.Empty;
                        if (!string.IsNullOrEmpty(_jobHdr.SJB_REQNO))
                        {
                            JobNumber = _jobHdr.SJB_REQNO;
                        }
                        else
                        {
                            JobNumber = _jobHdr.SJB_JOBNO;
                        }

                        string folderName = JobNumber;
                        folderName = folderName.Replace('/', '_');
                        folderName = _jobHdr.SJB_DT.Year.ToString() + @"\" + folderName;
                        if (!Directory.Exists(SaveLoc + oHeader.SJB_DT.Year.ToString()))
                        {
                            Directory.CreateDirectory(SaveLoc + _jobHdr.SJB_DT.Year.ToString());
                        }
                        if (Directory.Exists(SaveLoc + folderName))
                        {
                            File.WriteAllBytes(SaveLoc + folderName + @"\" + oSubItem.FileName, oSubItem.image);
                        }
                        else
                        {
                            Directory.CreateDirectory(SaveLoc + folderName);
                            File.WriteAllBytes(SaveLoc + folderName + @"\" + oSubItem.FileName, oSubItem.image);
                        }
                        //kapila 16/2/2016
                        int _ef = _custServiceDAL.SaveJobImagePath(oSubItem.JobNumber, oSubItem.JobLine, oSubItem.SerialNo, oSubItem.ImageLine, SaveLoc, oSubItem.FileName);
                    }
                }

                #endregion

                if (_jobHdr.SJB_RECALL != 1)
                {
                    foreach (Service_job_Det _lstJob in _jobItems)
                    {
                        //_jobDefList.Where(x => x.SRD_JOB_LINE == _lstJob.Jbd_jobline).ToList().ForEach(x => x.SRD_JOB_LINE = _jobItmLine);

                        _lstJob.Jbd_seq_no = _jobHdr.SJB_SEQ_NO;
                        _lstJob.Jbd_jobno = _jobNo;
                        _lstJob.Jbd_stage = _jobHdr.SJB_JOBSTAGE;
                        //_lstJob.Jbd_sjobno = _jobNo + "-" + _jobItmLine;
                        //_lstJob.Jbd_jobline = _jobItmLine;

                        //_lstJob.Jbd_sjobno = _jobNo + "-" + _lstJob.Jbd_jobline;
                        _lstJob.Jbd_sjobno = _jobNo;

                        if (_jobHdr.SJB_RECALL == 2) if (_lstJob.Jbd_jobline == 1) _lstJob.Jbd_act = 1;
                        if (_lstJob.Jbd_isstockupdate == 1)
                        {
                            _isStockUpdate = true;
                            _aodOutNo = _lstJob.Jbd_aodissueno;
                            _aodOutLoc = _lstJob.Jbd_aodissueloc;
                            _aodInLoc = _lstJob.Jbd_loc;
                        }

                        // Nadeeka 12-06-2015
                        //if (_lstJob.Jbd_ser1 != "N/A")
                        //{
                        //    Int32 _rptCnt = 0;
                        //    _rptCnt = _custServiceDAL.GetSerRepeatTimes(_lstJob.Jbd_ser1, _lstJob.Jbd_itm_cd);
                        //    if (_rptCnt > 0)
                        //    {
                        //        _lstJob.Jbd_ser_repeat = _rptCnt + 1;
                        //    }
                        //    else
                        //    {
                        //        _lstJob.Jbd_ser_repeat = 0;
                        //    }
                        //}
                        //else
                        //{
                        //    _lstJob.Jbd_ser_repeat = 0;
                        //}


                        #region Assing parameters to getting refund credit definition

                        foreach (Service_job_Det _lstJobW in _jobItems)
                        {

                            //  string _brand = string.Empty;
                            string _cate1 = string.Empty;
                            string _cate2 = string.Empty;
                            string _des = string.Empty;
                            string _model = string.Empty;
                            string _cate3 = string.Empty;
                            Boolean _isskipApp = false;
                            DataTable _tblItem = _inventoryDAL.Get_Item_Infor(_lstJobW.Jbd_itm_cd);
                            foreach (DataRow r in _tblItem.Rows)
                            {
                                _brand = (string)r["mi_brand"];
                                _cate1 = (string)r["mi_cate_1"];
                                _cate2 = (string)r["mi_cate_2"];
                                _model = (string)r["mi_model"];
                                _des = (string)r["mi_shortdesc"];
                                _cate3 = (string)r["mi_cate_3"];

                            }



                            //Check Previous warranty replacements
                            Warr_Replacement_Det _chkPreWara = new Warr_Replacement_Det();
                            _chkPreWara = _custServiceDAL.GetWarrantyReplacementHistory(_lstJobW.Jbd_itm_cd, _lstJobW.Jbd_ser1, "C", _lstJobW.Jbd_warr);


                            //DataTable _invDet = _custServiceDAL.GetInvDetBySerId(_WRLP.Jbd_invc_no, Convert.ToInt32(_WRLP.Jbd_ser_id), _lstJobW.Jbd_itm_cd);
                            DataTable _invDetScm = new DataTable();
                            DataTable _invDet = new DataTable();
                            decimal _repVal = 0;
                            int _isSCM = 0;
                            if (!string.IsNullOrEmpty(_chkPreWara.Swr_ref))
                            {

                            }
                            else
                            {
                                _chkPreWara = _custServiceDAL.GetWarrantyReplacementHistory(_lstJobW.Jbd_itm_cd, _lstJobW.Jbd_ser1, "M", _lstJobW.Jbd_warr);
                            }

                            if (string.IsNullOrEmpty(_chkPreWara.Swr_ref))
                            {
                                _invDet = _custServiceDAL.GetInvDetBySerial(_lstJobW.Jbd_invc_no, _lstJobW.Jbd_ser1, _lstJobW.Jbd_itm_cd);

                            }
                            else
                            {
                                _invDet = _custServiceDAL.GetInvDetBySerial(_lstJobW.Jbd_invc_no, _chkPreWara.Swr_sal_ser, _chkPreWara.Swr_sal_itm);

                            }

                            if (_invDet == null || _invDet.Rows.Count == 0)
                            {
                                if (string.IsNullOrEmpty(_chkPreWara.Swr_ref))
                                {
                                    _invDet = _custServiceDAL.GetInvDetWithDofrmScm(_lstJobW.Jbd_invc_no, _lstJobW.Jbd_itm_cd, _lstJobW.Jbd_ser1);
                                    _isSCM = 1;
                                }
                                else
                                {
                                    _invDet = _custServiceDAL.GetInvDetWithDofrmScm(_lstJobW.Jbd_invc_no, _chkPreWara.Swr_sal_itm, _chkPreWara.Swr_sal_ser);
                                    _isSCM = 1;

                                }
                            }



                            if (_invDet != null && _invDet.Rows.Count > 0)
                            {
                                //Assing parameters to getting refund credit definition
                                DateTime _doDt = _invDet.Rows[0].Field<DateTime>("ith_doc_date");
                                DateTime _invDt = _invDet.Rows[0].Field<DateTime>("SAH_DT");
                                DateTime _delDt = _lstJobW.jbd_del_sale_dt;
                                string _accno = _invDet.Rows[0].Field<string>("sah_acc_no");


                                DateTime _periodCalDt = DateTime.Today;
                                if (_jobHdr.SJB_JOBSTP == "RCC")
                                {
                                    RCC _rccDet = _inventoryDAL.GetRCCbyNo(_jobHdr.SJB_REQNO);
                                    if (_rccDet != null)
                                    {
                                        _periodCalDt = _rccDet.Inr_dt;
                                    }
                                }
                                else
                                {
                                    _periodCalDt = _jobHdr.SJB_DT;
                                }

                                DateTime _processDt = _jobHdr.SJB_DT;
                                //int _period = (_periodCalDt.Month - _doDt.Month) + 12 * (_periodCalDt.Year - _doDt.Year);
                                //int _period =  (_periodCalDt.Month - _doDt.Month) + ((_periodCalDt.Year - _doDt.Year) * 12);

                                //int _period = (_periodCalDt.Year * _periodCalDt.Month) - (_doDt.Year * _doDt.Month);
                                //int _period = 0;
                                TimeSpan ts = _periodCalDt - _doDt;
                                int _periodN = ts.Days;


                                //int _period = _periodCalDt - _doDt;
                                //_salesDAL.GetSalesPriorityHierarchy(_company, _profitcenter, "PC_PRIT_HIERARCHY", "PC");
                                List<MasterSalesPriorityHierarchy> _Saleshir = _salesDAL.GetSalesPriorityHierarchy(_invDet.Rows[0].Field<string>("sah_com"), _invDet.Rows[0].Field<string>("sah_pc"), "PC_PRIT_HIERARCHY", "PC");

                                Refund_credit_definition _getCrParam = new Refund_credit_definition();
                                string _Subchannel = "";
                                string _Company = "";
                                decimal _rate = 0;
                                if (_isSCM == 0)
                                {
                                    //check PC
                                    _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "PC", _invDet.Rows[0].Field<string>("sah_pc"), _lstJobW.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);


                                    if (_getCrParam.Rrd_pt_cd == null)
                                    {
                                        if (_Saleshir != null)
                                        {
                                            if (_Saleshir.Count > 0)
                                            {
                                                _Subchannel = (from _lst in _Saleshir
                                                               where _lst.Mpi_cd == "SCHNL"
                                                               select _lst.Mpi_val).ToList<string>()[0];

                                                _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "SCHNL", _Subchannel, _lstJobW.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);

                                                if (_getCrParam.Rrd_pt_cd == null)
                                                {
                                                    if (_Saleshir.Count > 0)
                                                    {
                                                        _Company = (from _lst in _Saleshir
                                                                    where _lst.Mpi_cd == "COM"
                                                                    select _lst.Mpi_val).ToList<string>()[0];

                                                        _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "COM", _Company, _lstJobW.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (_getCrParam.Rrd_pt_cd != null)
                                    {
                                        _rate = _getCrParam.Rrd_val;
                                    }
                                    else
                                    {
                                        _rate = 100;
                                    }
                                }

                                else

                                // SCM
                                {
                                    // Refund_credit_definition _getCrParam = new Refund_credit_definition();

                                    //check PC
                                    _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "PC", _invDet.Rows[0].Field<string>("sah_pc"), _lstJobW.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);

                                    if (_getCrParam.Rrd_pt_cd == null)
                                    {

                                        _getCrParam = _custServiceDAL.GetRefundCreditDefinition(_invDet.Rows[0].Field<string>("sah_com"), "COM", _invDet.Rows[0].Field<string>("sah_com"), _lstJobW.Jbd_itm_cd, _cate1, _cate2, _cate3, _brand, _periodN, _processDt.Date, _invDt.Date);

                                    }

                                    if (_getCrParam.Rrd_pt_cd != null)
                                    {
                                        _rate = _getCrParam.Rrd_val;
                                    }
                                    else
                                    {
                                        _rate = 100;
                                    }

                                }


                                _lstJobW.Jbd_rep_perc = _rate;

                            }

                        }
                        #endregion




                        _errorInfor = "Item Job Line - " + _lstJob.Jbd_jobline;
                        effect = _custServiceDAL.UpdateJobDetail(_lstJob);
                        if (!string.IsNullOrEmpty(_lstJob.Jbd_reqno)) effect = _custServiceDAL.UpdateRequestItemViaJob(_lstJob);
                        //_jobItmLine = _jobItmLine + 1;


                        //   Service Schedule
                        // Nadeeka

                        if (_jobHdr.SJB_JOBTP == "I")
                        {
                            if (_lstJob.Jbd_is_service == 1)
                            {

                                if (_lstJob.Jbd_is_updatesch == 1)
                                {
                                    _custServiceDAL.Insert_ServiceShedule(_lstJob, 0, _jobHdr.SJB_CRE_DT);

                                    ////SCM Upload

                                    //SCMServiceSchedule _schedule = new SCMServiceSchedule();
                                    //_schedule.Serial_no = _lstJob.Jbd_ser1;
                                    //_schedule.Item_code = _lstJob.Jbd_itm_cd;
                                    //_schedule.Is_free = false;
                                    //_schedule.Item_status =  _lstJob.Jbd_itm_stus;
                                    //_schedule.Job_date = _jobHdr.SJB_DT;
                                    //_schedule.Job_no = _jobHdr.SJB_JOBNO;
                                    //_schedule.Service_term = _lstJob.Jbd_ser_term;
                                    //_schedule.Warr_no = _lstJob.Jbd_warr;
                                    //_schedule.Wr_period_alt_uom = "KM";
                                    //_schedule.Wr_period_uom = "KM";
                                    //_ScmCommonDAL.InsertUpdateServiceSchedule(_schedule, false);
                                }
                            }
                        }

                        //Tharaka on 2015-01-26
                        if (_lstJob.Jbd_stage == 3)
                        {
                            Service_Job_StageLog oLog1 = new Service_Job_StageLog();
                            oLog1.SJL_REQNO = "";
                            oLog1.SJL_JOBNO = _lstJob.Jbd_jobno;
                            oLog1.SJL_JOBLINE = _lstJob.Jbd_jobline;
                            oLog1.SJL_COM = _lstJob.Jbd_com;
                            oLog1.SJL_LOC = _lstJob.Jbd_loc;
                            oLog1.SJL_JOBSTAGE = 2;
                            oLog1.SJL_CRE_BY = _jobHdr.SJB_CRE_BY;
                            oLog1.SJL_CRE_DT = DateTime.Now;
                            oLog1.SJL_SESSION_ID = _jobHdr.SJB_SESSION_ID;
                            oLog1.SJL_INFSUP = 0;
                            int Effect1 = _custServiceDAL.Save_ServiceJobStageLog(oLog1);
                        }
                        //kapila 24/2/2016 get pending acceptance stage is allowed or not
                        decimal _jbStage = 3;
                        DataTable _dtPend = null;

                        if (_jobEmpList.Count > 0)
                        {
                            _dtPend = _custServiceDAL.GetPendingAcceptanceStatus(_jobHdr.SJB_COM, _lstJob.Jbd_loc, _jobHdr.SJB_JOBCAT);

                            if (_dtPend.Rows.Count > 0)
                                if (Convert.ToDecimal(_dtPend.Rows[0]["scs_pend_accept"]) == 1)
                                    _jbStage = Convert.ToDecimal(2.2);
                        }

                        Service_Job_StageLog oLog2 = new Service_Job_StageLog();
                        oLog2.SJL_REQNO = "";
                        oLog2.SJL_JOBNO = _lstJob.Jbd_jobno;
                        oLog2.SJL_JOBLINE = _lstJob.Jbd_jobline;
                        oLog2.SJL_COM = _lstJob.Jbd_com;
                        oLog2.SJL_LOC = _lstJob.Jbd_loc;
                        oLog2.SJL_JOBSTAGE = _jbStage;
                        oLog2.SJL_CRE_BY = _jobHdr.SJB_CRE_BY;
                        oLog2.SJL_CRE_DT = DateTime.Now;
                        oLog2.SJL_SESSION_ID = _jobHdr.SJB_SESSION_ID;
                        oLog2.SJL_INFSUP = 0;
                        int Effect2 = _custServiceDAL.Save_ServiceJobStageLog(oLog2);

                        //kapila 8/3/2016
                        int Effect3 = 0;
                        if (_jbStage == Convert.ToDecimal(2.2))
                            Effect3 = _custServiceDAL.Update_JobDetailStage(_lstJob.Jbd_jobno, _lstJob.Jbd_jobline, _jbStage);


                        // Nadeeka 23-03-2015
                        SCV_TRANS_LOG _jobTrans = new SCV_TRANS_LOG();
                        int SeqNum = _custServiceDAL.GetJobTransSeq();
                        _jobTrans.Stl_seq = SeqNum;
                        _jobTrans.Stl_jobseq = _lstJob.Jbd_seq_no;
                        _jobTrans.Stl_jobno = _lstJob.Jbd_jobno;
                        _jobTrans.Stl_jobline = _lstJob.Jbd_jobline;
                        _jobTrans.Stl_sjobno = _lstJob.Jbd_jobno;
                        _jobTrans.Stl_cur_loc = _lstJob.Jbd_loc;
                        _jobTrans.Stl_from_loc = _lstJob.Jbd_loc;
                        _jobTrans.Stl_cre_by = _jobHdr.SJB_CRE_BY;
                        _jobTrans.Stl_trns_dt = _jobHdr.SJB_DT.Date;
                        _custServiceDAL.Save_scv_JobTransfer(_jobTrans);


                        // THaraka 2015-01-28 Update warranty details
                        if (_jobHdr.JobCategori == 2 || _jobHdr.JobCategori == 3)
                        {
                            String BillingAddress = _jobHdr.SJB_B_ADD1 + ", " + _jobHdr.SJB_B_ADD2 + ", " + _jobHdr.SJB_B_ADD3;
                            String DiliveryAddress = _jobHdr.SJB_ADD1 + ", " + _jobHdr.SJB_ADD2 + ", " + _jobHdr.SJB_ADD3;

                            int result = _custServiceDAL.UPDATE_TEMPWARUPLOAD_BYWARR(_jobHdr.SJB_B_CUST_CD, _jobHdr.SJB_B_CUST_TIT, _jobHdr.SJB_B_CUST_NAME, BillingAddress, _jobHdr.SJB_B_TOWN, _jobHdr.SJB_B_PHNO, _jobHdr.SJB_B_MOBINO, _lstJob.Jbd_warr, _lstJob.Jbd_supp_cd);
                            result = _custServiceDAL.UPDATE_INRSEMST_BY_WARR(_jobHdr.SJB_COM, _lstJob.Jbd_warr, _jobHdr.SJB_B_CUST_CD, _jobHdr.SJB_B_CUST_TIT, _jobHdr.SJB_B_CUST_NAME, BillingAddress, DiliveryAddress, _jobHdr.SJB_B_TOWN, _jobHdr.SJB_B_PHNO, _jobHdr.SJB_B_MOBINO, _lstJob.Jbd_ser_id, _lstJob.Jbd_supp_cd);
                        }

                        //By Akila 2017/05/08 Save registration number in tempwarraupload
                        if (_jobHdr.JobCategori == 2 || _jobHdr.JobCategori == 3)
                        {
                            Int32 _affected = 0;
                            _affected = _custServiceDAL.UpdateTmpWarraUploadRegNo(_lstJob.Jbd_warr, _lstJob.Jbd_ser1, _lstJob.Jbd_regno, _jobHdr.SJB_MOD_BY);
                        }

                        //kapila 9/7/2015 --Remove by Chamal accouding to dead locks 27-08-2015
                        //#region update waranty master
                        //int _ef = _custServiceDAL.Update_War_Master(_lstJob.Jbd_warr, _lstJob.Jbd_ser2);
                        //#endregion

                    }
                }
                else
                {
                    foreach (Service_job_Det _lstJob in _jobItems)
                    {
                        //_lstJob.Jbd_stage = _jobHdr.SJB_JOBSTAGE;
                        //effect = _custServiceDAL.UpdateRequestItemViaJob(_lstJob);
                        if (_jobHdr.SJB_JOBSTAGE == 3)
                        {
                            effect = _custServiceDAL.Update_JobDetailStage(_lstJob.Jbd_jobno, _lstJob.Jbd_jobline, Convert.ToDecimal(3));
                            Service_Job_StageLog oLog = new Service_Job_StageLog();
                            oLog.SJL_REQNO = "";
                            oLog.SJL_JOBNO = _lstJob.Jbd_jobno;
                            oLog.SJL_JOBLINE = _lstJob.Jbd_jobline;
                            oLog.SJL_COM = _lstJob.Jbd_com;
                            oLog.SJL_LOC = _lstJob.Jbd_loc;
                            oLog.SJL_JOBSTAGE = 3;
                            oLog.SJL_CRE_BY = _jobHdr.SJB_CRE_BY;
                            oLog.SJL_CRE_DT = DateTime.Now;
                            oLog.SJL_SESSION_ID = _jobHdr.SJB_SESSION_ID;
                            oLog.SJL_INFSUP = 0;
                            effect = _custServiceDAL.Save_ServiceJobStageLog(oLog);
                        }
                    }
                }
                foreach (Service_Job_Defects _lstJobDef in _jobDefList)
                {
                    _lstJobDef.SRD_SEQ_NO = _jobHdr.SJB_SEQ_NO;
                    _lstJobDef.SRD_JOB_NO = _jobNo;
                    //_lstJobDef.SRD_JOB_LINE =_jobItmLine;
                    _lstJobDef.SRD_STAGE = "J";
                    //_lstJobDef.SRD_DEF_LINE = _subLine;
                    _lstJobDef.SRD_CRE_BY = _jobHdr.SJB_CRE_BY;
                    _lstJobDef.SRD_MOD_BY = _jobHdr.SJB_CRE_BY;
                    _lstJobDef.SRD_ACT = 1;

                    //foreach (Service_job_Det _lstJob in _jobItems.Where (x=> x.Jbd_jobline==_lstJobDef.SRD_JOB_LINE))
                    //{
                    //    // Nadeeka 12-06-2015
                    //    if (_lstJob.Jbd_ser1 != "N/A")
                    //    {
                    //        Int32 _rptCnt = 0;
                    //        _rptCnt = _custServiceDAL.GetDefectRepeatTimes(_lstJob.Jbd_ser1, _lstJob.Jbd_itm_cd, _lstJobDef.SRD_DEF_TP);
                    //        if (_rptCnt > 0)
                    //        {
                    //            _lstJobDef.srd_def_repeat = _rptCnt + 1;
                    //        }
                    //        else
                    //        {
                    //            _lstJobDef.srd_def_repeat = 0;
                    //        }
                    //    }
                    //    else
                    //    {
                    //        _lstJobDef.srd_def_repeat = 0;
                    //    }
                    //}


                    Int32 eff1 = _custServiceDAL.UpdateJobDefects(_lstJobDef);
                    _subLine++;
                }

                if (_jobDetSubList != null)
                {
                    if (_jobDetSubList.Count > 0)
                    {
                        Int32 result2 = _custServiceDAL.DELETE_JOB_DET_SUB(_jobHdr.SJB_SEQ_NO, _jobNo, _jobDetSubList[0].JBDS_JOBLINE);
                        foreach (Service_Job_Det_Sub _lst in _jobDetSubList)
                        {
                            _lst.JBDS_SEQ_NO = _jobHdr.SJB_SEQ_NO;
                            _lst.JBDS_JOBNO = _jobNo;
                            MasterItem _mitm = _inventoryDAL.GetItem("", _lst.JBDS_ITM_CD);
                            _lst.JBDS_BRAND = _mitm.Mi_brand;
                            _lst.JBDS_MODEL = _mitm.Mi_model;
                            _lst.JBDS_CRE_BY = _jobHdr.SJB_CRE_BY;
                            _lst.JBDS_SJOBNO = _jobNo + "-" + _lst.JBDS_JOBLINE;
                            _lst.JBDS_ITM_COST = 0;
                            _errorInfor = _errorInfor + "\n Sub Job Seq - " + _lst.JBDS_SEQ_NO + "\nJob Line - " + _lst.JBDS_JOBLINE + "\nItem Code - " + _lst.JBDS_ITM_CD + "\nSerial No -" + _lst.JBDS_SER1;
                            effect = _custServiceDAL.SAVE_SCV_JOB_DET_SUB(_lst);
                            _subLine++;
                        }
                    }
                }

                if (_jobEmpList != null)
                {
                    if (_jobEmpList.Count > 0)
                    {

                        foreach (Service_Tech_Aloc_Hdr _lst in _jobEmpList)
                        {
                            _lst.STH_JOBNO = _jobNo;
                            _lst.STH_TP = "J";
                            //effect = _custServiceDAL.Update_TechAllocationStatus(_lst.STH_JOBNO, _lst.STH_JOBLINE, "R", _jobHdr.SJB_COM);
                            if (_lst.STH_ALOCNO == "")
                            {
                                MasterAutoNumber _reversInv = _inventoryDAL.GetAutoNumber(_ReqInsAuto.Aut_moduleid, _ReqInsAuto.Aut_direction, _ReqInsAuto.Aut_start_char, _ReqInsAuto.Aut_cate_tp, _ReqInsAuto.Aut_cate_cd, _ReqInsAuto.Aut_modify_dt, _ReqInsAuto.Aut_year);
                                _reversInv.Aut_modify_dt = null;
                                _reversInv.Aut_year = null;
                                string _vouNo = _reversInv.Aut_start_char + "-" + _reversInv.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                                _inventoryDAL.UpdateAutoNumber(_reversInv);
                                _lst.STH_ALOCNO = _vouNo;
                            }
                            _lst.STH_STUS = "A";
                            _lst.STH_JOBNO = _jobNo;
                            _lst.STH_CURR_STUS = 1;
                            effect += _custServiceDAL.Save_TechnicianAllocatoinHEader(_lst);
                            Int32 result = _custServiceDAL.Save_TechnicianAllocatoinHEaderLog(_lst, _lst.STH_CRE_BY);
                        }

                        //Add by akila 2017/06/03
                        //if selected location has setuped as auto start job, update the jobe stage and tech allocated date time in job details
                        if ((_autoStartJob == 1) && (_jobHdr.SJB_JOBSTAGE <= 3))
                        {
                            if (_jobItems != null)
                            {
                                foreach (Service_job_Det _lstJob in _jobItems)
                                {
                                    _custServiceDAL.Update_Job_dates(_jobNo, _lstJob.Jbd_jobline, DateTime.Now, DateTime.MinValue, DateTime.Now, DateTime.MinValue);
                                    _custServiceDAL.Update_JobDetailStage(_jobNo, _lstJob.Jbd_jobline, 4);

                                    Service_Job_StageLog oLog = new Service_Job_StageLog();
                                    oLog.SJL_REQNO = "";
                                    oLog.SJL_JOBNO = _jobNo;
                                    oLog.SJL_JOBLINE = _lstJob.Jbd_jobline;
                                    oLog.SJL_COM = _lstJob.Jbd_com;
                                    oLog.SJL_LOC = _lstJob.Jbd_loc;
                                    oLog.SJL_JOBSTAGE = 4;
                                    oLog.SJL_CRE_BY = _jobHdr.SJB_CRE_BY;
                                    oLog.SJL_CRE_DT = DateTime.Now;
                                    oLog.SJL_SESSION_ID = _jobHdr.SJB_SESSION_ID;
                                    oLog.SJL_INFSUP = 0;
                                    _custServiceDAL.Save_ServiceJobStageLog(oLog);
                                }
                            }
                        }
                    }
                }

                //Add by akila 2015/05/06 Save Service allocated Supervisor
                if (_supervisor != null)
                {
                    if (_supervisor.Count > 0)
                    {
                        _supervisor.ForEach(x => x.Stas_Job_No = _jobNo);

                        foreach (ServiceTechAlocSupervice _record in _supervisor)
                        {
                            int effected = _custServiceDAL.SaveServiceAlocatedSupervicer(_record);
                            if (effected < 1) { throw new Exception("Couldn't save supervisor details"); }
                        }
                    }
                }

                if (!string.IsNullOrEmpty(_jobHdr.SJB_REQNO))
                {
                    List<Service_Req_Det> _reqList = new List<Service_Req_Det>();
                    bool _setOk = false;
                    _reqList = _custServiceDAL.GetServiceReqDetails(_jobHdr.SJB_COM, _locCode, _jobHdr.SJB_REQNO, 0);
                    if (_reqList == null) _setOk = true;
                    if (_reqList.Count <= 0) _setOk = true;
                    if (_setOk == true) _custServiceDAL.sp_update_reqhdr_via_job(_jobHdr);

                    if (_jobHdr.SJB_JOBSTP == "RCC")
                    {
                        RCC _rcc = new RCC();
                        _rcc.Inr_jb_no = _jobHdr.SJB_JOBNO;
                        _rcc.Inr_hollogram_no = "";
                        _rcc.Inr_anal1 = "";
                        _rcc.Inr_anal2 = "";
                        _rcc.Inr_anal7 = "";
                        _rcc.Inr_open_by = _jobHdr.SJB_CRE_BY;
                        _rcc.Inr_no = _jobHdr.SJB_REQNO;
                        _inventoryDAL.Update_RCC_JobOpen(_rcc);
                    }
                }

                //Add by akila 2017/06/15 Save transport details use in service
                if (is_con_copen == true)
                {


                    _generalDAL = _GeneralDALcopy;


                }
                else
                {
                    _generalDAL = new GeneralDAL();
                    _generalDAL.ConnectionOpen();
                    _generalDAL.BeginTransaction();
                }

                if (transportList != null)
                {
                    if (transportList.Count > 0)
                    {
                        foreach (Transport _element in transportList)
                        {
                            _element.Itrn_trns_no = _jobHdr.SJB_SEQ_NO.ToString();
                            _element.Itrn_ref_doc = _jobHdr.SJB_JOBNO;
                            _generalDAL.Save_Int_Transport(_element);
                        }
                    }
                }

                #region Generate AOD Inwards
                if (_jobHdr.SJB_RECALL == 0 && _isStockUpdate == true)
                {
                    string _binCode = _inventoryDAL.GetDefaultBinCode(_jobHdr.SJB_COM, _aodInLoc);
                    List<ReptPickSerials> _picklist = new List<ReptPickSerials>();
                    MasterItem _itmlist = new MasterItem();
                    InventoryHeader invHdr = new InventoryHeader();
                    MasterAutoNumber masterAutoNum = new MasterAutoNumber();
                    #region Inventory Header
                    invHdr.Ith_com = _jobHdr.SJB_COM;
                    invHdr.Ith_loc = _aodInLoc;
                    invHdr.Ith_oth_docno = _aodOutNo;
                    invHdr.Ith_doc_date = _jobHdr.SJB_DT.Date;
                    invHdr.Ith_doc_year = _jobHdr.SJB_DT.Date.Year;
                    invHdr.Ith_doc_tp = "AOD";
                    invHdr.Ith_cate_tp = "SERVICE";
                    invHdr.Ith_sub_tp = "NOR";
                    invHdr.Ith_is_manual = false;
                    invHdr.Ith_stus = "A";
                    invHdr.Ith_cre_by = _jobHdr.SJB_CRE_BY;
                    invHdr.Ith_mod_by = _jobHdr.SJB_MOD_BY;
                    invHdr.Ith_direct = true;
                    invHdr.Ith_session_id = _jobHdr.SJB_SESSION_ID;
                    invHdr.Ith_manual_ref = "N/A";
                    invHdr.Ith_remarks = _jobHdr.SJB_RMK;
                    invHdr.Ith_vehi_no = "N/A";
                    invHdr.Ith_bus_entity = "N/A";
                    invHdr.Ith_oth_com = _jobHdr.SJB_COM;
                    invHdr.Ith_oth_loc = _aodOutLoc;
                    invHdr.Ith_pc = "N/A";
                    invHdr.Ith_job_no = _jobHdr.SJB_JOBNO;
                    invHdr.Ith_sub_docno = _jobHdr.SJB_REQNO;
                    #endregion

                    #region Inventory Serials
                    DataTable _dt0 = new DataTable();
                    DataTable _dt00 = new DataTable();
                    _dt0 = _inventoryDAL.GetIntSerDetails(_aodOutNo);
                    _dt00 = _inventoryDAL.GetScmSerDetails(_aodOutNo);
                    _dt0.Merge(_dt00);
                    if (_dt0.Rows.Count > 0)
                    {
                        foreach (DataRow _dr in _dt0.Rows)
                        {
                            ReptPickSerials _pick = new ReptPickSerials();
                            _itmlist = _inventoryDAL.GetItem(_jobHdr.SJB_COM, (String)_dr["ITS_ITM_CD"]);
                            if (_itmlist != null)
                            {
                                _pick.Tus_base_doc_no = _aodOutNo;
                                _pick.Tus_base_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                                _pick.Tus_batch_line = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                                _pick.Tus_bin = _binCode;
                                _pick.Tus_com = _jobHdr.SJB_COM;
                                _pick.Tus_cre_by = _jobHdr.SJB_CRE_BY;
                                _pick.Tus_cre_dt = System.DateTime.Now;
                                _pick.Tus_cross_batchline = Convert.ToInt16(_dr["ITS_BATCH_LINE"]);
                                _pick.Tus_cross_itemline = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                                _pick.Tus_cross_seqno = Convert.ToInt32(_dr["ITS_SEQ_NO"]);
                                _pick.Tus_cross_serline = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                                _pick.Tus_doc_dt = _jobHdr.SJB_DT.Date;
                                _pick.Tus_doc_no = _aodOutNo;
                                _pick.Tus_exist_grncom = _dr["ITS_EXIST_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNCOM"];
                                _pick.Tus_exist_grnno = _dr["ITS_EXIST_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_GRNNO"];
                                _pick.Tus_exist_grndt = _dr["ITS_EXIST_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_EXIST_GRNDT"];
                                _pick.Tus_exist_supp = _dr["ITS_EXIST_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_EXIST_SUPP"];
                                _pick.Tus_itm_stus = (String)_dr["ITS_ITM_STUS"];
                                _pick.Tus_unit_price = Convert.ToDecimal(_dr["ITB_UNIT_PRICE"]);

                                _pick.Tus_ageloc = _dr["ITS_AGELOC"] == DBNull.Value ? string.Empty : (String)_dr["ITS_AGELOC"];
                                _pick.Tus_ageloc_dt = _dr["ITS_AGELOC_DT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_AGELOC_DT"];
                                if (string.IsNullOrEmpty(_dr["ITS_ISOWNMRN"].ToString()))
                                { _pick.Tus_isownmrn = 0; }
                                else
                                { _pick.Tus_isownmrn = Convert.ToInt32(_dr["ITS_ISOWNMRN"]); }

                                _pick.Tus_itm_brand = _itmlist.Mi_brand;
                                _pick.Tus_itm_cd = (String)_dr["ITS_ITM_CD"];
                                _pick.Tus_itm_desc = _itmlist.Mi_longdesc;
                                _pick.Tus_itm_line = Convert.ToInt16(_dr["ITS_ITM_LINE"]);
                                _pick.Tus_itm_model = _itmlist.Mi_model;
                                _pick.Tus_loc = _aodInLoc;
                                _pick.Tus_new_remarks = String.Empty;
                                _pick.Tus_new_status = String.Empty;

                                _pick.Tus_orig_grncom = _dr["ITS_ORIG_GRNCOM"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNCOM"];
                                _pick.Tus_orig_grndt = _dr["ITS_ORIG_GRNDT"] == DBNull.Value ? DateTime.MinValue : (DateTime)_dr["ITS_ORIG_GRNDT"];
                                _pick.Tus_orig_grnno = _dr["ITS_ORIG_GRNNO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_GRNNO"];
                                _pick.Tus_orig_supp = _dr["ITS_ORIG_SUPP"] == DBNull.Value ? string.Empty : (String)_dr["ITS_ORIG_SUPP"];

                                _pick.Tus_out_date = DateTime.Now.Date;
                                _pick.Tus_qty = 1;
                                _pick.Tus_seq_no = 0;
                                _pick.Tus_ser_1 = _dr["ITS_SER_1"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_1"];
                                _pick.Tus_ser_2 = _dr["ITS_SER_2"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_2"];
                                _pick.Tus_ser_3 = _dr["ITS_SER_3"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_3"];
                                _pick.Tus_ser_4 = _dr["ITS_SER_4"] == DBNull.Value ? string.Empty : (String)_dr["ITS_SER_4"];
                                _pick.Tus_ser_id = Convert.ToInt32(_dr["ITS_SER_ID"]);
                                _pick.Tus_ser_line = Convert.ToInt16(_dr["ITS_SER_LINE"]);
                                _pick.Tus_serial_id = String.Empty;
                                _pick.Tus_session_id = _jobHdr.SJB_SESSION_ID;
                                _pick.Tus_unit_cost = Convert.ToDecimal(_dr["ITS_UNIT_COST"]);

                                _pick.Tus_usrseq_no = 0;
                                _pick.Tus_warr_no = _dr["ITS_WARR_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITS_WARR_NO"];
                                _pick.Tus_warr_period = Convert.ToInt16(_dr["ITS_WARR_PERIOD"]);

                                _pick.Tus_job_no = _dr["ITB_JOB_NO"] == DBNull.Value ? string.Empty : (String)_dr["ITB_JOB_NO"]; //Add by Chamal/Suneth 21-Jan-2015
                                _pick.Tus_job_line = _dr["ITB_JOB_LINE"] == DBNull.Value ? 0 : Convert.ToInt16(_dr["ITB_JOB_LINE"]); //Add by Chamal/Suneth 21-Jan-2015 

                                _picklist.Add(_pick);
                                //_inventoryRepDAL.SavePickedItemSerials(_pick);
                            }
                        }
                    }

                    foreach (var _s in _picklist)
                    {
                        foreach (var _j in _jobItems)
                        {
                            if (_s.Tus_ser_id.ToString() == _j.Jbd_ser_id)
                            {
                                _s.Tus_job_no = _jobHdr.SJB_JOBNO;
                                _s.Tus_job_line = _j.Jbd_jobline;
                            }
                        }

                    }

                    var _listSerials = from list1 in _picklist
                                       join list2 in _jobItems
                                       on list1.Tus_ser_id.ToString() equals list2.Jbd_ser_id.ToString()
                                       where list1.Tus_ser_id.ToString() == list2.Jbd_ser_id.ToString()
                                       select list1;
                    List<ReptPickSerials> _picklistNew = new List<ReptPickSerials>();
                    _picklistNew = _listSerials.ToList();
                    #endregion

                    #region AOD In Auto Number
                    masterAutoNum.Aut_cate_cd = _aodInLoc;
                    masterAutoNum.Aut_cate_tp = "LOC";
                    masterAutoNum.Aut_direction = 1;
                    masterAutoNum.Aut_modify_dt = null;
                    masterAutoNum.Aut_year = _jobHdr.SJB_DT.Year;
                    masterAutoNum.Aut_moduleid = "AOD";
                    masterAutoNum.Aut_start_char = "AOD";
                    #endregion

                    #region Save AOD Inward

                    InventoryBLL _bll = new InventoryBLL();

                    #region Validation check duplicate serial(s)
                    MasterLocation _ageLoc = _generalDAL.GetLocationByLocCode(invHdr.Ith_com, invHdr.Ith_loc);
                    bool _isCheckLocAge = false;
                    DataTable _dtloctp = _generalDAL.GetLocTypes(_ageLoc.Ml_loc_tp);
                    if (_dtloctp.Rows.Count > 0) if (_dtloctp.Rows[0]["RLT_IS_LOCAGE"].ToString() == "1") _isCheckLocAge = true;

                    System.Text.StringBuilder _build = new System.Text.StringBuilder();
                    foreach (ReptPickSerials _srl in _picklist)
                    {
                        DataTable _byid = _inventoryDAL.CheckSerialByID(invHdr.Ith_com, invHdr.Ith_loc, _srl.Tus_ser_id);
                        DataTable _byserial = _inventoryDAL.CheckSerialBySerial(invHdr.Ith_com, invHdr.Ith_loc, _srl.Tus_itm_cd, _srl.Tus_ser_1);
                        if ((_byid != null && _byid.Rows.Count > 0) || (_byserial != null && _byserial.Rows.Count > 0)) if (_build == null) _build.Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id)); else _build.AppendLine().Append(" Item-").Append(_srl.Tus_itm_cd).Append(" | Serial-").Append(_srl.Tus_ser_1).Append(" | Id-").Append(Convert.ToString(_srl.Tus_ser_id));


                        if (_isCheckLocAge == true)
                        {
                            if (string.IsNullOrEmpty(_srl.Tus_ageloc))
                            {
                                _srl.Tus_ageloc_dt = invHdr.Ith_doc_date.Date;
                                _srl.Tus_ageloc = invHdr.Ith_loc;
                                _srl.Tus_isownmrn = 0;
                            }
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(_srl.Tus_ageloc))
                            {
                                if (_srl.Tus_ageloc != invHdr.Ith_loc)
                                {
                                    _srl.Tus_ageloc_dt = invHdr.Ith_doc_date.Date;
                                    _srl.Tus_ageloc = invHdr.Ith_loc;
                                    //Check MRN
                                    if (_generalDAL.CheckReqNo(invHdr.Ith_com, invHdr.Ith_loc, invHdr.Ith_oth_docno) == true)
                                    { _srl.Tus_isownmrn = 1; }
                                    else
                                    { _srl.Tus_isownmrn = 0; }
                                }
                            }
                            else
                            {
                                _srl.Tus_ageloc_dt = invHdr.Ith_doc_date.Date;
                                _srl.Tus_ageloc = invHdr.Ith_loc;
                                //Check MRN
                                if (_generalDAL.CheckReqNo(invHdr.Ith_com, invHdr.Ith_loc, invHdr.Ith_oth_docno) == true)
                                { _srl.Tus_isownmrn = 1; }
                                else
                                { _srl.Tus_isownmrn = 0; }
                            }
                        }
                    }
                    if (_build != null && !string.IsNullOrEmpty(_build.ToString()))
                    {
                        _err = "Please check the below item(s). These serial(s) /n serial id(s) are already available in your location./n " + _build.ToString(); effect = -1;
                        effect = -1;
                        _inventoryRepDAL.TransactionRollback();
                        _custServiceDAL.TransactionRollback();
                        _inventoryDAL.TransactionRollback();
                        return 0;
                    }
                    #endregion

                    //effect = _bll.SaveInwardScanSerial(invHdr, _picklist, null);
                    //effect = _bll.UpdateInventoryAutoNumber(invHdr, masterAutoNum, "+", out _aodInNo);

                    effect = _bll.ADJPluss_Service(_inventoryDAL, _inventoryRepDAL, _ScmCommonDAL, invHdr, _picklistNew, null, masterAutoNum, out _aodInNo);

                    foreach (ReptPickSerials _one in _picklistNew) _inventoryDAL.UpdateAODOUTPickItem(invHdr.Ith_oth_docno, _one.Tus_ser_id);
                    _inventoryDAL.UpdateAODOUT(invHdr.Ith_com, invHdr.Ith_oth_docno);

                    #endregion

                    #region Wimal 10/07/2018 check  auto aod in complete

                    decimal _intBatchQty = 0;
                    decimal _intBatchQtyForIntSer = 0;
                    decimal _inrBatchQty = 0;
                    decimal _intSerQty = 0;
                    decimal _inrSerQty = 0;

                    List<InventorySerialN> _intSerSaved = _inventoryDAL.GET_INT_SER_DATA_BY_SEQNO(invHdr.Ith_seq_no);
                    List<InventorySerialN> _inrSerSaved = _inventoryDAL.GET_INR_SER_DATA_BY_SEQNO(invHdr.Ith_seq_no);
                    List<InventoryBatchN> _intBatchSaved = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(invHdr.Ith_seq_no);
                    List<InventoryBatchN> _intBatchSavedSerialised = _inventoryDAL.GET_INT_BATCH_BY_SEQNO(invHdr.Ith_seq_no);
                    List<InventoryBatchRefN> _inrBatchSaved = _inventoryDAL.GET_INR_BATCH_BY_SEQNO(invHdr.Ith_seq_no);

                    _intBatchQty = _intBatchSaved.Sum(c => c.Itb_bal_qty1);
                    _intBatchQtyForIntSer = _intBatchSaved.Where(c => c.Tmp_is_serialized != -1).ToList().Sum(c => c.Itb_bal_qty1);
                    _inrBatchQty = _inrBatchSaved.Sum(c => c.Inb_qty);
                    _intSerQty = _intSerSaved.Count;
                    _inrSerQty = _inrSerSaved.Sum(c => c.Ins_available);

                    if (_intBatchQty == 0 || _inrBatchQty == 0) { throw new Exception("Process Terminated ! Inventory Balance mismatch [int Batch Vs inr Batch]"); }

                    #endregion

                }

                #endregion

                #region Payment
                if (_recHeader != null && _recItems != null && _recItems.Count > 0)
                {
                    Int32 RecieptSeqNo = _inventoryDAL.GetSerialID();
                    _recAuto.Aut_year = null;
                    MasterAutoNumber RecieptAuto = _inventoryDAL.GetAutoNumber(_recAuto.Aut_moduleid, _recAuto.Aut_direction, _recAuto.Aut_start_char, _recAuto.Aut_cate_tp, _recAuto.Aut_cate_cd, _recAuto.Aut_modify_dt, _recAuto.Aut_year);
                    _receiptNo = _recAuto.Aut_cate_cd + "-" + RecieptAuto.Aut_start_char + RecieptAuto.Aut_number.ToString("00000", CultureInfo.InvariantCulture);
                    _recAuto.Aut_year = null;
                    _recAuto.Aut_modify_dt = null;

                    _salesDAL.UpdateInvoiceAutoNumber(_recAuto);
                    decimal _ValidPeriod = _salesDAL.Get_MaxHpReceiptAmount("ADREFMAXDT", "COM", _recHeader.Sar_com_cd);
                    DateTime _validTo = _recHeader.Sar_receipt_date.AddDays(Convert.ToDouble(_ValidPeriod)).Date;

                    _recHeader.Sar_tot_settle_amt = _recItems.Sum(x => x.Sard_settle_amt);
                    _recHeader.Sar_seq_no = RecieptSeqNo;
                    _recHeader.Sar_receipt_no = _receiptNo;
                    _recHeader.Sar_acc_no = _jobNo;
                    _recHeader.Sar_ser_job_no = _jobNo;
                    _recHeader.SAR_VALID_TO = _validTo.Date;
                    _salesDAL.SaveReceiptHeader(_recHeader);

                    if (_recItems != null)
                        if (_recItems.Count > 0)
                        {
                            foreach (RecieptItem _itm in _recItems)
                            {
                                _itm.Sard_seq_no = RecieptSeqNo;
                                //_itm.Sard_inv_no = _invoiceHeader.Sah_inv_no;
                                _itm.Sard_receipt_no = _receiptNo;
                                _salesDAL.SaveReceiptItem(_itm);
                            }
                        }
                }

                if (!string.IsNullOrEmpty(_jobHdr.SJB_CHG_CD))
                {
                    Service_Job_Charges _jobCharge = new Service_Job_Charges();
                    _jobCharge.Sjc_seq_no = _jobHdr.SJB_SEQ_NO;
                    _jobCharge.Sjc_jobno = _jobNo;
                    _jobCharge.Sjc_jobline = 1;
                    _jobCharge.Sjc_chgline = 1;
                    _jobCharge.Sjc_itm_cd = _jobHdr.SJB_CHG_CD;
                    _jobCharge.Sjc_itm_stus = "GOD";
                    _jobCharge.Sjc_qty = 1;
                    _jobCharge.Sjc_unit_rt = _jobHdr.SJB_CHG;
                    _jobCharge.Sjc_rmk = _receiptNo;
                    _jobCharge.Sjc_act = 1;
                    _jobCharge.Sjc_cre_by = _jobHdr.SJB_CRE_BY;
                    _jobCharge.Sjc_stage = _jobHdr.SJB_JOBSTAGE;
                    _jobCharge.Sjc_used = 0;
                    if (!string.IsNullOrEmpty(_receiptNo)) _jobCharge.Sjc_used = 1;
                    _custServiceDAL.Save_Job_Charges(_jobCharge);
                }
                #endregion
                if (is_con_copen == false)
                {
                    _inventoryRepDAL.TransactionCommit();
                    _custServiceDAL.TransactionCommit();
                    _inventoryDAL.TransactionCommit();
                    _salesDAL.TransactionCommit();
                    _generalDAL.TransactionCommit();
                }
                if (_jobHdr.SJB_RECALL == 0 && _isStockUpdate == true)
                {
                    int _update = _inventoryDAL.UpdateAODInNoInJob(_jobHdr.SJB_JOBNO, _aodOutNo, _aodInNo);
                }
                if (_jobHdr.SJB_RECALL == 0)
                {
                    if (!string.IsNullOrEmpty(_aodInNo))
                    {
                        _err = "Successfully Saved!\nSystem generated job no is " + _jobNo + "\nAuto generated AOD receipt no - " + _aodInNo;
                    }
                    else
                    {
                        _err = "Successfully Saved!\nSystem generated job no is " + _jobNo;
                    }
                }
                else
                {
                    _err = "Job no - " + _jobNo + "\n" + "successfully updated!";
                }
                effect = 1;
                _jNo = _jobNo;
            }
            catch (Exception err)
            {
                effect = -1;
                _err = err.Message.ToString();
                if (_err.Contains("FK_JBDSSEQNO"))
                {
                    _err = "Unhandle exception found! FK_JBDSSEQNO " + "\n" + _errorInfor;
                }
                _inventoryRepDAL.TransactionRollback();
                _custServiceDAL.TransactionRollback();
                _inventoryDAL.TransactionRollback();
                _salesDAL.TransactionRollback();
                _generalDAL.TransactionRollback();
            }
            return effect;
        }

        public Int32 updateRequestHeader(Service_Req_Hdr _Service_Req_Hdr, out string _err)
        {
            Int32 effect = 0;
            try
            {
                _custServiceDAL = new CustServiceDAL();

                _custServiceDAL.ConnectionOpen();
                _custServiceDAL.BeginTransaction();

                effect = _custServiceDAL.updateRequestHeader(_Service_Req_Hdr);

                _custServiceDAL.TransactionCommit();
                _custServiceDAL.ConnectionClose();
                _err = string.Empty;
                return effect;
            }
            catch (Exception ex)
            {

                if (ex.Message.Contains("INR_DEF"))
                {
                    _err = "Reamarks exceeds the maximum length";
                }
                else
                {
                    _err = ex.Message;
                }
                _custServiceDAL.TransactionRollback();
             
                return -1;
                
            }
        }
        public DataTable GetCustomWorkingSheetHS(string docNo, string type)
        {
            _custServiceDAL = new CustServiceDAL();
            return _custServiceDAL.GetCustomWorkingSheetHS(docNo, type);
        }
 
   
    }

}

using FF.BusinessObjects;
using FF.BusinessObjects.BITool;
using FF.BusinessObjects.ReptObj;
using FF.DataAccessLayer;
using FF.DataAccessLayer.DashboardDAL;
using FF.Interfaces;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.ServiceModel;
using System.Text;
using System.IO;
using System.Drawing;
using System.Net.Mail;
using OfficeOpenXml;


namespace FF.BusinessLogicLayer
{
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    public class DashboardBLL : IDashboard
    {
        public DashboardDLL DashboardDal = null;
        public SalesDAL _SalesDAL = null;
        public SecurityDAL _securityDAL = null;
        public FinancialDAL _financialDAL = null;
        public ReptCommonDAL _reportDAL = null;
        public InventoryDAL _invdal = null;
        public GeneralDAL _generalDAL = null;

        public MasterLocation GetLocationByLocCode(string _CompCode, string _LocCode)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.GetLocationByLocCode(_CompCode, _LocCode);
        }

        public List<BMT_REF_HEAD> getBIToolProperties(string _searchValue, string _pageNum, string _pageSize, string _serachType, string _propertyType,string module)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getBIToolProperties(_searchValue, _pageNum, _pageSize, _serachType, _propertyType, module);
        }
        public List<BMT_REF_HEAD> getBIToolInventory(string _searchValue, string _pageNum, string _pageSize, string _serachType, string _propertyType)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getBIToolInventory(_searchValue, _pageNum, _pageSize, _serachType, _propertyType);
        }
        public List<BMT_REF_HEAD> getBIToolImport(string _searchValue, string _pageNum, string _pageSize, string _serachType, string _propertyType)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getBIToolImport(_searchValue, _pageNum, _pageSize, _serachType, _propertyType);
        }
        public List<BRAND_MNGR_SEARCH_HEAD> getBrandManagers(string pgeNum, string pgeSize, string searchFld, string searchVal, string companies)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getBrandManagers(pgeNum, pgeSize, searchFld, searchVal, companies);
        }

        public List<BMT_REF_HEAD> LoadBIToolDetailsByName(string _columnName)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.LoadBIToolDetailsByName(_columnName);
        }

        public List<BRAND_SEARCH_HEAD> getBrands(string pgeNum, string pgeSize, string searchFld, string searchVal, string brandMngr)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getBrands(pgeNum, pgeSize, searchFld, searchVal, brandMngr);
        }
        public List<BI_TRGT_SALE> getTargetAlignmentDataNew(string defby, string catedifon, string calccd, string pdcd, DateTime frmdt, DateTime todt, out string error)
        {
            error = "";
            DataTable result = new DataTable("tbl");
            List<BI_TRGT_SALE> data = new List<BI_TRGT_SALE>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_TARGETALIGNMENT_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                DateTime startDtCurrent = DateTime.MinValue;
                DateTime endDtCurrent = DateTime.MinValue;

                DateTime preYerdtStart = DateTime.MinValue;
                DateTime preYerdtEnd = DateTime.MinValue;
                startDtCurrent = frmdt;
                endDtCurrent = todt;
                preYerdtStart = startDtCurrent.AddYears(-1);
                preYerdtEnd = endDtCurrent.AddYears(-1);
                data = DashboardDal.getTargetSaleData(startDtCurrent, endDtCurrent, preYerdtStart, preYerdtEnd, defby, catedifon, calccd, pdcd);
                DashboardDal.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return data;
        }
        public List<TARGET_ALIGNMENT> getTargetAlignmentData(string selCompany, string type, string reptype, string Brand, string BrandMngr, string dtRange, string allbrnd, string allbrndmngr, string sesCompany, string defby, out string error)
        {
            error = string.Empty;
            List<TARGET_ALIGNMENT> finalDataActual = new List<TARGET_ALIGNMENT>();
            List<TARGET_ALIGNMENT> finalDataPre = new List<TARGET_ALIGNMENT>();
            List<TARGET_ALIGNMENT> finalDataFu = new List<TARGET_ALIGNMENT>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_TARGETALIGNMENT_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                DateTime startDtCurrent = DateTime.MinValue;
                DateTime endDtCurrent = DateTime.MinValue;

                DateTime preYerdtStart = DateTime.MinValue;
                DateTime preYerdtEnd = DateTime.MinValue;
                SAR_FOR_PD dateRange = new SAR_FOR_PD();//getTargetDateValues(sesCompany, dtRange, defby);
                startDtCurrent = Convert.ToDateTime(dateRange.SFP_FRM_PD);
                endDtCurrent = Convert.ToDateTime(dateRange.SFP_TO_PD);
                //startDtCurrent = Convert.ToDateTime("01-06-2016");
                //endDtCurrent = Convert.ToDateTime("30-06-2016");
                List<SAR_FOR_HED> hedData = DashboardDal.getTargetHedDetails(sesCompany, dtRange, defby);

                string filterVal = "";
                if (hedData.Count > 0)
                {
                    foreach (SAR_FOR_HED dta in hedData)
                    {
                        filterVal += dta.Sfh_def_cd + ",";
                    }
                    filterVal = filterVal.Remove(filterVal.Length - 1);
                }

                preYerdtStart = startDtCurrent.AddYears(-1);
                preYerdtEnd = endDtCurrent.AddYears(-1);

                string brandsdata = String.Empty;
                if (allbrnd == "false" || allbrndmngr == "false")
                {
                    if (Brand == "")
                    {
                        List<MST_BRND_ALLOC> GETbRANDS = DashboardDal.getBrandsCodesForManagers(BrandMngr);
                        if (GETbRANDS != null && GETbRANDS.Count > 0)
                        {
                            foreach (MST_BRND_ALLOC com in GETbRANDS)
                            {
                                brandsdata += com.MBA_BRND + ",";
                            }
                            brandsdata = brandsdata.Remove(selCompany.Length - 1);
                        }
                    }
                    else
                    {
                        brandsdata = Brand;
                    }
                }

                List<BMT_SALE> actualData = DashboardDal.getTargetAlignmentData(selCompany, brandsdata, allbrnd, allbrndmngr, startDtCurrent, endDtCurrent, defby, filterVal);
                List<BMT_SALE> pyData = DashboardDal.getTargetAlignmentData(selCompany, brandsdata, allbrnd, allbrndmngr, preYerdtStart, preYerdtEnd, defby, filterVal);
                List<SAR_FOR_DET> targetData = DashboardDal.getFutureTargetData(selCompany, brandsdata, allbrnd, allbrndmngr, preYerdtStart, preYerdtEnd, defby, filterVal, dtRange);
                if (actualData.Count > 0 || pyData.Count > 0 || targetData.Count > 0)
                {
                    List<TARGET_ALIGNMENT> actual = new List<TARGET_ALIGNMENT>();
                    List<TARGET_ALIGNMENT> PY = new List<TARGET_ALIGNMENT>();
                    List<TARGET_ALIGNMENT> future = new List<TARGET_ALIGNMENT>();
                    if (type == "bms_itm_cat1" && reptype == "bms_pc_cd")//1
                    {
                        foreach (BMT_SALE dtact in actualData)
                        {
                            TARGET_ALIGNMENT actact = new TARGET_ALIGNMENT();
                            actact.hiarachy = dtact.BMS_ITM_CAT1;
                            actact.cateCode = dtact.BMS_PC_CD;
                            actact.actualQuantity = dtact.BMS_D_QTY;
                            actact.actualSales = dtact.BMS_D_TOT_AMT;
                            actact.actualGP = dtact.BMS_GP;
                            actual.Add(actact);
                        }

                        foreach (BMT_SALE dtpy in pyData)
                        {
                            TARGET_ALIGNMENT pypy = new TARGET_ALIGNMENT();
                            pypy.hiarachy = dtpy.BMS_ITM_CAT1;
                            pypy.cateCode = dtpy.BMS_PC_CD;
                            pypy.pyQuantity = dtpy.BMS_D_QTY;
                            pypy.pySale = dtpy.BMS_D_TOT_AMT;
                            pypy.pyGP = dtpy.BMS_GP;
                            PY.Add(pypy);
                        }
                        foreach (SAR_FOR_DET dttgt in targetData)
                        {
                            TARGET_ALIGNMENT tgttgt = new TARGET_ALIGNMENT();
                            tgttgt.hiarachy = dttgt.Sfd_cat1;
                            tgttgt.cateCode = dttgt.Sfh_def_cd;
                            tgttgt.targetQuantity = dttgt.Sfd_qty;
                            tgttgt.targetSale = dttgt.Sfd_val;
                            tgttgt.targetGP = dttgt.Sfd_gp;
                            future.Add(tgttgt);
                        }
                        actual.AddRange(PY);
                        actual.AddRange(future);

                        //var futureSummery = (from p in targetData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.Sfd_cat1,
                        //                          cate2 = p.Sfh_def_cd,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         targetQuantity = t.Sum(p => p.Sfd_qty),
                        //                         targetSale = t.Sum(p => p.Sfd_val),
                        //                         targetGP = t.Sum(p => p.Sfd_gp)
                        //                     }).ToList();


                        //var actualSummary = (from p in actualData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.BMS_ITM_CAT1,
                        //                          cate2 = p.BMS_PC_CD,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                   {
                        //                       cateCode = t.Key.cate1,
                        //                       hiarachy = t.Key.cate2,
                        //                       actualQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                       actualSales = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                       actualGP = t.Sum(p => p.BMS_GP)
                        //                   }).ToList();
                        //var pySummery = (from p in pyData
                        //                 let k =
                        //                  new
                        //                  {
                        //                      cate1 = p.BMS_ITM_CAT1,
                        //                      cate2 = p.BMS_PC_CD,
                        //                  }
                        //                 group p by k into t
                        //                 select new TARGET_ALIGNMENT
                        //                 {
                        //                     cateCode = t.Key.cate1,
                        //                     hiarachy = t.Key.cate2,
                        //                     pyQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                     pySale = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                     pyGP = t.Sum(p => p.BMS_GP)
                        //                 }).ToList();

                        //actual = actualSummary;
                        //PY = pySummery;
                        //future = futureSummery;
                    }
                    else if (type == "bms_pc_cd" && reptype == "bms_itm_cat1")//2
                    {
                        foreach (BMT_SALE dtact in actualData)
                        {
                            TARGET_ALIGNMENT actact = new TARGET_ALIGNMENT();
                            actact.hiarachy = dtact.BMS_PC_CD;
                            actact.cateCode = dtact.BMS_ITM_CAT1;
                            actact.actualQuantity = dtact.BMS_D_QTY;
                            actact.actualSales = dtact.BMS_D_TOT_AMT;
                            actact.actualGP = dtact.BMS_GP;
                            actual.Add(actact);
                        }

                        foreach (BMT_SALE dtpy in pyData)
                        {
                            TARGET_ALIGNMENT pypy = new TARGET_ALIGNMENT();
                            pypy.hiarachy = dtpy.BMS_PC_CD;
                            pypy.cateCode = dtpy.BMS_ITM_CAT1;
                            pypy.pyQuantity = dtpy.BMS_D_QTY;
                            pypy.pySale = dtpy.BMS_D_TOT_AMT;
                            pypy.pyGP = dtpy.BMS_GP;
                            PY.Add(pypy);
                        }
                        foreach (SAR_FOR_DET dttgt in targetData)
                        {
                            TARGET_ALIGNMENT tgttgt = new TARGET_ALIGNMENT();
                            tgttgt.hiarachy = dttgt.Sfh_def_cd;
                            tgttgt.cateCode = dttgt.Sfd_cat1;
                            tgttgt.targetQuantity = dttgt.Sfd_qty;
                            tgttgt.targetSale = dttgt.Sfd_val;
                            tgttgt.targetGP = dttgt.Sfd_gp;
                            future.Add(tgttgt);
                        }
                        actual.AddRange(PY);
                        actual.AddRange(future);
                        //var futureSummery = (from p in targetData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.Sfh_def_cd,
                        //                          cate2 = p.Sfd_cat1,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         targetQuantity = t.Sum(p => p.Sfd_qty),
                        //                         targetSale = t.Sum(p => p.Sfd_val),
                        //                         targetGP = t.Sum(p => p.Sfd_gp)
                        //                     }).ToList();

                        //var actualSummary = (from p in actualData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.BMS_PC_CD,
                        //                          cate2 = p.BMS_ITM_CAT1,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         actualQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                         actualSales = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                         actualGP = t.Sum(p => p.BMS_GP)
                        //                     }).ToList();
                        //var pySummery = (from p in pyData
                        //                 let k =
                        //                  new
                        //                  {
                        //                      cate1 = p.BMS_PC_CD,
                        //                      cate2 = p.BMS_ITM_CAT1,
                        //                  }
                        //                 group p by k into t
                        //                 select new TARGET_ALIGNMENT
                        //                 {
                        //                     cateCode = t.Key.cate1,
                        //                     hiarachy = t.Key.cate2,
                        //                     pyQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                     pySale = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                     pyGP = t.Sum(p => p.BMS_GP)
                        //                 }).ToList();

                        //actual = actualSummary;
                        //PY = pySummery;
                        //future = futureSummery;
                    }
                    else if (type == "bms_itm_cat1" && reptype == "bms_pc_region")//3
                    {
                        foreach (BMT_SALE dtact in actualData)
                        {
                            TARGET_ALIGNMENT actact = new TARGET_ALIGNMENT();
                            actact.hiarachy = dtact.BMS_ITM_CAT1;
                            actact.cateCode = dtact.BMS_PC_REGION;
                            actact.actualQuantity = dtact.BMS_D_QTY;
                            actact.actualSales = dtact.BMS_D_TOT_AMT;
                            actact.actualGP = dtact.BMS_GP;
                            actual.Add(actact);
                        }

                        foreach (BMT_SALE dtpy in pyData)
                        {
                            TARGET_ALIGNMENT pypy = new TARGET_ALIGNMENT();
                            pypy.hiarachy = dtpy.BMS_ITM_CAT1;
                            pypy.cateCode = dtpy.BMS_PC_REGION;
                            pypy.pyQuantity = dtpy.BMS_D_QTY;
                            pypy.pySale = dtpy.BMS_D_TOT_AMT;
                            pypy.pyGP = dtpy.BMS_GP;
                            PY.Add(pypy);
                        }
                        foreach (SAR_FOR_DET dttgt in targetData)
                        {
                            TARGET_ALIGNMENT tgttgt = new TARGET_ALIGNMENT();
                            tgttgt.hiarachy = dttgt.Sfd_cat1;
                            tgttgt.cateCode = dttgt.Sfh_def_cd;
                            tgttgt.targetQuantity = dttgt.Sfd_qty;
                            tgttgt.targetSale = dttgt.Sfd_val;
                            tgttgt.targetGP = dttgt.Sfd_gp;
                            future.Add(tgttgt);
                        }
                        actual.AddRange(PY);
                        actual.AddRange(future);
                        //var futureSummery = (from p in targetData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.Sfd_cat1,
                        //                          cate2 = p.Sfh_def_cd,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         targetQuantity = t.Sum(p => p.Sfd_qty),
                        //                         targetSale = t.Sum(p => p.Sfd_val),
                        //                         targetGP = t.Sum(p => p.Sfd_gp)
                        //                     }).ToList();

                        //var actualSummary = (from p in actualData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.BMS_ITM_CAT1,
                        //                          cate2 = p.BMS_PC_REGION,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         actualQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                         actualSales = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                         actualGP = t.Sum(p => p.BMS_GP)
                        //                     }).ToList();
                        //var pySummery = (from p in pyData
                        //                 let k =
                        //                  new
                        //                  {
                        //                      cate1 = p.BMS_ITM_CAT1,
                        //                      cate2 = p.BMS_PC_REGION,
                        //                  }
                        //                 group p by k into t
                        //                 select new TARGET_ALIGNMENT
                        //                 {
                        //                     cateCode = t.Key.cate1,
                        //                     hiarachy = t.Key.cate2,
                        //                     pyQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                     pySale = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                     pyGP = t.Sum(p => p.BMS_GP)
                        //                 }).ToList();

                        //actual = actualSummary;
                        //PY = pySummery;
                        //future = futureSummery;
                    }
                    else if (type == "bms_pc_region" && reptype == "bms_itm_cat1")//4
                    {
                        foreach (BMT_SALE dtact in actualData)
                        {
                            TARGET_ALIGNMENT actact = new TARGET_ALIGNMENT();
                            actact.hiarachy = dtact.BMS_PC_REGION;
                            actact.cateCode = dtact.BMS_ITM_CAT1;
                            actact.actualQuantity = dtact.BMS_D_QTY;
                            actact.actualSales = dtact.BMS_D_TOT_AMT;
                            actact.actualGP = dtact.BMS_GP;
                            actual.Add(actact);
                        }

                        foreach (BMT_SALE dtpy in pyData)
                        {
                            TARGET_ALIGNMENT pypy = new TARGET_ALIGNMENT();
                            pypy.hiarachy = dtpy.BMS_PC_REGION;
                            pypy.cateCode = dtpy.BMS_ITM_CAT1;
                            pypy.pyQuantity = dtpy.BMS_D_QTY;
                            pypy.pySale = dtpy.BMS_D_TOT_AMT;
                            pypy.pyGP = dtpy.BMS_GP;
                            PY.Add(pypy);
                        }
                        foreach (SAR_FOR_DET dttgt in targetData)
                        {
                            TARGET_ALIGNMENT tgttgt = new TARGET_ALIGNMENT();
                            tgttgt.hiarachy = dttgt.Sfh_def_cd;
                            tgttgt.cateCode = dttgt.Sfd_cat1;
                            tgttgt.targetQuantity = dttgt.Sfd_qty;
                            tgttgt.targetSale = dttgt.Sfd_val;
                            tgttgt.targetGP = dttgt.Sfd_gp;
                            future.Add(tgttgt);
                        }
                        actual.AddRange(PY);
                        actual.AddRange(future);
                        //var futureSummery = (from p in targetData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.Sfh_def_cd,
                        //                          cate2 = p.Sfd_cat1,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         targetQuantity = t.Sum(p => p.Sfd_qty),
                        //                         targetSale = t.Sum(p => p.Sfd_val),
                        //                         targetGP = t.Sum(p => p.Sfd_gp)
                        //                     }).ToList();
                        //var actualSummary = (from p in actualData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.BMS_PC_REGION,
                        //                          cate2 = p.BMS_ITM_CAT1,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         actualQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                         actualSales = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                         actualGP = t.Sum(p => p.BMS_GP)
                        //                     }).ToList();
                        //var pySummery = (from p in pyData
                        //                 let k =
                        //                  new
                        //                  {
                        //                      cate1 = p.BMS_PC_REGION,
                        //                      cate2 = p.BMS_ITM_CAT1,
                        //                  }
                        //                 group p by k into t
                        //                 select new TARGET_ALIGNMENT
                        //                 {
                        //                     cateCode = t.Key.cate1,
                        //                     hiarachy = t.Key.cate2,
                        //                     pyQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                     pySale = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                     pyGP = t.Sum(p => p.BMS_GP)
                        //                 }).ToList();

                        //actual = actualSummary;
                        //PY = pySummery;
                        //future = futureSummery;
                    }
                    else if (type == "bms_itm_cat1" && reptype == "bms_pc_chnl")//5
                    {

                        foreach (BMT_SALE dtact in actualData)
                        {
                            TARGET_ALIGNMENT actact = new TARGET_ALIGNMENT();
                            actact.hiarachy = dtact.BMS_ITM_CAT1;
                            actact.cateCode = dtact.BMS_PC_CHNL;
                            actact.actualQuantity = dtact.BMS_D_QTY;
                            actact.actualSales = dtact.BMS_D_TOT_AMT;
                            actact.actualGP = dtact.BMS_GP;
                            actual.Add(actact);
                        }

                        foreach (BMT_SALE dtpy in pyData)
                        {
                            TARGET_ALIGNMENT pypy = new TARGET_ALIGNMENT();
                            pypy.hiarachy = dtpy.BMS_ITM_CAT1;
                            pypy.cateCode = dtpy.BMS_PC_CHNL;
                            pypy.pyQuantity = dtpy.BMS_D_QTY;
                            pypy.pySale = dtpy.BMS_D_TOT_AMT;
                            pypy.pyGP = dtpy.BMS_GP;
                            PY.Add(pypy);
                        }
                        foreach (SAR_FOR_DET dttgt in targetData)
                        {
                            TARGET_ALIGNMENT tgttgt = new TARGET_ALIGNMENT();
                            tgttgt.hiarachy = dttgt.Sfd_cat1;
                            tgttgt.cateCode = dttgt.Sfh_def_cd;
                            tgttgt.targetQuantity = dttgt.Sfd_qty;
                            tgttgt.targetSale = dttgt.Sfd_val;
                            tgttgt.targetGP = dttgt.Sfd_gp;
                            future.Add(tgttgt);
                        }
                        actual.AddRange(PY);
                        actual.AddRange(future);
                        //var futureSummery = (from p in targetData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.Sfd_cat1,
                        //                          cate2 = p.Sfh_def_cd,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         targetQuantity = t.Sum(p => p.Sfd_qty),
                        //                         targetSale = t.Sum(p => p.Sfd_val),
                        //                         targetGP = t.Sum(p => p.Sfd_gp)
                        //                     }).ToList();
                        //var actualSummary = (from p in actualData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.BMS_ITM_CAT1,
                        //                          cate2 = p.BMS_PC_CHNL,

                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         actualQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                         actualSales = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                         actualGP = t.Sum(p => p.BMS_GP)
                        //                     }).ToList();
                        //var pySummery = (from p in pyData
                        //                 let k =
                        //                  new
                        //                  {
                        //                      cate1 = p.BMS_ITM_CAT1,
                        //                      cate2 = p.BMS_PC_CHNL,
                        //                  }
                        //                 group p by k into t
                        //                 select new TARGET_ALIGNMENT
                        //                 {
                        //                     cateCode = t.Key.cate1,
                        //                     hiarachy = t.Key.cate2,
                        //                     pyQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                     pySale = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                     pyGP = t.Sum(p => p.BMS_GP)
                        //                 }).ToList();

                        //actual = actualSummary;
                        //PY = pySummery;
                        //future = futureSummery;
                    }
                    else if (type == "bms_pc_chnl" && reptype == "bms_itm_cat1")//6
                    {
                        foreach (BMT_SALE dtact in actualData)
                        {
                            TARGET_ALIGNMENT actact = new TARGET_ALIGNMENT();
                            actact.hiarachy = dtact.BMS_PC_CHNL;
                            actact.cateCode = dtact.BMS_ITM_CAT1;
                            actact.actualQuantity = dtact.BMS_D_QTY;
                            actact.actualSales = dtact.BMS_D_TOT_AMT;
                            actact.actualGP = dtact.BMS_GP;
                            actual.Add(actact);
                        }

                        foreach (BMT_SALE dtpy in pyData)
                        {
                            TARGET_ALIGNMENT pypy = new TARGET_ALIGNMENT();
                            pypy.hiarachy = dtpy.BMS_PC_CHNL;
                            pypy.cateCode = dtpy.BMS_ITM_CAT1;
                            pypy.pyQuantity = dtpy.BMS_D_QTY;
                            pypy.pySale = dtpy.BMS_D_TOT_AMT;
                            pypy.pyGP = dtpy.BMS_GP;
                            PY.Add(pypy);
                        }
                        foreach (SAR_FOR_DET dttgt in targetData)
                        {
                            TARGET_ALIGNMENT tgttgt = new TARGET_ALIGNMENT();
                            tgttgt.hiarachy = dttgt.Sfh_def_cd;
                            tgttgt.cateCode = dttgt.Sfd_cat1;
                            tgttgt.targetQuantity = dttgt.Sfd_qty;
                            tgttgt.targetSale = dttgt.Sfd_val;
                            tgttgt.targetGP = dttgt.Sfd_gp;
                            future.Add(tgttgt);
                        }
                        actual.AddRange(PY);
                        actual.AddRange(future);
                        //var futureSummery = (from p in targetData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.Sfh_def_cd,
                        //                          cate2 = p.Sfd_cat1,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         targetQuantity = t.Sum(p => p.Sfd_qty),
                        //                         targetSale = t.Sum(p => p.Sfd_val),
                        //                         targetGP = t.Sum(p => p.Sfd_gp)
                        //                     }).ToList();
                        //var actualSummary = (from p in actualData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.BMS_PC_CHNL,
                        //                          cate2 = p.BMS_ITM_CAT1,

                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         actualQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                         actualSales = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                         actualGP = t.Sum(p => p.BMS_GP)
                        //                     }).ToList();
                        //var pySummery = (from p in pyData
                        //                 let k =
                        //                  new
                        //                  {
                        //                      cate1 = p.BMS_PC_CHNL,
                        //                      cate2 = p.BMS_ITM_CAT1,

                        //                  }
                        //                 group p by k into t
                        //                 select new TARGET_ALIGNMENT
                        //                 {
                        //                     cateCode = t.Key.cate1,
                        //                     hiarachy = t.Key.cate2,
                        //                     pyQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                     pySale = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                     pyGP = t.Sum(p => p.BMS_GP)
                        //                 }).ToList();

                        //actual = actualSummary;
                        //PY = pySummery;
                        //future = futureSummery;
                    }

                    else if (type == "bms_itm_cat1" && reptype == "bms_pc_zone")//7
                    {
                        foreach (BMT_SALE dtact in actualData)
                        {
                            TARGET_ALIGNMENT actact = new TARGET_ALIGNMENT();
                            actact.hiarachy = dtact.BMS_ITM_CAT1;
                            actact.cateCode = dtact.BMS_PC_ZONE;
                            actact.actualQuantity = dtact.BMS_D_QTY;
                            actact.actualSales = dtact.BMS_D_TOT_AMT;
                            actact.actualGP = dtact.BMS_GP;
                            actual.Add(actact);
                        }

                        foreach (BMT_SALE dtpy in pyData)
                        {
                            TARGET_ALIGNMENT pypy = new TARGET_ALIGNMENT();
                            pypy.hiarachy = dtpy.BMS_ITM_CAT1;
                            pypy.cateCode = dtpy.BMS_PC_ZONE;
                            pypy.pyQuantity = dtpy.BMS_D_QTY;
                            pypy.pySale = dtpy.BMS_D_TOT_AMT;
                            pypy.pyGP = dtpy.BMS_GP;
                            PY.Add(pypy);
                        }
                        foreach (SAR_FOR_DET dttgt in targetData)
                        {
                            TARGET_ALIGNMENT tgttgt = new TARGET_ALIGNMENT();
                            tgttgt.hiarachy = dttgt.Sfd_cat1;
                            tgttgt.cateCode = dttgt.Sfh_def_cd;
                            tgttgt.targetQuantity = dttgt.Sfd_qty;
                            tgttgt.targetSale = dttgt.Sfd_val;
                            tgttgt.targetGP = dttgt.Sfd_gp;
                            future.Add(tgttgt);
                        }
                        actual.AddRange(PY);
                        actual.AddRange(future);
                        //var futureSummery = (from p in targetData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.Sfd_cat1,
                        //                          cate2 = p.Sfh_def_cd,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         targetQuantity = t.Sum(p => p.Sfd_qty),
                        //                         targetSale = t.Sum(p => p.Sfd_val),
                        //                         targetGP = t.Sum(p => p.Sfd_gp)
                        //                     }).ToList();
                        //var actualSummary = (from p in actualData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.BMS_ITM_CAT1,
                        //                          cate2 = p.BMS_PC_ZONE,

                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         actualQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                         actualSales = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                         actualGP = t.Sum(p => p.BMS_GP)
                        //                     }).ToList();
                        //var pySummery = (from p in pyData
                        //                 let k =
                        //                  new
                        //                  {
                        //                      cate1 = p.BMS_ITM_CAT1,
                        //                      cate2 = p.BMS_PC_ZONE,
                        //                  }
                        //                 group p by k into t
                        //                 select new TARGET_ALIGNMENT
                        //                 {
                        //                     cateCode = t.Key.cate1,
                        //                     hiarachy = t.Key.cate2,
                        //                     pyQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                     pySale = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                     pyGP = t.Sum(p => p.BMS_GP)
                        //                 }).ToList();

                        //actual = actualSummary;
                        //PY = pySummery;
                        //future = futureSummery;
                    }
                    else if (type == "bms_pc_zone" && reptype == "bms_itm_cat1")//8
                    {
                        foreach (BMT_SALE dtact in actualData)
                        {
                            TARGET_ALIGNMENT actact = new TARGET_ALIGNMENT();
                            actact.hiarachy = dtact.BMS_PC_ZONE;
                            actact.cateCode = dtact.BMS_ITM_CAT1;
                            actact.actualQuantity = dtact.BMS_D_QTY;
                            actact.actualSales = dtact.BMS_D_TOT_AMT;
                            actact.actualGP = dtact.BMS_GP;
                            actual.Add(actact);
                        }

                        foreach (BMT_SALE dtpy in pyData)
                        {
                            TARGET_ALIGNMENT pypy = new TARGET_ALIGNMENT();
                            pypy.hiarachy = dtpy.BMS_PC_ZONE;
                            pypy.cateCode = dtpy.BMS_ITM_CAT1;
                            pypy.pyQuantity = dtpy.BMS_D_QTY;
                            pypy.pySale = dtpy.BMS_D_TOT_AMT;
                            pypy.pyGP = dtpy.BMS_GP;
                            PY.Add(pypy);
                        }
                        foreach (SAR_FOR_DET dttgt in targetData)
                        {
                            TARGET_ALIGNMENT tgttgt = new TARGET_ALIGNMENT();
                            tgttgt.hiarachy = dttgt.Sfh_def_cd;
                            tgttgt.cateCode = dttgt.Sfd_cat1;
                            tgttgt.targetQuantity = dttgt.Sfd_qty;
                            tgttgt.targetSale = dttgt.Sfd_val;
                            tgttgt.targetGP = dttgt.Sfd_gp;
                            future.Add(tgttgt);
                        }
                        actual.AddRange(PY);
                        actual.AddRange(future);
                        //var futureSummery = (from p in targetData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.Sfh_def_cd,
                        //                          cate2 = p.Sfd_cat1,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         targetQuantity = t.Sum(p => p.Sfd_qty),
                        //                         targetSale = t.Sum(p => p.Sfd_val),
                        //                         targetGP = t.Sum(p => p.Sfd_gp)
                        //                     }).ToList();
                        //var actualSummary = (from p in actualData
                        //                     let k =
                        //                      new
                        //                      {
                        //                          cate1 = p.BMS_PC_ZONE,
                        //                          cate2 = p.BMS_ITM_CAT1,
                        //                      }
                        //                     group p by k into t
                        //                     select new TARGET_ALIGNMENT
                        //                     {
                        //                         cateCode = t.Key.cate1,
                        //                         hiarachy = t.Key.cate2,
                        //                         actualQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                         actualSales = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                         actualGP = t.Sum(p => p.BMS_GP)
                        //                     }).ToList();
                        //var pySummery = (from p in pyData
                        //                 let k =
                        //                  new
                        //                  {
                        //                      cate1 = p.BMS_PC_ZONE,
                        //                      cate2 = p.BMS_ITM_CAT1,
                        //                  }
                        //                 group p by k into t
                        //                 select new TARGET_ALIGNMENT
                        //                 {
                        //                     cateCode = t.Key.cate1,
                        //                     hiarachy = t.Key.cate2,
                        //                     pyQuantity = t.Sum(p => p.BMS_D_QTY),
                        //                     pySale = t.Sum(p => p.BMS_D_TOT_AMT),
                        //                     pyGP = t.Sum(p => p.BMS_GP)
                        //                 }).ToList();

                        //actual = actualSummary;
                        //PY = pySummery;
                        //future = futureSummery;
                    }

                    finalDataActual = (from p in actual
                                       let k =
                                        new
                                        {
                                            cate1 = p.cateCode,
                                            cate2 = p.hiarachy,
                                        }
                                       group p by k into t
                                       select new TARGET_ALIGNMENT
                                       {
                                           cateCode = t.Key.cate1,
                                           hiarachy = t.Key.cate2,
                                           targetSale = t.Sum(p => p.targetSale),
                                           targetGP = t.Sum(p => p.targetGP),
                                           targetQuantity = t.Sum(p => p.targetQuantity),
                                           targerGPPer = t.Sum(p => p.targerGPPer),
                                           pySale = t.Sum(p => p.pySale),
                                           pyGP = t.Sum(p => p.pyGP),
                                           pyQuantity = t.Sum(p => p.pyQuantity),
                                           pyGPPer = t.Sum(p => p.pyGPPer),
                                           actualSales = t.Sum(p => p.actualSales),
                                           actualGP = t.Sum(p => p.actualGP),
                                           actualQuantity = t.Sum(p => p.actualQuantity),
                                           actualGPPer = t.Sum(p => p.actualGPPer),
                                           vsTargetSale = t.Sum(p => p.vsTargetSale),
                                           vsTargetGP = t.Sum(p => p.vsTargetGP),
                                           vsTargetQuantity = t.Sum(p => p.vsTargetQuantity),
                                           vsTargetGPPer = t.Sum(p => p.vsTargetGPPer),
                                           vsPySale = t.Sum(p => p.vsPySale),
                                           vsPyGP = t.Sum(p => p.vsPyGP),
                                           vsPyQuantity = t.Sum(p => p.vsPyQuantity),
                                           vsPyGPPer = t.Sum(p => p.vsPyGPPer)
                                       }).ToList();
                    foreach (TARGET_ALIGNMENT item in finalDataActual)
                    {
                        if (item.actualSales != 0)
                        {
                            item.actualGPPer = Math.Round((item.actualGP / item.actualSales) * 100, 2);
                        }
                        else
                        {
                            item.actualGPPer = 0;
                        }
                        if (item.pySale != 0)
                        {
                            item.pyGPPer = Math.Round((item.pyGP / item.pySale) * 100, 2);
                        }
                        else
                        {
                            item.pyGPPer = 0;
                        }
                        if (item.targetSale != 0)
                        {
                            item.targerGPPer = Math.Round((item.targetGP / item.targetSale) * 100, 2);
                        }
                        else
                        {
                            item.targerGPPer = 0;
                        }
                        if (item.targetSale != 0)
                        {
                            item.vsTargetSale = Math.Round((item.actualSales / item.targetSale) * 100, 2);
                        }
                        else
                        {
                            item.vsTargetSale = 0;
                        }

                        if (item.targetQuantity != 0)
                        {
                            item.vsTargetQuantity = Math.Round((item.actualQuantity / item.targetQuantity) * 100, 2);
                        }
                        else
                        {
                            item.vsTargetQuantity = 0;
                        }
                        if (item.targetGP != 0)
                        {
                            item.vsTargetGP = Math.Round((item.actualGP / item.targetGP) * 100, 2);
                        }
                        else
                        {
                            item.vsTargetGP = 0;
                        }





                        if (item.targetSale != 0)
                        {
                            item.vsPySale = Math.Round((item.pySale / item.targetSale) * 100, 2);
                        }
                        else
                        {
                            item.vsTargetSale = 0;
                        }

                        if (item.targetQuantity != 0)
                        {
                            item.vsPyQuantity = Math.Round((item.pyQuantity / item.targetQuantity) * 100, 2);
                        }
                        else
                        {
                            item.vsTargetQuantity = 0;
                        }
                        if (item.targetGP != 0)
                        {
                            item.vsTargetGPPer = Math.Round((item.pyGP / item.targetGP) * 100, 2);
                        }
                        else
                        {
                            item.vsTargetGP = 0;
                        }
                    }
                    //foreach (TARGET_ALIGNMENT item in actual)
                    //{
                    //    TARGET_ALIGNMENT trg = new TARGET_ALIGNMENT();
                    //    trg.cateCode = item.cateCode;
                    //    trg.hiarachy = item.hiarachy;
                    //    trg.actualQuantity = Math.Round(item.actualQuantity, 2);
                    //    trg.actualSales = Math.Round(item.actualSales, 2);
                    //    trg.actualGP = Math.Round(item.actualGP, 2);
                    //    if (item.actualSales != 0)
                    //    {
                    //        trg.actualGPPer = Math.Round((item.actualGP / item.actualSales) * 100, 2);
                    //    }
                    //    else
                    //    {
                    //        trg.actualGPPer = 0;
                    //    }
                    //    if (PY.Count > 0)
                    //    {
                    //        bool has = PY.Any(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);
                    //        if (has)
                    //        {
                    //            var newPY = PY.First(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);
                    //            trg.pySale = newPY.pySale;
                    //            trg.pyQuantity = newPY.pyQuantity;
                    //            trg.pyGP = newPY.pyGP;
                    //            if (newPY.pySale != 0)
                    //            {
                    //                trg.pyGPPer = (newPY.pyGP / newPY.pySale);
                    //            }
                    //            else
                    //            {
                    //                trg.pyGPPer = 0;
                    //            }
                    //        }
                    //    }
                    //    if (future.Count > 0)
                    //    {
                    //        bool has = future.Any(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);
                    //        if (has)
                    //        {
                    //            var newFuture = future.First(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);//
                    //            trg.targetSale = newFuture.targetSale;
                    //            trg.targetQuantity = newFuture.targetQuantity;
                    //            trg.targerGPPer = newFuture.targerGPPer;
                    //        }
                    //    }
                    //    finalDataActual.Add(trg);
                    //}
                    //foreach (TARGET_ALIGNMENT item in future)
                    //{
                    //    TARGET_ALIGNMENT trg = new TARGET_ALIGNMENT();
                    //    trg.cateCode = item.cateCode;
                    //    trg.hiarachy = item.hiarachy;
                    //    trg.targetQuantity = Math.Round(item.targetQuantity, 2);
                    //    trg.targetSale = Math.Round(item.targetSale, 2);
                    //    trg.targetGP = Math.Round(item.targetGP, 2);
                    //    if (item.targetSale != 0)
                    //    {
                    //        trg.targerGPPer = Math.Round((item.targetGP / item.targetSale) * 100, 2);
                    //    }
                    //    else
                    //    {
                    //        trg.targerGPPer = 0;
                    //    }
                    //    if (PY.Count > 0)
                    //    {
                    //        bool has = PY.Any(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);
                    //        if (has)
                    //        {
                    //            var newPY = PY.First(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);
                    //            trg.pySale = newPY.pySale;
                    //            trg.pyQuantity = newPY.pyQuantity;
                    //            trg.pyGP = newPY.pyGP;
                    //            if (newPY.pySale != 0)
                    //            {
                    //                trg.pyGPPer = (newPY.pyGP / newPY.pySale);
                    //            }
                    //            else
                    //            {
                    //                trg.pyGPPer = 0;
                    //            }
                    //        }
                    //    }
                    //    if (actual.Count > 0)
                    //    {
                    //        bool has = actual.Any(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);
                    //        if (has)
                    //        {
                    //            var newActual = actual.First(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);//
                    //            trg.actualSales = newActual.actualSales;
                    //            trg.actualQuantity = newActual.actualQuantity;
                    //            trg.actualGPPer = newActual.actualGPPer;
                    //        }
                    //    }
                    //    finalDataFu.Add(trg);
                    //}
                    //foreach (TARGET_ALIGNMENT item in PY)
                    //{
                    //    TARGET_ALIGNMENT trg = new TARGET_ALIGNMENT();
                    //    trg.cateCode = item.cateCode;
                    //    trg.hiarachy = item.hiarachy;
                    //    trg.pyQuantity = Math.Round(item.pyQuantity, 2);
                    //    trg.pySale = Math.Round(item.pySale, 2);
                    //    trg.pyGP = Math.Round(item.pyGP, 2);
                    //    if (item.pySale != 0)
                    //    {
                    //        trg.pyGPPer = Math.Round((item.pyGP / item.pySale) * 100, 2);
                    //    }
                    //    else
                    //    {
                    //        trg.actualGPPer = 0;
                    //    }
                    //    if (future.Count > 0)
                    //    {

                    //        bool has = future.Any(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);
                    //        if (has)
                    //        {
                    //            var newFu = future.First(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);
                    //            trg.targetSale = newFu.targetSale;
                    //            trg.targetQuantity = newFu.targetQuantity;
                    //            trg.targetGP = newFu.targetGP;
                    //            if (item.targetSale != 0)
                    //            {
                    //                trg.targerGPPer = Math.Round((newFu.targetGP / newFu.targetSale) * 100, 2);
                    //            }
                    //            else
                    //            {
                    //                trg.targerGPPer = 0;
                    //            }
                    //        }
                    //    }
                    //    if (actual.Count > 0)
                    //    {
                    //        bool has = actual.Any(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);
                    //        if (has)
                    //        {
                    //            var newActual = actual.First(x => x.hiarachy == item.hiarachy && x.cateCode == item.cateCode);//
                    //            trg.actualSales = newActual.actualSales;
                    //            trg.actualQuantity = newActual.actualQuantity;
                    //            trg.actualGPPer = newActual.actualGPPer;
                    //        }
                    //    }
                    //    finalDataPre.Add(trg);
                    //}
                }

                //finalDataActual.AddRange(finalDataFu);
                //finalDataActual.AddRange(finalDataPre);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            DashboardDal.ConnectionClose();
            _securityDAL.ConnectionClose();

            return finalDataActual;
        }

        private DataTable _filterBMSales(DataTable _dtResults1, Dictionary<string, string[]> dataValues)
        {
            //Filter           
            string[] _filter;
            string _filter2 = "";

            foreach (KeyValuePair<string, string[]> pair in dataValues)
            {
                _filter2 = "";
                _filter = pair.Value.ToArray();

                //[0]: {[company, System.String[]]}
                if (pair.Key.ToString() == "company")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_com_cd ='" + _item + "'";
                    }
                }
                //[1]: {[item, System.String[]]}
                if (pair.Key.ToString() == "item")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cd ='" + _item + "'";
                    }
                }
                //[2]: {[circular, System.String[]]}
                if (pair.Key.ToString() == "circular")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_circular ='" + _item + "'";
                    }
                }
                //[3]: {[area, System.String[]]}
                if (pair.Key.ToString() == "area")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_area ='" + _item + "'";
                    }
                }
                //[4]: {[model, System.String[]]}
                if (pair.Key.ToString() == "model")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_mdl ='" + _item + "'";
                    }
                }
                //[5]: {[shmTyp, System.String[]]}
                if (pair.Key.ToString() == "shmTyp")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_scheme_tp ='" + _item + "'";
                    }
                }
                //[6]: {[region, System.String[]]}
                if (pair.Key.ToString() == "region")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_region ='" + _item + "'";
                    }
                }
                //[7]: {[brand, System.String[]]}
                if (pair.Key.ToString() == "brand")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_brnd_cd ='" + _item + "'";
                    }
                }
                //[8]: {[schmCd, System.String[]]}
                if (pair.Key.ToString() == "schmCd")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_scheme_cd ='" + _item + "'";
                    }
                }
                //[9]: {[zone, System.String[]]}
                if (pair.Key.ToString() == "zone")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_zone ='" + _item + "'";
                    }
                }
                //[10]: {[cat1, System.String[]]}
                if (pair.Key.ToString() == "cat1")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat1 ='" + _item + "'";
                    }
                }
                //[11]: {[priceBk, System.String[]]}
                if (pair.Key.ToString() == "priceBk")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pb_cd ='" + _item + "'";
                    }
                }
                //[12]: {[PC, System.String[]]}
                if (pair.Key.ToString() == "PC")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_cd ='" + _item + "'";
                    }
                }
                //[13]: {[cat2, System.String[]]}
                if (pair.Key.ToString() == "cat2")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat2 ='" + _item + "'";
                    }
                }
                //[14]: {[priceLvl, System.String[]]}
                if (pair.Key.ToString() == "priceLvl")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pb_lvl ='" + _item + "'";
                    }
                }
                //[15]: {[chnl, System.String[]]}
                if (pair.Key.ToString() == "chnl")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_chnl ='" + _item + "'";
                    }
                }
                //[16]: {[cat3, System.String[]]}
                if (pair.Key.ToString() == "cat3")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat3 ='" + _item + "'";
                    }
                }
                //[17]: {[invTyp, System.String[]]}
                if (pair.Key.ToString() == "invTyp")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_inv_tp ='" + _item + "'";
                    }
                }
                //[18]: {[schnl, System.String[]]}
                if (pair.Key.ToString() == "schnl")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_sub_chnl ='" + _item + "'";
                    }
                }
                //[19]: {[cat4, System.String[]]}
                if (pair.Key.ToString() == "cat4")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat4 ='" + _item + "'";
                    }
                }
                //[20]: {[invSubTyp, System.String[]]}
                if (pair.Key.ToString() == "invSubTyp")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_inv_sub_tp ='" + _item + "'";
                    }
                }
                //[22]: {[cat5, System.String[]]}
                if (pair.Key.ToString() == "cat5")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat5 ='" + _item + "'";
                    }
                }
                //[23]: {[customer, System.String[]]}
                if (pair.Key.ToString() == "customer")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_cust_cd ='" + _item + "'";
                    }
                }
                //[24]: {[delivCustomer, System.String[]]}
                if (pair.Key.ToString() == "delivCustomer")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_d_cust_cd ='" + _item + "'";
                    }
                }
                //[25]: {[executive, System.String[]]}
                if (pair.Key.ToString() == "executive")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_exec_cd ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "custown")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_cust_town ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "cusdtown")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_d_cust_town ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "mnPC")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_main_pc ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "promotor")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_promoter_cd ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "admin")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_admin_team ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "teaml")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_tm_ldr ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "mangr")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_mgr ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "itmsts")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_stus ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "ltltyp")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_loyalty_type ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "ltlno")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_loyalty_no ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "exPC")
                {
                    string _filterx = "";
                    foreach (string _item in _filter)
                    {
                        //if (_filter2 != "")
                        //{ _filter2 = _filter2 + " or "; }
                        //_filter2 = _filter2 + "bms_pc_cd <>'" + _item + "'";
                        if (_filterx == "")
                        {
                            _filterx = "'" + _item + "'";
                        }
                        else
                        {
                            _filterx = _filterx + ",'" + _item + "'";
                        }
                    }
                    if (_filterx != "")
                    {
                        _filter2 = _filter2 + "bms_pc_cd not in (" + _filterx + ")";
                    }

                }

                if (_filter2 != "")
                {
                    var filteredDataRows1 = _dtResults1.Select(_filter2);
                    var dt1 = new DataTable();
                    if (filteredDataRows1.Length != 0)
                        dt1 = filteredDataRows1.CopyToDataTable();
                    else
                        dt1 = _dtResults1.Clone();
                    //DataTable dt1 = _dtResults1.Select(_filter2).CopyToDataTable();
                    _dtResults1 = dt1;
                }

            }

            return _dtResults1;
        }
        private DataTable _filterBMSalesHP(DataTable _dtResults1, Dictionary<string, string[]> dataValues)
        {
            //Filter           
            string[] _filter;
            string _filter2 = "";

            foreach (KeyValuePair<string, string[]> pair in dataValues)
            {
                _filter2 = "";
                _filter = pair.Value.ToArray();

                //[0]: {[company, System.String[]]}
                if (pair.Key.ToString() == "company")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bhs_com ='" + _item + "'";
                    }
                }
                //[1]: {[item, System.String[]]}
                if (pair.Key.ToString() == "item")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cd ='" + _item + "'";
                    }
                }
                //[2]: {[circular, System.String[]]}
                if (pair.Key.ToString() == "circular")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_circular ='" + _item + "'";
                    }
                }
                //[3]: {[area, System.String[]]}
                if (pair.Key.ToString() == "area")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_area ='" + _item + "'";
                    }
                }
                //[4]: {[model, System.String[]]}
                if (pair.Key.ToString() == "model")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_mdl ='" + _item + "'";
                    }
                }
                //[5]: {[shmTyp, System.String[]]}
                if (pair.Key.ToString() == "shmTyp")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_scheme_tp ='" + _item + "'";
                    }
                }
                //[6]: {[region, System.String[]]}
                if (pair.Key.ToString() == "region")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_region ='" + _item + "'";
                    }
                }
                //[7]: {[brand, System.String[]]}
                if (pair.Key.ToString() == "brand")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_brnd_cd ='" + _item + "'";
                    }
                }
                //[8]: {[schmCd, System.String[]]}
                if (pair.Key.ToString() == "schmCd")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_scheme_cd ='" + _item + "'";
                    }
                }
                //[9]: {[zone, System.String[]]}
                if (pair.Key.ToString() == "zone")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_zone ='" + _item + "'";
                    }
                }
                //[10]: {[cat1, System.String[]]}
                if (pair.Key.ToString() == "cat1")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat1 ='" + _item + "'";
                    }
                }
                //[11]: {[priceBk, System.String[]]}
                if (pair.Key.ToString() == "priceBk")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pb_cd ='" + _item + "'";
                    }
                }
                //[12]: {[PC, System.String[]]}
                if (pair.Key.ToString() == "PC")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_cd ='" + _item + "'";
                    }
                }
                //[13]: {[cat2, System.String[]]}
                if (pair.Key.ToString() == "cat2")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat2 ='" + _item + "'";
                    }
                }
                //[14]: {[priceLvl, System.String[]]}
                if (pair.Key.ToString() == "priceLvl")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pb_lvl ='" + _item + "'";
                    }
                }
                //[15]: {[chnl, System.String[]]}
                if (pair.Key.ToString() == "chnl")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_chnl ='" + _item + "'";
                    }
                }
                //[16]: {[cat3, System.String[]]}
                if (pair.Key.ToString() == "cat3")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat3 ='" + _item + "'";
                    }
                }
                //[17]: {[invTyp, System.String[]]}
                if (pair.Key.ToString() == "invTyp")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_inv_tp ='" + _item + "'";
                    }
                }
                //[18]: {[schnl, System.String[]]}
                if (pair.Key.ToString() == "schnl")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_pc_sub_chnl ='" + _item + "'";
                    }
                }
                //[19]: {[cat4, System.String[]]}
                if (pair.Key.ToString() == "cat4")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat4 ='" + _item + "'";
                    }
                }
                //[20]: {[invSubTyp, System.String[]]}
                if (pair.Key.ToString() == "invSubTyp")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_inv_sub_tp ='" + _item + "'";
                    }
                }
                //[22]: {[cat5, System.String[]]}
                if (pair.Key.ToString() == "cat5")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_cat5 ='" + _item + "'";
                    }
                }
                //[23]: {[customer, System.String[]]}
                if (pair.Key.ToString() == "customer")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_cust_cd ='" + _item + "'";
                    }
                }
                //[24]: {[delivCustomer, System.String[]]}
                if (pair.Key.ToString() == "delivCustomer")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_d_cust_cd ='" + _item + "'";
                    }
                }
                //[25]: {[executive, System.String[]]}
                if (pair.Key.ToString() == "executive")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_exec_cd ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "custown")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_cust_town ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "cusdtown")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_d_cust_town ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "mnPC")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_main_pc ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "promotor")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_promoter_cd ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "admin")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_admin_team ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "teaml")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_tm_ldr ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "mangr")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_mgr ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "itmsts")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_itm_stus ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "ltltyp")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_loyalty_type ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "ltlno")
                {
                    foreach (string _item in _filter)
                    {
                        if (_filter2 != "")
                        { _filter2 = _filter2 + " or "; }
                        _filter2 = _filter2 + "bms_loyalty_no ='" + _item + "'";
                    }
                }
                if (pair.Key.ToString() == "exPC")
                {
                    string _filterx = "";
                    foreach (string _item in _filter)
                    {
                        //if (_filter2 != "")
                        //{ _filter2 = _filter2 + " or "; }
                        //_filter2 = _filter2 + "bms_pc_cd <>'" + _item + "'";
                        if (_filterx == "")
                        {
                            _filterx = "'" + _item + "'";
                        }
                        else
                        {
                            _filterx = _filterx + ",'" + _item + "'";
                        }
                    }
                    if (_filterx != "")
                    {
                        _filter2 = _filter2 + "bms_pc_cd not in (" + _filterx + ")";
                    }

                }

                if (_filter2 != "")
                {
                    var filteredDataRows1 = _dtResults1.Select(_filter2);
                    var dt1 = new DataTable();
                    if (filteredDataRows1.Length != 0)
                        dt1 = filteredDataRows1.CopyToDataTable();
                    else
                        dt1 = _dtResults1.Clone();
                    //DataTable dt1 = _dtResults1.Select(_filter2).CopyToDataTable();
                    _dtResults1 = dt1;
                }

            }

            return _dtResults1;
        }

        private string _filterCols(Dictionary<string, string[]> dataValues, string _prefilter)
        {
            //Filter           
            string[] _filter;
            string _filtercols = "";

            foreach (KeyValuePair<string, string[]> pair in dataValues)
            {
                int i = 0;
                _filter = pair.Value.ToArray();

                //[0]: {[company, System.String[]]}
                if (pair.Key.ToString() == "company")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_com_cd"; }
                        i++;
                    }
                }
                //[1]: {[item, System.String[]]}
                if (pair.Key.ToString() == "item")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cd"; }
                        i++;
                    }
                }
                //[2]: {[circular, System.String[]]}
                if (pair.Key.ToString() == "circular")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_circular"; }
                        i++;
                    }
                }
                //[3]: {[area, System.String[]]}
                if (pair.Key.ToString() == "area")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_area"; }
                        i++;
                    }
                }
                //[4]: {[model, System.String[]]}
                if (pair.Key.ToString() == "model")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_mdl"; }
                        i++;
                    }
                }
                //[5]: {[shmTyp, System.String[]]}
                if (pair.Key.ToString() == "shmTyp")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_scheme_tp"; }
                        i++;
                    }
                }
                //[6]: {[region, System.String[]]}
                if (pair.Key.ToString() == "region")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_region"; }
                        i++;
                    }
                }
                //[7]: {[brand, System.String[]]}
                if (pair.Key.ToString() == "brand")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_brnd_cd"; }
                        i++;
                    }
                }
                //[8]: {[schmCd, System.String[]]}
                if (pair.Key.ToString() == "schmCd")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_scheme_cd"; }
                        i++;
                    }
                }
                //[9]: {[zone, System.String[]]}
                if (pair.Key.ToString() == "zone")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_zone"; }
                        i++;
                    }
                }
                //[10]: {[cat1, System.String[]]}
                if (pair.Key.ToString() == "cat1")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat1"; }
                        i++;
                    }
                }
                //[11]: {[priceBk, System.String[]]}
                if (pair.Key.ToString() == "priceBk")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pb_cd"; }
                        i++;
                    }
                }
                //[12]: {[PC, System.String[]]}
                if (pair.Key.ToString() == "PC")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_cd"; }
                        i++;
                    }
                }
                //[13]: {[cat2, System.String[]]}
                if (pair.Key.ToString() == "cat2")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat2"; }
                        i++;
                    }
                }
                //[14]: {[priceLvl, System.String[]]}
                if (pair.Key.ToString() == "priceLvl")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pb_lvl"; }
                        i++;
                    }
                }
                //[15]: {[chnl, System.String[]]}
                if (pair.Key.ToString() == "chnl")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_chnl"; }
                        i++;
                    }
                }
                //[16]: {[cat3, System.String[]]}
                if (pair.Key.ToString() == "cat3")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat3"; }
                        i++;
                    }
                }
                //[17]: {[invTyp, System.String[]]}
                if (pair.Key.ToString() == "invTyp")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_inv_tp"; }
                        i++;
                    }
                }
                //[18]: {[schnl, System.String[]]}
                if (pair.Key.ToString() == "schnl")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_sub_chnl"; }
                        i++;
                    }
                }
                //[19]: {[cat4, System.String[]]}
                if (pair.Key.ToString() == "cat4")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat4"; }
                        i++;
                    }
                }
                //[20]: {[invSubTyp, System.String[]]}
                if (pair.Key.ToString() == "invSubTyp")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_inv_sub_tp"; }
                        i++;
                    }
                }
                //[22]: {[cat5, System.String[]]}
                if (pair.Key.ToString() == "cat5")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat5"; }
                        i++;
                    }
                }
                //[23]: {[customer, System.String[]]}
                if (pair.Key.ToString() == "customer")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_cust_cd"; }
                        i++;
                    }
                }
                //[24]: {[delivCustomer, System.String[]]}
                if (pair.Key.ToString() == "delivCustomer")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_d_cust_cd"; }
                        i++;
                    }
                }
                //[25]: {[executive, System.String[]]}
                if (pair.Key.ToString() == "executive")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_exec_cd"; }
                        i++;
                    }
                }
                //[26]: {[custown, System.String[]]}
                if (pair.Key.ToString() == "custown")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_cust_town"; }
                        i++;
                    }
                }
                //[27]: {[cusdtown, System.String[]]}
                if (pair.Key.ToString() == "cusdtown")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_d_cust_town"; }
                        i++;
                    }
                }
                //[28]: {[exPC, System.String[]]}
                if (pair.Key.ToString() == "exPC")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_cd"; }
                        i++;
                    }
                }
                //[29]: {[mnPC, System.String[]]}
                if (pair.Key.ToString() == "mnPC")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_main_pc"; }
                        i++;
                    }
                }
                //[30]: {[promotor, System.String[]]}
                if (pair.Key.ToString() == "promotor")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_promoter_cd"; }
                        i++;
                    }
                }
                //[31]: {[admin, System.String[]]}
                if (pair.Key.ToString() == "admin")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_admin_team"; }
                        i++;
                    }
                }
                //[32]: {[teaml, System.String[]]}
                if (pair.Key.ToString() == "teaml")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_tm_ldr"; }
                        i++;
                    }
                }
                //[33]: {[mangr, System.String[]]}
                if (pair.Key.ToString() == "mangr")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_mgr"; }
                        i++;
                    }
                }
                //[34]: {[itmsts, System.String[]]}
                if (pair.Key.ToString() == "itmsts")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_stus"; }
                        i++;
                    }
                }
                //[35]: {[ltltyp, System.String[]]}
                if (pair.Key.ToString() == "ltltyp")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_loyalty_type"; }
                        i++;
                    }
                }
                //[36]: {[ltlno, System.String[]]}
                if (pair.Key.ToString() == "ltlno")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_loyalty_no"; }
                        i++;
                    }
                }
            }

            if (_prefilter != "") { if (_filtercols != "") _filtercols = "," + _filtercols; }

            return _filtercols;
        }

        private string _filterColsHP(Dictionary<string, string[]> dataValues, string _prefilter)
        {
            //Filter           
            string[] _filter;
            string _filtercols = "";

            foreach (KeyValuePair<string, string[]> pair in dataValues)
            {
                int i = 0;
                _filter = pair.Value.ToArray();

                //[0]: {[company, System.String[]]}
                if (pair.Key.ToString() == "company")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bhs_com"; }
                        i++;
                    }
                }
                //[1]: {[item, System.String[]]}
                if (pair.Key.ToString() == "item")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cd"; }
                        i++;
                    }
                }
                //[2]: {[circular, System.String[]]}
                if (pair.Key.ToString() == "circular")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_circular"; }
                        i++;
                    }
                }
                //[3]: {[area, System.String[]]}
                if (pair.Key.ToString() == "area")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_area"; }
                        i++;
                    }
                }
                //[4]: {[model, System.String[]]}
                if (pair.Key.ToString() == "model")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_mdl"; }
                        i++;
                    }
                }
                //[5]: {[shmTyp, System.String[]]}
                if (pair.Key.ToString() == "shmTyp")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_scheme_tp"; }
                        i++;
                    }
                }
                //[6]: {[region, System.String[]]}
                if (pair.Key.ToString() == "region")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_region"; }
                        i++;
                    }
                }
                //[7]: {[brand, System.String[]]}
                if (pair.Key.ToString() == "brand")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_brnd_cd"; }
                        i++;
                    }
                }
                //[8]: {[schmCd, System.String[]]}
                if (pair.Key.ToString() == "schmCd")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_scheme_cd"; }
                        i++;
                    }
                }
                //[9]: {[zone, System.String[]]}
                if (pair.Key.ToString() == "zone")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_zone"; }
                        i++;
                    }
                }
                //[10]: {[cat1, System.String[]]}
                if (pair.Key.ToString() == "cat1")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat1"; }
                        i++;
                    }
                }
                //[11]: {[priceBk, System.String[]]}
                if (pair.Key.ToString() == "priceBk")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pb_cd"; }
                        i++;
                    }
                }
                //[12]: {[PC, System.String[]]}
                if (pair.Key.ToString() == "PC")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_cd"; }
                        i++;
                    }
                }
                //[13]: {[cat2, System.String[]]}
                if (pair.Key.ToString() == "cat2")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat2"; }
                        i++;
                    }
                }
                //[14]: {[priceLvl, System.String[]]}
                if (pair.Key.ToString() == "priceLvl")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pb_lvl"; }
                        i++;
                    }
                }
                //[15]: {[chnl, System.String[]]}
                if (pair.Key.ToString() == "chnl")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_chnl"; }
                        i++;
                    }
                }
                //[16]: {[cat3, System.String[]]}
                if (pair.Key.ToString() == "cat3")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat3"; }
                        i++;
                    }
                }
                //[17]: {[invTyp, System.String[]]}
                if (pair.Key.ToString() == "invTyp")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_inv_tp"; }
                        i++;
                    }
                }
                //[18]: {[schnl, System.String[]]}
                if (pair.Key.ToString() == "schnl")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_sub_chnl"; }
                        i++;
                    }
                }
                //[19]: {[cat4, System.String[]]}
                if (pair.Key.ToString() == "cat4")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat4"; }
                        i++;
                    }
                }
                //[20]: {[invSubTyp, System.String[]]}
                if (pair.Key.ToString() == "invSubTyp")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_inv_sub_tp"; }
                        i++;
                    }
                }
                //[22]: {[cat5, System.String[]]}
                if (pair.Key.ToString() == "cat5")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_cat5"; }
                        i++;
                    }
                }
                //[23]: {[customer, System.String[]]}
                if (pair.Key.ToString() == "customer")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_cust_cd"; }
                        i++;
                    }
                }
                //[24]: {[delivCustomer, System.String[]]}
                if (pair.Key.ToString() == "delivCustomer")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_d_cust_cd"; }
                        i++;
                    }
                }
                //[25]: {[executive, System.String[]]}
                if (pair.Key.ToString() == "executive")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_exec_cd"; }
                        i++;
                    }
                }
                //[26]: {[custown, System.String[]]}
                if (pair.Key.ToString() == "custown")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_cust_town"; }
                        i++;
                    }
                }
                //[27]: {[cusdtown, System.String[]]}
                if (pair.Key.ToString() == "cusdtown")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_d_cust_town"; }
                        i++;
                    }
                }
                //[28]: {[exPC, System.String[]]}
                if (pair.Key.ToString() == "exPC")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_pc_cd"; }
                        i++;
                    }
                }
                //[29]: {[mnPC, System.String[]]}
                if (pair.Key.ToString() == "mnPC")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_main_pc"; }
                        i++;
                    }
                }
                //[30]: {[promotor, System.String[]]}
                if (pair.Key.ToString() == "promotor")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_promoter_cd"; }
                        i++;
                    }
                }
                //[31]: {[admin, System.String[]]}
                if (pair.Key.ToString() == "admin")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_admin_team"; }
                        i++;
                    }
                }
                //[32]: {[teaml, System.String[]]}
                if (pair.Key.ToString() == "teaml")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_tm_ldr"; }
                        i++;
                    }
                }
                //[33]: {[mangr, System.String[]]}
                if (pair.Key.ToString() == "mangr")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_mgr"; }
                        i++;
                    }
                }
                //[34]: {[itmsts, System.String[]]}
                if (pair.Key.ToString() == "itmsts")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_itm_stus"; }
                        i++;
                    }
                }
                //[35]: {[ltltyp, System.String[]]}
                if (pair.Key.ToString() == "ltltyp")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_loyalty_type"; }
                        i++;
                    }
                }
                //[36]: {[ltlno, System.String[]]}
                if (pair.Key.ToString() == "ltlno")
                {
                    i = 1;
                    foreach (string _item in _filter)
                    {
                        if (i == 1) { if (_filtercols != "") { _filtercols = _filtercols + ","; } _filtercols = _filtercols + "bms_loyalty_no"; }
                        i++;
                    }
                }
            }

            if (_prefilter != "") { if (_filtercols != "") _filtercols = "," + _filtercols; }

            return _filtercols;
        }

        public Int32 SaveBMUserLog(string _user, string _sel, string _where, DateTime _fdate, DateTime _tdate)
        {
            Int32 result = 0;
            try
            {
                _financialDAL = new FinancialDAL();
                _financialDAL.ConnectionOpen();
                _financialDAL.BeginTransaction();

                result = _financialDAL.SaveBMUserLog(_user, _sel, _where, _fdate, _tdate);

                _financialDAL.TransactionCommit();
                _financialDAL.ConnectionClose();
            }
            catch (Exception)
            {
                result = -1;
                _financialDAL.TransactionRollback();
            }

            return result;
        }

        public string getBMSalesDetails(DateTime _FromDate, DateTime _ToDate, DateTime _FromDateOne, DateTime _ToDateOne, DateTime _FromDateTwo, DateTime _ToDateTwo, string allOne, string allTwo, string _invdate, string _com, string _user, DataTable _col, DataTable _row, DataTable _val, Dictionary<string, string[]> dataValues, out DataTable _result, out DataTable _header, int _foc, int _intercom, int intcurdate, int _inthpsales, int _intcrecardsale, int _servicecharge, int _intitem, string hpinttype, out string _err, Boolean listing)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();

            _err = string.Empty;
            string _filePath = string.Empty;
            int s = 0;
            int t = 0;
            int u = 0;
            int v = 0;

            _header = null;
            DataTable _dtResults = new DataTable();
            DataTable _dtResults1 = new DataTable();
            DataTable _dtResults2 = new DataTable();
            DataTable _repHead = _financialDAL.getBMReportHeading("BM_SALES");
            String[] szColumns = new String[_col.Rows.Count];
            String[] szRows = new String[_row.Rows.Count];
            String[] szVals = new String[_val.Rows.Count];
            string vRows = "";
            string vCols = "";
            string vColsCommon = "";

            DataTable BMSales1 = new DataTable();

            DataTable BMSales = new DataTable();
            BMSales.TableName = "BMTable";
            DataTable _dtHeader = new DataTable();
            _dtHeader.TableName = "BMHeader";
            DataRow dr;
            DataRow dr1;
            DataRow dr2;
            DataRow dt2dr;

            BMSales.Clear();
            if (_repHead.Rows.Count <= 0)
            {
                _err = "Report Headings not defined.";
                goto A;
            }

            DataTable _dtResultsM;
            DataTable _dtResultsMSer;
            DateTime _vfromdate;
            DateTime _vtodate;
            DateTime _vfromdateT;
            DateTime _vtodateT;

            _vfromdate = Convert.ToDateTime(DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + "01");
            _vtodate = Convert.ToDateTime(DateTime.Now).AddDays(-1);

            DataTable _lastUpdate = _financialDAL.getBMSalesLastUpdated();
            if (_lastUpdate.Rows.Count > 0)
            {
                foreach (DataRow _drrow in _lastUpdate.Rows)
                {
                    if (!(String.IsNullOrEmpty(_drrow["bms_do_dt"].ToString())))
                    {
                        _vfromdate = Convert.ToDateTime(_drrow["bms_do_dt"]).AddDays(1);
                        _vtodate = Convert.ToDateTime(_drrow["bms_curr_dt"]).AddDays(-1);
                    }
                }
            }

            TimeSpan _diffDate1 = _vtodate - _vfromdate;
            if (_vtodate >= _vfromdate)
            {
                //_financialDAL.ConnectionOpen();
                //int xx = _financialDAL.InsertBMSales(_vfromdate, _vtodate);
                ////_financialDAL.ConnectionClose();
            }

            TimeSpan _diffDate = _ToDate - _FromDate;
            int _months = (_diffDate.Days / 30) + 1;

            _vfromdateT = _FromDate;

            string _SelCols = "";
            string _filterCols1 = "";
            foreach (DataRow _drcol in _col.Rows)
            {
                if (_SelCols != "") { _SelCols = _SelCols + ","; }
                _SelCols = _SelCols + _drcol["bmr_col_nm"].ToString();
            }
            foreach (DataRow _drrow in _row.Rows)
            {
                if (_SelCols != "") { _SelCols = _SelCols + ","; }
                _SelCols = _SelCols + _drrow["bmr_col_nm"].ToString();
            }
            foreach (DataRow _drval in _val.Rows)
            {
                if (_SelCols != "") { _SelCols = _SelCols + ","; }
                _SelCols = _SelCols + _drval["bmr_col_nm"].ToString();
            }

            _filterCols1 = _filterCols(dataValues, _SelCols);

            int z1 = SaveBMUserLog(_user, _SelCols, _filterCols1, _FromDate, _ToDate);

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _SelCols = _SelCols + _filterCols1;

            if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

            for (int _mon = 1; _mon <= _months + 1; _mon++)
            {
                _vtodateT = _vfromdateT.AddMonths(1).AddDays(-1);
                if (_ToDate < _vtodateT) { _vtodateT = _ToDate; }
                if (intcurdate == 1)
                {
                    _dtResultsM = _financialDAL.getBMHISalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                    //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
                    //_dtResultsM = _dtResultsM.DefaultView.ToTable();
                }
                else if (_intitem == 1)
                {
                    _dtResultsM = _financialDAL.getBMItemSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                    // _dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
                    //_dtResultsM = _dtResultsM.DefaultView.ToTable();
                }
                else if (_servicecharge == 1 || _servicecharge == 2)
                {
                    _dtResultsM = _financialDAL.getBMServiceSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                    //_dtResultsMSer = _financialDAL.getBMServiceSalesItem(_servicecharge);  

                }
                else
                {
                    _dtResultsM = _financialDAL.getBMSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                    //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
                    //_dtResultsM = _dtResultsM.DefaultView.ToTable();
                }
                if (_dtResultsM.Rows.Count > 0)
                {
                    _dtResults1 = _filterBMSales(_dtResultsM, dataValues);
                    _dtResults2.Merge(_dtResults1);
                }
                _vfromdateT = _vfromdateT.AddMonths(1);
            }

            //Date 2
            if (allOne == "true")
            {
                _diffDate = _ToDateOne - _FromDateOne;
                _months = (_diffDate.Days / 30) + 1;

                _vfromdateT = _FromDateOne;

                for (int _mon = 1; _mon <= _months + 1; _mon++)
                {
                    _vtodateT = _vfromdateT.AddMonths(1).AddDays(-1);
                    if (_ToDateOne < _vtodateT) { _vtodateT = _ToDateOne; }
                    if (intcurdate == 1)
                    {
                        _dtResultsM = _financialDAL.getBMHISalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                        //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
                        //_dtResultsM = _dtResultsM.DefaultView.ToTable();
                    }
                    else if (_intitem == 1)
                    {
                        _dtResultsM = _financialDAL.getBMItemSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                        //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
                        //_dtResultsM = _dtResultsM.DefaultView.ToTable();
                    }
                    else
                    {
                        _dtResultsM = _financialDAL.getBMSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                        //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
                        //_dtResultsM = _dtResultsM.DefaultView.ToTable();
                    }
                    if (_dtResultsM.Rows.Count > 0)
                    {
                        _dtResults1 = _filterBMSales(_dtResultsM, dataValues);
                        _dtResults2.Merge(_dtResults1);
                    }
                    _vfromdateT = _vfromdateT.AddMonths(1);
                }
            }

            //Date 3
            if (allTwo == "true")
            {
                
                _diffDate = _ToDateTwo - _FromDateTwo;
                _months = (_diffDate.Days / 30) + 1;

                _vfromdateT = _FromDateTwo;

                for (int _mon = 1; _mon <= _months + 1; _mon++)
                {
                    _vtodateT = _vfromdateT.AddMonths(1).AddDays(-1);
                    if (_ToDateTwo < _vtodateT) { _vtodateT = _ToDateTwo; }
                    if (intcurdate == 1)
                    {
                        _dtResultsM = _financialDAL.getBMHISalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                        //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
                        //_dtResultsM = _dtResultsM.DefaultView.ToTable();
                    }
                    else if (_intitem == 1)
                    {
                        _dtResultsM = _financialDAL.getBMItemSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                        //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
                        //_dtResultsM = _dtResultsM.DefaultView.ToTable();
                    }
                    else
                    {
                        _dtResultsM = _financialDAL.getBMSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
                        //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
                        //_dtResultsM = _dtResultsM.DefaultView.ToTable();
                    }
                    if (_dtResultsM.Rows.Count > 0)
                    {
                        _dtResults1 = _filterBMSales(_dtResultsM, dataValues);
                        _dtResults2.Merge(_dtResults1);
                    }
                    _vfromdateT = _vfromdateT.AddMonths(1);
                }
            }



            //_dtResults1 = _financialDAL.getBMSalesDetails(_FromDate, _ToDate, _invdate, _com, "", _user);

            //_dtResults2 = _filterBMSales(_dtResults1, dataValues);

            if (_dtResults2.Rows.Count > 0)
            {
                _dtResults2 = DataTableExtensions.ToValidateDataTable(_dtResults2);

            }


            //////////////////////////////////////////////
            if (listing == true) // add by tharanga
            {
                #region listing
                if (_dtResults2.Rows.Count > 0)
                {
                    _dtHeader = new DataTable();
                    for (int _colm = 0; _colm <= _dtResults2.Columns.Count - 1; _colm++)
                    {
                        _dtHeader.Columns.Add(_dtResults2.Columns[_colm].ColumnName.ToString(), typeof(string));
                    }

                    int _colcount = 0;
                    for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                            {
                                if (drlochead["bmr_data_tp"].ToString() != "decimal")
                                {
                                    _colcount = _colcount + 1;
                                }
                            }
                        }
                    }

                    String[] szColumns1 = new String[_colcount];
                    BMSales = _dtResults2;
                    DataRow drs;
                    drs = _dtHeader.NewRow();
                    t = 0;

                    for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                    {
                        string _colname = "";

                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                            {
                                _colname = drlochead["bmr_col_desc"].ToString();

                                if (drlochead["bmr_data_tp"].ToString() != "decimal")
                                {
                                    szColumns1[t] = drlochead["bmr_col_nm"].ToString().ToUpper();
                                    t = t + 1;
                                }
                            }
                        }

                        drs[_colm] = _colname;

                    }
                    _dtHeader.Rows.Add(drs);
                    _dtHeader.TableName = "BMHeader";
                    ////////////////

                    DataTable OFI = BMSales.DefaultView.ToTable(true, szColumns1);

                    DataView viewFI = new DataView(OFI);
                    viewFI.Sort = vRows;
                    DataTable _dtResultsSum = viewFI.ToTable();



                    //BMSales

                    if (BMSales.Rows.Count > 0)
                    {
                        foreach (DataRow _drresult in _dtResultsSum.Rows)
                        {
                            string _filter = "";
                            string _group = "";

                            for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

                                if (_group != "")
                                { _group = _group + " ,"; }
                                _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
                            }
                            if (_filter != "")
                            {
                                //DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();
                                var filteredDataRows1 = BMSales.Select(_filter);
                                var dt1 = new DataTable();
                                if (filteredDataRows1.Length != 0)
                                    dt1 = filteredDataRows1.CopyToDataTable();
                                else
                                    dt1 = _dtResults.Clone();

                                var ownerGroups = dt1.AsEnumerable()
                                    .GroupBy(row => new { _group });
                                var dt2 = dt1.Clone();
                                var intColumns = dt2.Columns.Cast<DataColumn>()
                                    .Where(c => c.DataType == typeof(decimal)).ToArray();
                                foreach (var grp in ownerGroups)
                                {
                                    var row = dt2.Rows.Add();

                                    for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                                    {
                                        if (_dtResultsSum.Columns[index].DataType.ToString() != "decimal")
                                        {
                                            row.SetField(_dtResultsSum.Columns[index].ColumnName.ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_dtResultsSum.Columns[index].ToString()].Ordinal));
                                        }
                                    }
                                    //foreach (DataRow _drcol in _col.Rows)
                                    //{
                                    //    row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drcol[0].ToString()].Ordinal));
                                    //}
                                    //foreach (DataRow _drrow in _row.Rows)
                                    //{
                                    //    row.SetField(_drrow[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drrow[0].ToString()].Ordinal));
                                    //}
                                    foreach (DataColumn col in intColumns)
                                    {
                                        bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                                        decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                                        row.SetField(col, sum);
                                    }
                                }

                                BMSales1.Merge(dt2);
                            }
                        }
                    }

                }



                BMSales = new DataTable();
                BMSales = BMSales1;

                #region sum
                DataView viewFIn = new DataView(BMSales);
                viewFIn.Sort = vColsCommon;
                BMSales = viewFIn.ToTable();

                string _group1 = "";
                var dt1tot = new DataTable();
                dt1tot = BMSales;
                //var ownerGroupstot = dt1tot;
                var ownerGroupstot = dt1tot.AsEnumerable()
                                 .GroupBy(row => new { _group1 });
                var dt2tot = dt1tot.Clone();
                var intColumnstot = dt2tot.Columns.Cast<DataColumn>()
                    .Where(c => c.DataType == typeof(decimal)).ToArray();
                foreach (var grp in ownerGroupstot)
                {
                    var row = dt2tot.Rows.Add();

                    foreach (DataRow _drcol in _col.Rows)
                    {
                        if (dt2tot.Columns[0].DataType.ToString() == "String")
                        {
                            row.SetField("Col0", "Total");
                        }
                    }
                    //foreach (DataRow _drrow in _row.Rows)
                    //{
                    //    row.SetField(_drrow[0].ToString(), "");
                    //}
                    foreach (DataColumn col in intColumnstot)
                    {
                        bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                        decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                        row.SetField(col, sum);
                    }
                }

                BMSales.Merge(dt2tot);
                #endregion
                BMSales.TableName = "BMTable";
                #endregion listing
            }
            else
            {
                //////////////////////////
                if (_dtResults2.Rows.Count > 0)
                {
                    foreach (DataRow _drcol in _col.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drcol["bmr_col_nm"].ToString())
                            {
                                if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add("Col" + t, typeof(string));
                                if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add("Col" + t, typeof(int));
                                if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add("Col" + t, typeof(decimal));
                                _dtHeader.Columns.Add("Col" + t, typeof(string));
                                szColumns[t] = drlochead["bmr_col_nm"].ToString();
                                if (vCols != "") vCols = vCols + ",";
                                vCols = vCols + drlochead["bmr_col_nm"].ToString();
                                if (vColsCommon != "") vColsCommon = vColsCommon + ",";
                                vColsCommon = vColsCommon + "Col" + t;
                                t = t + 1;
                            }
                        }
                    }

                    foreach (DataRow _drval in _val.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drval["bmr_col_nm"].ToString())
                            {
                                szVals[v] = drlochead["bmr_col_nm"].ToString();
                                v = v + 1;
                            }
                        }
                    }

                    foreach (DataRow _drrow in _row.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drrow["bmr_col_nm"].ToString())
                            {
                                szRows[u] = drlochead["bmr_col_nm"].ToString();
                                if (vRows != "") vRows = vRows + ",";
                                vRows = vRows + drlochead["bmr_col_nm"].ToString();
                                u = u + 1;
                            }
                        }
                    }

                    string[] szColRows = new String[szRows.Count() + szColumns.Count()];
                    szColRows = szColumns.Concat(szRows).ToArray();

                    DataTable _dtResultsSum = new DataTable();
                    _dtResults = _dtResults2;

                    if (u != 0)
                    {
                        DataTable OFI = _dtResults.DefaultView.ToTable(true, szColRows);

                        DataView viewFI = new DataView(OFI);
                        viewFI.Sort = vRows;
                        _dtResultsSum = viewFI.ToTable();
                    }
                    else
                    {
                        _dtResultsSum = _dtResults;
                    }

                    DataTable _insertnull = _dtResults.DefaultView.ToTable(true, szRows);
                    DataTable _insertnull1 = _dtResults.DefaultView.ToTable(true, szColumns);

                    foreach (DataRow _drrowc in _insertnull1.Rows)
                    {
                        foreach (DataRow _drrowr in _insertnull.Rows)
                        {
                            DataRow drs;
                            DataRow drs1;
                            drs = _dtResults.NewRow();
                            drs1 = _dtResultsSum.NewRow();

                            string _filter = "";
                            for (int index = 0; index < _insertnull1.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _insertnull1.Columns[index].ColumnName + "]" + " ='" + _drrowc[index].ToString() + "'";
                                drs[index] = _drrowc[index].ToString();
                                drs1[index] = _drrowc[index].ToString();
                            }
                            for (int index = 0; index < _insertnull.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _insertnull.Columns[index].ColumnName + "]" + " ='" + _drrowr[index].ToString() + "'";
                                drs[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
                                drs1[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
                            }
                            int x = 0;
                            foreach (DataRow _drval in _val.Rows)
                            {
                                drs[x + _insertnull1.Columns.Count + _insertnull.Columns.Count] = 0;
                                x++;
                            }

                            var insertnulls = _dtResultsSum.Select(_filter);
                            var dt1 = new DataTable();
                            if (insertnulls.Length != 0)
                                dt1 = insertnulls.CopyToDataTable();
                            else
                                dt1 = _dtResults.Clone();

                            if (dt1.Rows.Count == 0)
                            {
                                _dtResults.Rows.Add(drs);
                                _dtResultsSum.Rows.Add(drs1);
                            }

                        }
                    }

                    if (_dtResultsSum.Rows.Count > 0)
                    {
                        foreach (DataRow _drresult in _dtResultsSum.Rows)
                        {
                            string _filter = "";
                            string _group = "";

                            for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

                                if (_group != "")
                                { _group = _group + " ,"; }
                                _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
                            }
                            if (_filter != "")
                            {
                                //DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();
                                var filteredDataRows1 = _dtResults.Select(_filter);
                                var dt1 = new DataTable();
                                if (filteredDataRows1.Length != 0)
                                    dt1 = filteredDataRows1.CopyToDataTable();
                                else
                                    dt1 = _dtResults.Clone();

                                var ownerGroups = dt1.AsEnumerable()
                                    .GroupBy(row => new { _group });
                                var dt2 = dt1.Clone();
                                var intColumns = dt2.Columns.Cast<DataColumn>()
                                    .Where(c => c.DataType == typeof(decimal)).ToArray();
                                foreach (var grp in ownerGroups)
                                {
                                    var row = dt2.Rows.Add();

                                    foreach (DataRow _drcol in _col.Rows)
                                    {
                                        row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drcol[0].ToString()].Ordinal));
                                    }
                                    foreach (DataRow _drrow in _row.Rows)
                                    {
                                        row.SetField(_drrow[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drrow[0].ToString()].Ordinal));
                                    }
                                    foreach (DataColumn col in intColumns)
                                    {
                                        bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                                        decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                                        row.SetField(col, sum);
                                    }
                                }

                                BMSales1.Merge(dt2);
                            }
                        }
                    }

                    _dtResults = BMSales1.DefaultView.ToTable(true, szColRows.Concat(szVals).ToArray());

                    DataTable _dtResultsSum2 = new DataTable();

                    if (_dtResults.Rows.Count > 0)
                    {
                        if (u != 0)
                        {
                            DataTable OFI2 = _dtResults.DefaultView.ToTable(true, szRows);

                            DataView viewFI2 = new DataView(OFI2);
                            viewFI2.Sort = vRows;
                            _dtResultsSum2 = viewFI2.ToTable();
                        }
                        else
                        {
                            _dtResultsSum2 = _dtResults;
                        }


                        if (_dtResultsSum2.Rows.Count > 0)
                        {
                            for (int index = 0; index < _dtResultsSum2.Rows.Count; index++)
                            {
                                foreach (string _val1 in szVals)
                                {
                                    //dilshan on 14/02/2019
                                    if (_val1 == "bms_inv_count")
                                    {
                                        BMSales.Columns.Add("Col" + t, typeof(string));
                                        _dtHeader.Columns.Add("Col" + t, typeof(string));
                                    }
                                    else
                                    {
                                        BMSales.Columns.Add("Col" + t, typeof(decimal));
                                        _dtHeader.Columns.Add("Col" + t, typeof(string));
                                    }
                                    //BMSales.Columns.Add("Col" + t, typeof(decimal));
                                    //_dtHeader.Columns.Add("Col" + t, typeof(string));
                                    t = t + 1;
                                }
                            }
                        }

                        int ab = 1;

                        DataTable OFI3 = _dtResults.DefaultView.ToTable(true, szColumns);

                        if (OFI3.Rows.Count > 0)
                        {
                            foreach (DataRow _drow in OFI3.Rows)
                            {
                                string _filter = "";
                                string _group = "";

                                for (int index = 0; index < OFI3.Columns.Count; index++)
                                {
                                    if (_filter != "")
                                    { _filter = _filter + " and "; }
                                    _filter = _filter + "[" + OFI3.Columns[index].ColumnName + "]" + " ='" + _drow[index].ToString() + "'";

                                    if (_group != "")
                                    { _group = _group + " ,"; }
                                    _group = _group + "[" + OFI3.Columns[index].ColumnName + "] = row.Field<string>([" + OFI3.Columns[index].ColumnName + "])";
                                }
                                if (_filter != "")
                                {
                                    DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();

                                    string _filter1 = "";
                                    int w = 0;
                                    int x = 0;
                                    int y = 0;
                                    int z = 0;
                                    int aa = 0;

                                    //dr1 = new DataRow();
                                    //if (ab < _row.Rows.Count + 1)                                 

                                    dr1 = _dtHeader.NewRow();
                                    dr = BMSales.NewRow();

                                    if (_dtResultsSum2.Rows.Count > 0)
                                    {
                                        foreach (DataRow _drow1 in _dtResultsSum2.Rows)
                                        {
                                            _filter1 = "";

                                            for (int index = 0; index < dt1.Columns.Count; index++)
                                            {
                                                for (int index2 = 0; index2 < _dtResultsSum2.Columns.Count; index2++)
                                                {
                                                    if (_dtResultsSum2.Columns[index2].ColumnName == dt1.Columns[index].ColumnName)
                                                    {
                                                        if (_filter1 != "")
                                                        { _filter1 = _filter1 + " and "; }
                                                        _filter1 = _filter1 + "[" + dt1.Columns[index].ColumnName + "]" + " ='" + _drow1[index2].ToString() + "'";
                                                    }
                                                }
                                            }

                                            if (_filter1 != "")
                                            {
                                                var filteredDataRows = dt1.Select(_filter1);
                                                var dt2 = new DataTable();
                                                if (filteredDataRows.Length != 0)
                                                    dt2 = filteredDataRows.CopyToDataTable();
                                                else
                                                    if (w != 0)
                                                    {
                                                        dt2 = dt1.Clone();
                                                        dt2dr = dt2.NewRow();
                                                        int dt2num = 0;
                                                        int dt2num1 = 0;
                                                        foreach (DataRow _drcol in _col.Rows)
                                                        {
                                                            dt2dr[dt2num] = _drow[dt2num1].ToString();
                                                            dt2num1 = dt2num1 + 1;
                                                            dt2num = dt2num + 1;
                                                        }
                                                        dt2num1 = 0;
                                                        foreach (DataRow _drrow in _row.Rows)
                                                        {
                                                            dt2dr[dt2num] = _drow1[dt2num1].ToString();
                                                            dt2num1 = dt2num1 + 1;
                                                            dt2num = dt2num + 1;
                                                        }
                                                        dt2num1 = 0;
                                                        foreach (DataRow _drval in _val.Rows)
                                                        {
                                                            dt2dr[dt2num] = 0;
                                                            dt2num1 = dt2num1 + 1;
                                                            dt2num = dt2num + 1;
                                                        }
                                                        dt2.Rows.Add(dt2dr);
                                                    }

                                                //w = w + _val.Rows.Count; else aa = 2;
                                                //DataTable dt2 = dt1.Select(_filter1).CopyToDataTable();

                                                foreach (DataRow _drow3 in dt2.Rows)
                                                {
                                                    if (BMSales.Columns.Count > w)
                                                    {
                                                        if (z == y)
                                                        {
                                                            foreach (DataRow _drcol in _col.Rows)
                                                            {
                                                                for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                                {
                                                                    if (dt2.Columns[index4].ColumnName.ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
                                                                    {
                                                                        foreach (DataRow drlochead in _repHead.Rows)
                                                                        {
                                                                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
                                                                            {
                                                                                if (drlochead["bmr_data_tp"].ToString() == "string") dr[w] = _drow3[y].ToString().ToUpper();
                                                                                if (drlochead["bmr_data_tp"].ToString() == "int") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToInt16(_drow3[y].ToString()) : 00;
                                                                                if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToDecimal(_drow3[y].ToString()) : 00;
                                                                                //if (ab < _row.Rows.Count + 1)
                                                                                //{
                                                                                if (ab == 1) dr1[w] = _drcol["bmr_col_desc"].ToString().ToUpper();
                                                                                //}

                                                                                w = w + 1;
                                                                                //x = x + 1;
                                                                                y = y + 1;
                                                                                z = z + 1;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                            int ad = _col.Rows.Count;
                                                            foreach (DataRow _drrow in _row.Rows)
                                                            {
                                                                for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                                {
                                                                    if (dt2.Columns[index4].ColumnName.ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
                                                                    {
                                                                        foreach (DataRow drlochead in _repHead.Rows)
                                                                        {
                                                                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
                                                                            {
                                                                                if (ab == 1)
                                                                                {
                                                                                    dr2 = _dtHeader.NewRow();
                                                                                    int ac = 0;
                                                                                    foreach (DataRow _drcol in _col.Rows)
                                                                                    {
                                                                                        dr2[ac] = ".";
                                                                                        ac = ac + 1;
                                                                                    }
                                                                                    foreach (DataRow _drow4 in _dtResultsSum2.Rows)
                                                                                    {
                                                                                        foreach (DataRow _drval in _val.Rows)
                                                                                        {
                                                                                            if (dt2.Columns[ad].ColumnName.ToUpper() == "BMS_DO_MONTH" || dt2.Columns[ad].ColumnName.ToUpper() == "BMS_INV_MONTH")
                                                                                            {
                                                                                                dr2[ac] = _getMonthName(Convert.ToInt16(_drow4[dt2.Columns[ad].ColumnName.ToUpper()])).ToUpper();
                                                                                            }
                                                                                            else if (dt2.Columns[ad].ColumnName.ToUpper() == "BMS_DO_YEAR" || dt2.Columns[ad].ColumnName.ToUpper() == "BMS_INV_YEAR" || dt2.Columns[ad].ColumnName.ToUpper() == "BMS_DO_DAY")
                                                                                            {
                                                                                                dr2[ac] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                dr2[ac] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
                                                                                            }
                                                                                            //if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_MONTH" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_MONTH")
                                                                                            //{
                                                                                            //    dr2[ac] = _getMonthName(Convert.ToInt16(_drow4[0])).ToUpper();
                                                                                            //}
                                                                                            //else if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_DAY")
                                                                                            //{
                                                                                            //    dr2[ac] = Convert.ToInt16(_drow4[0]);
                                                                                            //}
                                                                                            //else
                                                                                            //{
                                                                                            //    dr2[ac] = _drow4[0].ToString().ToUpper();
                                                                                            //}
                                                                                            ac = ac + 1;
                                                                                        }

                                                                                    }
                                                                                    ad = ad + 1;
                                                                                    _dtHeader.Rows.Add(dr2);
                                                                                }
                                                                                //x = x + 1;
                                                                                y = y + 1;
                                                                                z = z + 1;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        foreach (DataRow _drval in _val.Rows)
                                                        {
                                                            for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                            {
                                                                if (dt2.Columns[index4].ColumnName.ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
                                                                {
                                                                    foreach (DataRow drlochead in _repHead.Rows)
                                                                    {
                                                                        if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
                                                                        {
                                                                            if (drlochead["bmr_data_tp"].ToString() == "string") dr[w + aa] = _drow3[x + y].ToString().ToUpper();
                                                                            if (drlochead["bmr_data_tp"].ToString() == "int") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToInt32(_drow3[x + y].ToString()) : 00;
                                                                            if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToDecimal(_drow3[x + y].ToString()) : 00;
                                                                            if (ab == 1)
                                                                            {
                                                                                //if (dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_MONTH" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_INV_MONTH")
                                                                                //{
                                                                                //    dr1[w] = _getMonthName(Convert.ToInt16(_drval["bmr_col_desc"])).ToUpper();
                                                                                //}
                                                                                //else if (dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_YEAR" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_INV_YEAR" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_DAY")
                                                                                //{
                                                                                //    dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                //}
                                                                                //else
                                                                                //{
                                                                                dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                //}
                                                                                //if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_MONTH" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_MONTH")
                                                                                //{
                                                                                //    dr1[w] = _getMonthName(Convert.ToInt16(_drval["bmr_col_desc"])).ToUpper();
                                                                                //}
                                                                                //else if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_DAY")
                                                                                //{
                                                                                //    dr1[w] = Convert.ToInt16(_drval["bmr_col_desc"]);
                                                                                //}
                                                                                //else
                                                                                //{
                                                                                //    dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                //}
                                                                            }

                                                                            w = w + 1;
                                                                            x = x + 1;
                                                                            z = z + 1;
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        x = 0;
                                                        aa = 0;
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    //if (ab < _row.Rows.Count) 

                                    _dtHeader.Rows.Add(dr1);
                                    BMSales.Rows.Add(dr);
                                    ab = ab + 1;

                                }
                            }
                        }

                    }

                    DataView viewFIn = new DataView(BMSales);
                    viewFIn.Sort = vColsCommon;
                    BMSales = viewFIn.ToTable();

                    string _group1 = "";
                    var dt1tot = new DataTable();
                    dt1tot = BMSales;
                    //var ownerGroupstot = dt1tot;
                    var ownerGroupstot = dt1tot.AsEnumerable()
                                     .GroupBy(row => new { _group1 });
                    var dt2tot = dt1tot.Clone();
                    var intColumnstot = dt2tot.Columns.Cast<DataColumn>()
                        .Where(c => c.DataType == typeof(decimal)).ToArray();
                    foreach (var grp in ownerGroupstot)
                    {
                        var row = dt2tot.Rows.Add();

                        foreach (DataRow _drcol in _col.Rows)
                        {
                            if (dt2tot.Columns[0].DataType.ToString() == "String")
                            {
                                row.SetField("Col0", "Total");
                            }
                        }
                        //foreach (DataRow _drrow in _row.Rows)
                        //{
                        //    row.SetField(_drrow[0].ToString(), "");
                        //}
                        foreach (DataColumn col in intColumnstot)
                        {
                            bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                            decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                            row.SetField(col, sum);
                        }
                    }

                    BMSales.Merge(dt2tot);


                }
                else
                {
                    _err = "No Records Found.";

                }

            }
        A:
            if (_dtHeader.Rows.Count > 0)
            {
                for (int i = _dtHeader.Rows.Count - 1; i >= 0; i--)
                {
                    if (_dtHeader.Rows[i][0] == DBNull.Value)
                        _dtHeader.Rows[i].Delete();
                }
                _dtHeader.AcceptChanges();
            }


            _err = "";
            _filePath = "";
            //_filePath = ExportExcel2007(_com, _user, _dtHeader, BMSales, out _err);
            //_filePath = ExportExcel2007(_com, _user, BMSales, out _err);
            _filePath = ExportListUsingEPPlus(BMSales, _dtHeader, _com, _user, out _err);
            if (BMSales.Rows.Count != 0)
            {
                InventoryDAL _inventoryDAL = new InventoryDAL();
                DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(_user);
                if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
                {
                    GeneralDAL _generalDAL = new GeneralDAL();
                    //SmtpClient smtpClient = new SmtpClient();
                    //MailMessage message = new MailMessage();

                    //MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                    //smtpClient.Host = _generalDAL.GetMailHost();
                    //smtpClient.Port = 25;
                    //message.From = fromAddress;

                    ////CommonSearchBLL _commonBLL = new CommonSearchBLL();
                    //string _mail = "";
                    //_mail += "Generated report path as follows" + Environment.NewLine;
                    //_mail += _filePath + Environment.NewLine + Environment.NewLine;

                    //_mail += "*** This is an automatically generated email, please do not reply ***" + Environment.NewLine;

                    //message.To.Add(_dtEmail.Rows[0]["SE_EMAIL"].ToString());
                    //message.Subject = "User Defined Reports";
                    ////message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    ////message.Bcc.Add(new MailAddress(""));
                    //message.IsBodyHtml = false;
                    //message.Body = _mail;
                    //message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

                    //// Send SMTP mail
                    //smtpClient.Send(message);

                    //_commonBLL.Send_SMTPMail(_dtEmail.Rows[0]["SE_EMAIL"].ToString(), "User Defined Reports", _mail);
                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();
                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;
                    string FOOTER = _generalDAL.GetMailFooterMsg();
                    string _email = "";
                    // string _docNo = _docNo.Replace("Normal:", "");
                    _email = "Generated report path as follows" + Environment.NewLine;
                    _email += _filePath + Environment.NewLine + Environment.NewLine;
                    //_email = _email + "Approved #-" + _docNo + " <br><P>";
                    _email = _email + "<br>" + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                    message.To.Add(_dtEmail.Rows[0]["SE_EMAIL"].ToString());
                    //message.Bcc.Add("amilasanjeewa@abansgroup.com");
                    message.Subject = "User Defined Reports";
                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    //message.Bcc.Add(new MailAddress(""));
                    message.IsBodyHtml = false;
                    message.Body = _email;
                    message.IsBodyHtml = true;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    // Send SMTP mail
                    smtpClient.Send(message);
                }
            }

            _header = _dtHeader;
            _result = BMSales;

            if (_header.Rows.Count == 0) _header = null;
            if (_result.Rows.Count == 0) _result = null;
            return _err;

        }

        public string getHPBMSalesDetails1(DateTime _FromDate, DateTime _ToDate, string allOne, string allTwo, string allThree, string _invdate, string _com, string _user, DataTable _col, DataTable _row, DataTable _val, DataTable _col1, Dictionary<string, string[]> dataValues, out DataTable _result, out DataTable _header, int _foc, int _intercom, int intcurdate, int _inthpsales, int _intcrecardsale, int _servicecharge, int _intitem, string hpinttype, int _arrsAmt, int _collPeriod, int _term, DataTable dtNewColumn, List<HPFilter> _lst, out string _err, bool listing)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_lst == null)
            {
                _lst = new List<HPFilter>();
            }
            _err = string.Empty;
            string _filePath = string.Empty;
            int s = 0;
            int t = 0;
            int u = 0;
            int v = 0;
            int a = 0;
            int b = 0;

            _header = null;
            DataTable _dtResults = new DataTable();
            DataTable _dtResults1 = new DataTable();
            DataTable _dtResults2 = new DataTable();
            DataTable _repHead = _financialDAL.getHPBMReportHeading("HP_BM_SALES");
            DataTable _fiterdate = _lst.ToDataTable();
            String[] szColumns = new String[_col.Rows.Count];
            String[] szRows = new String[_row.Rows.Count];
            String[] szVals = new String[_val.Rows.Count];
            String[] szRowsnew = new String[dtNewColumn.Rows.Count];
            String[] szValsnew = new String[dtNewColumn.Rows.Count];
            string vRows = "";
            string vCols = "";
            string vColsCommon = "";

            DataTable BMSales1 = new DataTable();
            DataTable BMSales2 = new DataTable();

            DataTable BMSales = new DataTable();
            BMSales.TableName = "BMTable";
            DataTable _dtHeader = new DataTable();
            _dtHeader.TableName = "BMHeader";
            DataRow dr;
            DataRow dr1;
            DataRow dr2;
            DataRow dt2dr;

            BMSales.Clear();
            if (_repHead.Rows.Count <= 0)
            {
                _err = "Report Headings not defined.";
                goto A;
            }

            DataTable _dtResultsM;
            int _year;
            int _month;
            DateTime _vfromdate;
            DateTime _vtodate;
            DateTime _vfromdateT;
            DateTime _vtodateT;

            TimeSpan _diffDate = _ToDate - _FromDate;
            int _months = (_diffDate.Days / 30);

            _vfromdateT = _FromDate;

            string _SelCols = "";
            string _filterCols1 = "";
            foreach (DataRow _drcol in _col.Rows)
            {
                if (_SelCols != "") { _SelCols = _SelCols + ","; }
                _SelCols = _SelCols + _drcol["bmr_col_nm"].ToString();
            }
            foreach (DataRow _drrow in _row.Rows)
            {
                if (_SelCols != "") { _SelCols = _SelCols + ","; }
                _SelCols = _SelCols + _drrow["bmr_col_nm"].ToString();
            }
            foreach (DataRow _drval in _val.Rows)
            {
                if (_SelCols != "") { _SelCols = _SelCols + ","; }
                _SelCols = _SelCols + _drval["bmr_col_nm"].ToString();
            }

            foreach (DataRow _drcol1 in dtNewColumn.Rows)
            {
                if (_SelCols != "") { _SelCols = _SelCols + ","; }
                _SelCols = _SelCols + _drcol1["bms_col_cd"].ToString();
                if (_SelCols != "") { _SelCols = _SelCols + ","; }
                _SelCols = _SelCols + _drcol1["bms_val_cd"].ToString();
            }

            _filterCols1 = _filterColsHP(dataValues, _SelCols);

            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _SelCols = _SelCols + _filterCols1;

            if (_securityDAL.Is_Report_DR("BMHPSales") == true) _financialDAL.ConnectionOpen_DR();

            for (int _mon = 1; _mon <= _months + 1; _mon++)
            {
                _vtodateT = _vfromdateT.AddMonths(1).AddDays(-1);
                if (_ToDate < _vtodateT) { _vtodateT = _ToDate; }

                _year = _vfromdateT.Year;
                _month = _vfromdateT.Month;

                _dtResultsM = _financialDAL.getBMHPDetails(_year, _month, _user, _SelCols);

                if (_dtResultsM.Rows.Count > 0)
                {
                    _dtResults1 = _filterBMSalesHP(_dtResultsM, dataValues);
                    _dtResults2.Merge(_dtResults1);
                }
                _vfromdateT = _vfromdateT.AddMonths(1);
            }

            if (listing == true)
            {
                if (_dtResults2.Rows.Count > 0)
                {
                    _dtHeader = new DataTable();
                    for (int _colm = 0; _colm <= _dtResults2.Columns.Count - 1; _colm++)
                    {
                        _dtHeader.Columns.Add(_dtResults2.Columns[_colm].ColumnName.ToString(), typeof(string));
                    }

                    int _colcount = 0;
                    for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                            {
                                if (drlochead["bmr_data_tp"].ToString() != "decimal")
                                {
                                    _colcount = _colcount + 1;
                                }
                            }
                        }
                    }

                    String[] szColumns1 = new String[_colcount];
                    BMSales = _dtResults2;
                    DataRow drs;
                    drs = _dtHeader.NewRow();
                    t = 0;

                    for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                    {
                        string _colname = "";

                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                            {
                                _colname = drlochead["bmr_col_desc"].ToString();

                                if (drlochead["bmr_data_tp"].ToString() != "decimal")
                                {
                                    szColumns1[t] = drlochead["bmr_col_nm"].ToString().ToUpper();
                                    t = t + 1;
                                }
                            }
                        }

                        drs[_colm] = _colname;

                    }
                    _dtHeader.Rows.Add(drs);
                    _dtHeader.TableName = "BMHeader";
                    ////////////////

                    DataTable OFI = BMSales.DefaultView.ToTable(true, szColumns1);

                    DataView viewFI = new DataView(OFI);
                    viewFI.Sort = vRows;
                    DataTable _dtResultsSum = viewFI.ToTable();



                    //BMSales

                    if (BMSales.Rows.Count > 0)
                    {
                        foreach (DataRow _drresult in _dtResultsSum.Rows)
                        {
                            string _filter = "";
                            string _group = "";

                            for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

                                if (_group != "")
                                { _group = _group + " ,"; }
                                _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
                            }
                            if (_filter != "")
                            {
                                //DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();
                                var filteredDataRows1 = BMSales.Select(_filter);
                                var dt1 = new DataTable();
                                if (filteredDataRows1.Length != 0)
                                    dt1 = filteredDataRows1.CopyToDataTable();
                                else
                                    dt1 = _dtResults.Clone();

                                var ownerGroups = dt1.AsEnumerable()
                                    .GroupBy(row => new { _group });
                                var dt2 = dt1.Clone();
                                var intColumns = dt2.Columns.Cast<DataColumn>()
                                    .Where(c => c.DataType == typeof(decimal)).ToArray();
                                foreach (var grp in ownerGroups)
                                {
                                    var row = dt2.Rows.Add();

                                    for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                                    {
                                        if (_dtResultsSum.Columns[index].DataType.ToString() != "decimal")
                                        {
                                            row.SetField(_dtResultsSum.Columns[index].ColumnName.ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_dtResultsSum.Columns[index].ToString()].Ordinal));
                                        }
                                    }
                                    //foreach (DataRow _drcol in _col.Rows)
                                    //{
                                    //    row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drcol[0].ToString()].Ordinal));
                                    //}
                                    //foreach (DataRow _drrow in _row.Rows)
                                    //{
                                    //    row.SetField(_drrow[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drrow[0].ToString()].Ordinal));
                                    //}
                                    foreach (DataColumn col in intColumns)
                                    {
                                        bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                                        decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                                        row.SetField(col, sum);
                                    }
                                }

                                BMSales1.Merge(dt2);
                            }
                        }
                    }

                }



                BMSales = new DataTable();
                BMSales = BMSales1;

                #region sum
                DataView viewFIn = new DataView(BMSales);
                viewFIn.Sort = vColsCommon;
                BMSales = viewFIn.ToTable();

                string _group1 = "";
                var dt1tot = new DataTable();
                dt1tot = BMSales;
                //var ownerGroupstot = dt1tot;
                var ownerGroupstot = dt1tot.AsEnumerable()
                                 .GroupBy(row => new { _group1 });
                var dt2tot = dt1tot.Clone();
                var intColumnstot = dt2tot.Columns.Cast<DataColumn>()
                    .Where(c => c.DataType == typeof(decimal)).ToArray();
                foreach (var grp in ownerGroupstot)
                {
                    var row = dt2tot.Rows.Add();

                    foreach (DataRow _drcol in _col.Rows)
                    {
                        if (dt2tot.Columns[0].DataType.ToString() == "String")
                        {
                            row.SetField("Col0", "Total");
                        }
                    }
                    //foreach (DataRow _drrow in _row.Rows)
                    //{
                    //    row.SetField(_drrow[0].ToString(), "");
                    //}
                    foreach (DataColumn col in intColumnstot)
                    {
                        bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                        decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                        row.SetField(col, sum);
                    }
                }

                BMSales.Merge(dt2tot);
                #endregion
                BMSales.TableName = "BMTable";
            }
            else
            {
                if (_dtResults2.Rows.Count > 0)
                {
                    foreach (DataRow _drcol in _col.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drcol["bmr_col_nm"].ToString())
                            {
                                if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add("Col" + t, typeof(string));
                                if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add("Col" + t, typeof(int));
                                if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add("Col" + t, typeof(decimal));
                                _dtHeader.Columns.Add("Col" + t, typeof(string));
                                szColumns[t] = drlochead["bmr_col_nm"].ToString();
                                if (vCols != "") vCols = vCols + ",";
                                vCols = vCols + drlochead["bmr_col_nm"].ToString();
                                if (vColsCommon != "") vColsCommon = vColsCommon + ",";
                                vColsCommon = vColsCommon + "Col" + t;
                                t = t + 1;
                            }
                        }
                    }

                    foreach (DataRow _drval in _val.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drval["bmr_col_nm"].ToString())
                            {
                                szVals[v] = drlochead["bmr_col_nm"].ToString();
                                v = v + 1;
                            }
                        }
                    }

                    foreach (DataRow _drrow in _row.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drrow["bmr_col_nm"].ToString())
                            {
                                szRows[u] = drlochead["bmr_col_nm"].ToString();
                                if (vRows != "") vRows = vRows + ",";
                                vRows = vRows + drlochead["bmr_col_nm"].ToString();
                                u = u + 1;
                            }
                        }
                    }

                    string[] szColRows = new String[szRows.Count() + szColumns.Count()];
                    szColRows = szColumns.Concat(szRows).ToArray();

                    DataTable _dtResultsSum = new DataTable();
                    _dtResults = _dtResults2;

                    if (u != 0)
                    {
                        DataTable OFI = _dtResults.DefaultView.ToTable(true, szColRows);

                        DataView viewFI = new DataView(OFI);
                        viewFI.Sort = vRows;
                        _dtResultsSum = viewFI.ToTable();
                    }
                    else
                    {
                        _dtResultsSum = _dtResults;
                    }

                    DataTable _insertnull = _dtResults.DefaultView.ToTable(true, szRows);
                    DataTable _insertnull1 = _dtResults.DefaultView.ToTable(true, szColumns);

                    foreach (DataRow _drrowc in _insertnull1.Rows)
                    {
                        foreach (DataRow _drrowr in _insertnull.Rows)
                        {
                            DataRow drs;
                            DataRow drs1;
                            drs = _dtResults.NewRow();
                            drs1 = _dtResultsSum.NewRow();

                            string _filter = "";
                            for (int index = 0; index < _insertnull1.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _insertnull1.Columns[index].ColumnName + "]" + " ='" + _drrowc[index].ToString() + "'";
                                drs[index] = _drrowc[index].ToString();
                                drs1[index] = _drrowc[index].ToString();
                            }
                            for (int index = 0; index < _insertnull.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _insertnull.Columns[index].ColumnName + "]" + " ='" + _drrowr[index].ToString() + "'";
                                drs[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
                                drs1[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
                            }
                            int x = 0;
                            foreach (DataRow _drval in _val.Rows)
                            {
                                drs[x + _insertnull1.Columns.Count + _insertnull.Columns.Count] = 0;
                                x++;
                            }
                            if (dtNewColumn != null)
                            {
                                foreach (DataRow _drval in dtNewColumn.Rows)
                                {
                                    drs[x + _insertnull1.Columns.Count + _insertnull.Columns.Count] = 0;
                                    x++;
                                    drs[x + _insertnull1.Columns.Count + _insertnull.Columns.Count] = 0;
                                    x++;
                                }
                            }
                            var insertnulls = _dtResultsSum.Select(_filter);
                            var dt1 = new DataTable();
                            if (insertnulls.Length != 0)
                                dt1 = insertnulls.CopyToDataTable();
                            else
                                dt1 = _dtResults.Clone();

                            if (dt1.Rows.Count == 0)
                            {
                                _dtResults.Rows.Add(drs);
                                _dtResultsSum.Rows.Add(drs1);
                            }

                        }
                    }
                    DataTable _dtResultsnew = new DataTable();
                    _dtResultsnew = _dtResults;

                    if (_dtResultsSum.Rows.Count > 0)
                    {
                        foreach (DataRow _drresult in _dtResultsSum.Rows)
                        {
                            string _filter = "";
                            string _group = "";

                            for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

                                if (_group != "")
                                { _group = _group + " ,"; }
                                _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
                            }
                            if (_filter != "")
                            {
                                //DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();
                                var filteredDataRows1 = _dtResults.Select(_filter);
                                var dt1 = new DataTable();
                                if (filteredDataRows1.Length != 0)
                                    dt1 = filteredDataRows1.CopyToDataTable();
                                else
                                    dt1 = _dtResults.Clone();

                                var ownerGroups = dt1.AsEnumerable()
                                    .GroupBy(row => new { _group });
                                var dt2 = dt1.Clone();
                                var intColumns = dt2.Columns.Cast<DataColumn>()
                                    .Where(c => c.DataType == typeof(decimal)).ToArray();
                                foreach (var grp in ownerGroups)
                                {
                                    var row = dt2.Rows.Add();

                                    foreach (DataRow _drcol in _col.Rows)
                                    {
                                        row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drcol[0].ToString()].Ordinal));
                                    }
                                    foreach (DataRow _drrow in _row.Rows)
                                    {
                                        row.SetField(_drrow[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drrow[0].ToString()].Ordinal));
                                    }
                                    foreach (DataColumn col in intColumns)
                                    {
                                        bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                                        decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                                        row.SetField(col, sum);
                                    }
                                }

                                BMSales1.Merge(dt2);
                            }
                        }
                    }

                    _dtResults = BMSales1.DefaultView.ToTable(true, szColRows.Concat(szVals).ToArray());

                    DataTable _dtResultsSum2 = new DataTable();

                    if (_dtResults.Rows.Count > 0)
                    {
                        if (u != 0)
                        {
                            DataTable OFI2 = _dtResults.DefaultView.ToTable(true, szRows);

                            DataView viewFI2 = new DataView(OFI2);
                            viewFI2.Sort = vRows;
                            _dtResultsSum2 = viewFI2.ToTable();
                        }
                        else
                        {
                            _dtResultsSum2 = _dtResults;
                        }


                        if (_dtResultsSum2.Rows.Count > 0)
                        {
                            for (int index = 0; index < _dtResultsSum2.Rows.Count; index++)
                            {
                                foreach (string _val1 in szVals)
                                {
                                    BMSales.Columns.Add("Col" + t, typeof(decimal));
                                    _dtHeader.Columns.Add("Col" + t, typeof(string));
                                    t = t + 1;
                                }
                            }
                        }

                        int ab = 1;

                        DataTable OFI3 = _dtResults.DefaultView.ToTable(true, szColumns);

                        if (OFI3.Rows.Count > 0)
                        {
                            foreach (DataRow _drow in OFI3.Rows)
                            {
                                string _filter = "";
                                string _group = "";

                                for (int index = 0; index < OFI3.Columns.Count; index++)
                                {
                                    if (_filter != "")
                                    { _filter = _filter + " and "; }
                                    _filter = _filter + "[" + OFI3.Columns[index].ColumnName + "]" + " ='" + _drow[index].ToString() + "'";

                                    if (_group != "")
                                    { _group = _group + " ,"; }
                                    _group = _group + "[" + OFI3.Columns[index].ColumnName + "] = row.Field<string>([" + OFI3.Columns[index].ColumnName + "])";
                                }
                                if (_filter != "")
                                {
                                    DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();

                                    string _filter1 = "";
                                    int w = 0;
                                    int x = 0;
                                    int y = 0;
                                    int z = 0;
                                    int aa = 0;

                                    //dr1 = new DataRow();
                                    //if (ab < _row.Rows.Count + 1)                                 

                                    dr1 = _dtHeader.NewRow();
                                    dr = BMSales.NewRow();

                                    if (_dtResultsSum2.Rows.Count > 0)
                                    {
                                        foreach (DataRow _drow1 in _dtResultsSum2.Rows)
                                        {
                                            _filter1 = "";

                                            for (int index = 0; index < dt1.Columns.Count; index++)
                                            {
                                                for (int index2 = 0; index2 < _dtResultsSum2.Columns.Count; index2++)
                                                {
                                                    if (_dtResultsSum2.Columns[index2].ColumnName == dt1.Columns[index].ColumnName)
                                                    {
                                                        if (_filter1 != "")
                                                        { _filter1 = _filter1 + " and "; }
                                                        _filter1 = _filter1 + "[" + dt1.Columns[index].ColumnName + "]" + " ='" + _drow1[index2].ToString() + "'";
                                                    }
                                                }
                                            }

                                            if (_filter1 != "")
                                            {
                                                var filteredDataRows = dt1.Select(_filter1);
                                                var dt2 = new DataTable();
                                                if (filteredDataRows.Length != 0)
                                                    dt2 = filteredDataRows.CopyToDataTable();
                                                else
                                                    if (w != 0)
                                                    {
                                                        dt2 = dt1.Clone();
                                                        dt2dr = dt2.NewRow();
                                                        int dt2num = 0;
                                                        int dt2num1 = 0;
                                                        foreach (DataRow _drcol in _col.Rows)
                                                        {
                                                            dt2dr[dt2num] = _drow[dt2num1].ToString();
                                                            dt2num1 = dt2num1 + 1;
                                                            dt2num = dt2num + 1;
                                                        }
                                                        dt2num1 = 0;
                                                        foreach (DataRow _drrow in _row.Rows)
                                                        {
                                                            dt2dr[dt2num] = _drow1[dt2num1].ToString();
                                                            dt2num1 = dt2num1 + 1;
                                                            dt2num = dt2num + 1;
                                                        }
                                                        dt2num1 = 0;
                                                        foreach (DataRow _drval in _val.Rows)
                                                        {
                                                            dt2dr[dt2num] = 0;
                                                            dt2num1 = dt2num1 + 1;
                                                            dt2num = dt2num + 1;
                                                        }
                                                        dt2.Rows.Add(dt2dr);
                                                    }

                                                //w = w + _val.Rows.Count; else aa = 2;
                                                //DataTable dt2 = dt1.Select(_filter1).CopyToDataTable();

                                                foreach (DataRow _drow3 in dt2.Rows)
                                                {
                                                    if (BMSales.Columns.Count > w)
                                                    {
                                                        if (z == y)
                                                        {
                                                            foreach (DataRow _drcol in _col.Rows)
                                                            {
                                                                for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                                {
                                                                    if (dt2.Columns[index4].ColumnName.ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
                                                                    {
                                                                        foreach (DataRow drlochead in _repHead.Rows)
                                                                        {
                                                                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
                                                                            {
                                                                                if (drlochead["bmr_data_tp"].ToString() == "string") dr[w] = _drow3[y].ToString().ToUpper();
                                                                                if (drlochead["bmr_data_tp"].ToString() == "int") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToInt16(_drow3[y].ToString()) : 00;
                                                                                if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToDecimal(_drow3[y].ToString()) : 00;
                                                                                //if (ab < _row.Rows.Count + 1)
                                                                                //{
                                                                                if (ab == 1) dr1[w] = _drcol["bmr_col_desc"].ToString().ToUpper();
                                                                                //}

                                                                                w = w + 1;
                                                                                //x = x + 1;
                                                                                y = y + 1;
                                                                                z = z + 1;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                            int ad = _col.Rows.Count;
                                                            foreach (DataRow _drrow in _row.Rows)
                                                            {
                                                                for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                                {
                                                                    if (dt2.Columns[index4].ColumnName.ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
                                                                    {
                                                                        foreach (DataRow drlochead in _repHead.Rows)
                                                                        {
                                                                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
                                                                            {
                                                                                if (ab == 1)
                                                                                {
                                                                                    dr2 = _dtHeader.NewRow();
                                                                                    int ac = 0;
                                                                                    foreach (DataRow _drcol in _col.Rows)
                                                                                    {
                                                                                        dr2[ac] = ".";
                                                                                        ac = ac + 1;
                                                                                    }
                                                                                    foreach (DataRow _drow4 in _dtResultsSum2.Rows)
                                                                                    {
                                                                                        foreach (DataRow _drval in _val.Rows)
                                                                                        {
                                                                                            if (dt2.Columns[ad].ColumnName.ToUpper() == "BHS_MONTH")
                                                                                            {
                                                                                                dr2[ac] = _getMonthName(Convert.ToInt16(_drow4[dt2.Columns[ad].ColumnName.ToUpper()])).ToUpper();
                                                                                            }
                                                                                            else if (dt2.Columns[ad].ColumnName.ToUpper() == "BHS_YEAR")
                                                                                            {
                                                                                                dr2[ac] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                dr2[ac] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
                                                                                            }
                                                                                            //if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_MONTH" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_MONTH")
                                                                                            //{
                                                                                            //    dr2[ac] = _getMonthName(Convert.ToInt16(_drow4[0])).ToUpper();
                                                                                            //}
                                                                                            //else if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_DAY")
                                                                                            //{
                                                                                            //    dr2[ac] = Convert.ToInt16(_drow4[0]);
                                                                                            //}
                                                                                            //else
                                                                                            //{
                                                                                            //    dr2[ac] = _drow4[0].ToString().ToUpper();
                                                                                            //}
                                                                                            ac = ac + 1;
                                                                                        }

                                                                                    }
                                                                                    ad = ad + 1;
                                                                                    _dtHeader.Rows.Add(dr2);
                                                                                }
                                                                                //x = x + 1;
                                                                                y = y + 1;
                                                                                z = z + 1;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        foreach (DataRow _drval in _val.Rows)
                                                        {
                                                            for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                            {
                                                                if (dt2.Columns[index4].ColumnName.ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
                                                                {
                                                                    foreach (DataRow drlochead in _repHead.Rows)
                                                                    {
                                                                        if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
                                                                        {
                                                                            if (drlochead["bmr_data_tp"].ToString() == "string") dr[w + aa] = _drow3[x + y].ToString().ToUpper();
                                                                            if (drlochead["bmr_data_tp"].ToString() == "int") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToInt32(_drow3[x + y].ToString()) : 00;
                                                                            if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToDecimal(_drow3[x + y].ToString()) : 00;
                                                                            if (ab == 1)
                                                                            {
                                                                                //if (dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_MONTH" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_INV_MONTH")
                                                                                //{
                                                                                //    dr1[w] = _getMonthName(Convert.ToInt16(_drval["bmr_col_desc"])).ToUpper();
                                                                                //}
                                                                                //else if (dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_YEAR" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_INV_YEAR" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_DAY")
                                                                                //{
                                                                                //    dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                //}
                                                                                //else
                                                                                //{
                                                                                dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                //}
                                                                                //if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_MONTH" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_MONTH")
                                                                                //{
                                                                                //    dr1[w] = _getMonthName(Convert.ToInt16(_drval["bmr_col_desc"])).ToUpper();
                                                                                //}
                                                                                //else if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_DAY")
                                                                                //{
                                                                                //    dr1[w] = Convert.ToInt16(_drval["bmr_col_desc"]);
                                                                                //}
                                                                                //else
                                                                                //{
                                                                                //    dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                //}
                                                                            }

                                                                            w = w + 1;
                                                                            x = x + 1;
                                                                            z = z + 1;
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        x = 0;
                                                        aa = 0;
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    //if (ab < _row.Rows.Count) 

                                    _dtHeader.Rows.Add(dr1);
                                    BMSales.Rows.Add(dr);
                                    ab = ab + 1;

                                }
                            }
                        }

                    }

                    //New Section

                    if (dtNewColumn.Rows.Count > 0)
                    {
                        _dtResultsSum = new DataTable();
                        vRows = "";


                        foreach (DataRow _drval in dtNewColumn.Rows)
                        {
                            foreach (DataRow drlochead in _repHead.Rows)
                            {
                                if (drlochead["bmr_col_nm"].ToString() == _drval["bms_val_cd"].ToString())
                                {
                                    szValsnew[a] = drlochead["bmr_col_nm"].ToString();
                                    a = a + 1;
                                }
                                if (drlochead["bmr_col_nm"].ToString() == _drval["bms_col_cd"].ToString())
                                {
                                    szRowsnew[b] = drlochead["bmr_col_nm"].ToString();
                                    if (vRows != "") vRows = vRows + ",";
                                    vRows = vRows + drlochead["bmr_col_nm"].ToString();
                                    b = b + 1;
                                }
                            }
                        }

                        _dtResults = _dtResultsnew;//.DefaultView.ToTable(true, szColumns.Concat(szRowsnew).Concat(szValsnew).ToArray());
                        _dtResultsSum = _dtResults.DefaultView.ToTable(true, szColumns.Concat(szRowsnew).ToArray());
                        _dtResults = _dtResults.DefaultView.ToTable(true, szColumns.Concat(szRowsnew).Concat(szValsnew).ToArray());

                        if (_dtResultsSum.Rows.Count > 0)
                        {
                            foreach (DataRow _drresult in _dtResultsSum.Rows)
                            {
                                string _filter = "";
                                string _group = "";

                                for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                                {
                                    if (_filter != "")
                                    { _filter = _filter + " and "; }
                                    _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

                                    if (_group != "")
                                    { _group = _group + " ,"; }
                                    _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
                                }
                                if (_filter != "")
                                {
                                    var filteredDataRows1 = _dtResults.Select(_filter);
                                    var dt1 = new DataTable();
                                    if (filteredDataRows1.Length != 0)
                                        dt1 = filteredDataRows1.CopyToDataTable();
                                    else
                                        dt1 = _dtResults.Clone();

                                    var ownerGroups = dt1.AsEnumerable()
                                        .GroupBy(row => new { _group });
                                    var dt2 = dt1.Clone();
                                    var intColumns = dt2.Columns.Cast<DataColumn>()
                                        .Where(c => c.DataType == typeof(decimal)).ToArray();
                                    foreach (var grp in ownerGroups)
                                    {
                                        var row = dt2.Rows.Add();

                                        foreach (DataRow _drcol in _col.Rows)
                                        {
                                            row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drcol[0].ToString()].Ordinal));
                                        }
                                        foreach (DataRow _drcol in dtNewColumn.Rows)
                                        {
                                            row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drcol[0].ToString()].Ordinal));
                                            //row.SetField(_drcol[2].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drcol[2].ToString()].Ordinal));

                                            //bool anyNonNull = grp.Any(r => r.Field<decimal?>(_dtResults.Columns[_drcol[0].ToString()].Ordinal).HasValue);
                                            //decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(_dtResults.Columns[_drcol[0].ToString()].Ordinal)) : null;
                                            //row.SetField(_drcol[0].ToString(), sum);

                                            bool anyNonNull = grp.Any(r => r.Field<decimal?>(_dtResults.Columns[_drcol[2].ToString()].Ordinal).HasValue);
                                            decimal? sum1 = anyNonNull ? grp.Sum(r => r.Field<decimal?>(_dtResults.Columns[_drcol[2].ToString()].Ordinal)) : null;
                                            row.SetField(_drcol[2].ToString(), sum1);
                                        }
                                        //foreach (DataColumn col in intColumns)
                                        //{
                                        //    bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                                        //    decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                                        //    row.SetField(col, sum);
                                        //}
                                    }

                                    BMSales2.Merge(dt2);
                                }
                            }
                        }

                        _dtResults = BMSales2.DefaultView.ToTable(true, szColumns.Concat(szRowsnew).Concat(szValsnew).ToArray());

                        _dtResultsSum2 = new DataTable();

                        if (_dtResults.Rows.Count > 0)
                        {
                            for (int d = 0; d < szRowsnew.Count(); d++)
                            {
                                if (u != 0)
                                {
                                    DataTable OFI2 = _dtResults.DefaultView.ToTable(true, szRowsnew[d]);

                                    DataView viewFI2 = new DataView(OFI2);
                                    viewFI2.Sort = szRowsnew[d];
                                    _dtResultsSum2 = viewFI2.ToTable();
                                }
                                else
                                {
                                    _dtResultsSum2 = _dtResults;
                                }


                                if (_dtResultsSum2.Rows.Count > 0)
                                {
                                    for (int index = 0; index < _dtResultsSum2.Rows.Count; index++)
                                    {
                                        foreach (string _val1 in szValsnew)
                                        {
                                            BMSales.Columns.Add("Col" + t, typeof(decimal));
                                            _dtHeader.Columns.Add("Col" + t, typeof(string));
                                            t = t + 1;
                                        }
                                    }
                                }

                                int ab = 1;

                                DataTable OFI3 = _dtResults.DefaultView.ToTable(true, szColumns);

                                if (OFI3.Rows.Count > 0)
                                {
                                    foreach (DataRow _drow in OFI3.Rows)
                                    {
                                        string _filter = "";
                                        string _group = "";

                                        for (int index = 0; index < OFI3.Columns.Count; index++)
                                        {
                                            if (_filter != "")
                                            { _filter = _filter + " and "; }
                                            _filter = _filter + "[" + OFI3.Columns[index].ColumnName + "]" + " ='" + _drow[index].ToString() + "'";

                                            if (_group != "")
                                            { _group = _group + " ,"; }
                                            _group = _group + "[" + OFI3.Columns[index].ColumnName + "] = row.Field<string>([" + OFI3.Columns[index].ColumnName + "])";
                                        }
                                        if (_filter != "")
                                        {
                                            DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();

                                            string _filter1 = "";
                                            int w = 0;
                                            int x = 0;
                                            int y = 0;
                                            int z = 0;
                                            int aa = 0;

                                            dr1 = _dtHeader.NewRow();
                                            dr = BMSales.NewRow();

                                            if (_dtResultsSum2.Rows.Count > 0)
                                            {
                                                foreach (DataRow _drow1 in _dtResultsSum2.Rows)
                                                {
                                                    _filter1 = "";

                                                    for (int index = 0; index < dt1.Columns.Count; index++)
                                                    {
                                                        for (int index2 = 0; index2 < _dtResultsSum2.Columns.Count; index2++)
                                                        {
                                                            if (_dtResultsSum2.Columns[index2].ColumnName == dt1.Columns[index].ColumnName)
                                                            {
                                                                if (_filter1 != "")
                                                                { _filter1 = _filter1 + " and "; }
                                                                _filter1 = _filter1 + "[" + dt1.Columns[index].ColumnName + "]" + " ='" + _drow1[index2].ToString() + "'";
                                                            }
                                                        }
                                                    }

                                                    if (_filter1 != "")
                                                    {
                                                        var filteredDataRows = dt1.Select(_filter1);
                                                        var dt2 = new DataTable();
                                                        if (filteredDataRows.Length != 0)
                                                            dt2 = filteredDataRows.CopyToDataTable();
                                                        else
                                                            if (w != 0)
                                                            {
                                                                dt2 = dt1.Clone();
                                                                dt2dr = dt2.NewRow();
                                                                int dt2num = 0;
                                                                int dt2num1 = 0;
                                                                foreach (DataRow _drcol in _col.Rows)
                                                                {
                                                                    dt2dr[dt2num] = _drow[dt2num1].ToString();
                                                                    dt2num1 = dt2num1 + 1;
                                                                    dt2num = dt2num + 1;
                                                                }
                                                                dt2num1 = 0;
                                                                foreach (DataRow _drrow in _row.Rows)
                                                                {
                                                                    dt2dr[dt2num] = _drow1[dt2num1].ToString();
                                                                    dt2num1 = dt2num1 + 1;
                                                                    dt2num = dt2num + 1;
                                                                }
                                                                dt2num1 = 0;
                                                                foreach (DataRow _drval in _val.Rows)
                                                                {
                                                                    dt2dr[dt2num] = 0;
                                                                    dt2num1 = dt2num1 + 1;
                                                                    dt2num = dt2num + 1;
                                                                }
                                                                dt2.Rows.Add(dt2dr);
                                                            }

                                                        foreach (DataRow _drow3 in dt2.Rows)
                                                        {
                                                            if (BMSales.Columns.Count > w)
                                                            {
                                                                if (z == y)
                                                                {
                                                                    foreach (DataRow _drcol in _col.Rows)
                                                                    {
                                                                        for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                                        {
                                                                            if (dt2.Columns[index4].ColumnName.ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
                                                                            {
                                                                                foreach (DataRow drlochead in _repHead.Rows)
                                                                                {
                                                                                    if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
                                                                                    {
                                                                                        if (drlochead["bmr_data_tp"].ToString() == "string") dr[w] = _drow3[y].ToString().ToUpper();
                                                                                        if (drlochead["bmr_data_tp"].ToString() == "int") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToInt16(_drow3[y].ToString()) : 00;
                                                                                        if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToDecimal(_drow3[y].ToString()) : 00;

                                                                                        if (ab == 1) dr1[w] = _drcol["bmr_col_desc"].ToString().ToUpper();

                                                                                        w = w + 1;
                                                                                        y = y + 1;
                                                                                        z = z + 1;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                    int ad = _col.Rows.Count;
                                                                    foreach (DataRow _drrow in dtNewColumn.Rows)
                                                                    {
                                                                        for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                                        {
                                                                            if (dt2.Columns[index4].ColumnName.ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
                                                                            {
                                                                                foreach (DataRow drlochead in _repHead.Rows)
                                                                                {
                                                                                    if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
                                                                                    {
                                                                                        if (ab == 1)
                                                                                        {
                                                                                            dr2 = _dtHeader.NewRow();
                                                                                            int ac = 0;
                                                                                            foreach (DataRow _drcol in _col.Rows)
                                                                                            {
                                                                                                dr2[ac] = ".";
                                                                                                ac = ac + 1;
                                                                                            }
                                                                                            foreach (DataRow _drow4 in _dtResultsSum2.Rows)
                                                                                            {
                                                                                                foreach (DataRow _drval in _val.Rows)
                                                                                                {
                                                                                                    if (dt2.Columns[ad].ColumnName.ToUpper() == "BHS_MONTH")
                                                                                                    {
                                                                                                        dr2[ac] = _getMonthName(Convert.ToInt16(_drow4[dt2.Columns[ad].ColumnName.ToUpper()])).ToUpper();
                                                                                                    }
                                                                                                    else if (dt2.Columns[ad].ColumnName.ToUpper() == "BHS_YEAR")
                                                                                                    {
                                                                                                        dr2[ac] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        dr2[ac] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
                                                                                                    }

                                                                                                    ac = ac + 1;
                                                                                                }

                                                                                            }
                                                                                            ad = ad + 1;
                                                                                            _dtHeader.Rows.Add(dr2);
                                                                                        }
                                                                                        //x = x + 1;
                                                                                        y = y + 1;
                                                                                        z = z + 1;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                foreach (DataRow _drval in _val.Rows)
                                                                {
                                                                    for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                                    {
                                                                        if (dt2.Columns[index4].ColumnName.ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
                                                                        {
                                                                            foreach (DataRow drlochead in _repHead.Rows)
                                                                            {
                                                                                if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
                                                                                {
                                                                                    if (drlochead["bmr_data_tp"].ToString() == "string") dr[w + aa] = _drow3[x + y].ToString().ToUpper();
                                                                                    if (drlochead["bmr_data_tp"].ToString() == "int") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToInt32(_drow3[x + y].ToString()) : 00;
                                                                                    if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToDecimal(_drow3[x + y].ToString()) : 00;
                                                                                    if (ab == 1)
                                                                                    {
                                                                                        dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                    }

                                                                                    w = w + 1;
                                                                                    x = x + 1;
                                                                                    z = z + 1;
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                }
                                                                x = 0;
                                                                aa = 0;
                                                            }
                                                        }

                                                    }
                                                }
                                            }

                                            //if (ab < _row.Rows.Count) 

                                            _dtHeader.Rows.Add(dr1);
                                            BMSales.Rows.Add(dr);
                                            ab = ab + 1;

                                        }
                                    }
                                }
                            }
                        }

                    }

                    DataView viewFIn = new DataView(BMSales);
                    viewFIn.Sort = vColsCommon;
                    BMSales = viewFIn.ToTable();

                    string _group1 = "";
                    var dt1tot = new DataTable();
                    dt1tot = BMSales;
                    //var ownerGroupstot = dt1tot;
                    var ownerGroupstot = dt1tot.AsEnumerable()
                                     .GroupBy(row => new { _group1 });
                    var dt2tot = dt1tot.Clone();
                    var intColumnstot = dt2tot.Columns.Cast<DataColumn>()
                        .Where(c => c.DataType == typeof(decimal)).ToArray();
                    foreach (var grp in ownerGroupstot)
                    {
                        var row = dt2tot.Rows.Add();

                        foreach (DataRow _drcol in _col.Rows)
                        {
                            if (dt2tot.Columns[0].DataType.ToString() == "String")
                            {
                                row.SetField("Col0", "Total");
                            }
                        }
                        //foreach (DataRow _drrow in _row.Rows)
                        //{
                        //    row.SetField(_drrow[0].ToString(), "");
                        //}
                        foreach (DataColumn col in intColumnstot)
                        {
                            bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                            decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                            row.SetField(col, sum);
                        }
                    }

                    BMSales.Merge(dt2tot);


                }
                else
                {
                    _err = "No Records Found.";

                }
            }
            if (_dtHeader.Rows.Count > 0)
            {
                for (int i = _dtHeader.Rows.Count - 1; i >= 0; i--)
                {
                    if (_dtHeader.Rows[i][0] == DBNull.Value)
                        _dtHeader.Rows[i].Delete();
                }
                _dtHeader.AcceptChanges();
            }


        A:
            _err = "";
            _filePath = "";
            _filePath = ExportExcel2007(_com, _user, _dtHeader, BMSales, out _err);
            if (BMSales.Rows.Count != 0)
            {
                InventoryDAL _inventoryDAL = new InventoryDAL();
                DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(_user);
                if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
                {
                    GeneralDAL _generalDAL = new GeneralDAL();

                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();
                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;
                    string FOOTER = _generalDAL.GetMailFooterMsg();
                    string _email = "";
                    // string _docNo = _docNo.Replace("Normal:", "");
                    _email = "Generated report path as follows" + Environment.NewLine;
                    _email += _filePath + Environment.NewLine + Environment.NewLine;
                    //_email = _email + "Approved #-" + _docNo + " <br><P>";
                    _email = _email + "<br>" + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                    message.To.Add(_dtEmail.Rows[0]["SE_EMAIL"].ToString());
                    //message.Bcc.Add("amilasanjeewa@abansgroup.com");
                    message.Subject = "HP User Defined Reports";
                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    //message.Bcc.Add(new MailAddress(""));
                    message.IsBodyHtml = false;
                    message.Body = _email;
                    message.IsBodyHtml = true;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    // Send SMTP mail
                    smtpClient.Send(message);
                }
            }

            _header = _dtHeader;
            _result = BMSales;

            if (_header.Rows.Count == 0) _header = null;
            if (_result.Rows.Count == 0) _result = null;
            return _err;
        }
        //public string getBMSalesDetails(DateTime _FromDate, DateTime _ToDate, string _invdate, string _com, string _user, DataTable _col, DataTable _row, DataTable _val, out string _err)
        //public DataTable getBMSalesDetails(DateTime _FromDate, DateTime _ToDate, string _invdate, string _com, string _user, DataTable _col, DataTable _row, DataTable _val,  Dictionary<string, string[]> dataValues,out DataTable _header, out string _err)
        //{
        //    _financialDAL = new FinancialDAL();
        //    _securityDAL = new SecurityDAL();
        //    if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

        //    _err = string.Empty;
        //    string _filePath = string.Empty;
        //    int s = 0;
        //    int t = 0;
        //    int u = 0;

        //    _header = null;
        //    DataTable _dtResults;
        //    DataTable _dtResults1;
        //    DataTable _repHead = _financialDAL.getBMReportHeading("BM_SALES");
        //    String[] szColumns = new String[_col.Rows.Count];
        //    String[] szRows = new String[_row.Rows.Count];
        //    string vRows = "";
        //    string vCols = "";

        //    DataTable BMSales1 = new DataTable();            

        //    DataTable BMSales = new DataTable();
        //    BMSales.TableName = "BMTable";
        //    DataRow dr;

        //    BMSales.Clear();
        //    if (_repHead.Rows.Count <= 0)
        //    {
        //        _err = "Report Headings not defined.";
        //        goto A;
        //    }

        //    _dtResults1 = _financialDAL.getBMSalesDetails(_FromDate, _ToDate, _invdate, _com, "", _user);

        //    _dtResults = _filterBMSales(_dtResults1, dataValues);

        //    foreach (DataRow _drrow in _row.Rows)
        //    {
        //        foreach (DataRow drlochead in _repHead.Rows)
        //        {
        //            if (drlochead["bmr_col_nm"].ToString() == _drrow["bmr_col_nm"].ToString())
        //            {
        //                szRows[u] = drlochead["bmr_col_nm"].ToString();
        //                if (vRows != "") vRows = vRows + ",";
        //                vRows = vRows + drlochead["bmr_col_nm"].ToString();
        //                u = u + 1;
        //            }
        //        }
        //    }

        //    DataTable _dtResultsSum = new DataTable();
        //    if (u != 0)
        //    {
        //        DataTable OFI = _dtResults.DefaultView.ToTable(true, szRows);

        //        DataView viewFI = new DataView(OFI);
        //        viewFI.Sort = vRows;
        //        _dtResultsSum = viewFI.ToTable();
        //    }
        //    else
        //    {
        //        _dtResultsSum = _dtResults;
        //    }

        //    if (_dtResults.Rows.Count > 0)
        //    {
        //        foreach (DataRow _drcol in _col.Rows)
        //        {
        //            foreach (DataRow drlochead in _repHead.Rows)
        //            {
        //                if (drlochead["bmr_col_nm"].ToString() == _drcol["bmr_col_nm"].ToString())
        //                {
        //                    if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
        //                    if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
        //                    if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
        //                    szColumns[t] = drlochead["bmr_col_desc"].ToString();
        //                    t = t + 1;
        //                }
        //            }
        //        }

        //        string _heading = "";
        //        foreach (DataRow _drrow in _dtResultsSum.Rows)
        //        {
        //            _heading = "";
        //            for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
        //            {
        //                if (_heading != "")
        //                { _heading = _heading + " "; }

        //                if (_drrow.Table.Columns[index].ColumnName == "BMS_DO_MONTH")
        //                {
        //                    _heading = _heading + _getMonthName(Convert.ToInt16(_drrow[index])).ToUpper();
        //                }
        //                else if (_drrow.Table.Columns[index].ColumnName == "BMS_DO_YEAR")
        //                {
        //                    _heading = _heading + Convert.ToInt16(_drrow[index]);
        //                }
        //                else
        //                {
        //                    _heading = _heading + _drrow[index].ToString().ToUpper();
        //                }
        //            }

        //            BMSales.Columns.Add(_heading, typeof(decimal));


        //            //if (drlochead["bmr_col_nm"].ToString() == _drrow["bmr_col_nm"].ToString())
        //            //{
        //            //    if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
        //            //    if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
        //            //    if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
        //            //    //szRows[u] = drlochead["bmr_col_desc"].ToString();
        //            //    //u = u + 1;
        //            //}

        //        }
        //    }


        //    if (_dtResults.Rows.Count > 0)
        //    {
        //        foreach (DataRow _drresult in _dtResults.Rows)
        //        {
        //            s = s + 1;

        //            //if (s == 1)
        //            //{//Create Datatable
        //            //    if (_dtResults.Rows.Count > 0)
        //            //    {
        //            //        foreach (DataRow _drcol in _col.Rows)
        //            //        {
        //            //            foreach (DataRow drlochead in _repHead.Rows)
        //            //            {
        //            //                if (drlochead["bmr_col_nm"].ToString() == _drcol["bmr_col_nm"].ToString())
        //            //                {
        //            //                    if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
        //            //                    if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
        //            //                    if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
        //            //                    szColumns[t] = drlochead["bmr_col_desc"].ToString();
        //            //                    if (vCols != "") vCols = vCols + ",";
        //            //                    vCols = vCols + drlochead["bmr_col_desc"].ToString();
        //            //                    t = t + 1;
        //            //                }
        //            //            }
        //            //        }

        //            //        foreach (DataRow _drrow in _row.Rows)
        //            //        {
        //            //            foreach (DataRow drlochead in _repHead.Rows)
        //            //            {
        //            //                if (drlochead["bmr_col_nm"].ToString() == _drrow["bmr_col_nm"].ToString())
        //            //                {
        //            //                    if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
        //            //                    if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
        //            //                    if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
        //            //                    //szRows[u] = drlochead["bmr_col_desc"].ToString();
        //            //                    //u = u + 1;
        //            //                }
        //            //            }
        //            //        }                            

        //            //        foreach (DataRow _drval in _val.Rows)
        //            //        {
        //            //            foreach (DataRow drlochead in _repHead.Rows)
        //            //            {
        //            //                if (drlochead["bmr_col_nm"].ToString() == _drval["bmr_col_nm"].ToString())
        //            //                {
        //            //                    if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(string));
        //            //                    if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(int));
        //            //                    if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add(drlochead["bmr_col_desc"].ToString(), typeof(decimal));
        //            //                }
        //            //            }
        //            //        }
        //            //    }
        //            //}

        //            dr = BMSales.NewRow();
        //            //foreach (DataRow _drrow in _row.Rows)
        //            //{
        //            //    foreach (DataRow drlochead in _repHead.Rows)
        //            //    {
        //            //        if (drlochead["bmr_col_nm"].ToString() == _drrow["bmr_col_nm"].ToString())
        //            //        {
        //            //            if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
        //            //            if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = (_drresult[drlochead["bmr_col_nm"].ToString()] != DBNull.Value) ? Convert.ToInt32(_drresult[drlochead["bmr_col_nm"].ToString()].ToString()) : 00;
        //            //            if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = (_drresult[drlochead["bmr_col_nm"].ToString()] != DBNull.Value) ? Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString()):00;
        //            //        }
        //            //    }

        //            foreach (DataRow _drcol in _col.Rows)
        //            {
        //                foreach (DataRow drlochead in _repHead.Rows)
        //                {
        //                    if (drlochead["bmr_col_nm"].ToString() == _drcol["bmr_col_nm"].ToString())
        //                    {
        //                        if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
        //                        if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = (_drresult[drlochead["bmr_col_nm"].ToString()] != DBNull.Value) ? Convert.ToInt32(_drresult[drlochead["bmr_col_nm"].ToString()].ToString()) : 00;
        //                        if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = (_drresult[drlochead["bmr_col_nm"].ToString()] != DBNull.Value) ? Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString()) : 00;
        //                    }
        //                }
        //            }

        //            //foreach (DataRow _drrow in _row.Rows)
        //            //{
        //                string _heading = "";
        //                foreach (DataRow _drrow1 in _dtResultsSum.Rows)
        //                {
        //                    _heading = "";
        //                    for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
        //                    {
        //                        if (_heading != "")
        //                        { _heading = _heading + " "; }

        //                        if (_drrow1.Table.Columns[index].ColumnName == "BMS_DO_MONTH")
        //                        {
        //                            _heading = _heading + _getMonthName(Convert.ToInt16(_drrow1[index])).ToUpper();
        //                        }
        //                        else if (_drrow1.Table.Columns[index].ColumnName == "BMS_DO_YEAR")
        //                        {
        //                            _heading = _heading + Convert.ToInt16(_drrow1[index]);
        //                        }
        //                        else
        //                        {
        //                            _heading = _heading + _drrow1[index].ToString().ToUpper();
        //                        }
        //                    }

        //                    for (int index1 = 0; index1 < BMSales.Columns.Count; index1++)
        //                    {
        //                        if (_heading == dr.Table.Columns[index1].ColumnName)
        //                        {                                    
        //                            foreach (DataRow _drval in _val.Rows)
        //                            {
        //                                foreach (DataRow drlochead in _repHead.Rows)
        //                                {
        //                                    if (drlochead["bmr_col_nm"].ToString() == _drval["bmr_col_nm"].ToString())
        //                                    {
        //                                        dr[_heading] = (_drresult[drlochead["bmr_col_nm"].ToString()] != DBNull.Value) ? Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString()) : 00;

        //                                        //if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
        //                                        //if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = (_drresult[drlochead["bmr_col_nm"].ToString()] != DBNull.Value) ? Convert.ToInt32(_drresult[drlochead["bmr_col_nm"].ToString()].ToString()) : 00;
        //                                        //if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = (_drresult[drlochead["bmr_col_nm"].ToString()] != DBNull.Value) ? Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString()) : 00;
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                //}

        //                        //BMSales.Columns.Add(_heading, typeof(decimal));


        //                    //foreach (DataRow drlochead in _repHead.Rows)
        //                    //{
        //                    //    if (drlochead["bmr_col_nm"].ToString() == _drcol["bmr_col_nm"].ToString())
        //                    //    {
        //                    //        if (drlochead["bmr_data_tp"].ToString() == "string") dr[drlochead["bmr_col_desc"].ToString()] = _drresult[drlochead["bmr_col_nm"].ToString()].ToString();
        //                    //        if (drlochead["bmr_data_tp"].ToString() == "int") dr[drlochead["bmr_col_desc"].ToString()] = (_drresult[drlochead["bmr_col_nm"].ToString()] != DBNull.Value) ? Convert.ToInt32(_drresult[drlochead["bmr_col_nm"].ToString()].ToString()) : 00;
        //                    //        if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[drlochead["bmr_col_desc"].ToString()] = (_drresult[drlochead["bmr_col_nm"].ToString()] != DBNull.Value) ? Convert.ToDecimal(_drresult[drlochead["bmr_col_nm"].ToString()].ToString()) : 00;
        //                    //    }
        //                    //}
        //                }


        //                //}                        

        //            //}

        //            BMSales.Rows.Add(dr);

        //        }
        //    }

        //    BMSales1 = BMSales.Clone();

        //    DataTable _BMSalesSum = BMSales.DefaultView.ToTable(true, szColumns);

        //     if (_BMSalesSum.Rows.Count > 0)
        //    {
        //        foreach (DataRow _drresult in _BMSalesSum.Rows)
        //        {
        //            string _filter = "";

        //            for (int index = 0; index < _BMSalesSum.Columns.Count; index++)
        //            { 
        //                if (_filter != "")
        //                { _filter = _filter + " and "; }
        //                _filter = _filter + "[" + _BMSalesSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";
        //            }
        //            if (_filter != "")
        //            {
        //                DataTable dt1 = BMSales.Select(_filter).CopyToDataTable();

        //                string _group = "";

        //                for (int index = 0; index < _BMSalesSum.Columns.Count; index++)
        //                {
        //                    if (_group != "")
        //                    { _group = _group + " ,"; }
        //                    _group = _group + "[" + dt1.Columns[index].ColumnName + "] = row.Field<string>([" + dt1.Columns[index].ColumnName + "])";
        //                }

        //                var ownerGroups = dt1.AsEnumerable()
        //                    .GroupBy(row => new { _group });
        //                var dt2 = dt1.Clone();
        //                var intColumns = dt2.Columns.Cast<DataColumn>()
        //                    .Where(c => c.DataType == typeof(decimal)).ToArray();
        //                foreach (var grp in ownerGroups)
        //                {
        //                    var row = dt2.Rows.Add();

        //                    t = 0;
        //                    foreach (DataRow _drcol in _col.Rows)
        //                    {
        //                        row.SetField(dt1.Columns[t].ColumnName, grp.ElementAt(0).ItemArray.GetValue(t));
        //                        t = t + 1;                                
        //                    }

        //                    foreach (DataColumn col in intColumns)
        //                    {
        //                        string _insertsum="Y";
        //                        foreach (DataRow _drcol in _col.Rows)
        //                        {
        //                            if (_drcol["bmr_col_desc"].ToString() == col.ColumnName)
        //                            {
        //                                _insertsum = "N";
        //                            }
        //                        }
        //                        foreach (DataRow _drrow in _row.Rows)
        //                        {
        //                            if (_drrow["bmr_col_desc"].ToString() == col.ColumnName)
        //                            {
        //                                _insertsum = "N";
        //                            }
        //                        }
        //                        if (_insertsum == "Y")
        //                        {
        //                            bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
        //                            decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
        //                            row.SetField(col, sum);
        //                        }

        //                    }
        //                }

        //                DataTable GP1 = dt2;
        //                BMSales1.Merge(GP1);
        //            }
        //        }
        //    }

        //     DataView viewFI2 = new DataView(BMSales1);
        //     viewFI2.Sort = vCols;
        //     BMSales1 = viewFI2.ToTable();

        //    _err = "";
        //    _filePath = "";
        //    _filePath = ExportExcel2007(_com, _user, BMSales1, out _err);
        //    if (BMSales.Rows.Count == 0)
        //    {
        //        _err = "No Records Found.";
        //        return null;
        //        _header = null;
        //    }
        //A:
        //    //return _filePath;

        //    return BMSales1;

        //}

        public DataTable getCreatedSalesDetails(DateTime _FromDate, DateTime _ToDate, string _invdate, string _com, string _user, Dictionary<string, string[]> dataValues)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

            string _filePath = string.Empty;

            DataTable _dtResults;
            DataTable _dtResults1;
            String[] szColumns = new String[2];
            szColumns[0] = "bms_do_year";
            szColumns[1] = "bms_do_month";

            _dtResults1 = _financialDAL.getBMSalesDetails(_FromDate, _ToDate, _invdate, _com, "", _user, "", 0, 0, "", 0, 0, 0);

            if (_dtResults1.Rows.Count > 0)
            {
                _dtResults = _filterBMSales(_dtResults1, dataValues);

                DataTable OFI = _dtResults.DefaultView.ToTable(true, szColumns);

                DataView viewFI = new DataView(OFI);
                viewFI.Sort = "bms_do_year, bms_do_month";
                DataTable _dtResultsSum = viewFI.ToTable();

                DataTable BMSales = new DataTable();
                DataTable BMSales1 = new DataTable();
                BMSales.TableName = "BMTable";
                DataRow dr;

                BMSales.Columns.Add("Channel", typeof(string));
                BMSales.Columns.Add("PC Code", typeof(string));
                BMSales.Columns.Add("PC Description", typeof(string));
                if (_dtResultsSum.Rows.Count > 0)
                {
                    foreach (DataRow _drresultsum in _dtResultsSum.Rows)
                    {
                        BMSales.Columns.Add(Convert.ToInt16(_drresultsum[0]) + " " + _getMonthName(Convert.ToInt16(_drresultsum[1])) + " Inv Count", typeof(decimal));
                        BMSales.Columns.Add(Convert.ToInt16(_drresultsum[0]) + " " + _getMonthName(Convert.ToInt16(_drresultsum[1])) + " Net Value", typeof(decimal));
                    }
                }

                if (_dtResults.Rows.Count > 0)
                {
                    foreach (DataRow _drresult in _dtResults.Rows)
                    {
                        dr = BMSales.NewRow();
                        dr["Channel"] = _drresult["bms_pc_chnl_desc"].ToString();
                        dr["PC Code"] = _drresult["bms_pc_cd"].ToString();
                        dr["PC Description"] = _drresult["bms_pc_desc"].ToString();

                        if (_dtResultsSum.Rows.Count > 0)
                        {
                            foreach (DataRow _drresultsum in _dtResultsSum.Rows)
                            {
                                if (Convert.ToInt16(_drresultsum[0]) == Convert.ToInt16(_drresult["bms_do_year"]) & Convert.ToInt16(_drresultsum[1]) == Convert.ToInt16(_drresult["bms_do_month"]))
                                {
                                    dr[Convert.ToInt16(_drresultsum[0].ToString()) + " " + _getMonthName(Convert.ToInt16(_drresultsum[1])) + " Inv Count"] = Convert.ToDecimal(_drresult["bms_d_qty"]);
                                    dr[Convert.ToInt16(_drresultsum[0].ToString()) + " " + _getMonthName(Convert.ToInt16(_drresultsum[1])) + " Net Value"] = Convert.ToDecimal(_drresult["bms_d_net_amt"]);
                                }
                                else
                                {
                                    dr[Convert.ToInt16(_drresultsum[0].ToString()) + " " + _getMonthName(Convert.ToInt16(_drresultsum[1])) + " Inv Count"] = 0;
                                    dr[Convert.ToInt16(_drresultsum[0].ToString()) + " " + _getMonthName(Convert.ToInt16(_drresultsum[1])) + " Net Value"] = 0;
                                }
                            }
                        }

                        BMSales.Rows.Add(dr);
                    }

                    DataView viewFI1 = new DataView(BMSales);
                    viewFI1.Sort = "Channel, [PC Code]";
                    BMSales = viewFI1.ToTable();

                    BMSales1 = BMSales.Clone();

                    szColumns = new String[3];
                    szColumns[0] = "Channel";
                    szColumns[1] = "PC Code";
                    szColumns[2] = "PC Description";

                    DataTable _BMSalesSum = BMSales.DefaultView.ToTable(true, szColumns);

                    if (_BMSalesSum.Rows.Count > 0)
                    {
                        foreach (DataRow _drresult in _BMSalesSum.Rows)
                        {
                            string _filter = "";

                            for (int index = 0; index < _BMSalesSum.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _BMSalesSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";
                            }
                            if (_filter != "")
                            {
                                DataTable dt1 = BMSales.Select(_filter).CopyToDataTable();

                                string _group = "";

                                for (int index = 0; index < _BMSalesSum.Columns.Count; index++)
                                {
                                    if (_group != "")
                                    { _group = _group + " ,"; }
                                    _group = _group + "[" + dt1.Columns[index].ColumnName + "] = row.Field<string>([" + dt1.Columns[index].ColumnName + "])";
                                }

                                var ownerGroups = dt1.AsEnumerable()
                                    .GroupBy(row => new { _group });
                                var dt2 = dt1.Clone();
                                var intColumns = dt2.Columns.Cast<DataColumn>()
                                    .Where(c => c.DataType == typeof(decimal)).ToArray();
                                foreach (var grp in ownerGroups)
                                {
                                    var row = dt2.Rows.Add();

                                    row.SetField("Channel", grp.ElementAt(0).ItemArray.GetValue(0));
                                    row.SetField("PC Code", grp.ElementAt(0).ItemArray.GetValue(1));
                                    row.SetField("PC Description", grp.ElementAt(0).ItemArray.GetValue(2));

                                    foreach (DataColumn col in intColumns)
                                    {
                                        bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                                        decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                                        row.SetField(col, sum);
                                    }
                                }

                                DataTable GP1 = dt2;
                                BMSales1.Merge(GP1);
                            }
                        }
                    }

                }

                DataView viewFI2 = new DataView(BMSales1);
                viewFI2.Sort = "Channel, [PC Code]";
                BMSales1 = viewFI2.ToTable();

                return BMSales1;
            }
            else
            {
                return null;
            }

        }

        public DataTable getActiveAccountDetails(DateTime _FromDate, DateTime _ToDate, string _invdate, string _com, string _user, Dictionary<string, string[]> dataValues)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

            string _filePath = string.Empty;

            DataTable _dtResults;
            DataTable _dtResults1;

            _dtResults = new DataTable();
            _dtResults1 = new DataTable();
            _dtResults1 = _financialDAL.GetNoOfActAccountDetails(_FromDate, _ToDate, _user, "ABL", "");
            _dtResults.Merge(_dtResults1);
            _dtResults1 = _financialDAL.GetNoOfActAccountDetails(_FromDate, _ToDate, _user, "LRP", "");
            _dtResults.Merge(_dtResults1);

            return _dtResults;

        }

        private string _getMonthName(int _Month)
        {
            return CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(_Month);
        }

        public DataTable LINQResultToDataTable<T>(IEnumerable<T> Linqlist)
        {
            DataTable dt = new DataTable();

            PropertyInfo[] columns = null;

            if (Linqlist == null) return dt;

            foreach (T Record in Linqlist)
            {

                if (columns == null)
                {
                    columns = ((Type)Record.GetType()).GetProperties();
                    foreach (PropertyInfo GetProperty in columns)
                    {
                        Type colType = GetProperty.PropertyType;

                        if ((colType.IsGenericType) && (colType.GetGenericTypeDefinition()
                        == typeof(Nullable<>)))
                        {
                            colType = colType.GetGenericArguments()[0];
                        }

                        dt.Columns.Add(new DataColumn(GetProperty.Name, colType));
                    }
                }

                DataRow dr = dt.NewRow();

                foreach (PropertyInfo pinfo in columns)
                {
                    dr[pinfo.Name] = pinfo.GetValue(Record, null) == null ? DBNull.Value : pinfo.GetValue
                    (Record, null);
                }

                dt.Rows.Add(dr);
            }
            return dt;
        }

        public string ExportExcel2007(string _com, string _user, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }

        public string ExportExcel2007(string _com, string _user, DataTable TitleData, DataTable _dt1, out string _err)
        {
            try
            {
                DataTable _dt = _dt1;

                string _targetFilename = CreateExcelFile.ExportToExcelxlsx(_user, _com, TitleData, _dt, 60000, out _err);

                _dt.Dispose();
                GC.Collect();

                if (string.IsNullOrEmpty(_err))
                { return _targetFilename; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _err = err.ToString();
                return "Err";
            }
        }

        public List<SARFORPD_SEARCH_HEAD> getTargetDates(string pgeNum, string pgeSize, string searchFld, string searchVal, string defby, string catdefon)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getTargetDates(pgeNum, pgeSize, searchFld, searchVal, defby, catdefon);
        }
        public SAR_FOR_PD getTargetDateValues(string code, string defby, string catdefon, string calendcode)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getTargetDateValues(code, defby, catdefon, calendcode);
        }

        //Randima 2016-08-01
        public List<LOC_HIRCH_SEARCH_HEAD> getLocHierarchy(string pgeNum, string pgeSize, string searchFld, string searchVal, string zone, string region, string area, string subChannel, string channel, string company, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getLocHierarchy(pgeNum, pgeSize, searchFld, searchVal, zone, region, area, subChannel, channel, company, type);
        }
        //Dilshan 2017-12-04
        public List<LOC_HIRCH_SEARCH_HEAD> getLocHierarchy_new1(string pgeNum, string pgeSize, string searchFld, string searchVal, string zone, string region, string area, string subChannel, string channel, string company, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getLocHierarchy_new1(pgeNum, pgeSize, searchFld, searchVal, zone, region, area, subChannel, channel, company, type);
        }
        //Dilshan 2017-11-29
        public List<LOC_HIRCH_SEARCH_HEAD> getLocHierarchy_new(string pgeNum, string pgeSize, string searchFld, string searchVal, string zone, string region, string area, string subChannel, string channel, string company, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getLocHierarchy_new(pgeNum, pgeSize, searchFld, searchVal, zone, region, area, subChannel, channel, company, type);
        }

        public List<LOC_HIRCH_SEARCH_HEAD> getLocHierarchyAll(string pgeNum, string pgeSize, string searchFld, string searchVal, string zone, string region, string area, string subChannel, string channel, string company, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getLocHierarchyAll(pgeNum, pgeSize, searchFld, searchVal, zone, region, area, subChannel, channel, company, type);
        }

        //Randima 2016-08-02
        public List<MAIN_CAT_SEARCH> getMainCategory(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getMainCategory(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Randima 2016-08-02
        public List<ITM_STUS_SEARCH_HEAD> getItmOthStatus(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getItmOthStatus(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Randima 2016-08-03
        public DataTable getAgeSlotForCom(string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getAgeSlotForCom(company);
        }

        //Randima 2016-08-03 EDITED BY NUWAN
        public List<ITM_CUR_AGE_DET> getAsAtAgeItmDetails(string _locHircCd, string _locHircDesc, string _cat1, string _brnd, DateTime _frmDt, DateTime _toDt, string _com, string type, string model, string itemCd, List<BRND_NEW_STUS> statusLst, string itmStustyp, string brandMngr, string userid, out string error)
        {
            error = "";
            List<ITM_CUR_AGE_DET> stockAgeDetails = new List<ITM_CUR_AGE_DET>();
            List<ITM_CUR_AGE_DET> stockDet = new List<ITM_CUR_AGE_DET>();
            try
            {
                DashboardDal = new DashboardDLL();


                _securityDAL = new SecurityDAL();
                _securityDAL.ConnectionOpen();
                DashboardDal.ConnectionOpen();
                //string statusLst1 = string.Empty;
                //foreach (BRND_NEW_STUS stus in statusLst)
                //{
                //    statusLst1 = statusLst1 + (stus.itm_stus_cd + ",");
                //}
                // statusLst1 = statusLst1.Remove(statusLst1.Length - 1);
                if (_securityDAL.Is_Report_DR("BI_INVENTORYAGE_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                Int32 rem = DashboardDal.rempveTemporyParameters(userid, "ASATRPT");
                foreach (BRND_NEW_STUS stus in statusLst)
                {
                    Int32 addStatus = DashboardDal.addTemporyParameters(userid, "STUS", "ASATRPT", stus.itm_stus_cd);
                }
                List<string> selcom = _com.Split(',').ToList();

                foreach (string c in selcom)
                {
                    Int32 addCom = DashboardDal.addTemporyParameters(userid, "COM", "ASATRPT", c);
                }
                if (brandMngr != "")
                {
                    DataTable brnddet = DashboardDal.getBrandMgrAlloc(_com, brandMngr, _cat1, _brnd);
                    if (brnddet.Rows.Count > 0)
                    {
                        string managername = brnddet.Rows[0]["ESEP_NAME_INITIALS"].ToString();
                        foreach (DataRow fil in brnddet.Rows)
                        {
                            string brand = fil["MBA_BRND"].ToString();
                            string cat1 = fil["MBA_CA1"].ToString();
                            string cat2 = fil["MBA_CA2"].ToString();
                            string cat3 = fil["MBA_CA3"].ToString();
                            if (_locHircCd == "COM")
                            {
                                if (_frmDt.Month == DateTime.Now.Month && _frmDt.Year == DateTime.Now.Year)
                                {

                                    List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetailsCurrent(cat1, brand, _frmDt, _toDt, _com, null, type, model, itemCd, statusLst, "", cat2, cat3, userid, "ASATRPT");
                                    stockAgeDetails.AddRange(list);
                                }
                                else
                                {
                                    List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetails(cat1, brand, _frmDt, _toDt, _com, null, type, model, itemCd, "", cat2, cat3, userid, "ASATRPT");
                                    stockAgeDetails.AddRange(list);

                                }
                            }
                            else
                            {
                                DataTable locDet = DashboardDal.getlocByHirarchy(_locHircCd, _locHircDesc, _com);
                                if (_frmDt.Month == DateTime.Now.Month && _frmDt.Year == DateTime.Now.Year)
                                {
                                    //Int32 i = 0;
                                    //Int32 rowcount = locDet.Rows.Count;
                                    //foreach (DataRow row in locDet.Rows)
                                    //{
                                    //    string loc = row["mli_loc_cd"].ToString();
                                    //    List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetailsCurrent(_cat1, _brnd, _frmDt, _toDt, _com, loc, type, model, itemCd);
                                    //    stockAgeDetails.AddRange(list);
                                    //    i++;
                                    //}
                                    //List<List<DataRow>> table = SplitDataTable(locDet, 200);

                                    //foreach (List<DataRow> lstrow in table)
                                    //{
                                    //    Int32 cnt = 1;
                                    //    string loc = "";
                                    //    foreach (DataRow row in lstrow)
                                    //    {
                                    //        loc = loc + ((cnt != locDet.Rows.Count) ? row["mli_loc_cd"].ToString() + "," : row["mli_loc_cd"].ToString());
                                    //        cnt++;
                                    //    }
                                    //    loc = loc.Remove(loc.Length - 1);

                                    //}
                                    foreach (DataRow l in locDet.Rows)
                                    {
                                        Int32 addCom = DashboardDal.addTemporyParameters(userid, "LOC", "ASATRPT", l["ml_loc_cd"].ToString());
                                    }
                                    List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetailsCurrent(cat1, brand, _frmDt, _toDt, _com, "LOC", type, model, itemCd, statusLst, "", cat2, cat3, userid, "ASATRPT");
                                    stockAgeDetails.AddRange(list);
                                }
                                else
                                {
                                    //string loc = string.Empty;
                                    if (locDet.Rows.Count > 300)
                                    {
                                        //List<List<DataRow>> table = SplitDataTable(locDet, 200);

                                        //foreach (List<DataRow> lstrow in table)
                                        //{
                                        //    Int32 cnt = 1;
                                        //    loc = "";
                                        //    foreach (DataRow row in lstrow)
                                        //    {
                                        //        loc = loc + ((cnt != locDet.Rows.Count) ? row["mli_loc_cd"].ToString() + "," : row["mli_loc_cd"].ToString());
                                        //        cnt++;
                                        //    }
                                        //    loc = loc.Remove(loc.Length - 1);
                                        //    List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetails(cat1, brand, _frmDt, _toDt, _com, loc, type, model, itemCd, "", cat2, cat3, userid, "ASATRPT");
                                        //    stockAgeDetails.AddRange(list);
                                        //}
                                        foreach (DataRow l in locDet.Rows)
                                        {
                                            Int32 addCom = DashboardDal.addTemporyParameters(userid, "LOC", "ASATRPT", l["ml_loc_cd"].ToString());
                                        }
                                        List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetails(cat1, brand, _frmDt, _toDt, _com, "LOC", type, model, itemCd, "", cat2, cat3, userid, "ASATRPT");
                                        stockAgeDetails.AddRange(list);
                                    }
                                    else
                                    {
                                        //Int32 cnt = 1;
                                        //foreach (DataRow locs in locDet.Rows)
                                        //{
                                        //    loc = loc + ((cnt != locDet.Rows.Count) ? locs["mli_loc_cd"].ToString() + "," : locs["mli_loc_cd"].ToString());
                                        //    cnt++;
                                        //}
                                        foreach (DataRow l in locDet.Rows)
                                        {
                                            Int32 addCom = DashboardDal.addTemporyParameters(userid, "LOC", "ASATRPT", l["ml_loc_cd"].ToString());
                                        }
                                        List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetails(cat1, brand, _frmDt, _toDt, _com, "LOC", type, model, itemCd, "", cat2, cat3, userid, "ASATRPT");
                                        stockAgeDetails.AddRange(list);
                                    }
                                }
                            }
                        }
                        if (stockAgeDetails.Count > 0)
                        {
                            stockAgeDetails.ForEach(a => a.brand_mngr = managername);
                        }
                    }
                    else
                    {
                        error = "No brands or categories assign for this user or selected criteria.";
                    }
                }
                else
                {
                    if (_locHircCd == "COM")
                    {
                        List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetailsCurrent(_cat1, _brnd, _frmDt, _toDt, _com, null, type, model, itemCd, statusLst, "", "", "", userid, "ASATRPT");
                        stockAgeDetails.AddRange(list);
                    }
                    else
                    {
                        DataTable locDet = DashboardDal.getlocByHirarchy(_locHircCd, _locHircDesc, _com);
                        if (_frmDt.Month == DateTime.Now.Month && _frmDt.Year == DateTime.Now.Year)
                        {
                            //Int32 i = 0;
                            //Int32 rowcount = locDet.Rows.Count;
                            //foreach (DataRow row in locDet.Rows)
                            //{
                            //    string loc = row["mli_loc_cd"].ToString();
                            //    List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetailsCurrent(_cat1, _brnd, _frmDt, _toDt, _com, loc, type, model, itemCd);
                            //    stockAgeDetails.AddRange(list);
                            //    i++;
                            //}
                            //List<List<DataRow>> table = SplitDataTable(locDet, 200);

                            //foreach (List<DataRow> lstrow in table)
                            //{
                            //    Int32 cnt = 1;
                            //    string loc = "";
                            //    foreach (DataRow row in lstrow)
                            //    {
                            //        loc = loc + ((cnt != locDet.Rows.Count) ? row["mli_loc_cd"].ToString() + "," : row["mli_loc_cd"].ToString());
                            //        cnt++;
                            //    }
                            //    loc = loc.Remove(loc.Length - 1);

                            //}
                            foreach (DataRow l in locDet.Rows)
                            {
                                Int32 addCom = DashboardDal.addTemporyParameters(userid, "LOC", "ASATRPT", l["ml_loc_cd"].ToString());
                            }
                            List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetailsCurrent(_cat1, _brnd, _frmDt, _toDt, _com, "", type, model, itemCd, statusLst, "", "", "", userid, "ASATRPT");
                            stockAgeDetails.AddRange(list);
                        }
                        else
                        {
                            //string loc = string.Empty;
                            //if (locDet.Rows.Count > 300)
                            //{
                            //List<List<DataRow>> table = SplitDataTable(locDet, 200);

                            //foreach (List<DataRow> lstrow in table)
                            //{
                            //    Int32 cnt = 1;
                            //    loc = "";
                            //    foreach (DataRow row in lstrow)
                            //    {
                            //        loc = loc + ((cnt != locDet.Rows.Count) ? row["mli_loc_cd"].ToString() + "," : row["mli_loc_cd"].ToString());
                            //        cnt++;
                            //    }
                            //    loc = loc.Remove(loc.Length - 1);

                            //}
                            foreach (DataRow l in locDet.Rows)
                            {
                                Int32 addCom = DashboardDal.addTemporyParameters(userid, "LOC", "ASATRPT", l["ml_loc_cd"].ToString());
                            }
                            List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetails(_cat1, _brnd, _frmDt, _toDt, _com, "", type, model, itemCd, "", "", "", userid, "ASATRPT");
                            stockAgeDetails.AddRange(list);
                            //}
                            //else
                            //{
                            //    Int32 cnt = 1;
                            //    foreach (DataRow locs in locDet.Rows)
                            //    {
                            //        loc = loc + ((cnt != locDet.Rows.Count) ? locs["mli_loc_cd"].ToString() + "," : locs["mli_loc_cd"].ToString());
                            //        cnt++;
                            //    }
                            //    List<ITM_CUR_AGE_DET> list = DashboardDal.getAsAtAgeItmDetails(_cat1, _brnd, _frmDt, _toDt, _com, loc, type, model, itemCd, "","","", userid, "ASATRPT");
                            //    stockAgeDetails.AddRange(list);
                            //}
                        }
                    }

                }


                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
                return stockAgeDetails;
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                return stockAgeDetails;
            }
        }
        private List<List<DataRow>> SplitDataTable(DataTable table, int pageSize)
        {
            return
            table.AsEnumerable()
                  .Select((row, index) => new { Row = row, Index = index, })
                  .GroupBy(x => x.Index / pageSize)
                  .Select(x => x.Select(v => v.Row).ToList())
                  .ToList();
        }
        //Randima 2016-08-03 
        public List<BRND_NEW_STUS> getStatusForTyp(string _stus_typ)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getStatusForTyp(_stus_typ);
        }

        //Randima 2016-08-05 EDITED BY NUWAN
        public List<ITM_CUR_AGE_DET> getCurAgeItmDetails(string _locHircCd, string _locHircDesc, string _cat1, string _brnd, string _com, string type, string model, string itemCd, List<BRND_NEW_STUS> stusForTyp, string brandMngr, string userid, bool cate1, bool cate2, bool cate3, bool status, out string error)
        {
            error = "";

            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();
            DashboardDal.ConnectionOpen();
            _securityDAL.ConnectionOpen();
            if (_securityDAL.Is_Report_DR("BI_INVENTORYAGE_DTL") == true)
            {
                DashboardDal.ConnectionOpen_DR();
            }

            List<ITM_CUR_AGE_DET> stockAgeDetails = new List<ITM_CUR_AGE_DET>();
            List<ITM_CUR_AGE_DET> stockDet = new List<ITM_CUR_AGE_DET>();
            try
            {
                Int32 rem = DashboardDal.rempveTemporyParameters(userid, "NUWANCURAGE");
                List<string> selcom = _com.Split(',').ToList();
                foreach (string c in selcom)
                {
                    Int32 addCom = DashboardDal.addTemporyParameters(userid, "COM", "NUWANCURAGE", c);
                }
                if (brandMngr != "")
                {
                    DataTable brnddet = DashboardDal.getBrandMgrAlloc(_com, brandMngr, _cat1, _brnd);
                    if (brnddet.Rows.Count > 0)
                    {
                        string managername = brnddet.Rows[0]["ESEP_NAME_INITIALS"].ToString();
                        foreach (DataRow fil in brnddet.Rows)
                        {
                            string brand = fil["MBA_BRND"].ToString();
                            string cat1 = fil["MBA_CA1"].ToString();
                            string cat2 = fil["MBA_CA2"].ToString();
                            string cat3 = fil["MBA_CA3"].ToString();
                            if (_locHircCd == "COM")
                            {
                                //string statusLst = string.Empty;
                                //foreach (BRND_NEW_STUS stus in stusForTyp)
                                //{
                                //    statusLst = statusLst + (stus.itm_stus_cd + ",");
                                //}

                                foreach (BRND_NEW_STUS stus in stusForTyp)
                                {
                                    Int32 addStatus = DashboardDal.addTemporyParameters(userid, "STUS", "NUWANCURAGE", stus.itm_stus_cd);
                                }
                                List<ITM_CUR_AGE_DET> list = DashboardDal.getCurAgeItmDetailsmullocs(cat1, brand, _com, null, type, model, itemCd, "", cat2, cat3, userid, "NUWANCURAGE");
                                stockAgeDetails.AddRange(list);
                            }
                            else
                            {
                                DataTable locDet = DashboardDal.getlocByHirarchy(_locHircCd, _locHircDesc, _com);

                                //List<List<DataRow>> table = SplitDataTable(locDet, 200);
                                //string statusLst = string.Empty;
                                //foreach (BRND_NEW_STUS stus in stusForTyp)
                                //{
                                //    statusLst = statusLst + (stus.itm_stus_cd + ",");
                                //}
                                //statusLst = statusLst.Remove(statusLst.Length - 1);
                                foreach (BRND_NEW_STUS stus in stusForTyp)
                                {
                                    Int32 addStatus = DashboardDal.addTemporyParameters(userid, "STUS", "NUWANCURAGE", stus.itm_stus_cd);
                                }
                                //foreach (List<DataRow> lstrow in table)
                                //{
                                //    Int32 cnt = 1;
                                //    string loc = "";
                                //    foreach (DataRow row in lstrow)
                                //    {
                                //        loc = loc + ((cnt != locDet.Rows.Count) ? row["mli_loc_cd"].ToString() + "," : row["mli_loc_cd"].ToString());
                                //        cnt++;
                                //    }
                                //    loc = loc.Remove(loc.Length - 1);

                                //}
                                foreach (DataRow l in locDet.Rows)
                                {
                                    Int32 addLocs = DashboardDal.addTemporyParameters(userid, "LOC", "NUWANCURAGE", l["mli_loc_cd"].ToString());

                                }

                                List<ITM_CUR_AGE_DET> list = DashboardDal.getCurAgeItmDetailsmullocs(cat1, brand, _com, "", type, model, itemCd, "", cat2, cat3, userid, "NUWANCURAGE");
                                stockAgeDetails.AddRange(list);
                            }


                        }
                        if (stockAgeDetails.Count > 0)
                        {
                            stockAgeDetails.ForEach(a => a.brand_mngr = managername);
                        }
                    }
                }
                else
                {
                    if (_locHircCd == "COM")
                    {
                        //string statusLst = string.Empty;
                        //foreach (BRND_NEW_STUS stus in stusForTyp)
                        //{
                        //    statusLst = statusLst + (stus.itm_stus_cd + ",");
                        //}
                        //statusLst = statusLst.Remove(statusLst.Length - 1);
                        foreach (BRND_NEW_STUS stus in stusForTyp)
                        {
                            Int32 addStatus = DashboardDal.addTemporyParameters(userid, "STUS", "NUWANCURAGE", stus.itm_stus_cd);
                        }
                        List<ITM_CUR_AGE_DET> list = DashboardDal.getCurAgeItmDetailsmullocs(_cat1, _brnd, _com, null, type, model, itemCd, "", "", "", userid, "NUWANCURAGE");
                        stockAgeDetails.AddRange(list);
                    }
                    else
                    {
                        DataTable locDet = DashboardDal.getlocByHirarchy(_locHircCd, _locHircDesc, _com);

                        //List<List<DataRow>> table = SplitDataTable(locDet, 200);
                        //string statusLst = string.Empty;
                        //foreach (BRND_NEW_STUS stus in stusForTyp)
                        //{
                        //    statusLst = statusLst + (stus.itm_stus_cd + ",");
                        //}
                        //statusLst = statusLst.Remove(statusLst.Length - 1);
                        foreach (BRND_NEW_STUS stus in stusForTyp)
                        {
                            Int32 addStatus = DashboardDal.addTemporyParameters(userid, "STUS", "NUWANCURAGE", stus.itm_stus_cd);
                        }
                        //foreach (List<DataRow> lstrow in table)
                        //{
                        //    Int32 cnt = 1;
                        //    string loc = "";
                        //    foreach (DataRow row in lstrow)
                        //    {
                        //        loc = loc + ((cnt != locDet.Rows.Count) ? row["mli_loc_cd"].ToString() + "," : row["mli_loc_cd"].ToString());
                        //        cnt++;
                        //    }
                        //    loc = loc.Remove(loc.Length - 1);

                        //}
                        foreach (DataRow l in locDet.Rows)
                        {
                            Int32 addLocs = DashboardDal.addTemporyParameters(userid, "LOC", "NUWANCURAGE", l["mli_loc_cd"].ToString());

                        }
                        List<ITM_CUR_AGE_DET> list = DashboardDal.getCurAgeItmDetailsmullocs(_cat1, _brnd, _com, "", type, model, itemCd, "", "", "", userid, "NUWANCURAGE");
                        stockAgeDetails.AddRange(list);
                        //foreach (DataRow row in locDet.Rows)
                        //{
                        //    string loc = row["mli_loc_cd"].ToString();
                        //    List<ITM_CUR_AGE_DET> list = DashboardDal.getCurAgeItmDetails(_cat1, _brnd, _com, loc, type,model,itemCd);
                        //    stockAgeDetails.AddRange(list);
                        //}
                    }
                }
                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();

                #region start group
                if (cate1 == true && cate2 == true && cate3 == true && status == true)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat1, c.item_cat2, c.item_brand, c.item_cat3, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat1 = cl.First().item_cat1,
                         item_cat2 = cl.First().item_cat2,
                         item_cat3 = cl.First().item_cat3,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == true && cate2 == false && cate3 == false && status == true)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat1, c.item_brand, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat1 = cl.First().item_cat1,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == true && cate2 == true && cate3 == false && status == true)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat1, c.item_cat2, c.item_brand, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat1 = cl.First().item_cat1,
                         item_cat2 = cl.First().item_cat2,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == true && cate2 == false && cate3 == true && status == true)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat1, c.item_brand, c.item_cat3, c.item_stus, c.brand_mngr, c.item_brand_desc })
                        .Select(cl => new ITM_CUR_AGE_DET
                        {
                            item_cat1 = cl.First().item_cat1,
                            item_cat3 = cl.First().item_cat3,
                            item_stus = cl.First().item_stus,
                            item_brand = cl.First().item_brand,
                            item_brand_desc = cl.First().item_brand_desc,
                            brand_mngr = cl.First().brand_mngr,
                            tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                            sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                        }).ToList();

                }
                else if (cate1 == false && cate2 == true && cate3 == true && status == true)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat2, c.item_brand, c.item_cat3, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat2 = cl.First().item_cat2,
                         item_cat3 = cl.First().item_cat3,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == false && cate2 == false && cate3 == true && status == true)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_brand, c.item_cat3, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat3 = cl.First().item_cat3,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == false && cate2 == true && cate3 == false && status == true)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat2, c.item_brand, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat2 = cl.First().item_cat2,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == false && cate2 == false && cate3 == false && status == true)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_brand, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == false && cate2 == false && cate3 == false && status == false)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_brand, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }

                else if (cate1 == true && cate2 == true && cate3 == true && status == false)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat1, c.item_cat2, c.item_brand, c.item_cat3, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat1 = cl.First().item_cat1,
                         item_cat2 = cl.First().item_cat2,
                         item_cat3 = cl.First().item_cat3,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == true && cate2 == false && cate3 == false && status == false)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat1, c.item_brand, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat1 = cl.First().item_cat1,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == true && cate2 == true && cate3 == false && status == false)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat1, c.item_cat2, c.item_brand, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat1 = cl.First().item_cat1,
                         item_cat2 = cl.First().item_cat2,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == true && cate2 == false && cate3 == true && status == false)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat1, c.item_brand, c.item_cat3, c.item_stus, c.brand_mngr, c.item_brand_desc })
                        .Select(cl => new ITM_CUR_AGE_DET
                        {
                            item_cat1 = cl.First().item_cat1,
                            item_cat3 = cl.First().item_cat3,
                            item_stus = cl.First().item_stus,
                            item_brand = cl.First().item_brand,
                            item_brand_desc = cl.First().item_brand_desc,
                            brand_mngr = cl.First().brand_mngr,
                            tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                            sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                            sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                        }).ToList();

                }
                else if (cate1 == false && cate2 == true && cate3 == true && status == false)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat2, c.item_brand, c.item_cat3, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat2 = cl.First().item_cat2,
                         item_cat3 = cl.First().item_cat3,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == false && cate2 == false && cate3 == true && status == false)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_brand, c.item_cat3, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat3 = cl.First().item_cat3,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else if (cate1 == false && cate2 == true && cate3 == false && status == false)
                {
                    stockAgeDetails = stockAgeDetails.GroupBy(c => new { c.item_cat2, c.item_brand, c.item_stus, c.brand_mngr, c.item_brand_desc })
                     .Select(cl => new ITM_CUR_AGE_DET
                     {
                         item_cat2 = cl.First().item_cat2,
                         item_stus = cl.First().item_stus,
                         item_brand = cl.First().item_brand,
                         item_brand_desc = cl.First().item_brand_desc,
                         brand_mngr = cl.First().brand_mngr,
                         tot_qty = cl.Sum(c => decimal.Parse(c.tot_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         tot_val = cl.Sum(c => decimal.Parse(c.tot_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                         sec1_qty = cl.Sum(c => decimal.Parse(c.sec1_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec1_val = cl.Sum(c => decimal.Parse(c.sec1_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_qty = cl.Sum(c => decimal.Parse(c.sec2_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec2_val = cl.Sum(c => decimal.Parse(c.sec2_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_qty = cl.Sum(c => decimal.Parse(c.sec3_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec3_val = cl.Sum(c => decimal.Parse(c.sec3_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_qty = cl.Sum(c => decimal.Parse(c.sec4_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec4_val = cl.Sum(c => decimal.Parse(c.sec4_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_qty = cl.Sum(c => decimal.Parse(c.sec5_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec5_val = cl.Sum(c => decimal.Parse(c.sec5_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_qty = cl.Sum(c => decimal.Parse(c.sec6_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                         sec6_val = cl.Sum(c => decimal.Parse(c.sec6_val, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),


                     }).ToList();
                }
                else
                {
                    error = "Cannot serch using selected category details.";

                }
                #endregion
                if (stockAgeDetails.Count > 0)
                {
                    List<ITM_CUR_AGE_DETALL> all = new List<ITM_CUR_AGE_DETALL>();
                    foreach (ITM_CUR_AGE_DET s in stockAgeDetails)
                    {
                        ITM_CUR_AGE_DETALL d = new ITM_CUR_AGE_DETALL();
                        d.Category1 = s.item_cat1;
                        d.Category2 = s.item_cat2;
                        d.Category3 = s.item_cat3;
                        d.Status = s.item_stus;
                        d.Brand = s.item_brand;
                        d.Brand_DESC = s.item_brand_desc;
                        d.Manager = s.brand_mngr;
                        d.Quantity_360 = s.sec1_qty;
                        d.Value_360 = s.sec1_val;
                        d.Quantity_271_360 = s.sec2_qty;
                        d.Value_271_360 = s.sec2_val;
                        d.Quantity_181_270 = s.sec3_qty;
                        d.Value_181_270 = s.sec3_val;
                        d.Quantity_121_180 = s.sec4_qty;
                        d.Value_121_180 = s.sec4_val;
                        d.Quantity_90_121 = s.sec5_qty;
                        d.Value_90_121 = s.sec5_val;
                        d.Quantity_0_90 = s.sec6_qty;
                        d.Value_0_90 = s.sec6_val;

                        d.Quantity_360 = s.sec6_qty;
                        d.Value_360 = s.sec6_val;
                        d.Quantity_271_360 = s.sec5_qty;
                        d.Value_271_360 = s.sec5_val;
                        d.Quantity_181_270 = s.sec4_qty;
                        d.Value_181_270 = s.sec4_val;
                        d.Quantity_121_180 = s.sec3_qty;
                        d.Value_121_180 = s.sec3_val;
                        d.Quantity_90_121 = s.sec2_qty;
                        d.Value_90_121 = s.sec2_val;
                        d.Quantity_0_90 = s.sec1_qty;
                        d.Value_0_90 = s.sec1_val;



                        d.Total_Quantity = s.tot_qty;
                        d.Total_Value = s.tot_val;
                        all.Add(d);
                    }

                    DataTable table1 = new DataTable("tbl");
                    table1 = ListToDataTable(all);
                    string _err = "";
                    string _filePath = "";
                    _filePath = ExportExcel2007(_com, userid, table1, out _err);
                    if (table1.Rows.Count == 0)
                    {
                        error = "No Records Found.";
                    }
                }
                return stockAgeDetails;

            }
            catch (Exception ex)
            {
                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
                error = ex.Message.ToString();
                return stockAgeDetails;
            }
        }

        //Randima 2016-08-11
        public List<INVOICE_TYPE_SEARCH> getInvoiceTypes(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getInvoiceTypes(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        public List<InventoryHeader> test()
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.test();
        }

        //Randima 15-08-2016
        public List<DELI_SALE> getFastMoveItem_SalesDetails(DateTime _fdate, DateTime _tDate, DateTime _asatDt, string invType, string _brnd, string _cat1, string _com, string _freeIss, string qty, string _PCHircCd, string _PCHircDesc)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("BI_FSTMOVINGITEM_DTL") == true)
            {
                DashboardDal.ConnectionOpen_DR();
            }

            List<DELI_SALE> soldItemDetails = new List<DELI_SALE>();
            List<DELI_SALE> distinctSoldItemDetails = new List<DELI_SALE>();
            List<DELI_SALE> varinceItemDetails = new List<DELI_SALE>();

            DateTime prevDate = _fdate.AddYears(-1);

            DateTime m1Date = _tDate.AddMonths(1);
            DateTime m2Date = _tDate.AddMonths(2);
            DateTime m3Date = _tDate.AddMonths(3);

            //New Arrival 
            List<ITM_NEW_ARRIVAL> m1ArivList = DashboardDal.getNewArrivalsForMonth(m1Date.Year.ToString(), m1Date.Month.ToString());
            List<ITM_NEW_ARRIVAL> m2ArivList = DashboardDal.getNewArrivalsForMonth(m2Date.Year.ToString(), m2Date.Month.ToString());
            List<ITM_NEW_ARRIVAL> m3ArivList = DashboardDal.getNewArrivalsForMonth(m3Date.Year.ToString(), m3Date.Month.ToString());

            DataTable PCDet = DashboardDal.getPCByHirarchy(_PCHircCd, _PCHircDesc, _com);

            //foreach (DataRow row in PCDet.Rows)
            //{
            //    //Current sales detail
            //    string pc = row["mpi_pc_cd"].ToString();
            //    List<DELI_SALE> list1 = DashboardDal.getFastMoveItem_SalesDetails(_fdate, _tDate, invType, _brnd, _cat1, _com, pc, _freeIss, qty);
            //    soldItemDetails.AddRange(list1);

            //    //past year sales details
            //    List<DELI_SALE> list2 = DashboardDal.getFastMoveItem_SalesDetails(prevDate, _fdate, invType, _brnd, _cat1, _com, pc, _freeIss, qty);
            //    varinceItemDetails.AddRange(list2);
            //}

            List<List<DataRow>> table = SplitDataTable(PCDet, 300);
            foreach (List<DataRow> lstrow in table)
            {
                List<CUSTOMER_SALES> cusInvDet = new List<CUSTOMER_SALES>();
                Int32 cnt = 1;
                string pclst = "";
                foreach (DataRow row in lstrow)
                {
                    pclst = pclst + ((cnt != PCDet.Rows.Count) ? row["mpi_pc_cd"].ToString() + "," : row["mpi_pc_cd"].ToString());
                    cnt++;
                }
                pclst = pclst.Remove(pclst.Length - 1);
                //Current sales detail
                List<DELI_SALE> list1 = DashboardDal.getFastMoveItem_SalesDetails(_fdate, _tDate, invType, _brnd, _cat1, _com, pclst, _freeIss, qty);
                soldItemDetails.AddRange(list1);
                //past year sales details
                List<DELI_SALE> list2 = DashboardDal.getFastMoveItem_SalesDetails(prevDate, _tDate.AddYears(-1), invType, _brnd, _cat1, _com, pclst, _freeIss, qty);
                varinceItemDetails.AddRange(list2);
            }

            //Summing all slaes by item codes
            distinctSoldItemDetails = soldItemDetails.GroupBy(c => new { c.model, c.item_code, c.item_desc, c.brand, c.cat1 })
                    .Select(cl => new DELI_SALE
                    {
                        model = cl.First().model,
                        item_code = cl.First().item_code,
                        item_desc = cl.First().item_desc,
                        brand = cl.First().brand,
                        cat1 = cl.First().cat1,
                        qty = cl.Sum(c => decimal.Parse(c.qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                        net_amt = cl.Sum(c => decimal.Parse(c.net_amt, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                        icr_class = cl.First().icr_class,
                    }).ToList();


            DataTable locDet = DashboardDal.getlocByHirarchy(_PCHircCd, _PCHircDesc, _com);
            List<ITM_ASAT_BAL> stockBalance = new List<ITM_ASAT_BAL>();

            if (distinctSoldItemDetails.Count > 0)
            {
                foreach (DataRow row in locDet.Rows)
                {
                    //as at stock balance for locations
                    string loc = row["mli_loc_cd"].ToString();
                    List<ITM_ASAT_BAL> list = DashboardDal.getAsatBalance(_brnd, _cat1, _asatDt, _com, loc);
                    stockBalance.AddRange(list);
                }

                foreach (DELI_SALE sale in distinctSoldItemDetails)
                {
                    //get stock balance for items in sales list
                    List<ITM_ASAT_BAL> det = stockBalance.Where(stock => stock.item_code == sale.item_code)
                      .GroupBy(stock => new { stock.model, stock.item_code, stock.item_desc, stock.brand, stock.cat1 })
                      .Select(cl => new ITM_ASAT_BAL
                      {
                          item_code = cl.First().item_code,
                          qty = cl.Sum(c => decimal.Parse(c.qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString(),
                      }).ToList();

                    if (det.Count > 0)
                        sale.stock_qty = det[0].qty;
                    else
                        sale.stock_qty = "0";

                    //get last year sales details for the items in the sales list
                    List<DELI_SALE> yoy = varinceItemDetails.Where(c => c.item_code == sale.item_code)
                       .GroupBy(c => new { c.model, c.item_code, c.item_desc, c.brand, c.cat1 })
                       .Select(cl => new DELI_SALE
                       {
                           item_code = cl.First().item_code,
                           qty = cl.Sum(c => decimal.Parse(c.qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString()
                       }).ToList();
                    if (yoy.Count > 0)
                        sale.yoy_qty = (decimal.Parse(sale.qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint) - decimal.Parse(yoy[0].qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString();
                    else
                        sale.yoy_qty = "N/A";

                    //get m1 new arrivals
                    List<ITM_NEW_ARRIVAL> m1 = m1ArivList.Where(c => c.ioi_itm_cd == sale.item_code)
                       .GroupBy(c => new { c.ioi_itm_cd, c.ioi_model, c.ioi_brand, c.ioi_yy, c.ioi_mm, c.ioi_itm_stus })
                       .Select(cl => new ITM_NEW_ARRIVAL
                       {
                           ioi_itm_cd = cl.First().ioi_itm_cd,
                           ioi_qty = cl.Sum(c => decimal.Parse(c.ioi_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString()
                       }).ToList();
                    if (m1.Count > 0)
                        sale.m1_qty = (decimal.Parse(m1[0].ioi_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString();
                    else
                        sale.m1_qty = "0";

                    //get m2 new arrivals
                    List<ITM_NEW_ARRIVAL> m2 = m1ArivList.Where(c => c.ioi_itm_cd == sale.item_code)
                       .GroupBy(c => new { c.ioi_itm_cd, c.ioi_model, c.ioi_brand, c.ioi_yy, c.ioi_mm, c.ioi_itm_stus })
                       .Select(cl => new ITM_NEW_ARRIVAL
                       {
                           ioi_itm_cd = cl.First().ioi_itm_cd,
                           ioi_qty = cl.Sum(c => decimal.Parse(c.ioi_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString()
                       }).ToList();
                    if (m2.Count > 0)
                        sale.m2_qty = (decimal.Parse(m2[0].ioi_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString();
                    else
                        sale.m2_qty = "0";

                    //get m3 new arrivals
                    List<ITM_NEW_ARRIVAL> m3 = m1ArivList.Where(c => c.ioi_itm_cd == sale.item_code)
                       .GroupBy(c => new { c.ioi_itm_cd, c.ioi_model, c.ioi_brand, c.ioi_yy, c.ioi_mm, c.ioi_itm_stus })
                       .Select(cl => new ITM_NEW_ARRIVAL
                       {
                           ioi_itm_cd = cl.First().ioi_itm_cd,
                           ioi_qty = cl.Sum(c => decimal.Parse(c.ioi_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString()
                       }).ToList();
                    if (m3.Count > 0)
                        sale.m3_qty = (decimal.Parse(m3[0].ioi_qty, NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint)).ToString();
                    else
                        sale.m3_qty = "0";
                }
            }

            return distinctSoldItemDetails;
        }

        //Lakshika 2016-08-30
        public List<ITEM_SEARCH> getItems(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getItems(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        //Dilshan 2017-12-06
        public List<MST_PROMOTOR_SEARCH> getPromotor(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getPromotor(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        //Dilshan 2017-12-06
        public List<MST_ADMINT_SEARCH> getAdmint(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getAdmint(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        //Dilshan 2018/06/25
        public List<MST_TEAML_SEARCH> getTeaml(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getTeaml(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        public List<MST_MNGR_SEARCH> getMangr(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getMangr(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        public List<MST_ITMSTS_SEARCH> getItmsts(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getItmsts(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        public List<MST_LOYALTY_SEARCH> getLtltyp(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getLtltyp(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        public List<MST_LOYALTY_SEARCH> getLtlno(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getLtlno(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        //Dilshan 2017-12-06
        public List<MST_TOWN_SEARCH> getTown(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getTown(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        public List<MST_DIST_SEARCH> getDistrict(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getDistrict(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        public List<MST_DIST_SEARCH> getProvince(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getProvince(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        public List<BANK_SEARCH> getBank(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getBank(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Lakshika 2016-08-30
        public List<MAIN_CAT2_SEARCH> getCategory2(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getCategory2(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Lakshika 2016-08-30
        public List<MAIN_CAT3_SEARCH> getCategory3(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getCategory3(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Lakshika 2016-08-30
        public List<ITEM_BRAND_SEARCH> getItemBrands(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getItemBrands(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Lakshika 2016-08-30
        public List<ITEM_MODEL_SEARCH> getItemModel(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getItemModel(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Lakshika 2016-08-31
        public List<BM_SALE_DETAILS> getBMTSaleReportDetails(DateTime _frmDate, DateTime _toDate, string _saleType, string _itemCode,
                                                     string _cat1, string _cat2, string _cat3, string _brand, string _itemModel, string _groupBy, string _com)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            if (_securityDAL.Is_Report_DR("BI_SALE_DETRPT") == true)
            {
                DashboardDal.ConnectionOpen_DR();
            }
            DataTable PCDet = DashboardDal.getPCByHirarchy("COM", _com, _com);

            //foreach (DataRow row in PCDet.Rows)
            //{

            //}

            return DashboardDal.getBMTSaleReportDetails(_frmDate, _toDate, _saleType, _itemCode, _cat1, _cat2, _cat3, _brand, _itemModel, _groupBy, _com);
        }

        //Lakshika 2016-09-01
        public List<BM_SALE_DETAILS> getSaleReportActiveDetails(DateTime _frmDate, DateTime _toDate, string _saleType, string _itemCode,
                                                     string _cat1, string _cat2, string _cat3, string _brand, string _itemModel, string _groupBy, string _com)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSaleReportActiveDetails(_frmDate, _toDate, _saleType, _itemCode, _cat1, _cat2, _cat3, _brand, _itemModel, _groupBy, _com);
        }

        //Randima 2016-09-05
        public List<MAIN_CAT3_SEARCH> getCategory4(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getCategory4(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Randima 2016-09-05
        public List<MAIN_CAT3_SEARCH> getCategory5(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getCategory5(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Randima 2016-09-05
        public List<LOC_HIRCH_SEARCH_HEAD> getAllCompanies(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getAllCompanies(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Randima 2016-09-06
        public List<CIRCULAR_NO_SEARCH> getCircualrNo(string pgeNum, string pgeSize, string cir_no, DateTime _frmDt, DateTime _toDt)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getCircualrNo(pgeNum, pgeSize, cir_no, _frmDt, _toDt);
        }

        //Randima 2016-09-06
        public List<MAIN_CAT_SEARCH> getSchemeType(string pgeNum, string pgeSize, string searchFld, string searchVal)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSchemeType(pgeNum, pgeSize, searchFld, searchVal);
        }

        //Randima 2016-09-06
        public List<MAIN_CAT_SEARCH> getSchemeCode(string pgeNum, string pgeSize, string searchFld, string searchVal)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSchemeCode(pgeNum, pgeSize, searchFld, searchVal);
        }
        public List<MAIN_CAT_SEARCH> getSchemeTerm(string pgeNum, string pgeSize, string searchFld, string searchVal)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSchemeTerm(pgeNum, pgeSize, searchFld, searchVal);
        }
        //dilshan
        public List<MAIN_CAT_SEARCH> getPtypeCode(string pgeNum, string pgeSize, string searchFld, string searchVal)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getPtypeCode(pgeNum, pgeSize, searchFld, searchVal);
        }

        //Randima 2016-09-06
        public List<MAIN_CAT_SEARCH> getAllPriceBooks(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getAllPriceBooks(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Randima 2016-09-06
        public List<MAIN_CAT_SEARCH> getAllPriceLevels(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getAllPriceLevels(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Randima 2016-09-06
        public List<CUSTOMER_SEARCH> getCustomers(string pgeNum, string pgeSize, string code, string name, string add, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getCustomers(pgeNum, pgeSize, code, name, add, company);
        }

        //Randima 2016-09-06
        public List<EXECUTIVE_SEARCH> getAllExecutives(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getAllExecutives(pgeNum, pgeSize, searchFld, searchVal, company);
        }

        //Randima 2016-09-06
        public List<MAIN_CAT_SEARCH> getInvoiceSubTypes(string pgeNum, string pgeSize, string searchFld, string searchVal, string mainTyp, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getInvoiceSubTypes(pgeNum, pgeSize, searchFld, searchVal, mainTyp, company);
        }

        //subodana 2016-10-25
        public List<Sim_Pc> GetPcInfoData(string code, string val)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.GetPcInfoData(code, val);
        }

        //Sanjaya De Silva 20-Dec-2016
        public DataTable GetTotMonthSalesDataTable(string _com, string _pc, int _year, int _month, string _exCode, string _custCode)
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GetTotMonthSalesDataTable(_com, _pc, _year, _month, _exCode, _custCode);
            _financialDAL.ConnectionClose();
            return _dt;
        }

        //Sanjaya De Silva 22-Dec-2016
        public DataTable GetMonthSalesDataTable(string _com, string _pc, int _year, int _month, string _exCode, string _custCode)
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GetMonthSalesDataTable(_com, _pc, _year, _month, _exCode, _custCode);
            _financialDAL.ConnectionClose();
            return _dt;
        }
        public DataTable GetSalesForCastingWeeklyForcastAchivement(DateTime _FromDate, DateTime _ToDate, string _invdate, string _com, string _user, Dictionary<string, string[]> dataValues)
        {
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

            string _filePath = string.Empty;
            DataTable _dtFinal = new DataTable();
            DataTable _dtResults;
            DataTable _dtResults1;
            String[] szColumns = new String[2];
            szColumns[0] = "bms_do_year";
            szColumns[1] = "bms_do_month";

            _dtResults1 = _financialDAL.getBMSalesDetails(_FromDate, _ToDate, _invdate, _com, "", _user, "", 0, 0, "", 0, 0, 0);

            if (_dtResults1.Rows.Count > 0)
            {
                _dtFinal = _dtResults1;
            }
            return _dtFinal;
        }
        //Sanjaya De Silva 2017-01-24
        public DataTable GetLocationsByCompDataTable(string _com, string _cate)
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GetLocationsByCompDataTable(_com, _cate);
            _financialDAL.ConnectionClose();
            return _dt;
        }

        //subodana 2017-01-28
        public List<Deliver_forcst_data> ForecastAnalist(string com, string codes, string brand, string mcat, string scat, string modle, string item, DateTime date, string type, string isfocast)
        {
            List<Deliver_forcst_data> list = new List<Deliver_forcst_data>();
            List<DELI_SALE_NEW> delisalelist = new List<DELI_SALE_NEW>();
            DashboardDal = new DashboardDLL();
            _SalesDAL = new SalesDAL();
            _financialDAL = new FinancialDAL();
            int days = DateTime.DaysInMonth(date.Year, date.Month);
            int datenum = 1;
            int multidate = 7;
            List<Forcstdata> forcstlist = DashboardDal.GetForecatData(com, date, item, codes, mcat, scat, modle, brand);
            if (forcstlist != null)
            {
                foreach (var flist in forcstlist)
                {
                    int obdays = Convert.ToInt32((flist.sfh_pd_to - flist.sfh_pd_frm).TotalDays) + 1;
                    if (type == "1" && obdays < 27)
                    {
                        if (flist.sfh_pd_frm.Day >= 1 && flist.sfh_pd_frm.Day <= 7)
                        {
                            DataTable dtdates = DashboardDal.GetWekklydays(com, date.Month, 1);
                            datenum = Convert.ToInt32(dtdates.Rows[0][0].ToString());
                            multidate = Convert.ToInt32(dtdates.Rows[0][0].ToString());
                            flist.sfh_pd_frm = flist.sfh_pd_frm;
                        }
                        else
                        {
                            Deliver_forcst_data ob1 = new Deliver_forcst_data();
                            ob1.code = "";
                            list.Add(ob1);
                            continue;
                        }

                    }
                    else if (type == "1")
                    {
                        DataTable dtdates = DashboardDal.GetWekklydays(com, date.Month, 1);
                        datenum = Convert.ToInt32(dtdates.Rows[0][0].ToString());
                        multidate = Convert.ToInt32(dtdates.Rows[0][0].ToString());
                        flist.sfh_pd_frm = flist.sfh_pd_frm;
                    }
                    if (type == "2" && obdays < 27)
                    {
                        if (flist.sfh_pd_frm.Day >= 8 && flist.sfh_pd_frm.Day <= 14)
                        {
                            DataTable dtdates1 = DashboardDal.GetWekklydays(com, date.Month, 1);
                            DataTable dtdates2 = DashboardDal.GetWekklydays(com, date.Month, 2);
                            datenum = Convert.ToInt32(dtdates1.Rows[0][0].ToString()) + Convert.ToInt32(dtdates2.Rows[0][0].ToString());
                            multidate = Convert.ToInt32(dtdates2.Rows[0][0].ToString());
                            flist.sfh_pd_frm = flist.sfh_pd_frm.AddDays(datenum - multidate);
                        }
                        else
                        {
                            Deliver_forcst_data ob1 = new Deliver_forcst_data();
                            ob1.code = "";
                            list.Add(ob1);
                            continue;
                        }
                    }
                    else if (type == "2")
                    {
                        DataTable dtdates1 = DashboardDal.GetWekklydays(com, date.Month, 1);
                        DataTable dtdates2 = DashboardDal.GetWekklydays(com, date.Month, 2);
                        datenum = Convert.ToInt32(dtdates1.Rows[0][0].ToString()) + Convert.ToInt32(dtdates2.Rows[0][0].ToString());
                        multidate = Convert.ToInt32(dtdates2.Rows[0][0].ToString());
                        flist.sfh_pd_frm = flist.sfh_pd_frm.AddDays(datenum - multidate);
                    }
                    if (type == "3" && obdays < 27)
                    {
                        if (flist.sfh_pd_frm.Day >= 14 && flist.sfh_pd_frm.Day <= 21)
                        {
                            DataTable dtdates1 = DashboardDal.GetWekklydays(com, date.Month, 1);
                            DataTable dtdates2 = DashboardDal.GetWekklydays(com, date.Month, 2);
                            DataTable dtdates3 = DashboardDal.GetWekklydays(com, date.Month, 3);
                            datenum = Convert.ToInt32(dtdates1.Rows[0][0].ToString()) + Convert.ToInt32(dtdates2.Rows[0][0].ToString()) + Convert.ToInt32(dtdates3.Rows[0][0].ToString());
                            multidate = Convert.ToInt32(dtdates3.Rows[0][0].ToString());
                            flist.sfh_pd_frm = flist.sfh_pd_frm.AddDays(datenum - multidate);
                        }
                        else
                        {
                            Deliver_forcst_data ob1 = new Deliver_forcst_data();
                            ob1.code = "";
                            list.Add(ob1);
                            continue;
                        }
                    }
                    else if (type == "3")
                    {
                        DataTable dtdates1 = DashboardDal.GetWekklydays(com, date.Month, 1);
                        DataTable dtdates2 = DashboardDal.GetWekklydays(com, date.Month, 2);
                        DataTable dtdates3 = DashboardDal.GetWekklydays(com, date.Month, 3);
                        datenum = Convert.ToInt32(dtdates1.Rows[0][0].ToString()) + Convert.ToInt32(dtdates2.Rows[0][0].ToString()) + Convert.ToInt32(dtdates3.Rows[0][0].ToString());
                        multidate = Convert.ToInt32(dtdates3.Rows[0][0].ToString());
                        flist.sfh_pd_frm = flist.sfh_pd_frm.AddDays(datenum - multidate);
                    }
                    if (type == "4" && obdays < 27)
                    {
                        if (flist.sfh_pd_frm.Day >= 21 && flist.sfh_pd_frm.Day <= 28)
                        {
                            DataTable dtdates1 = DashboardDal.GetWekklydays(com, date.Month, 1);
                            DataTable dtdates2 = DashboardDal.GetWekklydays(com, date.Month, 2);
                            DataTable dtdates3 = DashboardDal.GetWekklydays(com, date.Month, 3);
                            DataTable dtdates4 = DashboardDal.GetWekklydays(com, date.Month, 4);
                            datenum = Convert.ToInt32(dtdates1.Rows[0][0].ToString()) + Convert.ToInt32(dtdates2.Rows[0][0].ToString()) + Convert.ToInt32(dtdates3.Rows[0][0].ToString()) + Convert.ToInt32(dtdates4.Rows[0][0].ToString());
                            multidate = Convert.ToInt32(dtdates4.Rows[0][0].ToString());
                            flist.sfh_pd_frm = flist.sfh_pd_frm.AddDays(datenum - multidate);
                        }
                        else
                        {
                            Deliver_forcst_data ob1 = new Deliver_forcst_data();
                            ob1.code = "";
                            list.Add(ob1);
                            continue;
                        }
                    }
                    else if (type == "4")
                    {
                        DataTable dtdates1 = DashboardDal.GetWekklydays(com, date.Month, 1);
                        DataTable dtdates2 = DashboardDal.GetWekklydays(com, date.Month, 2);
                        DataTable dtdates3 = DashboardDal.GetWekklydays(com, date.Month, 3);
                        DataTable dtdates4 = DashboardDal.GetWekklydays(com, date.Month, 4);
                        datenum = Convert.ToInt32(dtdates1.Rows[0][0].ToString()) + Convert.ToInt32(dtdates2.Rows[0][0].ToString()) + Convert.ToInt32(dtdates3.Rows[0][0].ToString()) + Convert.ToInt32(dtdates4.Rows[0][0].ToString());
                        multidate = Convert.ToInt32(dtdates3.Rows[0][0].ToString());
                        flist.sfh_pd_frm = flist.sfh_pd_frm.AddDays(datenum - multidate);
                    }
                    //List<Sim_Pc> _pc = DashboardDal.GetPcInfoData(flist.sfh_def_by, flist.sfh_def_cd);
                    //foreach (var plist in _pc)
                    //{
                    //    _SalesDAL.Get_Gp_Data(flist.sfh_pd_frm, flist.sfh_pd_frm.AddDays(datenum), "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", plist.pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                    //    List<DELI_SALE_NEW> outdatalist2 = _SalesDAL.GetDeliversaleList();
                    //    delisalelist.AddRange(outdatalist2);
                    //}
                    string chnlnw = "";
                    string schnlnw = "";
                    string zonenw = "";
                    string regionnw = "";
                    string areanw = "";
                    if (flist.sfh_def_by == "COM")
                    {
                        com = flist.sfh_def_cd;
                    }
                    else if (flist.sfh_def_by == "CHNL")
                    {
                        chnlnw = flist.sfh_def_cd;
                    }
                    else if (flist.sfh_def_by == "SCHNL")
                    {
                        schnlnw = flist.sfh_def_cd;
                    }
                    else if (flist.sfh_def_by == "AREA")
                    {
                        areanw = flist.sfh_def_cd;
                    }
                    else if (flist.sfh_def_by == "ZONE")
                    {
                        zonenw = flist.sfh_def_cd;
                    }
                    else if (flist.sfh_def_by == "REGION")
                    {
                        regionnw = flist.sfh_def_cd;
                    }

                    //update sanjeewa function
                    DateTime _vfromdate = Convert.ToDateTime(DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + "01");
                    DateTime _vtodate = Convert.ToDateTime(DateTime.Now).AddDays(-1);

                    DataTable _lastUpdate = _financialDAL.getBMSalesLastUpdated();
                    if (_lastUpdate.Rows.Count > 0)
                    {
                        foreach (DataRow _drrow in _lastUpdate.Rows)
                        {
                            if (!(String.IsNullOrEmpty(_drrow["bms_do_dt"].ToString())))
                            {
                                _vfromdate = Convert.ToDateTime(_drrow["bms_do_dt"]).AddDays(1);
                                _vtodate = Convert.ToDateTime(_drrow["bms_curr_dt"]).AddDays(-1);
                            }
                        }
                    }

                    TimeSpan _diffDate1 = _vtodate - _vfromdate;
                    if (_vtodate >= _vfromdate)
                    {
                        _financialDAL.ConnectionOpen();
                        int xx = _financialDAL.InsertBMSales(_vfromdate, _vtodate);
                        _financialDAL.TransactionCommit();
                    }
                    List<DeliveryItemDetails> delitem = new List<DeliveryItemDetails>();
                    if (flist.sfh_pd_frm.Year == DateTime.Now.Year && flist.sfh_pd_frm.Month == DateTime.Now.AddMonths(-1).Month)
                    {
                        delitem = DashboardDal.GetDiliverdItemListcurrent(com, flist.sfh_pd_frm, flist.sfh_pd_frm.AddDays(multidate - 1), chnlnw, schnlnw, areanw, zonenw, regionnw, flist.sfd_itm, flist.sfd_cat1, flist.sfd_cat2, flist.sfd_model, flist.sfd_brnd);
                    }
                    else
                    {
                        delitem = DashboardDal.GetDiliverdItemList(com, flist.sfh_pd_frm, flist.sfh_pd_frm.AddDays(multidate - 1), chnlnw, schnlnw, areanw, zonenw, regionnw, flist.sfd_itm, flist.sfd_cat1, flist.sfd_cat2, flist.sfd_model, flist.sfd_brnd);
                    }

                    var sumqty = 0;
                    if (delitem != null)
                    {
                        sumqty = delitem.Sum(a => a.bms_d_qty);
                    }

                    Deliver_forcst_data ob = new Deliver_forcst_data();
                    ob.code = flist.sfh_def_cd;
                    ob.curryrqty = Convert.ToInt16(sumqty);
                    ob.days = flist.sfd_qty * days / obdays;
                    ob.forcast = calcforcat(flist.sfd_qty, multidate, obdays); /*flist.sfd_qty * multidate / ob.days;*/
                    if (type == "4")
                    {
                        //  ob.forcast = ob.forcast - 4;
                    }
                    ob.zitemcode = flist.sfd_itm;
                    ob.zmodel = flist.sfd_model;
                    ob.zbrand = flist.sfd_brnd;
                    ob.zcat1 = flist.sfd_cat1;
                    ob.zcat2 = flist.sfd_cat2;
                    delisalelist = new List<DELI_SALE_NEW>();
                    //foreach (var plist in _pc)
                    //{
                    //    _SalesDAL.Get_Gp_Data(flist.sfh_pd_frm.AddYears(-1), flist.sfh_pd_frm.AddYears(-1).AddDays(datenum), "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", plist.pc, com, "", 11, "", "", true, 11, DateTime.Now.Date, DateTime.Now.Date, 0);
                    //    List<DELI_SALE_NEW> outdatalist3 = _SalesDAL.GetDeliversaleList();
                    //    delisalelist.AddRange(outdatalist3);
                    //}
                    var sumqtyp = 0;
                    List<DeliveryItemDetails> delitemp = DashboardDal.GetDiliverdItemList(com, flist.sfh_pd_frm.AddYears(-1), flist.sfh_pd_frm.AddYears(-1).AddDays(multidate - 1), chnlnw, schnlnw, areanw, zonenw, regionnw, flist.sfd_itm, flist.sfd_cat1, flist.sfd_cat2, flist.sfd_model, flist.sfd_brnd);
                    if (delitemp != null)
                    {
                        sumqtyp = delitemp.Sum(a => a.bms_d_qty);
                    }
                    ob.preyrqty = Convert.ToInt16(sumqtyp);
                    ob.varience = ob.curryrqty - ob.preyrqty;
                    if (ob.curryrqty == 0)
                    {
                        ob.yrdefprecn = 0;
                    }
                    else
                    {
                        ob.yrdefprecn = (ob.curryrqty - ob.preyrqty) * 100 / ob.curryrqty;
                    }

                    list.Add(ob);
                }
            }


            return list;
        }

        private int calcforcat(double x, double y, double z)
        {
            double val = x * y / z;
            double C = Math.Round(val);
            double range = 0;
            range = val - C;
            return Convert.ToInt32(C);
        }

        // Hushani Dinithi 2017-01-30
        public DataTable GetSalesDealersByCompDataTable(string _com, string _chnl)
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GetSalesDealersByCompDataTable(_com, _chnl);
            _financialDAL.ConnectionClose();
            return _dt;

        }

        // Hushani 2017-02-01
        public DataTable GetModelDataTable(string _cat1, string _cat2, string _brand)
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GetModelDataTable(_cat1, _cat2, _brand);
            _financialDAL.ConnectionClose();
            return _dt;
        }

        // Hushani 2017-02-02

        public DataTable GetShowroomTownByCompanyDataTable(string _com)
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GetShowroomTownByCompanyDataTable(_com);
            _financialDAL.ConnectionClose();
            return _dt;
        }
        public List<RptWarehousStockBalance> GetDailyWarehouseBalanseData(string _comp, MasterItem _mstItm, DateTime date, string _tp, string bmanager, string brand, string mcat, out string error)
        {
            DateTime _dtToday = new DateTime(date.Year, date.Month, date.Day);
            decimal _PYLMVal = 0, _CYLMVal = 0, _LYCMVal = 0, _dailyAvgDisp = 0;
            decimal noOfDays = 0;
            DataTable prvYearDFS = null;
            DataTable CYearDFS = null;
            DataTable lYearDFS = null;
            DataTable prvYearDPS = null;
            DataTable CYearDPS = null;
            DataTable lYearDPS = null;
            // _mstItm.Tmp_com = "ABL";
            //  List<RptWarehousStockBalance> _rptFinal = new List<RptWarehousStockBalance>();
            List<RptWarehousStockBalance> _rptFinal = new List<RptWarehousStockBalance>();
            List<RptWarehousStockBalance> _rptTmp = new List<RptWarehousStockBalance>();
            _reportDAL = new ReptCommonDAL();
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();
            error = "";
            DataTable brnddet = new DataTable("brand");
            try
            {
                if (_securityDAL.Is_Report_DR("BI_DAILYWHBALANCE_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                if (bmanager != "")
                {
                    brnddet = DashboardDal.getBrandMgrAlloc(_comp, bmanager, mcat, brand);
                    if (brnddet != null && brnddet.Rows.Count == 0)
                    {
                        error = "No alocated brand details found for manager : " + bmanager;
                        return _rptFinal;
                    }
                }
                
                string[] seperator = new string[] { "," };
                string[] searchParams = _comp.Split(seperator, StringSplitOptions.None);
                foreach (var item in searchParams)
                {
                    if (!string.IsNullOrEmpty(item))
                    {
                        _mstItm.Tmp_com = item;
                        DateTime _dtCurrent = DateTime.Today;
                        _rptTmp = DashboardDal.GetItemDataForDailyWareHouseBalnce(_mstItm, _dtCurrent);

                        //Dulaj 2018/Sep/04 For currenyear
                        DateTime lsmontloastdate = _dtToday.AddMonths(-1);
                        var lastDayOfMonth = new DateTime(lsmontloastdate.Year, lsmontloastdate.Month, DateTime.DaysInMonth(lsmontloastdate.Year, lsmontloastdate.Month));
                        DateTime firstDate = _dtToday.AddMonths(-3);
                        var firstDayOfMonth = new DateTime(firstDate.Year, firstDate.Month, 1);
                        //
                        //Dulaj 2018/Sep/04 For prvyear
                        DateTime prvyerlastmonthlast = _dtToday.AddYears(-1).AddMonths(-1);
                        var lastDayOfprvyerMonth = new DateTime(prvyerlastmonthlast.Year, prvyerlastmonthlast.Month, DateTime.DaysInMonth(prvyerlastmonthlast.Year, prvyerlastmonthlast.Month));
                        DateTime firstDateofprvyear = _dtToday.AddYears(-1).AddMonths(-3);
                        var firstDayOfprvyearMonth = new DateTime(firstDateofprvyear.Year, firstDateofprvyear.Month, 1);
                        //

                        //***************************prvYear*****************added by dilshan on 24/07/2018

                        prvYearDFS = GetAVGDispatchValueNew(DashboardDal, _mstItm.Tmp_com, "DFS", firstDayOfprvyearMonth, lastDayOfprvyerMonth);
                        prvYearDPS = GetAVGDispatchValueNew(DashboardDal, _mstItm.Tmp_com, "DPS", firstDayOfprvyearMonth, lastDayOfprvyerMonth);
                        //***************************CYear*****************

                        CYearDFS = GetAVGDispatchValueNew(DashboardDal, _mstItm.Tmp_com, "DFS", firstDayOfMonth, lastDayOfMonth);
                        CYearDPS = GetAVGDispatchValueNew(DashboardDal, _mstItm.Tmp_com, "DPS", firstDayOfMonth, lastDayOfMonth);
                        //***************************lYear*****************
                        DateTime _lYearCurMonFirst = _dtCurrent.AddYears(-1);
                        DateTime _lYearCurLastMonFirDt = new DateTime(_lYearCurMonFirst.Year, _lYearCurMonFirst.Month, 01);
                        DateTime _lYearCurLastMonLastDt = _lYearCurLastMonFirDt.AddMonths(1).AddDays(-1);
                        lYearDFS = GetAVGDispatchValueNew(DashboardDal, _mstItm.Tmp_com, "DFS", _lYearCurLastMonFirDt, _lYearCurLastMonLastDt);
                        lYearDPS = GetAVGDispatchValueNew(DashboardDal, _mstItm.Tmp_com, "DPS", _lYearCurLastMonFirDt, _lYearCurLastMonLastDt);
                        //***************************************************
                        noOfDays = lastDayOfMonth.Subtract(firstDayOfMonth).Days;
                        //_dailyAvgDisp = (_PYLMVal - _CYLMVal + _LYCMVal) / noOfDays;
                        //**************************************************
                        #region concatdpdflist
                        List<RptWarehousStockBalance> dpdflist = DashboardDal.getdfdpall(item, "", _dtToday, _dtToday);//Edited By Dulaj 2018/Aug/22

                        var result = _rptTmp.Where(p => !dpdflist.Any(p2 => p2.Mi_cd == p.Mi_cd));

                        var updated = (from x in _rptTmp
                                       join y in dpdflist
                                          on x.Mi_cd equals y.Mi_cd
                                       select new RptWarehousStockBalance
                                       {
                                           Mi_com = x.Mi_com,
                                           Mi_model = x.Mi_model,
                                           Mi_cd = x.Mi_cd,
                                           Mi_brand = x.Mi_brand,
                                           Mi_cate_1 = x.Mi_cate_1,
                                           Mi_cate_2 = x.Mi_cate_2,
                                           Mi_cate_3 = x.Mi_cate_3,
                                           Df_dayly_avg_disp = x.Df_dayly_avg_disp,
                                           Df_ob_stock = x.Df_ob_stock,
                                           Df_exp_arr_tod = y.Df_exp_arr_tod,
                                           Df_tot_ava_tod = x.Df_tot_ava_tod,
                                           Df_cls_st_tod = x.Df_cls_st_tod,
                                           Df_exp_arr_d1 = y.Df_exp_arr_d1,
                                           Df_tot_ava_d1 = x.Df_tot_ava_d1,
                                           Df_cls_st_d1 = x.Df_cls_st_d1,
                                           Df_exp_arr_d2 = y.Df_exp_arr_d2,
                                           Df_tot_ava_d2 = x.Df_tot_ava_d2,
                                           Df_cls_st_d2 = x.Df_cls_st_d2,
                                           Df_exp_arr_d3 = y.Df_exp_arr_d3,
                                           Df_tot_ava_d3 = x.Df_tot_ava_d3,
                                           Df_cls_st_d3 = x.Df_cls_st_d3,
                                           Dp_dayly_avg_disp = x.Dp_dayly_avg_disp,
                                           Dp_ob_stock = x.Dp_ob_stock,
                                           Dp_exp_arr_tod = y.Dp_exp_arr_tod,
                                           Dp_tot_ava_tod = x.Dp_tot_ava_tod,
                                           Dp_cls_st_tod = x.Dp_cls_st_tod,
                                           Dp_exp_arr_d1 = y.Dp_exp_arr_d1,
                                           Dp_tot_ava_d1 = x.Dp_tot_ava_d1,
                                           Dp_cls_st_d1 = x.Dp_cls_st_d1,
                                           Dp_exp_arr_d2 = y.Dp_exp_arr_d2,
                                           Dp_tot_ava_d2 = x.Dp_tot_ava_d2,
                                           Dp_cls_st_d2 = x.Dp_cls_st_d2,
                                           Dp_exp_arr_d3 = y.Dp_exp_arr_d3,
                                           Dp_tot_ava_d3 = x.Dp_tot_ava_d3,
                                           Dp_cls_st_d3 = x.Dp_cls_st_d3,
                                           Loc_tp = x.Loc_tp,
                                           Is_dp_loc = x.Is_dp_loc,
                                           Is_df_loc = x.Is_df_loc
                                       }).ToList();
                        var together = result.Concat(updated);
                        #endregion

                        int count = 0;//this should be remove
                        foreach (var dl in together)
                        {
                            dl.Loc_tp = "DFS";

                            DataTable a = new DataTable();
                            //******************************
                            if (prvYearDFS.Rows.Count > 0)
                            {
                                IEnumerable<DataRow> results = (from MyRows in prvYearDFS.AsEnumerable()
                                                                where
                                                                 MyRows.Field<string>("ITB_ITM_CD") == dl.Mi_cd
                                                                select MyRows);
                                if (results.Any())
                                    a = results.CopyToDataTable();
                            }
                            if (a.Rows.Count > 0)
                            {
                                _PYLMVal = Convert.ToDecimal(a.Rows[0]["BAL"].ToString());
                            }
                            else
                            {
                                _PYLMVal = 0;
                            }
                            //******************************
                            DataTable b = new DataTable();
                            if (CYearDFS.Rows.Count > 0)
                            {
                                IEnumerable<DataRow> results = (from MyRows in CYearDFS.AsEnumerable()
                                                                where
                                                                 MyRows.Field<string>("ITB_ITM_CD") == dl.Mi_cd
                                                                select MyRows);
                                if (results.Any())
                                    b = results.CopyToDataTable();
                            }
                            if (b.Rows.Count > 0)
                            {
                                _CYLMVal = Convert.ToDecimal(b.Rows[0]["BAL"].ToString());
                            }
                            else
                            {
                                _CYLMVal = 0;
                            }
                            //******************************
                            DataTable c = new DataTable();
                            if (lYearDFS.Rows.Count > 0)
                            {
                                IEnumerable<DataRow> results = (from MyRows in lYearDFS.AsEnumerable()
                                                                where
                                                                 MyRows.Field<string>("ITB_ITM_CD") == dl.Mi_cd
                                                                select MyRows);
                                if (results.Any())
                                    c = results.CopyToDataTable();
                            }

                            if (c.Rows.Count > 0)
                            {
                                _LYCMVal = Convert.ToDecimal(c.Rows[0]["BAL"].ToString());
                            }
                            else
                            {
                                _LYCMVal = 0;
                            }
                            //Dulaj 2018/sep/04
                            if (_PYLMVal != 0 && _CYLMVal != 0)
                            {
                                decimal valPercentage = ((_CYLMVal - _PYLMVal) / _PYLMVal) * 100;
                                valPercentage = _LYCMVal * valPercentage;
                                decimal _avg = _LYCMVal + valPercentage;
                                int days = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);
                                _avg = _avg / days;
                                dl.Df_dayly_avg_disp = _avg;
                            }
                            if (_PYLMVal == 0 && _CYLMVal != 0)
                            {
                                //firstDayOfMonth, lastDayOfMonth
                                TimeSpan _diffDate = lastDayOfMonth - firstDayOfMonth;
                                int days = (_diffDate.Days);
                                //int days = lastDayOfMonth.Day - firstDayOfMonth.Day; //DateTime.Daysd(DateTime.Now.Year, DateTime.Now.Month);
                                decimal valPercentage = _CYLMVal / days;
                                //valPercentage = _LYCMVal * valPercentage;
                                //decimal _avg = _LYCMVal + valPercentage;
                                days = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);

                                decimal _avg = valPercentage / days;
                                dl.Df_dayly_avg_disp = Math.Round(_avg);
                            }
                            else
                            {
                                dl.Df_dayly_avg_disp = 0;
                            }
                            ///
                            // dl.Df_dayly_avg_disp = (_PYLMVal - _CYLMVal + _LYCMVal) / noOfDays;
                            //******************************
                            dl.Mi_com = item;
                            //commented by dilshan on 24/07/2018
                            //dl.Df_dayly_avg_disp = GetAVGDispatchValue(DashboardDal, dl, _dtCurrent);
                            //**********************************

                            dl.Df_tot_ava_tod = dl.Df_ob_stock + dl.Df_exp_arr_tod;
                            dl.Df_cls_st_tod = dl.Df_tot_ava_tod - dl.Df_dayly_avg_disp;

                            dl.Df_tot_ava_d1 = dl.Df_ob_stock + dl.Df_exp_arr_d1;
                            dl.Df_cls_st_d1 = dl.Df_tot_ava_d1 - dl.Df_dayly_avg_disp;

                            dl.Df_tot_ava_d2 = dl.Df_ob_stock + dl.Df_exp_arr_d2;
                            dl.Df_cls_st_d2 = dl.Df_tot_ava_d2 - dl.Df_dayly_avg_disp;

                            dl.Df_tot_ava_d3 = dl.Df_ob_stock + dl.Df_exp_arr_d3;
                            dl.Df_cls_st_d3 = dl.Df_tot_ava_d3 - dl.Df_dayly_avg_disp;

                            dl.Mi_com = item;

                            //Get Dps DAily AVG DISP
                            dl.Loc_tp = "DPS";
                            #region expecetd arrival  DPS

                            #endregion
                            DataTable d = new DataTable();
                            //******************************
                            if (prvYearDPS.Rows.Count > 0)
                            {
                                IEnumerable<DataRow> results = (from MyRows in prvYearDPS.AsEnumerable()
                                                                where
                                                                 MyRows.Field<string>("ITB_ITM_CD") == dl.Mi_cd
                                                                select MyRows);
                                if (results.Any())
                                    d = results.CopyToDataTable();
                            }
                            if (d.Rows.Count > 0)
                            {
                                _PYLMVal = Convert.ToDecimal(d.Rows[0]["BAL"].ToString());
                            }
                            else
                            {
                                _PYLMVal = 0;
                            }
                            //******************************
                            DataTable e = new DataTable();
                            if (CYearDPS.Rows.Count > 0)
                            {
                                IEnumerable<DataRow> results = (from MyRows in CYearDPS.AsEnumerable()
                                                                where
                                                                 MyRows.Field<string>("ITB_ITM_CD") == dl.Mi_cd
                                                                select MyRows);
                                if (results.Any())
                                    e = results.CopyToDataTable();
                            }
                            if (e.Rows.Count > 0)
                            {
                                _CYLMVal = Convert.ToDecimal(e.Rows[0]["BAL"].ToString());
                            }
                            else
                            {
                                _CYLMVal = 0;
                            }
                            //******************************
                            DataTable f = new DataTable();
                            if (lYearDPS.Rows.Count > 0)
                            {
                                IEnumerable<DataRow> results = (from MyRows in lYearDPS.AsEnumerable()
                                                                where
                                                                 MyRows.Field<string>("ITB_ITM_CD") == dl.Mi_cd
                                                                select MyRows);
                                if (results.Any())
                                    f = results.CopyToDataTable();
                            }

                            if (f.Rows.Count > 0)
                            {
                                _LYCMVal = Convert.ToDecimal(f.Rows[0]["BAL"].ToString());
                            }
                            else
                            {
                                _LYCMVal = 0;
                            }
                            //Dulaj 2018/sep/04
                            if (_PYLMVal != 0 && _CYLMVal != 0)
                            {
                                decimal valPercentage = ((_CYLMVal - _PYLMVal) / _PYLMVal) * 100;
                                valPercentage = _LYCMVal * valPercentage;
                                decimal _avg = _LYCMVal + valPercentage;
                                int days = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);
                                _avg = _avg / days;
                                dl.Dp_dayly_avg_disp = _avg;
                            }
                            if (_PYLMVal == 0 && _CYLMVal != 0)
                            {
                                TimeSpan _diffDate = lastDayOfMonth - firstDayOfMonth;
                                int days = (_diffDate.Days);
                                decimal valPercentage = _CYLMVal / days;
                                days = DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month);
                                decimal _avg = valPercentage / days;
                                dl.Dp_dayly_avg_disp = Math.Round(_avg);
                            }
                            else
                            {
                                dl.Dp_dayly_avg_disp = 0;
                            }
                            ///
                            //  dl.Dp_dayly_avg_disp = (_PYLMVal - _CYLMVal + _LYCMVal) / noOfDays;


                            dl.Dp_tot_ava_tod = dl.Dp_ob_stock + dl.Dp_exp_arr_tod;
                            dl.Dp_cls_st_tod = dl.Dp_tot_ava_tod - dl.Dp_dayly_avg_disp;

                            dl.Dp_tot_ava_d1 = dl.Dp_ob_stock + dl.Dp_exp_arr_d1;
                            dl.Dp_cls_st_d1 = dl.Dp_tot_ava_d1 - dl.Dp_dayly_avg_disp;

                            dl.Dp_tot_ava_d2 = dl.Dp_ob_stock + dl.Dp_exp_arr_d2;
                            dl.Dp_cls_st_d2 = dl.Dp_tot_ava_d2 - dl.Dp_dayly_avg_disp;

                            dl.Dp_tot_ava_d3 = dl.Dp_ob_stock + dl.Dp_exp_arr_d3;
                            dl.Dp_cls_st_d3 = dl.Dp_tot_ava_d3 - dl.Dp_dayly_avg_disp;

                            //   System.Diagnostics.Debug.WriteLine(count++);//This should be remove
                        }
                        _rptFinal = together.ToList();
                    }
                }
                if (_rptFinal.Count > 0 && bmanager != "")
                {
                    if (brnddet != null && brnddet.Rows.Count > 0)
                    {
                        string managername = brnddet.Rows[0]["ESEP_NAME_INITIALS"].ToString();
                        List<RptWarehousStockBalance> _brandTmp = new List<RptWarehousStockBalance>();
                        foreach (DataRow fil in brnddet.Rows)
                        {
                            string brnd = (fil["MBA_BRND"].ToString() != "") ? DashboardDal.getBrandDesc(fil["MBA_BRND"].ToString()) : "";
                            string cat1 = (fil["MBA_CA1"].ToString() != "") ? DashboardDal.getCateDesc(fil["MBA_CA1"].ToString(), "", "", "CAT1") : "";
                            string cat2 = (fil["MBA_CA2"].ToString() != "") ? DashboardDal.getCateDesc(fil["MBA_CA1"].ToString(), fil["MBA_CA2"].ToString(), "", "CAT2") : "";
                            string cat3 = (fil["MBA_CA3"].ToString() != "") ? DashboardDal.getCateDesc(fil["MBA_CA1"].ToString(), fil["MBA_CA2"].ToString(), fil["MBA_CA3"].ToString(), "CAT3") : "";
                            if (brnd != "" && cat1 == "" && cat2 == "" && cat3 == "")
                            {
                                _brandTmp.AddRange(_rptFinal.Where(x => x.Mi_brand == brnd).ToList());

                            }
                            if (brnd != "" && cat1 != "" && cat2 == "" && cat3 == "")
                            {
                                _brandTmp.AddRange(_rptFinal.Where(x => x.Mi_brand == brnd && x.Mi_cate_1 == cat1).ToList());
                            }
                            if (brnd != "" && cat1 != "" && cat2 != "" && cat3 == "")
                            {
                                _brandTmp.AddRange(_rptFinal.Where(x => x.Mi_brand == brnd && x.Mi_cate_1 == cat1 && x.Mi_cate_2 == cat2).ToList());
                            }
                            if (brnd != "" && cat1 != "" && cat2 != "" && cat3 == "")
                            {
                                _brandTmp.AddRange(_rptFinal.Where(x => x.Mi_brand == brnd && x.Mi_cate_1 == cat1 && x.Mi_cate_2 == cat2 && x.Mi_cate_3 == cat3).ToList());
                            }
                            if (brnd == "" && cat1 != "" && cat2 == "" && cat3 == "")
                            {
                                _brandTmp.AddRange(_rptFinal.Where(x => x.Mi_cate_1 == cat1).ToList());
                            }
                            if (brnd == "" && cat1 != "" && cat2 != "" && cat3 == "")
                            {
                                _brandTmp.AddRange(_rptFinal.Where(x => x.Mi_cate_1 == cat1 && x.Mi_cate_2 == cat2).ToList());
                            }
                            if (brnd == "" && cat1 != "" && cat2 != "" && cat3 == "")
                            {
                                _brandTmp.AddRange(_rptFinal.Where(x => x.Mi_cate_1 == cat1 && x.Mi_cate_2 == cat2 && x.Mi_cate_3 == cat3).ToList());
                            }
                        }
                        _rptFinal = _brandTmp;
                    }
                    else
                    {
                        error = "No brand details found for manager : " + bmanager;
                    }
                }
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                _reportDAL.TransactionRollback();
                _reportDAL.ConnectionClose();
                DashboardDal.TransactionRollback();
                DashboardDal.ConnectionClose();
                return _rptFinal;
            }
            _reportDAL.ConnectionClose();
            DashboardDal.ConnectionClose();
            return _rptFinal;
        }



        public DataTable GetDailyWarehouseBalanseDataAsDataTable(List<RptWarehousStockBalance> _list)
        {
            DataTable _dt = new DataTable("_dt");
            _dt.Columns.Add("Model", typeof(string));
            _dt.Columns.Add("Item", typeof(string));
            _dt.Columns.Add("Brand", typeof(string));
            _dt.Columns.Add("Category", typeof(string));
            _dt.Columns.Add("Daily avg dispatch DFS", typeof(decimal));
            _dt.Columns.Add("O/B stocks DFS", typeof(decimal));
            _dt.Columns.Add("Expected Arrivals Today DFS", typeof(decimal));
            _dt.Columns.Add("Total Available Today DFS", typeof(decimal));
            _dt.Columns.Add("Closing stock Today DFS", typeof(decimal));
            _dt.Columns.Add("Expected Arrivals Day1 DFS", typeof(decimal));
            _dt.Columns.Add("Total Available Day1 DFS", typeof(decimal));
            _dt.Columns.Add("Closing stock Day1 DFS", typeof(decimal));
            _dt.Columns.Add("Expected Arrivals Day2 DFS", typeof(decimal));
            _dt.Columns.Add("Total Available Day2 DFS", typeof(decimal));
            _dt.Columns.Add("Closing stock Day2 DFS", typeof(decimal));
            _dt.Columns.Add("Expected Arrivals Day3 DFS", typeof(decimal));
            _dt.Columns.Add("Total Available Day3 DFS", typeof(decimal));
            _dt.Columns.Add("Closing stock Day3 DFS", typeof(decimal));
            _dt.Columns.Add("Daily avg dispatch DPS", typeof(decimal));
            _dt.Columns.Add("O/B stocks DPS", typeof(decimal));
            _dt.Columns.Add("Expected Arrivals Today DPS", typeof(decimal));
            _dt.Columns.Add("Total Available Today DPS", typeof(decimal));
            _dt.Columns.Add("Closing stock Today DPS", typeof(decimal));
            _dt.Columns.Add("Expected Arrivals Day1 DPS", typeof(decimal));
            _dt.Columns.Add("Total Available Day1 DPS", typeof(decimal));
            _dt.Columns.Add("Closing stock Day1 DPS", typeof(decimal));
            _dt.Columns.Add("Expected Arrivals Day2 DPS", typeof(decimal));
            _dt.Columns.Add("Total Available Day2 DPS", typeof(decimal));
            _dt.Columns.Add("Closing stock Day2 DPS", typeof(decimal));
            _dt.Columns.Add("Expected Arrivals Day3 DPS", typeof(decimal));
            _dt.Columns.Add("Total Available Day3 DPS", typeof(decimal));
            _dt.Columns.Add("Closing stock Day3 DPS", typeof(decimal));

            foreach (var item in _list)
            {
                DataRow _newRow = _dt.NewRow();
                _newRow["Model"] = item.Mi_model;
                _newRow["Item"] = item.Mi_cd;
                _newRow["Brand"] = item.Mi_brand;
                _newRow["Category"] = item.Mi_cate_1;
                _newRow["Daily avg dispatch DFS"] = item.Df_dayly_avg_disp;
                _newRow["O/B stocks DFS"] = item.Df_ob_stock;
                _newRow["Expected Arrivals Today DFS"] = item.Df_exp_arr_tod;
                _newRow["Total Available Today DFS"] = item.Df_tot_ava_tod;
                _newRow["Closing stock Today DFS"] = item.Df_cls_st_tod;
                _newRow["Expected Arrivals Day1 DFS"] = item.Df_exp_arr_d1;
                _newRow["Total Available Day1 DFS"] = item.Df_tot_ava_d1;
                _newRow["Closing stock Day1 DFS"] = item.Df_cls_st_d1;
                _newRow["Expected Arrivals Day2 DFS"] = item.Df_exp_arr_d2;
                _newRow["Total Available Day2 DFS"] = item.Df_tot_ava_d2;
                _newRow["Closing stock Day2 DFS"] = item.Df_cls_st_d2;
                _newRow["Expected Arrivals Day3 DFS"] = item.Df_exp_arr_d3;
                _newRow["Total Available Day3 DFS"] = item.Df_tot_ava_d3;
                _newRow["Closing stock Day3 DFS"] = item.Df_cls_st_d3;

                _newRow["Daily avg dispatch DPS"] = item.Dp_dayly_avg_disp;
                _newRow["O/B stocks DPS"] = item.Dp_ob_stock;
                _newRow["Expected Arrivals Today DPS"] = item.Dp_exp_arr_tod;
                _newRow["Total Available Today DPS"] = item.Dp_tot_ava_tod;
                _newRow["Closing stock Today DPS"] = item.Dp_cls_st_tod;
                _newRow["Expected Arrivals Day1 DPS"] = item.Dp_exp_arr_d1;
                _newRow["Total Available Day1 DPS"] = item.Dp_tot_ava_d1;
                _newRow["Closing stock Day1 DPS"] = item.Dp_cls_st_d1;
                _newRow["Expected Arrivals Day2 DPS"] = item.Dp_exp_arr_d2;
                _newRow["Total Available Day2 DPS"] = item.Dp_tot_ava_d2;
                _newRow["Closing stock Day2 DPS"] = item.Dp_cls_st_d2;
                _newRow["Expected Arrivals Day3 DPS"] = item.Dp_exp_arr_d3;
                _newRow["Total Available Day3 DPS"] = item.Dp_tot_ava_d3;
                _newRow["Closing stock Day3 DPS"] = item.Dp_cls_st_d3;
                _dt.Rows.Add(_newRow);
            }
            //GetDailyWarehouseBalanseData(string _comp, MasterItem _mstItm, DateTime date, string _tp)
            return _dt;
        }
        public List<ITEM_MODEL_SEARCH> getInventryAgeItems(string company, string brndMngr, string brnd, string cate1, string pagenum, string pagesize, string field, string search)
        {
            try
            {
                DashboardDal = new DashboardDLL();
                return DashboardDal.getInventryAgeItems(company, brndMngr, brnd, cate1, pagenum, pagesize, field, search);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        //NUWAN 2017-02-17
        public DataTable getAgeSlotForComALL(string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getAgeSlotForComALL(company);
        }

        public List<ITEM_SEARCH> getInventryAgeSrchItm(string company, string brndMngr, string brnd, string cate1, string model, string pagenum, string pagesize, string field, string search)
        {
            try
            {
                DashboardDal = new DashboardDLL();
                return DashboardDal.getInventryAgeSrchItm(company, brndMngr, brnd, cate1, model, pagenum, pagesize, field, search);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //Dulanga 2017/6/21
        public DataTable GetSpecificationByModel(string model)
        {

            try
            {
                DashboardDal = new DashboardDLL();
                return DashboardDal.GetSpecificationByModel(model);
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public DataTable GetColorByModel(string model)
        {//dulanga

            try
            {
                DashboardDal = new DashboardDLL();
                return DashboardDal.GetColorByModel(model);
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        //Dulanga 2017/6/21
        public List<SpecDetail> GetVideoByModel(string model)
        {
            List<SpecDetail> specList = new List<SpecDetail>();
            try
            {
                DashboardDal = new DashboardDLL();
                DataTable dt = DashboardDal.GetVideoByModel(model);
                foreach (DataRow row in dt.Rows)
                {
                    SpecDetail ns = new SpecDetail();
                    ns.Model = row["MMP_MODEL"].ToString();
                    ns.Type = row["MMP_TP"].ToString();
                    ns.Lable = row["MMP_RMK"].ToString();

                    if (ns.Type.Equals("PIC"))
                    {
                        ns.Path = Get_base64String(row["MMP_PATH"].ToString());
                    }
                    else
                    {

                        ns.Path = row["MMP_PATH"].ToString();
                    }
                    specList.Add(ns);

                }


                return specList;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        public string Get_base64String(string _path)
        {
            using (Image image = Image.FromFile(_path))
            {
                using (MemoryStream m = new MemoryStream())
                {
                    image.Save(m, image.RawFormat);
                    byte[] imageBytes = m.ToArray();

                    // Convert byte[] to Base64 String
                    string base64String = Convert.ToBase64String(imageBytes);
                    return base64String;
                }
            }
        }


        //Dulanga
        public DataTable GetMobBMTSales(string p_com, string p_code, string p_defby, string p_start, string p_end)
        {
            try
            {
                _securityDAL = new SecurityDAL();
                DashboardDal = new DashboardDLL();
                if (_securityDAL.Is_Report_DR("BI_TARGETALIGNMENT_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }

                return DashboardDal.GetMobBMTSales(p_com, p_code, p_defby, p_start, p_end);

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        //dulanga
        public DataTable GetInquaryPcSales(string p_pc, string p_cat, string p_com, DateTime p_stdt, DateTime p_enddt, string p_all)
        {
            try
            {
                _securityDAL = new SecurityDAL();
                DashboardDal = new DashboardDLL();
                if (_securityDAL.Is_Report_DR("BI_TARGETALIGNMENT_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }

                return DashboardDal.GetInquaryPcSales(p_pc, p_cat, p_com, p_stdt, p_enddt, p_all);

            }
            catch (Exception ex)
            {
                throw ex;
            }


        }

        //Dulanga
        public DataTable GetMobBMTTargert(string p_pc, string p_code, string p_start, string p_end)
        {

            try
            {
                DashboardDal = new DashboardDLL();
                return DashboardDal.GetMobBMTTargert(p_pc, p_code, p_start, p_end);

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        //Dulanga
        public DataTable GetMobBMTTargertPeriod(string p_type, string p_code)
        {

            try
            {
                DashboardDal = new DashboardDLL();
                return DashboardDal.GetMobBMTTargertPeriod(p_type, p_code);

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }



        //get Dilivery sale by Dulanga 2017/04/28
        public List<CHANL_WISE_SALES> getDeliverdSaleDetails(string selectedcompany, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime frmDt, DateTime toDt, string filterby, string Category)
        {
            try
            {
                _securityDAL = new SecurityDAL();
                DashboardDal = new DashboardDLL();
                if (_securityDAL.Is_Report_DR("BI_TARGETALIGNMENT_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }

                return DashboardDal.getChnlDeliverdSale(selectedcompany, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, filterby, Category);

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        /// <summary>
        /// getMobInvoice Sales
        /// </summary>
        /// <param name="p_com"></param>
        /// <param name="p_pc"></param>
        /// <param name="p_start"></param>
        /// <param name="p_end"></param>
        /// <param name="p_direct"></param>
        /// <returns></returns>
        public DataTable GetMobSales(string p_com, string p_pc, string p_start, string p_end, string p_direct, string type)
        {
            _securityDAL = new SecurityDAL();
            DashboardDal = new DashboardDLL();
            try
            {

                if (_securityDAL.Is_Report_DR("BI_TARGETALIGNMENT_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }

                return DashboardDal.GetMobSales(p_com, p_pc, p_start, p_end, p_direct, type);

            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        //dulanga
        public DataTable GetCompareSales(DateTime fdate, DateTime todate, DateTime pfdate, DateTime ptodate,
            DateTime pmfdate, DateTime pmtodate, string com, string chanel, string pc)
        {
            try
            {
                _securityDAL = new SecurityDAL();
                DashboardDal = new DashboardDLL();
                if (_securityDAL.Is_Report_DR("BI_TARGETALIGNMENT_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }

                return DashboardDal.GetCompareSales(fdate, todate, pfdate, ptodate, pmfdate, pmtodate, com, chanel, pc);

            }

            catch (Exception ex)
            {
                throw ex;
            }

        }

        // Hushani 2017-02-03

        public DataTable SearchShowroomTownDataTable(string _com, string cate3, string _searchCatergory, string _searchText)
        {

            _financialDAL = new FinancialDAL();
            return _financialDAL.SearchShowroomTownDataTable(_com, cate3, _searchCatergory, _searchText);
        }
        public List<MST_CHNL_SEARH_HEAD> getAllChannel(string company, string pgeNum, string pgeSize, string searchFld, string searchVal)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getAllChannel(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        //added by nuwan change functions 2017.07.10
        public List<CHANL_WISE_SALES> getChannelWiseDeliverySales(string selectedcompany, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, string filterby, string Category, out string error)
        {
            error = "";
            List<CHANL_WISE_SALES> delsales = new List<CHANL_WISE_SALES>();
            try
            {
                DateTime frmDt = fromdate;
                DateTime toDt = todate;
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                delsales = DashboardDal.getChnlDeliverdSale(selectedcompany, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, filterby, Category);

                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return delsales;
        }
        public List<CHANL_WISE_SALES> getChnWiseDeliverySalesWithPre(string comlst, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, DateTime preFrmDt, DateTime preToDt, string filterby, string Category, out string error)
        {
            error = string.Empty;
            List<CHANL_WISE_SALES> delisales = new List<CHANL_WISE_SALES>();
            try
            {
                DateTime frmDt = fromdate;
                DateTime toDt = todate;
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                delisales = DashboardDal.getChnWiseDeliverySalesWithPre(comlst, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, preFrmDt, preToDt, filterby, Category);

                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return delisales;
        }
        public List<CHANL_WISE_SALES> getChannelWiseSales(List<string> selectedcompany, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, string filterby, string Category, out string error)
        {
            error = string.Empty;
            List<CHANL_WISE_SALES> sales = new List<CHANL_WISE_SALES>();
            List<CHANL_WISE_SALES> delisales = new List<CHANL_WISE_SALES>();
            List<CHANL_WISE_SALES> allsale = new List<CHANL_WISE_SALES>();
            try
            {
                DateTime frmDt = fromdate;
                DateTime toDt = todate;
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                string comlst = string.Empty;
                Int32 cnt = 1;
                foreach (string cm in selectedcompany)
                {
                    comlst = comlst + ((cnt != selectedcompany.Count) ? cm + "," : cm);
                    cnt++;
                }
                //comlst = comlst.Remove(comlst.Length - 1);
                sales = DashboardDal.getChannelWiseSales(comlst, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, filterby, Category);
                delisales = DashboardDal.getDeliverdSaleDetails(comlst, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, filterby, Category);
                //foreach (CHANL_WISE_SALES delsle in delisales)
                //{
                //    bool has = sales.Any(x => x.CHANNEL_CODE == delsle.CHANNEL_CODE);
                //    if (has)
                //    {
                //        var toUpdate = sales.Single(x => x.CHANNEL_CODE == delsle.CHANNEL_CODE);
                //        toUpdate.DELIVERY_SALES = delsle.DELIVERY_SALES;
                //    }
                //    else
                //    {
                //        CHANL_WISE_SALES sl = new CHANL_WISE_SALES();
                //        sl.CHANNEL_CODE = delsle.CHANNEL_CODE;
                //        sl.CHANNEL_DESCRIPTION = delsle.CHANNEL_DESCRIPTION;
                //        sl.DELIVERY_SALES = delsle.DELIVERY_SALES;
                //        sl.INVOICE_SALES = delsle.INVOICE_SALES;
                //    }
                //}
                allsale = sales.Concat(delisales)
                                    .ToList();
                List<CHANL_WISE_SALES> invoiceSum = new List<CHANL_WISE_SALES>();
                invoiceSum =
                    allsale
                    .Select(x =>
                        new CHANL_WISE_SALES
                        {
                            CHANNEL_CODE = x.CHANNEL_CODE,
                            CHANNEL_DESCRIPTION = x.CHANNEL_DESCRIPTION,
                            DELIVERY_SALES = x.DELIVERY_SALES,
                            //INVOICE_SALES = x.INVOICE_SALES
                        }
                     )
                     .GroupBy(s => new { s.CHANNEL_CODE, s.CHANNEL_DESCRIPTION })
                     .Select(g =>
                            new CHANL_WISE_SALES
                            {
                                CHANNEL_CODE = g.Key.CHANNEL_CODE,
                                CHANNEL_DESCRIPTION = g.Key.CHANNEL_DESCRIPTION,
                                DELIVERY_SALES = g.Sum(x => Math.Round(Convert.ToDecimal(x.DELIVERY_SALES), 2)),
                                //INVOICE_SALES = g.Sum(x => Math.Round(Convert.ToDecimal(x.INVOICE_SALES), 2)),
                            }
                     ).ToList();
                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
                return invoiceSum;
            }
            catch (Exception ex)
            {
                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
                error = ex.Message.ToString();
                return sales;
            }
        }

        public decimal GetAVGDispatchValue(DashboardDLL _dal, RptWarehousStockBalance _obj, DateTime _dt)
        {
            decimal _PYLMVal = 0, _CYLMVal = 0, _LYCMVal = 0, _dailyAvgDisp = 0;
            decimal noOfDays = 0;
            DateTime _currYearFirstDT = new DateTime(_dt.Year, _dt.Month, 01);
            DateTime _currYearLastDT = _currYearFirstDT.AddMonths(1);

            DateTime _prvYearLastMonFirst = _dt.AddYears(-1).AddDays(-1);
            DateTime _prvYearLastMonFirDt = new DateTime(_prvYearLastMonFirst.Year, _prvYearLastMonFirst.Month, 01);
            DateTime _prvYearLastMonLastDt = _prvYearLastMonFirDt.AddMonths(1).AddDays(-1);
            _PYLMVal = _dal.GetItemDailyAVGDispatch(_obj.Mi_com, _obj.Mi_cd, _obj.Loc_tp
                                , _prvYearLastMonFirDt.AddMonths(-1), _prvYearLastMonLastDt.AddMonths(-1));

            DateTime _CYearLastMonFirst = _dt.AddDays(-1);
            DateTime _CYearLastMonFirDt = new DateTime(_CYearLastMonFirst.Year, _CYearLastMonFirst.Month, 01);
            DateTime _CYearLastMonLastDt = _CYearLastMonFirDt.AddMonths(1).AddDays(-1);
            _CYLMVal = _dal.GetItemDailyAVGDispatch(_obj.Mi_com, _obj.Mi_cd, _obj.Loc_tp
                               , _CYearLastMonFirDt.AddMonths(-1), _CYearLastMonLastDt.AddMonths(-1));

            DateTime _lYearCurMonFirst = _dt.AddYears(-1);
            DateTime _lYearCurLastMonFirDt = new DateTime(_lYearCurMonFirst.Year, _lYearCurMonFirst.Month, 01);
            DateTime _lYearCurLastMonLastDt = _lYearCurLastMonFirDt.AddMonths(1).AddDays(-1);
            _LYCMVal = _dal.GetItemDailyAVGDispatch(_obj.Mi_com, _obj.Mi_cd, _obj.Loc_tp
                                , _lYearCurLastMonFirDt, _lYearCurLastMonLastDt);
            noOfDays = _currYearLastDT.Subtract(_currYearFirstDT).Days;
            _dailyAvgDisp = (_PYLMVal - _CYLMVal + _LYCMVal) / noOfDays;
            return _dailyAvgDisp;
        }

        public DataTable GetAVGDispatchValueNew(DashboardDLL _dal, string com, string loctyp, DateTime _dt1, DateTime _dt2)
        {
            DataTable y = null;
            decimal _PYLMVal = 0, _CYLMVal = 0, _LYCMVal = 0, _dailyAvgDisp = 0;
            decimal noOfDays = 0;
            //DateTime _currYearFirstDT = new DateTime(_dt.Year, _dt.Month, 01);
            //DateTime _currYearLastDT = _currYearFirstDT.AddMonths(1);

            //DateTime _prvYearLastMonFirst = _dt.AddYears(-1).AddDays(-1);
            //DateTime _prvYearLastMonFirDt = new DateTime(_prvYearLastMonFirst.Year, _prvYearLastMonFirst.Month, 01);
            //DateTime _prvYearLastMonLastDt = _prvYearLastMonFirDt.AddMonths(1).AddDays(-1);
            y = _dal.GetItemDailyAVGDispatch_New(com, "", loctyp
                                , _dt1, _dt2);

            //DateTime _CYearLastMonFirst = _dt.AddDays(-1);
            //DateTime _CYearLastMonFirDt = new DateTime(_CYearLastMonFirst.Year, _CYearLastMonFirst.Month, 01);
            //DateTime _CYearLastMonLastDt = _CYearLastMonFirDt.AddMonths(1).AddDays(-1);
            //_CYLMVal = _dal.GetItemDailyAVGDispatch_New(_obj.Mi_com, _obj.Mi_cd, _obj.Loc_tp
            //                   , _CYearLastMonFirDt.AddMonths(-1), _CYearLastMonLastDt.AddMonths(-1));

            //DateTime _lYearCurMonFirst = _dt.AddYears(-1);
            //DateTime _lYearCurLastMonFirDt = new DateTime(_lYearCurMonFirst.Year, _lYearCurMonFirst.Month, 01);
            //DateTime _lYearCurLastMonLastDt = _lYearCurLastMonFirDt.AddMonths(1).AddDays(-1);
            //_LYCMVal = _dal.GetItemDailyAVGDispatch_New(_obj.Mi_com, _obj.Mi_cd, _obj.Loc_tp
            //                    , _lYearCurLastMonFirDt, _lYearCurLastMonLastDt);
            //noOfDays = _currYearLastDT.Subtract(_currYearFirstDT).Days;
            //_dailyAvgDisp = (_PYLMVal - _CYLMVal + _LYCMVal) / noOfDays;
            return y;
        }
        //2017/03/06

        public DataTable RatioDetailsReports(string com, DateTime fdate, DateTime tdate, string item, string model, string cat, string brand)
        {
            DataTable dt = new DataTable("t1");
            DataRow srow;
            try
            {
                tdate = tdate.AddMonths(1).AddDays(-1);
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                InventoryDAL _inventoryDAL = new InventoryDAL();
                if (_securityDAL.Is_Report_DR("BI_DEFECT_RATIO") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                    _securityDAL.ConnectionOpen_DR();
                    _inventoryDAL.ConnectionOpen_DR();
                }

                List<SerJobDesc> Jobsall = new List<SerJobDesc>();
                List<RatioData> importsitem = DashboardDal.GetRatioData(com, fdate, tdate, item, cat, model, brand, "GRN", "IMPORTS", "GOD,GDLP");
                List<RatioData> netsaleitemdo = DashboardDal.GetRatioData(com, fdate, tdate, item, cat, model, brand, "DO", "", "GOD,GDLP");
                List<RatioData> netsaleitemsrn = DashboardDal.GetRatioData(com, fdate, tdate, item, cat, model, brand, "SRN", "", "GOD,GDLP");
                List<RatioData> defectitem = DashboardDal.GetRatioData(com, fdate, tdate, item, cat, model, brand, "SRN", "", "DEF,DEFLP");

                string[] comarr = com.Split(',');
                DateTime _MAXDATE = DateTime.Now.Date;
                Int32 _maxno = 0;
                string seqlist = "";
                foreach (string i in comarr)
                {
                    DataTable _REPORT1 = _inventoryDAL.GET_PSI_REPT_MAX_DATE(i, tdate);
                    if (_REPORT1 != null)
                    {
                        if (_REPORT1.Rows.Count > 0)
                        {
                            _MAXDATE = Convert.ToDateTime(_REPORT1.Rows[0][1].ToString());
                            _maxno = Convert.ToInt32(_REPORT1.Rows[0][0].ToString());
                            seqlist = seqlist + _maxno.ToString() + ",";
                        }
                    }
                }


                if (importsitem != null)
                {
                    foreach (var imitems in importsitem)
                    {
                        string itemcd = imitems.itb_itm_cd;
                        decimal year = imitems.Years;
                        Int32 qty = imitems.Qty;
                        Int32 doqty = 0;
                        Int32 srnqty = 0;

                        List<SerJobDesc> alljosforitem = DashboardDal.GetSerJobDesc(itemcd.ToString(), fdate, tdate);
                        if (alljosforitem != null)
                        {
                            imitems.Totalldefqty = alljosforitem.Sum(a => a.Qty);
                        }

                        Int32 qty2 = 0;
                        DateTime lastdate = new DateTime(Convert.ToInt32(year.ToString()), 12, 31);
                        DateTime firstdate = new DateTime(Convert.ToInt32(year.ToString()), 1, 1);
                        if (lastdate <= tdate && fdate.Year.ToString() == year.ToString())
                        {
                            List<SerJobDesc> Jobs1 = DashboardDal.GetSerJobDesc(itemcd.ToString(), fdate, lastdate);
                            if (Jobs1 != null)
                            {
                                qty2 = Jobs1.Sum(a => a.Qty);
                            }

                        }
                        else if (lastdate <= tdate)
                        {
                            List<SerJobDesc> Jobs1 = DashboardDal.GetSerJobDesc(itemcd.ToString(), firstdate, lastdate);
                            if (Jobs1 != null)
                            {
                                qty2 = Jobs1.Sum(a => a.Qty);
                            }
                        }
                        else
                        {
                            List<SerJobDesc> Jobs1 = DashboardDal.GetSerJobDesc(itemcd.ToString(), firstdate, tdate);
                            if (Jobs1 != null)
                            {
                                qty2 = Jobs1.Sum(a => a.Qty);
                            }
                        }

                        if (netsaleitemdo != null)
                        {
                            doqty = netsaleitemdo.Where(a => a.itb_itm_cd == itemcd && a.Years == year).Sum(a => a.Qty);
                        }
                        if (netsaleitemsrn != null)
                        {
                            srnqty = netsaleitemsrn.Where(a => a.itb_itm_cd == itemcd && a.Years == year).Sum(a => a.Qty);
                        }
                        imitems.NetSaleQty = doqty - srnqty;
                        //if (defectitem != null)
                        //{
                        //    imitems.DefectiveQty = defectitem.Where(a => a.itb_itm_cd == itemcd && a.Years == year).Sum(a => a.Qty);
                        //}
                        //else
                        //{
                        //    imitems.DefectiveQty = 0;
                        //}
                        imitems.DefectiveQty = qty2;


                        imitems.ImportQty = imitems.Qty;
                        if (imitems.NetSaleQty > 0)
                        {
                            imitems.DefectiveRate = Math.Round(Convert.ToDouble(imitems.DefectiveQty) * 100 / Convert.ToDouble(imitems.NetSaleQty), 2);
                        }
                        else
                        {
                            imitems.DefectiveRate = 0;
                        }

                        List<SerJobDesc> Jobs = DashboardDal.GetSerJobDesc(imitems.itb_itm_cd, fdate, tdate);
                        if (Jobs != null)
                        {
                            if (Jobs.Count > 0)
                            {
                                Jobsall.AddRange(Jobs);
                            }

                        }
                    }
                }
                if (importsitem != null)
                {
                    importsitem = importsitem.OrderBy(a => a.itb_itm_cd).ToList();
                }
                else
                {


                    dt.Columns.Add("Category", typeof(string));
                    dt.Columns.Add("ItemCode", typeof(string));
                    dt.Columns.Add("Brand", typeof(string));
                    dt.Columns.Add("Model", typeof(string));
                    dt.Columns.Add("Total Imports", typeof(Int32));
                    dt.Columns.Add("Total Net", typeof(Int32));
                    dt.Columns.Add("Total Def", typeof(Int32));
                    dt.Columns.Add("Total DefRate", typeof(double));
                    srow = dt.NewRow();

                    return dt;
                }

                var yearlist = importsitem.GroupBy(test => test.Years)
                       .Select(grp => grp.First().Years)
                       .ToList();
                var itemlist = importsitem.GroupBy(test => test.itb_itm_cd)
                       .Select(grp => grp.First().itb_itm_cd)
                       .ToList();

                var desclist = Jobsall.GroupBy(test => test.sd_desc).Select(grp => grp.First().sd_desc).ToList();



                dt.Columns.Add("Category", typeof(string));
                dt.Columns.Add("ItemCode", typeof(string));
                dt.Columns.Add("Brand", typeof(string));
                dt.Columns.Add("Model", typeof(string));
                dt.Columns.Add("Total Defects", typeof(Int32));
                dt.Columns.Add("Total DefRate", typeof(double));
                foreach (var yr in yearlist)
                {
                    dt.Columns.Add("Defects " + yr.ToString(), typeof(Int32));
                }
                foreach (var yr in yearlist)
                {
                    dt.Columns.Add("Df Rate " + yr.ToString(), typeof(double));
                }
                dt.Columns.Add("Sellable Qty(AsAt)", typeof(Int32));
                dt.Columns.Add("Defective Qty(AsAt)", typeof(Int32));
                dt.Columns.Add("Total Imports", typeof(Int32));
                dt.Columns.Add("Total Net", typeof(Int32));
                foreach (var yr in yearlist)
                {
                    dt.Columns.Add("Imports " + yr.ToString(), typeof(Int32));
                }
                foreach (var yr in yearlist)
                {
                    dt.Columns.Add("Sales " + yr.ToString(), typeof(Int32));
                }




                foreach (var desc in desclist)
                {
                    dt.Columns.Add(desc.ToString(), typeof(Int32));
                    dt.Columns.Add(desc.ToString() + " Rate", typeof(double));
                }

                if (itemlist != null)
                {
                    foreach (var final in itemlist)
                    {
                        srow = dt.NewRow();

                        srow["ItemCode"] = final.ToString();
                        srow["Category"] = importsitem.Where(a => a.itb_itm_cd == final).FirstOrDefault().mi_cate_1;
                        srow["Brand"] = importsitem.Where(a => a.itb_itm_cd == final).FirstOrDefault().mi_brand;
                        srow["Model"] = importsitem.Where(a => a.itb_itm_cd == final).FirstOrDefault().mi_model;
                        srow["Total Imports"] = importsitem.Where(a => a.itb_itm_cd == final).Sum(a => a.Qty);
                        srow["Total Net"] = importsitem.Where(a => a.itb_itm_cd == final).Sum(a => a.NetSaleQty);
                        srow["Total Defects"] = importsitem.Where(a => a.itb_itm_cd == final).FirstOrDefault().Totalldefqty;
                        if (importsitem.Where(a => a.itb_itm_cd == final).Sum(a => a.NetSaleQty) == 0)
                        {
                            srow["Total DefRate"] = 0;
                        }
                        else
                        {
                            srow["Total DefRate"] = Math.Round(Convert.ToDouble(importsitem.Where(a => a.itb_itm_cd == final).Sum(a => a.DefectiveQty) * 100) / Convert.ToDouble(importsitem.Where(a => a.itb_itm_cd == final).Sum(a => a.NetSaleQty)), 2);
                        }
                        foreach (var yr in yearlist)
                        {
                            if (importsitem.Where(a => a.itb_itm_cd == final && a.Years == yr).ToList().Count > 0)
                            {
                                srow["Imports " + yr.ToString()] = importsitem.Where(a => a.itb_itm_cd == final && a.Years == yr).FirstOrDefault().ImportQty;
                            }
                            else
                            {
                                srow["Imports " + yr.ToString()] = 0;
                            }



                        }
                        foreach (var yr in yearlist)
                        {
                            if (importsitem.Where(a => a.itb_itm_cd == final && a.Years == yr).ToList().Count > 0)
                            {
                                srow["Sales " + yr.ToString()] = importsitem.Where(a => a.itb_itm_cd == final && a.Years == yr).FirstOrDefault().NetSaleQty;
                            }
                            else
                            {
                                srow["Sales " + yr.ToString()] = 0;
                            }

                        }
                        foreach (var yr in yearlist)
                        {
                            //Int32 qty = 0;
                            //DateTime lastdate = new DateTime(Convert.ToInt32(yr.ToString()), 12, 31);
                            //DateTime firstdate = new DateTime(Convert.ToInt32(yr.ToString()), 1, 1);
                            //if (lastdate <= tdate && fdate.Year.ToString() ==yr.ToString())
                            //{
                            //    List<SerJobDesc> Jobs1 = DashboardDal.GetSerJobDesc(final.ToString(), fdate, lastdate);
                            //    qty = Jobs1.Sum(a => a.Qty);
                            //}
                            //else if (lastdate <= tdate)
                            //{
                            //    List<SerJobDesc> Jobs1 = DashboardDal.GetSerJobDesc(final.ToString(), firstdate, lastdate);
                            //    qty = Jobs1.Sum(a => a.Qty);
                            //}
                            //else
                            //{
                            //    List<SerJobDesc> Jobs1 = DashboardDal.GetSerJobDesc(final.ToString(), firstdate, tdate);
                            //    qty = Jobs1.Sum(a => a.Qty);
                            //}
                            if (importsitem.Where(a => a.itb_itm_cd == final && a.Years == yr).ToList().Count > 0)
                            {
                                srow["Defects " + yr.ToString()] = importsitem.Where(a => a.itb_itm_cd == final && a.Years == yr).FirstOrDefault().DefectiveQty;
                            }
                            else
                            {
                                srow["Defects " + yr.ToString()] = 0;
                            }

                            // srow["Defects " + yr.ToString()] = qty;

                        }
                        foreach (var yr in yearlist)
                        {
                            if (importsitem.Where(a => a.itb_itm_cd == final && a.Years == yr).ToList().Count > 0)
                            {
                                srow["Df Rate " + yr.ToString()] = importsitem.Where(a => a.itb_itm_cd == final && a.Years == yr).FirstOrDefault().DefectiveRate;
                            }
                            else
                            {
                                srow["Df Rate " + yr.ToString()] = 0;
                            }

                        }

                        //sall qty
                        DataTable asatsale = DashboardDal.GetAssetforMonth(final, seqlist, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", false);
                        //DataTable asataftersale2 = DashboardDal.GetAssetforAfterMonth(com, final, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", "GRN,ADJ,SRN",_MAXDATE.AddDays(1),tdate,false);
                        //DataTable asataftersale3 = DashboardDal.GetAssetforAfterMonth(com, final, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", "DO,ADJ", _MAXDATE.AddDays(1), tdate, false);
                        DataTable asataftersale2 = DashboardDal.GetInOutQtyNot(com, final, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", _MAXDATE.AddDays(1), tdate, 1);
                        DataTable asataftersale3 = DashboardDal.GetInOutQtyNot(com, final, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", _MAXDATE.AddDays(1), tdate, 0);
                        Int32 assaleq1 = 0;
                        Int32 assaleq2 = 0;
                        Int32 assaleq3 = 0;
                        Int32 temp = 0;
                        if (asatsale != null)
                        {
                            assaleq1 = Int32.TryParse(asatsale.Rows[0][0].ToString(), out temp) ? Convert.ToInt32(asatsale.Rows[0][0].ToString()) : 0;
                        }
                        if (asataftersale2 != null)
                        {
                            assaleq2 = Int32.TryParse(asataftersale2.Rows[0][0].ToString(), out temp) ? Convert.ToInt32(asataftersale2.Rows[0][0].ToString()) : 0;
                        }
                        if (asataftersale3 != null)
                        {
                            assaleq3 = Int32.TryParse(asataftersale3.Rows[0][0].ToString(), out temp) ? Convert.ToInt32(asataftersale3.Rows[0][0].ToString()) : 0;
                        }
                        srow["Sellable Qty(AsAt)"] = (assaleq1 + assaleq2 - assaleq3).ToString();


                        // defective qty
                        DataTable asatdef = DashboardDal.GetAssetforMonth(final, seqlist, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", true);
                        //DataTable asatafterdef2 = DashboardDal.GetAssetforAfterMonth(com, final, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", "GRN,ADJ,SRN", _MAXDATE.AddDays(1), tdate, true);
                        //DataTable asatafterdef3 = DashboardDal.GetAssetforAfterMonth(com, final, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", "DO,ADJ", _MAXDATE.AddDays(1), tdate, true);
                        DataTable asatafterdef2 = DashboardDal.GetInOutQty(com, final, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", _MAXDATE.AddDays(1), tdate, 1);
                        DataTable asatafterdef3 = DashboardDal.GetInOutQty(com, final, "DEF,DEFLP,DISLP,DISP,RVT,RVTLP", _MAXDATE.AddDays(1), tdate, 0);
                        Int32 asdefq1 = 0;
                        Int32 asdefq2 = 0;
                        Int32 asdefq3 = 0;
                        Int32 temp2 = 0;
                        if (asatdef != null)
                        {
                            asdefq1 = Int32.TryParse(asatdef.Rows[0][0].ToString(), out temp2) ? Convert.ToInt32(asatdef.Rows[0][0].ToString()) : 0;
                        }
                        if (asatafterdef2 != null)
                        {
                            asdefq2 = Int32.TryParse(asatafterdef2.Rows[0][0].ToString(), out temp2) ? Convert.ToInt32(asatafterdef2.Rows[0][0].ToString()) : 0;
                        }
                        if (asatafterdef3 != null)
                        {
                            asdefq3 = Int32.TryParse(asatafterdef3.Rows[0][0].ToString(), out temp2) ? Convert.ToInt32(asatafterdef3.Rows[0][0].ToString()) : 0;
                        }
                        srow["Defective Qty(AsAt)"] = (asdefq1 + asdefq2 - asdefq3).ToString();

                        //Int32 totdefqty = 0;
                        foreach (var desc in desclist)
                        {
                            if (Jobsall.Where(a => a.jbd_itm_cd == final && a.sd_desc == desc).ToList().Count > 0)
                            {
                                if (Jobsall.Where(a => a.jbd_itm_cd == final && a.sd_desc == desc).FirstOrDefault().Qty == 0)
                                {
                                    srow[desc.ToString()] = 0;
                                }
                                else
                                {
                                    srow[desc.ToString()] = Jobsall.Where(a => a.jbd_itm_cd == final && a.sd_desc == desc).FirstOrDefault().Qty;
                                }

                                if (Jobsall.Where(a => a.jbd_itm_cd == final && a.sd_desc == desc).FirstOrDefault().Qty > 0)
                                {
                                    if (defectitem != null)
                                    {
                                        srow[desc.ToString() + " Rate"] = Jobsall.Where(a => a.jbd_itm_cd == final && a.sd_desc == desc).FirstOrDefault().Qty * 100 / importsitem.Where(a => a.itb_itm_cd == final).FirstOrDefault().Totalldefqty;
                                    }
                                    else
                                    {
                                        srow[desc.ToString() + " Rate"] = 0;
                                    }

                                }
                                else
                                {
                                    srow[desc.ToString() + " Rate"] = 0;
                                }

                            }
                            else
                            {
                                srow[desc.ToString() + " Rate"] = 0;
                            }

                        }
                        dt.Rows.Add(srow);
                    }
                }
                return dt;
            }
            catch (Exception ex)
            {
                throw ex;
            }


        }
        public List<CUSTOMER_SALES> getCustomerInvDetails(string selectedcompany, string Channel, string Subchnl, string Area, string Region, string Zone, string pc, DateTime SalesFrom, DateTime SalesTo, string Brand, string MainCat, string txtModel, string txtItem, decimal CheckAmount, string filterby, string cat2, string cat3, Int32 visit, string age, string salary, string customer, string invtype, string schemetype, string schemecode, string CTown, string PTown, string BankCode, string Withserial, string Paymenttype, string user, string dist, string prov)
        {
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CUSTOMERINVOICE_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                string company = selectedcompany;//[0];
                if (Channel != "" || Subchnl != "" || Area != "" || Region != "" || Zone != "")
                {
                    DataTable pcDet = DashboardDal.getCustomerSalesPcList(company, Channel, Subchnl, Area, Region, Zone, pc, user);
                }
                //List<List<DataRow>> table = SplitDataTable(pcDet, 300);
                List<CUSTOMER_SALES> finaldt = new List<CUSTOMER_SALES>();
                //foreach (List<DataRow> lstrow in table)
                //{
                List<CUSTOMER_SALES> cusInvDet = new List<CUSTOMER_SALES>();
                Int32 cnt = 1;
                string pclst = "";
                //foreach (DataRow row in lstrow)
                //{
                //    pclst = pclst + ((cnt != pcDet.Rows.Count) ? row["mpi_pc_cd"].ToString() + "," : row["mpi_pc_cd"].ToString());
                //    cnt++;
                //}
                //pclst = pclst.Remove(pclst.Length - 1);
                cusInvDet = DashboardDal.getCustomerInvDetails(SalesFrom, SalesTo, CheckAmount, company, pc, MainCat, Brand, txtModel, txtItem, filterby, cat2, cat3, visit, age, salary, customer, invtype, schemetype, schemecode, CTown, PTown, BankCode, Withserial, Paymenttype, Channel, Subchnl, Area, Region, Zone, pc, user, dist, prov);
                finaldt.AddRange(cusInvDet);
                //}
                return finaldt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        // Hushani 2017-04-17

        public DataTable GetShowroomByCompanyCAT3DataTable(string _com, string _act, string _ref, string _cat2, string _cat3)
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GetShowroomTownByCompanyAndCat3DataTable(_com, _act, _ref, _cat2, _cat3);
            _financialDAL.ConnectionClose();
            return _dt;
        }

        // Hushani 2017-04-26
        public DataTable GetAllDistric()
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GET_ALL_DISTRIC();
            _financialDAL.ConnectionClose();
            return _dt;

        }
        public List<DELI_SALE_NEW> GetTotalDeliverSales(List<DeliverSale> deldalelist)
        {
            List<DELI_SALE_NEW> outdatalist = new List<DELI_SALE_NEW>();
            _SalesDAL = new SalesDAL();

            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("DeliverBondBal") == true) _SalesDAL.ConnectionOpen_DR();

            foreach (var objdeldale in deldalelist)
            {
                if (objdeldale.com != "" && objdeldale.pc == "")
                {
                    if (objdeldale.type == "Deliver")
                    {
                        List<SALE_BAL_DETAILS> allcomdolist = _SalesDAL.GetDOBalanceDetails(objdeldale.com, objdeldale.fromdate, objdeldale.todate);
                        foreach (var lst in allcomdolist)
                        {
                            DELI_SALE_NEW ob = new DELI_SALE_NEW();
                            ob.Brand = lst.Brand;
                            ob.Cat1 = lst.Cat1;
                            ob.Cat1_desc = lst.Cat1_desc;
                            ob.Cat2 = lst.Cat2;
                            ob.Cat2_desc = lst.Cat2_desc;
                            ob.Cat3 = lst.Cat3;
                            ob.Cat3_desc = lst.Cat3_desc;
                            ob.Cat4 = lst.Cat4;
                            ob.Cat4_desc = lst.Cat4_desc;
                            ob.Cat5 = lst.Cat5;
                            ob.Cat5_desc = lst.Cat5_desc;
                            ob.Com_code = lst.Com_code;
                            ob.Com_name = lst.Com_name;
                            ob.Currency = lst.Currency;
                            ob.Cust_code = lst.Cust_code;
                            ob.Cust_name = lst.Cust_name;
                            ob.Disc_amt = lst.Disc_amt;
                            ob.Do_date = lst.Do_date;
                            ob.Do_loc = lst.Do_loc;
                            ob.Do_loc_desc = lst.Do_loc_desc;
                            ob.Do_no = lst.Do_no;
                            ob.Ex_code = lst.Ex_code;
                            ob.Ex_name = lst.Ex_name;
                            ob.Gross_amt = lst.Gross_amt;
                            ob.Inv_date = lst.Inv_date;
                            ob.Inv_no = lst.Inv_no;
                            ob.Inv_subtp = lst.Inv_subtp;
                            ob.Inv_type = lst.Inv_type;
                            ob.Item_code = lst.Item_code;
                            ob.Item_desc = lst.Item_desc;
                            ob.Model = lst.Model;
                            ob.Net_amt = lst.Net_amt;
                            ob.Pb_lvl = lst.Pb_lvl;
                            ob.Pc_code = lst.Pc_code;
                            ob.Pc_desc = lst.Pc_desc;
                            ob.Price_book = lst.Price_book;
                            ob.Qty = lst.Qty;
                            ob.Tax_amt = lst.Tax_amt;
                            ob.Tot_amt = lst.Tot_amt;
                            ob.anal_7 = lst.anal_7;
                            ob.anal_8 = lst.anal_8;
                            outdatalist.Add(ob);
                        }
                    }
                    else if (objdeldale.type == "Invoice")
                    {

                        List<DELI_SALE_NEW> outdatalist2 = _SalesDAL.GetTotInvForAllCom(objdeldale.com, "", "", "", "", "", objdeldale.fromdate, objdeldale.todate, "", "");
                        outdatalist.AddRange(outdatalist2);
                    }
                    else
                    {
                        List<DELI_SALE_NEW> outdatalist2 = _SalesDAL.GetTotInvForAllCom(objdeldale.com, "", "", "", "", "", objdeldale.fromdate, objdeldale.todate, "", "");
                        outdatalist2 = outdatalist2.Where(a => a.Cash_dir == 1).ToList();
                        outdatalist.AddRange(outdatalist2);
                    }
                }
                else
                {
                    if (objdeldale.type == "Deliver")
                    {
                        List<SALE_BAL_DETAILS> allcomdolist = _SalesDAL.GetDOPCBalanceDetails(objdeldale.com, objdeldale.fromdate, objdeldale.todate, objdeldale.user);
                        foreach (var lst in allcomdolist)
                        {
                            DELI_SALE_NEW ob = new DELI_SALE_NEW();
                            ob.Brand = lst.Brand;
                            ob.Cat1 = lst.Cat1;
                            ob.Cat1_desc = lst.Cat1_desc;
                            ob.Cat2 = lst.Cat2;
                            ob.Cat2_desc = lst.Cat2_desc;
                            ob.Cat3 = lst.Cat3;
                            ob.Cat3_desc = lst.Cat3_desc;
                            ob.Cat4 = lst.Cat4;
                            ob.Cat4_desc = lst.Cat4_desc;
                            ob.Cat5 = lst.Cat5;
                            ob.Cat5_desc = lst.Cat5_desc;
                            ob.Com_code = lst.Com_code;
                            ob.Com_name = lst.Com_name;
                            ob.Currency = lst.Currency;
                            ob.Cust_code = lst.Cust_code;
                            ob.Cust_name = lst.Cust_name;
                            ob.Disc_amt = lst.Disc_amt;
                            ob.Do_date = lst.Do_date;
                            ob.Do_loc = lst.Do_loc;
                            ob.Do_loc_desc = lst.Do_loc_desc;
                            ob.Do_no = lst.Do_no;
                            ob.Ex_code = lst.Ex_code;
                            ob.Ex_name = lst.Ex_name;
                            ob.Gross_amt = lst.Gross_amt;
                            ob.Inv_date = lst.Inv_date;
                            ob.Inv_no = lst.Inv_no;
                            ob.Inv_subtp = lst.Inv_subtp;
                            ob.Inv_type = lst.Inv_type;
                            ob.Item_code = lst.Item_code;
                            ob.Item_desc = lst.Item_desc;
                            ob.Model = lst.Model;
                            ob.Net_amt = lst.Net_amt;
                            ob.Pb_lvl = lst.Pb_lvl;
                            ob.Pc_code = lst.Pc_code;
                            ob.Pc_desc = lst.Pc_desc;
                            ob.Price_book = lst.Price_book;
                            ob.Qty = lst.Qty;
                            ob.Tax_amt = lst.Tax_amt;
                            ob.Tot_amt = lst.Tot_amt;
                            ob.anal_7 = lst.anal_7;
                            ob.anal_8 = lst.anal_8;
                            outdatalist.Add(ob);
                        }
                    }
                    else if (objdeldale.type == "Invoice")
                    {
                        List<DELI_SALE_NEW> outdatalist2 = _SalesDAL.GetTotInvForPC(objdeldale.com, "", "", "", "", "", objdeldale.fromdate, objdeldale.todate, "", "", objdeldale.user);
                        outdatalist.AddRange(outdatalist2);
                    }
                    else
                    {
                        List<DELI_SALE_NEW> outdatalist2 = _SalesDAL.GetTotInvForPC(objdeldale.com, "", "", "", "", "", objdeldale.fromdate, objdeldale.todate, "", "", objdeldale.user);
                        outdatalist2 = outdatalist2.Where(a => a.Cash_dir == 1).ToList();
                        outdatalist.AddRange(outdatalist2);
                    }
                }


            }
            return outdatalist;
        }
        //Modified By Udaya 15/Dec/2017
        public DataTable getexchangereversaldetails(List<string> selectedcompany, string Channel, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, string Category, string type, string pc, string itemcode, string userID, out string _err, out string _path)
        {
            DashboardDal = new DashboardDLL();
            _generalDAL = new GeneralDAL();
            List<Ex_Rev_Data> maindata = new List<Ex_Rev_Data>();

            string comlst = string.Empty;
            Int32 cnt = 1;
            foreach (string cm in selectedcompany)
            {
                comlst = comlst + ((cnt != selectedcompany.Count) ? cm + "," : cm);
                cnt++;
            }
            List<Ex_Rev_Data> datalist = DashboardDal.getexchangereversaldetails(comlst, Channel, Brand, txtModel, txtItem, fromdate, todate, Category, type, pc, itemcode);
            var descriptionlist = datalist.GroupBy(test => test.mmct_sdesc)
                         .Select(grp => grp.First().mmct_sdesc)
                         .ToList();
            DataTable dt = new DataTable("dt");
            DataRow dr;
            dr = dt.NewRow();

            if (type == "bms_pc")
            {
                dt.Columns.Add("Profit Center", typeof(string));
                foreach (var desc in descriptionlist)
                {
                    dt.Columns.Add(desc.ToString(), typeof(Int32));
                }
                //group by pc
                List<Ex_Rev_Data> grouppc = datalist.GroupBy(l => new { l.sah_pc })
       .Select(cl => new Ex_Rev_Data
       {
           sah_pc = cl.First().sah_pc
       }).ToList();
                var count = 0;
                if (grouppc != null)
                {
                    count = grouppc.Count;
                }


                //group by pc,revdesc 
                datalist = datalist.GroupBy(l => new { l.sah_pc, l.mmct_sdesc })
       .Select(cl => new Ex_Rev_Data
       {
           sah_pc_Code = cl.First().sah_pc,
           sah_pc = cl.First().sah_pc + " - " + cl.First().mpc_desc,
           mmct_sdesc = cl.First().mmct_sdesc,
           reversal = cl.Sum(a => a.reversal)
       }).ToList();
                datalist = datalist.OrderBy(a => a.sah_pc_Code).ToList();
                string pc1 = "";
                string pc2 = "";

                foreach (var ch in grouppc)
                {
                    foreach (var li in datalist.Where(r => r.sah_pc_Code == ch.sah_pc))
                    {
                        dr["Profit Center"] = li.sah_pc;
                        foreach (var desc in descriptionlist)
                        {
                            if (desc == li.mmct_sdesc)
                            {
                                dr[desc] = li.reversal;
                            }
                        }
                    }
                    dt.Rows.Add(dr);
                    dr = dt.NewRow();
                }
                #region exit pc wise
                //foreach (var li in datalist)
                //{
                //    pc2 = li.sah_pc;

                //    if (pc2 != pc1 && pc1=="")
                //    {
                //        dr["Profit Center"] = pc2;
                //        foreach (var desc in descriptionlist)
                //        {
                //            if (desc == li.mmct_sdesc)
                //            {
                //                dr[desc] = li.reversal;
                //            }
                //        }

                //    }else if(pc2==pc1)
                //    {
                //        foreach (var desc in descriptionlist)
                //        {
                //            if (desc == li.mmct_sdesc)
                //            {
                //                dr[desc] = li.reversal;
                //            }
                //        }
                //    }else if(pc2 != pc1 && pc1 != "")
                //    {
                //        dt.Rows.Add(dr);
                //        dr = dt.NewRow();
                //        dr["Profit Center"] = pc2;
                //        foreach (var desc in descriptionlist)
                //        {
                //            if (desc == li.mmct_sdesc)
                //            {
                //                dr[desc] = li.reversal;
                //            }
                //        }
                //    }
                //    else if(count==1)
                //    {
                //       dt.Rows.Add(dr);
                //    }
                //    pc1 = li.sah_pc;
                //}
                #endregion exit pc wise
            }
            if (type == "bms_pc_cat")
            {
                dt.Columns.Add("Profit Center", typeof(string));
                dt.Columns.Add("Category", typeof(string));

                foreach (var desc in descriptionlist)
                {
                    dt.Columns.Add(desc.ToString(), typeof(Int32));
                }

                List<Ex_Rev_Data> grouppc = datalist.GroupBy(l => new { l.sah_pc })
       .Select(cl => new Ex_Rev_Data
       {
           sah_pc = cl.First().sah_pc
       }).ToList();

                var count = 0;
                if (grouppc != null)
                {
                    count = grouppc.Count;
                }

                List<Ex_Rev_Data> groupcate = datalist.GroupBy(l => new { l.mi_cate_1 })
                       .Select(cl => new Ex_Rev_Data
                       {
                           mi_cate_1 = cl.First().mi_cate_1
                       }).ToList();
                var count1 = 0;
                if (groupcate != null)
                {
                    count1 = groupcate.Count;
                }


                //group by pc,cat,revdesc
                datalist = datalist.GroupBy(l => new { l.sah_pc, l.mmct_sdesc, l.mi_cate_1 })
      .Select(cl => new Ex_Rev_Data
      {
          sah_pc_Code = cl.First().sah_pc,
          sah_pc = cl.First().sah_pc + " - " + cl.First().mpc_desc,
          mi_cate_1 = cl.First().mi_cate_1 + " - " + cl.First().ric1_desc,
          mmct_sdesc = cl.First().mmct_sdesc,
          reversal = cl.Sum(a => a.reversal)
      }).ToList();

                datalist = datalist.OrderBy(a => a.sah_pc_Code).ToList();
                datalist = datalist.OrderBy(a => a.mi_cate_1).ToList();

                //string pc1 = "";
                string pc2 = "";

                foreach (var ab in grouppc)
                {
                    pc2 = ab.sah_pc;
                    if (pc2 != null && pc2 != "")
                    {
                        dt.Rows.Add(dr);
                        dr = dt.NewRow();
                        dr["Profit Center"] = pc2;

                        //string cat1 = "";
                        string cat2 = "";
                        var v = datalist.Where(c => c.sah_pc_Code == ab.sah_pc).ToList();
                        foreach (var ab1 in v)
                        {
                            cat2 = ab1.mi_cate_1;
                            if (cat2 != null && cat2 != "")
                            {
                                dt.Rows.Add(dr);
                                dr = dt.NewRow();
                                dr["Category"] = cat2;

                                foreach (var desc in descriptionlist)
                                {
                                    if (desc == ab1.mmct_sdesc)
                                    {
                                        dr[desc] = ab1.reversal;
                                    }
                                }
                            }
                        }
                    }
                }
                #region pc category start
                //foreach (var ab in datalist)
                //{
                //    pc2 = ab.sah_pc;

                //    if ((pc2 != pc1) && (pc1 == ""))
                //    {
                //        dt.Rows.Add(dr);
                //        dr = dt.NewRow();
                //        dr["Profit Center"] = pc2;

                //        string cat1 = "";
                //        string cat2 = "";
                //        var v = datalist.Where(c => c.sah_pc == ab.sah_pc).ToList();
                //        foreach (var ab1 in v)
                //        {
                //            cat2 = ab1.mi_cate_1;

                //            if (cat2 != cat1 && cat1 == "")
                //            {
                //                dt.Rows.Add(dr);
                //                dr = dt.NewRow();
                //                dr["Category"] = cat2;

                //                foreach (var desc in descriptionlist)
                //                {
                //                    if (desc == ab1.mmct_sdesc)
                //                    {
                //                        dr[desc] = ab1.reversal;
                //                    }
                //                }
                //            }
                //            else if (cat2 == cat1)
                //            {
                //                foreach (var desc in descriptionlist)
                //                {
                //                    if (desc == ab1.mmct_sdesc)
                //                    {
                //                        dr[desc] = ab1.reversal;
                //                    }
                //                }
                //            }
                //            else if (cat2 != cat1 && cat1 != "")
                //            {
                //                dt.Rows.Add(dr);
                //                dr = dt.NewRow();
                //                dr["Category"] = cat2;
                //                foreach (var desc in descriptionlist)
                //                {
                //                    if (desc == ab1.mmct_sdesc)
                //                    {
                //                        dr[desc] = ab1.reversal;
                //                    }
                //                }
                //            }
                //            else if (count1 == 1)
                //            {
                //                dt.Rows.Add(dr);
                //            }
                //            cat1 = ab1.mi_cate_1;
                //        }
                //    }
                //    else if (pc2 == pc1)
                //    {
                //        string cat4 = "";
                //        string cat3 = "";
                //        var v = datalist.Where(c => c.sah_pc == ab.sah_pc).ToList();
                //        foreach (var ab2 in v)
                //        {
                //            cat4 = ab2.mi_cate_1;
                //            if (cat4 != cat3 && cat3 == "")
                //            {
                //                dt.Rows.Add(dr);
                //                dr = dt.NewRow();
                //                dr["Category"] = cat4;

                //                foreach (var desc in descriptionlist)
                //                {
                //                    if (desc == ab.mmct_sdesc)
                //                    {
                //                        dr[desc] = ab.reversal;
                //                    }
                //                }
                //            }
                //            else if (cat4 == cat3)
                //            {
                //                foreach (var desc in descriptionlist)
                //                {
                //                    if (desc == ab.mmct_sdesc)
                //                    {
                //                        dr[desc] = ab.reversal;
                //                    }
                //                }
                //            }
                //            else if (cat4 != cat3 && cat3 != "")
                //            {
                //                dt.Rows.Add(dr);
                //                dr = dt.NewRow();
                //                dr["Category"] = cat4;
                //                foreach (var desc in descriptionlist)
                //                {
                //                    if (desc == ab.mmct_sdesc)
                //                    {
                //                        dr[desc] = ab.reversal;
                //                    }
                //                }
                //            }
                //            cat3 = ab.mi_cate_1;
                //        }
                //    }
                //    else if (pc2 != pc1 && pc1 != "")
                //    {
                //        dt.Rows.Add(dr);
                //        dr = dt.NewRow();
                //        dr["Profit Center"] = pc2;

                //        string cat5 = "";
                //        string cat6 = "";
                //        var v = datalist.Where(c => c.sah_pc == ab.sah_pc).ToList();
                //        foreach (var ab3 in v)
                //        {
                //            cat6 = ab3.mi_cate_1;
                //            if (cat6 != cat5 && cat5 == "")
                //            {
                //                dt.Rows.Add(dr);
                //                dr = dt.NewRow();
                //                dr["Category"] = cat6;


                //                foreach (var desc in descriptionlist)
                //                {
                //                    if (desc == ab.mmct_sdesc)
                //                    {
                //                        dr[desc] = ab.reversal;
                //                    }
                //                }
                //            }
                //            else if (cat6 == cat5)
                //            {
                //                dt.Rows.Add(dr);
                //                dr = dt.NewRow();
                //                dr["Category"] = cat6;
                //                foreach (var desc in descriptionlist)
                //                {
                //                    if (desc == ab.mmct_sdesc)
                //                    {
                //                        dr[desc] = ab.reversal;
                //                    }
                //                }
                //            }
                //            else if (cat6 != cat5 && cat5 != "")
                //            {
                //                dt.Rows.Add(dr);
                //                dr = dt.NewRow();
                //                dr["Category"] = cat6;
                //                foreach (var desc in descriptionlist)
                //                {
                //                    if (desc == ab.mmct_sdesc)
                //                    {
                //                        dr[desc] = ab.reversal;
                //                    }
                //                }
                //            }
                //            cat5 = ab.mi_cate_1;
                //        }
                //        }


                //        pc1 = ab.sah_pc;

                //}
                #endregion end pc category start
            }
            if (type == "bms_chnl")
            {
                dt.Columns.Add("Channel", typeof(string));
                foreach (var desc in descriptionlist)
                {
                    dt.Columns.Add(desc.ToString(), typeof(Int32));
                }
                //group by channel
                List<Ex_Rev_Data> groupchannel = datalist.GroupBy(l => new { l.channel })
       .Select(cl => new Ex_Rev_Data
       {
           channel = cl.First().channel
       }).ToList();
                var count = 0;
                if (groupchannel != null)
                {
                    count = groupchannel.Count;
                }


                //group by pc,revdesc 
                datalist = datalist.GroupBy(l => new { l.channel, l.mmct_sdesc })
       .Select(cl => new Ex_Rev_Data
       {
           channel = cl.First().channel,
           mmct_sdesc = cl.First().mmct_sdesc,
           reversal = cl.Sum(a => a.reversal)
       }).ToList();
                datalist = datalist.OrderBy(a => a.channel).ToList();
                string channel1 = "";
                string channel2 = "";
                foreach (var ch in groupchannel)
                {
                    foreach (var li in datalist.Where(r => r.channel == ch.channel))
                    {
                        dr["Channel"] = li.channel;
                        foreach (var desc in descriptionlist)
                        {
                            if (desc == li.mmct_sdesc && li.channel == dr["Channel"].ToString())
                            {
                                dr[desc] = li.reversal;
                            }
                        }
                        #region comment exit one
                        //channel2 = li.channel; 

                        //if (channel2 != channel1 && channel1 == "")
                        //{
                        //    //add 
                        //    dr["Channel"] = channel2;
                        //    foreach (var desc in descriptionlist)
                        //    {
                        //        if (desc == li.mmct_sdesc)
                        //        {
                        //            dr[desc] = li.reversal;
                        //        }
                        //    }
                        //}
                        //else if (channel2 == channel1)
                        //{
                        //    foreach (var desc in descriptionlist)
                        //    {
                        //        if (desc == li.mmct_sdesc)
                        //        {
                        //            dr[desc] = li.reversal;
                        //        }
                        //    }
                        //}
                        //else if (channel2 != channel1 && channel1 != "")
                        //{
                        //    dt.Rows.Add(dr);
                        //    dr = dt.NewRow();
                        //    dr["Channel"] = channel2;
                        //    foreach (var desc in descriptionlist)
                        //    {
                        //        if (desc == li.mmct_sdesc)
                        //        {
                        //            dr[desc] = li.reversal;
                        //        }
                        //    }
                        //}
                        //else if (count == 1)
                        //{
                        //    dt.Rows.Add(dr);
                        //}
                        //channel1 = li.channel;
                        #endregion comment exit one
                    }
                    dt.Rows.Add(dr);
                    dr = dt.NewRow();
                }
            }
            if (type == "bms_chnl_cat")
            {
                dt.Columns.Add("Channel", typeof(string));
                dt.Columns.Add("Category", typeof(string));
                foreach (var desc in descriptionlist)
                {
                    dt.Columns.Add(desc.ToString(), typeof(Int32));
                }
                List<Ex_Rev_Data> groupchannel = datalist.GroupBy(l => new { l.channel })
       .Select(cl => new Ex_Rev_Data
       {
           channel = cl.First().channel
       }).ToList();

                var count = 0;
                if (groupchannel != null)
                {
                    count = groupchannel.Count;
                }
                List<Ex_Rev_Data> groupcate = datalist.GroupBy(l => new { l.mi_cate_1 })
                       .Select(cl => new Ex_Rev_Data
                       {
                           mi_cate_1 = cl.First().mi_cate_1
                       }).ToList();
                var count1 = 0;
                if (groupcate != null)
                {
                    count1 = groupcate.Count;
                }
                //group by pc,cat,revdesc
                datalist = datalist.GroupBy(l => new { l.channel, l.mmct_sdesc, l.mi_cate_1 })
       .Select(cl => new Ex_Rev_Data
       {
           sah_pc = cl.First().sah_pc + " - " + cl.First().mpc_desc,
           mi_cate_1 = cl.First().mi_cate_1 + " - " + cl.First().ric1_desc,
           mmct_sdesc = cl.First().mmct_sdesc,
           channel = cl.First().channel,
           mmct_scd = cl.First().mmct_scd,
           reversal = cl.Sum(a => a.reversal)
       }).ToList();

                datalist = datalist.OrderBy(a => a.channel).ToList();
                datalist = datalist.OrderBy(a => a.mi_cate_1).ToList();

                //string channel1 = "";
                string channel2 = "";

                foreach (var ab in groupchannel)
                {
                    channel2 = ab.channel;
                    if (channel2 != null && channel2 != "")
                    {
                        dt.Rows.Add(dr);
                        dr = dt.NewRow();
                        dr["Channel"] = channel2;

                        //string cat1 = "";
                        string cat2 = "";
                        var v = datalist.Where(c => c.channel == ab.channel).ToList();
                        foreach (var ab1 in v)
                        {
                            cat2 = ab1.mi_cate_1;

                            if (cat2 != null && cat2 != "")
                            {
                                dt.Rows.Add(dr);
                                dr = dt.NewRow();
                                dr["Category"] = cat2;

                                foreach (var desc in descriptionlist)
                                {
                                    if (desc == ab1.mmct_sdesc)
                                    {
                                        dr[desc] = ab1.reversal;
                                    }
                                }
                            }
                        }
                    }
                    #region channel wise category
                    //foreach (var ab in datalist)
                    //{
                    //    channel2 = ab.channel;

                    //    if ((channel2 != channel1) && (channel1 == ""))
                    //    {
                    //        dt.Rows.Add(dr);
                    //        dr = dt.NewRow();
                    //        dr["Channel"] = channel2;

                    //        string cat1 = "";
                    //        string cat2 = "";
                    //        var v = datalist.Where(c => c.channel == ab.channel).ToList();
                    //        foreach (var ab1 in v)
                    //        {
                    //            cat2 = ab1.mi_cate_1;

                    //            if (cat2 != cat1 && cat1 == "")
                    //            {
                    //                dt.Rows.Add(dr);
                    //                dr = dt.NewRow();
                    //                dr["Category"] = cat2;

                    //                foreach (var desc in descriptionlist)
                    //                {
                    //                    if (desc == ab1.mmct_sdesc)
                    //                    {
                    //                        dr[desc] = ab1.reversal;
                    //                    }
                    //                }
                    //            }
                    //            else if (cat2 == cat1)
                    //            {
                    //                foreach (var desc in descriptionlist)
                    //                {
                    //                    if (desc == ab1.mmct_sdesc)
                    //                    {
                    //                        dr[desc] = ab1.reversal;
                    //                    }
                    //                }
                    //            }
                    //            else if (cat2 != cat1 && cat1 != "")
                    //            {
                    //                dt.Rows.Add(dr);
                    //                dr = dt.NewRow();
                    //                dr["Category"] = cat2;
                    //                foreach (var desc in descriptionlist)
                    //                {
                    //                    if (desc == ab1.mmct_sdesc)
                    //                    {
                    //                        dr[desc] = ab1.reversal;
                    //                    }
                    //                }
                    //            }
                    //            else if (count1 == 1)
                    //            {
                    //                dt.Rows.Add(dr);
                    //            }
                    //            cat1 = ab1.mi_cate_1;
                    //        }
                    //    }
                    //    else if (channel2 == channel1)
                    //    {
                    //        string cat4 = "";
                    //        string cat3 = "";
                    //        var v = datalist.Where(c => c.channel == ab.channel).ToList();
                    //        foreach (var ab2 in v)
                    //        {
                    //            cat4 = ab2.mi_cate_1;
                    //            if (cat4 != cat3 && cat3 == "")
                    //            {
                    //                dt.Rows.Add(dr);
                    //                dr = dt.NewRow();
                    //                dr["Category"] = cat4;

                    //                foreach (var desc in descriptionlist)
                    //                {
                    //                    if (desc == ab.mmct_sdesc)
                    //                    {
                    //                        dr[desc] = ab.reversal;
                    //                    }
                    //                }
                    //            }
                    //            else if (cat4 == cat3)
                    //            {
                    //                foreach (var desc in descriptionlist)
                    //                {
                    //                    if (desc == ab.mmct_sdesc)
                    //                    {
                    //                        dr[desc] = ab.reversal;
                    //                    }
                    //                }
                    //            }
                    //            else if (cat4 != cat3 && cat3 != "")
                    //            {
                    //                dt.Rows.Add(dr);
                    //                dr = dt.NewRow();
                    //                dr["Category"] = cat4;
                    //                foreach (var desc in descriptionlist)
                    //                {
                    //                    if (desc == ab.mmct_sdesc)
                    //                    {
                    //                        dr[desc] = ab.reversal;
                    //                    }
                    //                }
                    //            }
                    //            cat3 = ab.mi_cate_1;
                    //        }
                    //    }
                    //    else if (channel2 != channel1 && channel1 != "")
                    //    {
                    //        dt.Rows.Add(dr);
                    //        dr = dt.NewRow();
                    //        dr["Channel"] = channel2;

                    //        string cat5 = "";
                    //        string cat6 = "";
                    //        var v = datalist.Where(c => c.channel == ab.channel).ToList();
                    //        foreach (var ab3 in v)
                    //        {
                    //            cat6 = ab3.mi_cate_1;
                    //            if (cat6 != cat5 && cat5 == "")
                    //            {
                    //                dt.Rows.Add(dr);
                    //                dr = dt.NewRow();
                    //                dr["Category"] = cat6;


                    //                foreach (var desc in descriptionlist)
                    //                {
                    //                    if (desc == ab.mmct_sdesc)
                    //                    {
                    //                        dr[desc] = ab.reversal;
                    //                    }
                    //                }
                    //            }
                    //            else if (cat6 == cat5)
                    //            {
                    //                dt.Rows.Add(dr);
                    //                dr = dt.NewRow();
                    //                dr["Category"] = cat6;
                    //                foreach (var desc in descriptionlist)
                    //                {
                    //                    if (desc == ab.mmct_sdesc)
                    //                    {
                    //                        dr[desc] = ab.reversal;
                    //                    }
                    //                }
                    //            }
                    //            else if (cat6 != cat5 && cat5 != "")
                    //            {
                    //                dt.Rows.Add(dr);
                    //                dr = dt.NewRow();
                    //                dr["Category"] = cat6;
                    //                foreach (var desc in descriptionlist)
                    //                {
                    //                    if (desc == ab.mmct_sdesc)
                    //                    {
                    //                        dr[desc] = ab.reversal;
                    //                    }
                    //                }
                    //            }
                    //            cat5 = ab.mi_cate_1;
                    //        }
                    //    }


                    //    channel1 = ab.sah_pc;

                    //}
                    #endregion channel wise category
                }
            }
            if (type == "bms_cat")
            {
                dt.Columns.Add("Category", typeof(string));
                foreach (var desc in descriptionlist)
                {
                    dt.Columns.Add(desc.ToString(), typeof(Int32));
                }
                //group by channel
                List<Ex_Rev_Data> groupcategory = datalist.GroupBy(l => new { l.mi_cate_1 })
       .Select(cl => new Ex_Rev_Data
       {
           mi_cate_1 = cl.First().mi_cate_1
       }).ToList();
                var count = 0;
                if (groupcategory != null)
                {
                    count = groupcategory.Count;
                }


                //group by categort,revdesc 
                datalist = datalist.GroupBy(l => new { l.mi_cate_1, l.mmct_sdesc })
       .Select(cl => new Ex_Rev_Data
       {
           mi_cate_1 = cl.First().mi_cate_1 + " - " + cl.First().ric1_desc,
           mmct_sdesc = cl.First().mmct_sdesc,
           reversal = cl.Sum(a => a.reversal)
       }).ToList();
                datalist = datalist.OrderBy(a => a.mi_cate_1).ToList();
                string category1 = "";
                string category2 = "";
                foreach (var li in datalist)
                {
                    category2 = li.mi_cate_1;

                    if (category2 != category1 && category1 == "")
                    {
                        //add 

                        dr["Category"] = category2;



                        foreach (var desc in descriptionlist)
                        {
                            if (desc == li.mmct_sdesc)
                            {
                                dr[desc] = li.reversal;
                            }
                        }

                    }
                    else if (category2 == category1)
                    {
                        foreach (var desc in descriptionlist)
                        {
                            if (desc == li.mmct_sdesc)
                            {
                                dr[desc] = li.reversal;
                            }
                        }
                    }
                    else if (category2 != category1 && category1 != "")
                    {
                        dt.Rows.Add(dr);
                        dr = dt.NewRow();
                        dr["Category"] = category2;
                        foreach (var desc in descriptionlist)
                        {
                            if (desc == li.mmct_sdesc)
                            {
                                dr[desc] = li.reversal;
                            }
                        }
                    }
                    else if (count == 1)
                    {
                        dt.Rows.Add(dr);
                    }
                    category1 = li.mi_cate_1;
                }
            }
            _err = string.Empty;
            string _filePath = string.Empty;
            DataTable TitleData = new DataTable();
            DataRow dataRow;
            DataColumn dataCol = new DataColumn();
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c1"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c2"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c3"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c4"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c5"; TitleData.Columns.Add(dataCol);
            dataCol = new DataColumn(); dataCol.DataType = System.Type.GetType("System.String"); dataCol.ColumnName = "c6"; TitleData.Columns.Add(dataCol);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "ABANS PLC"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow(); dataRow["c6"] = "Exchange Reversal Report"; TitleData.Rows.Add(dataRow);
            dataRow = TitleData.NewRow();
            dataRow["c1"] = "Date From :"; dataRow["c2"] = fromdate.ToString("dd/MMM/yyyy");
            dataRow["c4"] = "Date To :"; dataRow["c5"] = todate.ToString("dd/MMM/yyyy");
            TitleData.Rows.Add(dataRow);
            _err = "";
            _filePath = "";
            string comCode = string.Empty;
            if (selectedcompany.Count == 1)
            {
                foreach (string com in selectedcompany)
                {
                    comCode = com;
                }
            }
            _filePath = ExportExcel2007(comCode, userID, TitleData, dt, out _err);
            if (dt.Rows.Count == 0)
            {
                _err = "No Records Found.";
            }
            _path = _filePath;
            return dt;
        }
        public List<BarChartData> getPortAgentDetails(DateTime frmdt, DateTime toDt, List<string> company)
        {
            DashboardDal = new DashboardDLL();
            string comlst = string.Empty;
            Int32 cnt = 1;
            foreach (string cm in company)
            {
                comlst = comlst + ((cnt != company.Count) ? cm + "," : cm);
                cnt++;
            }
            return DashboardDal.getPortAgentDetails(frmdt, toDt, comlst);
        }
        public DataTable getAllRelatedPorts(DateTime frmdt, DateTime toDt, List<string> company)
        {
            DashboardDal = new DashboardDLL();
            string comlst = string.Empty;
            Int32 cnt = 1;
            foreach (string cm in company)
            {
                comlst = comlst + ((cnt != company.Count) ? cm + "," : cm);
                cnt++;
            }
            return DashboardDal.getAllRelatedPorts(frmdt, toDt, comlst);
        }
        public DataTable getAllRelatedAgents(DateTime frmdt, DateTime toDt, List<string> company)
        {
            DashboardDal = new DashboardDLL();
            string comlst = string.Empty;
            Int32 cnt = 1;
            foreach (string cm in company)
            {
                comlst = comlst + ((cnt != company.Count) ? cm + "," : cm);
                cnt++;
            }
            return DashboardDal.getAllRelatedAgents(frmdt, toDt, comlst);
        }
        public List<BarChartData> getFromPortData(DateTime fromdate, DateTime todate, List<string> company, string port = null, string agent = null)
        {
            DashboardDal = new DashboardDLL();
            string comlst = string.Empty;
            Int32 cnt = 1;
            foreach (string cm in company)
            {
                comlst = comlst + ((cnt != company.Count) ? cm + "," : cm);
                cnt++;
            }
            return DashboardDal.getFromPortData(fromdate, todate, comlst, port, agent);
        }
        public List<BarChartDataPort> getPortTotal(DateTime frmdt, DateTime toDt, List<string> company)
        {
            DashboardDal = new DashboardDLL();
            string comlst = string.Empty;
            Int32 cnt = 1;
            foreach (string cm in company)
            {
                comlst = comlst + ((cnt != company.Count) ? cm + "," : cm);
                cnt++;
            }
            return DashboardDal.getPortTotal(frmdt, toDt, comlst);
        }
        public List<BarChartDataAgent> getAgentTotal(DateTime frmdt, DateTime toDt, List<string> company)
        {
            DashboardDal = new DashboardDLL();
            string comlst = string.Empty;
            Int32 cnt = 1;
            foreach (string cm in company)
            {
                comlst = comlst + ((cnt != company.Count) ? cm + "," : cm);
                cnt++;
            }
            return DashboardDal.getAgentTotal(frmdt, toDt, comlst);
        }
        public DataTable getShipmentContainers(DateTime fromdate, DateTime todate, List<string> company, string port, string agent)
        {
            DashboardDal = new DashboardDLL();
            string comlst = string.Empty;
            Int32 cnt = 1;
            foreach (string cm in company)
            {
                comlst = comlst + ((cnt != company.Count) ? cm + "," : cm);
                cnt++;
            }
            return DashboardDal.getShipmentContainers(fromdate, todate, comlst, port, agent);
        }

        public DataTable getShipmentContainersByAgent(DateTime fromdate, DateTime todate, List<string> company, string port, string agent)
        {
            DashboardDal = new DashboardDLL();
            string comlst = string.Empty;
            Int32 cnt = 1;
            foreach (string cm in company)
            {
                comlst = comlst + ((cnt != company.Count) ? cm + "," : cm);
                cnt++;
            }
            return DashboardDal.getShipmentContainersByAgent(fromdate, todate, comlst, port, agent);
        }
        public List<CHANL_WISE_SALES> getDelSalesWithCate(string comlst, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, string filterby, string Category, out string error)
        {
            error = string.Empty;
            List<CHANL_WISE_SALES> delisales = new List<CHANL_WISE_SALES>();
            try
            {
                DateTime frmDt = fromdate;
                DateTime toDt = todate;
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                delisales = DashboardDal.getDelSalesWithCate(comlst, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, filterby, Category);

                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return delisales;
        }
        public List<CHANL_WISE_SALES> getDelSalesWithCateWithPre(string comlst, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, DateTime preFrmDt, DateTime preToDt, string filterby, string Category, out string error)
        {
            error = string.Empty;
            List<CHANL_WISE_SALES> delisales = new List<CHANL_WISE_SALES>();
            try
            {
                DateTime frmDt = fromdate;
                DateTime toDt = todate;
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                delisales = DashboardDal.getDelSalesWithCateWithPre(comlst, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, preFrmDt, preToDt, filterby, Category);

                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return delisales;
        }
        public List<CHANL_WISE_SALES> getSpecialCriSales(string comlst, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, string filterby, string Category, out string error)
        {
            error = string.Empty;
            List<CHANL_WISE_SALES> delisales = new List<CHANL_WISE_SALES>();
            try
            {
                DateTime frmDt = fromdate;
                DateTime toDt = todate;
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                delisales = DashboardDal.getSpecialCriSales(comlst, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, filterby, Category);

                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return delisales;
        }
        public List<CHANL_WISE_SALES> getSpecialCriSalesCate(string comlst, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, string filterby, string Category, out string error)
        {
            error = string.Empty;
            List<CHANL_WISE_SALES> delisales = new List<CHANL_WISE_SALES>();
            try
            {
                DateTime frmDt = fromdate;
                DateTime toDt = todate;
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                delisales = DashboardDal.getSpecialCriSalesCate(comlst, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, filterby, Category);

                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return delisales;
        }
        public List<CHANL_WISE_SALES> getSpecialCriSalesCatePY(string comlst, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, DateTime preFrmDt, DateTime preToDt, string filterby, string Category, out string error)
        {
            error = string.Empty;
            List<CHANL_WISE_SALES> delisales = new List<CHANL_WISE_SALES>();
            try
            {
                DateTime frmDt = fromdate;
                DateTime toDt = todate;
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                delisales = DashboardDal.getSpecialCriSalesCatePY(comlst, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, preFrmDt, preToDt, filterby, Category);

                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return delisales;
        }

        public List<CHANL_WISE_SALES> getSpecialCriSalesPyWithCate(string comlst, string Channel, string BrandMngr, string Brand, string txtModel, string txtItem, DateTime fromdate, DateTime todate, DateTime preFrmDt, DateTime preToDt, string filterby, string Category, out string error)
        {
            error = string.Empty;
            List<CHANL_WISE_SALES> delisales = new List<CHANL_WISE_SALES>();
            try
            {
                DateTime frmDt = fromdate;
                DateTime toDt = todate;
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                delisales = DashboardDal.getSpecialCriSalesPyWithCate(comlst, Channel, BrandMngr, Brand, txtModel, txtItem, frmDt, toDt, preFrmDt, preToDt, filterby, Category);

                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return delisales;
        }
        public DataTable getCostAnalysisData(string company, DateTime fromdt, DateTime todt, string type, out string error)
        {
            error = string.Empty;
            DataTable result = new DataTable("tbl");
            try
            {
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                result = DashboardDal.getCostAnalysisData(company, fromdt, todt, type);
                if (result.Rows.Count <= 0)
                {
                    error = "No data found for display.";
                }
                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            return result;
        }
        public DataTable getCostAnalysisDataSummery(string company, DateTime fromdt, DateTime todt, string type, out string error)
        {
            error = string.Empty;
            DataTable result = new DataTable("tbl");
            try
            {
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                result = DashboardDal.getCostAnalysisDataSummery(company, fromdt, todt, type);
                if (result.Rows.Count <= 0)
                {
                    error = "No data found for display.";
                }
                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
            }
            return result;
        }
        public List<MST_SEGMANT> getSegmantList(string pgeNum, string pgeSize, string searchFld, string searchVal)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSegmantList(pgeNum, pgeSize, searchFld, searchVal);
        }



        public List<BOND_BALANCE> getBondBalanceDetails(string userid, string brand, string cate1, string cate2, string cate3, string brandmanager, bool firsttimerun, out string error)
        {
            error = string.Empty;
            List<BOND_BALANCE> result = new List<BOND_BALANCE>();

            try
            {
                DashboardDal = new DashboardDLL();
                DashboardDal.ConnectionOpen();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                DataTable add = new DataTable();
                if (firsttimerun)
                {
                    add = DashboardDal.runBondBalanceDetails(userid);
                }
                if (brandmanager != "")
                {
                    DataTable brnddet = DashboardDal.getBrandMgrAlloc("ABL", brandmanager, cate1, brand);
                    //DataTable brnddetLRP = DashboardDal.getBrandMgrAlloc("LRP", brandmanager, cate1, brand);
                    //brnddet.Merge(brnddetLRP);
                    if (brnddet.Rows.Count > 0)
                    {
                        string managername = brnddet.Rows[0]["ESEP_NAME_INITIALS"].ToString();
                        foreach (DataRow fil in brnddet.Rows)
                        {
                            string brandcd = fil["MBA_BRND"].ToString();
                            string cat1 = fil["MBA_CA1"].ToString();
                            string cat2 = fil["MBA_CA2"].ToString();
                            string cat3 = fil["MBA_CA3"].ToString();
                            List<BOND_BALANCE> resultnew = DashboardDal.getBondBalanceDetails(brandcd, cat1, cat2, cat3, userid);
                            result.AddRange(resultnew);
                        }
                    }

                }
                else
                {
                    result = DashboardDal.getBondBalanceDetails(brand, cate1, cate2, cate3, userid);
                }

                if (result.Count <= 0)
                {
                    error = "No data found for display.";
                }
                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
                return result;
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }
        public string getLastRunTimeAlt(string code)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getLastRunTimeAlt(code);
        }
        //dilshan
        public List<SalesInventoryAge> getsalesinventoryage(string selectedcompany, DateTime fromdate, DateTime todate, string user, string status, out string error)
        {
            error = "";
            List<SalesInventoryAge> res = new List<SalesInventoryAge>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                res = DashboardDal.getsalesinventoryage(selectedcompany, fromdate, todate, user, status);

                //DashboardDal = new DashboardDLL();
                //DashboardDal.ConnectionOpen();
                //string comlst = string.Empty;
                //Int32 cnt = 1;
                //foreach (string cm in selectedcompany)
                //{
                //    comlst = comlst + ((cnt != selectedcompany.Count) ? cm + "," : cm);
                //    cnt++;
                //}
                //DataTable sales = DashboardDal.getsalesinventoryage(selectedcompany, fromdate, todate, user);
                //DashboardDal.ConnectionClose();
                ////return DashboardDal.getsalesinventoryage(selectedcompany, fromdate, todate, user);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return res;
        }

        //dilshan
        public List<GPAnalysis> getdeliveredsales(string selectedcompany, DateTime fromdate, DateTime todate, string user, string itemModel, string itemCode, string brand, string mainCat, string Category2, string filterby)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
            {
                DashboardDal.ConnectionOpen_DR();
            }
            List<GPAnalysis> resut = new List<GPAnalysis>();

            resut = DashboardDal.getdeliveredsales(selectedcompany, fromdate, todate, user, itemModel, itemCode, brand, mainCat, Category2, filterby);
            DashboardDal.ConnectionClose();
            return resut;
        }
        //dilshan
        public List<ITService> getitservicedetails(string selectedcompany, DateTime fromdate, DateTime todate, string user, string itemModel, string itemCode, string brand, string mainCat, string Category2, string filterby)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
            {
                DashboardDal.ConnectionOpen_DR();
            }
            List<ITService> resut = new List<ITService>();

            resut = DashboardDal.getitservicedetails(selectedcompany, fromdate, todate, user, itemModel, itemCode, brand, mainCat, Category2, filterby);
            DashboardDal.ConnectionClose();
            return resut;
        }
        public List<MST_CHNL_SEARH_HEAD> getSearchChannelList(string pgeNum, string pgeSize, string searchFld, string searchVal, string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSearchChannelList(pgeNum, pgeSize, searchFld, searchVal, company);
        }
        public List<MST_HIC_SEARH_HEAD> getSearchSubChannelList(string pgeNum, string pgeSize, string searchFld, string searchVal, string company, string chnl)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSearchSubChannelList(pgeNum, pgeSize, searchFld, searchVal, company, chnl);
        }
        public List<MST_HIC_SEARH_HEAD> getSearchAreaList(string pgeNum, string pgeSize, string searchFld, string searchVal, string company, string chnl, string schnl)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSearchAreaList(pgeNum, pgeSize, searchFld, searchVal, company, chnl, schnl);
        }
        public List<MST_HIC_SEARH_HEAD> getSearchRegionList(string pgeNum, string pgeSize, string searchFld, string searchVal, string company, string chnl, string schnl, string area)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSearchRegionList(pgeNum, pgeSize, searchFld, searchVal, company, chnl, schnl, area);
        }
        public List<MST_HIC_SEARH_HEAD> getSearchZoneList(string pgeNum, string pgeSize, string searchFld, string searchVal, string company, string chnl, string schnl, string area, string region)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSearchZoneList(pgeNum, pgeSize, searchFld, searchVal, company, chnl, schnl, area, region);
        }
        public List<MST_HIC_SEARH_HEAD> getSearchPCList(string pgeNum, string pgeSize, string searchFld, string searchVal, string company, string chnl, string schnl, string area, string region, string zone)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSearchPCList(pgeNum, pgeSize, searchFld, searchVal, company, chnl, schnl, area, region, zone);

        }
        public DataTable getInventoryTurnOverDetails(DateTime fromdt, DateTime todt, string stus, string company, Int32 col, out string error)
        {
            error = "";
            DataTable result = new DataTable();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                result = DashboardDal.getInventoryTurnOverDetails(fromdt, todt, stus, company, col);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }

        public DataTable getInventoryMonthEndBalance(DateTime fromdt, DateTime todt, string stus, string company, Int32 col, out string error)
        {
            error = "";
            DataTable result = new DataTable();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                result = DashboardDal.getInventoryMonthEndBalance(fromdt, todt, stus, company, col);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }
        public DataTable getInventoryAvgCost(DateTime fromdt, DateTime todt, string stus, string company, Int32 mntcnt, Int32 cnt, out string error)
        {
            error = "";
            DataTable result = new DataTable();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                result = DashboardDal.getInventoryAvgCost(fromdt, todt, stus, company, mntcnt, cnt);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }
        public DataTable getInventoryTurnOverDetailsAll(string comlst, string statusLst, DateTime fdt, DateTime tdt, bool withprevyr, string BrandMngr, string userid, out string error)
        {
            DataTable resulttable = new DataTable("tbl");
            try
            {
                error = "";
                resulttable.Columns.Add("Brand", typeof(string));
                resulttable.Columns.Add("Category", typeof(string));
                if (withprevyr == true)
                {
                    List<DateTime> dtmpyclm = GetMonthsBetween(fdt.AddYears(-1), tdt.AddDays(1).AddYears(-1));
                    foreach (DateTime fm in dtmpyclm)
                    {
                        resulttable.Columns.Add("QTY " + fm.ToString("MMM") + "'" + fm.ToString("yy"), typeof(decimal));
                        resulttable.Columns.Add("COST " + fm.ToString("MMM") + "'" + fm.ToString("yy"), typeof(decimal));
                        resulttable.Columns.Add("NET AMT " + fm.ToString("MMM") + "'" + fm.ToString("yy"), typeof(decimal));

                    }
                }

                List<DateTime> dtmclm = GetMonthsBetween(fdt, tdt.AddDays(1));
                foreach (DateTime fm in dtmclm)
                {
                    resulttable.Columns.Add("QTY " + fm.ToString("MMM") + "'" + fm.ToString("yy"), typeof(decimal));
                    resulttable.Columns.Add("COST " + fm.ToString("MMM") + "'" + fm.ToString("yy"), typeof(decimal));
                    resulttable.Columns.Add("NET AMT " + fm.ToString("MMM") + "'" + fm.ToString("yy"), typeof(decimal));
                }
                if (withprevyr == true)
                {
                    resulttable.Columns.Add("Inv As At " + tdt.AddYears(-1).ToString("dd/MMM/yyyy"), typeof(decimal));
                }
                resulttable.Columns.Add("Inv As At " + tdt.ToString("dd/MMM/yyyy"), typeof(decimal));

                if (withprevyr == true)
                {
                    resulttable.Columns.Add("TOT COST PY", typeof(decimal));
                    resulttable.Columns.Add("AVG COST PY", typeof(decimal));
                }

                resulttable.Columns.Add("TOT COST CY", typeof(decimal));
                resulttable.Columns.Add("AVG COST CY", typeof(decimal));

                if (withprevyr == true)
                {
                    resulttable.Columns.Add("Holding Period " + tdt.AddYears(-1).ToString("yyyy") + " (Months)", typeof(Int32));
                }
                resulttable.Columns.Add("Holding Period " + tdt.ToString("yyyy") + " (Months)", typeof(Int32));

                DataTable resulttableCopy = resulttable.Clone();
                Int32 col = 0;
                DataTable finresult = new DataTable("finres");
                DataTable finalList = new DataTable();
                List<DateTime> dtmpy = GetMonthsBetween(fdt.AddYears(-1), tdt.AddDays(1).AddYears(-1));
                if (dtmpy.Count > 12)
                {
                    error = "Maximum allowed 12 months only.";
                    return resulttable;
                }
                if (withprevyr == true)
                {

                    foreach (DateTime fm in dtmpy)
                    {
                        col++;
                        DateTime startdate = fm;
                        DateTime enddt = fm.AddMonths(1).AddDays(-1);
                        DataTable res = getInventoryTurnOverDetails(startdate, enddt, statusLst, comlst, col, out error);
                        if (error != "")
                        {
                            return resulttable;
                        }
                        if (finalList.Rows.Count > 0)
                        {
                            if (res.Rows.Count > 0)
                            {
                                finalList = mergeandGroup(finalList, res);
                            }
                        }
                        else
                        {
                            finalList = res;
                        }
                    }
                }
                List<DateTime> dtm = GetMonthsBetween(fdt, tdt.AddDays(1));

                foreach (DateTime fm in dtm)
                {
                    col++;
                    DateTime startdate = fm;
                    DateTime enddt = fm.AddMonths(1).AddDays(-1);
                    DataTable res = getInventoryTurnOverDetails(startdate, enddt, statusLst, comlst, col, out error);
                    if (error != "")
                    {
                        return resulttable;
                    }
                    if (finalList.Rows.Count > 0)
                    {
                        if (res.Rows.Count > 0)
                        {
                            finalList = mergeandGroup(finalList, res);
                        }
                    }
                    else
                    {
                        finalList = res;
                    }
                }

                if (withprevyr == true)
                {
                    DateTime frm = dtmpy.LastOrDefault();
                    DateTime to = frm.AddMonths(1).AddDays(-1);
                    DataTable resBal = getInventoryMonthEndBalance(frm, to, statusLst, comlst, 1, out error);
                    finalList = mergeandGroup(finalList, resBal);
                    if (error != "")
                    {
                        return resulttable;
                    }
                    //DateTime firstDt = dtmpy.First();
                    //DateTime endDt = dtmpy.Last().AddMonths(1).AddDays(-1);
                    //DataTable resBalAvg = getInventoryAvgCost(firstDt, endDt, statusLst, comlst, dtm.Count, 1, out error);
                    //finalList = mergeandGroup(finalList, resBalAvg);
                    //if (error != "")
                    //{
                    //    return resulttable;
                    //}
                }

                DateTime frmcy = dtm.LastOrDefault();
                DateTime tocy = frmcy.AddMonths(1).AddDays(-1);
                DataTable resBalcy = getInventoryMonthEndBalance(frmcy, tocy, statusLst, comlst, 2, out error);
                finalList = mergeandGroup(finalList, resBalcy);
                if (error != "")
                {
                    return resulttable;
                }
                //DateTime firstDtCy = dtm.First();
                //DateTime endDtCy = dtm.Last().AddMonths(1).AddDays(-1);
                //DataTable resBalAvgCy = getInventoryAvgCost(firstDtCy, endDtCy, statusLst, comlst, dtm.Count, 2, out error);
                //finalList = mergeandGroup(finalList, resBalAvgCy);

                //if (error != "")
                //{
                //    return resulttable;
                //}
                if (finalList.Rows.Count > 0)
                {
                    foreach (DataRow dr in finalList.Rows)
                    {
                        resulttable.Rows.Add(dr.ItemArray);
                    }
                }

                if (withprevyr == true)
                {


                    List<DateTime> dtmpyclm = GetMonthsBetween(fdt.AddYears(-1), tdt.AddDays(1).AddYears(-1));
                    foreach (DataRow dr in resulttable.Rows)
                    {
                        decimal totAvgCostPy = 0;

                        foreach (DateTime fm in dtmpyclm)
                        {
                            if (dr["COST " + fm.ToString("MMM") + "'" + fm.ToString("yy")] != DBNull.Value)
                            {
                                totAvgCostPy += Convert.ToDecimal(dr["COST " + fm.ToString("MMM") + "'" + fm.ToString("yy")].ToString());
                            }
                        }
                        dr.SetField("TOT COST PY", Math.Round(totAvgCostPy, 4));
                        dr.SetField("AVG COST PY", Math.Round(totAvgCostPy / dtmpyclm.Count, 4));
                    }
                }

                foreach (DataRow dr in resulttable.Rows)
                {
                    decimal totAvgCostCy = 0;
                    foreach (DateTime fm in dtmclm)
                    {
                        if (dr["COST " + fm.ToString("MMM") + "'" + fm.ToString("yy")] != DBNull.Value)
                        {
                            totAvgCostCy += Convert.ToDecimal(dr["COST " + fm.ToString("MMM") + "'" + fm.ToString("yy")].ToString());
                        }
                    }
                    dr.SetField("TOT COST CY", Math.Round(totAvgCostCy, 4));
                    dr.SetField("AVG COST CY", Math.Round(totAvgCostCy / dtmclm.Count, 4));
                }

                if (resulttable.Rows.Count > 0)
                {
                    foreach (DataRow dr in resulttable.Rows)
                    {
                        if (withprevyr == true)
                        {
                            if (dr["AVG COST PY"] != DBNull.Value && Convert.ToDecimal(dr["AVG COST PY"].ToString()) > 0)
                            {
                                dr.SetField("Holding Period " + tdt.AddYears(-1).ToString("yyyy") + " (Months)", Convert.ToInt32(Convert.ToDecimal(dr["Inv As At " + tdt.AddYears(-1).ToString("dd/MMM/yyyy")].ToString()) / Convert.ToDecimal(dr["AVG COST PY"].ToString())));
                            }
                            else
                            {
                                dr.SetField("Holding Period " + tdt.AddYears(-1).ToString("yyyy") + " (Months)", "0");
                            }
                        }
                        if (dr["AVG COST CY"] != DBNull.Value && Convert.ToDecimal(dr["AVG COST CY"].ToString()) > 0)
                        {
                            dr.SetField("Holding Period " + tdt.ToString("yyyy") + " (Months)", Convert.ToInt32(Convert.ToDecimal(dr["Inv As At " + tdt.ToString("dd/MMM/yyyy")].ToString()) / Convert.ToDecimal(dr["AVG COST CY"].ToString())));
                        }
                        else
                        {
                            dr.SetField("Holding Period " + tdt.ToString("yyyy") + " (Months)", "0");
                        }
                    }

                    if (BrandMngr != "")
                    {
                        DataTable brnddet = DashboardDal.getBrandMgrAlloc(comlst, BrandMngr, "", "");

                        if (brnddet.Rows.Count > 0)
                        {
                            string managername = brnddet.Rows[0]["ESEP_NAME_INITIALS"].ToString();

                            foreach (DataRow fil in brnddet.Rows)
                            {
                                string brandcd = fil["MBA_BRND"].ToString();
                                string cat1 = fil["MBA_CA1"].ToString();
                                if (brandcd != "" && cat1 == "")
                                {
                                    IEnumerable<DataRow> results = from myRow in resulttable.AsEnumerable()
                                                                   where myRow.Field<string>("Brand") == brandcd
                                                                   select myRow;
                                    resulttableCopy = results.CopyToDataTable<DataRow>();
                                }
                                else if (brandcd == "" && cat1 != "")
                                {
                                    IEnumerable<DataRow> results = from myRow in resulttable.AsEnumerable()
                                                                   where myRow.Field<string>("Category") == cat1
                                                                   select myRow;
                                    resulttableCopy = results.CopyToDataTable<DataRow>();
                                }
                                else
                                {
                                    IEnumerable<DataRow> results = from myRow in resulttable.AsEnumerable()
                                                                   where myRow.Field<string>("Category") == cat1 && myRow.Field<string>("Brand") == brandcd
                                                                   select myRow;
                                    resulttableCopy = results.CopyToDataTable<DataRow>();
                                }

                            }

                        }
                        resulttable = resulttableCopy;
                        resulttable.TableName = "tbl";
                    }
                }
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }

            DataTable TitleData = new DataTable();
            DataRow dataRow;

            string _err = "";
            string _filePath = "";
            _filePath = ExportExcel2007(comlst, "Inventory turn over -" + userid, TitleData, resulttable, out _err);
            if (resulttable.Rows.Count == 0)
            {
                error = "No Records Found.";
            }
            return resulttable;
        }
        public static List<DateTime> GetMonthsBetween(DateTime from, DateTime to)
        {
            if (from > to) return GetMonthsBetween(to, from);

            var monthDiff = Math.Abs((to.Year * 12 + (to.Month - 1)) - (from.Year * 12 + (from.Month - 1)));

            if (from.AddMonths(monthDiff) > to || to.Day < from.Day)
            {
                monthDiff -= 1;
            }

            List<DateTime> results = new List<DateTime>();
            for (int i = monthDiff; i >= 1; i--)
            {
                results.Add(to.AddMonths(-i));
            }

            return results;
        }
        public DataTable mergeandGroup(DataTable table1, DataTable table2)
        {
            DataTable finalTable = new DataTable();
            table1.Merge(table2, false, MissingSchemaAction.Add);
            finalTable = table1.Clone();
            finalTable.PrimaryKey = new DataColumn[] { finalTable.Columns["BRAND"], finalTable.Columns["CATEGORY"] };
            List<string> columnNames = new List<string>();
            for (int colIndex = 2; colIndex < finalTable.Columns.Count; colIndex++)
            {
                columnNames.Add(finalTable.Columns[colIndex].ColumnName);
            }
            foreach (string cols in columnNames)
            {
                var temTable = new DataTable();
                temTable.Columns.Add("BRAND", typeof(string));
                temTable.Columns.Add("CATEGORY", typeof(string));
                temTable.Columns.Add(cols, typeof(decimal));

                (from row in table1.AsEnumerable()
                 group row by new { BRAND = row.Field<string>("BRAND"), CATEGORY = row.Field<string>("CATEGORY") } into grp
                 orderby grp.Key.BRAND
                 select new
                 {
                     ID = grp.Key.BRAND,
                     Name = grp.Key.CATEGORY,
                     cols = grp.Sum(r => r.Field<decimal?>(cols)),
                 })
                .Aggregate(temTable, (dt, r) => { dt.Rows.Add(r.ID, r.Name, r.cols); return dt; });

                finalTable.Merge(temTable, false, MissingSchemaAction.Ignore);
            }
            return finalTable;
        }
        public List<BOND_BALANCE_AAL> getBondBalanceDetailsAAL(string userid, out string error)
        {
            error = string.Empty;
            List<BOND_BALANCE_AAL> bal = new List<BOND_BALANCE_AAL>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();

                if (_securityDAL.Is_Report_DR("BI_CHNL_WISE_SALES") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                bal = DashboardDal.getBondBalanceDetailsAAL(userid);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return bal;
        }
        public static DataTable ListToDataTable<T>(List<T> list)
        {
            DataTable dt = new DataTable();

            foreach (PropertyInfo info in typeof(T).GetProperties())
            {
                dt.Columns.Add(new DataColumn(info.Name, GetNullableType(info.PropertyType)));
            }
            foreach (T t in list)
            {
                DataRow row = dt.NewRow();
                foreach (PropertyInfo info in typeof(T).GetProperties())
                {
                    if (!IsNullableType(info.PropertyType))
                        row[info.Name] = info.GetValue(t, null);
                    else
                        row[info.Name] = (info.GetValue(t, null) ?? DBNull.Value);
                }
                dt.Rows.Add(row);
            }
            return dt;
        }
        public static Type GetNullableType(Type t)
        {
            Type returnType = t;
            if (t.IsGenericType && t.GetGenericTypeDefinition().Equals(typeof(Nullable<>)))
            {
                returnType = Nullable.GetUnderlyingType(t);
            }
            return returnType;
        }
        private static bool IsNullableType(Type type)
        {
            return (type == typeof(string) ||
                    type.IsArray ||
                    (type.IsGenericType &&
                     type.GetGenericTypeDefinition().Equals(typeof(Nullable<>))));
        }
        public List<MST_HIC_SEARH_HEAD> getRelatedPclist(string pgeNum, string pgeSize, string searchFld, string searchVal, string channel, string company, string userId)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();
            _securityDAL.ConnectionOpen();
            Int32 haspcper = _securityDAL.getUserSpecialPermission(userId.ToUpper(), company, "PRFRPTALPC");
            return DashboardDal.getRelatedPclist(pgeNum, pgeSize, searchFld, searchVal, company, channel, userId, haspcper);
        }
        public List<GLB_PROFITABILITY> getProfitabilityData(DateTime frm, DateTime to, DateTime frmpy, DateTime topy, string channel, List<SELECTED_PC> pc, string cate, string com, string user, out string error)
        {

            error = "";
            List<GLB_PROFITABILITY> result = new List<GLB_PROFITABILITY>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                DashboardDal.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BI_BUDGET") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                DashboardDal.BeginTransaction();
                Int32 rem = DashboardDal.rempveTemporyParameters(user, "PROFDATA");
                if (pc != null && pc.Count > 0)
                {
                    foreach (SELECTED_PC c in pc)
                    {
                        Int32 addPc = DashboardDal.addTemporyParameters(user, "PC", "PROFDATA", c.MSC_CD);
                    }
                }
                else
                {
                    _securityDAL = new SecurityDAL();
                    _securityDAL.ConnectionOpen();
                    Int32 haspcper = _securityDAL.getUserSpecialPermission(user.ToUpper(), com, "PRFRPTALPC");
                    if (haspcper == 0)
                    {
                        Int32 addPc = DashboardDal.addTUserProfitCenters(user, "PC", "PROFDATA", channel, com);
                    }
                }
                result = DashboardDal.getProfitabilityData(frm, to, frmpy, topy, channel, "", cate, com, user);
                decimal stock = DashboardDal.getStockDeTAILS(frm, to, frmpy, topy, channel, cate, com, user);
                GLB_PROFITABILITY itm = new GLB_PROFITABILITY();
                itm.HED_DESC = "Total Stock value";
                itm.HED_ORDER = result.Max(x => x.HED_ORDER) + 1;
                itm.HED_CD = "TOT";
                itm.GRP_DESC = "Total Stock value";
                itm.GRP_CD = "TOT";
                itm.GRP_ORDER = result.Max(x => x.GRP_ORDER) + 1;
                itm.ACTUAL = stock;
                result.Add(itm);
                DataTable debt = DashboardDal.getDebtDTAILS(frm, to, frmpy, topy, channel, cate, com, user);
                if (debt.Rows.Count > 0)
                {
                    GLB_PROFITABILITY itmd = new GLB_PROFITABILITY();
                    itmd.HED_DESC = "Total HP Receivable";
                    itmd.HED_ORDER = result.Max(x => x.HED_ORDER) + 1;
                    itmd.HED_CD = "TOTDEBT";
                    itmd.GRP_DESC = "Total HP Receivable";
                    itmd.GRP_CD = "TOTDEBT";
                    itmd.GRP_ORDER = result.Max(x => x.GRP_ORDER) + 1;
                    itmd.ACTUAL = (debt.Rows[0]["COST"] != DBNull.Value) ? Convert.ToDecimal(debt.Rows[0]["COST"].ToString()) : 0;
                    result.Add(itmd);

                    GLB_PROFITABILITY itmA = new GLB_PROFITABILITY();
                    itmA.HED_DESC = "Total HP Arreas";
                    itmA.HED_ORDER = result.Max(x => x.HED_ORDER) + 1;
                    itmA.HED_CD = "TOTARR";
                    itmA.GRP_DESC = "Total HP Arreas";
                    itmA.GRP_CD = "TOTARR";
                    itmA.GRP_ORDER = result.Max(x => x.GRP_ORDER) + 1;
                    itmA.ACTUAL = (debt.Rows[0]["ARREARS"] != DBNull.Value) ? Convert.ToDecimal(debt.Rows[0]["ARREARS"].ToString()) : 0;
                    result.Add(itmA);
                }
                DashboardDal.TransactionCommit();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }
        public List<GLB_PROFITABILITY> getProfitabilityDetails(DateTime frm, DateTime to, DateTime frmpy, DateTime topy, string channel, List<SELECTED_PC> pc, string cate, string com, string user, Int32 headid, Int32 groupid, out string error)
        {
            error = "";
            List<GLB_PROFITABILITY> result = new List<GLB_PROFITABILITY>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                DashboardDal.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BI_BUDGET") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                DashboardDal.BeginTransaction();
                Int32 rem = DashboardDal.rempveTemporyParameters(user, "PROFDATA");
                if (pc != null && pc.Count > 0)
                {
                    foreach (SELECTED_PC c in pc)
                    {
                        Int32 addPc = DashboardDal.addTemporyParameters(user, "PC", "PROFDATA", c.MSC_CD);
                    }
                }
                else
                {
                    _securityDAL = new SecurityDAL();
                    _securityDAL.ConnectionOpen();
                    Int32 haspcper = _securityDAL.getUserSpecialPermission(user.ToUpper(), com, "PRFRPTALPC");
                    if (haspcper == 0)
                    {
                        Int32 addPc = DashboardDal.addTUserProfitCenters(user, "PC", "PROFDATA", channel, com);
                    }
                }
                result = DashboardDal.getProfitabilityDetails(frm, to, frmpy, topy, channel, "", cate, com, user, headid, groupid);
                DashboardDal.TransactionCommit();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }


        //Dulaj Mar 27 2018
        public List<CUSTOMER_SALES> getCustomerDetails(string selectedcompany, string Channel, string Subchnl, string Area, string Region, string Zone, string pc, DateTime SalesFrom, DateTime SalesTo, string Brand, string MainCat, string txtModel, string txtItem, decimal CheckAmount, string filterby, string cat2, string cat3, Int32 visit, string age, string salary, string customer, string invtype, string schemetype, string schemecode, string CTown, string PTown, string BankCode, string Withserial, string Paymenttype, string user, string dist, string prov, string CheckMobile)
        {
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CUSTOMERINVOICE_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                string company = selectedcompany;//[0];
                if (Channel != "" || Subchnl != "" || Area != "" || Region != "" || Zone != "")
                {
                    DataTable pcDet = DashboardDal.getCustomerSalesPcList(company, Channel, Subchnl, Area, Region, Zone, pc, user);
                }
                //List<List<DataRow>> table = SplitDataTable(pcDet, 300);
                List<CUSTOMER_SALES> finaldt = new List<CUSTOMER_SALES>();
                //foreach (List<DataRow> lstrow in table)
                //{
                List<CUSTOMER_SALES> cusInvDet = new List<CUSTOMER_SALES>();
                Int32 cnt = 1;
                string pclst = "";
                //foreach (DataRow row in lstrow)
                //{
                //    pclst = pclst + ((cnt != pcDet.Rows.Count) ? row["mpi_pc_cd"].ToString() + "," : row["mpi_pc_cd"].ToString());
                //    cnt++;
                //}
                //pclst = pclst.Remove(pclst.Length - 1);
                cusInvDet = DashboardDal.getCustomerDetails(SalesFrom, SalesTo, CheckAmount, company, pc, MainCat, Brand, txtModel, txtItem, filterby, cat2, cat3, visit, age, salary, customer, invtype, schemetype, schemecode, CTown, PTown, BankCode, Withserial, Paymenttype, Channel, Subchnl, Area, Region, Zone, pc, user, dist, prov, CheckMobile);
                finaldt.AddRange(cusInvDet);
                //}
                return finaldt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<CUSTOMER_SALES> getInvDetails(string selectedcompany, string Channel, string Subchnl, string Area, string Region, string Zone, string pc, DateTime SalesFrom, DateTime SalesTo, string Brand, string MainCat, string txtModel, string txtItem, decimal CheckAmount, string filterby, string cat2, string cat3, Int32 visit, string age, string salary, string customer, string invtype, string schemetype, string schemecode, string CTown, string PTown, string BankCode, string Withserial, string Paymenttype, string user, string dist, string prov)
        {
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                if (_securityDAL.Is_Report_DR("BI_CUSTOMERINVOICE_DTL") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                string company = selectedcompany;//[0];
                if (Channel != "" || Subchnl != "" || Area != "" || Region != "" || Zone != "")
                {
                    DataTable pcDet = DashboardDal.getCustomerSalesPcList(company, Channel, Subchnl, Area, Region, Zone, pc, user);
                }
                //List<List<DataRow>> table = SplitDataTable(pcDet, 300);
                List<CUSTOMER_SALES> finaldt = new List<CUSTOMER_SALES>();
                //foreach (List<DataRow> lstrow in table)
                //{
                List<CUSTOMER_SALES> cusInvDet = new List<CUSTOMER_SALES>();
                Int32 cnt = 1;
                string pclst = "";
                //foreach (DataRow row in lstrow)
                //{
                //    pclst = pclst + ((cnt != pcDet.Rows.Count) ? row["mpi_pc_cd"].ToString() + "," : row["mpi_pc_cd"].ToString());
                //    cnt++;
                //}
                //pclst = pclst.Remove(pclst.Length - 1);
                cusInvDet = DashboardDal.getInvDetails(SalesFrom, SalesTo, CheckAmount, company, pc, MainCat, Brand, txtModel, txtItem, filterby, cat2, cat3, visit, age, salary, customer, invtype, schemetype, schemecode, CTown, PTown, BankCode, Withserial, Paymenttype, Channel, Subchnl, Area, Region, Zone, pc, user, dist, prov);
                finaldt.AddRange(cusInvDet);
                //}
                return finaldt;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        //Dilshan 2017-12-06
        public List<USR_DEF_TEMP> getUsrTemplate(string pgeNum, string pgeSize, string searchFld, string searchVal, string company, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getUsrTemplate(pgeNum, pgeSize, searchFld, searchVal, company, type);
        }
        //Nuwan 2018.05.03 
        public List<GLB_PROFITABILITY> getProfitabilityPcDetails(DateTime frm, DateTime to, DateTime frmpy, DateTime topy, string channel, List<SELECTED_PC> pc, string cate, string com, string user, Int32 headid, Int32 groupid, Int32 eleid, out string error)
        {
            error = "";
            List<GLB_PROFITABILITY> result = new List<GLB_PROFITABILITY>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                DashboardDal.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BI_BUDGET") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                DashboardDal.BeginTransaction();
                Int32 rem = DashboardDal.rempveTemporyParameters(user, "PROFDATA");
                if (pc != null && pc.Count > 0)
                {
                    foreach (SELECTED_PC c in pc)
                    {
                        Int32 addPc = DashboardDal.addTemporyParameters(user, "PC", "PROFDATA", c.MSC_CD);
                    }
                }
                else
                {
                    _securityDAL = new SecurityDAL();
                    _securityDAL.ConnectionOpen();
                    Int32 haspcper = _securityDAL.getUserSpecialPermission(user.ToUpper(), com, "PRFRPTALPC");
                    if (haspcper == 0)
                    {
                        Int32 addPc = DashboardDal.addTUserProfitCenters(user, "PC", "PROFDATA", channel, com);
                    }
                }
                result = DashboardDal.getProfitabilityPcDetails(frm, to, frmpy, topy, channel, "", cate, com, user, headid, groupid, eleid);
                DashboardDal.TransactionCommit();
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }


        // Hushani 2018-06-08
        public DataTable GetHeroIntColors(string _type, string _cat1, string _cat2, string _brand)
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GetHeroIntColors(_type, _cat1, _cat2, _brand);
            _financialDAL.ConnectionClose();
            return _dt;
        }
        //dilshan 2018/06/14
        public DataTable getInventorySerialAge(string _cat1, string _brnd, string locHircCd, string locHircDesc, string status, string type, string model, string itemCd, string company, string inclution, bool cate1, bool cate2, bool cate3, string brandMngr, bool stus, string column, List<BRND_NEW_STUS> stusForTyp, string agefrom, string ageto, string agefromto)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SerialAge") == true) DashboardDal.ConnectionOpen_DR();
            return DashboardDal.getInventorySerialAge(_cat1, _brnd, locHircCd, locHircDesc, status, type, model, itemCd, company, inclution, cate1, cate2, cate3, brandMngr, stus, column, stusForTyp, agefrom, ageto, agefromto);
        }
        //dilshan 2018/06/14
        public DataTable getInventorySerialAgeHeading(string column, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getInventorySerialAgeHeading(column, type);
        }
        public DataTable getInventorySerialAgeHeadingCol(string column, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getInventorySerialAgeHeadingCol(column, type);
        }
        public DataTable getImportSerialAgeHeading(string column, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getImportSerialAgeHeading(column, type);
        }
        public DataTable getImportSerialAgeHeadingCol(string column, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getImportSerialAgeHeadingCol(column, type);
        }

        public DataTable getInventorySerialAgeAsAt(string _cat1, string _brnd, string locHircCd, string locHircDesc, string status, string type, string model, string itemCd, string company, string inclution, bool cate1, bool cate2, bool cate3, string brandMngr, bool stus, string column, List<BRND_NEW_STUS> stusForTyp, DateTime asAtDtStrng, string agefrom, string ageto, string agefromto, DateTime asAtDtStrngfrom, DateTime asAtDtStrngto, string userId)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            _securityDAL.ConnectionOpen();
            DashboardDal.ConnectionOpen();

            Int32 rem = DashboardDal.rempveTemporyParameters(userId, "INTSER");
            foreach (BRND_NEW_STUS statu in stusForTyp)
            {
                Int32 addStatus = DashboardDal.addTemporyParameters(userId, "STUS", "INTSER", statu.itm_stus_cd);
            }

            if (_securityDAL.Is_Report_DR("SerialAgeAsat") == true) DashboardDal.ConnectionOpen_DR();
            return DashboardDal.getInventorySerialAgeAsAt(_cat1, _brnd, locHircCd, locHircDesc, status, type, model, itemCd, company, inclution, cate1, cate2, cate3, brandMngr, stus, column, stusForTyp, asAtDtStrng, agefrom, ageto, agefromto, asAtDtStrngfrom, asAtDtStrngto, userId);
        }
        public DataTable getImportSerialAgeAsAt(string _cat1, string _brnd, string locHircCd, string locHircDesc, string status, string type, string model, string itemCd, string company, string inclution, bool cate1, bool cate2, bool cate3, string brandMngr, bool stus, string column, List<BRND_NEW_STUS> stusForTyp, string asAtDtStrng, string asAtDtfrom, string asAtDtto, string grnno, string tobondno, string serialno, string userId)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            _securityDAL.ConnectionOpen();
            DashboardDal.ConnectionOpen();

            Int32 rem = DashboardDal.rempveTemporyParameters(userId, "GRNSER");
            foreach (BRND_NEW_STUS statu in stusForTyp)
            {
                Int32 addStatus = DashboardDal.addTemporyParameters(userId, "STUS", "GRNSER", statu.itm_stus_cd);
            }


            if (_securityDAL.Is_Report_DR("ImportSerialAsat") == true) DashboardDal.ConnectionOpen_DR();
            return DashboardDal.getImportSerialAgeAsAt(_cat1, _brnd, locHircCd, locHircDesc, status, type, model, itemCd, company, inclution, cate1, cate2, cate3, brandMngr, stus, column, stusForTyp, asAtDtStrng, asAtDtfrom, asAtDtto, grnno, tobondno, serialno, userId);
        }
        public List<GV_SEARCH_HEAD> GetItemByType(string pgeNum, string pgeSize, string searchFld, string searchVal, string company, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.GetItemByType(pgeNum, pgeSize, searchFld, searchVal, company, type);
        }
        public Int16 UpdateAutoNumber(MasterAutoNumber _masterAutoNumber, Int32 number)
        {

            DashboardDal = new DashboardDLL();
            DashboardDal.ConnectionOpen();
            return DashboardDal.UpdateAutoNumber(_masterAutoNumber, number);
        }

        //Pasindu 2018/07/11
        public List<INVOICE_MAIN_TYPE> getInvoiceTypesMainTp()
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getInvoiceTypesMainTp();
        }

        //Pasindu 2018/07/12
        public List<MAIN_CAT2_SEARCH> getCategorySubSearch(string pgeNum, string pgeSize, string searchFld, string searchVal, string cate)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getCategorySubSearch(pgeNum, pgeSize, searchFld, searchVal, cate);
        }

        //Pasindu 2018/07/16
        public List<SEARCH_FAST_MOVING_DET> getFMIDetails(string p_company, DateTime p_fromdate, DateTime p_todate, DateTime p_prev_fromdate, DateTime p_prev_todate, DateTime p_fromasat,
            string p_chanel, string p_subchanel, string p_region, string p_brandmanager, string p_maincat, string p_subcat, string p_brand, string p_invoicetype)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("FastMoving") == true)
                DashboardDal.ConnectionOpen_DR();


            DateTime tempdate = new DateTime(p_fromdate.Year, p_fromdate.Month, 1).AddMonths(1).AddDays(-1);
            int i = 0;
            List<SEARCH_FAST_MOVING_DET> tempdetails = new List<SEARCH_FAST_MOVING_DET>();
            List<SEARCH_FAST_MOVING_DET> finaldetails = new List<SEARCH_FAST_MOVING_DET>();
            List<SEARCH_FAST_MOVING_DET> _InventoryDetails = new List<SEARCH_FAST_MOVING_DET>();
            List<SEARCH_FAST_MOVING_DET> _InventoryDetailsPURD = new List<SEARCH_FAST_MOVING_DET>();
            List<SEARCH_FAST_MOVING_DET> FinalList = new List<SEARCH_FAST_MOVING_DET>();
            //getFMIDetailsArrivalOP(checkcom, Convert.ToDateTime("25/Mar/2017"));

            //Details month by month

            while (tempdate < p_todate)
            {


                if (tempdate <= p_todate)
                {
                    tempdetails = DashboardDal.getFMIDetails(p_company, p_fromdate, tempdate);
                    finaldetails.AddRange(tempdetails);
                    tempdetails = DashboardDal.getFMIDetailsPRV(p_company, p_fromdate.AddYears(-1), tempdate.AddYears(-1));
                    finaldetails.AddRange(tempdetails);
                    //add by tharanga2018/12/17
                    tempdetails = DashboardDal.getFMIDetailsPRVN(p_company, p_fromdate.AddYears(-1), tempdate.AddYears(-1));
                    finaldetails.AddRange(tempdetails);

                    p_fromdate = tempdate.AddDays(1);
                }
                tempdate = p_fromdate.AddMonths(1).AddDays(-1);
            }

            tempdetails = DashboardDal.getFMIDetails(p_company, p_fromdate, p_todate);
            finaldetails.AddRange(tempdetails);
            tempdetails = DashboardDal.getFMIDetailsPRV(p_company, p_fromdate.AddYears(-1), tempdate.AddYears(-1));
            finaldetails.AddRange(tempdetails);
            //add by tharanga2018/12/17
            tempdetails = DashboardDal.getFMIDetailsPRVN(p_company, p_fromdate.AddYears(-1), p_todate.AddYears(-1));
            finaldetails.AddRange(tempdetails);

            _InventoryDetails = getFMIDetailsArrivalOP(p_company, Convert.ToDateTime("25/Mar/2017"));
            _InventoryDetailsPURD = getFMIDetailsPURD(p_company, Convert.ToDateTime("25/Mar/2017"));
            //_InventoryDetails.AddRange(_InventoryDetailsPURD);


            //List<SEARCH_FAST_MOVING_DET> finaldetailscopy = new List<SEARCH_FAST_MOVING_DET>();
            //var finald = from x in finaldetails
            //                   join y in _InventoryDetails
            //                      on x.fmi_itm equals y.fmi_itm
            //             select new {
            //                 x.fmi_m1_newarr,

            //                 x.fmi_m1_newarr= y.fmi_m1_newarr 


            _InventoryDetails = _InventoryDetails
                                .GroupBy(u => new { u.fmi_itm })
                                .Select(cl => new SEARCH_FAST_MOVING_DET
            {
                fmi_stckinh = cl.Sum(a => decimal.Parse(a.fmi_stckinh.ToString())),
                fmi_m1_newarr = cl.Sum(a => decimal.Parse(a.fmi_m1_newarr.ToString())),
                fmi_m2_newarr = cl.Sum(a => decimal.Parse(a.fmi_m2_newarr.ToString())),
                fmi_m3_newarr = cl.Sum(a => decimal.Parse(a.fmi_m3_newarr.ToString())),
                fmi_preyr_daterange = cl.Sum(a => decimal.Parse(a.fmi_preyr_daterange.ToString())),
                fmi_itm = cl.First().fmi_itm
               
            }).ToList();


            //var asdasd = (from list1 in tempdetails
            //              join list2 in _InventoryDetailsPURD
            //                  on list1.fmi_itm equals list2.fmi_itm
            //                          where list1.fmi_itm == list2.fmi_itm
            //                          select finaldetails);

            finaldetails.AddRange(_InventoryDetails);
            finaldetails = finaldetails
                                            .GroupBy(u => new { u.fmi_itm })
                                            .Select(cl => new SEARCH_FAST_MOVING_DET
                {
                    fmi_brnd = cl.First().fmi_brnd,
                    fmi_des = cl.First().fmi_des,
                    fmi_abc = cl.First().fmi_abc,
                    fmi_main_cat = cl.First().fmi_main_cat,
                    fmi_prv_yr = cl.Sum(a => decimal.Parse(a.fmi_prv_yr.ToString())),
                    fmi_sold_qty = cl.Sum(a => a.fmi_sold_qty),
                    fmi_val = cl.Sum(a => decimal.Parse(a.fmi_val.ToString())),
                    fmi_model = cl.First().fmi_model,
                    fmi_itm = cl.First().fmi_itm,
                    fmi_m1_newarr = cl.Sum(a => decimal.Parse(a.fmi_m1_newarr.ToString())),
                    fmi_m2_newarr = cl.Sum(a => decimal.Parse(a.fmi_m2_newarr.ToString())),
                    fmi_m3_newarr = cl.Sum(a => decimal.Parse(a.fmi_m3_newarr.ToString())),
                    fmi_do_location = cl.First().fmi_do_location,
                    fmi_p_chnl = cl.First().fmi_p_chnl,
                    fmi_p_subchnl = cl.First().fmi_p_subchnl,
                    fmi_p_inv_type = cl.First().fmi_p_inv_type,
                    mb_desc = cl.First().mb_desc,
                    ric1_desc = cl.First().ric1_desc,
                  
                    fmi_preyr_daterange = cl.Sum(a => decimal.Parse(a.fmi_preyr_daterange.ToString()))
                }).ToList();


            finaldetails = (from aa in finaldetails where aa.fmi_model != null && aa.fmi_model != "" select aa).ToList();
            //tempdetails = asdasd.ToList();

            //foreach (SEARCH_FAST_MOVING_DET item in _InventoryDetails)
            //{
            //    List<SEARCH_FAST_MOVING_DET> invdet = (from aa in finaldetails where aa.fmi_itm == item.fmi_itm select aa).ToList();

            //    if (invdet.Count > 0)
            //    {

            //        foreach (SEARCH_FAST_MOVING_DET it in invdet) {
            //            SEARCH_FAST_MOVING_DET FinItem = new SEARCH_FAST_MOVING_DET();
            //            it.fmi_abc = it.fmi_abc;
            //            it.fmi_m1_newarr = item.fmi_m1_newarr;
            //            it.fmi_m2_newarr = item.fmi_m2_newarr;
            //            it.fmi_m3_newarr = item.fmi_m3_newarr;
            //            it.fmi_stckinh = item.fmi_stckinh;
            //            it.fmi_brnd = it.fmi_brnd;
            //            it.fmi_brnd_manager = it.fmi_brnd_manager;
            //            it.fmi_des = it.fmi_des;
            //            it.fmi_main_cat = it.fmi_main_cat;
            //            it.fmi_prv_yr = it.fmi_prv_yr;
            //            it.fmi_sold_qty = it.fmi_sold_qty;
            //            it.fmi_val = it.fmi_val;
            //            it.fmi_model = it.fmi_model;
            //            it.fmi_do_location = it.fmi_do_location;
            //            it.fmi_p_chnl = it.fmi_p_chnl;
            //            it.fmi_p_subchnl = it.fmi_p_subchnl;
            //            it.fmi_p_inv_type = it.fmi_p_inv_type;
            //            it.fmi_itm = it.fmi_itm;

            //        }

            //    }
            //    else{

            //    }
            //}

            if (!string.IsNullOrEmpty(p_chanel))
            {
                finaldetails = (from aa in finaldetails where aa.fmi_p_chnl == p_chanel select aa).ToList();

            }

            if (!string.IsNullOrEmpty(p_subchanel))
            {
                finaldetails = (from aa in finaldetails where aa.fmi_p_subchnl == p_subchanel select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_region))
            {
                finaldetails = (from aa in finaldetails where aa.fmi_p_regn == p_region select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_brandmanager))
            {
                finaldetails = (from aa in finaldetails where aa.fmi_brnd_manager == p_brandmanager select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_maincat))
            {
                finaldetails = (from aa in finaldetails where aa.fmi_main_cat == p_maincat select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_subcat))
            {
                finaldetails = (from aa in finaldetails where aa.fmi_subcat == p_subcat select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_brand))
            {
                finaldetails = (from aa in finaldetails where aa.fmi_brnd == p_brand select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_invoicetype))
            {
                finaldetails = (from aa in finaldetails where aa.fmi_p_inv_type == p_invoicetype select aa).ToList();
            }

            return finaldetails;
        }


        //Pasindu 2018/07/18
        public List<PROVINCES_LIST> getProvinceList()
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getProvinceList();
        }

        //Pasindu 2018/07/22
        public List<SEARCH_SLOW_MOVING_DET> getSMIDetails(string p_company, DateTime p_fromdate, DateTime p_todate, string p_chanel, string p_subchanel, string p_region, string p_brandmanager, string p_maincat, string p_subcat, string p_brand, string p_invoicetype)
        {
            DashboardDal = new DashboardDLL();
            DateTime tempdate = p_fromdate;
            DateTime AsAtTo = p_todate;
            DateTime AsAtFrom = p_fromdate;

            DateTime currentdate = DateTime.Today.Date;
            DateTime StartDate = new DateTime(currentdate.Year, currentdate.Month, 1);
            DateTime EndDate = StartDate.AddMonths(1).AddDays(-1);
            tempdate = new DateTime(p_fromdate.Year, p_fromdate.Month, 1).AddMonths(1).AddDays(-1);
            if (AsAtTo < EndDate && AsAtTo > StartDate)
            {
                AsAtTo = StartDate.AddDays(-1);
                AsAtFrom = StartDate.AddDays(-1);
            }
            else
            {
                AsAtTo = new DateTime(p_todate.Year, p_todate.Month, 1).AddMonths(1).AddDays(-1);
                AsAtFrom = new DateTime(p_fromdate.Year, p_fromdate.Month, 1).AddDays(-1);
            }

            _securityDAL = new SecurityDAL();
            if (_securityDAL.Is_Report_DR("SlowMoving") == true)
                DashboardDal.ConnectionOpen_DR();

            List<SEARCH_SLOW_MOVING_DET> finaldetails = new List<SEARCH_SLOW_MOVING_DET>();
            List<SEARCH_SLOW_MOVING_DET> tempdetails = new List<SEARCH_SLOW_MOVING_DET>();
            List<SEARCH_SLOW_MOVING_DET> asatfromlist = new List<SEARCH_SLOW_MOVING_DET>();
            List<SEARCH_SLOW_MOVING_DET> asattolist = new List<SEARCH_SLOW_MOVING_DET>();
            List<SEARCH_SLOW_MOVING_DET> FinItems = new List<SEARCH_SLOW_MOVING_DET>();
            List<SEARCH_SLOW_MOVING_DET> ggg = new List<SEARCH_SLOW_MOVING_DET>();
            //Details month by month

            while (tempdate < p_todate)
            {


                if (tempdate <= p_todate)
                {
                    tempdetails = DashboardDal.getSMIDetails(p_company, p_fromdate, tempdate);
                    finaldetails.AddRange(tempdetails);
                    p_fromdate = tempdate.AddDays(1);
                }
                tempdate = p_fromdate.AddMonths(1).AddDays(-1);
            }


            //while (tempdate <= p_todate)
            //{
            //    tempdate = p_fromdate.AddMonths(1);
            //    if (tempdate <= p_todate)
            //    {
            //        tempdetails = DashboardDal.getSMIDetails(p_company, p_fromdate, tempdate);
            //        finaldetails.AddRange(tempdetails);
            //        p_fromdate = tempdate;
            //    }
            //}

            tempdetails = DashboardDal.getSMIDetails(p_company, p_fromdate, p_todate);

            //Temporary added need to remove
            //    tempdetails = tempdetails.Where(x => x.smi_sold_qty < 0).ToList();
            //

            finaldetails.AddRange(tempdetails);

            //AsAtTo = Convert.ToDateTime("31/DEC/2016");
            //AsAtFrom = Convert.ToDateTime("31/DEC/2016");
            //as at date to details
            asattolist = DashboardDal.getSMIDetailsToDate(p_company, AsAtTo);

            //as at date from details
            asatfromlist = DashboardDal.getSMIDetailsFromDate(p_company, AsAtFrom);

            //asattolist.AddRange(asatfromlist);

            //asattolist = asattolist
            //        .GroupBy(u => new { u.smi_itm })
            //        .Select(cl => new SEARCH_SLOW_MOVING_DET
            //        {
            //            smi_aging_0_90 = cl.Sum(a => decimal.Parse(a.smi_aging_0_90.ToString())),
            //            smi_aging_121_180 = cl.Sum(a => decimal.Parse(a.smi_aging_121_180.ToString())),
            //            smi_aging_181_270 = cl.Sum(a => decimal.Parse(a.smi_aging_181_270.ToString())),
            //            smi_aging_271_360 = cl.Sum(a => decimal.Parse(a.smi_aging_271_360.ToString())),
            //            smi_aging_360_up = cl.Sum(a => decimal.Parse(a.smi_aging_360_up.ToString())),
            //            smi_aging_91_120 = cl.Sum(a => decimal.Parse(a.smi_aging_91_120.ToString())),
            //            smi_balance_asat_from = cl.Sum(a => decimal.Parse(a.smi_balance_asat_from.ToString())),
            //            smi_balance_asat_to = cl.Sum(a => decimal.Parse(a.smi_balance_asat_to.ToString())),
            //            smi_itm = cl.First().smi_itm
            //        }).ToList();



            finaldetails.AddRange(asatfromlist);

            finaldetails.AddRange(asattolist);


            //foreach (SEARCH_SLOW_MOVING_DET item in tempdetails) {

            //    SEARCH_SLOW_MOVING_DET fromitm = new SEARCH_SLOW_MOVING_DET();
            //    SEARCH_SLOW_MOVING_DET toitem = new SEARCH_SLOW_MOVING_DET();
            //    SEARCH_SLOW_MOVING_DET NewItem = new SEARCH_SLOW_MOVING_DET();

            //    fromitm = (from aa in asatfromlist where aa.smi_itm == item.smi_itm select aa).SingleOrDefault();
            //    NewItem.smi_brnd = item.smi_brnd;
            //    NewItem.smi_brnd_manager = item.smi_brnd_manager;
            //    NewItem.smi_com = item.smi_com;
            //    NewItem.smi_des = item.smi_des;
            //    NewItem.smi_do_location = item.smi_do_location;
            //    NewItem.smi_itm = item.smi_itm;
            //    NewItem.smi_last_mov_date = item.smi_last_mov_date;
            //    NewItem.smi_main_cat = item.smi_main_cat;
            //    NewItem.smi_model = item.smi_model;
            //    NewItem.smi_p_chnl = item.smi_p_chnl;
            //    NewItem.smi_p_inv_type = item.smi_p_inv_type;
            //    NewItem.smi_p_regn = item.smi_p_regn;
            //    NewItem.smi_p_subchnl = item.smi_p_subchnl;
            //    NewItem.smi_sold_qty = item.smi_sold_qty;
            //    NewItem.smi_des = item.smi_des;
            //    NewItem.smi_val = item.smi_val;
            //    if (fromitm != null)
            //    {
            //        NewItem.smi_balance_asat_from = fromitm.smi_balance_asat_from;
            //    }
            //    else {
            //        NewItem.smi_balance_asat_from = 0;
            //    }
            //    toitem = (from aa in asattolist where aa.smi_itm == item.smi_itm select aa).SingleOrDefault();
            //    if (toitem != null)
            //    {
            //        NewItem.smi_balance_asat_to = toitem.smi_balance_asat_to;
            //        NewItem.smi_aging_0_90 = toitem.smi_aging_0_90;
            //        NewItem.smi_aging_91_120 = toitem.smi_aging_91_120;
            //        NewItem.smi_aging_121_180 = toitem.smi_aging_121_180;
            //        NewItem.smi_aging_181_270 = toitem.smi_aging_181_270;
            //        NewItem.smi_aging_271_360 = item.smi_aging_271_360;
            //        NewItem.smi_aging_360_up = item.smi_aging_360_up;

            //    }
            //    else {
            //        NewItem.smi_balance_asat_to = 0;
            //        NewItem.smi_aging_0_90 = 0;
            //        NewItem.smi_aging_91_120 = 0;
            //        NewItem.smi_aging_121_180 = 0;
            //        NewItem.smi_aging_181_270 = 0;
            //        NewItem.smi_aging_271_360 = 0;
            //        NewItem.smi_aging_360_up = 0;
            //    }

            //    FinItems.Add(NewItem);
            //    toitem = null;
            //    fromitm = null;
            //    NewItem = null;

            //}


            finaldetails = finaldetails
                                   .GroupBy(u => new { u.smi_itm })
                                   .Select(cl => new SEARCH_SLOW_MOVING_DET
                                   {
                                       smi_brnd = cl.First().smi_brnd,
                                       mb_desc = cl.First().mb_desc,
                                       ric1_desc = cl.First().ric1_desc,
                                       smi_des = cl.First().smi_des,
                                       smi_abc = cl.First().smi_abc,
                                       smi_main_cat = cl.First().smi_main_cat,
                                       smi_prv_yr = cl.First().smi_prv_yr,
                                       smi_sold_qty = cl.Sum(a => a.smi_sold_qty),
                                       smi_val = cl.Sum(a => a.smi_val),
                                       smi_itm = cl.First().smi_itm,
                                       smi_model = cl.First().smi_model,
                                       smi_do_location = cl.First().smi_do_location,
                                       smi_p_chnl = cl.First().smi_p_chnl,
                                       smi_p_subchnl = cl.First().smi_p_subchnl,
                                       smi_p_inv_type = cl.First().smi_p_inv_type,
                                       smi_last_mov_date = cl.Max(a => a.smi_last_mov_date),
                                       smi_balance = cl.First().smi_balance,
                                       smi_balance_asat_from = cl.First().smi_balance_asat_from,
                                       smi_balance_asat_to = cl.Sum(a => a.smi_balance_asat_to),
                                       smi_aging_0_90 = cl.Sum(a => a.smi_aging_0_90),
                                       smi_aging_91_120 = cl.Sum(b => b.smi_aging_91_120),
                                       smi_aging_121_180 = cl.Sum(c => c.smi_aging_121_180),
                                       smi_aging_181_270 = cl.Sum(d => d.smi_aging_181_270),
                                       smi_aging_271_360 = cl.Sum(r => r.smi_aging_271_360),
                                       smi_aging_360_up = cl.Sum(e => e.smi_aging_360_up),
                                       AsatToDate = AsAtTo,
                                   }).ToList();

            finaldetails = (from aa in finaldetails where aa.smi_model != null && aa.smi_model != "" select aa).ToList();

            if (!string.IsNullOrEmpty(p_chanel))
            {
                finaldetails = (from aa in finaldetails where aa.smi_p_chnl == p_chanel select aa).ToList();

            }

            if (!string.IsNullOrEmpty(p_subchanel))
            {
                finaldetails = (from aa in finaldetails where aa.smi_p_subchnl == p_subchanel select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_region))
            {
                finaldetails = (from aa in finaldetails where aa.smi_p_regn == p_region select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_brandmanager))
            {
                finaldetails = (from aa in finaldetails where aa.smi_brnd_manager == p_brandmanager select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_maincat))
            {
                finaldetails = (from aa in finaldetails where aa.smi_main_cat == p_maincat select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_subcat))
            {
                finaldetails = (from aa in finaldetails where aa.smi_subcat == p_subcat select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_brand))
            {
                finaldetails = (from aa in finaldetails where aa.smi_brnd == p_brand select aa).ToList();
            }

            if (!string.IsNullOrEmpty(p_invoicetype))
            {
                finaldetails = (from aa in finaldetails where aa.smi_p_inv_type == p_invoicetype select aa).ToList();
            }

            return finaldetails;
        }



        //Pasindu 2018/07/18
        public List<SEARCH_FAST_MOVING_DET> getFMIDetailsArrivalOP(string company, DateTime p_asat)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getFMIDetailsArrivalOP(company, p_asat);
        }

        public Decimal LatestBIPrice(string Com, string Item, string PriceBook, string PriceLevel)
        {
            DashboardDal = new DashboardDLL();
            List<ProfitAnalicer> _price = DashboardDal.getItemPriceBI2(Com, Item, PriceBook, PriceLevel);
            _price = _price.GroupBy(l => new { l.SAPD_PB_TP_CD, l.SAPD_PBK_LVL_CD, l.SRTP_MAIN_TP })
   .Select(cl => new ProfitAnalicer
   {
       SAPD_PB_TP_CD = cl.First().SAPD_PB_TP_CD,
       SAPD_PBK_LVL_CD = cl.First().SAPD_PBK_LVL_CD,
       SAPD_ITM_PRICE = cl.First().SAPD_ITM_PRICE,
       SAPD_ERP_REF = cl.First().SAPD_ERP_REF,
       SAPD_MOD_WHEN = cl.First().SAPD_MOD_WHEN,
       SARPT_CD = cl.First().SARPT_CD,
       SRTP_MAIN_TP = cl.First().SRTP_MAIN_TP
   }).ToList();

            if (_price != null && _price.Count > 0)
            {
                return _price.First().SAPD_ITM_PRICE;
            }
            else
            {
                return 0;
            }
        }
        public List<ref_bud_ele_form> GetAccDynamicFields(string _company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.GetAccDynamicFields(_company);
        }
        public Decimal LatestBICost(string Com, string Item)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.GetLatestCostForBI(Item, Com);
        }
        public Decimal GetInsTPVal(string com, string ele, DateTime _date, string _item, string _brand, string _maincat, string _cat, string btu, string model)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.GetInsTPVal(com, ele, _date, _item, _brand, _maincat, _cat, btu, model);
        }

        public List<SEARCH_FAST_MOVING_DET> getFMIDetailsPURD(string company, DateTime p_asat)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getFMIDetailsPURD(company, p_asat);
        }

        public List<AGING_DET> getAgingDetails(string company)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getAgingDetails(company);
        }
        public DataTable getHPaccCompAsAt(string _schmcode, string _schmterm, string locHircCd, string locHircDesc, string company, Int32 curmonth, Int32 curyear, Int32 premonth, Int32 preyear)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            _securityDAL.ConnectionOpen();
            DashboardDal.ConnectionOpen();

            if (_securityDAL.Is_Report_DR("HPAccCompAsat") == true) DashboardDal.ConnectionOpen_DR();
            return DashboardDal.getHPaccCompAsAt(_schmcode, _schmterm, locHircCd, locHircDesc, company, curmonth, curyear, premonth, preyear);
        }
        public List<HP_ACC_COMP> getHPaccCompAsAt_NEW(string _schmcode, string _schmterm, string locHircCd, string locHircDesc, string company, Int32 curmonth, Int32 curyear, Int32 premonth, Int32 preyear)
        {
            string error = "";
            List<HP_ACC_COMP> stockAgeDetails = new List<HP_ACC_COMP>();
            List<HP_ACC_COMP> stockDet = new List<HP_ACC_COMP>();
            try
            {
                DashboardDal = new DashboardDLL();


                _securityDAL = new SecurityDAL();
                _securityDAL.ConnectionOpen();
                DashboardDal.ConnectionOpen();

                if (_securityDAL.Is_Report_DR("HPAccCompAsat_NEW") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }

                List<HP_ACC_COMP> list = DashboardDal.getHPaccCompAsAt_NEW(_schmcode, _schmterm, locHircCd, locHircDesc, company, curmonth, curyear, premonth, preyear);
                if (locHircCd == "CHNL")
                {
                    var b = list.Where(a => a.bhs_pc_chnl == locHircDesc);
                    stockAgeDetails.AddRange(b);
                }
                else if (locHircCd == "SCHNL")
                {
                    var b = list.Where(a => a.bhs_pc_schnl == locHircDesc);
                    stockAgeDetails.AddRange(b);
                }
                else if (locHircCd == "AREA")
                {
                    var b = list.Where(a => a.bhs_pc_area == locHircDesc);
                    stockAgeDetails.AddRange(b);
                }
                else if (locHircCd == "REGION")
                {
                    var b = list.Where(a => a.bhs_pc_region == locHircDesc);
                    stockAgeDetails.AddRange(b);
                }
                else if (locHircCd == "ZONE")
                {
                    var b = list.Where(a => a.bhs_pc_zone == locHircDesc);
                    stockAgeDetails.AddRange(b);
                }
                else
                {
                    stockAgeDetails.AddRange(list);
                }
                //stockAgeDetails.AddRange(list);
                //stockAgeDetails.AddRange(b);

                DashboardDal.ConnectionClose();
                _securityDAL.ConnectionClose();
                return stockAgeDetails;
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                return stockAgeDetails;
            }
        }
        //dilshan on 13/07/2018
        public List<BMT_REF_HEAD> getHPBIToolProperties(string _searchValue, string _pageNum, string _pageSize, string _serachType, string _propertyType)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getHPBIToolProperties(_searchValue, _pageNum, _pageSize, _serachType, _propertyType);
        }
        public List<BMT_REF_HEAD> LoadHPBIToolDetailsByName(string _columnName)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.LoadHPBIToolDetailsByName(_columnName);
        }
        public string getHPBMSalesDetails(DateTime _FromDate, DateTime _ToDate, string allOne, string allTwo, string allThree, string _invdate, string _com, string _user, DataTable _col, DataTable _row, DataTable _val, DataTable _col1, Dictionary<string, string[]> dataValues, out DataTable _result, out DataTable _header, int _foc, int _intercom, int intcurdate, int _inthpsales, int _intcrecardsale, int _servicecharge, int _intitem, string hpinttype, int _arrsAmt, int _collPeriod, int _term, DataTable dtNewColumn, List<HPFilter> _lst, out string _err)
        {
            //        _financialDAL = new FinancialDAL();
            //        _securityDAL = new SecurityDAL();

            _err = string.Empty;
            //        string _filePath = string.Empty;
            //        int s = 0;
            //        int t = 0;
            //        int u = 0;
            //        int v = 0;
            //        int tt = 0;
            //        var query = new DataTable();

            //        _header = null;
            //        DataTable _dtResults = new DataTable();
            //        DataTable _dtResults1 = new DataTable();
            //        DataTable _dtResults2 = new DataTable();
            //        DataTable _repHead = _financialDAL.getHPBMReportHeading("HP_BM_SALES");
            //        String[] szColumns = new String[_col.Rows.Count];
            //        String[] szRows = new String[_row.Rows.Count];
            //        String[] szVals = new String[_val.Rows.Count];
            //        String[] szColumns1 = new String[_col1.Rows.Count];
            //        string vRows = "";
            //        string vCols = "";
            //        string vColsCommon = "";

            //        DataTable BMSales1 = new DataTable();

            //        DataTable BMSales = new DataTable();
            //        BMSales.TableName = "BMTable";
            //        DataTable _dtHeader = new DataTable();
            //        _dtHeader.TableName = "BMHeader";
            //        DataRow dr;
            //        DataRow dr1;
            //        DataRow dr2;
            //        DataRow dt2dr;

            //        BMSales.Clear();
            //        if (_repHead.Rows.Count <= 0)
            //        {
            //            _err = "Report Headings not defined.";
            //            goto A;
            //        }

            //        DataTable _dtResultsM;
            //        DataTable _dtResultsMSer;
            //        DateTime _vfromdate;
            //        DateTime _vtodate;
            //        DateTime _vfromdateT;
            //        DateTime _vtodateT;
            //        DateTime _vfromdateTone;
            //        DateTime _vtodateTone;
            //        DateTime _vfromdateTtwo;
            //        DateTime _vtodateTtwo;
            //        int Revert = 0;
            //        int Close = 0;
            //        int Revrel = 0;

            //        _vfromdate = Convert.ToDateTime(DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + "01");
            //        _vtodate = Convert.ToDateTime(DateTime.Now).AddDays(-1);

            //        DataTable _lastUpdate = _financialDAL.getBMSalesLastUpdated();
            //        if (_lastUpdate.Rows.Count > 0)
            //        {
            //            foreach (DataRow _drrow in _lastUpdate.Rows)
            //            {
            //                if (!(String.IsNullOrEmpty(_drrow["bms_do_dt"].ToString())))
            //                {
            //                    _vfromdate = Convert.ToDateTime(_drrow["bms_do_dt"]).AddDays(1);
            //                    _vtodate = Convert.ToDateTime(_drrow["bms_curr_dt"]).AddDays(-1);
            //                }
            //            }
            //        }

            //        TimeSpan _diffDate1 = _vtodate - _vfromdate;
            //        if (_vtodate >= _vfromdate)
            //        {
            //            //_financialDAL.ConnectionOpen();
            //            //int xx = _financialDAL.InsertBMSales(_vfromdate, _vtodate);
            //            ////_financialDAL.ConnectionClose();
            //        }
            //        if (allOne == "true")
            //        {
            //            Revert = 1;
            //        }
            //        if (allTwo == "true")
            //        {
            //            Close = 1;
            //        }
            //        if (allThree == "true")
            //        {
            //            Revrel = 1;
            //        }

            //        TimeSpan _diffDate = _ToDate - _FromDate;
            //        int _months = (_diffDate.Days / 30) + 1;

            //        _vfromdateT = _FromDate;
            //        _vfromdateTone = _FromDateOne;
            //        _vfromdateTtwo = _FromDateTwo;

            //        string _SelCols = "";
            //        string _filterCols1 = "";
            //        foreach (DataRow _drcol in _col.Rows)
            //        {
            //            if (_SelCols != "") { _SelCols = _SelCols + ","; }
            //            _SelCols = _SelCols + _drcol["bmr_col_nm"].ToString();
            //        }
            //        foreach (DataRow _drrow in _row.Rows)
            //        {
            //            if (_SelCols != "") { _SelCols = _SelCols + ","; }
            //            _SelCols = _SelCols + _drrow["bmr_col_nm"].ToString();
            //        }
            //        foreach (DataRow _drval in _val.Rows)
            //        {
            //            if (_SelCols != "") { _SelCols = _SelCols + ","; }
            //            _SelCols = _SelCols + _drval["bmr_col_nm"].ToString();
            //        }
            //        foreach (DataRow _drcol1 in _col1.Rows)
            //        {
            //            if (_SelCols != "") { _SelCols = _SelCols + ","; }
            //            _SelCols = _SelCols + _drcol1["bmr_col_nm"].ToString();
            //        }
            //        //foreach (DataRow _drcol1 in _col1.Rows)
            //        //{
            //        //    if (_SelCols != "") { _SelCols = _SelCols + ","; }
            //        //    _SelCols = _SelCols + "Sum(" +_drcol1["bmr_col_nm"].ToString() + ")";
            //        //}

            //        _filterCols1 = _filterColsHP(dataValues, _SelCols);

            //        int z1 = SaveBMUserLog(_user, _SelCols, _filterCols1, _FromDate, _ToDate);

            //        _financialDAL = new FinancialDAL();
            //        _financialDAL.ConnectionOpen();
            //        _SelCols = _SelCols + _filterCols1;

            //        if (_securityDAL.Is_Report_DR("BMSales") == true) _financialDAL.ConnectionOpen_DR();

            //        for (int _mon = 1; _mon <= _months + 1; _mon++)
            //        {
            //            _vtodateT = _vfromdateT.AddMonths(1).AddDays(-1);
            //            if (_ToDate < _vtodateT) { _vtodateT = _ToDate; }

            //            _vtodateTone = _vfromdateTone.AddMonths(1).AddDays(-1);
            //            if (_ToDateOne < _vtodateTone) { _vtodateTone = _ToDateOne; }

            //            _vtodateTtwo = _vfromdateTtwo.AddMonths(1).AddDays(-1);
            //            if (_ToDateTwo < _vtodateTtwo) { _vtodateTtwo = _ToDateTwo; }

            //            if (intcurdate == 1)
            //            {
            //                _dtResultsM = _financialDAL.getBMHISalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
            //                //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
            //                //_dtResultsM = _dtResultsM.DefaultView.ToTable();
            //            }
            //            else if (_intitem == 1)
            //            {
            //                _dtResultsM = _financialDAL.getBMItemSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
            //                // _dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
            //                //_dtResultsM = _dtResultsM.DefaultView.ToTable();
            //            }
            //            else if (_servicecharge == 1 || _servicecharge == 2)
            //            {
            //                _dtResultsM = _financialDAL.getBMServiceSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
            //                //_dtResultsMSer = _financialDAL.getBMServiceSalesItem(_servicecharge);  

            //            }
            //            else
            //            {
            //                _dtResultsM = _financialDAL.getHPBMSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge, _arrsAmt, _collPeriod, _term, _vfromdateTone, _vtodateTone, _vfromdateTtwo, _vtodateTtwo, Revert, Close, _FromDateThree, _ToDateThree, Revrel);
            //                //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
            //                //_dtResultsM = _dtResultsM.DefaultView.ToTable();
            //            }
            //            if (_dtResultsM.Rows.Count > 0)
            //            {
            //                _dtResults1 = _filterBMSalesHP(_dtResultsM, dataValues);
            //                _dtResults2.Merge(_dtResults1);
            //            }
            //            _vfromdateT = _vfromdateT.AddMonths(1);
            //            _vfromdateTone = _vfromdateTone.AddMonths(1);
            //            _vfromdateTtwo = _vfromdateTtwo.AddMonths(1);
            //        }

            //        //Date 2
            //        //if (allOne == "true")
            //        //{
            //        //    _diffDate = _ToDateOne - _FromDateOne;
            //        //    _months = (_diffDate.Days / 30) + 1;

            //        //    _vfromdateT = _FromDateOne;

            //        //    for (int _mon = 1; _mon <= _months + 1; _mon++)
            //        //    {
            //        //        _vtodateT = _vfromdateT.AddMonths(1).AddDays(-1);
            //        //        if (_ToDateOne < _vtodateT) { _vtodateT = _ToDateOne; }
            //        //        if (intcurdate == 1)
            //        //        {
            //        //            _dtResultsM = _financialDAL.getBMHISalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
            //        //            //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
            //        //            //_dtResultsM = _dtResultsM.DefaultView.ToTable();
            //        //        }
            //        //        else if (_intitem == 1)
            //        //        {
            //        //            _dtResultsM = _financialDAL.getBMItemSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
            //        //            //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
            //        //            //_dtResultsM = _dtResultsM.DefaultView.ToTable();
            //        //        }
            //        //        else
            //        //        {
            //        //            _dtResultsM = _financialDAL.getHPBMSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge, _arrsAmt, _collPeriod, _term);
            //        //            //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
            //        //            //_dtResultsM = _dtResultsM.DefaultView.ToTable();
            //        //        }
            //        //        if (_dtResultsM.Rows.Count > 0)
            //        //        {
            //        //            _dtResults1 = _filterBMSales(_dtResultsM, dataValues);
            //        //            _dtResults2.Merge(_dtResults1);
            //        //        }
            //        //        _vfromdateT = _vfromdateT.AddMonths(1);
            //        //    }
            //        //}

            //        //Date 3
            //        //if (allTwo == "true")
            //        //{
            //        //    _diffDate = _ToDateTwo - _FromDateTwo;
            //        //    _months = (_diffDate.Days / 30) + 1;

            //        //    _vfromdateT = _FromDateTwo;

            //        //    for (int _mon = 1; _mon <= _months + 1; _mon++)
            //        //    {
            //        //        _vtodateT = _vfromdateT.AddMonths(1).AddDays(-1);
            //        //        if (_ToDateTwo < _vtodateT) { _vtodateT = _ToDateTwo; }
            //        //        if (intcurdate == 1)
            //        //        {
            //        //            _dtResultsM = _financialDAL.getBMHISalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
            //        //            //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
            //        //            //_dtResultsM = _dtResultsM.DefaultView.ToTable();
            //        //        }
            //        //        else if (_intitem == 1)
            //        //        {
            //        //            _dtResultsM = _financialDAL.getBMItemSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge);
            //        //            //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
            //        //            //_dtResultsM = _dtResultsM.DefaultView.ToTable();
            //        //        }
            //        //        else
            //        //        {
            //        //            _dtResultsM = _financialDAL.getHPBMSalesDetails(_vfromdateT, _vtodateT, _invdate, _com, "", _user, _SelCols, _foc, _intercom, hpinttype, _inthpsales, _intcrecardsale, _servicecharge, _arrsAmt, _collPeriod, _term);
            //        //            //_dtResultsM.DefaultView.Sort = "BMS_ITM_CAT1";
            //        //            //_dtResultsM = _dtResultsM.DefaultView.ToTable();
            //        //        }
            //        //        if (_dtResultsM.Rows.Count > 0)
            //        //        {
            //        //            _dtResults1 = _filterBMSales(_dtResultsM, dataValues);
            //        //            _dtResults2.Merge(_dtResults1);
            //        //        }
            //        //        _vfromdateT = _vfromdateT.AddMonths(1);
            //        //    }
            //        //}

            //        //_dtResults1 = _financialDAL.getBMSalesDetails(_FromDate, _ToDate, _invdate, _com, "", _user);

            //        //_dtResults2 = _filterBMSales(_dtResults1, dataValues);

            //        if (_dtResults2.Rows.Count > 0)
            //        {
            //            foreach (DataRow _drcol in _col.Rows)
            //            {
            //                foreach (DataRow drlochead in _repHead.Rows)
            //                {
            //                    if (drlochead["bmr_col_nm"].ToString() == _drcol["bmr_col_nm"].ToString())
            //                    {
            //                        if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add("Col" + t, typeof(string));
            //                        if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add("Col" + t, typeof(int));
            //                        if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add("Col" + t, typeof(decimal));
            //                        _dtHeader.Columns.Add("Col" + t, typeof(string));
            //                        szColumns[t] = drlochead["bmr_col_nm"].ToString();
            //                        if (vCols != "") vCols = vCols + ",";
            //                        vCols = vCols + drlochead["bmr_col_nm"].ToString();
            //                        if (vColsCommon != "") vColsCommon = vColsCommon + ",";
            //                        vColsCommon = vColsCommon + "Col" + t;
            //                        t = t + 1;
            //                    }
            //                }
            //            }
            //            //new column****************************************
            //            //foreach (DataRow _drcol1 in _col1.Rows)
            //            //{
            //            //    foreach (DataRow drlochead in _repHead.Rows)
            //            //    {
            //            //        if (drlochead["bmr_col_nm"].ToString() == _drcol1["bmr_col_nm"].ToString())
            //            //        {
            //            //            if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add("Col" + tt, typeof(string));
            //            //            if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add("Col" + tt, typeof(int));
            //            //            if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add("Col" + tt, typeof(decimal));
            //            //            _dtHeader.Columns.Add("Col" + tt, typeof(string));
            //            //            szColumns1[tt] = drlochead["bmr_col_nm"].ToString();
            //            //            if (vCols != "") vCols = vCols + ",";
            //            //            vCols = vCols + drlochead["bmr_col_nm"].ToString();
            //            //            if (vColsCommon != "") vColsCommon = vColsCommon + ",";
            //            //            vColsCommon = vColsCommon + "Col" + tt;
            //            //            tt = tt + 1;
            //            //        }
            //            //    }
            //            //}
            //            //**************************************************

            //            foreach (DataRow _drval in _val.Rows)
            //            {
            //                foreach (DataRow drlochead in _repHead.Rows)
            //                {
            //                    if (drlochead["bmr_col_nm"].ToString() == _drval["bmr_col_nm"].ToString())
            //                    {
            //                        szVals[v] = drlochead["bmr_col_nm"].ToString();
            //                        v = v + 1;
            //                    }
            //                }
            //            }

            //            foreach (DataRow _drrow in _row.Rows)
            //            {
            //                foreach (DataRow drlochead in _repHead.Rows)
            //                {
            //                    if (drlochead["bmr_col_nm"].ToString() == _drrow["bmr_col_nm"].ToString())
            //                    {
            //                        szRows[u] = drlochead["bmr_col_nm"].ToString();
            //                        if (vRows != "") vRows = vRows + ",";
            //                        vRows = vRows + drlochead["bmr_col_nm"].ToString();
            //                        u = u + 1;
            //                    }
            //                }
            //            }

            //            string[] szColRows = new String[szRows.Count() + szColumns.Count()];
            //            //string[] szColRows = new String[szRows.Count() + szColumns.Count() + szColumns1.Count()];
            //            szColRows = szColumns.Concat(szRows).ToArray();

            //            DataTable _dtResultsSum = new DataTable();
            //            _dtResults = _dtResults2;

            //            if (u != 0)
            //            {
            //                DataTable OFI = _dtResults.DefaultView.ToTable(true, szColRows);

            //                DataView viewFI = new DataView(OFI);
            //                viewFI.Sort = vRows;
            //                _dtResultsSum = viewFI.ToTable();
            //            }
            //            else
            //            {
            //                _dtResultsSum = _dtResults;
            //            }

            //            DataTable _insertnull = _dtResults.DefaultView.ToTable(true, szRows);
            //            DataTable _insertnull1 = _dtResults.DefaultView.ToTable(true, szColumns);

            //            foreach (DataRow _drrowc in _insertnull1.Rows)
            //            {
            //                foreach (DataRow _drrowr in _insertnull.Rows)
            //                {
            //                    DataRow drs;
            //                    DataRow drs1;
            //                    drs = _dtResults.NewRow();
            //                    drs1 = _dtResultsSum.NewRow();

            //                    string _filter = "";
            //                    for (int index = 0; index < _insertnull1.Columns.Count; index++)
            //                    {
            //                        if (_filter != "")
            //                        { _filter = _filter + " and "; }
            //                        _filter = _filter + "[" + _insertnull1.Columns[index].ColumnName + "]" + " ='" + _drrowc[index].ToString() + "'";
            //                        if (_row.Rows.Count != 0)
            //                        {
            //                            drs[index] = _drrowc[index].ToString();
            //                            drs1[index] = _drrowc[index].ToString();
            //                        }
            //                        //***********************************
            //                        //drs[index] = _drrowc[index].ToString();
            //                        //drs1[index] = _drrowc[index].ToString();
            //                    }
            //                    for (int index = 0; index < _insertnull.Columns.Count; index++)
            //                    {
            //                        if (_filter != "")
            //                        { _filter = _filter + " and "; }
            //                        _filter = _filter + "[" + _insertnull.Columns[index].ColumnName + "]" + " ='" + _drrowr[index].ToString() + "'";
            //                        //dilshan on 07/08/2018**************
            //                        if (_row.Rows.Count != 0)
            //                        {
            //                            drs[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
            //                            drs1[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
            //                        }
            //                        //***********************************
            //                        //drs[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
            //                        //drs1[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
            //                    }
            //                    int x = 0;
            //                    foreach (DataRow _drval in _val.Rows)
            //                    {
            //                        drs[x + _insertnull1.Columns.Count + _insertnull.Columns.Count] = 0;
            //                        x++;
            //                    }

            //                    var insertnulls = _dtResultsSum.Select(_filter);
            //                    var dt1 = new DataTable();
            //                    if (insertnulls.Length != 0)
            //                        dt1 = insertnulls.CopyToDataTable();
            //                    else
            //                        dt1 = _dtResults.Clone();

            //                    if (dt1.Rows.Count == 0)
            //                    {
            //                        _dtResults.Rows.Add(drs);
            //                        _dtResultsSum.Rows.Add(drs1);
            //                    }

            //                }
            //            }

            //            if (_dtResultsSum.Rows.Count > 0)
            //            {
            //                foreach (DataRow _drresult in _dtResultsSum.Rows)
            //                {
            //                    string _filter = "";
            //                    string _group = "";

            //                    for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
            //                    {
            //                        if (_filter != "")
            //                        { _filter = _filter + " and "; }
            //                        _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

            //                        if (_group != "")
            //                        { _group = _group + " ,"; }
            //                        _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
            //                    }
            //                    if (_filter != "")
            //                    {
            //                        //DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();
            //                        var filteredDataRows1 = _dtResults.Select(_filter);
            //                        var dt1 = new DataTable();
            //                        if (filteredDataRows1.Length != 0)
            //                            dt1 = filteredDataRows1.CopyToDataTable();
            //                        else
            //                            dt1 = _dtResults.Clone();

            //                        var ownerGroups = dt1.AsEnumerable()
            //                            .GroupBy(row => new { _group });
            //                        var dt2 = dt1.Clone();
            //                        //var intColumns = dt1.Columns.Cast<DataColumn>()
            //                        //    .Where(c => c.DataType == typeof(decimal)).ToArray();
            //                        var intColumns = dt1.Columns.Cast<DataColumn>()
            //                        .Where(c => c.DataType == typeof(double)).ToArray();
            //                        //Double
            //                        foreach (var grp in ownerGroups)
            //                        {
            //                            var row = dt2.Rows.Add();

            //                            foreach (DataRow _drcol in _col.Rows)
            //                            {
            //                                row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drcol[0].ToString()].Ordinal));
            //                            }
            //                            foreach (DataRow _drrow in _row.Rows)
            //                            {
            //                                row.SetField(_drrow[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drrow[0].ToString()].Ordinal));
            //                            }
            //                            foreach (DataColumn col in intColumns)
            //                            {
            //                                //bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
            //                                //decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
            //                                //row.SetField(col, sum);

            //                                bool anyNonNull = grp.Any(r => r.Field<double?>(col.Ordinal).HasValue);
            //                                double? sum = anyNonNull ? grp.Sum(r => r.Field<double?>(col.Ordinal)) : null;
            //                                row.SetField(col.Ordinal, Convert.ToDouble(sum));
            //                            }
            //                        }

            //                        BMSales1.Merge(dt2);
            //                    }
            //                }
            //            }

            //            _dtResults = BMSales1.DefaultView.ToTable(true, szColRows.Concat(szVals).ToArray());

            //            DataTable _dtResultsSum2 = new DataTable();

            //            if (_dtResults.Rows.Count > 0)
            //            {
            //                if (u != 0)
            //                {
            //                    DataTable OFI2 = _dtResults.DefaultView.ToTable(true, szRows);

            //                    DataView viewFI2 = new DataView(OFI2);
            //                    viewFI2.Sort = vRows;
            //                    _dtResultsSum2 = viewFI2.ToTable();
            //                }
            //                else
            //                {
            //                    _dtResultsSum2 = _dtResults;
            //                }


            //                if (_dtResultsSum2.Rows.Count > 0)
            //                {
            //                    for (int index = 0; index < _dtResultsSum2.Rows.Count; index++)
            //                    {
            //                        foreach (string _val1 in szVals)
            //                        {
            //                            BMSales.Columns.Add("Col" + t, typeof(decimal));
            //                            _dtHeader.Columns.Add("Col" + t, typeof(string));
            //                            t = t + 1;
            //                        }
            //                    }
            //                }

            //                int ab = 1;

            //                DataTable OFI3 = _dtResults.DefaultView.ToTable(true, szColumns);

            //                if (OFI3.Rows.Count > 0)
            //                {
            //                    foreach (DataRow _drow in OFI3.Rows)
            //                    {
            //                        string _filter = "";
            //                        string _group = "";

            //                        for (int index = 0; index < OFI3.Columns.Count; index++)
            //                        {
            //                            if (_filter != "")
            //                            { _filter = _filter + " and "; }
            //                            _filter = _filter + "[" + OFI3.Columns[index].ColumnName + "]" + " ='" + _drow[index].ToString() + "'";

            //                            if (_group != "")
            //                            { _group = _group + " ,"; }
            //                            _group = _group + "[" + OFI3.Columns[index].ColumnName + "] = row.Field<string>([" + OFI3.Columns[index].ColumnName + "])";
            //                        }
            //                        if (_filter != "")
            //                        {
            //                            DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();

            //                            string _filter1 = "";
            //                            int w = 0;
            //                            int x = 0;
            //                            int y = 0;
            //                            int z = 0;
            //                            int aa = 0;

            //                            //dr1 = new DataRow();
            //                            //if (ab < _row.Rows.Count + 1)                                 

            //                            dr1 = _dtHeader.NewRow();
            //                            dr = BMSales.NewRow();

            //                            if (_dtResultsSum2.Rows.Count > 0)
            //                            {
            //                                foreach (DataRow _drow1 in _dtResultsSum2.Rows)
            //                                {
            //                                    _filter1 = "";

            //                                    for (int index = 0; index < dt1.Columns.Count; index++)
            //                                    {
            //                                        for (int index2 = 0; index2 < _dtResultsSum2.Columns.Count; index2++)
            //                                        {
            //                                            if (_dtResultsSum2.Columns[index2].ColumnName == dt1.Columns[index].ColumnName)
            //                                            {
            //                                                if (_filter1 != "")
            //                                                { _filter1 = _filter1 + " and "; }
            //                                                _filter1 = _filter1 + "[" + dt1.Columns[index].ColumnName + "]" + " ='" + _drow1[index2].ToString() + "'";
            //                                            }
            //                                        }
            //                                    }

            //                                    if (_filter1 != "")
            //                                    {
            //                                        var filteredDataRows = dt1.Select(_filter1);
            //                                        var dt2 = new DataTable();
            //                                        if (filteredDataRows.Length != 0)
            //                                            dt2 = filteredDataRows.CopyToDataTable();
            //                                        else
            //                                            if (w != 0)
            //                                            {
            //                                                dt2 = dt1.Clone();
            //                                                dt2dr = dt2.NewRow();
            //                                                int dt2num = 0;
            //                                                int dt2num1 = 0;
            //                                                foreach (DataRow _drcol in _col.Rows)
            //                                                {
            //                                                    dt2dr[dt2num] = _drow[dt2num1].ToString();
            //                                                    dt2num1 = dt2num1 + 1;
            //                                                    dt2num = dt2num + 1;
            //                                                }
            //                                                dt2num1 = 0;
            //                                                foreach (DataRow _drrow in _row.Rows)
            //                                                {
            //                                                    dt2dr[dt2num] = _drow1[dt2num1].ToString();
            //                                                    dt2num1 = dt2num1 + 1;
            //                                                    dt2num = dt2num + 1;
            //                                                }
            //                                                dt2num1 = 0;
            //                                                foreach (DataRow _drval in _val.Rows)
            //                                                {
            //                                                    dt2dr[dt2num] = 0;
            //                                                    dt2num1 = dt2num1 + 1;
            //                                                    dt2num = dt2num + 1;
            //                                                }
            //                                                dt2.Rows.Add(dt2dr);
            //                                            }

            //                                        //w = w + _val.Rows.Count; else aa = 2;
            //                                        //DataTable dt2 = dt1.Select(_filter1).CopyToDataTable();

            //                                        foreach (DataRow _drow3 in dt2.Rows)
            //                                        {
            //                                            if (BMSales.Columns.Count > w)
            //                                            {
            //                                                if (z == y)
            //                                                {
            //                                                    foreach (DataRow _drcol in _col.Rows)
            //                                                    {
            //                                                        for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
            //                                                        {
            //                                                            if (dt2.Columns[index4].ColumnName.ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
            //                                                            {
            //                                                                foreach (DataRow drlochead in _repHead.Rows)
            //                                                                {
            //                                                                    if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
            //                                                                    {
            //                                                                        if (drlochead["bmr_data_tp"].ToString() == "string") dr[w] = _drow3[y].ToString().ToUpper();
            //                                                                        if (drlochead["bmr_data_tp"].ToString() == "int") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToInt16(_drow3[y].ToString()) : 00;
            //                                                                        if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToDecimal(_drow3[y].ToString()) : 00;
            //                                                                        //if (ab < _row.Rows.Count + 1)
            //                                                                        //{
            //                                                                        if (ab == 1) dr1[w] = _drcol["bmr_col_desc"].ToString().ToUpper();
            //                                                                        //}

            //                                                                        w = w + 1;
            //                                                                        //x = x + 1;
            //                                                                        y = y + 1;
            //                                                                        z = z + 1;
            //                                                                    }
            //                                                                }
            //                                                            }
            //                                                        }
            //                                                    }

            //                                                    int ad = _col.Rows.Count;
            //                                                    foreach (DataRow _drrow in _row.Rows)
            //                                                    {
            //                                                        for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
            //                                                        {
            //                                                            if (dt2.Columns[index4].ColumnName.ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
            //                                                            {
            //                                                                foreach (DataRow drlochead in _repHead.Rows)
            //                                                                {
            //                                                                    if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
            //                                                                    {
            //                                                                        if (ab == 1)
            //                                                                        {
            //                                                                            dr2 = _dtHeader.NewRow();
            //                                                                            int ac = 0;
            //                                                                            //foreach (DataRow _drcol in _col.Rows)
            //                                                                            //{
            //                                                                            //    dr2[ac] = _drcol["bmr_col_desc"].ToString().ToUpper();
            //                                                                            //    //dr2[ac] = "ARREAS MONTH";
            //                                                                            //    ac = ac + 1;
            //                                                                            //}
            //                                                                            foreach (DataRow _drcol in _row.Rows)
            //                                                                            {
            //                                                                                dr2[ac] = _drcol["bmr_col_desc"].ToString().ToUpper();
            //                                                                                //dr2[ac] = "ARREAS MONTH";
            //                                                                                ac = ac + 1;
            //                                                                            }
            //                                                                            foreach (DataRow _drow4 in _dtResultsSum2.Rows)
            //                                                                            {
            //                                                                                foreach (DataRow _drval in _val.Rows)
            //                                                                                {
            //                                                                                    if (dt2.Columns[ad].ColumnName.ToUpper() == "BMS_DO_MONTH" || dt2.Columns[ad].ColumnName.ToUpper() == "BMS_INV_MONTH")
            //                                                                                    {
            //                                                                                        dr2[ac] = _getMonthName(Convert.ToInt16(_drow4[dt2.Columns[ad].ColumnName.ToUpper()])).ToUpper();
            //                                                                                    }
            //                                                                                    else if (dt2.Columns[ad].ColumnName.ToUpper() == "BMS_DO_YEAR" || dt2.Columns[ad].ColumnName.ToUpper() == "BMS_INV_YEAR" || dt2.Columns[ad].ColumnName.ToUpper() == "BMS_DO_DAY")
            //                                                                                    {
            //                                                                                        dr2[ac] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
            //                                                                                    }
            //                                                                                    else
            //                                                                                    {
            //                                                                                        dr2[ac+(ad-1)] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
            //                                                                                    }
            //                                                                                    //if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_MONTH" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_MONTH")
            //                                                                                    //{
            //                                                                                    //    dr2[ac] = _getMonthName(Convert.ToInt16(_drow4[0])).ToUpper();
            //                                                                                    //}
            //                                                                                    //else if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_DAY")
            //                                                                                    //{
            //                                                                                    //    dr2[ac] = Convert.ToInt16(_drow4[0]);
            //                                                                                    //}
            //                                                                                    //else
            //                                                                                    //{
            //                                                                                    //    dr2[ac] = _drow4[0].ToString().ToUpper();
            //                                                                                    //}
            //                                                                                    ac = ac + 1;
            //                                                                                }

            //                                                                            }
            //                                                                            ad = ad + 1;
            //                                                                            _dtHeader.Rows.Add(dr2);
            //                                                                        }
            //                                                                        //x = x + 1;
            //                                                                        y = y + 1;
            //                                                                        z = z + 1;
            //                                                                    }
            //                                                                }
            //                                                            }
            //                                                        }
            //                                                    }
            //}
            //                                                foreach (DataRow _drval in _val.Rows)
            //                                                {
            //                                                    for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
            //                                                    {
            //                                                        if (dt2.Columns[index4].ColumnName.ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
            //                                                        {
            //                                                            foreach (DataRow drlochead in _repHead.Rows)
            //                                                            {
            //                                                                if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
            //                                                                {
            //                                                                    if (drlochead["bmr_data_tp"].ToString() == "string") dr[w + aa] = _drow3[x + y].ToString().ToUpper();
            //                                                                    if (drlochead["bmr_data_tp"].ToString() == "int") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToInt32(_drow3[x + y].ToString()) : 00;
            //                                                                    if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToDecimal(_drow3[x + y].ToString()) : 00;
            //                                                                    if (ab == 1)
            //                                                                    {
            //                                                                        //if (dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_MONTH" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_INV_MONTH")
            //                                                                        //{
            //                                                                        //    dr1[w] = _getMonthName(Convert.ToInt16(_drval["bmr_col_desc"])).ToUpper();
            //                                                                        //}
            //                                                                        //else if (dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_YEAR" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_INV_YEAR" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_DAY")
            //                                                                        //{
            //                                                                        //    dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
            //                                                                        //}
            //                                                                        //else
            //                                                                        //{
            //                                                                        dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
            //                                                                        //}
            //                                                                        //if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_MONTH" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_MONTH")
            //                                                                        //{
            //                                                                        //    dr1[w] = _getMonthName(Convert.ToInt16(_drval["bmr_col_desc"])).ToUpper();
            //                                                                        //}
            //                                                                        //else if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_DAY")
            //                                                                        //{
            //                                                                        //    dr1[w] = Convert.ToInt16(_drval["bmr_col_desc"]);
            //                                                                        //}
            //                                                                        //else
            //                                                                        //{
            //                                                                        //    dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
            //                                                                        //}
            //                                                                    }

            //                                                                    w = w + 1;
            //                                                                    x = x + 1;
            //                                                                    z = z + 1;
            //                                                                }
            //                                                            }
            //                                                        }
            //                                                    }

            //                                                }
            //                                                x = 0;
            //                                                aa = 0;
            //                                            }
            //                                        }

            //                                    }
            //                                }
            //                            }

            //                            //if (ab < _row.Rows.Count) 

            //                            _dtHeader.Rows.Add(dr1);
            //                            BMSales.Rows.Add(dr);
            //                            ab = ab + 1;

            //                        }
            //                    }
            //                }

            //            }

            //            DataView viewFIn = new DataView(BMSales);
            //            viewFIn.Sort = vColsCommon;
            //            BMSales = viewFIn.ToTable();

            //            string _group1 = "";
            //            var dt1tot = new DataTable();
            //            dt1tot = BMSales;
            //            //var ownerGroupstot = dt1tot;
            //            var ownerGroupstot = dt1tot.AsEnumerable()
            //                             .GroupBy(row => new { _group1 });
            //            var dt2tot = dt1tot.Clone();
            //            var intColumnstot = dt2tot.Columns.Cast<DataColumn>()
            //                .Where(c => c.DataType == typeof(decimal)).ToArray();
            //            foreach (var grp in ownerGroupstot)
            //            {
            //                var row = dt2tot.Rows.Add();

            //                foreach (DataRow _drcol in _col.Rows)
            //                {
            //                    if (dt2tot.Columns[0].DataType.ToString() == "String")
            //                    {
            //                        row.SetField("Col0", "Total");
            //                    }
            //                }
            //                //foreach (DataRow _drrow in _row.Rows)
            //                //{
            //                //    row.SetField(_drrow[0].ToString(), "");
            //                //}
            //                foreach (DataColumn col in intColumnstot)
            //                {
            //                    bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
            //                    decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
            //                    row.SetField(col, sum);
            //                }
            //                //Row sum*************************
            //                BMSales.Columns.Add("Total", typeof(decimal));
            //                _dtHeader.Columns.Add("Total");
            //                foreach (DataRow _drrow in BMSales.Rows)
            //                {
            //                    decimal rowSum = 0;
            //                    foreach (DataColumn col in BMSales.Columns)
            //                    {
            //                        if (!_drrow.IsNull(col))
            //                        {
            //                            string stringValue = _drrow[col].ToString();
            //                            decimal d;
            //                            if (decimal.TryParse(stringValue, out d))
            //                                rowSum += d;
            //                        }
            //                    }
            //                    _drrow.SetField("Total", rowSum);
            //                }
            //                //***************************
            //            }

            //            BMSales.Merge(dt2tot);
            //            //var sortedTable = BMSales.AsEnumerable()
            //            //    .GroupBy(r => r.Field<String>("Col0"));

            //            //query = from r in BMSales.AsEnumerable()
            //            //            group r by r.Field<string>("Col0");

            //        }
            //        else
            //        {
            //            _err = "No Records Found.";

            //        }


            //    A:
            //        if (_dtHeader.Rows.Count > 0)
            //        {
            //            for (int i = _dtHeader.Rows.Count - 1; i >= 0; i--)
            //            {
            //                if (_dtHeader.Rows[i][0] == DBNull.Value)
            //                    _dtHeader.Rows[i].Delete();
            //            }
            //            _dtHeader.AcceptChanges();
            //        }


            //        _err = "";
            //        _filePath = "";
            //        _filePath = ExportExcel2007(_com, _user, _dtHeader, BMSales, out _err);
            //        _filePath = ExportExcel2007(_com, _user, _dtHeader, query, out _err);
            //        if (BMSales.Rows.Count != 0)
            //        {
            //            InventoryDAL _inventoryDAL = new InventoryDAL();
            //            DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(_user);
            //            if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
            //            {
            //                GeneralDAL _generalDAL = new GeneralDAL();
            //                //SmtpClient smtpClient = new SmtpClient();
            //                //MailMessage message = new MailMessage();

            //                //MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

            //                //smtpClient.Host = _generalDAL.GetMailHost();
            //                //smtpClient.Port = 25;
            //                //message.From = fromAddress;

            //                ////CommonSearchBLL _commonBLL = new CommonSearchBLL();
            //                //string _mail = "";
            //                //_mail += "Generated report path as follows" + Environment.NewLine;
            //                //_mail += _filePath + Environment.NewLine + Environment.NewLine;

            //                //_mail += "*** This is an automatically generated email, please do not reply ***" + Environment.NewLine;

            //                //message.To.Add(_dtEmail.Rows[0]["SE_EMAIL"].ToString());
            //                //message.Subject = "User Defined Reports";
            //                ////message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
            //                ////message.Bcc.Add(new MailAddress(""));
            //                //message.IsBodyHtml = false;
            //                //message.Body = _mail;
            //                //message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;

            //                //// Send SMTP mail
            //                //smtpClient.Send(message);

            //                //_commonBLL.Send_SMTPMail(_dtEmail.Rows[0]["SE_EMAIL"].ToString(), "User Defined Reports", _mail);
            //                SmtpClient smtpClient = new SmtpClient();
            //                MailMessage message = new MailMessage();
            //                MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

            //                smtpClient.Host = _generalDAL.GetMailHost();
            //                smtpClient.Port = 25;
            //                message.From = fromAddress;
            //                string FOOTER = _generalDAL.GetMailFooterMsg();
            //                string _email = "";
            //                // string _docNo = _docNo.Replace("Normal:", "");
            //                _email = "Generated report path as follows" + Environment.NewLine;
            //                _email += _filePath + Environment.NewLine + Environment.NewLine;
            //                //_email = _email + "Approved #-" + _docNo + " <br><P>";
            //                _email = _email + "<br>" + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
            //                message.To.Add(_dtEmail.Rows[0]["SE_EMAIL"].ToString());
            //                //message.Bcc.Add("amilasanjeewa@abansgroup.com");
            //                message.Subject = "User Defined Reports";
            //                //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
            //                //message.Bcc.Add(new MailAddress(""));
            //                message.IsBodyHtml = false;
            //                message.Body = _email;
            //                message.IsBodyHtml = true;
            //                message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
            //                // Send SMTP mail
            //                smtpClient.Send(message);
            //            }
            //        }

            _header = null;
            _result = null;

            //        if (_header.Rows.Count == 0) _header = null;
            //        if (_result.Rows.Count == 0) _result = null;
            return _err;

        }
        public DataTable getHPDebtorsArrAsAt(string locHircCd, string locHircDesc, string company, Int32 curmonth, Int32 curyear, string userId)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            _securityDAL.ConnectionOpen();
            DashboardDal.ConnectionOpen();

            if (_securityDAL.Is_Report_DR("HPDebtorsArrAsat") == true) DashboardDal.ConnectionOpen_DR();
            return DashboardDal.getHPDebtorsArrAsAt(locHircCd, locHircDesc, company, curmonth, curyear, userId);
        }
        public DataTable getHPDebtorsArrAsAtSum(string locHircCd, string locHircDesc, string company, Int32 curmonth, Int32 curyear, string userId)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            _securityDAL.ConnectionOpen();
            DashboardDal.ConnectionOpen();

            if (_securityDAL.Is_Report_DR("HPDebtorsArrAsatSum") == true) DashboardDal.ConnectionOpen_DR();
            return DashboardDal.getHPDebtorsArrAsAtSum(locHircCd, locHircDesc, company, curmonth, curyear, userId);
        }
        public DataTable getStockBalanceDetails(string com, string brand, string mainCat, DateTime asatDt, string chnl, string schnl, string BrandMngr,
            bool currdt, string grp1, string grp2, string grp3, string grp4, string grp5, string grp6, string grp7, string itmcd, string model, string location, string area,
            string region, string zone, string item, string userId, out string error)
        {
            error = "";
            DataTable data = new DataTable("tbl");
            DataTable final = new DataTable("final");
            string querystring = "";

            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();

                _securityDAL.ConnectionOpen();
                DashboardDal.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BI_STOCKBAL") == true) DashboardDal.ConnectionOpen_DR();
                DashboardDal.BeginTransaction();
                 
                if (currdt == false)
                {
                    #region mnth end batance new
                    querystring = "SELECT ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    }
                    if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');
                    querystring += " ,SUM(QTUANTITY) QUANTITY,SUM(COST) COST ";
                    querystring += "";
                    querystring += " FROM GLB_BI_STOCK_BALANCE WHERE 1=1 ";

                    if (mainCat != "")
                    {
                        querystring += " AND CATE1='" + mainCat + "' ";
                    }
                    if (brand != "")
                    {
                        querystring += " AND BRAND='" + brand + "' ";
                    }
                    if (model != "")
                    {
                        querystring += " AND MODEL='" + model + "' ";
                    }
                    querystring += " GROUP BY ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    }
                    if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');

                    querystring += " ORDER BY ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    else if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    else if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    else if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    else if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    else if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    }
                    else if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');
                    querystring = querystring + "";
                    #endregion
                    data = DashboardDal.asAtbalanceProcess(asatDt, com, location, chnl, schnl, area, region, zone, BrandMngr, model, brand, item, querystring, currdt);
                    //data = DashboardDal.getStockBalanceDetails();
                    #region month end balance
                    /* querystring = "SELECT ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    }
                    if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');
                    querystring += " ,SUM(BMI_AGE_QTY_T) QUANTITY,SUM(BMI_AGE_COST_T) COST ";
                    querystring += "";

                    querystring += "FROM bmt_inv_bal_com " +
                                " inner join mst_itm on mi_cd=bmi_itm_cd " +
                                " inner join mst_itm_brand on mi_brand=mb_cd " +
                                " INNER JOIN mst_itm_model ON MI_MODEL=mm_cd " +
                                " INNER JOIN mst_loc_info info1 ON info1.mli_loc_cd=bmi_loc_cd AND info1.mli_cd='CHNL' AND info1.mli_act=1 " +
                                " inner join mst_loc_info info2 ON info2.mli_loc_cd=bmi_loc_cd AND info2.mli_cd='SCHNL' AND info2.mli_act=1 ";

                    querystring += " WHERE bmi_seq_no=(SELECT prd_seq_no FROM ref_prd_mt where prd_stus='CLOSE' AND prd_com_cd ='" + com + "' AND prd_from='" + asatDt.ToString("dd/MMM/yyyy") + "') ";
                   
                    
                    if (chnl != "")
                    {
                        querystring += " AND info1.mli_val='" + chnl + "' ";
                    }
                    if (schnl != "")
                    {
                        querystring += " AND info2.mli_val='" + schnl + "' ";
                    }
                    if (mainCat != "")
                    {
                        querystring += " AND mi_cate_1='" + mainCat + "' ";
                    }
                    if (brand != "")
                    {
                        querystring += " AND mi_brand='" + brand + "' ";
                    }
                    if (itmcd != "")
                    {
                        querystring += " AND mi_cd='" + itmcd + "' ";
                    }
                    if (model != "")
                    {
                        querystring += " AND mi_model='" + model + "' ";
                    }
                    querystring += " GROUP BY ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    } 
                    if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');

                    querystring += " ORDER BY ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    } 
                    if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');
                    querystring = querystring + "";
                    * */
                    #endregion

                }
                else
                {
                    #region current balance

                    //if (grp1 == "BMI_LOC_CD")
                    //{
                    //    grp1 = "INB_LOC";
                    //}
                    //else if (grp2 == "BMI_LOC_CD")
                    //{
                    //    grp2 = "INB_LOC";
                    //}
                    //else if (grp3 == "BMI_LOC_CD")
                    //{
                    //    grp3 = "INB_LOC";
                    //}
                    //else if (grp4 == "BMI_LOC_CD")
                    //{
                    //    grp4 = "INB_LOC";
                    //}
                    //else if (grp5 == "BMI_LOC_CD")
                    //{
                    //    grp5 = "INB_LOC";
                    //}
                    //else if (grp6 == "BMI_LOC_CD")
                    //{
                    //    grp6 = "INB_LOC";
                    //}
                    //else if (grp7 == "BMI_LOC_CD")
                    //{
                    //    grp7 = "INB_LOC";
                    //}
                    querystring = "SELECT ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    }
                    if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');
                    querystring += " ,SUM(QTUANTITY) QUANTITY,SUM(COST) COST ";
                    querystring += "";
                    querystring += " FROM GLB_BI_STOCK_BALANCE WHERE 1=1 ";

                    if (mainCat != "")
                    {
                        querystring += " AND CATE1='" + mainCat + "' ";
                    }
                    if (brand != "")
                    {
                        querystring += " AND BRAND='" + brand + "' ";
                    }
                    if (model != "")
                    {
                        querystring += " AND MODEL='" + model + "' ";
                    }
                    querystring += " GROUP BY ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    }
                    if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');

                    querystring += " ORDER BY ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    else if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    else if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    else if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    else if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    else if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    }
                    else if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');
                    querystring = querystring + "";
                    data = DashboardDal.asAtbalanceProcess(asatDt, com, location, chnl, schnl, area, region, zone, BrandMngr, model, brand, item, querystring, currdt);
                    /*querystring = "SELECT ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    }
                    if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');
                    querystring += " ,SUM(inb_qty) QUANTITY,SUM(inb_unit_cost*inb_qty) COST ";
                    querystring += "";

                    querystring += "FROM inr_batch " +
                                " inner join mst_itm on mi_cd=inb_itm_cd " +
                                " inner join mst_itm_brand on mi_brand=mb_cd " +
                                " INNER JOIN mst_itm_model ON MI_MODEL=mm_cd " +
                                " INNER JOIN mst_loc_info info1 ON info1.mli_loc_cd=inb_loc AND info1.mli_cd='CHNL' AND info1.mli_act=1 " +
                                " inner join mst_loc_info info2 ON info2.mli_loc_cd=inb_loc AND info2.mli_cd='SCHNL' AND info2.mli_act=1 ";

                    querystring += " WHERE inb_qty>0 and inb_com ='" + com + "' ";
                    if (chnl != "")
                    {
                        querystring += " AND info1.mli_val='" + chnl + "' ";
                    }
                    if (schnl != "")
                    {
                        querystring += " AND info2.mli_val='" + schnl + "' ";
                    }
                    if (mainCat != "")
                    {
                        querystring += " AND mi_cate_1='" + mainCat + "' ";
                    }
                    if (brand != "")
                    {
                        querystring += " AND mi_brand='" + brand + "' ";
                    }
                    if (itmcd != "")
                    {
                        querystring += " AND mi_cd='" + itmcd + "' ";
                    }
                    if (model != "")
                    {
                        querystring += " AND mi_model='" + model + "' ";
                    }
                    querystring += " GROUP BY ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    } if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');
                    querystring += " ORDER BY ";
                    if (grp1 != "")
                    {
                        querystring += grp1 + ",";
                    }
                    if (grp2 != "")
                    {
                        querystring += grp2 + ",";
                    }
                    if (grp3 != "")
                    {
                        querystring += grp3 + ",";
                    }
                    if (grp4 != "")
                    {
                        querystring += grp4 + ",";
                    }
                    if (grp5 != "")
                    {
                        querystring += grp5 + ",";
                    }
                    if (grp6 != "")
                    {
                        querystring += grp6 + ",";
                    }
                    if (grp7 != "")
                    {
                        querystring += grp7 + ",";
                    }
                    querystring = querystring.TrimEnd(',');
                    querystring = querystring + "";*/
                    #endregion
                }

                DashboardDal.TransactionCommit();
                DashboardDal.ConnectionClose();
                #region description remove
                //if (grp1 == "MI_CD" || grp2 == "MI_CD" || grp3 == "MI_CD" || grp4 == "MI_CD" || grp5 == "MI_CD" || grp6 == "MI_CD" || grp7 == "MI_CD")
                //{
                //    DataTable itmDesc = DashboardDal.getItemdescription();
                //    #region MI_CD                    
                //    if (grp1 == "MI_CD")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmDesc, grp1);
                //    } 
                //    if (grp2 == "MI_CD")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmDesc, grp2);
                //    }
                //    if (grp3 == "MI_CD")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmDesc, grp3);
                //    }
                //    if (grp4 == "MI_CD")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmDesc, grp4);
                //    }
                //    if (grp5 == "MI_CD")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmDesc, grp5);
                //    }
                //    if (grp6 == "MI_CD")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmDesc, grp6);
                //    }
                //    if (grp7 == "MI_CD")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmDesc, grp7);
                //    }
                //    #endregion
                //}
                //if (grp1 == "MI_BRAND" || grp2 == "MI_BRAND" || grp3 == "MI_BRAND" || grp4 == "MI_BRAND" || grp5 == "MI_BRAND" || grp6 == "MI_BRAND" || grp7 == "MI_BRAND")
                //{
                //    DataTable itmBrand = DashboardDal.getItemBrandDesc();
                //    #region MI_BRAND
                //    if (grp1 == "MI_BRAND")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmBrand, grp1);
                //    }
                //    if (grp2 == "MI_BRAND")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmBrand, grp2);
                //    }
                //    if (grp3 == "MI_BRAND")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmBrand, grp3);
                //    }
                //    if (grp4 == "MI_BRAND")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmBrand, grp4);
                //    }
                //    if (grp5 == "MI_BRAND")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmBrand, grp5);
                //    }
                //    if (grp6 == "MI_BRAND")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmBrand, grp6);
                //    }
                //    if (grp7 == "MI_BRAND")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmBrand, grp7);
                //    }
                //    #endregion
                //}
                //if (grp1 == "MI_MODEL" || grp2 == "MI_MODEL" || grp3 == "MI_MODEL" || grp4 == "MI_MODEL" || grp5 == "MI_MODEL" || grp6 == "MI_MODEL" || grp7 == "MI_MODEL")
                //{
                //    DataTable itmModel = DashboardDal.getItemModelDesc();
                //    #region MI_MODEL
                //    if (grp1 == "MI_MODEL")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmModel, grp1);
                //    }
                //    if (grp2 == "MI_MODEL")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmModel, grp2);
                //    }
                //    if (grp3 == "MI_MODEL")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmModel, grp3);
                //    }
                //    if (grp4 == "MI_MODEL")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmModel, grp4);
                //    }
                //    if (grp5 == "MI_MODEL")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmModel, grp5);
                //    }
                //    if (grp6 == "MI_MODEL")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmModel, grp6);
                //    }
                //    if (grp7 == "MI_MODEL")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmModel, grp7);
                //    }
                //    #endregion
                //}
                //if (grp1 == "MI_CATE_1" || grp2 == "MI_CATE_1" || grp3 == "MI_CATE_1" || grp4 == "MI_CATE_1" || grp5 == "MI_CATE_1" || grp6 == "MI_CATE_1" || grp7 == "MI_CATE_1")
                //{
                //    DataTable itmCat1 = DashboardDal.getItemCate1Desc();
                //    #region MI_CATE_1
                //    if (grp1 == "MI_CATE_1")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat1, grp1);
                //    }
                //    if (grp2 == "MI_CATE_1")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat1, grp2);
                //    }
                //    if (grp3 == "MI_CATE_1")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat1, grp3);
                //    }
                //    if (grp4 == "MI_CATE_1")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat1, grp4);
                //    }
                //    if (grp5 == "MI_CATE_1")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat1, grp5);
                //    }
                //    if (grp6 == "MI_CATE_1")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat1, grp6);
                //    }
                //    if (grp7 == "MI_CATE_1")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat1, grp7);
                //    }
                //    #endregion
                //}
                //if (grp1 == "MI_CATE_2" || grp2 == "MI_CATE_2" || grp3 == "MI_CATE_2" || grp4 == "MI_CATE_2" || grp5 == "MI_CATE_2" || grp6 == "MI_CATE_2" || grp7 == "MI_CATE_2")
                //{
                //    DataTable itmCat2 = DashboardDal.getItemCate2Desc();
                //    #region MI_CATE_2
                //    if (grp1 == "MI_CATE_2")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat2, grp1);
                //    }
                //    if (grp2 == "MI_CATE_2")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat2, grp2);
                //    }
                //    if (grp3 == "MI_CATE_2")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat2, grp3);
                //    }
                //    if (grp4 == "MI_CATE_2")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat2, grp4);
                //    }
                //    if (grp5 == "MI_CATE_2")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat2, grp5);
                //    }
                //    if (grp6 == "MI_CATE_2")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat2, grp6);
                //    }
                //    if (grp7 == "MI_CATE_2")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat2, grp7);
                //    }
                //    #endregion
                //}
                //if (grp1 == "MI_CATE_3" || grp2 == "MI_CATE_3" || grp3 == "MI_CATE_3" || grp4 == "MI_CATE_3" || grp5 == "MI_CATE_3" || grp6 == "MI_CATE_3" || grp7 == "MI_CATE_3")
                //{

                //    #region MI_CATE_3
                //    /*DataTable itmCat3 = DashboardDal.getItemCate3Desc();
                //       if (grp1 == "MI_CATE_3")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat3, grp1);
                //    }
                //    if (grp2 == "MI_CATE_3")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat3, grp2);
                //    }
                //    if (grp3 == "MI_CATE_3")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat3, grp3);
                //    }
                //    if (grp4 == "MI_CATE_3")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat3, grp4);
                //    }
                //    if (grp5 == "MI_CATE_3")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat3, grp5);
                //    }
                //    if (grp6 == "MI_CATE_3")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat3, grp6);
                //    }
                //    if (grp7 == "MI_CATE_3")
                //    {
                //        data = JoinTwoDataTablesOnOneColumn(data, itmCat3, grp7);
                //    }*/
                //    #endregion
                //}
                #endregion description remove
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }

            string _filePath = "";
            DataTable _dtHeader = new DataTable();
            //_filePath = ExportExcel2007(_com, _user, _dtHeader, BMSales, out _err);
            //_filePath = ExportExcel2007(_com, _user, BMSales, out _err);
            _filePath = ExportListUsingEPPlus(data, _dtHeader, com, userId, out error);
            if (data.Rows.Count != 0)
            {
                InventoryDAL _inventoryDAL = new InventoryDAL();
                DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(userId);
                if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
                {
                    GeneralDAL _generalDAL = new GeneralDAL();

                    SmtpClient smtpClient = new SmtpClient();
                    MailMessage message = new MailMessage();
                    MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                    smtpClient.Host = _generalDAL.GetMailHost();
                    smtpClient.Port = 25;
                    message.From = fromAddress;
                    string FOOTER = _generalDAL.GetMailFooterMsg();
                    string _email = "";
                    // string _docNo = _docNo.Replace("Normal:", "");
                    _email = "Generated report path as follows" + Environment.NewLine;
                    _email += _filePath + Environment.NewLine + Environment.NewLine;
                    //_email = _email + "Approved #-" + _docNo + " <br><P>";
                    _email = _email + "<br>" + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                    message.To.Add(_dtEmail.Rows[0]["SE_EMAIL"].ToString());
                    //message.Bcc.Add("amilasanjeewa@abansgroup.com");
                    message.Subject = "User Defined Reports";
                    //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                    //message.Bcc.Add(new MailAddress(""));
                    message.IsBodyHtml = false;
                    message.Body = _email;
                    message.IsBodyHtml = true;
                    message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                    // Send SMTP mail
                    try
                    {
                        smtpClient.Send(message);
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }

            return data;
        }
        public bool downloadPNLDetails(string com, string userid, string grp, string cate, List<SELECTED_PC> pc, DateTime frmdt, DateTime todt, string accgrp, out string error)
        {
            error = "";
            bool ret = false;
            string sql = "";
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            _securityDAL.ConnectionOpen();
            DashboardDal.ConnectionOpen();

            if (_securityDAL.Is_Report_DR("BI_BUDGET") == true) DashboardDal.ConnectionOpen_DR();
            try
            {
                string profitcen = "";
                string categories = "";
                if (grp == "PC")
                {
                    if (pc == null || pc.Count == 0)
                    {
                        DataTable pcs = new DataTable("pcs");
                        Int32 haspcper = _securityDAL.getUserSpecialPermission(userid.ToUpper(), com, "PRFRPTALPC");
                        if (haspcper == 0)
                        {
                            pcs = DashboardDal.getUserRepaltedPcs(userid, "PC", "PROFDATA", grp, com);
                        }
                        else
                        {
                            pcs = DashboardDal.getPnlFilAllDet(grp, cate, frmdt, todt, accgrp);
                        }
                        if (pcs.Rows.Count > 0 && pcs.Rows.Count <= 400)
                        {
                            foreach (DataRow row in pcs.Rows)
                            {
                                profitcen += (profitcen != "") ? ",'" + row["RBT_PC"].ToString() + "'" : "'" + row["RBT_PC"].ToString() + "'";
                            }
                            sql = "SELECT  * FROM " +
                            " (SELECT RBT_HED_ORD HED_ORDER,RBT_GRP_ORD GRP_ORDER,rbt_ele_desc ELEMENT,rbt_pc,rbt_val, 0 rbg_val FROM REF_BUD_TRANS@scmrep " +
                            " WHERE rbt_mnth BETWEEN TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                            "AND  TO_NUMBER (TO_CHAR (to_date('" + todt.ToString("dd/MMM/yyyy") + "'), 'mm'))" +
                            " AND rbt_yer=TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'YYYY'))" +
                            "  AND rbt_acc_grp='" + accgrp + "'" +
                            " UNION ALL" +
                            " SELECT RBG_HED_ORD HED_ORDER,RBG_GRP_ORD GRP_ORDER,rbG_ele_desc ELEMENT,rbG_pc rbt_pc,0 rbt_val, rbg_val " +
                            " FROM REF_BUD_TARGET WHERE rbG_mnth BETWEEN TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                            "AND  TO_NUMBER (TO_CHAR (to_date('" + todt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                            "AND rbG_yer=TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'YYYY')) " +
                            " AND rbG_acc_grp='" + accgrp + "'" +
                            " )PIVOT(" +
                            " sum(rbt_val) as ACTUAL,sum(rbg_val) as BUDGET" +
                            " FOR rbt_pc IN (" + profitcen + ")" +
                            " )ORDER BY HED_ORDER,GRP_ORDER,ELEMENT";
                        }
                        else
                        {
                            if (pcs.Rows.Count > 0 && pcs.Rows.Count > 400)
                            {
                                List<List<DataRow>> tabl = SplitDataTable(pcs, 400);
                                string rep = "Report No-";
                                Int32 g = 1;
                                foreach (List<DataRow> dtb in tabl)
                                {
                                    profitcen = "";
                                    foreach (DataRow row in dtb)
                                    {
                                        profitcen += (profitcen != "") ? ",'" + row["RBT_PC"].ToString() + "'" : "'" + row["RBT_PC"].ToString() + "'";
                                    }

                                    sql = "SELECT  * FROM " +
                                " (SELECT RBT_HED_ORD HED_ORDER,RBT_GRP_ORD GRP_ORDER,rbt_ele_desc ELEMENT,rbt_pc,rbt_val, 0 rbg_val FROM REF_BUD_TRANS@scmrep " +
                                " WHERE rbt_mnth BETWEEN TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                                "AND  TO_NUMBER (TO_CHAR (to_date('" + todt.ToString("dd/MMM/yyyy") + "'), 'mm'))" +
                                " AND rbt_yer=TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'YYYY'))" +
                                "  AND rbt_acc_grp='" + accgrp + "'" +
                                " UNION ALL" +
                                " SELECT RBG_HED_ORD HED_ORDER,RBG_GRP_ORD GRP_ORDER,rbG_ele_desc ELEMENT,rbG_pc rbt_pc,0 rbt_val, rbg_val " +
                                " FROM REF_BUD_TARGET WHERE rbG_mnth BETWEEN TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                                "AND  TO_NUMBER (TO_CHAR (to_date('" + todt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                                "AND rbG_yer=TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'YYYY')) " +
                                " AND rbG_acc_grp='" + accgrp + "'" +
                                " )PIVOT(" +
                                " sum(rbt_val) as ACTUAL,sum(rbg_val) as BUDGET" +
                                " FOR rbt_pc IN (" + profitcen + ")" +
                                " )ORDER BY HED_ORDER,GRP_ORDER,ELEMENT";
                                    DataTable dt1 = DashboardDal.getQuertStringDetails(sql);
                                    string err = "";
                                    string path = ExportExcel2007(com, userid + " " + rep + g, dt1, out err);
                                    if (err == "")
                                    {
                                        ret = false;
                                        error = "Please download file in path :" + path;
                                    }
                                    else
                                    {
                                        ret = false;
                                        error = err;
                                        goto Finish;
                                    }
                                    g++;
                                }
                                goto Finish;
                            }
                        }
                    }
                    else
                    {
                        foreach (SELECTED_PC p in pc)
                        {
                            profitcen += (profitcen != "") ? ",'" + p.MSC_CD + "'" : "'" + p.MSC_CD + "'";
                        }
                        string sqlcat1 = "";
                        string sqlcat2 = "";
                        if (cate != "")
                        {
                            sqlcat1 = " and RBT_ITM_CAT1='" + cate + "' ";
                            sqlcat2 = " and RBg_CAT1='" + cate + "' ";
                        }
                        sql = "SELECT  * FROM " +
                            " (SELECT RBT_HED_ORD HED_ORDER,RBT_GRP_ORD GRP_ORDER,rbt_ele_desc ELEMENT,rbt_pc,rbt_val, 0 rbg_val FROM REF_BUD_TRANS@scmrep " +
                            " WHERE rbt_mnth BETWEEN TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                            "AND  TO_NUMBER (TO_CHAR (to_date('" + todt.ToString("dd/MMM/yyyy") + "'), 'mm'))" +
                            " AND rbt_yer=TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'YYYY'))" +
                            "  AND rbt_acc_grp='" + accgrp + "'" + sqlcat1 +
                            " UNION ALL" +
                            " SELECT RBG_HED_ORD HED_ORDER,RBG_GRP_ORD GRP_ORDER,rbG_ele_desc ELEMENT,rbG_pc rbt_pc,0 rbt_val, rbg_val " +
                            " FROM REF_BUD_TARGET WHERE rbG_mnth BETWEEN TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                            "AND  TO_NUMBER (TO_CHAR (to_date('" + todt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                            "AND rbG_yer=TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'YYYY')) " +
                            " AND rbG_acc_grp='" + accgrp + "'" + sqlcat2 +
                            " )PIVOT(" +
                            " sum(rbt_val) as ACTUAL,sum(rbg_val) as BUDGET" +
                            " FOR rbt_pc IN (" + profitcen + ")" +
                            " )ORDER BY HED_ORDER,GRP_ORDER,ELEMENT";
                    }
                }
                else if (grp == "CATE")
                {
                    DataTable cates = DashboardDal.getPnlFilAllDet(grp, cate, frmdt, todt, accgrp);
                    if (cates.Rows.Count > 0)
                    {
                        foreach (DataRow row in cates.Rows)
                        {
                            categories += (categories != "") ? ",'" + row["RBG_CAT1"].ToString() + "'" : "'" + row["RBG_CAT1"].ToString() + "'";
                        }
                        string sqlpc1 = "";
                        string sqlpc2 = "";
                        if (pc != null && pc.Count > 0)
                        {
                            foreach (SELECTED_PC p in pc)
                            {
                                profitcen += (profitcen != "") ? ",'" + p.MSC_CD + "'" : "'" + p.MSC_CD + "'";
                            }
                            sqlpc1 = " and RBT_pc in (" + profitcen + ") ";
                            sqlpc2 = " and RBg_PC IN (" + profitcen + ") ";
                        }
                        else
                        {
                            Int32 haspcper = _securityDAL.getUserSpecialPermission(userid.ToUpper(), com, "PRFRPTALPC");
                            if (haspcper == 0)
                            {
                                DataTable pcs = DashboardDal.getUserRepaltedPcs(userid, "PC", "PROFDATA", accgrp, com);
                                foreach (DataRow row in pcs.Rows)
                                {
                                    profitcen += (profitcen != "") ? ",'" + row["RBT_PC"].ToString() + "'" : "'" + row["RBT_PC"].ToString() + "'";
                                }
                                sqlpc1 = " and RBT_pc in (" + profitcen + ") ";
                                sqlpc2 = " and RBg_PC IN (" + profitcen + ") ";
                            }

                        }
                        sql = "SELECT  * FROM " +
                        " (SELECT RBT_HED_ORD HED_ORDER,RBT_GRP_ORD GRP_ORDER,rbt_ele_desc ELEMENT,RBT_ITM_CAT1,rbt_val, 0 rbg_val FROM REF_BUD_TRANS@scmrep " +
                        " WHERE rbt_mnth BETWEEN TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                        "AND  TO_NUMBER (TO_CHAR (to_date('" + todt.ToString("dd/MMM/yyyy") + "'), 'mm'))" +
                        " AND rbt_yer=TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'YYYY'))" +
                        "  AND rbt_acc_grp='" + accgrp + "'" + sqlpc1 +
                        " UNION ALL" +
                        " SELECT RBG_HED_ORD HED_ORDER,RBG_GRP_ORD GRP_ORDER,rbG_ele_desc ELEMENT,RBg_CAT1 RBT_ITM_CAT1,0 rbt_val, rbg_val " +
                        " FROM REF_BUD_TARGET WHERE rbG_mnth BETWEEN TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                        "AND  TO_NUMBER (TO_CHAR (to_date('" + todt.ToString("dd/MMM/yyyy") + "'), 'mm')) " +
                        "AND rbG_yer=TO_NUMBER (TO_CHAR (to_date('" + frmdt.ToString("dd/MMM/yyyy") + "'), 'YYYY')) " +
                        " AND rbG_acc_grp='" + accgrp + "'" + sqlpc2 +
                        " )PIVOT(" +
                        " sum(rbt_val) as ACTUAL,sum(rbg_val) as BUDGET" +
                        " FOR RBT_ITM_CAT1 IN (" + categories + ")" +
                        " )ORDER BY HED_ORDER,GRP_ORDER,ELEMENT";


                    }

                }
                if (sql != "")
                {
                    DataTable dt = DashboardDal.getQuertStringDetails(sql);

                    if (dt.Rows.Count > 0)
                    {
                        string err = "";
                        string path = ExportExcel2007(com, userid, dt, out err);
                        if (err == "")
                        {
                            ret = true;
                            error = path;
                        }
                        else
                        {
                            ret = false;
                            error = err;
                        }
                    }
                    else if (dt.Rows.Count > 0)
                    {
                        string err = "";
                        string path = ExportExcel2007(com, userid, dt, out err);
                        if (err == "")
                        {
                            ret = true;
                            error = path;
                        }
                        else
                        {
                            ret = false;
                            error = err;
                        }
                    }
                    else
                    {
                        ret = false;
                        error = "No data found for display.";
                    }

                }
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                ret = false;
            }
        Finish:
            DashboardDal.ConnectionClose();
            _securityDAL.ConnectionClose();

            return ret;
        }

        public ProductEvl ProductEvaluation(string company, string Scheem, string Item, string Type, string finratec,
            string cashcommrt, string creditcommrt, string SerIncoRt, string intrsthprt, string DiriyaRt,
            string dpcommrt, string inscommrt, string Pricebook, string Pricelevel, out string err, out List<CashFlow> clist)
        {
            DashboardDal = new DashboardDLL();
            _SalesDAL = new SalesDAL();
            DashboardDal.ConnectionOpen();
            _SalesDAL.ConnectionOpen();
            ProductEvl ob = new ProductEvl();
            clist = new List<CashFlow>();
            try
            {
                err = "";
                MasterItem _item = _SalesDAL.GetItem(company, Item);
                if (_item == null)
                {
                    //invalid
                    err = "Invalid Item";
                    return null;
                }
                else if (_item.Mi_cd == null)
                {
                    //invalid
                    err = "Invalid Item";
                    return null;
                }

                string PB = Pricebook;
                string PL = Pricelevel;
                decimal vatrate = 0;
                decimal _price = LatestBIPrice(company, Item, PB, PL);
                decimal _cost = LatestBICost(company, Item);
                double _taxRate = Convert.ToDouble(TaxCalculation(company, Item, "GOD", _price, 0, true, ref vatrate));
                decimal _TAXVALLL = Convert.ToDecimal(_taxRate);
                decimal _varServiceCharge = 0;
                decimal ServiceIncomeRt = 0;
                decimal _varMgrComm = 0;
                decimal _varInsAmount = 0;
                decimal _varInterestAmt = 0;
                decimal _varHireValue = 0;
                decimal _inscomm = 0;
                decimal _dbcommvalue = 0;
                decimal _cashcommval = 0;
                decimal _cashcommrt = 0;
                decimal _credcommval = 0;
                decimal _credcommrt = 0;
                decimal _downpaymentf = 0;
                decimal _vatfina = 0;
                decimal _finamtf = 0;
                decimal _totinstf = 0;
                decimal _insvatrtf = 0;
                decimal _inscommrtf = 0;
                decimal _finrtf = 13;
                decimal _dpcommrt = 0;
                int avalable = 1;
                HpSchemeDetails _SchemeDetails = new HpSchemeDetails();
                List<CashCommissionDetailRef> _defcash = new List<CashCommissionDetailRef>();
                List<HpSchemeDefinition> _def = new List<HpSchemeDefinition>();
                _price = _price + _TAXVALLL;
                if (_item != null && Type == "CS")
                {
                    if (_item.Mi_cd != null)
                    {
                        _cashcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, Item, "", "", "", "CS");
                    }
                    if (_cashcommrt == 0)
                    {
                        if (_item.Mi_brand != null && _item.Mi_cate_2 != null)
                        {
                            _cashcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", _item.Mi_brand, "", _item.Mi_cate_2, "CS");
                        }
                    }
                    if (_cashcommrt == 0)
                    {
                        if (_item.Mi_brand != null && _item.Mi_cate_1 != null)
                        {
                            _cashcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", _item.Mi_brand, _item.Mi_cate_1, "", "CS");
                        }
                    }
                    if (_cashcommrt == 0)
                    {
                        if (_item.Mi_cate_2 != null)
                        {
                            _cashcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", "", "", _item.Mi_cate_2, "CS");
                        }
                    }
                    if (_cashcommrt == 0)
                    {
                        if (_item.Mi_cate_1 != null)
                        {
                            _cashcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", "", _item.Mi_cate_1, "", "CS");
                        }
                    }
                    if (_cashcommrt == 0)
                    {
                        if (_item.Mi_brand != null)
                        {
                            _cashcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", _item.Mi_brand, "", "", "CS");
                        }
                    }
                    if (_cashcommrt == 0)
                    {

                        _cashcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", "", "", "", "CS");
                    }
                }
                List<CashCommissionDetailRef> _defcred = new List<CashCommissionDetailRef>();
                if (_item != null && Type == "Crd")
                {
                    if (_item.Mi_cd != null)
                    {
                        _credcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, Item, "", "", "", "CRED");
                    }
                    if (_credcommrt == 0)
                    {
                        if (_item.Mi_brand != null && _item.Mi_cate_2 != null)
                        {
                            _credcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", _item.Mi_brand, "", _item.Mi_cate_2, "CRED");
                        }
                    }
                    if (_credcommrt == 0)
                    {
                        if (_item.Mi_brand != null && _item.Mi_cate_1 != null)
                        {
                            _credcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", _item.Mi_brand, _item.Mi_cate_1, "", "CRED");
                        }
                    }
                    if (_credcommrt == 0)
                    {
                        if (_item.Mi_cate_2 != null)
                        {
                            _credcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", "", "", _item.Mi_cate_2, "CRED");
                        }
                    }
                    if (_credcommrt == 0)
                    {
                        if (_item.Mi_cate_1 != null)
                        {
                            _credcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", "", _item.Mi_cate_1, "", "CRED");
                        }
                    }
                    if (_credcommrt == 0)
                    {
                        if (_item.Mi_brand != null)
                        {
                            _credcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", _item.Mi_brand, "", "", "CRED");
                        }
                    }
                    if (_credcommrt == 0)
                    {

                        _credcommrt = _SalesDAL.GetCashCommissionRate(PB, PL, DateTime.Now, "", "", "", "", "CRED");
                    }
                }
                if (cashcommrt != "")
                {
                    if (Convert.ToDecimal(cashcommrt) > 0)
                    {
                        _cashcommrt = Convert.ToDecimal(cashcommrt);
                    }

                }
                if (creditcommrt != "")
                {
                    if (Convert.ToDecimal(creditcommrt) > 0)
                    {
                        _credcommrt = Convert.ToDecimal(creditcommrt);
                    }

                }

                _cashcommval = (_price - _TAXVALLL) * _cashcommrt / 100;
                _credcommval = (_price - _TAXVALLL) * _credcommrt / 100;
                decimal collectbons = 0;
                int _aaproxmonths = 0;
                if (Scheem != "")
                {
                    avalable = 0;
                    //Income Intrest Hp
                    //Cash Commission
                    #region In Hp Intr
                    decimal _UVAT = _TAXVALLL;
                    decimal _TotVat = _TAXVALLL;
                    decimal _discount = 0;
                    decimal _varVATAmt = 0;
                    decimal _IVAT = 0;
                    decimal _varCashPrice = 0;
                    decimal _varInitialVAT = 0;
                    decimal _vDPay = 0;
                    decimal _vdp = 0;
                    decimal _varInsVAT = 0;
                    decimal _varAmountFinance = 0;

                    decimal _NetAmt = 0;
                    decimal _sch = 0;
                    decimal _FP = 0;
                    decimal _inte = 0;
                    decimal _AF = 0;
                    decimal _rnt = 0;
                    decimal _tc = 0;
                    decimal _dpcomm = 0;
                    decimal __collectcomm = 0;


                    _NetAmt = _price;

                    if (_item != null)
                    {
                        if (_item.Mi_cd != null)
                        {
                            _def = _SalesDAL.GetDPCommission(PB, PL, DateTime.Now, Item, "", "", "", Scheem);
                        }
                        if (_def == null || _def.Count == 0)
                        {
                            if (_item.Mi_brand != null && _item.Mi_cate_2 != null)
                            {
                                _def = _SalesDAL.GetDPCommission(PB, PL, DateTime.Now, "", _item.Mi_brand, "", _item.Mi_cate_2, Scheem);
                            }
                        }
                        if (_def == null || _def.Count == 0)
                        {
                            if (_item.Mi_brand != null && _item.Mi_cate_1 != null)
                            {
                                _def = _SalesDAL.GetDPCommission(PB, PL, DateTime.Now, "", _item.Mi_brand, _item.Mi_cate_1, "", Scheem);
                            }
                        }
                        if (_def == null || _def.Count == 0)
                        {
                            if (_item.Mi_cate_2 != null)
                            {
                                _def = _SalesDAL.GetDPCommission(PB, PL, DateTime.Now, "", "", "", _item.Mi_cate_2, Scheem);
                            }
                        }
                        if (_def == null || _def.Count == 0)
                        {
                            if (_item.Mi_cate_1 != null)
                            {
                                _def = _SalesDAL.GetDPCommission(PB, PL, DateTime.Now, "", "", _item.Mi_cate_1, "", Scheem);
                            }
                        }
                        if (_def == null || _def.Count == 0)
                        {
                            if (_item.Mi_brand != null)
                            {
                                _def = _SalesDAL.GetDPCommission(PB, PL, DateTime.Now, "", _item.Mi_brand, "", "", Scheem);
                            }
                        }
                        if (_def == null || _def.Count == 0)
                        {

                            _def = _SalesDAL.GetDPCommission(PB, PL, DateTime.Now, "", "", "", "", Scheem);
                        }
                    }


                    if (_def != null && _def.Count > 0)
                    {
                        avalable = 1;
                        _dpcomm = _def.First().Hpc_dp_comm;
                        __collectcomm = _def.First().Hpc_inst_comm;
                    }
                    else
                    {
                        _def = new List<HpSchemeDefinition>();
                    }

                    List<HpServiceCharges> _ServiceCharges = new List<HpServiceCharges>();

                    _SchemeDetails = _SalesDAL.getSchemeDetails("GPC", "GRUP01", 1, Scheem);
                    HpSchemeType _SchemeType = new HpSchemeType();
                    if (_SchemeDetails.Hsd_cd != null)
                    {


                        //get scheme type__________
                        _SchemeType = _SalesDAL.getSchemeType(_SchemeDetails.Hsd_sch_tp);
                        string _SchTP = _SchemeDetails.Hsd_sch_tp;
                        if (_SchemeType.Hst_sch_cat == "S001" || _SchemeType.Hst_sch_cat == "S002")
                        {
                            //tHARINDU
                            // _fpaywithvat

                            if (_SchemeDetails.Hsd_fpay_withvat == true)
                            {
                                _UVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
                                _varVATAmt = Math.Round(_UVAT, 0);
                                _IVAT = 0;
                            }
                            else
                            {
                                _UVAT = 0;
                                _IVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
                                _varVATAmt = Math.Round(_IVAT, 0);
                            }

                            _varCashPrice = Math.Round(_price - _varVATAmt, 0);

                            if (_def != null && _def.Count > 0 && _def.First().Hpc_fpay_withvat == 1)
                            {
                                if (_def.First().Hpc_is_rt == true)
                                {
                                    if (_SchemeDetails.Hsd_fpay_calwithvat == true)//add by tharanga
                                    {
                                        _vdp = Math.Round((_price) * (_def.First().Hpc_fpay) / 100, 0);
                                        //  _vdp = _vdp - _TAXVALLL;
                                    }
                                    else
                                    {
                                    _vdp = Math.Round((_price - _TAXVALLL) * (_def.First().Hpc_fpay) / 100, 0);
                                        // _vdp = _vdp - _TAXVALLL;
                                }
                                    //_vdp = Math.Round((_price - _TAXVALLL) * (_def.First().Hpc_fpay) / 100, 0);
                                }
                                else
                                {
                                    _vdp = Math.Round(_def.First().Hpc_fpay, 0);
                                }
                            }



                            if (_SchemeDetails.Hsd_fpay_withvat == true)
                            {
                                _varInitialVAT = 0;
                                _vDPay = Math.Round(_vdp - _UVAT, 0);
                                _varInitialVAT = Math.Round(_UVAT, 0);
                            }
                            else
                            {
                                _varInitialVAT = 0;
                                _varInsVAT = Math.Round(_IVAT, 0);
                                _varInsVAT = Math.Round(_UVAT, 0);
                                _vDPay = Math.Round(_vdp, 0);
                            }
                            decimal _MinDPay = _vDPay;
                            _varAmountFinance = Math.Round(_price - _vDPay - _varInitialVAT, 0);
                            decimal _varIntRate = _SchemeDetails.Hsd_intr_rt;
                            if (intrsthprt != "" && Convert.ToDecimal(intrsthprt) > 0)
                            {
                                _varIntRate = Convert.ToDecimal(intrsthprt);
                            }
                            else
                            {
                                intrsthprt = _varIntRate.ToString();
                            }
                            _varInterestAmt = Math.Round(_varAmountFinance * _varIntRate / 100, 0);
                        }
                        else if (_SchemeType.Hst_sch_cat == "S003" || _SchemeType.Hst_sch_cat == "S004")
                        {



                            _ServiceCharges = _SalesDAL.getServiceChargesNew("GPC", "GRUP01", Scheem, DateTime.Now.Date);

                            if (_ServiceCharges != null)
                            {
                                foreach (HpServiceCharges _ser3 in _ServiceCharges)
                                {
                                    if (_ser3.Hps_sch_cd != null)
                                    {
                                        // 1.
                                        if (_SchemeType.Hst_sch_cat == "S004")
                                        {
                                            // 1.1 - Interest free/value/calculate on unit price
                                            if (_ser3.Hps_chk_on == false && _ser3.Hps_chg > 0)
                                            {
                                                var _record = (from _lst in _ServiceCharges
                                                               where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                               select _lst).ToList();

                                                //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                if (_record.Count > 0)
                                                {
                                                    foreach (HpServiceCharges _chr in _record)
                                                    {
                                                        _sch = Math.Round(_chr.Hps_chg, 0);
                                                        _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
                                                    }
                                                }
                                                else
                                                {
                                                    _sch = 0;
                                                    _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
                                                }
                                                _inte = 0;
                                            }
                                            // 1.2 - Interest free/value/calculate on Amount Finance
                                            else if (_ser3.Hps_chk_on == true && _ser3.Hps_chg > 0)
                                            {
                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                   select _lst).ToList();
                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {
                                                            _sch = _chr.Hps_chg;
                                                            _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                            _tc = Math.Round(_FP + _sch, 0);
                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }
                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                        }
                                                    }
                                                    _inte = 0;
                                                }
                                            }
                                            // 1.3 - Interest free/Rate/check on Unit Price/calculate on Unit Price
                                            else if (_ser3.Hps_chk_on == false && _ser3.Hps_rt > 0 && _ser3.Hps_cal_on == false)
                                            {
                                                var _record = (from _lst in _ServiceCharges
                                                               where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                               select _lst).ToList();

                                                //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                if (_record.Count > 0)
                                                {
                                                    foreach (HpServiceCharges _chr in _record)
                                                    {
                                                        _sch = Math.Round(_NetAmt * _chr.Hps_rt / 100, 0);
                                                        /*DILANDA 09MAR2018*/
                                                        if (_SchemeDetails.Hsd_init_serchg == false)
                                                        {
                                                            _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
                                                        }
                                                        else
                                                        /*DILANDA 09MAR2018*/
                                                        {
                                                            _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
                                                            /*DILANDA 09MAR2018*/
                                                            if (_FP < 0)
                                                            {
                                                                _FP = 0;
                                                            }
                                                            /*DILANDA 09MAR2018*/
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    _sch = 0;
                                                    _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
                                                }
                                            }

                                            // 1.4 - Interest free/Rate/Check on Unit Price/calculate on Amount Finance
                                            else if (_ser3.Hps_chk_on == false && _ser3.Hps_rt > 0 && _ser3.Hps_cal_on == true)
                                            {
                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                   select _lst).ToList();
                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {
                                                            _sch = Math.Round(_chr.Hps_rt * _AF / 100, 0);
                                                            /*DILANDA 09MAR2018*/
                                                            if (_SchemeDetails.Hsd_init_serchg == false)
                                                            {
                                                                _rnt = Math.Round((_AF + _sch) / _SchemeDetails.Hsd_term, 0);
                                                                _tc = Math.Round(_FP, 0);
                                                            }
                                                            else
                                                            /*DILANDA 09MAR2018*/
                                                            {
                                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                _tc = Math.Round(_FP + _sch, 0);
                                                            }

                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }
                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                        }
                                                    }
                                                    _inte = 0;
                                                }
                                            }
                                            //1.5 - Interest free/Rate/Check on Amount Finance/calculate on Unit Price
                                            else if (_ser3.Hps_rt > 0 && _ser3.Hps_chk_on == true && _ser3.Hps_cal_on == false)
                                            {
                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                   select _lst).ToList();
                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {
                                                            _sch = Math.Round(_chr.Hps_rt * _NetAmt / 100, 0);
                                                            _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                            _tc = Math.Round(_FP + _sch, 0);

                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }

                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                        }
                                                    }
                                                    _inte = 0;
                                                }
                                            }
                                            /*DILANDA 09MAR2018*/
                                            if (_FP < 0 && _SchemeDetails.Hsd_init_serchg == false)
                                            {
                                                _FP = _rnt;
                                            }

                                            if (_FP < 0 && _SchemeDetails.Hsd_init_serchg == true)
                                            {
                                                _FP = 0;
                                            }
                                            /*DILANDA 09MAR2018*/

                                        //1.6 - Interest free/Rate/Check on Amount Finance/calculate on Amount Finance
                                            else if (_ser3.Hps_rt > 0 && _ser3.Hps_chk_on == true && _ser3.Hps_cal_on == true)
                                            {
                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                   select _lst).ToList();
                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {
                                                            _sch = Math.Round((_chr.Hps_rt * _AF) / 100, 0);

                                                            /*DILANDA 09MAR2018*/
                                                            if (_SchemeDetails.Hsd_init_serchg == true)
                                                            {
                                                                _rnt = Math.Round(_AF / _SchemeDetails.Hsd_term, 0);
                                                                _tc = Math.Round(_FP + _sch, 0);
                                                            }
                                                            else
                                                            {
                                                                _rnt = Math.Round((_AF + _sch) / _SchemeDetails.Hsd_term, 0);
                                                                _tc = Math.Round(_FP, 0);
                                                            }
                                                            /*DILANDA 09MAR2018*/

                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }
                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                        }
                                                    }
                                                    _inte = 0;
                                                }
                                            }

                                            /*DILANDA 09MAR2018*/
                                            if (_FP < 0 && _SchemeDetails.Hsd_init_serchg == false)
                                            {
                                                _FP = _rnt;
                                            }

                                            if (_FP < 0 && _SchemeDetails.Hsd_init_serchg == true)
                                            {
                                                _FP = 0;
                                            }
                                            /*DILANDA 09MAR2018*/

                                            // 1.7 - Interest free/value/calculate on unit price
                                            if (_ser3.Hps_chk_on == false && _ser3.Hps_rt == 0 && _ser3.Hps_cal_on == false && _ser3.Hps_chg == 0)
                                            {
                                                //var _record = (from _lst in _ServiceCharges
                                                //               where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                //               select _lst).ToList();

                                                //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                //if (_record.Count > 0)
                                                //{
                                                //    foreach (HpServiceCharges _chr in _record)
                                                //    {
                                                //        _sch = Math.Round(_chr.Hps_chg, 0);
                                                //        _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
                                                //    }
                                                //}
                                                //else
                                                //{
                                                //    _sch = 0;
                                                //    _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
                                                //}
                                                //_inte = 0;

                                                var _record = (from _lst in _ServiceCharges
                                                               where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                               select _lst).ToList();

                                                //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                if (_record.Count > 0)
                                                {
                                                    foreach (HpServiceCharges _chr in _record)
                                                    {
                                                        _sch = Math.Round(_NetAmt * _chr.Hps_rt / 100, 0);
                                                        _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)) - _sch, 0);
                                                    }
                                                }
                                                else
                                                {
                                                    _sch = 0;
                                                    _FP = Math.Round(((_NetAmt + _sch) / (1 + _SchemeDetails.Hsd_term)), 0);
                                                }

                                                if (_SchemeDetails.Hsd_fpay_withvat == true)
                                                {
                                                    _UVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
                                                    _varVATAmt = Math.Round(_UVAT, 0);
                                                    _IVAT = 0;
                                                }
                                                else
                                                {
                                                    _UVAT = 0;
                                                    _IVAT = Math.Round(_TotVat - (_TotVat * _discount / 100), 0);
                                                    _varVATAmt = Math.Round(_IVAT, 0);
                                                }
                                            }
                                        }
                                        // 2
                                        else if (_SchemeType.Hst_sch_cat == "S003")
                                        {
                                            //2.1 - Interest paid/value/calculate on unit price
                                            if (_ser3.Hps_chk_on == false && _ser3.Hps_chg > 0)
                                            {
                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0); //rssr!scm_Int_Rate / 100
                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    // if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                   select _lst).ToList();

                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {
                                                            _sch = Math.Round(_chr.Hps_chg, 0);
                                                            _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                            _tc = Math.Round(_FP + _sch, 0);

                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }
                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                        }
                                                    }
                                                }
                                            }
                                            // 2.2 - Interest paid/value/calculate on Amount Finance
                                            else if (_ser3.Hps_chk_on == true && _ser3.Hps_chg > 0)
                                            {
                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                   select _lst).ToList();
                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {
                                                            _sch = Math.Round(_chr.Hps_chg, 0);
                                                            _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                            _tc = Math.Round(_FP + _sch, 0);

                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }
                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                        }
                                                    }
                                                }
                                            }
                                            // 2.3 - Interest paid/Rate/Check On Unit Price/calculate on unit price
                                            else if (_ser3.Hps_chk_on == false && _ser3.Hps_rt > 0 && _ser3.Hps_cal_on == false)
                                            {
                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                   select _lst).ToList();
                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {
                                                            _sch = Math.Round((_NetAmt * _chr.Hps_rt) / 100, 0);
                                                            _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                            _tc = Math.Round(_FP + _sch, 0);

                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }
                                                            _AF = Math.Round(_NetAmt - _FP, 0);
                                                        }
                                                    }
                                                }
                                            }
                                            //2.4 - Interest paid/Rate/Check On Unit Price/calculate on Amount Finance
                                            else if (_ser3.Hps_chk_on == false && _ser3.Hps_rt > 0 && _ser3.Hps_cal_on == true)
                                            {
                                                _FP = Math.Round(_NetAmt / _SchemeDetails.Hsd_term, 0);
                                                _AF = Math.Round(_NetAmt - _FP, 0);
                                                _inte = Math.Round((_AF * _SchemeDetails.Hsd_intr_rt) / 100, 0);
                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    //if (_ser.Hps_from_val <= _NetAmt && _ser.Hps_to_val >= _NetAmt)
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _NetAmt && _lst.Hps_to_val >= _NetAmt
                                                                   select _lst).ToList();
                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {

                                                            _sch = Math.Round((_AF * _chr.Hps_rt) / 100, 0);
                                                            _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                            _tc = Math.Round(_FP + _sch, 0);
                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }
                                                            _AF = _NetAmt - _FP;
                                                        }
                                                    }
                                                }
                                            }
                                            // 2.5 - Interest paid/Rate/Check On Amount Finance/calculate on unit price
                                            else if (_ser3.Hps_chk_on == true && _ser3.Hps_rt > 0 && _ser3.Hps_cal_on == false)
                                            {
                                                _FP = _NetAmt / _SchemeDetails.Hsd_term;
                                                _AF = _NetAmt - _FP;
                                                _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                   select _lst).ToList();
                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {

                                                            _sch = Math.Round((_NetAmt * _chr.Hps_rt) / 100, 0);
                                                            _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                            _tc = Math.Round(_FP + _sch, 0);
                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }
                                                            _AF = _NetAmt - _FP;
                                                        }
                                                    }
                                                }
                                            }
                                            //2.6 - Interest paid/Rate/Check On Amount Finance/calculate on Amount Finance
                                            else if (_ser3.Hps_chk_on == true && _ser3.Hps_rt > 0 && _ser3.Hps_cal_on == true)
                                            {
                                                _FP = _NetAmt / _SchemeDetails.Hsd_term;
                                                _AF = _NetAmt - _FP;
                                                _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                while (_tc != _rnt)
                                                {
                                                    //if (_ser.Hps_from_val <= _AF && _ser.Hps_to_val >= _AF)
                                                    var _record = (from _lst in _ServiceCharges
                                                                   where _lst.Hps_from_val <= _AF && _lst.Hps_to_val >= _AF
                                                                   select _lst).ToList();
                                                    if (_record.Count > 0)
                                                    {
                                                        foreach (HpServiceCharges _chr in _record)
                                                        {

                                                            _sch = Math.Round((_AF * _chr.Hps_rt) / 100, 0);
                                                            _inte = (_AF * _SchemeDetails.Hsd_intr_rt) / 100;
                                                            _rnt = Math.Round((_AF + _inte) / _SchemeDetails.Hsd_term, 0);
                                                            _tc = Math.Round(_FP + _sch, 0);

                                                            if ((_tc - _rnt) > 1)
                                                            {
                                                                _FP = _FP - 1;
                                                            }
                                                            else if ((_tc - _rnt) < -1)
                                                            {
                                                                _FP = _FP + 1;
                                                            }
                                                            else
                                                            {
                                                                _tc = _rnt;
                                                            }
                                                            _AF = _NetAmt - _FP;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        _vDPay = _FP;



                                        if (_vDPay < 0)
                                        {

                                            _vDPay = 0;
                                        }

                                        decimal _MinDPay = _vDPay;
                                        _varAmountFinance = Math.Round(_price - _vDPay - _varInitialVAT, 0);
                                        decimal _varIntRate = _SchemeDetails.Hsd_intr_rt;
                                        if (intrsthprt != "" && Convert.ToDecimal(intrsthprt) > 0)
                                        {
                                            _varIntRate = Convert.ToDecimal(intrsthprt);
                                        }
                                        else
                                        {
                                            intrsthprt = _varIntRate.ToString();
                                        }
                                        _varInterestAmt = Math.Round(_varAmountFinance * _varIntRate / 100, 0);

                                    }
                                }
                            }
                        }
                    }
                    #endregion
                    //Service Income
                    #region Service incom
                    List<HpServiceCharges> _ser = _SalesDAL.getServiceChargesNew("GPC", "GRUP01", Scheem, DateTime.Now.Date);

                    if (_ser != null)
                    {
                        foreach (HpServiceCharges _ser1 in _ser)
                        {
                            if (_ser1.Hps_chk_on == true)
                            {
                                //If Val(rsTemp!sch_Value_From) <= Val(txt_AmtFinance.Text) And Val(rsTemp!sch_Value_To) >= Val(txt_AmtFinance.Text) Then
                                if (_ser1.Hps_from_val <= _price && _ser1.Hps_to_val >= _price)
                                {
                                    if (_ser1.Hps_cal_on == true)
                                    {
                                        if (SerIncoRt != "" && Convert.ToDecimal(SerIncoRt) > 0)
                                        {
                                            ServiceIncomeRt = Convert.ToDecimal(SerIncoRt);
                                        }
                                        else
                                        {

                                            ServiceIncomeRt = Convert.ToDecimal(_ser1.Hps_rt);
                                        }
                                        //varServiceCharges = Format((txt_AmtFinance.Text * (rsTemp!sch_Rate) / 100) + (rsTemp!sch_Amount), "0.00")
                                        _varServiceCharge = Math.Round(((_price * ServiceIncomeRt / 100) + _ser1.Hps_chg), 0);
                                        _varMgrComm = Math.Round(((_varServiceCharge * _ser1.Hps_mgr_comm_rt / 100) + _ser1.Hps_mgr_comm_amt), 0);

                                    }
                                    else
                                    {
                                        if (SerIncoRt != "" && Convert.ToDecimal(SerIncoRt) > 0)
                                        {
                                            ServiceIncomeRt = Convert.ToDecimal(SerIncoRt);
                                        }
                                        else
                                        {

                                            ServiceIncomeRt = Convert.ToDecimal(_ser1.Hps_rt);
                                        }
                                        //varServiceCharges = Format((DisCashPrice * (rsTemp!sch_Rate) / 100) + (rsTemp!sch_Amount), "0.00")
                                        _varServiceCharge = Math.Round(((_price * ServiceIncomeRt / 100) + _ser1.Hps_chg), 0);
                                        _varMgrComm = Math.Round(((_varServiceCharge * _ser1.Hps_mgr_comm_rt / 100) + _ser1.Hps_mgr_comm_amt), 0);
                                    }
                                }
                            }
                            else
                            {
                                if (_ser1.Hps_from_val <= _price && _ser1.Hps_to_val >= _price)
                                {
                                    if (_ser1.Hps_cal_on == true)
                                    {
                                        if (SerIncoRt != "" && Convert.ToDecimal(SerIncoRt) > 0)
                                        {
                                            ServiceIncomeRt = Convert.ToDecimal(SerIncoRt);
                                        }
                                        else
                                        {

                                            ServiceIncomeRt = Convert.ToDecimal(_ser1.Hps_rt);
                                        }
                                        //_varServiceCharge = Math.Round(((_price * ServiceIncomeRt / 100) + _ser1.Hps_chg), 0);
                                        _varServiceCharge = Math.Round(((_varAmountFinance * ServiceIncomeRt / 100) + _ser1.Hps_chg), 0);
                                        _varMgrComm = Math.Round(((_varServiceCharge * _ser1.Hps_mgr_comm_rt / 100) + _ser1.Hps_mgr_comm_amt), 0);
                                    }
                                    else
                                    {
                                        if (SerIncoRt != "" && Convert.ToDecimal(SerIncoRt) > 0)
                                        {
                                            ServiceIncomeRt = Convert.ToDecimal(SerIncoRt);
                                        }
                                        else
                                        {

                                            ServiceIncomeRt = Convert.ToDecimal(_ser1.Hps_rt);
                                        }
                                        _varServiceCharge = Math.Round(((_price * ServiceIncomeRt / 100) + _ser1.Hps_chg), 0);
                                        _varMgrComm = Math.Round(((_varServiceCharge * _ser1.Hps_mgr_comm_rt / 100) + _ser1.Hps_mgr_comm_amt), 0);
                                    }
                                }
                            }

                        }
                    }
                    #endregion

                    //Diriya
                    #region Diriya
                    bool tempIns = false;
                    bool _getIns = false;
                    decimal _vVal = 0;
                    decimal _varFInsAmount = 0;
                    _varHireValue = Math.Round(_price + _varInterestAmt + _varServiceCharge, 0);
                    decimal _varInsVATRate = 0;
                    decimal _varInsCommRate = 0;
                    MasterItem _masterItemDetails = new MasterItem();
                    _masterItemDetails = _item;

                    if (_masterItemDetails.Mi_insu_allow == true)
                    {
                        tempIns = true;
                    }

                    List<HpInsuranceDefinition> _ser2 = _SalesDAL.GetInsuDefinition(Scheem, "GPC", "GRUP01", DateTime.Now.Date);

                    if (_ser2 != null)
                    {
                        foreach (HpInsuranceDefinition _ser1 in _ser2)
                        {
                            _getIns = false;
                            if (_ser1.Hpi_chk_on == "UP")
                            {
                                if (_ser1.Hpi_from_val <= _price && _ser1.Hpi_to_val >= _price)
                                {
                                    if (_ser1.Hpi_cal_on == "UP")
                                    {
                                        _vVal = _price;
                                    }
                                    else if (_ser1.Hpi_cal_on == "AF")
                                    {
                                        _vVal = _varAmountFinance;
                                    }
                                    else if (_ser1.Hpi_cal_on == "HP")
                                    {
                                        _vVal = _price;
                                    }
                                    _getIns = true;
                                }
                            }
                            else if (_ser1.Hpi_chk_on == "AF")
                            {
                                if (_ser1.Hpi_from_val <= _varAmountFinance && _ser1.Hpi_to_val >= _varAmountFinance)
                                {
                                    if (_ser1.Hpi_cal_on == "UP")
                                    {
                                        _vVal = _price;
                                    }
                                    else if (_ser1.Hpi_cal_on == "AF")
                                    {
                                        _vVal = _varAmountFinance;
                                    }
                                    else if (_ser1.Hpi_cal_on == "HP")
                                    {
                                        _vVal = Math.Round(_price + _varInterestAmt + _varServiceCharge, 0);

                                    }
                                    _getIns = true;
                                }
                            }
                            else if (_ser1.Hpi_chk_on == "HP")
                            {
                                if (_ser1.Hpi_from_val <= _varHireValue && _ser1.Hpi_to_val >= _varHireValue)
                                {
                                    if (_ser1.Hpi_cal_on == "UP")
                                    {
                                        _vVal = _price;
                                    }
                                    else if (_ser1.Hpi_cal_on == "AF")
                                    {
                                        _vVal = _varAmountFinance;
                                    }
                                    else if (_ser1.Hpi_cal_on == "HP")
                                    {
                                        _vVal = _varHireValue;
                                    }
                                    _getIns = true;

                                }
                            }
                            if (_getIns == true)
                            {
                                if (_SchemeDetails.Hsd_init_insu == true)
                                {
                                    //vFInsAmt = Format(Round(rsIns!isu_Amount + (Val(vVal) / 100 * rsIns!isu_Rate)), "0.00")
                                    if (_ser1.Hpi_ins_isrt == true)
                                    {
                                        if (DiriyaRt != "" && Convert.ToDecimal(DiriyaRt) > 0)
                                        {
                                            _ser1.Hpi_ins_val = Convert.ToDecimal(DiriyaRt);
                                        }
                                        else
                                        {
                                            DiriyaRt = _ser1.Hpi_ins_val.ToString();
                                        }

                                        _varFInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                        _varInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                    }
                                    else
                                    {
                                        if (DiriyaRt != "" && Convert.ToDecimal(DiriyaRt) > 0)
                                        {
                                            _ser1.Hpi_ins_val = Convert.ToDecimal(DiriyaRt);
                                        }
                                        else
                                        {
                                            DiriyaRt = _ser1.Hpi_ins_val.ToString();
                                        }
                                        _varFInsAmount = _ser1.Hpi_ins_val;
                                        _varInsAmount = _ser1.Hpi_ins_val;
                                    }

                                }
                                else
                                {
                                    if (_ser1.Hpi_ins_isrt == true)
                                    {
                                        if (DiriyaRt != "" && Convert.ToDecimal(DiriyaRt) > 0)
                                        {
                                            _ser1.Hpi_ins_val = Convert.ToDecimal(DiriyaRt);
                                        }
                                        else
                                        {
                                            DiriyaRt = _ser1.Hpi_ins_val.ToString();
                                        }
                                        _varFInsAmount = 0;
                                        _varInsAmount = Math.Round(_vVal / 100 * _ser1.Hpi_ins_val, 0);
                                    }
                                    else
                                    {
                                        if (DiriyaRt != "" && Convert.ToDecimal(DiriyaRt) > 0)
                                        {
                                            _ser1.Hpi_ins_val = Convert.ToDecimal(DiriyaRt);
                                        }
                                        else
                                        {
                                            DiriyaRt = _ser1.Hpi_ins_val.ToString();
                                        }
                                        _varFInsAmount = 0;
                                        _varInsAmount = _ser1.Hpi_ins_val;
                                    }
                                }

                                _varInsVATRate = _ser1.Hpi_vat_rt;
                                _insvatrtf = _ser1.Hpi_vat_rt;
                                if (_ser1.Hpi_comm_isrt == true)
                                {
                                    _varInsCommRate = _ser1.Hpi_comm;
                                }
                                _inscommrtf = _varInsCommRate;
                            }

                        }

                    }
                    #endregion

                    if (inscommrt != "" && Convert.ToDecimal(inscommrt) > 0)
                    {
                        _varInsCommRate = Convert.ToDecimal(inscommrt);
                    }
                    else
                    {
                        inscommrt = _varInsCommRate.ToString();
                    }

                    decimal _vatAmt = _varFInsAmount / (100 + _varInsVATRate) * _varInsVATRate;
                    _inscomm = (_varFInsAmount - _vatAmt) / 100 * _varInsCommRate;
                    _downpaymentf = _vDPay;
                    _vatfina = _UVAT;
                    _finamtf = _varAmountFinance;
                    _totinstf = _varInterestAmt;

                    if (dpcommrt != "" && Convert.ToDecimal(dpcommrt) > 0)
                    {
                        _dpcomm = Convert.ToDecimal(dpcommrt);
                    }
                    else
                    {
                        dpcommrt = _dpcomm.ToString();
                    }

                    _dpcommrt = _dpcomm;
                    _dbcommvalue = (_vDPay * _dpcomm / 100) + (_varAmountFinance + _varInterestAmt) * __collectcomm / 100;
                }
                decimal _dpcomreal = 0;
                _dpcomreal = (_downpaymentf * _dpcommrt / 100);
                decimal monthn = 0;
                decimal _servicef = 0;
                decimal _vatf = 0;
                bool init_ser = false;
                bool init_insu = false;
                decimal paybser = 0;
                decimal paybdir = 0;
                decimal paybvat = 0;
                if (Scheem != "")
                {

                    if (finratec != "0" && finratec != "")
                    {
                        _finrtf = Convert.ToDecimal(finratec);
                    }

                    //Finance Cost
                    decimal initialfin_cost = (_cost * _finrtf * 3) / (100 * _SchemeDetails.Hsd_term);
                    decimal paybackcost = _downpaymentf - _dpcomreal - _cost - initialfin_cost;
                    //_SchemeDetails
                    decimal _rental = (_finamtf + _totinstf) / _SchemeDetails.Hsd_term;

                    if (_SchemeDetails.Hsd_init_serchg == false)
                    {
                        _servicef = _varServiceCharge / _SchemeDetails.Hsd_term;
                        paybackcost = paybackcost + _servicef;
                        init_ser = true;
                        paybser = _servicef;
                    }
                    else
                    {
                        _servicef = _varServiceCharge;
                        paybackcost = paybackcost + _varServiceCharge;
                        paybser = 0;
                    }
                    decimal _diriyaf = 0;
                    if (_SchemeDetails.Hsd_init_insu == false)
                    {
                        _diriyaf = _varInsAmount / _SchemeDetails.Hsd_term;
                        paybackcost = paybackcost + _diriyaf;
                        init_insu = true;
                        paybdir = _diriyaf;
                    }
                    else
                    {
                        _diriyaf = _varInsAmount;
                        paybackcost = paybackcost + _varInsAmount;
                        _diriyaf = 0;
                    }

                    if (_SchemeDetails.Hsd_fpay_withvat == false)
                    {
                        _vatf = _vatfina / _SchemeDetails.Hsd_term;
                        paybackcost = paybackcost + _vatf;
                        paybvat = _vatf;
                    }
                    else
                    {
                        paybackcost = paybackcost + _vatfina;
                        paybvat = 0;
                    }
                    decimal _commf = 0;
                    _commf = _commf + _rental;
                    if (_SchemeDetails._hsd_is_com_ser_chg == 1)
                    {
                        _commf = _commf + _servicef;
                    }
                    if (_SchemeDetails.Hsd_comm_on_vat == true)
                    {
                        _commf = _commf + _vatf;
                    }
                    //_def.First().Hpc_inst_comm;
                    if (_def != null && _def.Count > 0)
                    {
                        _commf = _commf * _def.First().Hpc_inst_comm / 100;
                    }


                    decimal _diriyacommf = (_diriyaf - (_diriyaf * _insvatrtf / 100) * _inscommrtf / 100);
                    decimal _collecbonsf = (_rental + (_varServiceCharge / _SchemeDetails.Hsd_term)) * Convert.ToDecimal(4.75) / 100;
                    finratec = finratec.Replace("%", "");

                    if (finratec != "0" && finratec != "")
                    {
                        _finrtf = Convert.ToDecimal(finratec);
                    }

                    if (_SchemeDetails.Hsd_term > 0 && _SchemeDetails.Hsd_term <= 12)
                    {
                        #region cashflow 12
                        #region Down Payt & insta
                        CashFlow _cob = new CashFlow();
                        _cob.Name = "Down Payt & insta";
                        _cob.Month_0 = _downpaymentf;
                        _cob.Month_1 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_2 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_3 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_4 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_5 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_6 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_7 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_8 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_9 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_10 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_11 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_12 = _finamtf / _SchemeDetails.Hsd_term;
                        clist.Add(_cob);
                        #endregion

                        #region Ser Chg
                        _cob = new CashFlow();
                        _cob.Name = "Ser Chg";
                        if (_SchemeDetails.Hsd_init_serchg == false)
                        {
                            decimal _servicefccc = _varServiceCharge / _SchemeDetails.Hsd_term;
                            _cob.Month_0 = 0;
                            _cob.Month_1 = _servicefccc;
                            _cob.Month_2 = _servicefccc;
                            _cob.Month_3 = _servicefccc;
                            _cob.Month_4 = _servicefccc;
                            _cob.Month_5 = _servicefccc;
                            _cob.Month_6 = _servicefccc;
                            _cob.Month_7 = _servicefccc;
                            _cob.Month_8 = _servicefccc;
                            _cob.Month_9 = _servicefccc;
                            _cob.Month_10 = _servicefccc;
                            _cob.Month_11 = _servicefccc;
                            _cob.Month_12 = _servicefccc;
                        }
                        else
                        {
                            _servicef = _varServiceCharge;
                            _cob.Month_0 = _varServiceCharge;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }

                        clist.Add(_cob);
                        #endregion
                        #region Diriya
                        _cob = new CashFlow();
                        _cob.Name = "Diriya";
                        if (_SchemeDetails.Hsd_init_insu == false)
                        {
                            decimal _diriyafccc = _varInsAmount / _SchemeDetails.Hsd_term;
                            _cob.Month_0 = _diriyafccc;
                            _cob.Month_1 = _diriyafccc;
                            _cob.Month_2 = _diriyafccc;
                            _cob.Month_3 = _diriyafccc;
                            _cob.Month_4 = _diriyafccc;
                            _cob.Month_5 = _diriyafccc;
                            _cob.Month_6 = _diriyafccc;
                            _cob.Month_7 = _diriyafccc;
                            _cob.Month_8 = _diriyafccc;
                            _cob.Month_9 = _diriyafccc;
                            _cob.Month_10 = _diriyafccc;
                            _cob.Month_11 = _diriyafccc;
                            _cob.Month_12 = _diriyafccc;
                        }
                        else
                        {
                            _cob.Month_0 = _varInsAmount;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }
                        clist.Add(_cob);
                        #endregion
                        #region Commission DP & Col
                        _cob = new CashFlow();
                        _cob.Name = "Commission DP & Col";
                        _cob.Month_0 = _dpcomreal * -1;
                        _cob.Month_1 = _commf * -1;
                        _cob.Month_2 = _commf * -1;
                        _cob.Month_3 = _commf * -1;
                        _cob.Month_4 = _commf * -1;
                        _cob.Month_5 = _commf * -1;
                        _cob.Month_6 = _commf * -1;
                        _cob.Month_7 = _commf * -1;
                        _cob.Month_8 = _commf * -1;
                        _cob.Month_9 = _commf * -1;
                        _cob.Month_10 = _commf * -1;
                        _cob.Month_11 = _commf * -1;
                        _cob.Month_12 = _commf * -1;
                        clist.Add(_cob);
                        #endregion
                        #region Vat Payment
                        _cob = new CashFlow();
                        _cob.Name = "Vat Payment";
                        if (_SchemeDetails.Hsd_fpay_withvat == false)
                        {
                            _cob.Month_0 = _vatf * -1;
                            _cob.Month_1 = _vatf * -1;
                            _cob.Month_2 = _vatf * -1;
                            _cob.Month_3 = _vatf * -1;
                            _cob.Month_4 = _vatf * -1;
                            _cob.Month_5 = _vatf * -1;
                            _cob.Month_6 = _vatf * -1;
                            _cob.Month_7 = _vatf * -1;
                            _cob.Month_8 = _vatf * -1;
                            _cob.Month_9 = _vatf * -1;
                            _cob.Month_10 = _vatf * -1;
                            _cob.Month_11 = _vatf * -1;
                            _cob.Month_12 = _vatf * -1;
                        }
                        else
                        {
                            _cob.Month_0 = _vatfina * -1;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }
                        clist.Add(_cob);
                        #endregion
                        #region Coll Bonus-4.75%
                        _cob = new CashFlow();
                        _cob.Name = "Coll Bonus-4.75%";
                        _cob.Month_0 = 0;
                        _cob.Month_1 = _collecbonsf * -1;
                        _cob.Month_2 = _collecbonsf * -1;
                        _cob.Month_3 = _collecbonsf * -1;
                        _cob.Month_4 = _collecbonsf * -1;
                        _cob.Month_5 = _collecbonsf * -1;
                        _cob.Month_6 = _collecbonsf * -1;
                        _cob.Month_7 = _collecbonsf * -1;
                        _cob.Month_8 = _collecbonsf * -1;
                        _cob.Month_9 = _collecbonsf * -1;
                        _cob.Month_10 = _collecbonsf * -1;
                        _cob.Month_11 = _collecbonsf * -1;
                        _cob.Month_12 = _collecbonsf * -1;
                        clist.Add(_cob);
                        #endregion
                        #endregion
                    }

                    if (_SchemeDetails.Hsd_term > 12 && _SchemeDetails.Hsd_term <= 24)
                    {
                        #region cashflow 24
                        #region Down Payt & insta
                        CashFlow _cob = new CashFlow();
                        _cob.Name = "Down Payt & insta";
                        _cob.Month_0 = _downpaymentf;
                        _cob.Month_1 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_2 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_3 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_4 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_5 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_6 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_7 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_8 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_9 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_10 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_11 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_12 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_13 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_14 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_15 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_16 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_17 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_18 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_19 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_20 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_21 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_22 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_23 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_24 = _finamtf / _SchemeDetails.Hsd_term;
                        clist.Add(_cob);
                        #endregion

                        #region Ser Chg
                        _cob = new CashFlow();
                        _cob.Name = "Ser Chg";
                        if (_SchemeDetails.Hsd_init_serchg == false)
                        {
                            decimal _servicefccc = _varServiceCharge / _SchemeDetails.Hsd_term;
                            _cob.Month_0 = 0;
                            _cob.Month_1 = _servicefccc;
                            _cob.Month_2 = _servicefccc;
                            _cob.Month_3 = _servicefccc;
                            _cob.Month_4 = _servicefccc;
                            _cob.Month_5 = _servicefccc;
                            _cob.Month_6 = _servicefccc;
                            _cob.Month_7 = _servicefccc;
                            _cob.Month_8 = _servicefccc;
                            _cob.Month_9 = _servicefccc;
                            _cob.Month_10 = _servicefccc;
                            _cob.Month_11 = _servicefccc;
                            _cob.Month_12 = _servicefccc;
                            _cob.Month_13 = _servicefccc;
                            _cob.Month_14 = _servicefccc;
                            _cob.Month_15 = _servicefccc;
                            _cob.Month_16 = _servicefccc;
                            _cob.Month_17 = _servicefccc;
                            _cob.Month_18 = _servicefccc;
                            _cob.Month_19 = _servicefccc;
                            _cob.Month_20 = _servicefccc;
                            _cob.Month_21 = _servicefccc;
                            _cob.Month_22 = _servicefccc;
                            _cob.Month_23 = _servicefccc;
                            _cob.Month_24 = _servicefccc;
                        }
                        else
                        {
                            _servicef = _varServiceCharge;
                            _cob.Month_0 = _varServiceCharge;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }

                        clist.Add(_cob);
                        #endregion
                        #region Diriya
                        _cob = new CashFlow();
                        _cob.Name = "Diriya";
                        if (_SchemeDetails.Hsd_init_insu == false)
                        {
                            decimal _diriyafccc = _varInsAmount / _SchemeDetails.Hsd_term;
                            _cob.Month_0 = _diriyafccc;
                            _cob.Month_1 = _diriyafccc;
                            _cob.Month_2 = _diriyafccc;
                            _cob.Month_3 = _diriyafccc;
                            _cob.Month_4 = _diriyafccc;
                            _cob.Month_5 = _diriyafccc;
                            _cob.Month_6 = _diriyafccc;
                            _cob.Month_7 = _diriyafccc;
                            _cob.Month_8 = _diriyafccc;
                            _cob.Month_9 = _diriyafccc;
                            _cob.Month_10 = _diriyafccc;
                            _cob.Month_11 = _diriyafccc;
                            _cob.Month_12 = _diriyafccc;
                            _cob.Month_13 = _diriyafccc;
                            _cob.Month_14 = _diriyafccc;
                            _cob.Month_15 = _diriyafccc;
                            _cob.Month_16 = _diriyafccc;
                            _cob.Month_17 = _diriyafccc;
                            _cob.Month_18 = _diriyafccc;
                            _cob.Month_19 = _diriyafccc;
                            _cob.Month_20 = _diriyafccc;
                            _cob.Month_21 = _diriyafccc;
                            _cob.Month_22 = _diriyafccc;
                            _cob.Month_23 = _diriyafccc;
                            _cob.Month_24 = _diriyafccc;
                        }
                        else
                        {
                            _cob.Month_0 = _varInsAmount;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }
                        clist.Add(_cob);
                        #endregion
                        #region Commission DP & Col
                        _cob = new CashFlow();
                        _cob.Name = "Commission DP & Col";
                        _cob.Month_0 = _dpcomreal * -1;
                        _cob.Month_1 = _commf * -1;
                        _cob.Month_2 = _commf * -1;
                        _cob.Month_3 = _commf * -1;
                        _cob.Month_4 = _commf * -1;
                        _cob.Month_5 = _commf * -1;
                        _cob.Month_6 = _commf * -1;
                        _cob.Month_7 = _commf * -1;
                        _cob.Month_8 = _commf * -1;
                        _cob.Month_9 = _commf * -1;
                        _cob.Month_10 = _commf * -1;
                        _cob.Month_11 = _commf * -1;
                        _cob.Month_12 = _commf * -1;
                        _cob.Month_13 = _commf * -1;
                        _cob.Month_14 = _commf * -1;
                        _cob.Month_15 = _commf * -1;
                        _cob.Month_16 = _commf * -1;
                        _cob.Month_17 = _commf * -1;
                        _cob.Month_18 = _commf * -1;
                        _cob.Month_19 = _commf * -1;
                        _cob.Month_20 = _commf * -1;
                        _cob.Month_21 = _commf * -1;
                        _cob.Month_22 = _commf * -1;
                        _cob.Month_23 = _commf * -1;
                        _cob.Month_24 = _commf * -1;
                        clist.Add(_cob);
                        #endregion
                        #region Vat Payment
                        _cob = new CashFlow();
                        _cob.Name = "Vat Payment";
                        if (_SchemeDetails.Hsd_fpay_withvat == false)
                        {
                            _cob.Month_0 = _vatf * -1;
                            _cob.Month_1 = _vatf * -1;
                            _cob.Month_2 = _vatf * -1;
                            _cob.Month_3 = _vatf * -1;
                            _cob.Month_4 = _vatf * -1;
                            _cob.Month_5 = _vatf * -1;
                            _cob.Month_6 = _vatf * -1;
                            _cob.Month_7 = _vatf * -1;
                            _cob.Month_8 = _vatf * -1;
                            _cob.Month_9 = _vatf * -1;
                            _cob.Month_10 = _vatf * -1;
                            _cob.Month_11 = _vatf * -1;
                            _cob.Month_12 = _vatf * -1;
                            _cob.Month_13 = _vatf * -1;
                            _cob.Month_14 = _vatf * -1;
                            _cob.Month_15 = _vatf * -1;
                            _cob.Month_16 = _vatf * -1;
                            _cob.Month_17 = _vatf * -1;
                            _cob.Month_18 = _vatf * -1;
                            _cob.Month_19 = _vatf * -1;
                            _cob.Month_20 = _vatf * -1;
                            _cob.Month_21 = _vatf * -1;
                            _cob.Month_22 = _vatf * -1;
                            _cob.Month_23 = _vatf * -1;
                            _cob.Month_24 = _vatf * -1;
                        }
                        else
                        {
                            _cob.Month_0 = _vatfina * -1;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }
                        clist.Add(_cob);
                        #endregion
                        #region Coll Bonus-4.75%
                        _cob = new CashFlow();
                        _cob.Name = "Coll Bonus-4.75%";
                        _cob.Month_0 = 0;
                        _cob.Month_1 = _collecbonsf * -1;
                        _cob.Month_2 = _collecbonsf * -1;
                        _cob.Month_3 = _collecbonsf * -1;
                        _cob.Month_4 = _collecbonsf * -1;
                        _cob.Month_5 = _collecbonsf * -1;
                        _cob.Month_6 = _collecbonsf * -1;
                        _cob.Month_7 = _collecbonsf * -1;
                        _cob.Month_8 = _collecbonsf * -1;
                        _cob.Month_9 = _collecbonsf * -1;
                        _cob.Month_10 = _collecbonsf * -1;
                        _cob.Month_11 = _collecbonsf * -1;
                        _cob.Month_12 = _collecbonsf * -1;
                        _cob.Month_13 = _collecbonsf * -1;
                        _cob.Month_14 = _collecbonsf * -1;
                        _cob.Month_15 = _collecbonsf * -1;
                        _cob.Month_16 = _collecbonsf * -1;
                        _cob.Month_17 = _collecbonsf * -1;
                        _cob.Month_18 = _collecbonsf * -1;
                        _cob.Month_19 = _collecbonsf * -1;
                        _cob.Month_20 = _collecbonsf * -1;
                        _cob.Month_21 = _collecbonsf * -1;
                        _cob.Month_22 = _collecbonsf * -1;
                        _cob.Month_23 = _collecbonsf * -1;
                        _cob.Month_24 = _collecbonsf * -1;
                        clist.Add(_cob);
                        #endregion
                        #endregion
                    }
                    if (_SchemeDetails.Hsd_term > 24 && _SchemeDetails.Hsd_term <= 36)
                    {
                        #region cashflow 36
                        #region Down Payt & insta
                        CashFlow _cob = new CashFlow();
                        _cob.Name = "Down Payt & insta";
                        _cob.Month_0 = _downpaymentf;
                        _cob.Month_1 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_2 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_3 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_4 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_5 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_6 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_7 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_8 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_9 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_10 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_11 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_12 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_13 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_14 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_15 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_16 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_17 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_18 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_19 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_20 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_21 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_22 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_23 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_24 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_25 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_26 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_27 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_28 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_29 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_30 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_31 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_32 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_33 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_34 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_35 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_36 = _finamtf / _SchemeDetails.Hsd_term;
                        clist.Add(_cob);
                        #endregion

                        #region Ser Chg
                        _cob = new CashFlow();
                        _cob.Name = "Ser Chg";
                        if (_SchemeDetails.Hsd_init_serchg == false)
                        {
                            decimal _servicefccc = _varServiceCharge / _SchemeDetails.Hsd_term;
                            _cob.Month_0 = 0;
                            _cob.Month_1 = _servicefccc;
                            _cob.Month_2 = _servicefccc;
                            _cob.Month_3 = _servicefccc;
                            _cob.Month_4 = _servicefccc;
                            _cob.Month_5 = _servicefccc;
                            _cob.Month_6 = _servicefccc;
                            _cob.Month_7 = _servicefccc;
                            _cob.Month_8 = _servicefccc;
                            _cob.Month_9 = _servicefccc;
                            _cob.Month_10 = _servicefccc;
                            _cob.Month_11 = _servicefccc;
                            _cob.Month_12 = _servicefccc;
                            _cob.Month_13 = _servicefccc;
                            _cob.Month_14 = _servicefccc;
                            _cob.Month_15 = _servicefccc;
                            _cob.Month_16 = _servicefccc;
                            _cob.Month_17 = _servicefccc;
                            _cob.Month_18 = _servicefccc;
                            _cob.Month_19 = _servicefccc;
                            _cob.Month_20 = _servicefccc;
                            _cob.Month_21 = _servicefccc;
                            _cob.Month_22 = _servicefccc;
                            _cob.Month_23 = _servicefccc;
                            _cob.Month_24 = _servicefccc;
                            _cob.Month_25 = _servicefccc;
                            _cob.Month_26 = _servicefccc;
                            _cob.Month_27 = _servicefccc;
                            _cob.Month_28 = _servicefccc;
                            _cob.Month_29 = _servicefccc;
                            _cob.Month_30 = _servicefccc;
                            _cob.Month_31 = _servicefccc;
                            _cob.Month_32 = _servicefccc;
                            _cob.Month_33 = _servicefccc;
                            _cob.Month_34 = _servicefccc;
                            _cob.Month_35 = _servicefccc;
                            _cob.Month_36 = _servicefccc;
                        }
                        else
                        {
                            _servicef = _varServiceCharge;
                            _cob.Month_0 = _varServiceCharge;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }

                        clist.Add(_cob);
                        #endregion
                        #region Diriya
                        _cob = new CashFlow();
                        _cob.Name = "Diriya";
                        if (_SchemeDetails.Hsd_init_insu == false)
                        {
                            decimal _diriyafccc = _varInsAmount / _SchemeDetails.Hsd_term;
                            _cob.Month_0 = _diriyafccc;
                            _cob.Month_1 = _diriyafccc;
                            _cob.Month_2 = _diriyafccc;
                            _cob.Month_3 = _diriyafccc;
                            _cob.Month_4 = _diriyafccc;
                            _cob.Month_5 = _diriyafccc;
                            _cob.Month_6 = _diriyafccc;
                            _cob.Month_7 = _diriyafccc;
                            _cob.Month_8 = _diriyafccc;
                            _cob.Month_9 = _diriyafccc;
                            _cob.Month_10 = _diriyafccc;
                            _cob.Month_11 = _diriyafccc;
                            _cob.Month_12 = _diriyafccc;
                            _cob.Month_13 = _diriyafccc;
                            _cob.Month_14 = _diriyafccc;
                            _cob.Month_15 = _diriyafccc;
                            _cob.Month_16 = _diriyafccc;
                            _cob.Month_17 = _diriyafccc;
                            _cob.Month_18 = _diriyafccc;
                            _cob.Month_19 = _diriyafccc;
                            _cob.Month_20 = _diriyafccc;
                            _cob.Month_21 = _diriyafccc;
                            _cob.Month_22 = _diriyafccc;
                            _cob.Month_23 = _diriyafccc;
                            _cob.Month_24 = _diriyafccc;
                            _cob.Month_25 = _diriyafccc;
                            _cob.Month_26 = _diriyafccc;
                            _cob.Month_27 = _diriyafccc;
                            _cob.Month_28 = _diriyafccc;
                            _cob.Month_29 = _diriyafccc;
                            _cob.Month_30 = _diriyafccc;
                            _cob.Month_31 = _diriyafccc;
                            _cob.Month_32 = _diriyafccc;
                            _cob.Month_33 = _diriyafccc;
                            _cob.Month_34 = _diriyafccc;
                            _cob.Month_35 = _diriyafccc;
                            _cob.Month_36 = _diriyafccc;
                        }
                        else
                        {
                            _cob.Month_0 = _varInsAmount;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }
                        clist.Add(_cob);
                        #endregion
                        #region Commission DP & Col
                        _cob = new CashFlow();
                        _cob.Name = "Commission DP & Col";
                        _cob.Month_0 = _dpcomreal * -1;
                        _cob.Month_1 = _commf * -1;
                        _cob.Month_2 = _commf * -1;
                        _cob.Month_3 = _commf * -1;
                        _cob.Month_4 = _commf * -1;
                        _cob.Month_5 = _commf * -1;
                        _cob.Month_6 = _commf * -1;
                        _cob.Month_7 = _commf * -1;
                        _cob.Month_8 = _commf * -1;
                        _cob.Month_9 = _commf * -1;
                        _cob.Month_10 = _commf * -1;
                        _cob.Month_11 = _commf * -1;
                        _cob.Month_12 = _commf * -1;
                        _cob.Month_13 = _commf * -1;
                        _cob.Month_14 = _commf * -1;
                        _cob.Month_15 = _commf * -1;
                        _cob.Month_16 = _commf * -1;
                        _cob.Month_17 = _commf * -1;
                        _cob.Month_18 = _commf * -1;
                        _cob.Month_19 = _commf * -1;
                        _cob.Month_20 = _commf * -1;
                        _cob.Month_21 = _commf * -1;
                        _cob.Month_22 = _commf * -1;
                        _cob.Month_23 = _commf * -1;
                        _cob.Month_24 = _commf * -1;
                        _cob.Month_25 = _commf * -1;
                        _cob.Month_26 = _commf * -1;
                        _cob.Month_27 = _commf * -1;
                        _cob.Month_28 = _commf * -1;
                        _cob.Month_29 = _commf * -1;
                        _cob.Month_30 = _commf * -1;
                        _cob.Month_31 = _commf * -1;
                        _cob.Month_32 = _commf * -1;
                        _cob.Month_33 = _commf * -1;
                        _cob.Month_34 = _commf * -1;
                        _cob.Month_35 = _commf * -1;
                        _cob.Month_36 = _commf * -1;
                        clist.Add(_cob);
                        #endregion
                        #region Vat Payment
                        _cob = new CashFlow();
                        _cob.Name = "Vat Payment";
                        if (_SchemeDetails.Hsd_fpay_withvat == false)
                        {
                            _cob.Month_0 = _vatf * -1;
                            _cob.Month_1 = _vatf * -1;
                            _cob.Month_2 = _vatf * -1;
                            _cob.Month_3 = _vatf * -1;
                            _cob.Month_4 = _vatf * -1;
                            _cob.Month_5 = _vatf * -1;
                            _cob.Month_6 = _vatf * -1;
                            _cob.Month_7 = _vatf * -1;
                            _cob.Month_8 = _vatf * -1;
                            _cob.Month_9 = _vatf * -1;
                            _cob.Month_10 = _vatf * -1;
                            _cob.Month_11 = _vatf * -1;
                            _cob.Month_12 = _vatf * -1;
                            _cob.Month_13 = _vatf * -1;
                            _cob.Month_14 = _vatf * -1;
                            _cob.Month_15 = _vatf * -1;
                            _cob.Month_16 = _vatf * -1;
                            _cob.Month_17 = _vatf * -1;
                            _cob.Month_18 = _vatf * -1;
                            _cob.Month_19 = _vatf * -1;
                            _cob.Month_20 = _vatf * -1;
                            _cob.Month_21 = _vatf * -1;
                            _cob.Month_22 = _vatf * -1;
                            _cob.Month_23 = _vatf * -1;
                            _cob.Month_24 = _vatf * -1;
                            _cob.Month_25 = _vatf * -1;
                            _cob.Month_26 = _vatf * -1;
                            _cob.Month_27 = _vatf * -1;
                            _cob.Month_28 = _vatf * -1;
                            _cob.Month_29 = _vatf * -1;
                            _cob.Month_30 = _vatf * -1;
                            _cob.Month_31 = _vatf * -1;
                            _cob.Month_32 = _vatf * -1;
                            _cob.Month_33 = _vatf * -1;
                            _cob.Month_34 = _vatf * -1;
                            _cob.Month_35 = _vatf * -1;
                            _cob.Month_36 = _vatf * -1;
                        }
                        else
                        {
                            _cob.Month_0 = _vatfina * -1;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }
                        clist.Add(_cob);
                        #endregion
                        #region Coll Bonus-4.75%
                        _cob = new CashFlow();
                        _cob.Name = "Coll Bonus-4.75%";
                        _cob.Month_0 = 0;
                        _cob.Month_1 = _collecbonsf * -1;
                        _cob.Month_2 = _collecbonsf * -1;
                        _cob.Month_3 = _collecbonsf * -1;
                        _cob.Month_4 = _collecbonsf * -1;
                        _cob.Month_5 = _collecbonsf * -1;
                        _cob.Month_6 = _collecbonsf * -1;
                        _cob.Month_7 = _collecbonsf * -1;
                        _cob.Month_8 = _collecbonsf * -1;
                        _cob.Month_9 = _collecbonsf * -1;
                        _cob.Month_10 = _collecbonsf * -1;
                        _cob.Month_11 = _collecbonsf * -1;
                        _cob.Month_12 = _collecbonsf * -1;
                        _cob.Month_13 = _collecbonsf * -1;
                        _cob.Month_14 = _collecbonsf * -1;
                        _cob.Month_15 = _collecbonsf * -1;
                        _cob.Month_16 = _collecbonsf * -1;
                        _cob.Month_17 = _collecbonsf * -1;
                        _cob.Month_18 = _collecbonsf * -1;
                        _cob.Month_19 = _collecbonsf * -1;
                        _cob.Month_20 = _collecbonsf * -1;
                        _cob.Month_21 = _collecbonsf * -1;
                        _cob.Month_22 = _collecbonsf * -1;
                        _cob.Month_23 = _collecbonsf * -1;
                        _cob.Month_24 = _collecbonsf * -1;
                        _cob.Month_25 = _collecbonsf * -1;
                        _cob.Month_26 = _collecbonsf * -1;
                        _cob.Month_27 = _collecbonsf * -1;
                        _cob.Month_28 = _collecbonsf * -1;
                        _cob.Month_29 = _collecbonsf * -1;
                        _cob.Month_30 = _collecbonsf * -1;
                        _cob.Month_31 = _collecbonsf * -1;
                        _cob.Month_32 = _collecbonsf * -1;
                        _cob.Month_33 = _collecbonsf * -1;
                        _cob.Month_34 = _collecbonsf * -1;
                        _cob.Month_35 = _collecbonsf * -1;
                        _cob.Month_36 = _collecbonsf * -1;
                        clist.Add(_cob);
                        #endregion
                        #endregion
                    }
                    if (_SchemeDetails.Hsd_term > 36)
                    {
                        #region cashflow 40
                        #region Down Payt & insta
                        CashFlow _cob = new CashFlow();
                        _cob.Name = "Down Payt & insta";
                        _cob.Month_0 = _downpaymentf;
                        _cob.Month_1 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_2 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_3 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_4 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_5 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_6 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_7 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_8 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_9 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_10 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_11 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_12 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_13 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_14 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_15 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_16 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_17 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_18 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_19 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_20 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_21 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_22 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_23 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_24 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_25 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_26 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_27 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_28 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_29 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_30 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_31 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_32 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_33 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_34 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_35 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_36 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_37 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_38 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_39 = _finamtf / _SchemeDetails.Hsd_term;
                        _cob.Month_40 = _finamtf / _SchemeDetails.Hsd_term;
                        clist.Add(_cob);
                        #endregion

                        #region Ser Chg
                        _cob = new CashFlow();
                        _cob.Name = "Ser Chg";
                        if (_SchemeDetails.Hsd_init_serchg == false)
                        {
                            decimal _servicefccc = _varServiceCharge / _SchemeDetails.Hsd_term;
                            _cob.Month_0 = 0;
                            _cob.Month_1 = _servicefccc;
                            _cob.Month_2 = _servicefccc;
                            _cob.Month_3 = _servicefccc;
                            _cob.Month_4 = _servicefccc;
                            _cob.Month_5 = _servicefccc;
                            _cob.Month_6 = _servicefccc;
                            _cob.Month_7 = _servicefccc;
                            _cob.Month_8 = _servicefccc;
                            _cob.Month_9 = _servicefccc;
                            _cob.Month_10 = _servicefccc;
                            _cob.Month_11 = _servicefccc;
                            _cob.Month_12 = _servicefccc;
                            _cob.Month_13 = _servicefccc;
                            _cob.Month_14 = _servicefccc;
                            _cob.Month_15 = _servicefccc;
                            _cob.Month_16 = _servicefccc;
                            _cob.Month_17 = _servicefccc;
                            _cob.Month_18 = _servicefccc;
                            _cob.Month_19 = _servicefccc;
                            _cob.Month_20 = _servicefccc;
                            _cob.Month_21 = _servicefccc;
                            _cob.Month_22 = _servicefccc;
                            _cob.Month_23 = _servicefccc;
                            _cob.Month_24 = _servicefccc;
                            _cob.Month_25 = _servicefccc;
                            _cob.Month_26 = _servicefccc;
                            _cob.Month_27 = _servicefccc;
                            _cob.Month_28 = _servicefccc;
                            _cob.Month_29 = _servicefccc;
                            _cob.Month_30 = _servicefccc;
                            _cob.Month_31 = _servicefccc;
                            _cob.Month_32 = _servicefccc;
                            _cob.Month_33 = _servicefccc;
                            _cob.Month_34 = _servicefccc;
                            _cob.Month_35 = _servicefccc;
                            _cob.Month_36 = _servicefccc;
                            _cob.Month_37 = _servicefccc;
                            _cob.Month_38 = _servicefccc;
                            _cob.Month_39 = _servicefccc;
                            _cob.Month_40 = _servicefccc;
                        }
                        else
                        {
                            _servicef = _varServiceCharge;
                            _cob.Month_0 = _varServiceCharge;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }

                        clist.Add(_cob);
                        #endregion
                        #region Diriya
                        _cob = new CashFlow();
                        _cob.Name = "Diriya";
                        if (_SchemeDetails.Hsd_init_insu == false)
                        {
                            decimal _diriyafccc = _varInsAmount / _SchemeDetails.Hsd_term;
                            _cob.Month_0 = _diriyafccc;
                            _cob.Month_1 = _diriyafccc;
                            _cob.Month_2 = _diriyafccc;
                            _cob.Month_3 = _diriyafccc;
                            _cob.Month_4 = _diriyafccc;
                            _cob.Month_5 = _diriyafccc;
                            _cob.Month_6 = _diriyafccc;
                            _cob.Month_7 = _diriyafccc;
                            _cob.Month_8 = _diriyafccc;
                            _cob.Month_9 = _diriyafccc;
                            _cob.Month_10 = _diriyafccc;
                            _cob.Month_11 = _diriyafccc;
                            _cob.Month_12 = _diriyafccc;
                            _cob.Month_13 = _diriyafccc;
                            _cob.Month_14 = _diriyafccc;
                            _cob.Month_15 = _diriyafccc;
                            _cob.Month_16 = _diriyafccc;
                            _cob.Month_17 = _diriyafccc;
                            _cob.Month_18 = _diriyafccc;
                            _cob.Month_19 = _diriyafccc;
                            _cob.Month_20 = _diriyafccc;
                            _cob.Month_21 = _diriyafccc;
                            _cob.Month_22 = _diriyafccc;
                            _cob.Month_23 = _diriyafccc;
                            _cob.Month_24 = _diriyafccc;
                            _cob.Month_25 = _diriyafccc;
                            _cob.Month_26 = _diriyafccc;
                            _cob.Month_27 = _diriyafccc;
                            _cob.Month_28 = _diriyafccc;
                            _cob.Month_29 = _diriyafccc;
                            _cob.Month_30 = _diriyafccc;
                            _cob.Month_31 = _diriyafccc;
                            _cob.Month_32 = _diriyafccc;
                            _cob.Month_33 = _diriyafccc;
                            _cob.Month_34 = _diriyafccc;
                            _cob.Month_35 = _diriyafccc;
                            _cob.Month_36 = _diriyafccc;
                            _cob.Month_37 = _diriyafccc;
                            _cob.Month_38 = _diriyafccc;
                            _cob.Month_39 = _diriyafccc;
                            _cob.Month_40 = _diriyafccc;
                        }
                        else
                        {
                            _cob.Month_0 = _varInsAmount;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }
                        clist.Add(_cob);
                        #endregion
                        #region Commission DP & Col
                        _cob = new CashFlow();
                        _cob.Name = "Commission DP & Col";
                        _cob.Month_0 = _dpcomreal * -1;
                        _cob.Month_1 = _commf * -1;
                        _cob.Month_2 = _commf * -1;
                        _cob.Month_3 = _commf * -1;
                        _cob.Month_4 = _commf * -1;
                        _cob.Month_5 = _commf * -1;
                        _cob.Month_6 = _commf * -1;
                        _cob.Month_7 = _commf * -1;
                        _cob.Month_8 = _commf * -1;
                        _cob.Month_9 = _commf * -1;
                        _cob.Month_10 = _commf * -1;
                        _cob.Month_11 = _commf * -1;
                        _cob.Month_12 = _commf * -1;
                        _cob.Month_13 = _commf * -1;
                        _cob.Month_14 = _commf * -1;
                        _cob.Month_15 = _commf * -1;
                        _cob.Month_16 = _commf * -1;
                        _cob.Month_17 = _commf * -1;
                        _cob.Month_18 = _commf * -1;
                        _cob.Month_19 = _commf * -1;
                        _cob.Month_20 = _commf * -1;
                        _cob.Month_21 = _commf * -1;
                        _cob.Month_22 = _commf * -1;
                        _cob.Month_23 = _commf * -1;
                        _cob.Month_24 = _commf * -1;
                        _cob.Month_25 = _commf * -1;
                        _cob.Month_26 = _commf * -1;
                        _cob.Month_27 = _commf * -1;
                        _cob.Month_28 = _commf * -1;
                        _cob.Month_29 = _commf * -1;
                        _cob.Month_30 = _commf * -1;
                        _cob.Month_31 = _commf * -1;
                        _cob.Month_32 = _commf * -1;
                        _cob.Month_33 = _commf * -1;
                        _cob.Month_34 = _commf * -1;
                        _cob.Month_35 = _commf * -1;
                        _cob.Month_36 = _commf * -1;
                        _cob.Month_37 = _commf * -1;
                        _cob.Month_38 = _commf * -1;
                        _cob.Month_39 = _commf * -1;
                        _cob.Month_40 = _commf * -1;
                        clist.Add(_cob);
                        #endregion
                        #region Vat Payment
                        _cob = new CashFlow();
                        _cob.Name = "Vat Payment";
                        if (_SchemeDetails.Hsd_fpay_withvat == false)
                        {
                            _cob.Month_0 = _vatf * -1;
                            _cob.Month_1 = _vatf * -1;
                            _cob.Month_2 = _vatf * -1;
                            _cob.Month_3 = _vatf * -1;
                            _cob.Month_4 = _vatf * -1;
                            _cob.Month_5 = _vatf * -1;
                            _cob.Month_6 = _vatf * -1;
                            _cob.Month_7 = _vatf * -1;
                            _cob.Month_8 = _vatf * -1;
                            _cob.Month_9 = _vatf * -1;
                            _cob.Month_10 = _vatf * -1;
                            _cob.Month_11 = _vatf * -1;
                            _cob.Month_12 = _vatf * -1;
                            _cob.Month_13 = _vatf * -1;
                            _cob.Month_14 = _vatf * -1;
                            _cob.Month_15 = _vatf * -1;
                            _cob.Month_16 = _vatf * -1;
                            _cob.Month_17 = _vatf * -1;
                            _cob.Month_18 = _vatf * -1;
                            _cob.Month_19 = _vatf * -1;
                            _cob.Month_20 = _vatf * -1;
                            _cob.Month_21 = _vatf * -1;
                            _cob.Month_22 = _vatf * -1;
                            _cob.Month_23 = _vatf * -1;
                            _cob.Month_24 = _vatf * -1;
                            _cob.Month_25 = _vatf * -1;
                            _cob.Month_26 = _vatf * -1;
                            _cob.Month_27 = _vatf * -1;
                            _cob.Month_28 = _vatf * -1;
                            _cob.Month_29 = _vatf * -1;
                            _cob.Month_30 = _vatf * -1;
                            _cob.Month_31 = _vatf * -1;
                            _cob.Month_32 = _vatf * -1;
                            _cob.Month_33 = _vatf * -1;
                            _cob.Month_34 = _vatf * -1;
                            _cob.Month_35 = _vatf * -1;
                            _cob.Month_36 = _vatf * -1;
                            _cob.Month_37 = _vatf * -1;
                            _cob.Month_38 = _vatf * -1;
                            _cob.Month_39 = _vatf * -1;
                            _cob.Month_40 = _vatf * -1;
                        }
                        else
                        {
                            _cob.Month_0 = _vatfina * -1;
                            _cob.Month_1 = 0;
                            _cob.Month_2 = 0;
                            _cob.Month_3 = 0;
                            _cob.Month_4 = 0;
                            _cob.Month_5 = 0;
                            _cob.Month_6 = 0;
                            _cob.Month_7 = 0;
                            _cob.Month_8 = 0;
                            _cob.Month_9 = 0;
                            _cob.Month_10 = 0;
                            _cob.Month_11 = 0;
                            _cob.Month_12 = 0;
                        }
                        clist.Add(_cob);
                        #endregion
                        #region Coll Bonus-4.75%
                        _cob = new CashFlow();
                        _cob.Name = "Coll Bonus-4.75%";
                        _cob.Month_0 = 0;
                        _cob.Month_1 = _collecbonsf * -1;
                        _cob.Month_2 = _collecbonsf * -1;
                        _cob.Month_3 = _collecbonsf * -1;
                        _cob.Month_4 = _collecbonsf * -1;
                        _cob.Month_5 = _collecbonsf * -1;
                        _cob.Month_6 = _collecbonsf * -1;
                        _cob.Month_7 = _collecbonsf * -1;
                        _cob.Month_8 = _collecbonsf * -1;
                        _cob.Month_9 = _collecbonsf * -1;
                        _cob.Month_10 = _collecbonsf * -1;
                        _cob.Month_11 = _collecbonsf * -1;
                        _cob.Month_12 = _collecbonsf * -1;
                        _cob.Month_13 = _collecbonsf * -1;
                        _cob.Month_14 = _collecbonsf * -1;
                        _cob.Month_15 = _collecbonsf * -1;
                        _cob.Month_16 = _collecbonsf * -1;
                        _cob.Month_17 = _collecbonsf * -1;
                        _cob.Month_18 = _collecbonsf * -1;
                        _cob.Month_19 = _collecbonsf * -1;
                        _cob.Month_20 = _collecbonsf * -1;
                        _cob.Month_21 = _collecbonsf * -1;
                        _cob.Month_22 = _collecbonsf * -1;
                        _cob.Month_23 = _collecbonsf * -1;
                        _cob.Month_24 = _collecbonsf * -1;
                        _cob.Month_25 = _collecbonsf * -1;
                        _cob.Month_26 = _collecbonsf * -1;
                        _cob.Month_27 = _collecbonsf * -1;
                        _cob.Month_28 = _collecbonsf * -1;
                        _cob.Month_29 = _collecbonsf * -1;
                        _cob.Month_30 = _collecbonsf * -1;
                        _cob.Month_31 = _collecbonsf * -1;
                        _cob.Month_32 = _collecbonsf * -1;
                        _cob.Month_33 = _collecbonsf * -1;
                        _cob.Month_34 = _collecbonsf * -1;
                        _cob.Month_35 = _collecbonsf * -1;
                        _cob.Month_36 = _collecbonsf * -1;
                        _cob.Month_37 = _collecbonsf * -1;
                        _cob.Month_38 = _collecbonsf * -1;
                        _cob.Month_39 = _collecbonsf * -1;
                        _cob.Month_40 = _collecbonsf * -1;
                        clist.Add(_cob);
                        #endregion
                        #endregion
                    }
                    collectbons = Convert.ToDecimal(4.75) * (_finamtf + _varServiceCharge + _totinstf + _vatfina) / 100;
                    ob.Schemeval = _SchemeDetails.Hsd_term;
                    decimal month1 = (paybackcost * _finrtf) / (100 * _SchemeDetails.Hsd_term);
                    monthn = month1 - initialfin_cost;
                    decimal month2 = 0;
                    CashFlow _cob1 = new CashFlow();
                    CashFlow _cob2 = new CashFlow();
                    _cob1.Month_0 = paybackcost;
                    _cob2.Month_0 = initialfin_cost * -1;
                    for (int i = 0; i < _SchemeDetails.Hsd_term; i++)
                    {
                        if (init_insu == false)
                        {
                            _diriyaf = 0;
                        }
                        if (init_ser == false)
                        {
                            _servicef = 0;
                        }
                        monthn = monthn + month2;
                        decimal paybacknew = paybackcost + month1 + (_rental + (paybser) + paybdir + (paybvat) - _commf - _diriyacommf - _collecbonsf);

                        #region Payback and Fin Cost
                        _cob1.Name = "Payback Amount";
                        _cob2.Name = "Finance Cost";

                        if (i == 0)
                        {
                            _cob1.Month_1 = paybacknew;
                            _cob2.Month_1 = month1;
                        }
                        if (i == 1)
                        {
                            _cob1.Month_2 = paybacknew;
                            _cob2.Month_2 = month1;
                        }
                        if (i == 2)
                        {
                            _cob1.Month_3 = paybacknew;
                            _cob2.Month_3 = month1;
                        }
                        if (i == 3)
                        {
                            _cob1.Month_4 = paybacknew;
                            _cob2.Month_4 = month1;
                        }
                        if (i == 4)
                        {
                            _cob1.Month_5 = paybacknew;
                            _cob2.Month_5 = month1;
                        }
                        if (i == 5)
                        {
                            _cob1.Month_6 = paybacknew;
                            _cob2.Month_6 = month1;
                        }
                        if (i == 6)
                        {
                            _cob1.Month_7 = paybacknew;
                            _cob2.Month_7 = month1;
                        }
                        if (i == 7)
                        {
                            _cob1.Month_8 = paybacknew;
                            _cob2.Month_8 = month1;
                        }
                        if (i == 8)
                        {
                            _cob1.Month_9 = paybacknew;
                            _cob2.Month_9 = month1;
                        }
                        if (i == 9)
                        {
                            _cob1.Month_10 = paybacknew;
                            _cob2.Month_10 = month1;
                        }
                        if (i == 10)
                        {
                            _cob1.Month_11 = paybacknew;
                            _cob2.Month_11 = month1;
                        }
                        if (i == 11)
                        {
                            _cob1.Month_12 = paybacknew;
                            _cob2.Month_12 = month1;
                        }
                        if (i == 12)
                        {
                            _cob1.Month_13 = paybacknew;
                            _cob2.Month_13 = month1;
                        }
                        if (i == 13)
                        {
                            _cob1.Month_14 = paybacknew;
                            _cob2.Month_14 = month1;
                        }
                        if (i == 14)
                        {
                            _cob1.Month_15 = paybacknew;
                            _cob2.Month_15 = month1;
                        }
                        if (i == 15)
                        {
                            _cob1.Month_16 = paybacknew;
                            _cob2.Month_16 = month1;
                        }
                        if (i == 16)
                        {
                            _cob1.Month_17 = paybacknew;
                            _cob2.Month_17 = month1;
                        }
                        if (i == 17)
                        {
                            _cob1.Month_18 = paybacknew;
                            _cob2.Month_18 = month1;
                        }
                        if (i == 18)
                        {
                            _cob1.Month_19 = paybacknew;
                            _cob2.Month_19 = month1;
                        }
                        if (i == 19)
                        {
                            _cob1.Month_20 = paybacknew;
                            _cob2.Month_20 = month1;
                        }
                        if (i == 20)
                        {
                            _cob1.Month_21 = paybacknew;
                            _cob2.Month_21 = month1;
                        }
                        if (i == 21)
                        {
                            _cob1.Month_22 = paybacknew;
                            _cob2.Month_22 = month1;
                        }
                        if (i == 22)
                        {
                            _cob1.Month_23 = paybacknew;
                            _cob2.Month_23 = month1;
                        }
                        if (i == 23)
                        {
                            _cob1.Month_24 = paybacknew;
                            _cob2.Month_24 = month1;
                        }
                        if (i == 24)
                        {
                            _cob1.Month_25 = paybacknew;
                            _cob2.Month_25 = month1;
                        }
                        if (i == 25)
                        {
                            _cob1.Month_26 = paybacknew;
                            _cob2.Month_26 = month1;
                        }
                        if (i == 26)
                        {
                            _cob1.Month_27 = paybacknew;
                            _cob2.Month_27 = month1;
                        }
                        if (i == 27)
                        {
                            _cob1.Month_28 = paybacknew;
                            _cob2.Month_28 = month1;
                        }
                        if (i == 28)
                        {
                            _cob1.Month_29 = paybacknew;
                            _cob2.Month_29 = month1;
                        }
                        if (i == 29)
                        {
                            _cob1.Month_30 = paybacknew;
                            _cob2.Month_30 = month1;
                        }
                        if (i == 30)
                        {
                            _cob1.Month_31 = paybacknew;
                            _cob2.Month_31 = month1;
                        }
                        if (i == 31)
                        {
                            _cob1.Month_32 = paybacknew;
                            _cob2.Month_32 = month1;
                        }
                        if (i == 32)
                        {
                            _cob1.Month_33 = paybacknew;
                            _cob2.Month_33 = month1;
                        }
                        if (i == 33)
                        {
                            _cob1.Month_34 = paybacknew;
                            _cob2.Month_34 = month1;
                        }
                        if (i == 34)
                        {
                            _cob1.Month_35 = paybacknew;
                            _cob2.Month_35 = month1;
                        }

                        if (i == 35)
                        {
                            _cob1.Month_36 = paybacknew;
                            _cob2.Month_36 = month1;
                        }
                        if (i == 36)
                        {
                            _cob1.Month_37 = paybacknew;
                            _cob2.Month_37 = month1;
                        }
                        if (i == 37)
                        {
                            _cob1.Month_38 = paybacknew;
                            _cob2.Month_38 = month1;
                        }
                        if (i == 38)
                        {
                            _cob1.Month_39 = paybacknew;
                            _cob2.Month_39 = month1;
                        }
                        if (i == 39)
                        {
                            _cob1.Month_40 = paybacknew;
                            _cob2.Month_40 = month1;
                        }
                        #endregion


                        month2 = (paybacknew * _finrtf) / (100 * _SchemeDetails.Hsd_term);
                        paybackcost = paybacknew;
                        month1 = month2;
                        if (month2 >= 0)
                        {
                            clist.Add(_cob1);
                            clist.Add(_cob2);
                            _aaproxmonths = i + 1;
                            break;
                        }
                    }


                }
                if (Type == "CS")
                {
                    _credcommval = 0;
                    _credcommrt = 0;
                }
                if (Type == "Crd")
                {
                    _cashcommval = 0;
                    _cashcommrt = 0;
                }
                if (Type == "HP")
                {
                    _credcommval = 0;
                    _cashcommval = 0;
                    _credcommrt = 0;
                    _cashcommrt = 0;
                }


                ob._cashcommrt = _cashcommrt;
                ob._cashcommval = _cashcommval;
                ob._cost = _cost;
                ob._credcommrt = _credcommrt;
                ob._credcommval = _credcommval;
                ob._dbcommvalue = _dbcommvalue;
                ob._finrtf = _finrtf;
                ob._inscomm = _inscomm;
                ob._price = _price;
                ob._varInsAmount = _varInsAmount;
                ob._varInterestAmt = _varInterestAmt;
                ob._varServiceCharge = _varServiceCharge;
                ob.collectbons = collectbons;
                ob.DiriyaRt = DiriyaRt;
                ob.dpcommrt = dpcommrt;
                ob.inscommrt = inscommrt;
                ob.intrsthprt = intrsthprt;
                ob.monthn = monthn;
                ob.ServiceIncomeRt = ServiceIncomeRt;
                ob._TAXVALLL = _TAXVALLL;
                ob.avalable = avalable;
                ob.ApproxMonths = _aaproxmonths;
                ob.VatRt = vatrate;
                ob.SalesRate = 100 + vatrate;

            }
            catch (Exception ex)
            {
                DashboardDal.ConnectionClose();
                _SalesDAL.ConnectionClose();
                err = ex.Message;
                ob.errerstatus = -1;
                return ob;
            }
            return ob;
        }
        private decimal TaxCalculation(string _com, string _item, string _status, decimal _UnitPrice, decimal _TaxVal, bool _isTaxfaction, ref decimal vatrate)
        {
            try
            {
                _generalDAL = new GeneralDAL();
                _invdal = new InventoryDAL();
                SalesBLL ss = new SalesBLL();
                //updated by akila 2017/11/13
                MasterCompany _masterComp = new MasterCompany();
                _masterComp = _generalDAL.GetCompByCode(_com);
                bool _isStructureBase = false;
                if (_masterComp != null)
                {
                    if (_masterComp.MC_TAX_CALC_MTD == "1")
                    {
                        _isStructureBase = true;
                    }
                    else
                    {
                        _isStructureBase = false;
                    }
                }
                else { _isStructureBase = false; }
                //get current day tax rate
                List<MasterItemTax> _taxs = new List<MasterItemTax>();
                if (_isTaxfaction == false)
                {
                    if (_isStructureBase == true)
                    {
                        MasterItem _mstItem = _invdal.GetItem(_com, _item);
                        _taxs = ss.GetTax_strucbase(_com, _item, _status, null, null, _mstItem.Mi_anal1);
                    }
                    else
                        _taxs = ss.GetTax(_com, _item, _status);
                }
                else
                {
                    if (_isStructureBase == true)
                    {
                        MasterItem _mstItem = _invdal.GetItem(_com, _item);
                        _taxs = ss.GetItemTax_strucbase(_com, _item, _status, string.Empty, "VAT", _mstItem.Mi_anal1);
                    }
                    else
                        _taxs = ss.GetItemTax(_com, _item, _status, string.Empty, "VAT");
                }

                if (_taxs.Count > 0)
                {
                    foreach (MasterItemTax _one in _taxs)
                    {
                        _TaxVal = _UnitPrice * _one.Mict_tax_rate / 100;
                        vatrate = _one.Mict_tax_rate;
                    }

                }
                else
                {

                }

                #region old code

                #endregion
            }
            catch (Exception ex)
            {


            }


            return _TaxVal;
        }
        public List<BMT_HPTERM_HEAD> getHPTerem(string searchVal, string pgeNum, string pgeSize, string searchFld)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getHPTerem(searchVal, pgeNum, pgeSize, searchFld);
        }
        public List<HPSCHCATE_SEARCH> getHPSchCate(string _searchValue, string _pageNum, string _pageSize, string _serachField)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getHPSchCate(_searchValue, _pageNum, _pageSize, _serachField);
        }
        public static DataTable JoinTwoDataTablesOnOneColumn(DataTable dtblLeft, DataTable dtblRight, string colToJoinOn)
        {
            //Change column name to a temp name so the LINQ for getting row data will work properly.
            string strTempColName = colToJoinOn + "_2";
            if (dtblRight.Columns.Contains(colToJoinOn))
                dtblRight.Columns[colToJoinOn].ColumnName = strTempColName;

            //Get columns from dtblLeft
            DataTable dtblResult = dtblLeft.Clone();

            //Get columns from dtblRight
            var dt2Columns = dtblRight.Columns.OfType<DataColumn>().Select(dc => new DataColumn(dc.ColumnName, dc.DataType, dc.Expression, dc.ColumnMapping));

            //Get columns from dtblRight that are not in dtblLeft
            var dt2FinalColumns = from dc in dt2Columns.AsEnumerable()
                                  where !dtblResult.Columns.Contains(dc.ColumnName)
                                  select dc;

            //Add the rest of the columns to dtblResult
            dtblResult.Columns.AddRange(dt2FinalColumns.ToArray());

            //No reason to continue if the colToJoinOn does not exist in both DataTables.
            if (!dtblLeft.Columns.Contains(colToJoinOn) || (!dtblRight.Columns.Contains(colToJoinOn) && !dtblRight.Columns.Contains(strTempColName)))
            {
                if (!dtblResult.Columns.Contains(colToJoinOn))
                    dtblResult.Columns.Add(colToJoinOn);
                return dtblResult;
            }
            string joinType = "INNER";
            switch (joinType)
            {

                default:
                case "INNER":
                    #region Inner
                    //get row data
                    //To use the DataTable.AsEnumerable() extension method you need to add a reference to the System.Data.DataSetExtension assembly in your project. 
                    var rowDataLeftInner = from rowLeft in dtblLeft.AsEnumerable()
                                           join rowRight in dtblRight.AsEnumerable() on rowLeft[colToJoinOn] equals rowRight[strTempColName]
                                           select rowLeft.ItemArray.Concat(rowRight.ItemArray).ToArray();


                    //Add row data to dtblResult
                    foreach (object[] values in rowDataLeftInner)
                        dtblResult.Rows.Add(values);

                    #endregion
                    break;
                case "LEFT":
                    #region Left
                    var rowDataLeftOuter = from rowLeft in dtblLeft.AsEnumerable()
                                           join rowRight in dtblRight.AsEnumerable() on rowLeft[colToJoinOn] equals rowRight[strTempColName] into gj
                                           from subRight in gj.DefaultIfEmpty()
                                           select rowLeft.ItemArray.Concat((subRight == null) ? (dtblRight.NewRow().ItemArray) : subRight.ItemArray).ToArray();


                    //Add row data to dtblResult
                    foreach (object[] values in rowDataLeftOuter)
                        dtblResult.Rows.Add(values);

                    #endregion
                    break;
            }

            //Change column name back to original
            dtblRight.Columns[strTempColName].ColumnName = colToJoinOn;

            //Remove extra column from result
            dtblResult.Columns.Remove(strTempColName);

            return dtblResult;
        }

        public string ExportListUsingEPPlus(DataTable _DATA, DataTable _hdrdt, string _com, string _user, out string _error) //add by tharanga 2018/12/21
        {
            try
            {
                InventoryDAL _invDal = new InventoryDAL();
                _invDal.ConnectionOpen();
                MasterCompany mstCompany = _invDal.GetCompByCode(_com);
                _invDal.ConnectionClose();
                _error = string.Empty;
                string _exportPath = mstCompany.Mc_anal17.ToString();
                if (string.IsNullOrEmpty(_exportPath))
                {
                    _error = "File export path not set!";
                    return _error;
                }
                _exportPath = _exportPath + _user + ".xlsx";
                File.Delete(_exportPath);
                FileInfo fi = new FileInfo(_exportPath);

                #region headr table loop
                if (_hdrdt.Columns.Count > 0)
                {
                    for (int _colCount = 0; _colCount < _hdrdt.Columns.Count; _colCount++)
                    {
                        StringBuilder _columnName = new StringBuilder();

                        for (int _rowCount = 0; _rowCount < _hdrdt.Rows.Count; _rowCount++)
                        {
                            _columnName.Append(_hdrdt.Rows[_rowCount][_colCount].ToString());
                            _columnName.Append(" ");
                        }
                        _DATA.Columns[_colCount].ColumnName = _columnName.ToString();
                    }
                }
                #endregion
                #region details table loop
                //for (int _rowCount = 0; _rowCount < _DATA.Rows.Count; _rowCount++)
                //{
                //    DataRow _row = _hdrdt.NewRow();
                //    for (int _colCount = 0; _colCount < _DATA.Columns.Count; _colCount++)
                //    {
                //        _row[_colCount] = _DATA.Rows[_rowCount][_colCount].ToString();
                //    }
                //    _hdrdt.Rows.Add(_row);
                //}
                #endregion
                ExcelPackage excel = new ExcelPackage(fi);
                var workSheet = excel.Workbook.Worksheets.Add("Sheet1");
                workSheet.Cells[1, 1].LoadFromDataTable(_DATA, true);
                using (var memoryStream = new MemoryStream())
                {
                    excel.SaveAs(fi);
                }
                if (string.IsNullOrEmpty(_error))
                { return _exportPath; }
                else
                { return "Err"; }
            }
            catch (Exception err)
            {
                GC.Collect();
                _error = err.ToString();
                return "Err";
            }

        }


        public string getBudgetDetails(DateTime _strFromdate, DateTime _strToDate, DateTime _strFromdateOne, DateTime _strToDateOne, string allOne, string company, string userId, DataTable _col, DataTable _row, DataTable _val, Dictionary<string, string[]> dataValues, string group, out DataTable dtReport, out DataTable _header, out string outParam, out string error)
        {
            outParam = "";
            error = "";
            dtReport = new DataTable();
            _header = new DataTable();
            _financialDAL = new FinancialDAL();
            _securityDAL = new SecurityDAL();
            try
            {
                _financialDAL.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BMBudget") == true) _financialDAL.ConnectionOpen_DR();
                Int32 stmonth = _strFromdate.Month;
                Int32 endmonth = _strToDate.Month;
                Int32 year = _strFromdate.Year;
                string _SelCols = "";
                string _filterCols1 = "";
                string _SelectValues = "";
                int s = 0;
                int t = 0;
                int u = 0;
                int v = 0;
                DateTime _vfromdate;
                DateTime _vtodate;
                DateTime _vfromdateT;
                DateTime _vtodateT;

                _header = null;
                DataTable _dtResults = new DataTable();
                DataTable _dtResults1 = new DataTable();
                DataTable _dtResults2 = new DataTable();
                DataTable _repHead = _financialDAL.getBMReportHeading("BM_TARGET");
                String[] szColumns = new String[_col.Rows.Count];
                String[] szRows = new String[_row.Rows.Count];
                String[] szVals = new String[_val.Rows.Count];
                string vRows = "";
                string vCols = "";
                string vColsCommon = "";

                DataTable BMSales1 = new DataTable();

                DataTable BMSales = new DataTable();
                BMSales.TableName = "BMTable";
                DataTable _dtHeader = new DataTable();
                _dtHeader.TableName = "BMHeader";
                DataRow dr;
                DataRow dr1;
                DataRow dr2;
                DataRow dt2dr;
                bool format = true;
                BMSales.Clear();
                if (_repHead.Rows.Count <= 0)
                {
                    error = "Report Headings not defined.";
                    return "";
                }
               
                foreach (DataRow _drval in _col.Rows)
                {
                    if (_drval["bmr_col_nm"].ToString() == "rbt_ele_cd" || _drval["bmr_col_nm"].ToString() == "rbt_ele_desc" || _drval["bmr_col_nm"].ToString() == "rbt_grp_cd" ||
                        _drval["bmr_col_nm"].ToString() == "rbt_grp_desc" || _drval["bmr_col_nm"].ToString() == "rbt_hed_cd" || _drval["bmr_col_nm"].ToString() == "rbt_hed_desc")
                    {
                        format = false;
                    }
                    if (_SelCols != "") { _SelCols = _SelCols + ","; }
                    _SelCols = _SelCols + _drval["bmr_col_nm"].ToString();
                }
                foreach (DataRow _drrow in _row.Rows)
                {
                    if (_drrow["bmr_col_nm"].ToString() == "rbt_ele_cd" || _drrow["bmr_col_nm"].ToString() == "rbt_ele_desc" || _drrow["bmr_col_nm"].ToString() == "rbt_grp_cd" ||
                           _drrow["bmr_col_nm"].ToString() == "rbt_grp_desc" || _drrow["bmr_col_nm"].ToString() == "rbt_hed_cd" || _drrow["bmr_col_nm"].ToString() == "rbt_hed_desc")
                    {
                        format = false;
                    }
                    if (_SelCols != "") { _SelCols = _SelCols + ","; }
                    _SelCols = _SelCols + _drrow["bmr_col_nm"].ToString();
                }
                foreach (DataRow _drcol in _val.Rows)
                {
                    if (_SelectValues != "") { _SelectValues = _SelectValues + ","; }
                    _SelectValues = _SelectValues + "SUM(" + _drcol["bmr_col_nm"].ToString() + ") " + _drcol["bmr_col_nm"].ToString();
                }
                //_filterCols1 = _filterCols(dataValues, _SelCols);

                
                string _filter2 = "";
                string[] _filterx;

                foreach (KeyValuePair<string, string[]> pair in dataValues)
                {
                    _filterx = pair.Value.ToArray();
                     
                    //if (pair.Key.ToString() == "company")
                    //{
                    //    foreach (string _item in _filterx)
                    //    {
                    //        if (_filter2 != "")
                    //        { _filter2 = _filter2 + " or "; }
                    //        _filter2 = _filter2 + " rbt_com ='" +  _item.Trim() + "' ";
                    //    }
                    //}
                    if (pair.Key.ToString() == "cat1")
                    {
                        foreach (string _item in _filterx)
                        {
                            if (_filter2 != "")
                            { _filter2 = _filter2 + " or "; }
                            _filter2 = _filter2 + " rbt_itm_cat1 ='" + _item.Trim() + "' ";
                        }
                    }
                    if (pair.Key.ToString() == "hedIds")
                    {
                        foreach (string _item in _filterx)
                        {
                            if (_filter2 != "")
                            { _filter2 = _filter2 + " or "; }
                            _filter2 = _filter2 + " rbt_hed_cd ='" + _item.Trim() + "' ";
                        }
                    }
                    if (pair.Key.ToString() == "grpIds")
                    {
                        foreach (string _item in _filterx)
                        {
                            if (_filter2 != "")
                            { _filter2 = _filter2 + " or "; }
                            _filter2 = _filter2 + " rbt_grp_cd ='" + _item.Trim() + "' ";
                        }
                    }
                    if (pair.Key.ToString() == "eleIds")
                    {
                        foreach (string _item in _filterx)
                        {
                            if (_filter2 != "")
                            { _filter2 = _filter2 + " or "; }
                            _filter2 = _filter2 + " rbt_ele_cd ='" + _item.Trim() + "' ";
                        }
                    }
                    if (pair.Key.ToString() == "PC")
                    {
                        foreach (string _item in _filterx)
                        {
                            if (_filter2 != "")
                            { _filter2 = _filter2 + " or "; }
                            _filter2 = _filter2 + " rbt_pc ='" + _item.Trim() + "' ";
                        }
                    }
                }
                try
                {
                    _dtResults2 = _financialDAL.getUserDefinedTargetDetails(stmonth, endmonth, year, _SelCols, _SelectValues, group, _filter2);

                    if (allOne == "true")
                    {

                        _dtResults1 = _financialDAL.getUserDefinedTargetDetails(_strFromdateOne.Month, _strToDateOne.Month, _strFromdateOne.Year, _SelCols, _SelectValues, group, _filter2);
                        if (_dtResults1.Rows.Count > 0)
                        {
                            _dtResults2.Merge(_dtResults1);
                        }
                    }
                }
                catch (Exception ex)
                {
                    error = ex.Message.ToString();
                    return error;
                }

                
                

                if (_dtResults2.Rows.Count > 0)
                {
                    foreach (DataRow _drcol in _col.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drcol["bmr_col_nm"].ToString())
                            {
                                if (drlochead["bmr_data_tp"].ToString() == "string") BMSales.Columns.Add("Col" + t, typeof(string));
                                if (drlochead["bmr_data_tp"].ToString() == "int") BMSales.Columns.Add("Col" + t, typeof(int));
                                if (drlochead["bmr_data_tp"].ToString() == "decimal") BMSales.Columns.Add("Col" + t, typeof(decimal));
                                _dtHeader.Columns.Add("Col" + t, typeof(string));
                                szColumns[t] = drlochead["bmr_col_nm"].ToString();
                                if (vCols != "") vCols = vCols + ",";
                                vCols = vCols + drlochead["bmr_col_nm"].ToString();
                                if (vColsCommon != "") vColsCommon = vColsCommon + ",";
                                vColsCommon = vColsCommon + "Col" + t;
                                t = t + 1;
                            }
                        }
                    }

                    foreach (DataRow _drval in _val.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drval["bmr_col_nm"].ToString())
                            {
                                szVals[v] = drlochead["bmr_col_nm"].ToString();
                                v = v + 1;
                            }
                        }
                    }

                    foreach (DataRow _drrow in _row.Rows)
                    {
                        foreach (DataRow drlochead in _repHead.Rows)
                        {
                            if (drlochead["bmr_col_nm"].ToString() == _drrow["bmr_col_nm"].ToString())
                            {
                                szRows[u] = drlochead["bmr_col_nm"].ToString();
                                if (vRows != "") vRows = vRows + ",";
                                vRows = vRows + drlochead["bmr_col_nm"].ToString();
                                u = u + 1;
                            }
                        }
                    }

                    string[] szColRows = new String[szRows.Count() + szColumns.Count()];
                    szColRows = szColumns.Concat(szRows).ToArray();

                    DataTable _dtResultsSum = new DataTable();
                    _dtResults = _dtResults2;

                    if (u != 0)
                    {
                        DataTable OFI = _dtResults.DefaultView.ToTable(true, szColRows);
                        if (format)
                        { 
                            DataView viewFI = new DataView(OFI);
                            viewFI.Sort = vRows;
                            _dtResultsSum = viewFI.ToTable();
                        }
                        else
                        {
                            _dtResultsSum = OFI;
                        }
                       
                    }
                    else
                    {
                        _dtResultsSum = _dtResults;
                    }

                    DataTable _insertnull = _dtResults.DefaultView.ToTable(true, szRows);
                    DataTable _insertnull1 = _dtResults.DefaultView.ToTable(true, szColumns);

                    foreach (DataRow _drrowc in _insertnull1.Rows)
                    {
                        foreach (DataRow _drrowr in _insertnull.Rows)
                        {
                            DataRow drs;
                            DataRow drs1;
                            drs = _dtResults.NewRow();
                            drs1 = _dtResultsSum.NewRow();

                            string _filter = "";
                            for (int index = 0; index < _insertnull1.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _insertnull1.Columns[index].ColumnName + "]" + " ='" + _drrowc[index].ToString() + "'";
                                drs[index] = _drrowc[index].ToString();
                                drs1[index] = _drrowc[index].ToString();
                            }
                            for (int index = 0; index < _insertnull.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _insertnull.Columns[index].ColumnName + "]" + " ='" + _drrowr[index].ToString() + "'";
                                drs[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
                                drs1[index + _insertnull1.Columns.Count] = _drrowr[index].ToString();
                            }
                            int x = 0;
                            foreach (DataRow _drval in _val.Rows)
                            {
                                drs[x + _insertnull1.Columns.Count + _insertnull.Columns.Count] = 0;
                                x++;
                            }

                            var insertnulls = _dtResultsSum.Select(_filter);
                            var dt1 = new DataTable();
                            if (insertnulls.Length != 0)
                                dt1 = insertnulls.CopyToDataTable();
                            else
                                dt1 = _dtResults.Clone();

                            if (dt1.Rows.Count == 0)
                            {
                                _dtResults.Rows.Add(drs);
                                _dtResultsSum.Rows.Add(drs1);
                            }

                        }
                    }

                    if (_dtResultsSum.Rows.Count > 0)
                    {
                        foreach (DataRow _drresult in _dtResultsSum.Rows)
                        {
                            string _filter = "";
                            string _group = "";

                            for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                            {
                                if (_filter != "")
                                { _filter = _filter + " and "; }
                                _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

                                if (_group != "")
                                { _group = _group + " ,"; }
                                _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
                            }
                            if (_filter != "")
                            {
                                //DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();
                                var filteredDataRows1 = _dtResults.Select(_filter);
                                var dt1 = new DataTable();
                                if (filteredDataRows1.Length != 0)
                                    dt1 = filteredDataRows1.CopyToDataTable();
                                else
                                    dt1 = _dtResults.Clone();

                                var ownerGroups = dt1.AsEnumerable()
                                    .GroupBy(row => new { _group });
                                var dt2 = dt1.Clone();
                                var intColumns = dt2.Columns.Cast<DataColumn>()
                                    .Where(c => c.DataType == typeof(decimal)).ToArray();
                                foreach (var grp in ownerGroups)
                                {
                                    var row = dt2.Rows.Add();

                                    foreach (DataRow _drcol in _col.Rows)
                                    {
                                        row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drcol[0].ToString()].Ordinal));
                                    }
                                    foreach (DataRow _drrow in _row.Rows)
                                    {
                                        row.SetField(_drrow[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(_dtResults.Columns[_drrow[0].ToString()].Ordinal));
                                    }
                                    foreach (DataColumn col in intColumns)
                                    {
                                        bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                                        decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                                        row.SetField(col, sum);
                                    }
                                }

                                BMSales1.Merge(dt2);
                            }
                        }
                    }

                    _dtResults = BMSales1.DefaultView.ToTable(true, szColRows.Concat(szVals).ToArray());

                    DataTable _dtResultsSum2 = new DataTable();

                    if (_dtResults.Rows.Count > 0)
                    {
                        if (u != 0)
                        {
                            DataTable OFI2 = _dtResults.DefaultView.ToTable(true, szRows);
                            if (format)
                            {
                                DataView viewFI2 = new DataView(OFI2);
                                viewFI2.Sort = vRows;
                                _dtResultsSum2 = viewFI2.ToTable();
                            }
                            else
                            {
                                _dtResultsSum2 = OFI2;
                            }
                            
                        }
                        else
                        {
                            _dtResultsSum2 = _dtResults;
                        }


                        if (_dtResultsSum2.Rows.Count > 0)
                        {
                            for (int index = 0; index < _dtResultsSum2.Rows.Count; index++)
                            {
                                foreach (string _val1 in szVals)
                                {
                                    BMSales.Columns.Add("Col" + t, typeof(decimal));
                                    _dtHeader.Columns.Add("Col" + t, typeof(string));
                                    t = t + 1;
                                }
                            }
                        }

                        int ab = 1;

                        DataTable OFI3 = _dtResults.DefaultView.ToTable(true, szColumns);

                        if (OFI3.Rows.Count > 0)
                        {
                            foreach (DataRow _drow in OFI3.Rows)
                            {
                                string _filter = "";
                                string _group = "";

                                for (int index = 0; index < OFI3.Columns.Count; index++)
                                {
                                    if (_filter != "")
                                    { _filter = _filter + " and "; }
                                    _filter = _filter + "[" + OFI3.Columns[index].ColumnName + "]" + " ='" + _drow[index].ToString() + "'";

                                    if (_group != "")
                                    { _group = _group + " ,"; }
                                    _group = _group + "[" + OFI3.Columns[index].ColumnName + "] = row.Field<string>([" + OFI3.Columns[index].ColumnName + "])";
                                }
                                if (_filter != "")
                                {
                                    DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();

                                    string _filter1 = "";
                                    int w = 0;
                                    int x = 0;
                                    int y = 0;
                                    int z = 0;
                                    int aa = 0;

                                    //dr1 = new DataRow();
                                    //if (ab < _row.Rows.Count + 1)                                 

                                    dr1 = _dtHeader.NewRow();
                                    dr = BMSales.NewRow();

                                    if (_dtResultsSum2.Rows.Count > 0)
                                    {
                                        foreach (DataRow _drow1 in _dtResultsSum2.Rows)
                                        {
                                            _filter1 = "";

                                            for (int index = 0; index < dt1.Columns.Count; index++)
                                            {
                                                for (int index2 = 0; index2 < _dtResultsSum2.Columns.Count; index2++)
                                                {
                                                    if (_dtResultsSum2.Columns[index2].ColumnName == dt1.Columns[index].ColumnName)
                                                    {
                                                        if (_filter1 != "")
                                                        { _filter1 = _filter1 + " and "; }
                                                        _filter1 = _filter1 + "[" + dt1.Columns[index].ColumnName + "]" + " ='" + _drow1[index2].ToString() + "'";
                                                    }
                                                }
                                            }

                                            if (_filter1 != "")
                                            {
                                                var filteredDataRows = dt1.Select(_filter1);
                                                var dt2 = new DataTable();
                                                if (filteredDataRows.Length != 0)
                                                    dt2 = filteredDataRows.CopyToDataTable();
                                                else
                                                    if (w != 0)
                                                    {
                                                        dt2 = dt1.Clone();
                                                        dt2dr = dt2.NewRow();
                                                        int dt2num = 0;
                                                        int dt2num1 = 0;
                                                        foreach (DataRow _drcol in _col.Rows)
                                                        {
                                                            dt2dr[dt2num] = _drow[dt2num1].ToString();
                                                            dt2num1 = dt2num1 + 1;
                                                            dt2num = dt2num + 1;
                                                        }
                                                        dt2num1 = 0;
                                                        foreach (DataRow _drrow in _row.Rows)
                                                        {
                                                            dt2dr[dt2num] = _drow1[dt2num1].ToString();
                                                            dt2num1 = dt2num1 + 1;
                                                            dt2num = dt2num + 1;
                                                        }
                                                        dt2num1 = 0;
                                                        foreach (DataRow _drval in _val.Rows)
                                                        {
                                                            dt2dr[dt2num] = 0;
                                                            dt2num1 = dt2num1 + 1;
                                                            dt2num = dt2num + 1;
                                                        }
                                                        dt2.Rows.Add(dt2dr);
                                                    }

                                                //w = w + _val.Rows.Count; else aa = 2;
                                                //DataTable dt2 = dt1.Select(_filter1).CopyToDataTable();

                                                foreach (DataRow _drow3 in dt2.Rows)
                                                {
                                                    if (BMSales.Columns.Count > w)
                                                    {
                                                        if (z == y)
                                                        {
                                                            foreach (DataRow _drcol in _col.Rows)
                                                            {
                                                                for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                                {
                                                                    if (dt2.Columns[index4].ColumnName.ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
                                                                    {
                                                                        foreach (DataRow drlochead in _repHead.Rows)
                                                                        {
                                                                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drcol["bmr_col_nm"].ToString().ToUpper())
                                                                            {
                                                                                if (drlochead["bmr_data_tp"].ToString() == "string") dr[w] = _drow3[y].ToString().ToUpper();
                                                                                if (drlochead["bmr_data_tp"].ToString() == "int") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToInt16(_drow3[y].ToString()) : 00;
                                                                                if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w] = _drow3[y] != DBNull.Value ? Convert.ToDecimal(_drow3[y].ToString()) : 00;
                                                                                //if (ab < _row.Rows.Count + 1)
                                                                                //{
                                                                                if (ab == 1) dr1[w] = _drcol["bmr_col_desc"].ToString().ToUpper();
                                                                                //}

                                                                                w = w + 1;
                                                                                //x = x + 1;
                                                                                y = y + 1;
                                                                                z = z + 1;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                            int ad = _col.Rows.Count;
                                                            foreach (DataRow _drrow in _row.Rows)
                                                            {
                                                                for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                                {
                                                                    if (dt2.Columns[index4].ColumnName.ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
                                                                    {
                                                                        foreach (DataRow drlochead in _repHead.Rows)
                                                                        {
                                                                            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drrow["bmr_col_nm"].ToString().ToUpper())
                                                                            {
                                                                                if (ab == 1)
                                                                                {
                                                                                    dr2 = _dtHeader.NewRow();
                                                                                    int ac = 0;
                                                                                    foreach (DataRow _drcol in _col.Rows)
                                                                                    {
                                                                                        dr2[ac] = ".";
                                                                                        ac = ac + 1;
                                                                                    }
                                                                                    foreach (DataRow _drow4 in _dtResultsSum2.Rows)
                                                                                    {
                                                                                        foreach (DataRow _drval in _val.Rows)
                                                                                        {
                                                                                            if (dt2.Columns[ad].ColumnName.ToUpper() == "RBT_MNTH" || dt2.Columns[ad].ColumnName.ToUpper() == "RBT_MNTH")
                                                                                            {
                                                                                                dr2[ac] = _getMonthName(Convert.ToInt16(_drow4[dt2.Columns[ad].ColumnName.ToUpper()])).ToUpper();
                                                                                            }
                                                                                            else if (dt2.Columns[ad].ColumnName.ToUpper() == "RBT_YER" || dt2.Columns[ad].ColumnName.ToUpper() == "RBT_YER" || dt2.Columns[ad].ColumnName.ToUpper() == "BMS_DO_DAY")
                                                                                            {
                                                                                                dr2[ac] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                dr2[ac] = _drow4[dt2.Columns[ad].ColumnName.ToUpper()].ToString().ToUpper();
                                                                                            }
                                                                                            //if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_MONTH" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_MONTH")
                                                                                            //{
                                                                                            //    dr2[ac] = _getMonthName(Convert.ToInt16(_drow4[0])).ToUpper();
                                                                                            //}
                                                                                            //else if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_DAY")
                                                                                            //{
                                                                                            //    dr2[ac] = Convert.ToInt16(_drow4[0]);
                                                                                            //}
                                                                                            //else
                                                                                            //{
                                                                                            //    dr2[ac] = _drow4[0].ToString().ToUpper();
                                                                                            //}
                                                                                            ac = ac + 1;
                                                                                        }

                                                                                    }
                                                                                    ad = ad + 1;
                                                                                    if (dr2[0].ToString() != "")
                                                                                    {
                                                                                        _dtHeader.Rows.Add(dr2);
                                                                                    }
                                                                                }
                                                                                //x = x + 1;
                                                                                y = y + 1;
                                                                                z = z + 1;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        foreach (DataRow _drval in _val.Rows)
                                                        {
                                                            for (int index4 = 0; index4 < dt2.Columns.Count; index4++)
                                                            {
                                                                if (dt2.Columns[index4].ColumnName.ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
                                                                {
                                                                    foreach (DataRow drlochead in _repHead.Rows)
                                                                    {
                                                                        if (drlochead["bmr_col_nm"].ToString().ToUpper() == _drval["bmr_col_nm"].ToString().ToUpper())
                                                                        {
                                                                            if (drlochead["bmr_data_tp"].ToString() == "string") dr[w + aa] = _drow3[x + y].ToString().ToUpper();
                                                                            if (drlochead["bmr_data_tp"].ToString() == "int") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToInt32(_drow3[x + y].ToString()) : 00;
                                                                            if (drlochead["bmr_data_tp"].ToString() == "decimal") dr[w + aa] = _drow3[x + y] != DBNull.Value ? Convert.ToDecimal(_drow3[x + y].ToString()) : 00;
                                                                            if (ab == 1)
                                                                            {
                                                                                //if (dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_MONTH" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_INV_MONTH")
                                                                                //{
                                                                                //    dr1[w] = _getMonthName(Convert.ToInt16(_drval["bmr_col_desc"])).ToUpper();
                                                                                //}
                                                                                //else if (dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_YEAR" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_INV_YEAR" || dt2.Columns[w].ColumnName.ToUpper() == "BMS_DO_DAY")
                                                                                //{
                                                                                //    dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                //}
                                                                                //else
                                                                                //{
                                                                                dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                //}
                                                                                //if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_MONTH" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_MONTH")
                                                                                //{
                                                                                //    dr1[w] = _getMonthName(Convert.ToInt16(_drval["bmr_col_desc"])).ToUpper();
                                                                                //}
                                                                                //else if (_drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_INV_YEAR" || _drval["bmr_col_nm"].ToString().ToUpper() == "BMS_DO_DAY")
                                                                                //{
                                                                                //    dr1[w] = Convert.ToInt16(_drval["bmr_col_desc"]);
                                                                                //}
                                                                                //else
                                                                                //{
                                                                                //    dr1[w] = _drval["bmr_col_desc"].ToString().ToUpper();
                                                                                //}
                                                                            }

                                                                            w = w + 1;
                                                                            x = x + 1;
                                                                            z = z + 1;
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        x = 0;
                                                        aa = 0;
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    //if (ab < _row.Rows.Count) 
                                    if (dr1[0].ToString() != "")
                                    {
                                        _dtHeader.Rows.Add(dr1);
                                    }
                                    BMSales.Rows.Add(dr);
                                    ab = ab + 1;

                                }
                            }
                        }

                    }
                    if (format)
                    {
                        DataView viewFIn = new DataView(BMSales);
                        viewFIn.Sort = vColsCommon;
                        BMSales = viewFIn.ToTable();
                    }
                    
                    string _group1 = "";
                    var dt1tot = new DataTable();
                    dt1tot = BMSales;
                    //var ownerGroupstot = dt1tot;
                    var ownerGroupstot = dt1tot.AsEnumerable()
                                     .GroupBy(row => new { _group1 });
                    var dt2tot = dt1tot.Clone();
                    var intColumnstot = dt2tot.Columns.Cast<DataColumn>()
                        .Where(c => c.DataType == typeof(decimal)).ToArray();
                    foreach (var grp in ownerGroupstot)
                    {
                        var row = dt2tot.Rows.Add();

                        foreach (DataRow _drcol in _col.Rows)
                        {
                            if (dt2tot.Columns[0].DataType.ToString() == "String")
                            {
                                row.SetField("Col0", "Total");
                            }
                        }
                        //foreach (DataRow _drrow in _row.Rows)
                        //{
                        //    row.SetField(_drrow[0].ToString(), "");
                        //}
                        foreach (DataColumn col in intColumnstot)
                        {
                            bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                            decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                            row.SetField(col, sum);
                        }
                    }

                    BMSales.Merge(dt2tot);

                    
                    dtReport = BMSales;
                    _header = _dtHeader ;

                    if (_header.Rows.Count == 0) _header = null;
                    if (dtReport.Rows.Count == 0) dtReport = null;
                    string _filePath = "";
                    //_filePath = ExportExcel2007(_com, _user, _dtHeader, BMSales, out _err);
                    //_filePath = ExportExcel2007(_com, _user, BMSales, out _err);
                    _filePath = ExportListUsingEPPlus(BMSales, _dtHeader, company, userId, out error);
                    if (BMSales.Rows.Count != 0)
                    {
                        InventoryDAL _inventoryDAL = new InventoryDAL();
                        DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(userId);
                        if (userId !=null && !string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
                        {
                            GeneralDAL _generalDAL = new GeneralDAL();

                            SmtpClient smtpClient = new SmtpClient();
                            MailMessage message = new MailMessage();
                            MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                            smtpClient.Host = _generalDAL.GetMailHost();
                            smtpClient.Port = 25;
                            message.From = fromAddress;
                            string FOOTER = _generalDAL.GetMailFooterMsg();
                            string _email = "";
                            // string _docNo = _docNo.Replace("Normal:", "");
                            _email = "Generated report path as follows" + Environment.NewLine;
                            _email += _filePath + Environment.NewLine + Environment.NewLine;
                            //_email = _email + "Approved #-" + _docNo + " <br><P>";
                            _email = _email + "<br>" + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                            message.To.Add(_dtEmail.Rows[0]["SE_EMAIL"].ToString());
                            //message.Bcc.Add("amilasanjeewa@abansgroup.com");
                            message.Subject = "Budget User Defined Reports";
                            //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                            //message.Bcc.Add(new MailAddress(""));
                            message.IsBodyHtml = false;
                            message.Body = _email;
                            message.IsBodyHtml = true;
                            message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                            // Send SMTP mail
                            try
                            {
                                smtpClient.Send(message);
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                }
                else
                {
                   error = "No Records Found.";

                }
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            
            return error;
        }
        public List<HPSCHCATE_SEARCH> getBudgetElements(string searchVal, string pgeNum, string pgeSize, string searchFld, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getBudgetElements(searchVal, pgeNum, pgeSize, searchFld, type);
        }
        public List<LOC_SEARCH> searchLocation(string searchVal, string pgeNum, string pgeSize, string searchFld, string selectCom)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.searchLocation(searchVal, pgeNum, pgeSize, searchFld, selectCom);
        }
        public List<GLB_PROFITABILITY> getBudgetReport(DateTime frm, DateTime to, DateTime frmpy, DateTime topy, string channel, List<SELECTED_PC> pc, string cate, string com, string user, Int32 headid, Int32 groupid, string report_type, out string error)
        {
            error = "";
            DateTime orgfromdate = frm;
            DateTime orgtodate = to;
            DataTable BMSales = new DataTable();
            BMSales.TableName = "BMTable";
            DataTable _dtHeader = new DataTable();
            _dtHeader.TableName = "BMHeader";
            DataTable _dtResults = new DataTable();
            DataRow dr;
            DataRow dr1;
            DataRow dr2;
            DataRow dt2dr;
            int s = 0;
            int t = 0;
            int u = 0;
            int v = 0;
            string vRows = "";
            DataTable BMSales1 = new DataTable();
            BMSales.Clear();
            DataTable _finaltable = new DataTable();
            _finaltable.TableName = "Final";
            _finaltable.Clear();

            string month_name = "";
            string previous = "";
            List<GLB_PROFITABILITY> result = new List<GLB_PROFITABILITY>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                _financialDAL = new FinancialDAL();
                DashboardDal.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BI_BUDGET") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                DashboardDal.BeginTransaction();
                Int32 rem = DashboardDal.rempveTemporyParameters(user, "PROFDATA");
                if (pc != null && pc.Count > 0)
                {
                    foreach (SELECTED_PC c in pc)
                    {
                        Int32 addPc = DashboardDal.addTemporyParameters(user, "PC", "PROFDATA", c.MSC_CD);
                    }
                }
                else
                {
                    _securityDAL = new SecurityDAL();
                    _securityDAL.ConnectionOpen();
                    Int32 haspcper = _securityDAL.getUserSpecialPermission(user.ToUpper(), com, "PRFRPTALPC");
                    if (haspcper == 0)
                    {
                        Int32 addPc = DashboardDal.addTUserProfitCenters(user, "PC", "PROFDATA", channel, com);
                    }
                }
                List<GLB_PROFITABILITY> temp = new List<GLB_PROFITABILITY>();
                DataTable final = new DataTable();
                #region Monthwise report
                if (report_type == "Month")
                {
                    DateTime tempdate = frm;
                    DateTime AsAtTo = to;
                    DateTime AsAtFrom = frm;

                    DateTime currentdate = DateTime.Today.Date;
                    DateTime StartDate = new DateTime(currentdate.Year, currentdate.Month, 1);
                    DateTime EndDate = StartDate.AddMonths(1).AddDays(-1);
                    tempdate = new DateTime(frm.Year, frm.Month, 1).AddMonths(1).AddDays(-1);
                    DataTable temptbl = new DataTable();
                    while (tempdate < to)
                    {
                        if (tempdate <= to)
                        {
                            temptbl = new DataTable();
                            temptbl = DashboardDal.getBudgetReport_tb(frm, tempdate, frmpy, topy, channel, null, cate, com, user);
                            final.Merge(temptbl);
                            frm = tempdate.AddDays(1);
                        }
                        tempdate = frm.AddMonths(1).AddDays(-1);
                    }
                    temptbl = new DataTable();
                    temptbl = DashboardDal.getBudgetReport_tb(frm, to, frmpy, topy, channel, null, cate, com, user);
                    final.Merge(temptbl);
                    #region temp finalize table
                    if (final.Rows.Count > 0)
                    {


                        DataTable _dtResults2 = new DataTable();
                        _dtResults2 = final;
                        _dtHeader = new DataTable();
                        DataTable _repHead = _financialDAL.getBMReportHeading("BUDGET_REPORT");
                        if (_repHead.Rows.Count <= 0)
                        {
                            error = "Report Headings not defined.";
                            throw new System.ArgumentException(error, "original");
                        }
                        if (_dtResults2.Rows.Count > 0)
                        {
                            _dtResults2 = DataTableExtensions.ToValidateDataTable(_dtResults2);

                        }

                        for (int _colm = 0; _colm <= _dtResults2.Columns.Count - 1; _colm++)
                        {
                            _dtHeader.Columns.Add(_dtResults2.Columns[_colm].ColumnName.ToString(), typeof(string));
                        }

                        int _colcount = 0;
                        for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                        {
                            foreach (DataRow drlochead in _repHead.Rows)
                            {
                                if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                                {
                                    if (drlochead["bmr_data_tp"].ToString() != "decimal")
                                    {
                                        _colcount = _colcount + 1;
                                    }
                                }
                            }
                        }

                        String[] szColumns1 = new String[_colcount];
                        BMSales = _dtResults2;
                        DataRow drs;
                        drs = _dtHeader.NewRow();
                        t = 0;

                        for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                        {
                            string _colname = "";

                            foreach (DataRow drlochead in _repHead.Rows)
                            {
                                if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                                {
                                    _colname = drlochead["bmr_col_desc"].ToString();

                                    if (drlochead["bmr_data_tp"].ToString() != "decimal")
                                    {
                                        szColumns1[t] = drlochead["bmr_col_nm"].ToString().ToUpper();
                                        t = t + 1;
                                    }
                                }
                            }

                            drs[_colm] = _colname;

                        }
                        _dtHeader.Rows.Add(drs);
                        _dtHeader.TableName = "BMHeader";
                        ////////////////

                        DataTable OFI = BMSales.DefaultView.ToTable(true, szColumns1);

                        DataView viewFI = new DataView(OFI);
                        viewFI.Sort = vRows;
                        DataTable _dtResultsSum = viewFI.ToTable();



                        //BMSales

                        if (BMSales.Rows.Count > 0)
                        {
                            foreach (DataRow _drresult in _dtResultsSum.Rows)
                            {
                                string _filter = "";
                                string _group = "";

                                for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                                {
                                    if (_filter != "")
                                    { _filter = _filter + " and "; }
                                    _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

                                    if (_group != "")
                                    { _group = _group + " ,"; }
                                    _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
                                }
                                if (_filter != "")
                                {
                                    //DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();
                                    var filteredDataRows1 = BMSales.Select(_filter);
                                    var dt1 = new DataTable();
                                    if (filteredDataRows1.Length != 0)
                                        dt1 = filteredDataRows1.CopyToDataTable();
                                    else
                                        dt1 = _dtResults.Clone();

                                    var ownerGroups = dt1.AsEnumerable()
                                        .GroupBy(row => new { _group });
                                    var dt2 = dt1.Clone();
                                    var intColumns = dt2.Columns.Cast<DataColumn>()
                                        .Where(c => c.DataType == typeof(decimal)).ToArray();
                                    foreach (var grp in ownerGroups)
                                    {
                                        var row = dt2.Rows.Add();

                                        for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                                        {
                                            if (_dtResultsSum.Columns[index].DataType.ToString() != "decimal")
                                            {
                                                row.SetField(_dtResultsSum.Columns[index].ColumnName.ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_dtResultsSum.Columns[index].ToString()].Ordinal));
                                            }
                                        }
                                        //foreach (DataRow _drcol in _col.Rows)
                                        //{
                                        //    row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drcol[0].ToString()].Ordinal));
                                        //}
                                        //foreach (DataRow _drrow in _row.Rows)
                                        //{
                                        //    row.SetField(_drrow[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drrow[0].ToString()].Ordinal));
                                        //}
                                        foreach (DataColumn col in intColumns)
                                        {
                                            bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                                            decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                                            row.SetField(col, sum);
                                        }
                                    }

                                    BMSales1.Merge(dt2);
                                }
                            }
                        }
                    }
                    #endregion
                    #region create list
                    if (final.Rows.Count > 0)
                    {
                        result = DataTableExtensions.ToGenericList<GLB_PROFITABILITY>(final, GLB_PROFITABILITY.Converter1);
                    }
                    else
                    {
                        error = "Records not found.";
                        throw new System.ArgumentException(error, "original");
                    }

                    #endregion
                    var year_month = result.GroupBy(x => new { x.YEAR, x.MONTH })
                    .Select(g => new { g.Key.YEAR, g.Key.MONTH, MyCount = g.Count() });
                    #region Create table
                    DataTable output = new DataTable();
                    output.Columns.Add("Acc", typeof(string));
                    output.Columns.Add("Description", typeof(string));
                    var months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames
                          .TakeWhile(m => m != String.Empty)
                          .Select((m, i) => new
                          {
                              Month = i + 1,
                              MonthName = m
                          })
                          .ToList();
                    foreach (var clms in year_month)
                    {
                        previous = Convert.ToString(clms.YEAR - 1);
                        var month = from sta in months
                                    where sta.Month == clms.MONTH
                                    select sta.MonthName;
                        month_name = "";
                        foreach (var _month in month)
                        { month_name = _month; }

                        output.Columns.Add(previous + " " + month_name, typeof(decimal));
                        output.Columns.Add(month_name + " Budget", typeof(decimal));
                        output.Columns.Add(month_name + " Actual", typeof(decimal));
                    }
                    output.Columns.Add(previous, typeof(decimal));
                    output.Columns.Add("Budget", typeof(decimal));
                    // output.Columns.Add("Revise Budge", typeof(decimal));
                    output.Columns.Add("Actual", typeof(decimal));


                    #endregion

                    var HED_ORDER = result.GroupBy(x => new { x.HED_ORDER, x.HED_DESC })
                            .Select(g => new { g.Key.HED_ORDER, g.Key.HED_DESC, MyCount = g.Count() });
                    decimal _previousTot = 0;
                    decimal _BudgetsTot = 0;
                    decimal _ActualsTot = 0;
                    foreach (var _HED_ORDER in HED_ORDER)
                    {
                        output.Rows.Clear();
                        List<GLB_PROFITABILITY> temp_GLB_PROFITABILITY = result.Where(r => r.HED_ORDER == _HED_ORDER.HED_ORDER).ToList();
                        #region grup list
                        List<GLB_PROFITABILITY> _temp = (from sg in temp_GLB_PROFITABILITY
                                                         //where sg.TPSD_ELEMENT_CD != "REFUND"
                                                         group sg by new
                                                         {
                                                             YEAR = sg.YEAR,
                                                             MONTH = sg.MONTH,
                                                             ACCOUNT = sg.ACCOUNT,
                                                             HED_CD = sg.HED_CD,
                                                             HED_DESC = sg.HED_DESC,
                                                             HED_ORDER = sg.HED_ORDER,
                                                             GRP_CD = sg.GRP_CD,
                                                             GRP_DESC = sg.GRP_DESC,
                                                             GRP_ORDER = sg.GRP_ORDER
                                                         } into sgd
                                                         select new GLB_PROFITABILITY
                                                         {
                                                             YEAR = sgd.Select(x => x.YEAR).FirstOrDefault(),
                                                             HED_CD = sgd.Select(x => x.HED_CD).FirstOrDefault(),
                                                             HED_DESC = sgd.Select(x => x.HED_DESC).FirstOrDefault(),
                                                             HED_ORDER = sgd.Select(x => x.HED_ORDER).FirstOrDefault(),
                                                             GRP_CD = sgd.Select(x => x.GRP_CD).FirstOrDefault(),
                                                             GRP_DESC = sgd.Select(x => x.GRP_DESC).FirstOrDefault(),
                                                             GRP_ORDER = sgd.Select(x => x.GRP_ORDER).FirstOrDefault(),
                                                             TARGET = sgd.Sum(x => x.TARGET),
                                                             ACTUAL = sgd.Sum(x => x.ACTUAL),
                                                             DIRECTION = sgd.Select(x => x.DIRECTION).FirstOrDefault(),
                                                             PREVIOUS = sgd.Sum(x => x.PREVIOUS),
                                                             BUDGET = sgd.Sum(x => x.BUDGET),
                                                             MONTH = sgd.Select(x => x.MONTH).FirstOrDefault(),
                                                             ACCOUNT = sgd.Select(x => x.ACCOUNT).FirstOrDefault()
                                                         }).ToList();
                        #endregion
                        temp_GLB_PROFITABILITY = new List<GLB_PROFITABILITY>();

                        temp_GLB_PROFITABILITY = _temp;
                        if (temp_GLB_PROFITABILITY.Count > 0)
                        {

                            decimal COL_PREVIOUS_SUM = 0;
                            decimal COL_BUDGET_SUM = 0;
                            decimal COL_ACTUAL_SUM = 0;
                            decimal ROW_PREVIOUS_SUM = 0;
                            decimal ROW_BUDGET_SUM = 0;
                            decimal ROW_ACTUAL_SUM = 0;
                            foreach (GLB_PROFITABILITY item in temp_GLB_PROFITABILITY)
                            {

                                #region get minth name
                                previous = Convert.ToString(item.YEAR - 1);
                                var month_n = from sta in months
                                              where sta.Month == item.MONTH
                                              select sta.MonthName;
                                foreach (var _month in month_n)
                                { month_name = _month; }
                                #endregion
                                #region table insert
                                if (output.Rows.Count > 0)
                                {
                                    DataTable _avilabledate = new DataTable();
                                    if (output.Rows.Count > 0)
                                    {
                                        var results = (from MyRows in output.AsEnumerable()
                                                       where
                                                        MyRows.Field<string>("Description") == item.GRP_DESC

                                                       select MyRows);
                                        if (results.Any())
                                        {
                                            _avilabledate = results.CopyToDataTable();
                                        }

                                    }

                                    if (_avilabledate.Rows.Count > 0)
                                    {


                                        foreach (DataRow drn in output.Rows) // search whole table
                                        {
                                            if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                                            {
                                                drn[previous + " " + month_name] = item.PREVIOUS;
                                                drn[month_name + " Budget"] = item.BUDGET;
                                                drn[month_name + " Actual"] = item.ACTUAL;
                                                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        DataRow drow = output.NewRow();
                                        drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                        drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                        drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                        drow[month_name + " Budget"] = item.BUDGET;// ins[i].DATE;
                                        drow[month_name + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                        ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                        ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                        ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                        output.Rows.Add(drow);
                                    }
                                }
                                else
                                {

                                    DataRow drow = output.NewRow();
                                    drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                    drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                    drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                    drow[month_name + " Budget"] = item.BUDGET;// ins[i].DATE;
                                    drow[month_name + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                    ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                    ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                    ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                    output.Rows.Add(drow);
                                }
                                #endregion
                            }

                            #region insert sumnew

                            int countRow = output.Rows.Count;
                            int countCol = output.Columns.Count - 3;

                            DataRow drowTot = output.NewRow();
                            drowTot["Acc"] = _HED_ORDER.HED_DESC;// ins[i].DATE;

                            drowTot["Description"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                            output.Rows.Add(drowTot);

                            int _lastIndexOfMainTable = _finaltable.Rows.Count == 0 ? -1 : _finaltable.Rows.Count - 1;

                            //decimal _previousTot = 0;
                            //decimal _BudgetsTot = 0;
                            //decimal _ActualsTot = 0;


                            //decimal _grandPreviousTot = 0;
                            //decimal _grandBudgetsTot = 0;
                            //decimal _grandActualsTot = 0;

                            //DataTable _dtTot = output.Clone();
                            //_dtTot.Rows.Add();
                            decimal _previousSum = 0;
                            decimal _BudgetsSum = 0;
                            decimal _ActualsSum = 0;
                            for (int iRow = 0; iRow < countRow; iRow++)
                            {
                                //decimal _previousSum = 0;
                                //decimal _BudgetsSum = 0;
                                //decimal _ActualsSum = 0;
                                for (int iCol = 2; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _previousSum = _previousSum + AMOUT;

                                        //decimal _cumulativeSum=0;
                                        //decimal.TryParse(_dtTot.Rows[0][iCol].ToString(), out _cumulativeSum);
                                        //_dtTot.Rows[0][iCol] = _cumulativeSum + AMOUT;

                                    }

                                    iCol = iCol + 3;
                                }

                                for (int iCol = 3; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _BudgetsSum = _BudgetsSum + AMOUT;

                                        //decimal _cumulativeSum = 0;
                                        //decimal.TryParse(_dtTot.Rows[0][iCol].ToString(), out _cumulativeSum);
                                        //_dtTot.Rows[0][iCol] = _cumulativeSum + AMOUT;

                                    }

                                    iCol = iCol + 3;
                                }

                                for (int iCol = 4; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _ActualsSum = _ActualsSum + AMOUT;

                                        //decimal _cumulativeSum = 0;
                                        //decimal.TryParse(_dtTot.Rows[0][iCol].ToString(), out _cumulativeSum);
                                        //_dtTot.Rows[0][iCol] = _cumulativeSum + AMOUT;
                                    }

                                    iCol = iCol + 3;
                                }

                                output.Rows[iRow][output.Columns.Count - 3] = _previousSum;
                                output.Rows[iRow][output.Columns.Count - 2] = _BudgetsSum;
                                output.Rows[iRow][output.Columns.Count - 1] = _ActualsSum;
                                _previousTot = _previousTot + _previousSum;
                                _BudgetsTot = _BudgetsTot + _BudgetsSum;
                                _ActualsTot = _ActualsTot + _ActualsSum;
                                output.Rows[iRow + 1][output.Columns.Count - 3] = _previousTot;
                                output.Rows[iRow + 1][output.Columns.Count - 2] = _BudgetsTot;
                                output.Rows[iRow + 1][output.Columns.Count - 1] = _ActualsTot;


                            }

                            #endregion




                        }



                        _finaltable.Merge(output);
                    }


                }

                #endregion

                #region Quarter report
                if (report_type == "Quarter")
                {
                    #region get date
                    DateTime tempdate = frm;
                    DateTime AsAtTo = to;
                    DateTime AsAtFrom = frm;

                    DateTime currentdate = DateTime.Today.Date;
                    DateTime StartDate = new DateTime(currentdate.Year, currentdate.Month, 1);
                    DateTime EndDate = StartDate.AddMonths(1).AddDays(-1);
                    tempdate = new DateTime(frm.Year, frm.Month, 1).AddMonths(3).AddDays(-1);
                    DataTable temptbl = new DataTable();
                    while (tempdate < to)
                    {
                        if (tempdate <= to)
                        {
                            temptbl = new DataTable();
                            temptbl = DashboardDal.getBudgetReport_tb(frm, tempdate, frmpy, topy, channel, null, cate, com, user);
                            final.Merge(temptbl);
                            frm = tempdate.AddDays(1);
                        }
                        tempdate = frm.AddMonths(3).AddDays(-1);
                    }
                    temptbl = new DataTable();
                    temptbl = DashboardDal.getBudgetReport_tb(frm, to, frmpy, topy, channel, null, cate, com, user);
                    final.Merge(temptbl);
                    #endregion
                    #region temp finalize table
                    if (final.Rows.Count > 0)
                    {


                        DataTable _dtResults2 = new DataTable();
                        _dtResults2 = final;
                        _dtHeader = new DataTable();
                        DataTable _repHead = _financialDAL.getBMReportHeading("BUDGET_REPORT");
                        if (_repHead.Rows.Count <= 0)
                        {
                            error = "Report Headings not defined.";
                            throw new System.ArgumentException(error, "original");
                        }
                        if (_dtResults2.Rows.Count > 0)
                        {
                            _dtResults2 = DataTableExtensions.ToValidateDataTable(_dtResults2);

                        }

                        for (int _colm = 0; _colm <= _dtResults2.Columns.Count - 1; _colm++)
                        {
                            _dtHeader.Columns.Add(_dtResults2.Columns[_colm].ColumnName.ToString(), typeof(string));
                        }

                        int _colcount = 0;
                        for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                        {
                            foreach (DataRow drlochead in _repHead.Rows)
                            {
                                if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                                {
                                    if (drlochead["bmr_data_tp"].ToString() != "decimal")
                                    {
                                        _colcount = _colcount + 1;
                                    }
                                }
                            }
                        }

                        String[] szColumns1 = new String[_colcount];
                        BMSales = _dtResults2;
                        DataRow drs;
                        drs = _dtHeader.NewRow();
                        t = 0;

                        for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                        {
                            string _colname = "";

                            foreach (DataRow drlochead in _repHead.Rows)
                            {
                                if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                                {
                                    _colname = drlochead["bmr_col_desc"].ToString();

                                    if (drlochead["bmr_data_tp"].ToString() != "decimal")
                                    {
                                        szColumns1[t] = drlochead["bmr_col_nm"].ToString().ToUpper();
                                        t = t + 1;
                                    }
                                }
                            }

                            drs[_colm] = _colname;

                        }
                        _dtHeader.Rows.Add(drs);
                        _dtHeader.TableName = "BMHeader";
                        ////////////////

                        DataTable OFI = BMSales.DefaultView.ToTable(true, szColumns1);

                        DataView viewFI = new DataView(OFI);
                        viewFI.Sort = vRows;
                        DataTable _dtResultsSum = viewFI.ToTable();



                        //BMSales

                        if (BMSales.Rows.Count > 0)
                        {
                            foreach (DataRow _drresult in _dtResultsSum.Rows)
                            {
                                string _filter = "";
                                string _group = "";

                                for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                                {
                                    if (_filter != "")
                                    { _filter = _filter + " and "; }
                                    _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

                                    if (_group != "")
                                    { _group = _group + " ,"; }
                                    _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
                                }
                                if (_filter != "")
                                {
                                    //DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();
                                    var filteredDataRows1 = BMSales.Select(_filter);
                                    var dt1 = new DataTable();
                                    if (filteredDataRows1.Length != 0)
                                        dt1 = filteredDataRows1.CopyToDataTable();
                                    else
                                        dt1 = _dtResults.Clone();

                                    var ownerGroups = dt1.AsEnumerable()
                                        .GroupBy(row => new { _group });
                                    var dt2 = dt1.Clone();
                                    var intColumns = dt2.Columns.Cast<DataColumn>()
                                        .Where(c => c.DataType == typeof(decimal)).ToArray();
                                    foreach (var grp in ownerGroups)
                                    {
                                        var row = dt2.Rows.Add();

                                        for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                                        {
                                            if (_dtResultsSum.Columns[index].DataType.ToString() != "decimal")
                                            {
                                                row.SetField(_dtResultsSum.Columns[index].ColumnName.ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_dtResultsSum.Columns[index].ToString()].Ordinal));
                                            }
                                        }
                                        //foreach (DataRow _drcol in _col.Rows)
                                        //{
                                        //    row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drcol[0].ToString()].Ordinal));
                                        //}
                                        //foreach (DataRow _drrow in _row.Rows)
                                        //{
                                        //    row.SetField(_drrow[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drrow[0].ToString()].Ordinal));
                                        //}
                                        foreach (DataColumn col in intColumns)
                                        {
                                            bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                                            decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                                            row.SetField(col, sum);
                                        }
                                    }

                                    BMSales1.Merge(dt2);
                                }
                            }
                        }
                    }
                    #endregion
                    #region create list
                    //if (BMSales1.Rows.Count > 0)
                    //{
                    //    result = DataTableExtensions.ToGenericList<GLB_PROFITABILITY>(BMSales1, GLB_PROFITABILITY.Converter1);
                    //}
                    //else
                    //{
                    //    error = "Records not found.";
                    //    throw new System.ArgumentException(error, "original");
                    //}
                    if (final.Rows.Count > 0)
                    {
                        result = DataTableExtensions.ToGenericList<GLB_PROFITABILITY>(final, GLB_PROFITABILITY.Converter1);
                    }
                    else
                    {
                        error = "Records not found.";
                        throw new System.ArgumentException(error, "original");
                    }

                    #endregion
                    var year_month = result.GroupBy(x => new { x.YEAR, x.MONTH })
                    .Select(g => new { g.Key.YEAR, g.Key.MONTH, MyCount = g.Count() });
                    TimeSpan ts = orgfromdate - orgtodate;
                    int monthsApart = (12 * (orgfromdate.Year - orgtodate.Year) + orgfromdate.Month - orgtodate.Month) * -1;
                    decimal _quarter = (Convert.ToDecimal(monthsApart) / 3) + Convert.ToDecimal("0.51");
                    int quarter = Convert.ToInt32(Math.Round(_quarter, MidpointRounding.AwayFromZero));
                    #region Create table
                    DataTable output = new DataTable();
                    output.Columns.Add("Acc", typeof(string));
                    output.Columns.Add("Description", typeof(string));

                    for (int i = 1; i <= quarter; i++)
                    {
                        string Qtr = i.ToString();
                        output.Columns.Add("Previous" + " " + Qtr + " Qtr", typeof(decimal));
                        output.Columns.Add(Qtr + " Qtr" + " Budget", typeof(decimal));
                        output.Columns.Add(Qtr + " Qtr" + " Actual", typeof(decimal));
                    }
                    output.Columns.Add("Previous", typeof(decimal));
                    output.Columns.Add("Budget", typeof(decimal));
                    // output.Columns.Add("Revise Budge", typeof(decimal));
                    output.Columns.Add("Actual", typeof(decimal));
                    var months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames
                         .TakeWhile(m => m != String.Empty)
                         .Select((m, i) => new
                         {
                             Month = i + 1,
                             MonthName = m
                         })
                         .ToList();

                    #endregion

                    DateTime nextMonth = orgfromdate;
                    List<GLB_PROFITABILITY> _GLB_PROFITABILITYlLIST = new List<GLB_PROFITABILITY>();
                    DateTime temp_orgfromdate = nextMonth;
                    for (int i = 1; i <= quarter; i++)
                    {



                        string Qtr = i.ToString();
                        List<GLB_PROFITABILITY> temp_list_GLB_PROFITABILITY = new List<GLB_PROFITABILITY>();
                        string _year = temp_orgfromdate.Year.ToString();
                        string _month = temp_orgfromdate.Month.ToString();

                        List<GLB_PROFITABILITY> _firstmonth = result.Where(r => r.YEAR == Convert.ToInt32(_year) && r.MONTH == Convert.ToInt32(_month)).ToList();
                        temp_list_GLB_PROFITABILITY.AddRange(_firstmonth);
                        temp_orgfromdate = temp_orgfromdate.AddDays(1).AddMonths(1).AddDays(-1);


                        _year = temp_orgfromdate.Year.ToString();
                        _month = temp_orgfromdate.Month.ToString();
                        List<GLB_PROFITABILITY> _secondmonth = result.Where(r => r.YEAR == Convert.ToInt32(_year) && r.MONTH == Convert.ToInt32(_month)).ToList();
                        temp_list_GLB_PROFITABILITY.AddRange(_secondmonth);
                        temp_orgfromdate = temp_orgfromdate.AddDays(1).AddMonths(1).AddDays(-1);

                        _year = temp_orgfromdate.Year.ToString();
                        _month = temp_orgfromdate.Month.ToString();
                        List<GLB_PROFITABILITY> _thirdmonth = result.Where(r => r.YEAR == Convert.ToInt32(_year) && r.MONTH == Convert.ToInt32(_month)).ToList();
                        temp_list_GLB_PROFITABILITY.AddRange(_thirdmonth);
                        temp_orgfromdate = temp_orgfromdate.AddDays(1).AddMonths(1).AddDays(-1);

                        foreach (GLB_PROFITABILITY item in temp_list_GLB_PROFITABILITY)
                        {
                            item.MONTH = i;
                        }

                        #region grup list
                        List<GLB_PROFITABILITY> _temp = (from sg in temp_list_GLB_PROFITABILITY
                                                         //where sg.TPSD_ELEMENT_CD != "REFUND"
                                                         group sg by new
                                                         {
                                                             MONTH = sg.MONTH,
                                                             ACCOUNT = sg.ACCOUNT,
                                                             HED_CD = sg.HED_CD,
                                                             HED_DESC = sg.HED_DESC,
                                                             HED_ORDER = sg.HED_ORDER,
                                                             GRP_CD = sg.GRP_CD,
                                                             GRP_DESC = sg.GRP_DESC,
                                                             GRP_ORDER = sg.GRP_ORDER
                                                         } into sgd
                                                         select new GLB_PROFITABILITY
                                                         {
                                                             HED_CD = sgd.Select(x => x.HED_CD).FirstOrDefault(),
                                                             HED_DESC = sgd.Select(x => x.HED_DESC).FirstOrDefault(),
                                                             HED_ORDER = sgd.Select(x => x.HED_ORDER).FirstOrDefault(),
                                                             GRP_CD = sgd.Select(x => x.GRP_CD).FirstOrDefault(),
                                                             GRP_DESC = sgd.Select(x => x.GRP_DESC).FirstOrDefault(),
                                                             GRP_ORDER = sgd.Select(x => x.GRP_ORDER).FirstOrDefault(),
                                                             TARGET = sgd.Sum(x => x.TARGET),
                                                             ACTUAL = sgd.Sum(x => x.ACTUAL),
                                                             DIRECTION = sgd.Select(x => x.DIRECTION).FirstOrDefault(),
                                                             PREVIOUS = sgd.Sum(x => x.PREVIOUS),
                                                             BUDGET = sgd.Sum(x => x.BUDGET),
                                                             MONTH = sgd.Select(x => x.MONTH).FirstOrDefault(),
                                                             ACCOUNT = sgd.Select(x => x.ACCOUNT).FirstOrDefault()
                                                         }).ToList();
                        #endregion


                        _GLB_PROFITABILITYlLIST.AddRange(_temp);
                    }


                    #region add table
                    var HED_ORDER_NEW = _GLB_PROFITABILITYlLIST.GroupBy(x => new { x.HED_ORDER, x.HED_DESC })
                          .Select(g => new { g.Key.HED_ORDER, g.Key.HED_DESC, MyCount = g.Count() });
                    decimal _previousTot = 0;
                    decimal _BudgetsTot = 0;
                    decimal _ActualsTot = 0;
                    foreach (var _HED_ORDER in HED_ORDER_NEW)
                    {
                        output.Rows.Clear();

                        List<GLB_PROFITABILITY> temp_GLB_PROFITABILITY = _GLB_PROFITABILITYlLIST.Where(r => r.HED_ORDER == _HED_ORDER.HED_ORDER).ToList();
                        if (temp_GLB_PROFITABILITY.Count > 0)
                        {

                            decimal COL_PREVIOUS_SUM = 0;
                            decimal COL_BUDGET_SUM = 0;
                            decimal COL_ACTUAL_SUM = 0;
                            decimal ROW_PREVIOUS_SUM = 0;
                            decimal ROW_BUDGET_SUM = 0;
                            decimal ROW_ACTUAL_SUM = 0;
                            foreach (GLB_PROFITABILITY item in temp_GLB_PROFITABILITY)
                            {
                                string Qtr = item.MONTH.ToString();

                                #region table insert
                                if (output.Rows.Count > 0)
                                {
                                    DataTable _avilabledate = new DataTable();
                                    if (output.Rows.Count > 0)
                                    {
                                        var results = (from MyRows in output.AsEnumerable()
                                                       where
                                                        MyRows.Field<string>("Description") == item.GRP_DESC

                                                       select MyRows);
                                        if (results.Any())
                                        {
                                            _avilabledate = results.CopyToDataTable();
                                        }

                                    }

                                    if (_avilabledate.Rows.Count > 0)
                                    {


                                        foreach (DataRow drn in output.Rows) // search whole table
                                        {
                                            if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                                            {
                                                drn["Previous" + " " + Qtr + " Qtr"] = item.PREVIOUS;
                                                drn[Qtr + " Qtr" + " Budget"] = item.BUDGET;
                                                drn[Qtr + " Qtr" + " Actual"] = item.ACTUAL;
                                                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        DataRow drow = output.NewRow();
                                        drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                        drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                        drow["Previous" + " " + Qtr + " Qtr"] = item.PREVIOUS;// ins[i].DATE;
                                        drow[Qtr + " Qtr" + " Budget"] = item.BUDGET;// ins[i].DATE;
                                        drow[Qtr + " Qtr" + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                        ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                        ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                        ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                        output.Rows.Add(drow);
                                    }
                                }
                                else
                                {

                                    DataRow drow = output.NewRow();
                                    drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                    drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                    drow["Previous" + " " + Qtr + " Qtr"] = item.PREVIOUS;// ins[i].DATE;
                                    drow[Qtr + " Qtr" + " Budget"] = item.BUDGET;// ins[i].DATE;
                                    drow[Qtr + " Qtr" + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                    ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                    ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                    ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                    output.Rows.Add(drow);
                                }
                                #endregion
                            }

                            #region insert sumnew
                            int countRow = output.Rows.Count;
                            int countCol = output.Columns.Count - 3;

                            DataRow drowTot = output.NewRow();
                            drowTot["Acc"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                            drowTot["Description"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                            output.Rows.Add(drowTot);

                            //decimal _previousTot = 0;
                            //decimal _BudgetsTot = 0;
                            //decimal _ActualsTot = 0;
                            for (int iRow = 0; iRow < countRow; iRow++)
                            {

                                int _lastIndexOfMainTable = _finaltable.Rows.Count == 0 ? -1 : _finaltable.Rows.Count - 1;

                                decimal _previousSum = 0;
                                decimal _BudgetsSum = 0;
                                decimal _ActualsSum = 0;
                                for (int iCol = 2; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _previousSum = _previousSum + AMOUT;
                                    }

                                    iCol = iCol + 3;
                                }

                                for (int iCol = 3; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _BudgetsSum = _BudgetsSum + AMOUT;
                                    }

                                    iCol = iCol + 3;
                                }

                                for (int iCol = 4; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _ActualsSum = _ActualsSum + AMOUT;
                                    }

                                    iCol = iCol + 3;
                                }

                                output.Rows[iRow][output.Columns.Count - 3] = _previousSum;
                                output.Rows[iRow][output.Columns.Count - 2] = _BudgetsSum;
                                output.Rows[iRow][output.Columns.Count - 1] = _ActualsSum;
                                _previousTot = _previousTot + _previousSum;
                                _BudgetsTot = _BudgetsTot + _BudgetsSum;
                                _ActualsTot = _ActualsTot + _ActualsSum;
                                output.Rows[iRow + 1][output.Columns.Count - 3] = _previousTot;
                                output.Rows[iRow + 1][output.Columns.Count - 2] = _BudgetsTot;
                                output.Rows[iRow + 1][output.Columns.Count - 1] = _ActualsTot;

                            }

                            #endregion




                        }
                        _finaltable.Merge(output);
                    }
                    #endregion




                }

                #endregion

                result = result;


                string _filePath = ExportExcel2007(com, user, _finaltable, out error);
                #region send mail
                if (_finaltable.Rows.Count != 0)
                {
                    InventoryDAL _inventoryDAL = new InventoryDAL();
                    DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(user);
                    if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
                    {
                        GeneralDAL _generalDAL = new GeneralDAL();
                        SmtpClient smtpClient = new SmtpClient();
                        MailMessage message = new MailMessage();
                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                        smtpClient.Host = _generalDAL.GetMailHost();
                        smtpClient.Port = 25;
                        message.From = fromAddress;
                        string FOOTER = _generalDAL.GetMailFooterMsg();
                        string _email = "";
                        // string _docNo = _docNo.Replace("Normal:", "");
                        _email = "Generated report path as follows" + Environment.NewLine;
                        _email += _filePath + Environment.NewLine + Environment.NewLine;
                        //_email = _email + "Approved #-" + _docNo + " <br><P>";
                        _email = _email + "<br>" + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                        message.To.Add(_dtEmail.Rows[0]["SE_EMAIL"].ToString());
                        //message.Bcc.Add("amilasanjeewa@abansgroup.com");
                        message.Subject = "Budget Report";
                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                        //message.Bcc.Add(new MailAddress(""));
                        message.IsBodyHtml = false;
                        message.Body = _email;
                        message.IsBodyHtml = true;
                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                        // Send SMTP mail
                        smtpClient.Send(message);
                    }
                }
                #endregion
                DashboardDal.TransactionCommit();
                //A:
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                DashboardDal.TransactionRollback();
                _securityDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
            }
            return result;
        }
        public List<GLB_PROFITABILITY> getBudgetReport_cat_wise(DateTime frm, DateTime to, DateTime frmpy, DateTime topy, string channel, List<SELECTED_PC> pc, string cate, string com, string user, Int32 headid, string CategoryWise, string report_type, out string error)
        {
            error = "";
            DateTime orgfromdate = frm;
            DateTime orgtodate = to;
            DataTable BMSales = new DataTable();
            BMSales.TableName = "BMTable";
            DataTable _dtHeader = new DataTable();
            _dtHeader.TableName = "BMHeader";
            DataTable _dtResults = new DataTable();
            DataRow dr;
            DataRow dr1;
            DataRow dr2;
            DataRow dt2dr;
            int s = 0;
            int t = 0;
            int u = 0;
            int v = 0;
            string vRows = "";
            DataTable BMSales1 = new DataTable();
            BMSales.Clear();
            DataTable _finaltable = new DataTable();
            _finaltable.TableName = "Final";
            _finaltable.Clear();

            string month_name = "";
            string previous = "";
            List<GLB_PROFITABILITY> result = new List<GLB_PROFITABILITY>();
            List<Mst_Sys_Para> Mst_Sys_Para = new List<Mst_Sys_Para>();
            List<string> _itmcat = new List<string>();
            int countRow = 0;
            int countCol = 0;

            DataRow drowTot  ;
            

           
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                _financialDAL = new FinancialDAL();
                GeneralDAL _GeneralDAL = new GeneralDAL();
                DashboardDal.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BI_BUDGET") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                DashboardDal.BeginTransaction();
                Int32 rem = DashboardDal.rempveTemporyParameters(user, "PROFDATA");
                if (pc != null && pc.Count > 0)
                {
                    foreach (SELECTED_PC c in pc)
                    {
                        Int32 addPc = DashboardDal.addTemporyParameters(user, "PC", "PROFDATA", c.MSC_CD);
                    }
                }
                else
                {
                    _securityDAL = new SecurityDAL();
                    _securityDAL.ConnectionOpen();
                    Int32 haspcper = _securityDAL.getUserSpecialPermission(user.ToUpper(), com, "PRFRPTALPC");
                    if (haspcper == 0)
                    {
                        Int32 addPc = DashboardDal.addTUserProfitCenters(user, "PC", "PROFDATA", channel, com);
                    }
                }
                List<GLB_PROFITABILITY> temp = new List<GLB_PROFITABILITY>();
                DataTable final = new DataTable();
                #region Monthwise report
                if (report_type == "Month")
                {
                    DateTime tempdate = frm;
                    DateTime AsAtTo = to;
                    DateTime AsAtFrom = frm;

                    DateTime currentdate = DateTime.Today.Date;
                    DateTime StartDate = new DateTime(currentdate.Year, currentdate.Month, 1);
                    DateTime EndDate = StartDate.AddMonths(1).AddDays(-1);
                    tempdate = new DateTime(frm.Year, frm.Month, 1).AddMonths(1).AddDays(-1);
                    DataTable temptbl = new DataTable();
                    while (tempdate < to)
                    {
                        if (tempdate <= to)
                        {
                            temptbl = new DataTable();
                            temptbl = DashboardDal.getBudgetReport_tb_cat_wise(frm, tempdate, frmpy, topy, channel, null, cate, com, user);
                            final.Merge(temptbl);
                            frm = tempdate.AddDays(1);
                        }
                        tempdate = frm.AddMonths(1).AddDays(-1);
                    }
                    temptbl = new DataTable();
                    temptbl = DashboardDal.getBudgetReport_tb_cat_wise(frm, to, frmpy, topy, channel,null, cate, com, user);
                    final.Merge(temptbl);
                    #region temp finalize table
                    //if (final.Rows.Count > 0)
                    //{


                    //    DataTable _dtResults2 = new DataTable();
                    //    _dtResults2 = final;
                    //    _dtHeader = new DataTable();
                    //    DataTable _repHead = _financialDAL.getBMReportHeading("BUDGET_REPORT");
                    //    if (_repHead.Rows.Count <= 0)
                    //    {
                    //        error = "Report Headings not defined.";
                    //        throw new System.ArgumentException(error, "original");
                    //    }
                    //    if (_dtResults2.Rows.Count > 0)
                    //    {
                    //        _dtResults2 = DataTableExtensions.ToValidateDataTable(_dtResults2);

                    //    }

                    //    for (int _colm = 0; _colm <= _dtResults2.Columns.Count - 1; _colm++)
                    //    {
                    //        _dtHeader.Columns.Add(_dtResults2.Columns[_colm].ColumnName.ToString(), typeof(string));
                    //    }

                    //    int _colcount = 0;
                    //    for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                    //    {
                    //        foreach (DataRow drlochead in _repHead.Rows)
                    //        {
                    //            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                    //            {
                    //                if (drlochead["bmr_data_tp"].ToString() != "decimal")
                    //                {
                    //                    _colcount = _colcount + 1;
                    //                }
                    //            }
                    //        }
                    //    }

                    //    String[] szColumns1 = new String[_colcount];
                    //    BMSales = _dtResults2;
                    //    DataRow drs;
                    //    drs = _dtHeader.NewRow();
                    //    t = 0;

                    //    for (int _colm = 0; _colm <= _dtHeader.Columns.Count - 1; _colm++)
                    //    {
                    //        string _colname = "";

                    //        foreach (DataRow drlochead in _repHead.Rows)
                    //        {
                    //            if (drlochead["bmr_col_nm"].ToString().ToUpper() == _dtHeader.Columns[_colm].ColumnName.ToString())
                    //            {
                    //                _colname = drlochead["bmr_col_desc"].ToString();

                    //                if (drlochead["bmr_data_tp"].ToString() != "decimal")
                    //                {
                    //                    szColumns1[t] = drlochead["bmr_col_nm"].ToString().ToUpper();
                    //                    t = t + 1;
                    //                }
                    //            }
                    //        }

                    //        drs[_colm] = _colname;

                    //    }
                    //    _dtHeader.Rows.Add(drs);
                    //    _dtHeader.TableName = "BMHeader";
                    //    ////////////////

                    //    DataTable OFI = BMSales.DefaultView.ToTable(true, szColumns1);

                    //    DataView viewFI = new DataView(OFI);
                    //    viewFI.Sort = vRows;
                    //    DataTable _dtResultsSum = viewFI.ToTable();



                    //    //BMSales

                    //    if (BMSales.Rows.Count > 0)
                    //    {
                    //        foreach (DataRow _drresult in _dtResultsSum.Rows)
                    //        {
                    //            string _filter = "";
                    //            string _group = "";

                    //            for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                    //            {
                    //                if (_filter != "")
                    //                { _filter = _filter + " and "; }
                    //                _filter = _filter + "[" + _dtResultsSum.Columns[index].ColumnName + "]" + " ='" + _drresult[index].ToString() + "'";

                    //                if (_group != "")
                    //                { _group = _group + " ,"; }
                    //                _group = _group + "[" + _dtResultsSum.Columns[index].ColumnName + "] = row.Field<string>([" + _dtResultsSum.Columns[index].ColumnName + "])";
                    //            }
                    //            if (_filter != "")
                    //            {
                    //                //DataTable dt1 = _dtResults.Select(_filter).CopyToDataTable();
                    //                var filteredDataRows1 = BMSales.Select(_filter);
                    //                var dt1 = new DataTable();
                    //                if (filteredDataRows1.Length != 0)
                    //                    dt1 = filteredDataRows1.CopyToDataTable();
                    //                else
                    //                    dt1 = _dtResults.Clone();

                    //                var ownerGroups = dt1.AsEnumerable()
                    //                    .GroupBy(row => new { _group });
                    //                var dt2 = dt1.Clone();
                    //                var intColumns = dt2.Columns.Cast<DataColumn>()
                    //                    .Where(c => c.DataType == typeof(decimal)).ToArray();
                    //                foreach (var grp in ownerGroups)
                    //                {
                    //                    var row = dt2.Rows.Add();

                    //                    for (int index = 0; index < _dtResultsSum.Columns.Count; index++)
                    //                    {
                    //                        if (_dtResultsSum.Columns[index].DataType.ToString() != "decimal")
                    //                        {
                    //                            row.SetField(_dtResultsSum.Columns[index].ColumnName.ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_dtResultsSum.Columns[index].ToString()].Ordinal));
                    //                        }
                    //                    }
                    //                    //foreach (DataRow _drcol in _col.Rows)
                    //                    //{
                    //                    //    row.SetField(_drcol[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drcol[0].ToString()].Ordinal));
                    //                    //}
                    //                    //foreach (DataRow _drrow in _row.Rows)
                    //                    //{
                    //                    //    row.SetField(_drrow[0].ToString(), grp.ElementAt(0).ItemArray.GetValue(dt1.Columns[_drrow[0].ToString()].Ordinal));
                    //                    //}
                    //                    foreach (DataColumn col in intColumns)
                    //                    {
                    //                        bool anyNonNull = grp.Any(r => r.Field<decimal?>(col.Ordinal).HasValue);
                    //                        decimal? sum = anyNonNull ? grp.Sum(r => r.Field<decimal?>(col.Ordinal)) : null;
                    //                        row.SetField(col, sum);
                    //                    }
                    //                }

                    //                BMSales1.Merge(dt2);
                    //            }
                    //        }
                    //    }
                    //}
                    #endregion
                    #region create list
                    if (final.Rows.Count > 0)
                    {
                        result = DataTableExtensions.ToGenericList<GLB_PROFITABILITY>(final, GLB_PROFITABILITY.Converter2);
                    }
                    else
                    {
                        error = "Records not found.";
                        throw new System.ArgumentException(error, "original");
                    }

                    #endregion
                    var year_month = result.GroupBy(x => new { x.YEAR, x.MONTH })
                    .Select(g => new { g.Key.YEAR, g.Key.MONTH, MyCount = g.Count() });
                    #region Create table
                    DataTable output = new DataTable();
                    output.Columns.Add("Acc", typeof(string));
                    output.Columns.Add("Description", typeof(string));
                    var months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames
                          .TakeWhile(m => m != String.Empty)
                          .Select((m, i) => new
                          {
                              Month = i + 1,
                              MonthName = m
                          })
                          .ToList();
                    if (!string.IsNullOrEmpty(cate))
                    {
                        foreach (var clms in year_month)
                        {
                            previous = Convert.ToString(clms.YEAR - 1);
                            var month = from sta in months
                                        where sta.Month == clms.MONTH
                                        select sta.MonthName;
                            month_name = "";
                            foreach (var _month in month)
                            { month_name = _month; }

                            //output.Columns.Add(previous + " " + month_name, typeof(decimal));
                            output.Columns.Add(month_name + " " + cate + " Budget", typeof(decimal));
                            output.Columns.Add(month_name + " " + cate + " Actual", typeof(decimal));
                        }
                    }
                    else
                    {
                     
                        Mst_Sys_Para = _GeneralDAL._Mst_Sys_Para(com, com, "BUDCTWISE");
                        if (Mst_Sys_Para.Count > 0)
                        {
                            string tags = Mst_Sys_Para.First().msp_rest_desc;
                            _itmcat = tags.Split(',').ToList();
                            foreach (var _month in year_month)
                            {
                                foreach (var caten in _itmcat)
                                {
                                    previous = Convert.ToString(_month.YEAR - 1);
                                    var month = from sta in months
                                                where sta.Month == _month.MONTH
                                                select sta.MonthName;
                                    month_name = "";
                                    foreach (var _monthn in month)
                                    { month_name = _monthn; }

                                    //output.Columns.Add(previous + " " + month_name, typeof(decimal));
                                    output.Columns.Add(month_name + " " + caten + " Budget", typeof(decimal));
                                    output.Columns.Add(month_name + " " + caten + " Actual", typeof(decimal));
                                }
                                output.Columns.Add(month_name + " " + "Other" + " Budget", typeof(decimal));
                                output.Columns.Add(month_name + " " + "Other" + " Actual", typeof(decimal));
                            }
                            //output.Columns.Add(previous + " " + month_name, typeof(decimal));
                            //output.Columns.Add(month_name + " " + "Other" + " Budget", typeof(decimal));
                            //output.Columns.Add(month_name + " " + "Other" + " Actual", typeof(decimal));

                        }
                        else
                        {
                            error = "Item cat Records not found.";
                            throw new System.ArgumentException(error, "original");
                        }
                    
                    }
                  
                    //output.Columns.Add(previous, typeof(decimal));
                    output.Columns.Add("Budget", typeof(decimal));
                    //output.Columns.Add("Revise Budge", typeof(decimal));
                    output.Columns.Add("Actual", typeof(decimal));


                    #endregion

                    var HED_ORDER = result.GroupBy(x => new { x.HED_ORDER, x.HED_DESC })
                            .Select(g => new { g.Key.HED_ORDER, g.Key.HED_DESC, MyCount = g.Count() });
                    if (string.IsNullOrEmpty(cate))
                    {
                        decimal _previousTot = 0;
                        decimal _BudgetsTot = 0;
                        decimal _ActualsTot = 0;

                        foreach (var _HED_ORDER in HED_ORDER)
                        {
                            output.Rows.Clear();
                            List<GLB_PROFITABILITY> temp_GLB_PROFITABILITY = result.Where(r => r.HED_ORDER == _HED_ORDER.HED_ORDER).ToList();
                            #region grup list
                            List<GLB_PROFITABILITY> _temp = (from sg in temp_GLB_PROFITABILITY
                                                             //where sg.TPSD_ELEMENT_CD != "REFUND"
                                                             group sg by new
                                                             {
                                                                 YEAR = sg.YEAR,
                                                                 MONTH = sg.MONTH,
                                                                 ACCOUNT = sg.ACCOUNT,
                                                                 HED_CD = sg.HED_CD,
                                                                 HED_DESC = sg.HED_DESC,
                                                                 HED_ORDER = sg.HED_ORDER,
                                                                 GRP_CD = sg.GRP_CD,
                                                                 GRP_DESC = sg.GRP_DESC,
                                                                 GRP_ORDER = sg.GRP_ORDER,
                                                                 ITM_CAT1 = sg.ITM_CAT1
                                                             } into sgd
                                                             select new GLB_PROFITABILITY
                                                             {
                                                                 YEAR = sgd.Select(x => x.YEAR).FirstOrDefault(),
                                                                 HED_CD = sgd.Select(x => x.HED_CD).FirstOrDefault(),
                                                                 HED_DESC = sgd.Select(x => x.HED_DESC).FirstOrDefault(),
                                                                 HED_ORDER = sgd.Select(x => x.HED_ORDER).FirstOrDefault(),
                                                                 GRP_CD = sgd.Select(x => x.GRP_CD).FirstOrDefault(),
                                                                 GRP_DESC = sgd.Select(x => x.GRP_DESC).FirstOrDefault(),
                                                                 GRP_ORDER = sgd.Select(x => x.GRP_ORDER).FirstOrDefault(),
                                                                 TARGET = sgd.Sum(x => x.TARGET),
                                                                 ACTUAL = sgd.Sum(x => x.ACTUAL),
                                                                 DIRECTION = sgd.Select(x => x.DIRECTION).FirstOrDefault(),
                                                                 PREVIOUS = sgd.Sum(x => x.PREVIOUS),
                                                                 BUDGET = sgd.Sum(x => x.BUDGET),
                                                                 MONTH = sgd.Select(x => x.MONTH).FirstOrDefault(),
                                                                 ACCOUNT = sgd.Select(x => x.ACCOUNT).FirstOrDefault(),
                                                                 ITM_CAT1 = sgd.Select(x => x.ITM_CAT1).FirstOrDefault()
                                                             }).ToList();
                            #endregion
                            temp_GLB_PROFITABILITY = new List<GLB_PROFITABILITY>();

                            temp_GLB_PROFITABILITY = _temp;
                            if (temp_GLB_PROFITABILITY.Count > 0)
                            {
                                decimal ROW_PREVIOUS_SUM = 0;
                                decimal ROW_BUDGET_SUM = 0;
                                decimal ROW_ACTUAL_SUM = 0;
                                #region comment
                                //if (!string.IsNullOrEmpty(cate))
                                //{
                                //    foreach (GLB_PROFITABILITY item in temp_GLB_PROFITABILITY)
                                //    {

                                //        #region get minth name
                                //        previous = Convert.ToString(item.YEAR - 1);
                                //        var month_n = from sta in months
                                //                      where sta.Month == item.MONTH
                                //                      select sta.MonthName;
                                //        foreach (var _month in month_n)
                                //        { month_name = _month; }
                                //        #endregion
                                //        #region table insert
                                //        if (output.Rows.Count > 0)
                                //        {
                                //            DataTable _avilabledate = new DataTable();
                                //            if (output.Rows.Count > 0)
                                //            {
                                //                var results = (from MyRows in output.AsEnumerable()
                                //                               where
                                //                                MyRows.Field<string>("Description") == item.GRP_DESC

                                //                               select MyRows);
                                //                if (results.Any())
                                //                {
                                //                    _avilabledate = results.CopyToDataTable();
                                //                }

                                //            }

                                //            if (_avilabledate.Rows.Count > 0)
                                //            {


                                //                foreach (DataRow drn in output.Rows) // search whole table
                                //                {
                                //                    if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                                //                    {
                                //                        //drn[previous + " " + month_name] = item.PREVIOUS;
                                //                        drn[month_name + " " + cate + " Budget"] = item.BUDGET;
                                //                        drn[month_name + " " + cate + " Actual"] = item.ACTUAL;
                                //                        ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                //                        ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                //                        ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                //                    }
                                //                }
                                //            }
                                //            else
                                //            {
                                //                DataRow drow = output.NewRow();
                                //                drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                //                drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                //                //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                //                drow[month_name + " " + cate + " Budget"] = item.BUDGET;// ins[i].DATE;
                                //                drow[month_name + " " + cate + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                //                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                //                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                //                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                //                output.Rows.Add(drow);
                                //            }
                                //        }
                                //        else
                                //        {

                                //            DataRow drow = output.NewRow();
                                //            drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                //            drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                //            //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                //            drow[month_name + " " + cate + " Budget"] = item.BUDGET;// ins[i].DATE;
                                //            drow[month_name + " " + cate + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                //            ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                //            ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                //            ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                //            output.Rows.Add(drow);
                                //        }
                                //        #endregion
                                //    }
                                //    #region insert sumnew

                                //    countRow = output.Rows.Count;
                                //    countCol = output.Columns.Count - 2;

                                //    drowTot = output.NewRow();
                                //    drowTot["Acc"] = _HED_ORDER.HED_DESC;// ins[i].DATE;

                                //    drowTot["Description"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                                //    output.Rows.Add(drowTot);

                                //    int _lastIndexOfMainTable = _finaltable.Rows.Count == 0 ? -1 : _finaltable.Rows.Count - 1;

                                //    decimal _previousTot = 0;
                                //    decimal _BudgetsTot = 0;
                                //    decimal _ActualsTot = 0;


                                //    //decimal _grandPreviousTot = 0;
                                //    //decimal _grandBudgetsTot = 0;
                                //    //decimal _grandActualsTot = 0;

                                //    //DataTable _dtTot = output.Clone();
                                //    //_dtTot.Rows.Add();

                                //    for (int iRow = 0; iRow < countRow; iRow++)
                                //    {
                                //        decimal _previousSum = 0;
                                //        decimal _BudgetsSum = 0;
                                //        decimal _ActualsSum = 0;
                                //        for (int iCol = 2; iCol < countCol; )
                                //        {
                                //            DataColumn col = output.Columns[iCol];
                                //            object cell = output.Rows[iRow].ItemArray[iCol];
                                //            if (cell != null)
                                //            {
                                //                decimal _grandTotal = 0;
                                //                decimal _currentValue = 0;
                                //                decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                //                decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                //                if (iRow == 0 && _lastIndexOfMainTable > -1)
                                //                {
                                //                    decimal _cumulativeSum = 0;
                                //                    decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                //                    _grandTotal = _cumulativeSum + _grandTotal;
                                //                }

                                //                decimal AMOUT = 0;
                                //                output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                //                decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                //                _previousSum = _previousSum + AMOUT;

                                //                //decimal _cumulativeSum=0;
                                //                //decimal.TryParse(_dtTot.Rows[0][iCol].ToString(), out _cumulativeSum);
                                //                //_dtTot.Rows[0][iCol] = _cumulativeSum + AMOUT;

                                //            }

                                //            iCol = iCol + 2;
                                //        }

                                //        for (int iCol = 3; iCol < countCol; )
                                //        {
                                //            DataColumn col = output.Columns[iCol];
                                //            object cell = output.Rows[iRow].ItemArray[iCol];
                                //            if (cell != null)
                                //            {
                                //                decimal _grandTotal = 0;
                                //                decimal _currentValue = 0;
                                //                decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                //                decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                //                if (iRow == 0 && _lastIndexOfMainTable > -1)
                                //                {
                                //                    decimal _cumulativeSum = 0;
                                //                    decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                //                    _grandTotal = _cumulativeSum + _grandTotal;
                                //                }

                                //                decimal AMOUT = 0;
                                //                output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                //                decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                //                _BudgetsSum = _BudgetsSum + AMOUT;

                                //                //decimal _cumulativeSum = 0;
                                //                //decimal.TryParse(_dtTot.Rows[0][iCol].ToString(), out _cumulativeSum);
                                //                //_dtTot.Rows[0][iCol] = _cumulativeSum + AMOUT;

                                //            }

                                //            iCol = iCol + 3;
                                //        }

                                //        //for (int iCol = 4; iCol < countCol; )
                                //        //{
                                //        //    DataColumn col = output.Columns[iCol];
                                //        //    object cell = output.Rows[iRow].ItemArray[iCol];
                                //        //    if (cell != null)
                                //        //    {
                                //        //        decimal _grandTotal = 0;
                                //        //        decimal _currentValue = 0;
                                //        //        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                //        //        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                //        //        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                //        //        {
                                //        //            decimal _cumulativeSum = 0;
                                //        //            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                //        //            _grandTotal = _cumulativeSum + _grandTotal;
                                //        //        }

                                //        //        decimal AMOUT = 0;
                                //        //        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                //        //        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                //        //        _ActualsSum = _ActualsSum + AMOUT;

                                //        //        //decimal _cumulativeSum = 0;
                                //        //        //decimal.TryParse(_dtTot.Rows[0][iCol].ToString(), out _cumulativeSum);
                                //        //        //_dtTot.Rows[0][iCol] = _cumulativeSum + AMOUT;
                                //        //    }

                                //        //    iCol = iCol + 3;
                                //        //}

                                //        // output.Rows[iRow][output.Columns.Count - 3] = _previousSum;
                                //        output.Rows[iRow][output.Columns.Count - 2] = _BudgetsSum;
                                //        output.Rows[iRow][output.Columns.Count - 1] = _ActualsSum;
                                //        _previousTot = _previousTot + _previousSum;
                                //        _BudgetsTot = _BudgetsTot + _BudgetsSum;
                                //        _ActualsTot = _ActualsTot + _BudgetsSum;
                                //        //output.Rows[iRow + 1][output.Columns.Count - 3] = _previousTot;
                                //        output.Rows[iRow + 1][output.Columns.Count - 2] = _BudgetsTot;
                                //        output.Rows[iRow + 1][output.Columns.Count - 1] = _ActualsTot;


                                //    }

                                //    #endregion
                                //    _finaltable.Merge(output);
                                //}
                                //else
                                //{
                                #endregion
                                foreach (var caten in _itmcat)
                                {
                                    List<GLB_PROFITABILITY> _tempcat = temp_GLB_PROFITABILITY.Where(r => r.ITM_CAT1 == caten).ToList();
                                    foreach (GLB_PROFITABILITY item in _tempcat)
                                    {

                                        #region get minth name
                                        previous = Convert.ToString(item.YEAR - 1);
                                        var month_n = from sta in months
                                                      where sta.Month == item.MONTH
                                                      select sta.MonthName;
                                        foreach (var _month in month_n)
                                        { month_name = _month; }
                                        #endregion
                                        #region table insert
                                        if (output.Rows.Count > 0)
                                        {
                                            DataTable _avilabledate = new DataTable();
                                            if (output.Rows.Count > 0)
                                            {
                                                var results = (from MyRows in output.AsEnumerable()
                                                               where
                                                                MyRows.Field<string>("Description") == item.GRP_DESC

                                                               select MyRows);
                                                if (results.Any())
                                                {
                                                    _avilabledate = results.CopyToDataTable();
                                                }

                                            }

                                            if (_avilabledate.Rows.Count > 0)
                                            {


                                                foreach (DataRow drn in output.Rows) // search whole table
                                                {
                                                    if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                                                    {
                                                        //drn[previous + " " + month_name] = item.PREVIOUS;
                                                        drn[month_name + " " + caten + " Budget"] = item.BUDGET;
                                                        drn[month_name + " " + caten + " Actual"] = item.ACTUAL;
                                                        ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                        ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                        ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                DataRow drow = output.NewRow();
                                                drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                                drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                                //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                                drow[month_name + " " + caten + " Budget"] = item.BUDGET;// ins[i].DATE;
                                                drow[month_name + " " + caten + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                output.Rows.Add(drow);
                                            }
                                        }
                                        else
                                        {

                                            DataRow drow = output.NewRow();
                                            drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                            drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                            //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                            drow[month_name + " " + caten + " Budget"] = item.BUDGET;// ins[i].DATE;
                                            drow[month_name + " " + caten + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                            ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                            ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                            ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                            output.Rows.Add(drow);
                                        }
                                        #endregion
                                    }
                                    temp_GLB_PROFITABILITY.RemoveAll(r => r.ITM_CAT1 == caten);
                                }
                                    #region add other cat
                                if (temp_GLB_PROFITABILITY.Count > 0) //add other cat
                                {
                                    //add sum other cat
                                    List<GLB_PROFITABILITY> _tempothcat = (from sg in temp_GLB_PROFITABILITY
                                                                     //where sg.TPSD_ELEMENT_CD != "REFUND"
                                                                     group sg by new
                                                                     {
                                                                         YEAR = sg.YEAR,
                                                                         MONTH = sg.MONTH,
                                                                         ACCOUNT = sg.ACCOUNT,
                                                                         HED_CD = sg.HED_CD,
                                                                         HED_DESC = sg.HED_DESC,
                                                                         HED_ORDER = sg.HED_ORDER,
                                                                         GRP_CD = sg.GRP_CD,
                                                                         GRP_DESC = sg.GRP_DESC,
                                                                         GRP_ORDER = sg.GRP_ORDER,
                                                                       
                                                                     } into sgd
                                                                     select new GLB_PROFITABILITY
                                                                     {
                                                                         YEAR = sgd.Select(x => x.YEAR).FirstOrDefault(),
                                                                         HED_CD = sgd.Select(x => x.HED_CD).FirstOrDefault(),
                                                                         HED_DESC = sgd.Select(x => x.HED_DESC).FirstOrDefault(),
                                                                         HED_ORDER = sgd.Select(x => x.HED_ORDER).FirstOrDefault(),
                                                                         GRP_CD = sgd.Select(x => x.GRP_CD).FirstOrDefault(),
                                                                         GRP_DESC = sgd.Select(x => x.GRP_DESC).FirstOrDefault(),
                                                                         GRP_ORDER = sgd.Select(x => x.GRP_ORDER).FirstOrDefault(),
                                                                         TARGET = sgd.Sum(x => x.TARGET),
                                                                         ACTUAL = sgd.Sum(x => x.ACTUAL),
                                                                         DIRECTION = sgd.Select(x => x.DIRECTION).FirstOrDefault(),
                                                                         PREVIOUS = sgd.Sum(x => x.PREVIOUS),
                                                                         BUDGET = sgd.Sum(x => x.BUDGET),
                                                                         MONTH = sgd.Select(x => x.MONTH).FirstOrDefault(),
                                                                         ACCOUNT = sgd.Select(x => x.ACCOUNT).FirstOrDefault()
                                                                        
                                                                     }).ToList();
                                    foreach (GLB_PROFITABILITY item in _tempothcat)
                                    {

                                        #region get minth name
                                        previous = Convert.ToString(item.YEAR - 1);
                                        var month_n = from sta in months
                                                      where sta.Month == item.MONTH
                                                      select sta.MonthName;
                                        foreach (var _month in month_n)
                                        { month_name = _month; }
                                        #endregion
                                        #region table insert
                                        if (output.Rows.Count > 0)
                                        {
                                            DataTable _avilabledate = new DataTable();
                                            if (output.Rows.Count > 0)
                                            {
                                                var results = (from MyRows in output.AsEnumerable()
                                                               where
                                                                MyRows.Field<string>("Description") == item.GRP_DESC

                                                               select MyRows);
                                                if (results.Any())
                                                {
                                                    _avilabledate = results.CopyToDataTable();
                                                }

                                            }

                                            if (_avilabledate.Rows.Count > 0)
                                            {


                                                foreach (DataRow drn in output.Rows) // search whole table
                                                {
                                                    if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                                                    {
                                                        //drn[previous + " " + month_name] = item.PREVIOUS;
                                                        drn[month_name + " " + "Other" + " Budget"] = item.BUDGET;
                                                        drn[month_name + " " + "Other" + " Actual"] = item.ACTUAL;
                                                        ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                        ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                        ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                DataRow drow = output.NewRow();
                                                drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                                drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                                //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                                drow[month_name + " " + "Other" + " Budget"] = item.BUDGET;// ins[i].DATE;
                                                drow[month_name + " " + "Other" + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                output.Rows.Add(drow);
                                            }
                                        }
                                        else
                                        {

                                            DataRow drow = output.NewRow();
                                            drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                            drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                            //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                            drow[month_name + " " + "Other" + " Budget"] = item.BUDGET;// ins[i].DATE;
                                            drow[month_name + " " + "Other" + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                            ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                            ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                            ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                            output.Rows.Add(drow);
                                        }
                                        #endregion
                                    }
                                   
                                }
                                    #endregion
                                    
                            }

                            #region insert sumnew
                             countRow = output.Rows.Count;
                             countCol = output.Columns.Count - 2;

                             drowTot = output.NewRow();
                            drowTot["Acc"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                            drowTot["Description"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                            output.Rows.Add(drowTot);

                            //decimal _previousTot = 0;
                            //decimal _BudgetsTot = 0;
                            //decimal _ActualsTot = 0;
                            for (int iRow = 0; iRow < countRow; iRow++)
                            {

                                int _lastIndexOfMainTable = _finaltable.Rows.Count == 0 ? -1 : _finaltable.Rows.Count - 1;

                                decimal _previousSum = 0;
                                decimal _BudgetsSum = 0;
                                decimal _ActualsSum = 0;
                                for (int iCol = 2; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;///////////////////

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _BudgetsSum = _BudgetsSum + AMOUT;
                                    }

                                    iCol = iCol + 2;
                                }

                                for (int iCol = 3; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _ActualsSum = _ActualsSum + AMOUT;
                                    }

                                    iCol = iCol + 2;
                                }

                         

                                //output.Rows[iRow][output.Columns.Count - 3] = _previousSum;
                                output.Rows[iRow][output.Columns.Count - 2] = _BudgetsSum;
                                output.Rows[iRow][output.Columns.Count - 1] = _ActualsSum;
                                _previousTot = _previousTot + _previousSum;
                                _BudgetsTot = _BudgetsTot + _BudgetsSum;
                                _ActualsTot = _ActualsTot + _ActualsSum;
                               // output.Rows[iRow + 1][output.Columns.Count - 3] = _previousTot;
                                output.Rows[iRow + 1][output.Columns.Count - 2] = _BudgetsTot;
                                output.Rows[iRow + 1][output.Columns.Count - 1] = _ActualsTot;

                            }

                            #endregion
                            _finaltable.Merge(output);

                            
                        }
                    }
                    else
                    {
                        decimal _previousTot = 0;
                        decimal _BudgetsTot = 0;
                        decimal _ActualsTot = 0;

                        foreach (var _HED_ORDER in HED_ORDER)
                        {
                            output.Rows.Clear();
                            List<GLB_PROFITABILITY> temp_GLB_PROFITABILITY = result.Where(r => r.HED_ORDER == _HED_ORDER.HED_ORDER).ToList();
                            #region grup list
                            List<GLB_PROFITABILITY> _temp = (from sg in temp_GLB_PROFITABILITY
                                                             //where sg.TPSD_ELEMENT_CD != "REFUND"
                                                             group sg by new
                                                             {
                                                                 YEAR = sg.YEAR,
                                                                 MONTH = sg.MONTH,
                                                                 ACCOUNT = sg.ACCOUNT,
                                                                 HED_CD = sg.HED_CD,
                                                                 HED_DESC = sg.HED_DESC,
                                                                 HED_ORDER = sg.HED_ORDER,
                                                                 GRP_CD = sg.GRP_CD,
                                                                 GRP_DESC = sg.GRP_DESC,
                                                                 GRP_ORDER = sg.GRP_ORDER,
                                                                 ITM_CAT1 = sg.ITM_CAT1
                                                             } into sgd
                                                             select new GLB_PROFITABILITY
                                                             {
                                                                 YEAR = sgd.Select(x => x.YEAR).FirstOrDefault(),
                                                                 HED_CD = sgd.Select(x => x.HED_CD).FirstOrDefault(),
                                                                 HED_DESC = sgd.Select(x => x.HED_DESC).FirstOrDefault(),
                                                                 HED_ORDER = sgd.Select(x => x.HED_ORDER).FirstOrDefault(),
                                                                 GRP_CD = sgd.Select(x => x.GRP_CD).FirstOrDefault(),
                                                                 GRP_DESC = sgd.Select(x => x.GRP_DESC).FirstOrDefault(),
                                                                 GRP_ORDER = sgd.Select(x => x.GRP_ORDER).FirstOrDefault(),
                                                                 TARGET = sgd.Sum(x => x.TARGET),
                                                                 ACTUAL = sgd.Sum(x => x.ACTUAL),
                                                                 DIRECTION = sgd.Select(x => x.DIRECTION).FirstOrDefault(),
                                                                 PREVIOUS = sgd.Sum(x => x.PREVIOUS),
                                                                 BUDGET = sgd.Sum(x => x.BUDGET),
                                                                 MONTH = sgd.Select(x => x.MONTH).FirstOrDefault(),
                                                                 ACCOUNT = sgd.Select(x => x.ACCOUNT).FirstOrDefault(),
                                                                 ITM_CAT1 = sgd.Select(x => x.ITM_CAT1).FirstOrDefault()
                                                             }).ToList();
                            #endregion
                            temp_GLB_PROFITABILITY = new List<GLB_PROFITABILITY>();

                            temp_GLB_PROFITABILITY = _temp;
                            if (temp_GLB_PROFITABILITY.Count > 0)
                            {
                                decimal ROW_PREVIOUS_SUM = 0;
                                decimal ROW_BUDGET_SUM = 0;
                                decimal ROW_ACTUAL_SUM = 0;
                                if (!string.IsNullOrEmpty(cate))
                                {
                                    foreach (GLB_PROFITABILITY item in temp_GLB_PROFITABILITY)
                                    {

                                        #region get minth name
                                        previous = Convert.ToString(item.YEAR - 1);
                                        var month_n = from sta in months
                                                      where sta.Month == item.MONTH
                                                      select sta.MonthName;
                                        foreach (var _month in month_n)
                                        { month_name = _month; }
                                        #endregion
                                        #region table insert
                                        if (output.Rows.Count > 0)
                                        {
                                            DataTable _avilabledate = new DataTable();
                                            if (output.Rows.Count > 0)
                                            {
                                                var results = (from MyRows in output.AsEnumerable()
                                                               where
                                                                MyRows.Field<string>("Description") == item.GRP_DESC

                                                               select MyRows);
                                                if (results.Any())
                                                {
                                                    _avilabledate = results.CopyToDataTable();
                                                }

                                            }

                                            if (_avilabledate.Rows.Count > 0)
                                            {


                                                foreach (DataRow drn in output.Rows) // search whole table
                                                {
                                                    if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                                                    {
                                                        //drn[previous + " " + month_name] = item.PREVIOUS;
                                                        drn[month_name + " " + cate + " Budget"] = item.BUDGET;
                                                        drn[month_name + " " + cate + " Actual"] = item.ACTUAL;
                                                        ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                        ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                        ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                DataRow drow = output.NewRow();
                                                drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                                drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                                //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                                drow[month_name + " " + cate + " Budget"] = item.BUDGET;// ins[i].DATE;
                                                drow[month_name + " " + cate + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                output.Rows.Add(drow);
                                            }
                                        }
                                        else
                                        {

                                            DataRow drow = output.NewRow();
                                            drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                            drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                            //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                            drow[month_name + " " + cate + " Budget"] = item.BUDGET;// ins[i].DATE;
                                            drow[month_name + " " + cate + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                            ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                            ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                            ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                            output.Rows.Add(drow);
                                        }
                                        #endregion
                                    }
                                    #region insert sumnew
                                    countRow = output.Rows.Count;
                                    countCol = output.Columns.Count - 2;

                                    drowTot = output.NewRow();
                                    drowTot["Acc"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                                    drowTot["Description"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                                    output.Rows.Add(drowTot);

                                    //decimal _previousTot = 0;
                                    //decimal _BudgetsTot = 0;
                                    //decimal _ActualsTot = 0;
                                    for (int iRow = 0; iRow < countRow; iRow++)
                                    {

                                        int _lastIndexOfMainTable = _finaltable.Rows.Count == 0 ? -1 : _finaltable.Rows.Count - 1;

                                        decimal _previousSum = 0;
                                        decimal _BudgetsSum = 0;
                                        decimal _ActualsSum = 0;
                                        for (int iCol = 2; iCol < countCol; )
                                        {
                                            DataColumn col = output.Columns[iCol];
                                            object cell = output.Rows[iRow].ItemArray[iCol];
                                            if (cell != null)
                                            {
                                                decimal _grandTotal = 0;
                                                decimal _currentValue = 0;
                                                decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                                decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);
                                                output.Rows[countRow][iCol] = _grandTotal + _currentValue;///////////////////

                                                if (iRow == 0 && _lastIndexOfMainTable > -1)
                                                {
                                                    decimal _cumulativeSum = 0;
                                                    decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                                    _grandTotal = _cumulativeSum + _grandTotal;
                                                }

                                                decimal AMOUT = 0;
                                                output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                                decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                                _BudgetsSum = _BudgetsSum + AMOUT;
                                            }

                                            iCol = iCol + 2;
                                        }

                                        for (int iCol = 3; iCol < countCol; )
                                        {
                                            DataColumn col = output.Columns[iCol];
                                            object cell = output.Rows[iRow].ItemArray[iCol];
                                            if (cell != null)
                                            {
                                                decimal _grandTotal = 0;
                                                decimal _currentValue = 0;
                                                decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                                decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                                if (iRow == 0 && _lastIndexOfMainTable > -1)
                                                {
                                                    decimal _cumulativeSum = 0;
                                                    decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                                    _grandTotal = _cumulativeSum + _grandTotal;
                                                }

                                                decimal AMOUT = 0;
                                                output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                                decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                                _ActualsSum = _ActualsSum + AMOUT;
                                            }

                                            iCol = iCol + 2;
                                        }



                                        //output.Rows[iRow][output.Columns.Count - 3] = _previousSum;
                                        output.Rows[iRow][output.Columns.Count - 2] = _BudgetsSum;
                                        output.Rows[iRow][output.Columns.Count - 1] = _ActualsSum;
                                        _previousTot = _previousTot + _previousSum;
                                        _BudgetsTot = _BudgetsTot + _BudgetsSum;
                                        _ActualsTot = _ActualsTot + _ActualsSum;
                                        // output.Rows[iRow + 1][output.Columns.Count - 3] = _previousTot;
                                        output.Rows[iRow + 1][output.Columns.Count - 2] = _BudgetsTot;
                                        output.Rows[iRow + 1][output.Columns.Count - 1] = _ActualsTot;

                                    }

                                    #endregion
                                    _finaltable.Merge(output);
                                }
                               
                                
                            }
                            
                        }
                    
                    }

                }

                #endregion

                #region Monthwise report
                if (report_type == "Quarter")
                {
                    #region get date
                    DateTime tempdate = frm;
                    DateTime AsAtTo = to;
                    DateTime AsAtFrom = frm;

                    DateTime currentdate = DateTime.Today.Date;
                    DateTime StartDate = new DateTime(currentdate.Year, currentdate.Month, 1);
                    DateTime EndDate = StartDate.AddMonths(1).AddDays(-1);
                    tempdate = new DateTime(frm.Year, frm.Month, 1).AddMonths(3).AddDays(-1);
                    DataTable temptbl = new DataTable();
                    while (tempdate < to)
                    {
                        if (tempdate <= to)
                        {
                            temptbl = new DataTable();
                            temptbl = DashboardDal.getBudgetReport_tb_cat_wise(frm, tempdate, frmpy, topy, channel, null, cate, com, user);
                            final.Merge(temptbl);
                            frm = tempdate.AddDays(1);
                        }
                        tempdate = frm.AddMonths(3).AddDays(-1);
                    }
                    temptbl = new DataTable();
                    temptbl = DashboardDal.getBudgetReport_tb_cat_wise(frm, to, frmpy, topy, channel, null, cate, com, user);
                    final.Merge(temptbl);
                    #endregion
                    
                    #region create list
                   
                    if (final.Rows.Count > 0)
                    {
                        result = DataTableExtensions.ToGenericList<GLB_PROFITABILITY>(final, GLB_PROFITABILITY.Converter2);
                    }
                    else
                    {
                        error = "Records not found.";
                        throw new System.ArgumentException(error, "original");
                    }

                    #endregion
                    var year_month = result.GroupBy(x => new { x.YEAR, x.MONTH })
                    .Select(g => new { g.Key.YEAR, g.Key.MONTH, MyCount = g.Count() });
                    TimeSpan ts = orgfromdate - orgtodate;
                    int monthsApart = (12 * (orgfromdate.Year - orgtodate.Year) + orgfromdate.Month - orgtodate.Month) * -1;
                    decimal _quarter = (Convert.ToDecimal(monthsApart) / 3) + Convert.ToDecimal("0.51");
                    int quarter = Convert.ToInt32(Math.Round(_quarter, MidpointRounding.AwayFromZero));

                    #region Create table
                    DataTable output = new DataTable();
                    output.Columns.Add("Acc", typeof(string));
                    output.Columns.Add("Description", typeof(string));
                   
                    if (!string.IsNullOrEmpty(cate))
                    {
                        for (int i = 1; i <= quarter; i++)
                        {
                            string quter = i.ToString();
                            output.Columns.Add(quter + " Qtr" + " " + cate + " Budget", typeof(decimal));
                            output.Columns.Add(quter + " Qtr" + " " + cate + " Actual", typeof(decimal)); 
                        }
                      
                    }
                    else
                    {

                        Mst_Sys_Para = _GeneralDAL._Mst_Sys_Para(com, com, "BUDCTWISE");
                        if (Mst_Sys_Para.Count > 0)
                        {
                            string tags = Mst_Sys_Para.First().msp_rest_desc;
                            _itmcat = tags.Split(',').ToList();
                            for (int i = 1; i <= quarter; i++)
                            {
                                string quter = i.ToString();
                                foreach (var caten in _itmcat)
                                {
                                    output.Columns.Add(quter + " Qtr" + " " + caten + " Budget", typeof(decimal));
                                    output.Columns.Add(quter + " Qtr" + " " + caten + " Actual", typeof(decimal));
                                }
                                output.Columns.Add(quter + " Qtr" + " " + "Other" + " Budget", typeof(decimal));
                                output.Columns.Add(quter + " Qtr" + " " + "Other" + " Actual", typeof(decimal));

                            }
                           
                        }
                        else
                        {
                            error = "Item cat Records not found.";
                            throw new System.ArgumentException(error, "original");
                        }

                    }

                    output.Columns.Add("Budget", typeof(decimal));
                    output.Columns.Add("Actual", typeof(decimal));


                    #endregion

                    DateTime nextMonth = orgfromdate;
                    List<GLB_PROFITABILITY> _GLB_PROFITABILITYlLIST = new List<GLB_PROFITABILITY>();
                    DateTime temp_orgfromdate = nextMonth;
                    for (int i = 1; i <= quarter; i++)
                    {



                        string Qtr = i.ToString();
                        List<GLB_PROFITABILITY> temp_list_GLB_PROFITABILITY = new List<GLB_PROFITABILITY>();
                        string _year = temp_orgfromdate.Year.ToString();
                        string _month = temp_orgfromdate.Month.ToString();

                        List<GLB_PROFITABILITY> _firstmonth = result.Where(r => r.YEAR == Convert.ToInt32(_year) && r.MONTH == Convert.ToInt32(_month)).ToList();
                        temp_list_GLB_PROFITABILITY.AddRange(_firstmonth);
                        temp_orgfromdate = temp_orgfromdate.AddDays(1).AddMonths(1).AddDays(-1);


                        _year = temp_orgfromdate.Year.ToString();
                        _month = temp_orgfromdate.Month.ToString();
                        List<GLB_PROFITABILITY> _secondmonth = result.Where(r => r.YEAR == Convert.ToInt32(_year) && r.MONTH == Convert.ToInt32(_month)).ToList();
                        temp_list_GLB_PROFITABILITY.AddRange(_secondmonth);
                        temp_orgfromdate = temp_orgfromdate.AddDays(1).AddMonths(1).AddDays(-1);

                        _year = temp_orgfromdate.Year.ToString();
                        _month = temp_orgfromdate.Month.ToString();
                        List<GLB_PROFITABILITY> _thirdmonth = result.Where(r => r.YEAR == Convert.ToInt32(_year) && r.MONTH == Convert.ToInt32(_month)).ToList();
                        temp_list_GLB_PROFITABILITY.AddRange(_thirdmonth);
                        temp_orgfromdate = temp_orgfromdate.AddDays(1).AddMonths(1).AddDays(-1);

                        foreach (GLB_PROFITABILITY item in temp_list_GLB_PROFITABILITY)
                        {
                            item.MONTH = i;
                        }

                        #region grup list
                        List<GLB_PROFITABILITY> _temp = (from sg in temp_list_GLB_PROFITABILITY
                                                         //where sg.TPSD_ELEMENT_CD != "REFUND"
                                                         group sg by new
                                                         {
                                                             MONTH = sg.MONTH,
                                                             ACCOUNT = sg.ACCOUNT,
                                                             HED_CD = sg.HED_CD,
                                                             HED_DESC = sg.HED_DESC,
                                                             HED_ORDER = sg.HED_ORDER,
                                                             GRP_CD = sg.GRP_CD,
                                                             GRP_DESC = sg.GRP_DESC,
                                                             GRP_ORDER = sg.GRP_ORDER,
                                                             ITM_CAT1 = sg.ITM_CAT1,
                                                         } into sgd
                                                         select new GLB_PROFITABILITY
                                                         {
                                                             HED_CD = sgd.Select(x => x.HED_CD).FirstOrDefault(),
                                                             HED_DESC = sgd.Select(x => x.HED_DESC).FirstOrDefault(),
                                                             HED_ORDER = sgd.Select(x => x.HED_ORDER).FirstOrDefault(),
                                                             GRP_CD = sgd.Select(x => x.GRP_CD).FirstOrDefault(),
                                                             GRP_DESC = sgd.Select(x => x.GRP_DESC).FirstOrDefault(),
                                                             GRP_ORDER = sgd.Select(x => x.GRP_ORDER).FirstOrDefault(),
                                                             TARGET = sgd.Sum(x => x.TARGET),
                                                             ACTUAL = sgd.Sum(x => x.ACTUAL),
                                                             DIRECTION = sgd.Select(x => x.DIRECTION).FirstOrDefault(),
                                                             PREVIOUS = sgd.Sum(x => x.PREVIOUS),
                                                             BUDGET = sgd.Sum(x => x.BUDGET),
                                                             MONTH = sgd.Select(x => x.MONTH).FirstOrDefault(),
                                                             ACCOUNT = sgd.Select(x => x.ACCOUNT).FirstOrDefault(),
                                                             ITM_CAT1 = sgd.Select(x => x.ITM_CAT1).FirstOrDefault()
                                                         }).ToList();
                        #endregion


                        _GLB_PROFITABILITYlLIST.AddRange(_temp);
                    }


                    #region add table
                    var HED_ORDER_NEW = _GLB_PROFITABILITYlLIST.GroupBy(x => new { x.HED_ORDER, x.HED_DESC })
                          .Select(g => new { g.Key.HED_ORDER, g.Key.HED_DESC, MyCount = g.Count() });

                    if (string.IsNullOrEmpty(cate))
                    {
                        decimal _previousTot = 0;
                        decimal _BudgetsTot = 0;
                        decimal _ActualsTot = 0;

                        foreach (var _HED_ORDER in HED_ORDER_NEW)
                        {
                            output.Rows.Clear();
                            List<GLB_PROFITABILITY> temp_GLB_PROFITABILITY = result.Where(r => r.HED_ORDER == _HED_ORDER.HED_ORDER).ToList();
                            #region grup list
                            List<GLB_PROFITABILITY> _temp = (from sg in temp_GLB_PROFITABILITY
                                                             //where sg.TPSD_ELEMENT_CD != "REFUND"
                                                             group sg by new
                                                             {
                                                                 YEAR = sg.YEAR,
                                                                 MONTH = sg.MONTH,
                                                                 ACCOUNT = sg.ACCOUNT,
                                                                 HED_CD = sg.HED_CD,
                                                                 HED_DESC = sg.HED_DESC,
                                                                 HED_ORDER = sg.HED_ORDER,
                                                                 GRP_CD = sg.GRP_CD,
                                                                 GRP_DESC = sg.GRP_DESC,
                                                                 GRP_ORDER = sg.GRP_ORDER,
                                                                 ITM_CAT1 = sg.ITM_CAT1
                                                             } into sgd
                                                             select new GLB_PROFITABILITY
                                                             {
                                                                 YEAR = sgd.Select(x => x.YEAR).FirstOrDefault(),
                                                                 HED_CD = sgd.Select(x => x.HED_CD).FirstOrDefault(),
                                                                 HED_DESC = sgd.Select(x => x.HED_DESC).FirstOrDefault(),
                                                                 HED_ORDER = sgd.Select(x => x.HED_ORDER).FirstOrDefault(),
                                                                 GRP_CD = sgd.Select(x => x.GRP_CD).FirstOrDefault(),
                                                                 GRP_DESC = sgd.Select(x => x.GRP_DESC).FirstOrDefault(),
                                                                 GRP_ORDER = sgd.Select(x => x.GRP_ORDER).FirstOrDefault(),
                                                                 TARGET = sgd.Sum(x => x.TARGET),
                                                                 ACTUAL = sgd.Sum(x => x.ACTUAL),
                                                                 DIRECTION = sgd.Select(x => x.DIRECTION).FirstOrDefault(),
                                                                 PREVIOUS = sgd.Sum(x => x.PREVIOUS),
                                                                 BUDGET = sgd.Sum(x => x.BUDGET),
                                                                 MONTH = sgd.Select(x => x.MONTH).FirstOrDefault(),
                                                                 ACCOUNT = sgd.Select(x => x.ACCOUNT).FirstOrDefault(),
                                                                 ITM_CAT1 = sgd.Select(x => x.ITM_CAT1).FirstOrDefault()
                                                             }).ToList();
                            #endregion
                            temp_GLB_PROFITABILITY = new List<GLB_PROFITABILITY>();

                            temp_GLB_PROFITABILITY = _temp;
                            if (temp_GLB_PROFITABILITY.Count > 0)
                            {
                                decimal ROW_PREVIOUS_SUM = 0;
                                decimal ROW_BUDGET_SUM = 0;
                                decimal ROW_ACTUAL_SUM = 0;
                                
                                foreach (var caten in _itmcat)
                                {
                                    List<GLB_PROFITABILITY> _tempcat = temp_GLB_PROFITABILITY.Where(r => r.ITM_CAT1 == caten).ToList();
                                    foreach (GLB_PROFITABILITY item in _tempcat)
                                    {

                                       month_name=item.MONTH.ToString();
                                       #region table insert
                                        if (output.Rows.Count > 0)
                                        {
                                            DataTable _avilabledate = new DataTable();
                                            if (output.Rows.Count > 0)
                                            {
                                                var results = (from MyRows in output.AsEnumerable()
                                                               where
                                                                MyRows.Field<string>("Description") == item.GRP_DESC

                                                               select MyRows);
                                                if (results.Any())
                                                {
                                                    _avilabledate = results.CopyToDataTable();
                                                }

                                            }

                                            if (_avilabledate.Rows.Count > 0)
                                            {


                                                foreach (DataRow drn in output.Rows) // search whole table
                                                {
                                                    if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                                                    {
                                                        //drn[previous + " " + month_name] = item.PREVIOUS;
                                                        drn[month_name + " Qtr" + " " + caten + " Budget"] = item.BUDGET;
                                                        drn[month_name + " Qtr" + " " + caten + " Actual"] = item.ACTUAL;
                                                        ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                        ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                        ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                DataRow drow = output.NewRow();
                                                drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                                drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                                //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                                drow[month_name + " Qtr" + " " + caten + " Budget"] = item.BUDGET;// ins[i].DATE;
                                                drow[month_name + " Qtr" + " " + caten + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                output.Rows.Add(drow);
                                            }
                                        }
                                        else
                                        {

                                            DataRow drow = output.NewRow();
                                            drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                            drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                            //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                            drow[month_name + " Qtr" + " " + caten + " Budget"] = item.BUDGET;// ins[i].DATE;
                                            drow[month_name + " Qtr" + " " + caten + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                            ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                            ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                            ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                            output.Rows.Add(drow);
                                        }
                                        #endregion
                                    }
                                    temp_GLB_PROFITABILITY.RemoveAll(r => r.ITM_CAT1 == caten);
                                }
                                #region add other cat
                                if (temp_GLB_PROFITABILITY.Count > 0) //add other cat
                                {
                                    List<GLB_PROFITABILITY> _tempothcat = (from sg in temp_GLB_PROFITABILITY
                                                                           //where sg.TPSD_ELEMENT_CD != "REFUND"
                                                                           group sg by new
                                                                           {
                                                                               YEAR = sg.YEAR,
                                                                               MONTH = sg.MONTH,
                                                                               ACCOUNT = sg.ACCOUNT,
                                                                               HED_CD = sg.HED_CD,
                                                                               HED_DESC = sg.HED_DESC,
                                                                               HED_ORDER = sg.HED_ORDER,
                                                                               GRP_CD = sg.GRP_CD,
                                                                               GRP_DESC = sg.GRP_DESC,
                                                                               GRP_ORDER = sg.GRP_ORDER,

                                                                           } into sgd
                                                                           select new GLB_PROFITABILITY
                                                                           {
                                                                               YEAR = sgd.Select(x => x.YEAR).FirstOrDefault(),
                                                                               HED_CD = sgd.Select(x => x.HED_CD).FirstOrDefault(),
                                                                               HED_DESC = sgd.Select(x => x.HED_DESC).FirstOrDefault(),
                                                                               HED_ORDER = sgd.Select(x => x.HED_ORDER).FirstOrDefault(),
                                                                               GRP_CD = sgd.Select(x => x.GRP_CD).FirstOrDefault(),
                                                                               GRP_DESC = sgd.Select(x => x.GRP_DESC).FirstOrDefault(),
                                                                               GRP_ORDER = sgd.Select(x => x.GRP_ORDER).FirstOrDefault(),
                                                                               TARGET = sgd.Sum(x => x.TARGET),
                                                                               ACTUAL = sgd.Sum(x => x.ACTUAL),
                                                                               DIRECTION = sgd.Select(x => x.DIRECTION).FirstOrDefault(),
                                                                               PREVIOUS = sgd.Sum(x => x.PREVIOUS),
                                                                               BUDGET = sgd.Sum(x => x.BUDGET),
                                                                               MONTH = sgd.Select(x => x.MONTH).FirstOrDefault(),
                                                                               ACCOUNT = sgd.Select(x => x.ACCOUNT).FirstOrDefault()

                                                                           }).ToList();
                                    foreach (GLB_PROFITABILITY item in _tempothcat)
                                    {

                                        month_name = item.MONTH.ToString();
                                        #region table insert
                                        if (output.Rows.Count > 0)
                                        {
                                            DataTable _avilabledate = new DataTable();
                                            if (output.Rows.Count > 0)
                                            {
                                                var results = (from MyRows in output.AsEnumerable()
                                                               where
                                                                MyRows.Field<string>("Description") == item.GRP_DESC

                                                               select MyRows);
                                                if (results.Any())
                                                {
                                                    _avilabledate = results.CopyToDataTable();
                                                }

                                            }

                                            if (_avilabledate.Rows.Count > 0)
                                            {


                                                foreach (DataRow drn in output.Rows) // search whole table
                                                {
                                                    if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                                                    {
                                                        //drn[previous + " " + month_name] = item.PREVIOUS;
                                                        drn[month_name + " Qtr" + " " + "Other" + " Budget"] = item.BUDGET;
                                                        drn[month_name + " Qtr" + " " + "Other" + " Actual"] = item.ACTUAL;
                                                        ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                        ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                        ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                DataRow drow = output.NewRow();
                                                drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                                drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                                //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                                drow[month_name + " Qtr" + " " + "Other" + " Budget"] = item.BUDGET;
                                                drow[month_name + " Qtr" + " " + "Other" + " Actual"] = item.ACTUAL;
                                                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                output.Rows.Add(drow);
                                            }
                                        }
                                        else
                                        {

                                            DataRow drow = output.NewRow();
                                            drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                            drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                            //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                            drow[month_name + " " + "Other" + " Budget"] = item.BUDGET;// ins[i].DATE;
                                            drow[month_name + " " + "Other" + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                            ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                            ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                            ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                            output.Rows.Add(drow);
                                        }
                                        #endregion
                                    }

                                }
                                #endregion
                            }
                            #region insert sumnew
                            countRow = output.Rows.Count;
                            countCol = output.Columns.Count - 2;

                            drowTot = output.NewRow();
                            drowTot["Acc"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                            drowTot["Description"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                            output.Rows.Add(drowTot);

                            //decimal _previousTot = 0;
                            //decimal _BudgetsTot = 0;
                            //decimal _ActualsTot = 0;
                            for (int iRow = 0; iRow < countRow; iRow++)
                            {

                                int _lastIndexOfMainTable = _finaltable.Rows.Count == 0 ? -1 : _finaltable.Rows.Count - 1;

                                decimal _previousSum = 0;
                                decimal _BudgetsSum = 0;
                                decimal _ActualsSum = 0;
                                for (int iCol = 2; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;///////////////////

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _BudgetsSum = _BudgetsSum + AMOUT;
                                    }

                                    iCol = iCol + 2;
                                }

                                for (int iCol = 3; iCol < countCol; )
                                {
                                    DataColumn col = output.Columns[iCol];
                                    object cell = output.Rows[iRow].ItemArray[iCol];
                                    if (cell != null)
                                    {
                                        decimal _grandTotal = 0;
                                        decimal _currentValue = 0;
                                        decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                        decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                        if (iRow == 0 && _lastIndexOfMainTable > -1)
                                        {
                                            decimal _cumulativeSum = 0;
                                            decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                            _grandTotal = _cumulativeSum + _grandTotal;
                                        }

                                        decimal AMOUT = 0;
                                        output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                        decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                        _ActualsSum = _ActualsSum + AMOUT;
                                    }

                                    iCol = iCol + 2;
                                }



                                //output.Rows[iRow][output.Columns.Count - 3] = _previousSum;
                                output.Rows[iRow][output.Columns.Count - 2] = _BudgetsSum;
                                output.Rows[iRow][output.Columns.Count - 1] = _ActualsSum;
                                _previousTot = _previousTot + _previousSum;
                                _BudgetsTot = _BudgetsTot + _BudgetsSum;
                                _ActualsTot = _ActualsTot + _ActualsSum;
                                // output.Rows[iRow + 1][output.Columns.Count - 3] = _previousTot;
                                output.Rows[iRow + 1][output.Columns.Count - 2] = _BudgetsTot;
                                output.Rows[iRow + 1][output.Columns.Count - 1] = _ActualsTot;

                            }

                            #endregion
                            _finaltable.Merge(output);
                        }
                    }
                    else
                    {
                        decimal _previousTot = 0;
                        decimal _BudgetsTot = 0;
                        decimal _ActualsTot = 0;

                        foreach (var _HED_ORDER in HED_ORDER_NEW)
                        {
                            output.Rows.Clear();
                            List<GLB_PROFITABILITY> temp_GLB_PROFITABILITY = result.Where(r => r.HED_ORDER == _HED_ORDER.HED_ORDER).ToList();
                            #region grup list
                            List<GLB_PROFITABILITY> _temp = (from sg in temp_GLB_PROFITABILITY
                                                             //where sg.TPSD_ELEMENT_CD != "REFUND"
                                                             group sg by new
                                                             {
                                                                 YEAR = sg.YEAR,
                                                                 MONTH = sg.MONTH,
                                                                 ACCOUNT = sg.ACCOUNT,
                                                                 HED_CD = sg.HED_CD,
                                                                 HED_DESC = sg.HED_DESC,
                                                                 HED_ORDER = sg.HED_ORDER,
                                                                 GRP_CD = sg.GRP_CD,
                                                                 GRP_DESC = sg.GRP_DESC,
                                                                 GRP_ORDER = sg.GRP_ORDER,
                                                                 ITM_CAT1 = sg.ITM_CAT1
                                                             } into sgd
                                                             select new GLB_PROFITABILITY
                                                             {
                                                                 YEAR = sgd.Select(x => x.YEAR).FirstOrDefault(),
                                                                 HED_CD = sgd.Select(x => x.HED_CD).FirstOrDefault(),
                                                                 HED_DESC = sgd.Select(x => x.HED_DESC).FirstOrDefault(),
                                                                 HED_ORDER = sgd.Select(x => x.HED_ORDER).FirstOrDefault(),
                                                                 GRP_CD = sgd.Select(x => x.GRP_CD).FirstOrDefault(),
                                                                 GRP_DESC = sgd.Select(x => x.GRP_DESC).FirstOrDefault(),
                                                                 GRP_ORDER = sgd.Select(x => x.GRP_ORDER).FirstOrDefault(),
                                                                 TARGET = sgd.Sum(x => x.TARGET),
                                                                 ACTUAL = sgd.Sum(x => x.ACTUAL),
                                                                 DIRECTION = sgd.Select(x => x.DIRECTION).FirstOrDefault(),
                                                                 PREVIOUS = sgd.Sum(x => x.PREVIOUS),
                                                                 BUDGET = sgd.Sum(x => x.BUDGET),
                                                                 MONTH = sgd.Select(x => x.MONTH).FirstOrDefault(),
                                                                 ACCOUNT = sgd.Select(x => x.ACCOUNT).FirstOrDefault(),
                                                                 ITM_CAT1 = sgd.Select(x => x.ITM_CAT1).FirstOrDefault()
                                                             }).ToList();
                            #endregion
                            temp_GLB_PROFITABILITY = new List<GLB_PROFITABILITY>();

                            temp_GLB_PROFITABILITY = _temp;
                            if (temp_GLB_PROFITABILITY.Count > 0)
                            {
                                decimal ROW_PREVIOUS_SUM = 0;
                                decimal ROW_BUDGET_SUM = 0;
                                decimal ROW_ACTUAL_SUM = 0;
                                if (!string.IsNullOrEmpty(cate))
                                {
                                    foreach (GLB_PROFITABILITY item in temp_GLB_PROFITABILITY)
                                    {
                                        month_name = item.MONTH.ToString();
                                        #region table insert
                                        if (output.Rows.Count > 0)
                                        {
                                            DataTable _avilabledate = new DataTable();
                                            if (output.Rows.Count > 0)
                                            {
                                                var results = (from MyRows in output.AsEnumerable()
                                                               where
                                                                MyRows.Field<string>("Description") == item.GRP_DESC

                                                               select MyRows);
                                                if (results.Any())
                                                {
                                                    _avilabledate = results.CopyToDataTable();
                                                }

                                            }

                                            if (_avilabledate.Rows.Count > 0)
                                            {


                                                foreach (DataRow drn in output.Rows) // search whole table
                                                {
                                                    if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                                                    {
                                                        //drn[previous + " " + month_name] = item.PREVIOUS;
                                                        drn[month_name + " Qtr" + " " + cate + " Budget"] = item.BUDGET;
                                                        drn[month_name + " Qtr" + " " + cate + " Actual"] = item.ACTUAL;
                                                        ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                        ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                        ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                DataRow drow = output.NewRow();
                                                drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                                drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                                //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                                drow[month_name + " Qtr" + " " + cate + " Budget"] = item.BUDGET;// ins[i].DATE;
                                                drow[month_name + " Qtr" + " " + cate + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                                output.Rows.Add(drow);
                                            }
                                        }
                                        else
                                        {

                                            DataRow drow = output.NewRow();
                                            drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                                            drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                                            //drow[previous + " " + month_name] = item.PREVIOUS;// ins[i].DATE;
                                            drow[month_name + " Qtr" + " " + cate + " Budget"] = item.BUDGET;// ins[i].DATE;
                                            drow[month_name + " Qtr" + " " + cate + " Actual"] = item.ACTUAL;// ins[i].DATE;
                                            ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                                            ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                                            ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                                            output.Rows.Add(drow);
                                        }
                                        #endregion
                                    }
                                    #region insert sumnew
                                    countRow = output.Rows.Count;
                                    countCol = output.Columns.Count - 2;

                                    drowTot = output.NewRow();
                                    drowTot["Acc"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                                    drowTot["Description"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                                    output.Rows.Add(drowTot);

                                    //decimal _previousTot = 0;
                                    //decimal _BudgetsTot = 0;
                                    //decimal _ActualsTot = 0;
                                    for (int iRow = 0; iRow < countRow; iRow++)
                                    {

                                        int _lastIndexOfMainTable = _finaltable.Rows.Count == 0 ? -1 : _finaltable.Rows.Count - 1;

                                        decimal _previousSum = 0;
                                        decimal _BudgetsSum = 0;
                                        decimal _ActualsSum = 0;
                                        for (int iCol = 2; iCol < countCol; )
                                        {
                                            DataColumn col = output.Columns[iCol];
                                            object cell = output.Rows[iRow].ItemArray[iCol];
                                            if (cell != null)
                                            {
                                                decimal _grandTotal = 0;
                                                decimal _currentValue = 0;
                                                decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                                decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);
                                                output.Rows[countRow][iCol] = _grandTotal + _currentValue;///////////////////

                                                if (iRow == 0 && _lastIndexOfMainTable > -1)
                                                {
                                                    decimal _cumulativeSum = 0;
                                                    decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                                    _grandTotal = _cumulativeSum + _grandTotal;
                                                }

                                                decimal AMOUT = 0;
                                                output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                                decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                                _BudgetsSum = _BudgetsSum + AMOUT;
                                            }

                                            iCol = iCol + 2;
                                        }

                                        for (int iCol = 3; iCol < countCol; )
                                        {
                                            DataColumn col = output.Columns[iCol];
                                            object cell = output.Rows[iRow].ItemArray[iCol];
                                            if (cell != null)
                                            {
                                                decimal _grandTotal = 0;
                                                decimal _currentValue = 0;
                                                decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                                                decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                                                if (iRow == 0 && _lastIndexOfMainTable > -1)
                                                {
                                                    decimal _cumulativeSum = 0;
                                                    decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                                                    _grandTotal = _cumulativeSum + _grandTotal;
                                                }

                                                decimal AMOUT = 0;
                                                output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                                                decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                                                _ActualsSum = _ActualsSum + AMOUT;
                                            }

                                            iCol = iCol + 2;
                                        }



                                        //output.Rows[iRow][output.Columns.Count - 3] = _previousSum;
                                        output.Rows[iRow][output.Columns.Count - 2] = _BudgetsSum;
                                        output.Rows[iRow][output.Columns.Count - 1] = _ActualsSum;
                                        _previousTot = _previousTot + _previousSum;
                                        _BudgetsTot = _BudgetsTot + _BudgetsSum;
                                        _ActualsTot = _ActualsTot + _ActualsSum;
                                        // output.Rows[iRow + 1][output.Columns.Count - 3] = _previousTot;
                                        output.Rows[iRow + 1][output.Columns.Count - 2] = _BudgetsTot;
                                        output.Rows[iRow + 1][output.Columns.Count - 1] = _ActualsTot;

                                    }

                                    #endregion
                                    _finaltable.Merge(output);
                                }


                            }

                        }

                    }
                    //foreach (var _HED_ORDER in HED_ORDER_NEW)
                    //{
                    //    output.Rows.Clear();

                    //    List<GLB_PROFITABILITY> temp_GLB_PROFITABILITY = _GLB_PROFITABILITYlLIST.Where(r => r.HED_ORDER == _HED_ORDER.HED_ORDER).ToList();
                    //    if (temp_GLB_PROFITABILITY.Count > 0)
                    //    {

                    //        decimal COL_PREVIOUS_SUM = 0;
                    //        decimal COL_BUDGET_SUM = 0;
                    //        decimal COL_ACTUAL_SUM = 0;
                    //        decimal ROW_PREVIOUS_SUM = 0;
                    //        decimal ROW_BUDGET_SUM = 0;
                    //        decimal ROW_ACTUAL_SUM = 0;
                    //        foreach (GLB_PROFITABILITY item in temp_GLB_PROFITABILITY)
                    //        {
                    //            string Qtr = item.MONTH.ToString();

                    //            #region table insert
                    //            if (output.Rows.Count > 0)
                    //            {
                    //                DataTable _avilabledate = new DataTable();
                    //                if (output.Rows.Count > 0)
                    //                {
                    //                    var results = (from MyRows in output.AsEnumerable()
                    //                                   where
                    //                                    MyRows.Field<string>("Description") == item.GRP_DESC

                    //                                   select MyRows);
                    //                    if (results.Any())
                    //                    {
                    //                        _avilabledate = results.CopyToDataTable();
                    //                    }

                    //                }

                    //                if (_avilabledate.Rows.Count > 0)
                    //                {


                    //                    foreach (DataRow drn in output.Rows) // search whole table
                    //                    {
                    //                        if (drn["Description"].ToString() == item.GRP_DESC) // if id==2
                    //                        {
                    //                           // drn["Previous" + " " + Qtr + " Qtr"] = item.PREVIOUS;
                    //                            drn[Qtr + " Qtr" + " Budget"] = item.BUDGET;
                    //                            drn[Qtr + " Qtr" + " Actual"] = item.ACTUAL;
                    //                            ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                    //                            ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                    //                            ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                    //                        }
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    DataRow drow = output.NewRow();
                    //                    drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                    //                    drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                    //                   // drow["Previous" + " " + Qtr + " Qtr"] = item.PREVIOUS;// ins[i].DATE;
                    //                    drow[Qtr + " Qtr" + " Budget"] = item.BUDGET;// ins[i].DATE;
                    //                    drow[Qtr + " Qtr" + " Actual"] = item.ACTUAL;// ins[i].DATE;
                    //                    ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                    //                    ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                    //                    ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                    //                    output.Rows.Add(drow);
                    //                }
                    //            }
                    //            else
                    //            {

                    //                DataRow drow = output.NewRow();
                    //                drow["Acc"] = item.ACCOUNT;// ins[i].DATE;
                    //                drow["Description"] = item.GRP_DESC;// ins[i].DATE;
                    //               // drow["Previous" + " " + Qtr + " Qtr"] = item.PREVIOUS;// ins[i].DATE;
                    //                drow[Qtr + " Qtr" + " Budget"] = item.BUDGET;// ins[i].DATE;
                    //                drow[Qtr + " Qtr" + " Actual"] = item.ACTUAL;// ins[i].DATE;
                    //                ROW_PREVIOUS_SUM = ROW_PREVIOUS_SUM + item.PREVIOUS;
                    //                ROW_BUDGET_SUM = ROW_BUDGET_SUM + item.BUDGET;
                    //                ROW_ACTUAL_SUM = ROW_ACTUAL_SUM + item.ACTUAL;
                    //                output.Rows.Add(drow);
                    //            }
                    //            #endregion
                    //        }

                    //        #region insert sumnew
                    //         countRow = output.Rows.Count;
                    //         countCol = output.Columns.Count - 3;

                    //         drowTot = output.NewRow();
                    //        drowTot["Acc"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                    //        drowTot["Description"] = _HED_ORDER.HED_DESC;// ins[i].DATE;
                    //        output.Rows.Add(drowTot);

                    //        decimal _previousTot = 0;
                    //        decimal _BudgetsTot = 0;
                    //        decimal _ActualsTot = 0;
                    //        for (int iRow = 0; iRow < countRow; iRow++)
                    //        {

                    //            int _lastIndexOfMainTable = _finaltable.Rows.Count == 0 ? -1 : _finaltable.Rows.Count - 1;

                    //            decimal _previousSum = 0;
                    //            decimal _BudgetsSum = 0;
                    //            decimal _ActualsSum = 0;
                    //            for (int iCol = 2; iCol < countCol; )
                    //            {
                    //                DataColumn col = output.Columns[iCol];
                    //                object cell = output.Rows[iRow].ItemArray[iCol];
                    //                if (cell != null)
                    //                {
                    //                    decimal _grandTotal = 0;
                    //                    decimal _currentValue = 0;
                    //                    decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                    //                    decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);
                    //                    output.Rows[countRow][iCol] = _grandTotal + _currentValue;

                    //                    if (iRow == 0 && _lastIndexOfMainTable > -1)
                    //                    {
                    //                        decimal _cumulativeSum = 0;
                    //                        decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                    //                        _grandTotal = _cumulativeSum + _grandTotal;
                    //                    }

                    //                    decimal AMOUT = 0;
                    //                    output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                    //                    decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                    //                    _previousSum = _previousSum + AMOUT;
                    //                }

                    //                iCol = iCol + 3;
                    //            }

                    //            for (int iCol = 3; iCol < countCol; )
                    //            {
                    //                DataColumn col = output.Columns[iCol];
                    //                object cell = output.Rows[iRow].ItemArray[iCol];
                    //                if (cell != null)
                    //                {
                    //                    decimal _grandTotal = 0;
                    //                    decimal _currentValue = 0;
                    //                    decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                    //                    decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                    //                    if (iRow == 0 && _lastIndexOfMainTable > -1)
                    //                    {
                    //                        decimal _cumulativeSum = 0;
                    //                        decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                    //                        _grandTotal = _cumulativeSum + _grandTotal;
                    //                    }

                    //                    decimal AMOUT = 0;
                    //                    output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                    //                    decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                    //                    _BudgetsSum = _BudgetsSum + AMOUT;
                    //                }

                    //                iCol = iCol + 3;
                    //            }

                    //            for (int iCol = 4; iCol < countCol; )
                    //            {
                    //                DataColumn col = output.Columns[iCol];
                    //                object cell = output.Rows[iRow].ItemArray[iCol];
                    //                if (cell != null)
                    //                {
                    //                    decimal _grandTotal = 0;
                    //                    decimal _currentValue = 0;
                    //                    decimal.TryParse(output.Rows[iRow][iCol].ToString(), out _currentValue);
                    //                    decimal.TryParse(output.Rows[countRow][iCol].ToString(), out _grandTotal);

                    //                    if (iRow == 0 && _lastIndexOfMainTable > -1)
                    //                    {
                    //                        decimal _cumulativeSum = 0;
                    //                        decimal.TryParse(_finaltable.Rows[_lastIndexOfMainTable][iCol].ToString(), out _cumulativeSum);
                    //                        _grandTotal = _cumulativeSum + _grandTotal;
                    //                    }

                    //                    decimal AMOUT = 0;
                    //                    output.Rows[countRow][iCol] = _grandTotal + _currentValue;
                    //                    decimal.TryParse(output.Rows[iRow].ItemArray[iCol].ToString(), out AMOUT);
                    //                    _ActualsSum = _ActualsSum + AMOUT;
                    //                }

                    //                iCol = iCol + 3;
                    //            }

                    //            output.Rows[iRow][output.Columns.Count - 3] = _previousSum;
                    //            output.Rows[iRow][output.Columns.Count - 2] = _BudgetsSum;
                    //            output.Rows[iRow][output.Columns.Count - 1] = _ActualsSum;
                    //            _previousTot = _previousTot + _previousSum;
                    //            _BudgetsTot = _BudgetsTot + _BudgetsSum;
                    //            _ActualsTot = _ActualsTot + _BudgetsSum;
                    //            output.Rows[iRow + 1][output.Columns.Count - 3] = _previousTot;
                    //            output.Rows[iRow + 1][output.Columns.Count - 2] = _BudgetsTot;
                    //            output.Rows[iRow + 1][output.Columns.Count - 1] = _ActualsTot;

                    //        }

                    //        #endregion




                    //    }
                    //    _finaltable.Merge(output);
                    //}
                    #endregion




                }

                #endregion

                result = result;


                string _filePath = ExportExcel2007(com, user, _finaltable, out error);
                #region send mail
                if (_finaltable.Rows.Count != 0)
                {
                    InventoryDAL _inventoryDAL = new InventoryDAL();
                    DataTable _dtEmail = _inventoryDAL.GetUserNameByUserID(user);
                    if (!string.IsNullOrEmpty(_dtEmail.Rows[0]["SE_EMAIL"].ToString()))
                    {
                        GeneralDAL _generalDAL = new GeneralDAL();
                        SmtpClient smtpClient = new SmtpClient();
                        MailMessage message = new MailMessage();
                        MailAddress fromAddress = new MailAddress(_generalDAL.GetMailAddress(), _generalDAL.GetMailDispalyName());

                        smtpClient.Host = _generalDAL.GetMailHost();
                        smtpClient.Port = 25;
                        message.From = fromAddress;
                        string FOOTER = _generalDAL.GetMailFooterMsg();
                        string _email = "";
                        // string _docNo = _docNo.Replace("Normal:", "");
                        _email = "Generated report path as follows" + Environment.NewLine;
                        _email += _filePath + Environment.NewLine + Environment.NewLine;
                        //_email = _email + "Approved #-" + _docNo + " <br><P>";
                        _email = _email + "<br>" + "<br><br>" + "** This is an auto generated mail from Abans infor portal. Please don't Reply ** ";
                        message.To.Add(_dtEmail.Rows[0]["SE_EMAIL"].ToString());
                        //message.Bcc.Add("amilasanjeewa@abansgroup.com");
                        message.Subject = "Budget Report";
                        //message.CC.Add(new MailAddress(_info.Mmi_superior_mail));
                        //message.Bcc.Add(new MailAddress(""));
                        message.IsBodyHtml = false;
                        message.Body = _email;
                        message.IsBodyHtml = true;
                        message.DeliveryNotificationOptions = DeliveryNotificationOptions.OnSuccess;
                        // Send SMTP mail
                        smtpClient.Send(message);
                    }
                }
                #endregion
                DashboardDal.TransactionCommit();
                //A:
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
                DashboardDal.TransactionRollback();
                _securityDAL.TransactionRollback();
                _financialDAL.TransactionRollback();
            }
            return result;
        }
        public List<INVENTORY_SHIPMENT> getInventoryShipmentdet(Int32 pagenum, Int32 pagesize, string companylst, string runtp, DateTime frmdt, DateTime todt, string BrandMngr, string Brand, string MainCat, string txtModel, string txtItem, out List<ITEM_BI_AGE> ageitem, out List<SI_BAL_DET> sibal, out string error)
        {
            error = "";
            List<INVENTORY_SHIPMENT> result = new List<INVENTORY_SHIPMENT>();
            ageitem = new List<ITEM_BI_AGE>();
            sibal = new List<SI_BAL_DET>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                GeneralDAL _GeneralDAL = new GeneralDAL();
                DashboardDal.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BI_INVSHIP") == true)
                {
                    DashboardDal.ConnectionOpen_DR();
                }
                result = DashboardDal.getInvShipDetails( pagenum, pagesize,companylst,runtp,frmdt,todt,BrandMngr,Brand,MainCat,txtModel,txtItem);
                string itemcode = "";
                if (result.Count > 0)
                {
                    foreach (INVENTORY_SHIPMENT itm in result)
                    {
                        itemcode = (itemcode != "") ? itemcode + "," + itm.ITEM : itm.ITEM;
                    }
                    DateTime mnthend = new DateTime(todt.Year, todt.Month, 1).AddDays(-1).Date;
                    ageitem = DashboardDal.getItemAgeDetails(mnthend, itemcode,companylst);
                    if (ageitem.Count > 0)
                    {
                        foreach (ITEM_BI_AGE i in ageitem)
                        {
                            i.BRAND_MNGR = result.FirstOrDefault(x => x.ITEM == i.ITEM_CODE).MANAGER;
                            i.BRAND_MNGR_NAME = result.FirstOrDefault(x => x.ITEM == i.ITEM_CODE).NAME;
                        }
                    }
                    sibal = DashboardDal.getSiItemBalDet(itemcode,companylst);
                    if (sibal.Count > 0)
                    {
                        foreach (SI_BAL_DET i in sibal)
                        { 
                            i.BM_NAME = result.FirstOrDefault(x => x.ITEM == i.ITEM_CD).NAME;
            }
                    }
                    sibal.OrderByDescending(x=>x.BM_NAME);
                }
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }
        public List<INVENTORY_SHIPMENT_SI> loadBLItemDetails(Int32 pagenum, Int32 pagesize, string checkcom,string blno, out string error)
        {
            error = "";
            List<INVENTORY_SHIPMENT_SI> result = new List<INVENTORY_SHIPMENT_SI>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                GeneralDAL _GeneralDAL = new GeneralDAL();
                DashboardDal.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BI_INVSHIP") == true)
                {
                     DashboardDal.ConnectionOpen_DR();
                }
                result = DashboardDal.loadBLItemDetails(pagenum, pagesize, checkcom,blno);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return result;
        }

        //Added by Udesh 18-Jan-2019
        public List<ProfitCenterPerformanceFilter> getProfitCentersByShowroomMgr(string com, string channel, string subChannel, string area, string region, string zone, string pc_code, string opteam, string town, string district, string province, string userId)
        {
            DashboardDal = new DashboardDLL();
            DataTable _result = new DataTable();
            List<ProfitCenterPerformanceFilter> profCenters = null;

            _result = DashboardDal.GetPC_from_Hierachy_with_ShowroomMgr(com, channel, subChannel, area, region, zone, pc_code, opteam, town, district, province, userId);

            if (_result.Rows.Count > 0)
            {
                profCenters = DataTableExtensions.ToGenericList<ProfitCenterPerformanceFilter>(_result, ProfitCenterPerformanceFilter.Converter);
            }
            return profCenters;
        }

        //Added by Udesh 21-Jan-2019
        public List<SALES_MNGR_SEARCH_HEAD> getSalesManagers(string pgeNum, string pgeSize, string searchFld, string searchVal, string companies)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getSalesManagers(pgeNum, pgeSize, searchFld, searchVal, companies);
        }

        //Added by Udesh 21-Jan-2019
        public bool SaveCommaSeparatedValues(string commaValue, string valueType, string reportType, string userID, out string error)
        {
            bool ReturnValue = false;
            error = "";
            try
            {
                if (!string.IsNullOrEmpty(commaValue) && !string.IsNullOrEmpty(valueType) && !string.IsNullOrEmpty(reportType))
                {
                    string[] values = commaValue.Split(',');
                    int _result = 0;
                    foreach (string item in values)
                    {
                        DashboardDal = new DashboardDLL();
                        _result = DashboardDal.SaveCommaSeparatedValues(item.Trim(), valueType, reportType, userID);
                        DashboardDal = null;
                    }

                    if (_result > 0)
                    {
                        ReturnValue = true;
                    }
                }
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }


            return ReturnValue;
        }

        //Added by Udesh 21-Jan-2019
        public void RemoveCommaSeparatedValues(string reportType, string userID)
        {
            try
            {
                if (!string.IsNullOrEmpty(userID) && !string.IsNullOrEmpty(reportType))
                {
                    DashboardDal = new DashboardDLL();
                    DashboardDal.RemoveCommaSeparatedValues(reportType, userID);
                    DashboardDal = null;
                }
            }
            catch (Exception ex)
            {
                throw new Exception(string.Format("Exception in RemoveCommaSeparatedValues. Message : {0}", ex.Message.ToString()));
            }
        }

        //Added by Udesh 21-Jan-2019
        public List<BMT_REF_HEAD> getPcPerfomanceProperties(string _searchValue, string _pageNum, string _pageSize, string _serachType, string _propertyType)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getPcPerfomanceProperties(_searchValue, _pageNum, _pageSize, _serachType, _propertyType);
        }
        
        //Added by Udesh 21-Jan-2019
        public DataTable getPcPerformanceReport(string com, string pc, DateTime fromDate, DateTime toDate, bool isMainProfitCenter, string userId)
        {
            DashboardDal = new DashboardDLL();
            _securityDAL = new SecurityDAL();

            _securityDAL.ConnectionOpen();
            DashboardDal.ConnectionOpen();

            Int32 rem = DashboardDal.rempveTemporyParameters(userId, "PC_PERFORMANCE");

            if (!string.IsNullOrEmpty(com))
            {
                string[] values = com.Split(',');
                foreach (string item in values)
                {
                    Int32 addStatus = DashboardDal.addTemporyParameters(userId, "COM", "PC_PERFORMANCE", item.Trim());
                }
            }

            if (!string.IsNullOrEmpty(pc))
            {
                string[] values = pc.Split(',');
                foreach (string item in values)
                {
                    Int32 addStatus = DashboardDal.addTemporyParameters(userId, "PC", "PC_PERFORMANCE", item.Trim());
                }
            }

            if (_securityDAL.Is_Report_DR("SerialAgeAsat") == true) DashboardDal.ConnectionOpen_DR();
            return DashboardDal.getPcPerformanceReport(fromDate, toDate, isMainProfitCenter,userId);
        }

        //Added by Udesh 21-Jan-2019
        public DataTable getProfitCenterHeader(string column, string type)
        {
            DashboardDal = new DashboardDLL();
            return DashboardDal.getProfitCenterHeader(column, type);
        }
        public List<ITEM_SALE_SUMM> getBiSalesItemInv(string checkcom, string itemcode,DateTime fromdt,DateTime todt, out string error)
        {
            error = "";
            List<ITEM_SALE_SUMM> det = new List<ITEM_SALE_SUMM>();
            try
            {
                DashboardDal = new DashboardDLL();
                _securityDAL = new SecurityDAL();
                GeneralDAL _GeneralDAL = new GeneralDAL();
                DashboardDal.ConnectionOpen();
                if (_securityDAL.Is_Report_DR("BI_INVSHIP") == true)
                {
                    // DashboardDal.ConnectionOpen_DR();
                }
                det = DashboardDal.getBiSalesItemInv(checkcom, itemcode, fromdt, todt);
            }
            catch (Exception ex)
            {
                error = ex.Message.ToString();
            }
            return det;
        }


        // hushani 2019-01-31
        public DataTable GetAutoShowroomForEMS(string _com, string _ope_cd, string _cat2, string _cat3)
        {
            DataTable _dt = new DataTable();
            _financialDAL = new FinancialDAL();
            _financialDAL.ConnectionOpen();
            _dt = _financialDAL.GetAutoShowroomForEMS(_com, _ope_cd, _cat2, _cat3);
            _financialDAL.ConnectionClose();
            return _dt;
        }

    }
}
